class Config {
    appName = "SmartOrder";
    version = "2.0.2";
    publishDate = "17/03/2023";
    developer = "Tho PS";
    domain = "https://quytrevang.nguyenvanxuanphu.com";
    domain1 = "http://localhost";
    endpoint = {
        socket: "https://datafeed.vps.com.vn",
        getConfig: "/api/so/get-config",
        setConfig: "/api/so/set-config",
        getBackground: "/api/so/background",
        getChart: "/api/so/get-chart",
        report: "/api/so/report",
        register: "/api/auth/create-account",
        login: "/api/auth/login",
        logout: "/api/auth/logout",
        user: "/api/auth/so/user"
    };
    timeFrames = [
        { text: "Tick", value: 0 },
        { text: "1 min", value: 1 },
        { text: "2 min", value: 2 },
        { text: "3 min", value: 3 },
        { text: "5 min", value: 5 },
        { text: "7 min", value: 7 },
        { text: "10 min", value: 10 },
        { text: "15 min", value: 15 },
        { text: "30 min", value: 30 },
        { text: "1 day", value: 1440 }
    ];
    chartTypes = [
        { text: "Nến", value: "candlestick" },
        { text: "Đường", value: "line" },
        { text: "Thanh", value: "bar" }
    ];
}

class Alert {
    // Hàm khởi tạo
    constructor() {}
    // Các phương thức
    show = (
        status = "success",
        text = "message",
        autoclose = true,
        keep = false
    ) => {
        this.notify = new Notify({
            status: status,
            text: text,
            autoclose: autoclose,
            position: "right bottom"
        });
        this.keep = keep;
    };
    hide = () =>
        new Promise(resolve => {
            if (!this.keep) this.notify.close();
            else this.keep = false;
            setTimeout(() => resolve(), 500);
        });
}

class Crypto {
    key = "19AqVgG36ekVzc1HyEmE9vfA7PH78DFCwhdwUxJ7dns=";
    // Hàm khởi tạo
    constructor() {
        this.format = this.formatCrypto();
    }
    // Các phương thức
    formatCrypto = () => {
        return {
            stringify: cipherParams => {
                var j = {
                    ct: cipherParams.ciphertext.toString(CryptoJS.enc.Base64)
                };
                if (cipherParams.iv) j.iv = cipherParams.iv.toString();
                if (cipherParams.salt) j.s = cipherParams.salt.toString();
                return JSON.stringify(j);
            },
            parse: jsonStr => {
                var j = JSON.parse(jsonStr);
                var cipherParams = CryptoJS.lib.CipherParams.create({
                    ciphertext: CryptoJS.enc.Base64.parse(j.ct)
                });
                if (j.iv) cipherParams.iv = CryptoJS.enc.Hex.parse(j.iv);
                if (j.s) cipherParams.salt = CryptoJS.enc.Hex.parse(j.s);
                return cipherParams;
            }
        };
    };
    encrypt = text => {
        return CryptoJS.AES.encrypt(JSON.stringify(text), this.key, {
            format: this.format
        }).toString();
    };
    decrypt = encrypted => {
        return JSON.parse(
            CryptoJS.AES.decrypt(JSON.stringify(encrypted), this.key, {
                format: this.format
            }).toString(CryptoJS.enc.Utf8)
        );
    };
}

class Store {
    // Hàm khởi tạo
    constructor() {
        this.create();
    }

    // Các phương thức
    create = () => {
        return new Promise((resolve, reject) => {
            const request = indexedDB.open("vpsDB", 1);
            request.onupgradeneeded = e => {
                console.log("onupgradeneeded");
                this.store = e.target.result;
                this.store.createObjectStore("data", { keyPath: "time" });
                this.store.createObjectStore("order", { keyPath: "kind" });
                this.store.createObjectStore("marker", { keyPath: "time" });
                this.store.createObjectStore("line", { keyPath: "price" });
                this.store.createObjectStore("ruler", { keyPath: "point" });
                this.store.createObjectStore("alert", { keyPath: "price" });
                resolve();
            };
            request.onsuccess = e => {
                console.log("onsuccess");
                this.store = e.target.result;
                resolve();
            };
            request.onerror = () => {
                console.log("onerror");
                location.reload();
                reject();
            };
        });
    };
    get = tables => {
        var database = this.store;
        return new Promise(function(resolve, reject) {
            var tx = database.transaction(tables, "readonly");
            if (Array.isArray(tables)) {
                var stores = tables.map(table => tx.objectStore(table));
                var promises = stores.map(loadStore);
                Promise.all(promises).then(arr => resolve(arr));
            } else {
                var store = tx.objectStore(tables);
                loadStore(store).then(d => resolve(d));
            }
        });

        function loadStore(store) {
            return new Promise(function(resolve, reject) {
                const request = store.getAll();
                request.onsuccess = e => resolve(e.target.result);
                request.onerror = () => reject();
            });
        }
    };
    set = (table, data) => {
        const store = this.store
            .transaction(table, "readwrite")
            .objectStore(table);
        if (Array.isArray(data)) {
            if (data.length > 0) data.forEach(item => store.put(item));
        } else store.put(data);
    };
    clear = table => {
        var database = this.store;
        return new Promise(function(resolve, reject) {
            const request = database
                .transaction(table, "readwrite")
                .objectStore(table)
                .clear();

            request.onsuccess = () => {
                resolve();
            };

            request.onerror = err => {
                console.error(`Error to empty Object Store: ${table}`);
                reject();
            };
        });
    };
}

class Chart {
    // Các thuộc tính
    chart = {};
    series = {};
    data = { original: [], price: [], volume: [] };
    order = { entry: {}, tp: {}, sl: {} };
    lines = [];
    makers = [];
    ruler = { start: {}, end: {}, point: 0 };
    alerts = [];
    crosshair = {};
    hasCrosshair = false;
    hasNewData = false;
    alertAudio = new Audio(chrome.runtime.getURL("alert.wav"));
    UP_COLOR = "rgb(38,166,154)";
    DOWN_COLOR = "rgb(239,83,80)";

    // Hàm khởi tạo
    constructor(global, callback) {
        this.global = global;
        this.callback = callback;
        this.global.toggleSpinner = this.toggleSpinner;
        this.global.isInSession = this.isInSession;
        this.alertAudio.loop = true;
    }

    // Các phương thức
    create = () => {
        this.timeFrame = this.global.timeFrame;
        this.chartType = this.global.chartType;
        this.createContainerElement();
        this.createChart();
        this.createDataArea();
        this.createToolArea();
        this.createLegendArea();
        this.createFreeArea();
        if (this.global.isOpeningMarket) {
            this.secInterval = setInterval(
                () => this.secIntervalHandler(this),
                1000
            );
            this.minInterval = setInterval(
                () => this.minIntervalHandler(this),
                60000
            );
        }
        window.addEventListener("resize", () => this.eventChartResize(this));
        window.addEventListener("keydown", e => this.eventKeyPress(e, this));
    };
    remove = () => {
        window.removeEventListener("resize", () => this.eventChartResize(this));
        window.removeEventListener("keydown", e => this.eventKeyPress(e, this));
        clearInterval(this.secInterval);
        clearInterval(this.minInterval);
        //
        this.containerElement.remove();
    };
    createContainerElement = () => {
        var container = document.createElement("div");
        document.body.append(container);
        container.id = "lightWeightChartContainer";
        container.style.width = "100vw";
        container.style.height = "100vh";
        //
        var chartContainer = document.createElement("div");
        container.prepend(chartContainer);
        chartContainer.style.width = "100%";
        chartContainer.style.height = "100%";
        chartContainer.addEventListener("contextmenu", e =>
            this.eventChartContextmenu(e, this)
        );
        chartContainer.addEventListener("click", e =>
            this.eventChartClick(e, this)
        );
        this.containerElement = container;
        this.chartContainerElement = chartContainer;
    };
    createChart = () => {
        const chartOptions = {
            localization: { dateFormat: "dd/MM/yyyy", locale: "vi-VN" },
            rightPriceScale: {
                visible: true,
                scaleMargins: this.global.isVolume
                    ? { top: 0.1, bottom: 0.21 }
                    : { top: 0.2, bottom: 0.1 }
            },
            leftPriceScale: { visible: false },
            layout: {
                backgroundColor: "#000000",
                textColor: "#CCCCCC"
            },
            grid: {
                vertLines: {
                    color: "#1B1E27",
                    style: LightweightCharts.LineStyle.Dashed
                },
                horzLines: {
                    color: "#1B1E27",
                    style: LightweightCharts.LineStyle.Dashed
                }
            },
            crosshair: { mode: LightweightCharts.CrosshairMode.Normal },
            timeScale: {
                timeVisible: true,
                rightOffset: 20,
                minBarSpacing: 0.1
            }
        };
        this.chart = LightweightCharts.createChart(
            this.chartContainerElement,
            chartOptions
        );
        this.chart.subscribeCrosshairMove(e =>
            this.eventChartCrosshairMove(e, this)
        );
        this.chart.subscribeCustomPriceLineDragged(e =>
            this.eventPriceLineDrag(e, this)
        );
        //
        this.series.volume = this.chart.addHistogramSeries({
            priceScaleId: "volume",
            priceFormat: { type: "volume" },
            scaleMargins: { top: 0.8, bottom: 0 },
            visible: this.global.isVolume
        });
        //
        this.createPriceSeries();
        this.chart.timeScale().fitContent();
    };
    createPriceSeries = () => {
        switch (this.chartType) {
            case "candlestick":
                this.series.price = this.chart.addCandlestickSeries({
                    priceFormat: { minMove: 0.1 }
                });
                break;
            case "line":
                this.series.price = this.chart.addLineSeries({
                    color: "#CCCCCC",
                    priceFormat: { minMove: 0.1 }
                });
                break;
            case "bar":
                this.series.price = this.chart.addBarSeries({
                    thinBars: false,
                    priceFormat: { minMove: 0.1 }
                });
                break;
        }
    };
    createDataArea = () => {
        var container = document.createElement("div");
        container.id = "dataAreaDiv";
        container.className = "area";
        this.containerElement.append(container);
        //
        var img = document.createElement("img");
        img.id = "spinnerImg";
        img.style.opacity = 0;
        img.src = chrome.runtime.getURL("spinner.gif");
        container.append(img);
        this.spinnerImg = img;
        //
        var input = document.createElement("input");
        input.id = "dateInput";
        input.type = "date";
        input.value = moment().format("YYYY-MM-DD");
        input.className = "command";
        input.title = "Dữ liệu của ngày";
        input.addEventListener("change", e => {
            if (!!e.target.value) this.loadChartData();
        });
        container.append(input);
        this.dateInput = input;
        //
        var select = document.createElement("select");
        select.id = "chartTypeSelect";
        select.className = "command";
        select.title = "Loại biểu đồ giá";
        this.global.chartTypes.forEach((item, index) => {
            var option = document.createElement("option");
            option.value = item.value;
            option.text = item.text;
            select.appendChild(option);
        });
        select.value = this.chartType;
        select.addEventListener("change", e => {
            if (this.timeFrame == 0 && e.target.value != "line") {
                this.chartTypeSelect.value = "line";
                this.global.alert.show(
                    "warning",
                    "Chỉ có thể mở biểu đồ Đường trong khung thời gian Tick."
                );
                return false;
            }
            this.chartType = e.target.value;
            this.chart.remove();
            this.createChart();
            this.series.price.setData(this.data.price);
            this.series.volume.setData(this.data.volume);
            this.getToolsData();
        });
        container.append(select);
        this.chartTypeSelect = select;
        //
        var select = document.createElement("select");
        select.id = "timeFrameSelect";
        select.className = "command";
        select.title = "Khung thời gian [Ctrl+0]";
        this.global.timeFrames.forEach((item, index) => {
            var option = document.createElement("option");
            option.value = item.value;
            option.text = item.text;
            select.appendChild(option);
        });
        select.value = this.timeFrame;
        select.addEventListener("change", e => {
            this.timeFrame = e.target.value;
            this.loadChartData().then(() =>
                this.chart.timeScale().resetTimeScale()
            );
            if (this.timeFrame == 0 && this.chartType != "line") {
                this.chartTypeSelect.value = "line";
                this.chartTypeSelect.dispatchEvent(new Event("change"));
            }
        });
        container.append(select);
        this.timeFrameSelect = select;
        //
        var button = document.createElement("div");
        button.className = "command fa fa-refresh";
        button.title = "Làm mới [Ctrl+M]";
        button.addEventListener("click", () => this.loadChartData());
        container.append(button);
        this.refreshButton = button;
        //
        var button = document.createElement("div");
        button.className = "command fa fa-trash";
        button.title = "Xoá ngày khác [Ctrl+,]";
        button.addEventListener("click", () => {
            this.global.store.clear("data");
            this.loadChartData();
        });
        container.append(button);
        this.clearButton = button;
    };
    createToolArea = () => {
        var container = document.createElement("div");
        container.id = "toolAreaDiv";
        container.className = "area";
        this.containerElement.append(container);
        //
        var button = document.createElement("div");
        button.className = "command fa fa-minus";
        button.title = "Vẽ đường ngang [Ctrl+K][Ctrl+Shift+K]";
        button.addEventListener("click", e => {
            const selected = e.target.classList.contains("selected");
            document
                .querySelectorAll("#toolAreaDiv > .command")
                .forEach(el => el.classList.remove("selected"));
            if (!selected) e.target.classList.add("selected");
            e.stopPropagation();
        });
        button.addEventListener("contextmenu", e => {
            this.removeHorizontalLine();
            e.target.classList.remove("selected");
            e.preventDefault();
            e.stopPropagation();
        });
        container.append(button);
        this.drawLineButton = button;
        //
        var button = document.createElement("div");
        button.className = "command fa fa-map-marker";
        button.title = "Vẽ đánh dấu [Ctrl+L][Ctrl+Shift+L]";
        button.addEventListener("click", e => {
            const selected = e.target.classList.contains("selected");
            document
                .querySelectorAll("#toolAreaDiv > .command")
                .forEach(el => el.classList.remove("selected"));
            if (!selected) e.target.classList.add("selected");
            e.stopPropagation();
        });
        button.addEventListener("contextmenu", e => {
            this.removeMaker();
            e.target.classList.remove("selected");
            e.preventDefault();
            e.stopPropagation();
        });
        container.append(button);
        this.drawMarkerButton = button;
        //
        var button = document.createElement("div");
        button.className = "command fa fa-arrows-v";
        button.title = "Thước đo giá [Ctrl+;][Ctrl+Shift+;]";
        button.addEventListener("click", e => {
            const selected = e.target.classList.contains("selected");
            document
                .querySelectorAll("#toolAreaDiv > .command")
                .forEach(el => el.classList.remove("selected"));
            if (!selected) {
                e.target.classList.add("selected");
                this.removeRuler();
            }
            e.stopPropagation();
        });
        button.addEventListener("contextmenu", e => {
            this.removeRuler();
            e.target.classList.remove("selected");
            e.preventDefault();
            e.stopPropagation();
        });
        container.append(button);
        this.drawRulerButton = button;
        //
        var button = document.createElement("div");
        button.className = "command fa fa-bell-o";
        button.title = "Đặt cảnh báo [Ctrl+'][Ctrl+Shift+']";
        button.addEventListener("click", e => {
            const selected = e.target.classList.contains("selected");
            document
                .querySelectorAll("#toolAreaDiv > .command")
                .forEach(el => el.classList.remove("selected"));
            if (!selected) e.target.classList.add("selected");
            e.stopPropagation();
        });
        button.addEventListener("contextmenu", e => {
            this.removeAlert();
            e.target.classList.remove("selected");
            e.preventDefault();
            e.stopPropagation();
        });
        container.append(button);
        this.drawAlertButton = button;
    };
    createLegendArea = () => {
        var container = document.createElement("div");
        container.id = "legendAreaDiv";
        this.containerElement.append(container);
        //
        var p = document.createElement("p");
        container.append(p);
        this.priceLegendP = p;
        //
        var p = document.createElement("p");
        p.style.display = this.global.isVolume ? "block" : "none";
        container.append(p);
        this.volumeLegendP = p;
    };
    createFreeArea = () => {
        var container = this.containerElement;
        //
        var button = document.createElement("button");
        button.id = "cancelOrderButton";
        button.innerText = "X";
        button.style.display = "none";
        button.addEventListener("click", () => {
            this.callback.closeOrderPositionCallback();
            this.callback.cancelOrderCallback();
            this.toggleCancelOrderButton(false);
            this.removeOrderLine("entry");
            this.removeOrderLine("tp");
            this.removeOrderLine("sl");
            this.global.store.clear("order");
        });
        container.append(button);
        this.cancelOrderButton = button;
        //
        var button = document.createElement("button");
        button.id = "entryOrderButton";
        button.innerText = "Entry";
        button.style.display = "none";
        button.addEventListener("click", () => {
            this.callback.orderEntryPriceCallback(this.order);
            this.drawOrderLine("entry");
            this.toggleCancelOrderButton(true);
            this.hideOrderButton();
        });
        container.append(button);
        this.entryOrderButton = button;
        //
        var button = document.createElement("button");
        button.id = "tpslOrderButton";
        button.innerText = "TP/SL";
        button.style.display = "none";
        button.addEventListener("click", () => {
            this.callback.orderTpPriceCallback(this.order, true);
            this.drawOrderLine("tp");
            this.callback.orderSlPriceCallback(this.order, true);
            this.drawOrderLine("sl");
            this.hideOrderButton();
        });
        container.append(button);
        this.tpslOrderButton = button;
        //
        var button = document.createElement("div");
        button.id = "scrollButton";
        button.className = "command fa fa-angle-double-right";
        button.addEventListener("click", () =>
            this.chart.timeScale().scrollToRealTime()
        );
        container.append(button);
    };
    eventChartContextmenu = (e, self) => {
        if (self.global.isSmartPro) self.showOrderButton();
        e.preventDefault();
    };
    eventChartClick = (e, self) => {
        self.hideOrderButton();
        if (self.drawLineButton.classList.contains("selected"))
            self.drawHorizontalLine();
        else if (self.drawMarkerButton.classList.contains("selected"))
            self.drawMaker();
        else if (self.drawRulerButton.classList.contains("selected"))
            self.drawRuler();
        else if (self.drawAlertButton.classList.contains("selected"))
            self.drawAlert();
    };
    eventChartCrosshairMove = (e, self) => {
        if (e.time) {
            var price = e.seriesPrices.get(self.series.price);
            var volume = e.seriesPrices.get(self.series.volume);
            if (!!price && self.chartType != "line") price = price.close;
            self.updateLegend(price, volume);
            self.hasCrosshair = true;
            self.crosshair.time = e.time;
            self.crosshair.price = price;
        } else {
            self.hasCrosshair = false;
            if (!self.global.isMobile) {
                self.crosshair.time = null;
                self.crosshair.price = null;
            }
        }
        if (e.point != undefined) {
            self.crosshair.x = e.point.x;
            self.crosshair.y = e.point.y;
        }
    };
    eventPriceLineDrag = (e, self) => {
        var line = e.customPriceLine;
        var lineOptions = line.options();
        lineOptions.price = self.formatPrice(lineOptions.price);
        const oldPrice = +e.fromPriceString;
        const newPrice = lineOptions.price;
        switch (lineOptions.lineType) {
            case "order":
                if (newPrice != oldPrice) {
                    var isChanged = false;
                    const position = self.callback.getOrderPositionCallback();
                    if (lineOptions.kind == "entry") {
                        if (!position) {
                            isChanged = true;
                            self.order[lineOptions.kind].price = newPrice;
                            self.callback.orderEntryPriceCallback(self.order);
                            self.drawOrderLine(lineOptions.kind);
                        }
                    } else {
                        if (self.order.side * position > 0) {
                            isChanged = true;
                            self.order[lineOptions.kind].price = newPrice;
                            if (lineOptions.kind == "tp")
                                self.callback.orderTpPriceCallback(self.order);
                            else self.callback.orderSlPriceCallback(self.order);
                            self.drawOrderLine(lineOptions.kind);
                        }
                    }
                    //
                    if (!isChanged) {
                        line.applyOptions({ price: oldPrice });
                        self.global.alert.show(
                            "warning",
                            "Không được thay đổi."
                        );
                    }
                }
                break;
            case "line":
                self.global.store.set("line", {
                    price: oldPrice,
                    removed: true
                });
                self.global.store.set("line", lineOptions);
                self.drawLineButton.classList.remove("selected");
                break;
            case "ruler":
                if (lineOptions.point == 1) {
                    self.global.store.set("ruler", lineOptions);
                    if (self.ruler.point == 2) {
                        const distance = +self.ruler.end.options().title;
                        const endPrice = +(newPrice + distance).toFixed(1);
                        self.ruler.end.applyOptions({ price: endPrice });
                        self.global.store.set(
                            "ruler",
                            self.ruler.end.options()
                        );
                    }
                } else {
                    const startPrice = +self.ruler.start.options().price;
                    const distance = (newPrice - startPrice).toFixed(1);
                    line.applyOptions({ title: distance });
                    self.global.store.set("ruler", line.options());
                }
                break;
            case "alert":
                self.alertAudio.pause();
                self.global.store.set("alert", {
                    price: oldPrice,
                    removed: true
                });
                const currentPrice = self.data.price.slice(-1)[0].value;
                var title = newPrice >= currentPrice ? ">" : "<";
                line.applyOptions({ title: title });
                self.global.store.set("alert", line.options());
                self.drawAlertButton.classList.remove("selected");
                break;
        }
    };
    //
    showOrderButton = () => {
        if (this.callback.getOrderPositionCallback()) {
            if (
                this.order.entry.hasOwnProperty("line") &&
                !this.order.tp.hasOwnProperty("line")
            ) {
                this.tpslOrderButton.style.left =
                    +(
                        this.crosshair.x +
                        (this.crosshair.x > innerWidth - 61 ? -61 : 1)
                    ) + "px";
                this.tpslOrderButton.style.top =
                    +(
                        this.crosshair.y +
                        (this.crosshair.y > innerHeight - 51 ? -51 : 1)
                    ) + "px";
                this.tpslOrderButton.style.display = "block";
            }
        } else {
            if (!this.order.entry.hasOwnProperty("line")) {
                const price = this.coordinateToPrice(this.crosshair.y);
                const side =
                    price >= this.data.price.slice(-1)[0].value ? 1 : -1;
                this.order.entry.price = price;
                this.order.side = side;

                this.entryOrderButton.style.left =
                    +(
                        this.crosshair.x +
                        (this.crosshair.x > innerWidth - 71 ? -71 : 1)
                    ) + "px";
                this.entryOrderButton.style.top =
                    +(
                        this.crosshair.y +
                        (this.crosshair.y > innerHeight - 61 ? -61 : 1)
                    ) + "px";
                this.entryOrderButton.style.background =
                    side > 0 ? "green" : "red";
                this.entryOrderButton.innerText = `${
                    side > 0 ? "LONG" : "SHORT"
                } ${price}`;
                this.entryOrderButton.style.display = "block";
            }
        }
    };
    hideOrderButton = () => {
        this.entryOrderButton.style.display = "none";
        this.tpslOrderButton.style.display = "none";
    };
    //
    drawOrderLine = kind => {
        var color, title;
        switch (kind) {
            case "entry":
                color = "silver";
                title = this.order.side > 0 ? "Long" : "Short";
                break;
            case "tp":
                color = "lime";
                title = Math.abs(
                    this.order.tp.price - this.order.entry.price
                ).toFixed(1);
                break;
            case "sl":
                color = "red";
                title = Math.abs(
                    this.order.sl.price - this.order.entry.price
                ).toFixed(1);
                break;
        }
        if (this.order[kind].hasOwnProperty("line")) {
            this.order[kind].line.applyOptions({
                price: this.order[kind].price,
                title: title
            });
        } else {
            this.order[kind].line = this.series.price.createPriceLine({
                lineType: "order",
                kind: kind,
                price: this.order[kind].price,
                color: color,
                lineWidth: 1,
                lineStyle: LightweightCharts.LineStyle.Solid,
                title: title,
                draggable: true
            });
        }
        this.global.store.set("order", {
            kind: kind,
            price: +this.order[kind].price,
            side: this.order.side
        });
    };
    removeOrderLine = kind => {
        if (this.order[kind].hasOwnProperty("line")) {
            this.series.price.removePriceLine(this.order[kind].line);
            delete this.order[kind].line;
        }
    };
    //
    drawHorizontalLine = () => {
        const TYPE = "line";
        const price = this.formatPrice(
            this.coordinateToPrice(this.crosshair.y)
        );
        const existIndex = this.lines.findIndex(line => {
            const ops = line.options();
            return (ops.type = TYPE && +ops.price == price);
        });
        if (existIndex != -1) {
            const removeLine = this.lines.splice(existIndex, 1);
            this.series.price.removePriceLine(removeLine[0]);
            this.global.store.set("line", { price: price, removed: true });
        } else {
            const options = {
                lineType: TYPE,
                price: price,
                color: "aqua",
                lineWidth: 1,
                lineStyle: LightweightCharts.LineStyle.Dotted,
                draggable: true
            };
            this.lines.push(this.series.price.createPriceLine(options));
            this.global.store.set("line", options);
        }
        this.drawLineButton.classList.remove("selected");
    };
    removeHorizontalLine = () => {
        this.lines.forEach(line => this.series.price.removePriceLine(line));
        this.lines = [];
        this.global.store.clear("line");
    };
    //
    drawMaker = () => {
        if (this.crosshair.time) {
            const markers = this.markers.filter(
                item => item.time != this.crosshair.time
            );
            if (markers.length == this.markers.length) {
                const dir =
                    this.crosshair.y >=
                    this.series.price.priceToCoordinate(this.crosshair.price);
                this.markers.push({
                    time: this.crosshair.time,
                    position: dir ? "belowBar" : "aboveBar",
                    color: dir ? "lime" : "red",
                    shape: dir ? "arrowUp" : "arrowDown"
                });
            } else this.markers = markers;
            this.series.price.setMarkers(this.markers);
            this.global.store
                .clear("marker")
                .then(() => this.global.store.set("marker", this.markers));
            //
            this.drawMarkerButton.classList.remove("selected");
        }
    };
    removeMaker = () => {
        this.markers = [];
        this.series.price.setMarkers([]);
        this.global.store.clear("marker");
    };
    //
    drawRuler = () => {
        const price = this.coordinateToPrice(this.crosshair.y);
        var options = {
            lineType: "ruler",
            price: price,
            color: "yellow",
            lineWidth: 1,
            lineStyle: LightweightCharts.LineStyle.Dotted,
            draggable: true
        };
        if (this.ruler.point == 0) {
            const point = 1;
            options.point = point;
            options.title = "0";
            this.ruler.start = this.series.price.createPriceLine(options);
            this.ruler.point = point;
            this.global.store.set("ruler", options);
        } else if (this.ruler.point == 1) {
            const startPrice = +this.ruler.start.options().price;
            const point = 2;
            options.point = point;
            options.title = (price - startPrice).toFixed(1);
            this.ruler.end = this.series.price.createPriceLine(options);
            this.ruler.point = point;
            this.global.store.set("ruler", options);
            this.drawRulerButton.classList.remove("selected");
        }
    };
    removeRuler = () => {
        if (this.ruler.point > 0) {
            this.series.price.removePriceLine(this.ruler.start);
            if (this.ruler.point > 1)
                this.series.price.removePriceLine(this.ruler.end);
            //
            this.ruler = { start: {}, end: {}, point: 0 };
            this.global.store.clear("ruler");
        }
    };
    //
    drawAlert = () => {
        const TYPE = "alert";
        const price = this.formatPrice(
            this.coordinateToPrice(this.crosshair.y)
        );
        const existIndex = this.alerts.findIndex(line => {
            const ops = line.options();
            return (ops.type = TYPE && +ops.price == price);
        });
        if (existIndex != -1) {
            const removeLine = this.alerts.splice(existIndex, 1);
            this.series.price.removePriceLine(removeLine[0]);
            this.global.store.set("alert", { price: price, removed: true });
        } else {
            const options = {
                lineType: TYPE,
                price: price,
                title:
                    price >= this.data.original.slice(-1)[0].price ? ">" : "<",
                color: "#FF00FF",
                lineWidth: 1,
                lineStyle: LightweightCharts.LineStyle.Dotted,
                draggable: true
            };
            this.alerts.push(this.series.price.createPriceLine(options));
            this.global.store.set("alert", options);
        }
        this.drawAlertButton.classList.remove("selected");
        this.alertAudio.pause();
    };
    removeAlert = () => {
        this.alerts.forEach(line => this.series.price.removePriceLine(line));
        this.alerts = [];
        this.global.store.clear("alert");
        this.alertAudio.pause();
    };
    //
    toggleCancelOrderButton = visible => {
        if (visible) {
            this.cancelOrderButton.style.display = "block";
            this.cancelOrderButton.style.background =
                this.order.side > 0 ? "green" : "red";
        } else this.cancelOrderButton.style.display = "none";
    };
    //
    updateLegend = (price, volume) => {
        if (!!price) this.priceLegendP.innerText = price;
        if (!!volume)
            this.volumeLegendP.innerText = volume.toLocaleString("en-US");
    };
    coordinateToPrice = y => {
        return this.formatPrice(this.series.price.coordinateToPrice(y));
    };
    formatPrice = price => {
        return +(+price.toFixed(1));
    };
    //
    loadChartData = () => {
        return new Promise(async (resolve, reject) => {
            this.toggleSpinner(true);
            const svData = await this.getServerData();
            start: while (true) {
                this.hasNewData = false;
                const lcData = await this.global.store.get("data");
                const ids = new Set(svData.map(d => d.time));
                const data = [
                    ...svData,
                    ...lcData.filter(d => !ids.has(d.time))
                ].sort((a, b) => a.time - b.time);
                if (this.hasNewData) continue start;
                this.global.store
                    .clear("data")
                    .then(() => this.global.store.set("data", data));
                //
                this.data = data.reduce(
                    (r, item) => this.generateChartData(r, item),
                    {
                        original: [],
                        price: [],
                        volume: []
                    }
                );
                // console.log("data: ", this.data);
                //
                if (!!this.data.original.length) {
                    this.series.price.setData(this.data.price);
                    this.series.volume.setData(this.data.volume);
                    this.updateLegend(
                        this.data.price.slice(-1)[0].value,
                        this.data.volume.slice(-1)[0].value
                    );
                }
                //
                this.toggleSpinner(false);
                resolve();
                break;
            }
        });
    };
    updateChartData = param => {
        this.hasNewData = true;
        this.data = this.generateChartData(this.data, param);
        const lastPrice = this.data.price.slice(-1)[0];
        const lastVolume = this.data.volume.slice(-1)[0];
        //
        if (this.timeFrame > 0) {
            this.series.price.setData(this.data.price);
            this.series.volume.setData(this.data.volume);
        } else {
            this.series.price.update(lastPrice);
            this.series.volume.update(lastVolume);
        }
        if (!this.hasCrosshair) {
            this.updateLegend(lastPrice.value, lastVolume.value);
        }
        //
        this.global.store.set("data", param);
        this.data.original.push(param);
    };
    getServerData = () => {
        return new Promise(async (resolve, reject) => {
            const date = this.dateInput.value;
            const data = this.global.crypto.encrypt({
                date: date,
                deviceId: this.global.deviceId
            });
            const url = this.global.domain + this.global.endpoint.getChart;
            start: while (true) {
                try {
                    var response = await fetch(url, {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                            Authorization: `Bearer ${this.global.accessToken}`
                        },
                        body: data
                    });
                    var json = await response.json();
                    json = this.global.crypto.decrypt(json);
                    // console.log("json: ", json);
                    if (!json.isOk) this.callback.alertInvalidAccessCallback();
                    resolve(json.data);
                    break;
                } catch (e) {
                    console.log(e);
                    // continue start;
                }
            }
        });
    };
    generateChartData = (r, item) => {
        var time = item.time + 7 * 60 * 60;
        var volumeColor = this.UP_COLOR;
        var volume = item.volume,
            openPrice = 0,
            highPrice = 0,
            lowPrice = 0;
        if (this.timeFrame > 0) {
            const period = 60 * this.timeFrame;
            const timeIndex = Math.floor(time / period);
            var isSameTime = false;
            if (!!r.price.length) {
                const prevTime = r.price.slice(-1)[0].time;
                if (timeIndex == Math.floor(prevTime / period))
                    isSameTime = true;
            }
            if (isSameTime) {
                const prevPrice = r.price.pop();
                openPrice = prevPrice.open;
                highPrice = prevPrice.high;
                lowPrice = prevPrice.low;
                if (item.price < lowPrice) lowPrice = item.price;
                if (item.price > highPrice) highPrice = item.price;
                //
                const prevVolume = r.volume.pop();
                volume += prevVolume.value;
                volumeColor =
                    item.price >= openPrice ? this.UP_COLOR : this.DOWN_COLOR;
            } else {
                openPrice = item.price;
                highPrice = item.price;
                lowPrice = item.price;
            }
            time = timeIndex * period;
        }
        r.original.push(item);
        r.price.push({
            time: time,
            value: item.price,
            open: openPrice,
            high: highPrice,
            low: lowPrice,
            close: item.price
        });
        r.volume.push({
            time: time,
            value: volume,
            color: volumeColor
        });
        //
        return r;
    };
    getToolsData = () => {
        return new Promise(async (resolve, reject) => {
            const order = await this.global.store.get("order");
            order.map(item => {
                this.order.side = item.side;
                this.order[item.kind].price = item.price;
                this.drawOrderLine(item.kind);
                if (item.kind == "entry") {
                    if (this.callback.getOrderPositionCallback()) {
                        this.order.entry.line.applyOptions({
                            draggable: false
                        });
                    }
                    this.toggleCancelOrderButton(true);
                }
            });
            //
            const lines = await this.global.store.get("line");
            lines.forEach(line => {
                if (!line.removed)
                    this.lines.push(this.series.price.createPriceLine(line));
            });
            //
            this.markers = await this.global.store.get("marker");
            this.series.price.setMarkers(this.markers);
            //
            const rulerLines = await this.global.store.get("ruler");
            if (rulerLines.length == 2) {
                rulerLines.forEach(line => {
                    this.ruler.point = 2;
                    if (line.point == 1)
                        this.ruler.start = this.series.price.createPriceLine(
                            line
                        );
                    else
                        this.ruler.end = this.series.price.createPriceLine(
                            line
                        );
                });
            }
            //
            const alertLines = await this.global.store.get("alert");
            alertLines.forEach(line => {
                if (!line.removed)
                    this.alerts.push(this.series.price.createPriceLine(line));
            });
            //
            resolve();
        });
    };
    connectSocket = () => {
        var self = this;
        var msg = { action: "join", list: self.global.symbol };
        var socket = io(self.global.endpoint.socket);
        socket.on("connect", () => socket.emit("regs", JSON.stringify(msg)));
        socket.on("reconnect", () => {
            self.loadChartData();
            if (self.isInSession()) socket.emit("regs", JSON.stringify(msg));
        });
        socket.on("stockps", data => {
            if (data.data.id == 3220) {
                const param = {
                    time: moment(
                        `${moment().format("YYYY-MM-DD")} ${data.data.time}`
                    ).unix(),
                    price: data.data.lastPrice,
                    volume: data.data.lastVol
                };
                self.updateChartData(param);
            }
        });
    };
    //
    secIntervalHandler = self => {
        if (self.callback.getOrderPositionCallback()) {
            if (
                self.global.isTpSl &&
                self.order.entry.hasOwnProperty("line") &&
                !self.order.tp.hasOwnProperty("line")
            ) {
                self.callback.orderTpPriceCallback(self.order, true);
                self.drawOrderLine("tp");
                self.callback.orderSlPriceCallback(self.order, true);
                self.drawOrderLine("sl");
                self.order.entry.line.applyOptions({
                    draggable: false
                });
                self.global.alert.show("success", "Đã mở vị thế.");
            }
        } else {
            if (self.order.tp.hasOwnProperty("line")) {
                self.callback.cancelOrderCallback();
                self.toggleCancelOrderButton(false);
                self.removeOrderLine("entry");
                self.removeOrderLine("tp");
                self.removeOrderLine("sl");
                self.global.store.clear("order");
                self.global.alert.show("success", "Đã đóng vị thế.");
            }
        }
        if (self.alertAudio.paused) {
            self.alerts.forEach(alert => {
                const ops = alert.options();
                if (!ops.removed && !!self.data.original.length) {
                    const currentPrice = self.data.original.slice(-1)[0].price;
                    if (
                        (ops.title == ">" && currentPrice >= ops.price) ||
                        (ops.title == "<" && currentPrice <= ops.price)
                    )
                        self.alertAudio.play();
                }
            });
        }
        if (moment().unix() == self.global.time.start) self.connectSocket();
    };
    minIntervalHandler = self => {
        if (self.isInSession()) self.loadChartData();
    };
    isInSession = () => {
        return (
            moment().unix() >= this.global.time.start &&
            moment().unix() <= this.global.time.end
        );
    };
    //
    toggleChartVolume = visible => {
        this.global.isVolume = visible;
        this.series.volume.applyOptions({ visible: visible });
        this.volumeLegendP.style.display = visible ? "block" : "none";
        this.chart.applyOptions({
            rightPriceScale: {
                scaleMargins: visible
                    ? { top: 0.1, bottom: 0.21 }
                    : { top: 0.2, bottom: 0.1 }
            }
        });
    };
    //
    toggleSpinner = visible => {
        this.spinnerImg.style.opacity = visible ? 1 : 0;
    };
    eventChartResize = self => {
        self.chart.resize(window.innerWidth, window.innerHeight);
    };
    eventKeyPress = (e, self) => {
        try {
            if (e.ctrlKey || e.metaKey) {
                if (e.shiftKey) {
                    switch (e.keyCode) {
                        case 39:
                            self.chart.timeScale().scrollToRealTime();
                            break;
                    }
                } else {
                    switch (e.keyCode) {
                        case 38:
                            self.chart.timeScale().applyOptions({
                                barSpacing:
                                    self.chart.options().timeScale.barSpacing +
                                    0.1
                            });
                            break;
                        case 40:
                            if (
                                options.timeScale.barSpacing >
                                options.timeScale.minBarSpacing
                            )
                                self.chart.timeScale().applyOptions({
                                    barSpacing:
                                        self.chart.options().timeScale
                                            .barSpacing - 0.1
                                });
                            break;
                        case 37:
                            self.ch
                                .timeScale()
                                .scrollToPosition(
                                    self.chart.timeScale().scrollPosition() - 10
                                );
                            break;
                        case 39:
                            self.ch
                                .timeScale()
                                .scrollToPosition(
                                    self.chart.timeScale().scrollPosition() + 10
                                );
                            break;
                        case 75:
                            self.drawLineButton.click();
                            break;
                        case 76:
                            self.drawMarkerButton.click();
                            break;
                        case 186:
                            self.drawRulerButton.click();
                            break;
                        case 222:
                            self.drawAlertButton.click();
                            break;
                        case 96:
                            if (
                                self.timeFrame !=
                                self.global.timeFrames[0].value
                            ) {
                                self.timeFrameSelect.value =
                                    self.global.timeFrames[0].value;
                                self.timeFrameSelect.dispatchEvent(
                                    new Event("change")
                                );
                            }
                            break;
                        case 97:
                            if (
                                self.timeFrame !=
                                self.global.timeFrames[1].value
                            ) {
                                self.timeFrameSelect.value =
                                    self.global.timeFrames[1].value;
                                self.timeFrameSelect.dispatchEvent(
                                    new Event("change")
                                );
                            }
                            break;
                        case 98:
                            if (
                                self.timeFrame !=
                                self.global.timeFrames[2].value
                            ) {
                                self.timeFrameSelect.value =
                                    self.global.timeFrames[2].value;
                                self.timeFrameSelect.dispatchEvent(
                                    new Event("change")
                                );
                            }
                            break;
                        case 99:
                            if (
                                self.timeFrame !=
                                self.global.timeFrames[3].value
                            ) {
                                self.timeFrameSelect.value =
                                    self.global.timeFrames[3].value;
                                self.timeFrameSelect.dispatchEvent(
                                    new Event("change")
                                );
                            }
                            break;
                        case 100:
                            if (
                                self.timeFrame !=
                                self.global.timeFrames[4].value
                            ) {
                                self.timeFrameSelect.value =
                                    self.global.timeFrames[4].value;
                                self.timeFrameSelect.dispatchEvent(
                                    new Event("change")
                                );
                            }
                            break;
                        case 101:
                            if (
                                self.timeFrame !=
                                self.global.timeFrames[5].value
                            ) {
                                self.timeFrameSelect.value =
                                    self.global.timeFrames[5].value;
                                self.timeFrameSelect.dispatchEvent(
                                    new Event("change")
                                );
                            }
                            break;
                        case 102:
                            if (
                                self.timeFrame !=
                                self.global.timeFrames[6].value
                            ) {
                                self.timeFrameSelect.value =
                                    self.global.timeFrames[6].value;
                                self.timeFrameSelect.dispatchEvent(
                                    new Event("change")
                                );
                            }
                            break;
                        case 103:
                            if (
                                self.timeFrame !=
                                self.global.timeFrames[7].value
                            ) {
                                self.timeFrameSelect.value =
                                    self.global.timeFrames[7].value;
                                self.timeFrameSelect.dispatchEvent(
                                    new Event("change")
                                );
                            }
                            break;
                        case 104:
                            if (
                                self.timeFrame !=
                                self.global.timeFrames[8].value
                            ) {
                                self.timeFrameSelect.value =
                                    self.global.timeFrames[8].value;
                                self.timeFrameSelect.dispatchEvent(
                                    new Event("change")
                                );
                            }
                            break;
                        case 105:
                            if (
                                self.timeFrame !=
                                self.global.timeFrames[9].value
                            ) {
                                self.timeFrameSelect.value =
                                    self.global.timeFrames[9].value;
                                self.timeFrameSelect.dispatchEvent(
                                    new Event("change")
                                );
                            }
                            break;
                        case 77:
                            self.refreshButton.click();
                            break;
                        case 188:
                            self.clearButton.click();
                            break;
                    }
                }
            }
        } catch (error) {}
    };
}

class Popup {
    // Các thuộc tính
    TK = "__so";

    // Hàm khởi tạo
    constructor(global, callback) {
        this.global = global;
        this.callback = callback;
        this.createContainerElement();
    }

    // Các phương thức
    createContainerElement = () => {
        var container = document.createElement("div");
        container.id = "optionViewContainer";
        document.body.append(container);
        this.containerElement = container;
    };
    createNoLoginElement = () => {
        this.createHeaderContainer();
        this.createLoginContainer();
        this.createRegisterContainer();
    };
    createHeaderContainer = () => {
        var div = document.createElement("div");
        div.id = "hearderContainer";
        this.containerElement.append(div);
        //
        var p = document.createElement("span");
        div.append(p);
        p.className = "title";
        p.innerText = this.global.appName;
        //
        var logout = document.createElement("span");
        div.append(logout);
        logout.className = "logout fa fa-sign-out";
        logout.title = "Đăng xuất";
        logout.style.display = "none";
        logout.addEventListener("click", () => this.logout(this));
        this.logoutButton = logout;
    };
    createLoginContainer = () => {
        var div = document.createElement("div");
        div.id = "loginContainer";
        div.className = "section";
        this.containerElement.append(div);
        this.loginContainer = div;
        //
        var wrapper = document.createElement("form");
        div.append(wrapper);
        wrapper.className = "wrapper";
        wrapper.addEventListener("submit", e => this.login(e, this));
        //
        var p = document.createElement("span");
        wrapper.append(p);
        p.className = "invalid";
        this.loginMessage = p;
        //
        var input = document.createElement("input");
        wrapper.append(input);
        input.id = "LoginUserName";
        input.type = "text";
        input.placeholder = "Email hoặc Số điện thoại";
        input.required = true;
        this.loginUsername = input;
        if (!this.global.isLoggedin) this.loginUsername.focus();
        //
        input = document.createElement("input");
        wrapper.append(input);
        input.id = "LoginPassword";
        input.type = "password";
        input.placeholder = "Mật khẩu";
        input.required = true;
        this.loginPassword = input;
        //
        var checkboxWrapper = document.createElement("div");
        checkboxWrapper.style.display = "flex";
        wrapper.append(checkboxWrapper);
        input = document.createElement("input");
        checkboxWrapper.append(input);
        input.type = "checkbox";
        input.style.width = "17px";
        this.loginRememberMe = input;
        var span = document.createElement("span");
        checkboxWrapper.append(span);
        span.innerHTML = "&ensp;Lưu đăng nhập";
        //
        var button = document.createElement("button");
        wrapper.append(button);
        button.innerText = "ĐĂNG NHẬP";
        button.type = "submit";
        this.loginSubmit = button;
        //
        var routeWrapper = document.createElement("div");
        routeWrapper.className = "link-group";
        wrapper.append(routeWrapper);
        var route = document.createElement("span");
        routeWrapper.append(route);
        route.className = "link";
        route.innerText = "Gia hạn";
        route.addEventListener("click", () => {
            this.setActivedSection(this.renewalContainer);
        });
        var route = document.createElement("span");
        routeWrapper.append(route);
        route.className = "link";
        route.innerText = "Đăng ký";
        route.addEventListener("click", () => {
            this.setActivedSection(this.registerContainer);
            this.registerName.focus();
        });
        //
        var routeWrapper = document.createElement("div");
        routeWrapper.className = "link-group";
        wrapper.append(routeWrapper);
        var route = document.createElement("span");
        routeWrapper.append(route);
        route.className = "link";
        route.innerText = "Phần mềm";
        route.addEventListener("click", () => {
            this.setActivedSection(this.aboutContainer);
        });
        var route = document.createElement("span");
        routeWrapper.append(route);
        route.className = "link";
        route.innerText = "Trang chủ";
        route.addEventListener("click", () =>
            window.open("https://www.w3schools.com")
        );
    };
    createRegisterContainer = () => {
        var div = document.createElement("div");
        div.id = "registerContainer";
        div.className = "section";
        this.containerElement.append(div);
        this.registerContainer = div;
        //
        var wrapper = document.createElement("form");
        div.append(wrapper);
        wrapper.className = "wrapper";
        wrapper.addEventListener("submit", e => this.registerAccount(e, this));
        //
        var span = document.createElement("span");
        span.innerText = "Được 7 ngày dùng thử với 2 thiết bị.";
        wrapper.append(span);
        //
        var span = document.createElement("span");
        wrapper.append(span);
        span.className = "invalid";
        this.registerMessage = span;
        //
        var input = document.createElement("input");
        wrapper.append(input);
        input.type = "text";
        input.placeholder = "Tên";
        input.required = true;
        this.registerName = input;
        //
        input = document.createElement("input");
        wrapper.append(input);
        input.type = "email";
        input.placeholder = "Email";
        input.required = true;
        this.registerEmail = input;
        //
        input = document.createElement("input");
        wrapper.append(input);
        input.type = "text";
        input.placeholder = "Số điện thoại";
        input.required = true;
        input.setAttribute("maxlength", 10);
        input.setAttribute("pattern", "[0-9]+");
        this.registerPhone = input;
        //
        input = document.createElement("input");
        wrapper.append(input);
        input.type = "password";
        input.placeholder = "Mật khẩu";
        input.required = true;
        this.registerPassword = input;
        //
        input = document.createElement("input");
        wrapper.append(input);
        input.type = "password";
        input.placeholder = "Xác nhận mật khẩu";
        input.required = true;
        this.registerConfirmPassword = input;
        //
        var button = document.createElement("button");
        wrapper.append(button);
        button.innerText = "ĐĂNG KÝ";
        button.type = "submit";
        this.registerSubmit = button;
        //
        var routeWrapper = document.createElement("div");
        routeWrapper.className = "link-group";
        wrapper.append(routeWrapper);
        var route = document.createElement("span");
        routeWrapper.append(route);
        route.className = "link";
        route.innerText = "Đăng nhập";
        route.addEventListener("click", () => {
            this.setActivedSection(this.loginContainer);
            this.loginUsername.focus();
        });
        var route = document.createElement("span");
        routeWrapper.append(route);
        route.className = "link";
        route.innerText = "Trang chủ";
        route.addEventListener("click", () =>
            window.open("https://www.w3schools.com")
        );
    };
    createLoggedinElement = () => {
        this.createOptionContainer();
        this.createInfoContainer();
        this.createAboutContainer();
        this.createRenewalContainer();
        //
        this.setActivedSection(this.optionContainer);
        this.toggleLogoutButton(true);
    };
    createOptionContainer = () => {
        var div = document.createElement("div");
        div.id = "optionContainer";
        div.className = "section";
        this.containerElement.append(div);
        this.optionContainer = div;
        //
        var wrapper = document.createElement("form");
        div.append(wrapper);
        wrapper.className = "wrapper";
        wrapper.addEventListener("submit", e => this.setServerConfig(e, this));
        //
        var list = document.createElement("div");
        list.className = "list";
        wrapper.append(list);
        //
        var item = document.createElement("div");
        item.className = "item";
        list.append(item);
        var label = document.createElement("span");
        label.innerText = "Khung thời gian:";
        item.append(label);
        var select = document.createElement("select");
        select.style.width = "69px";
        this.global.timeFrames.forEach((item, index) => {
            var option = document.createElement("option");
            option.value = item.value;
            option.text = item.text;
            select.appendChild(option);
        });
        select.value = this.global.timeFrame;
        this.timeFrameSelect = select;
        item.append(select);
        //
        item = document.createElement("div");
        item.className = "item";
        list.append(item);
        label = document.createElement("span");
        label.innerText = "Loại biểu đồ:";
        item.append(label);
        select = document.createElement("select");
        select.style.width = "69px";
        this.global.chartTypes.forEach((item, index) => {
            var option = document.createElement("option");
            option.value = item.value;
            option.text = item.text;
            select.appendChild(option);
        });
        select.value = this.global.chartType;
        this.chartTypeSelect = select;
        item.append(select);
        //
        item = document.createElement("div");
        item.className = "item";
        list.append(item);
        label = document.createElement("span");
        label.innerText = "Số hợp đồng:";
        item.append(label);
        var input = document.createElement("input");
        input.type = "number";
        input.style.width = "69px";
        input.style.height = "21px";
        input.value = this.global.contractNumber;
        this.contractNumberInput = input;
        item.append(input);
        //
        item = document.createElement("div");
        item.className = "item";
        list.append(item);
        label = document.createElement("span");
        label.innerText = "Điểm chốt lời:";
        item.append(label);
        var input = document.createElement("input");
        input.type = "number";
        input.style.width = "69px";
        input.style.height = "21px";
        input.value = this.global.takeProfit;
        this.takeProfitInput = input;
        item.append(input);
        //
        item = document.createElement("div");
        item.className = "item";
        list.append(item);
        label = document.createElement("span");
        label.innerText = "Điểm cắt lỗ:";
        item.append(label);
        var input = document.createElement("input");
        input.type = "number";
        input.style.width = "69px";
        input.style.height = "21px";
        input.value = this.global.stopLoss;
        this.stopLossInput = input;
        item.append(input);
        //
        item = document.createElement("div");
        item.className = "item";
        list.append(item);
        label = document.createElement("span");
        label.innerText = "Tự động đặt TP/SL:";
        item.append(label);
        input = document.createElement("input");
        input.type = "checkbox";
        input.style.width = "17px";
        input.checked = !!this.global.isTpSl;
        this.isTpSlCheckbox = input;
        item.append(input);
        //
        item = document.createElement("div");
        item.className = "item";
        list.append(item);
        label = document.createElement("span");
        label.innerText = "Hiển thị biểu đồ khối lượng:";
        item.append(label);
        input = document.createElement("input");
        input.type = "checkbox";
        input.style.width = "17px";
        input.checked = !!this.global.isVolume;
        this.isVolumeCheckbox = input;
        item.append(input);
        //
        item = document.createElement("div");
        item.className = "item";
        list.append(item);
        label = document.createElement("span");
        label.innerText = "Mở biểu đồ khi khởi động:";
        item.append(label);
        input = document.createElement("input");
        input.type = "checkbox";
        input.style.width = "17px";
        input.checked = !!this.global.isViewChart;
        this.isViewChartCheckbox = input;
        item.append(input);
        //
        var button = document.createElement("button");
        wrapper.append(button);
        button.innerText = "LƯU CÀI ĐẶT";
        button.type = "submit";
        this.optionSubmit = button;
        //
        var routeWrapper = document.createElement("div");
        routeWrapper.className = "link-group";
        wrapper.append(routeWrapper);
        var route = document.createElement("span");
        routeWrapper.append(route);
        route.className = "link";
        route.innerText = "Dịch vụ";
        route.addEventListener("click", () =>
            this.setActivedSection(this.infoContainer)
        );
        var route = document.createElement("span");
        routeWrapper.append(route);
        route.className = "link";
        route.innerText = "Phần mềm";
        route.addEventListener("click", () =>
            this.setActivedSection(this.aboutContainer)
        );
    };
    createInfoContainer = () => {
        var div = document.createElement("div");
        div.id = "infoContainer";
        div.className = "section";
        this.containerElement.append(div);
        this.infoContainer = div;
        //
        var wrapper = document.createElement("div");
        wrapper.className = "wrapper";
        div.append(wrapper);
        //
        var list = document.createElement("div");
        list.className = "list";
        wrapper.append(list);
        var title = document.createElement("span");
        list.append(title);
        title.className = "title";
        title.innerText = "Thông tin tài khoản:";
        var item = document.createElement("div");
        item.className = "item";
        list.append(item);
        var label = document.createElement("span");
        label.innerText = "Tên:";
        item.append(label);
        var value = document.createElement("span");
        value.innerText = this.global.user.name;
        item.append(value);
        //
        var item = document.createElement("div");
        item.className = "item";
        list.append(item);
        var label = document.createElement("span");
        label.innerText = "Email:";
        item.append(label);
        var value = document.createElement("span");
        value.innerText = this.global.user.email;
        item.append(value);
        //
        var item = document.createElement("div");
        item.className = "item";
        list.append(item);
        var label = document.createElement("span");
        label.innerText = "Điện thoại:";
        item.append(label);
        var value = document.createElement("span");
        value.innerText = this.global.user.phone;
        item.append(value);
        //
        var item = document.createElement("div");
        item.className = "item";
        list.append(item);
        var label = document.createElement("span");
        label.innerText = "Ngày đăng ký:";
        item.append(label);
        var value = document.createElement("span");
        value.innerText = moment(this.global.registerDate).format("DD/MM/YYYY");
        item.append(value);
        //
        var list = document.createElement("div");
        list.className = "list";
        wrapper.append(list);
        var title = document.createElement("span");
        list.append(title);
        title.className = "title";
        title.innerText = "Thông tin gói dịch vụ:";
        var item = document.createElement("div");
        item.className = "item";
        list.append(item);
        var label = document.createElement("span");
        label.innerText = "Ngày bắt đầu:";
        item.append(label);
        var value = document.createElement("span");
        value.innerText = moment(this.global.startDate).format("DD/MM/YYYY");
        item.append(value);
        //
        var item = document.createElement("div");
        item.className = "item";
        list.append(item);
        var label = document.createElement("span");
        label.innerText = "Ngày hết hạn:";
        item.append(label);
        var value = document.createElement("span");
        value.innerText = moment(this.global.expiresDate).format("DD/MM/YYYY");
        item.append(value);
        //
        var item = document.createElement("div");
        item.className = "item";
        list.append(item);
        var label = document.createElement("span");
        label.innerText = "Số lượng thiết bị:";
        item.append(label);
        var value = document.createElement("span");
        value.innerText = this.global.deviceLimit;
        item.append(value);
        //
        var routeWrapper = document.createElement("div");
        routeWrapper.className = "link-group";
        wrapper.append(routeWrapper);
        var route = document.createElement("span");
        routeWrapper.append(route);
        route.className = "link";
        route.innerText = "Trở về";
        route.addEventListener("click", () =>
            this.setActivedSection(this.prevSection)
        );
    };
    createAboutContainer = () => {
        var div = document.createElement("div");
        div.id = "aboutContainer";
        div.className = "section";
        this.containerElement.append(div);
        this.aboutContainer = div;
        //
        var wrapper = document.createElement("div");
        wrapper.className = "wrapper";
        div.append(wrapper);
        //
        var list = document.createElement("div");
        list.className = "list";
        wrapper.append(list);
        var item = document.createElement("div");
        item.className = "item";
        list.append(item);
        var label = document.createElement("span");
        label.innerText = "Phiên bản:";
        item.append(label);
        var value = document.createElement("span");
        value.innerText = this.global.version;
        item.append(value);
        //
        var item = document.createElement("div");
        item.className = "item";
        list.append(item);
        var label = document.createElement("span");
        label.innerText = "Ngày xuất bản:";
        item.append(label);
        var value = document.createElement("span");
        value.innerText = this.global.publishDate;
        item.append(value);
        //
        var item = document.createElement("div");
        item.className = "item";
        list.append(item);
        var label = document.createElement("span");
        label.innerText = "Nhà phát triển:";
        item.append(label);
        var value = document.createElement("span");
        value.innerText = this.global.developer;
        item.append(value);
        //
        var item = document.createElement("div");
        item.className = "item";
        list.append(item);
        var label = document.createElement("span");
        label.innerText = "Số điện thoại:";
        item.append(label);
        var value = document.createElement("span");
        value.innerText = this.global.contact.phone;
        item.append(value);
        //
        var item = document.createElement("div");
        item.className = "item";
        list.append(item);
        var label = document.createElement("span");
        label.innerText = "Email:";
        item.append(label);
        var value = document.createElement("span");
        value.innerText = this.global.contact.email;
        item.append(value);
        //
        if (this.global.version != this.global.latestVersion) {
            var download = document.createElement("div");
            download.className = "download";
            wrapper.append(download);
            var label = document.createElement("span");
            download.append(label);
            label.innerHTML = "Đã có phiên bản cập nhật mới.";
            var button = document.createElement("button");
            download.append(button);
            button.innerText = "TẢI XUỐNG";
            button.addEventListener("click", e => this.logout(e, this));
        }
        //
        var routeWrapper = document.createElement("div");
        routeWrapper.className = "link-group";
        wrapper.append(routeWrapper);
        var route = document.createElement("span");
        routeWrapper.append(route);
        route.className = "link";
        route.innerText = "Trở về";
        route.addEventListener("click", () =>
            this.setActivedSection(this.prevSection)
        );
        var route = document.createElement("span");
        routeWrapper.append(route);
        route.className = "link";
        route.innerText = "Trang chủ";
        route.addEventListener("click", () =>
            window.open("https://www.w3schools.com")
        );
    };
    createRenewalContainer = () => {
        var container = document.createElement("div");
        container.id = "renewalContainer";
        container.className = "section";
        this.containerElement.append(container);
        this.renewalContainer = container;
        //
        var wrapper = document.createElement("div");
        wrapper.className = "wrapper";
        container.append(wrapper);
        //
        var list = document.createElement("div");
        list.className = "list";
        wrapper.append(list);
        //
        var item = document.createElement("div");
        item.className = "item";
        list.append(item);
        var label = document.createElement("div");
        label.innerText = "1. Chọn lần mua:";
        label.className = "title";
        item.append(label);
        var select = document.createElement("select");
        select.style.width = "80px";
        [
            { t: "Mua mới", v: 1 },
            { t: "Gia hạn", v: 2 }
        ].forEach(item => {
            var option = document.createElement("option");
            option.value = item.v;
            option.text = item.t;
            select.appendChild(option);
        });
        this.buyType = 2;
        select.value = this.buyType;
        select.addEventListener("change", e => {
            this.buyType = e.target.value;
            if (!!this.plan) {
                const temp = this.updatePlanInfo(this.buyType, this.plan);
                this.planPrice = temp.planPrice;
                this.planSaveMoney = temp.planSaveMoney;
                if (this.deviceNumber > 0) {
                    this.updatePaymentInfo(
                        this.deviceNumber,
                        this.planPrice,
                        this.planSaveMoney
                    );
                }
            }
        });
        item.append(select);
        //
        var item = document.createElement("div");
        item.className = "item";
        list.append(item);
        var label = document.createElement("div");
        label.innerText = "2. Chọn thời gian:";
        label.className = "title";
        item.append(label);
        var select = document.createElement("select");
        select.style.width = "80px";
        var option = document.createElement("option");
        option.value = 0;
        option.text = "";
        select.appendChild(option);
        this.global.plans.forEach((item, index) => {
            var option = document.createElement("option");
            option.value = item.months;
            option.text = item.name;
            select.appendChild(option);
        });
        select.addEventListener("change", e => {
            const value = e.target.value;
            if (value > 0) {
                this.plan = this.global.plans.filter(p => p.months == value)[0];
                const temp = this.updatePlanInfo(this.buyType, this.plan);
                this.planPrice = temp.planPrice;
                this.planSaveMoney = temp.planSaveMoney;
                this.priceInfo.style.display = "flex";
                //
                if (this.deviceNumber > 0) {
                    this.updatePaymentInfo(
                        this.deviceNumber,
                        this.planPrice,
                        this.planSaveMoney
                    );
                }
            } else {
                this.updatePaymentInfo();
                this.priceInfo.style.display = "none";
            }
        });
        item.append(select);
        //
        var item = document.createElement("div");
        item.className = "item";
        item.style.display = "none";
        list.append(item);
        this.priceInfo = item;
        var label = document.createElement("div");
        item.append(label);
        this.priceLabel = label;
        var label = document.createElement("div");
        item.append(label);
        this.saveMoneyLabel = label;
        //
        var item = document.createElement("div");
        item.className = "item";
        list.append(item);
        var label = document.createElement("div");
        label.innerText = "3. Chọn số thiết bị:";
        label.className = "title";
        item.append(label);
        var input = document.createElement("input");
        input.type = "number";
        input.style.width = "80px";
        input.style.height = "21px";
        input.addEventListener("change", e => {
            this.deviceNumber = Math.floor(e.target.value);
            this.updatePaymentInfo(
                this.deviceNumber,
                this.planPrice,
                this.planSaveMoney
            );
        });
        item.append(input);
        //
        var label = document.createElement("div");
        label.innerText = "4. Thanh toán:";
        label.className = "title";
        list.append(label);
        //
        var item = document.createElement("div");
        item.className = "item";
        list.append(item);
        var bank = document.createElement("div");
        item.append(bank);
        var info = document.createElement("div");
        info.innerText = `${this.global.bankAccount.bank_name}: ${this.global.bankAccount.account_number}`;
        bank.append(info);
        var info = document.createElement("div");
        info.innerText = `Tên: ${this.global.bankAccount.account_name.toLowerCase()}`;
        bank.append(info);
        var info = document.createElement("div");
        info.innerText = `NDCK: so ${
            this.global.isLoggedin ? this.global.user.phone : "<SĐT>"
        }`;
        bank.append(info);
        var info = document.createElement("div");
        bank.append(info);
        this.totalPriceInfo = info;
        var info = document.createElement("div");
        bank.append(info);
        this.totalSaveMoneyInfo = info;

        var qrCode = document.createElement("img");
        qrCode.style.width = "90px";
        qrCode.style.height = "90px";
        qrCode.style.visibility = "hidden";
        item.append(qrCode);
        this.qrCodeImg = qrCode;

        //
        var routeWrapper = document.createElement("div");
        routeWrapper.className = "link-group";
        wrapper.append(routeWrapper);
        var route = document.createElement("span");
        routeWrapper.append(route);
        route.className = "link";
        route.innerText = "Trở về";
        route.addEventListener("click", () =>
            this.setActivedSection(this.prevSection)
        );
    };
    removeLoggedinElement = () => {
        if (!!this.infoContainer) this.infoContainer.remove();
        if (!!this.optionContainer) this.optionContainer.remove();
        if (!!this.aboutContainer) this.aboutContainer.remove();
        //
        this.logoutButton.style.display = "none";
        this.setActivedSection(this.loginContainer);
        this.loginUsername.focus();
    };
    registerAccount = (e, self) => {
        e.preventDefault();
        if (self.registerConfirmPassword.value != self.registerPassword.value) {
            self.registerMessage.innerText = "Mật khẩu không khớp";
            return false;
        } else {
            self.registerSubmit.innerText = "Đang đăng ký...";
            self.registerSubmit.disabled = true;
            self.registerMessage.innerText = "";
            const data = self.global.crypto.encrypt({
                name: self.registerName.value,
                email: self.registerEmail.value,
                phone: self.registerPhone.value,
                password: self.registerPassword.value,
                deviceId: self.global.deviceId,
                chanel: self.global.appName
            });
            const url = self.global.domain + self.global.endpoint.register;
            fetch(url, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: data
            })
                .then(response => {
                    if (response.ok) return response.json();
                    throw new Error(response.statusText);
                })
                .then(async json => {
                    json = self.global.crypto.decrypt(json);
                    // console.log("register: ", json);
                    self.registerSubmit.innerText = "ĐĂNG KÝ";
                    self.registerSubmit.disabled = false;
                    if (json.isOk) {
                        this.global.isLoggedin = true;
                        self.setToken(json.token);
                        self.global.accessToken = json.token.access_token;
                        self.global.user = json.user;
                        await self.callback.loginCallback();
                        self.global.alert.show("success", "Đăng ký thành công");
                        self.registerName.value = "";
                        self.registerEmail.value = "";
                        self.registerPhone.value = "";
                        self.registerPassword.value = "";
                        self.registerConfirmPassword.value = "";
                    } else {
                        if (json.message == "emailExist")
                            self.registerMessage.innerText =
                                "Emai này đã đăng ký";
                        else if (json.message == "phoneExist")
                            self.registerMessage.innerText =
                                "Số điện thoại này đã đăng ký";
                        else if (json.message == "deviceExist")
                            self.registerMessage.innerText =
                                "Tài khoản khác đã dùng thiết bị này";
                    }
                })
                .catch(error => {
                    console.log(error);
                    self.global.alert.show("error", "Đăng ký lỗi");
                    self.registerSubmit.innerText = "ĐĂNG KÝ";
                    self.registerSubmit.disabled = false;
                });
        }
    };
    login = (e, self) => {
        e.preventDefault();
        self.loginSubmit.innerText = "Đang đăng nhập...";
        self.loginSubmit.disabled = true;
        self.loginMessage.innerText = "";
        const data = self.global.crypto.encrypt({
            username: self.loginUsername.value,
            password: self.loginPassword.value,
            rememberMe: self.loginRememberMe.checked,
            deviceId: self.global.deviceId,
            chanel: self.global.appName
        });
        const url = self.global.domain + self.global.endpoint.login;
        fetch(url, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: data
        })
            .then(response => {
                if (response.ok) return response.json();
                throw new Error(response.statusText);
            })
            .then(async json => {
                json = self.global.crypto.decrypt(json);
                // console.log("login: ", json);
                if (json.isOk) {
                    this.global.isLoggedin = true;
                    self.setToken(json.token);
                    self.global.accessToken = json.token.access_token;
                    self.global.user = json.user;
                    await self.callback.loginCallback();
                    self.loginUsername.value = "";
                    self.loginPassword.value = "";
                } else {
                    if (json.message == "unauthorized")
                        self.loginMessage.innerText = "Sai thông tin đăng nhập";
                    else if (json.message == "unsetup")
                        self.loginMessage.innerText = "Lỗi khởi tạo tài khoản";
                    else if (json.message == "expired")
                        self.loginMessage.innerText = "Quá hạn sử dụng dịch vụ";
                    else if (json.message == "deviceLimit")
                        self.loginMessage.innerText = "Quá giới hạn thiết bị";
                }
                self.loginSubmit.innerText = "ĐĂNG NHẬP";
                self.loginSubmit.disabled = false;
            })
            .catch(error => {
                self.global.alert.show("error", "Đăng nhập lỗi");
                self.loginSubmit.innerText = "ĐĂNG NHẬP";
                self.loginSubmit.disabled = false;
            });
    };
    logout = self => {
        const url = self.global.domain + self.global.endpoint.logout;
        fetch(url, {
            method: "GET",
            headers: {
                "Content-Type": "application/json",
                Authorization: `Bearer ${self.global.accessToken}`
            }
        }).then(() => {
            this.global.isLoggedin = false;
            self.removeToken();
            self.callback.logoutCallback();
        });
    };
    getUser = () => {
        return new Promise(resolve => {
            this.global.accessToken = this.getToken();
            if (!this.global.accessToken) resolve();
            else {
                const data = this.global.crypto.encrypt({
                    deviceId: this.global.deviceId
                });
                const url = this.global.domain + this.global.endpoint.user;
                fetch(url, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        Authorization: `Bearer ${this.global.accessToken}`
                    },
                    body: data
                })
                    .then(response => {
                        if (response.ok) return response.json();
                        throw new Error(response.statusText);
                    })
                    .then(json => {
                        json = this.global.crypto.decrypt(json);
                        // console.log("gU: ", json);
                        this.global.isLoggedin = json.isOk;
                        if (json.isOk) this.global.user = json.user;
                        else this.alertInvalidAccess(true);
                        resolve();
                    })
                    .catch(error => resolve());
            }
        });
    };
    getServerConfig = () => {
        return new Promise((resolve, reject) => {
            const data = this.global.crypto.encrypt({
                deviceId: this.global.deviceId
            });
            const url = this.global.domain + this.global.endpoint.getConfig;
            fetch(url, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${this.global.accessToken}`
                },
                body: data
            })
                .then(response => response.json())
                .then(json => {
                    json = this.global.crypto.decrypt(json);
                    console.log("serverConfig", json);
                    if (json.isOk)
                        for (const key in json.config)
                            this.global[key] = json.config[key];
                    else this.alertInvalidAccess();
                    resolve();
                })
                .catch(err => {
                    console.log(err);
                    var choice = confirm(
                        "Get server config error. Refresh now?"
                    );
                    if (choice) location.reload();
                });
        });
    };
    setServerConfig = (e, self) => {
        e.preventDefault();
        return new Promise(resolve => {
            self.optionSubmit.innerText = "Đang lưu cài đặt...";
            self.optionSubmit.disabled = true;
            const data = self.global.crypto.encrypt({
                timeFrame: +self.timeFrameSelect.value,
                chartType: self.chartTypeSelect.value,
                contractNumber: +self.contractNumberInput.value,
                takeProfit: +self.takeProfitInput.value,
                stopLoss: +self.stopLossInput.value,
                isTpSl: self.isTpSlCheckbox.checked,
                isVolume: self.isVolumeCheckbox.checked,
                isViewChart: self.isViewChartCheckbox.checked,
                deviceId: self.global.deviceId
            });
            const url = self.global.domain + self.global.endpoint.setConfig;
            fetch(url, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${self.global.accessToken}`
                },
                body: data
            })
                .then(response => {
                    if (response.ok) return response.json();
                    throw new Error(response.statusText);
                })
                .then(async json => {
                    json = self.global.crypto.decrypt(json);
                    // console.log("setConfig: ", json);
                    self.optionSubmit.innerText = "LƯU CÀI ĐẶT";
                    self.optionSubmit.disabled = false;
                    if (json.isOk) {
                        self.global.alert.show(
                            "success",
                            "Lưu cài đặt thành công"
                        );
                        self.global.isTpSl = self.isTpSlCheckbox.checked;
                        self.callback.toggleChartVolumeCallback(
                            self.isVolumeCheckbox.checked
                        );
                    } else {
                        if (json.message == "unauthorized")
                            self.alertInvalidAccess();
                        else
                            self.global.alert.show(
                                "error",
                                "Lưu cài đặt thất bại"
                            );
                    }
                    resolve();
                });
        });
    };
    getServerBackground = () => {
        return new Promise((resolve, reject) => {
            const data = this.global.crypto.encrypt({
                deviceId: this.global.deviceId
            });
            const url = this.global.domain + this.global.endpoint.getBackground;
            fetch(url, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: data
            })
                .then(response => response.json())
                .then(json => {
                    json = this.global.crypto.decrypt(json);
                    console.log("serverBackground", json);
                    if (json.isOk)
                        for (const key in json.config)
                            this.global[key] = json.config[key];
                    else this.alertInvalidAccess();
                    resolve();
                })
                .catch(err => {
                    console.log(err);
                    var choice = confirm(
                        "Get server config error. Refresh now?"
                    );
                    if (choice) location.reload();
                });
        });
    };
    setToken = token => {
        localStorage.setItem(this.TK, JSON.stringify(token));
    };
    removeToken = () => {
        localStorage.removeItem(this.TK);
    };
    getToken = () => {
        const token = JSON.parse(localStorage.getItem(this.TK));
        if (!token) return false;
        if (moment().isBefore(token.expires_at)) return token.access_token;
        this.global.alert.show("waring", "Phiên đăng nhập hết hạn");
        return false;
    };
    toggle = (visible = true) => {
        if (!visible || this.containerElement.classList.contains("show"))
            this.containerElement.classList.remove("show");
        else {
            this.setActivedSection(
                this.global.isLoggedin
                    ? this.optionContainer
                    : this.loginContainer
            );
            this.containerElement.classList.add("show");
        }
    };
    toggleLogoutButton = visible => {
        this.logoutButton.style.display = visible ? "block" : "none";
    };
    setActivedSection = el => {
        var activeEl = document.querySelector(
            "#optionViewContainer .section.active"
        );
        if (activeEl) {
            this.prevSection = activeEl;
            activeEl.classList.remove("active");
        }
        this.currSection = el;
        el.classList.add("active");
    };
    alertInvalidAccess = (h = false) => {
        this.logout(this);
        const msg = "Tài khoản đăng nhập sai cách";
        if (h)
            this.global.alert
                .hide()
                .then(() => this.global.alert.show("error", msg, true, true));
        else this.global.alert.show("error", msg);
    };
    currencyFormat = input => {
        return new Intl.NumberFormat("vi-VN", {
            style: "currency",
            currency: "VND"
        }).format(input);
    };
    updatePlanInfo = (buyType, plan) => {
        const isRenewal = buyType == "2";
        const pricePerDevice = isRenewal ? plan.renewal_price : plan.price;
        this.priceLabel.innerText = `${this.currencyFormat(
            pricePerDevice
        )}/tháng`;
        const planPrice = plan.months * pricePerDevice;
        const planSaveMoney =
            plan.months * (plan.highest_price - pricePerDevice);
        this.saveMoneyLabel.innerText = `Tiết kiệm: ${this.currencyFormat(
            planSaveMoney
        )}`;
        return {
            planPrice,
            planSaveMoney
        };
    };
    updatePaymentInfo = (
        deviceNumber = 0,
        planPrice = 0,
        planSaveMoney = 0
    ) => {
        if (deviceNumber > 0) {
            const price = deviceNumber * planPrice;
            this.totalPriceInfo.innerText = `Tổng giá: ${this.currencyFormat(
                price
            )}`;
            this.totalSaveMoneyInfo.innerText = `Tiết kiệm: ${this.currencyFormat(
                deviceNumber * planSaveMoney
            )}`;
            this.qrCodeImg.src = `https://img.vietqr.io/image/${
                this.global.bankAccount.bank_name
            }-${
                this.global.bankAccount.account_number
            }-fcaSnpq.jpg?accountName=${
                this.global.bankAccount.account_name
            }&amount=${price}&addInfo=so ${
                this.global.isLoggedin ? this.global.user.phone : ""
            }`;
            this.qrCodeImg.style.visibility = "visible";
        } else {
            this.totalPriceInfo.innerText = "";
            this.totalSaveMoneyInfo.innerText = "";
            this.qrCodeImg.style.visibility = "hidden";
        }
    };
}

class Menu {
    // Các thuộc tính

    // Hàm khởi tạo
    constructor(global, callback) {
        this.global = global;
        this.callback = callback;
        this.createContainerElement();
        this.createNoLoginElement();
    }
    //
    // Các phương thức
    createContainerElement = () => {
        var container = document.createElement("div");
        container.id = "menuContainer";
        document.body.append(container);
        this.containerElement = container;
    };
    createLoggedinElement = () => {
        var button = document.createElement("button");
        button.id = "lightWeightButton";
        button.classList = "fa fa-line-chart";
        button.title = "Biểu đồ đặt lệnh";
        button.addEventListener("click", () =>
            this.callback.toggleLightWeightButtonCallback()
        );
        this.containerElement.prepend(button);
        this.lightWeightButton = button;
        //
        var button = document.createElement("button");
        button.classList = "fa fa-bar-chart";
        button.title = "Biểu đồ phân tích";
        button.addEventListener("click", () =>
            this.callback.toggleTradingViewButtonCallback()
        );
        this.containerElement.prepend(button);
        this.tradingViewButton = button;
        //
        if (
            !!this.global.isReport &&
            this.global.isOpeningMarket &&
            !this.global.isReportedResult
        ) {
            var button = document.createElement("button");
            button.id = "reportButton";
            button.classList = "fa fa-flag-checkered";
            button.title = "Báo cáo kết quả";
            button.addEventListener("click", () =>
                this.reportTradingResult(this)
            );
            this.containerElement.append(button);
            this.reportButton = button;
        }
        //
        this.settingButton.classList.replace("fa-sign-in", "fa-cog");
        //
        this.interval = setInterval(() => {
            this.blinkLightWeightButton(this);
            if (moment().unix() == this.global.time.end)
                this.reportTradingResult(this);
        }, 1000);
    };
    removeLoggedinElement = () => {
        if (!!this.tradingViewButton) this.tradingViewButton.remove();
        if (!!this.lightWeightButton) this.lightWeightButton.remove();
        if (
            !!this.global.isReport &&
            this.global.isOpeningMarket &&
            !this.global.isReportedResult
        )
            if (!!this.reportButton) this.reportButton.remove();
        //
        this.settingButton.classList.replace("fa-cog", "fa-sign-in");
        //
        clearInterval(this.interval);
    };
    createNoLoginElement = () => {
        var button = document.createElement("button");
        button.id = "settingButton";
        button.classList = "fa fa-sign-in";
        button.title = "Cài đặt";
        button.addEventListener("click", () =>
            this.callback.togglePopupCallback(true)
        );
        this.containerElement.append(button);
        this.settingButton = button;
    };
    blinkLightWeightButton = self => {
        if (self.global.isInSession()) {
            if (self.lightWeightButton.classList.contains("dark"))
                self.lightWeightButton.classList.remove("dark");
            else self.lightWeightButton.classList.add("dark");
        }
    };
    reportTradingResult = self => {
        if (self.global.isOpeningMarket && !self.global.isReportedResult) {
            self.global.alert.show("warning", "Đang gửi báo cáo . . .", false);
            self.global.isReportedResult = true;
            self.global.toggleSpinner(true);
            const url = self.global.domain + self.global.endpoint.report;
            const data = self.global.crypto.encrypt({
                ...self.callback.getReportDataCallback(),
                ...{ deviceId: self.global.deviceId }
            });
            fetch(url, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${self.global.accessToken}`
                },
                body: data
            })
                .then(response => {
                    if (response.ok) return response.json();
                    throw new Error(response.statusText);
                })
                .then(json => {
                    json = self.global.crypto.decrypt(json);
                    self.global.isReportedResult = json.isOk;
                    if (json.isOk) {
                        self.global.alert.hide().then(() => {
                            if (json.isExecuted)
                                self.global.alert.show(
                                    "success",
                                    "Báo cáo đã gửi thành công."
                                );
                            else
                                self.global.alert.show(
                                    "warning",
                                    "Đã gửi báo cáo"
                                );
                        });
                        self.reportButton.remove();
                    } else if (json.message == "unauthorized")
                        self.callback.alertInvalidAccessCallback();
                    //
                    self.global.toggleSpinner(false);
                })
                .catch(error => {
                    self.global.isReportedResult = false;
                    self.global.alert
                        .hide()
                        .then(() =>
                            self.global.alert.show(
                                "error",
                                "Gửi báo cáo thất bại"
                            )
                        );
                    self.global.toggleSpinner(false);
                });
        }
    };
}

class SmartOrder {
    // Hàm khởi tạo
    constructor() {
        this.global = new Config();
        this.global.alert = new Alert();
        this.global.store = new Store();
        this.global.crypto = new Crypto(this.global);
        this.global.deviceId = new DeviceUUID().get();
        this.global.isMobile = navigator.userAgentData.mobile;
        this.chart = new Chart(this.global, {
            getOrderPositionCallback: this.getOrderPositionCallback,
            closeOrderPositionCallback: this.closeOrderPositionCallback,
            orderEntryPriceCallback: this.orderEntryPriceCallback,
            orderTpPriceCallback: this.orderTpPriceCallback,
            orderSlPriceCallback: this.orderSlPriceCallback,
            cancelOrderCallback: this.cancelOrderCallback,
            alertInvalidAccessCallback: this.alertInvalidAccessCallback
        });
        this.popup = new Popup(this.global, {
            loginCallback: this.loginCallback,
            logoutCallback: this.logoutCallback,
            toggleChartVolumeCallback: this.toggleChartVolumeCallback
        });
        this.menu = new Menu(this.global, {
            toggleTradingViewButtonCallback: this
                .toggleTradingViewButtonCallback,
            toggleLightWeightButtonCallback: this
                .toggleLightWeightButtonCallback,
            togglePopupCallback: this.togglePopupCallback,
            getReportDataCallback: this.getReportDataCallback,
            alertInvalidAccessCallback: this.alertInvalidAccessCallback
        });
        this.registerFullscreenEvent();
        this.detectVpsSystem();
    }
    //
    // Các phương thức
    init = async () => {
        this.popup.createNoLoginElement();
        console.log("deviceId: ", this.global.deviceId);
        await this.popup.getUser();
        if (this.global.isLoggedin) {
            await this.loginCallback();
            document.getElementById(
                "sohopdong"
            ).value = this.global.contractNumber;
            document.getElementById("right_price").value = "MTL";
        } else {
            await this.popup.getServerBackground();
            this.popup.createAboutContainer();
            this.popup.createRenewalContainer();
            this.menu.settingButton.click();
        }
    };
    loginCallback = async () => {
        this.global.alert.show("warning", "Đang khởi tạo biểu đồ . . .", false);
        await this.popup.getServerConfig();
        this.popup.createLoggedinElement();
        this.chart.create();
        await this.chart.loadChartData();
        await this.chart.getToolsData();
        this.menu.createLoggedinElement();
        if (!!this.global.isViewChart) this.menu.lightWeightButton.click();
        this.chart.connectSocket();
        this.global.alert.hide();
    };
    logoutCallback = () => {
        this.menu.removeLoggedinElement();
        this.popup.removeLoggedinElement();
        this.chart.remove();
        this.toggleTradingViewButtonCallback(false);
        this.toggleLightWeightButtonCallback(false);
    };
    toggleTradingViewButtonCallback = (visible = true) => {
        var leftEl = document.getElementById("left_order_type");
        var rightEl = document.getElementById("right_order_type");
        var orderEl = document.querySelector(
            "#mainFooter .foot_tab:nth-child(1)"
        );
        var condOrderEl = document.querySelector(
            "#mainFooter .foot_tab:nth-child(2)"
        );
        orderEl.classList.remove("fa", "fa-check-circle");
        condOrderEl.classList.remove("fa", "fa-question-circle");
        if (!visible || document.body.classList.contains("tradingview-chart")) {
            document.body.classList.remove("tradingview-chart");
            document.body.classList.remove("full-chart");
            if (this.global.isSmartPro) {
                leftEl.innerText = "Lệnh thường";
                rightEl.innerText = "Lệnh điều kiện";
                orderEl.innerText = "DANH SÁCH LỆNH";
                condOrderEl.innerText = "DANH SÁCH LỆNH ĐIỀU KIỆN";
            }
        } else {
            this.togglePopupCallback(false);
            document.body.classList.add("tradingview-chart");
            document.body.classList.add("full-chart");
            document.body.classList.remove("lightweight-chart");
            if (this.global.isSmartPro) {
                leftEl.innerText = "LT";
                rightEl.innerText = "LĐK";
                orderEl.innerText = "LỆNH THƯỜNG";
                condOrderEl.innerText = "L. ĐIỀU KIỆN";
            }
        }
    };
    toggleLightWeightButtonCallback = (visible = true) => {
        var leftEl = document.getElementById("left_order_type");
        var rightEl = document.getElementById("right_order_type");
        var orderEl = document.querySelector(
            "#mainFooter .foot_tab:nth-child(1)"
        );
        var condOrderEl = document.querySelector(
            "#mainFooter .foot_tab:nth-child(2)"
        );
        if (!visible || document.body.classList.contains("lightweight-chart")) {
            document.body.classList.remove("lightweight-chart");
            document.body.classList.remove("full-chart");
            if (this.global.isSmartPro) {
                leftEl.innerText = "Lệnh thường";
                rightEl.innerText = "Lệnh điều kiện";
                orderEl.classList.remove("fa", "fa-check-circle");
                orderEl.innerText = "DANH SÁCH LỆNH";
                condOrderEl.classList.remove("fa", "fa-question-circle");
                condOrderEl.innerText = "DANH SÁCH LỆNH ĐIỀU KIỆN";
            }
        } else {
            this.togglePopupCallback(false);
            document.body.classList.add("lightweight-chart");
            document.body.classList.add("full-chart");
            document.body.classList.remove("tradingview-chart");
            if (this.global.isSmartPro) {
                leftEl.innerText = "LT";
                rightEl.innerText = "LĐK";
                orderEl.classList.add("fa", "fa-check-circle");
                orderEl.innerText = "";
                condOrderEl.classList.add("fa", "fa-question-circle");
                condOrderEl.innerText = "";
            }
        }
    };
    getReportDataCallback = () => {
        return {
            revenue: +document
                .getElementById("vmAccInfo")
                .innerText.replaceAll(",", ""),
            fees: +document
                .getElementById("othersAccInfo")
                .innerText.replaceAll(",", "")
        };
    };
    getOrderPositionCallback = () => {
        const el = document.querySelector(
            `#danhmuc_${this.global.symbol} > td:nth-child(2)`
        );
        if (!el) return 0;
        const position = el.innerText;
        if (isNaN(position)) return 0;
        else return +position;
    };
    closeOrderPositionCallback = () => {
        const position = this.getOrderPositionCallback();
        if (position) {
            document.getElementById("select_normal_order_wrapper").click();
            document.getElementById("right_price").value = "MTL";
            document.getElementById("sohopdong").value = Math.abs(position);
            document
                .getElementById(`btn_${position > 0 ? "short" : "long"}`)
                .click();
        }
    };
    orderEntryPriceCallback = order => {
        this.callJavascript("onCancelAllOrderPending('order_condition')");
        document.getElementById("select_condition_order_wrapper").click();
        document.getElementById("right_stopOrderIndex").value =
            order.entry.price;
        document.getElementById("right_price").value = "MTL";
        document.getElementById("right_selStopOrderType").value =
            order.side > 0 ? "SOL" : "SOU";
        //
        setTimeout(() => {
            document
                .getElementById(`btn_${order.side > 0 ? "long" : "short"}`)
                .click();
        }, 1000);
    };
    orderTpPriceCallback = (order, isInit = false) => {
        this.callJavascript("onCancelAllOrderPending('order')");
        if (isInit)
            order.tp.price =
                +order.entry.price + order.side * this.global.takeProfit;
        setTimeout(() => {
            document.getElementById("select_normal_order_wrapper").click();
            document.getElementById("right_price").value = order.tp.price;
            document
                .getElementById(`btn_${order.side < 0 ? "long" : "short"}`)
                .click();
        }, 1000);
    };
    orderSlPriceCallback = (order, isInit = false) => {
        this.callJavascript("onCancelAllOrderPending('order_condition')");
        if (isInit)
            order.sl.price =
                +order.entry.price - order.side * this.global.stopLoss;
        setTimeout(() => {
            document.getElementById("select_condition_order_wrapper").click();
            document.getElementById("right_stopOrderIndex").value =
                order.sl.price;
            document.getElementById("right_price").value = "MTL";
            document.getElementById("right_selStopOrderType").value =
                order.side < 0 ? "SOL" : "SOU";
            document
                .getElementById(`btn_${order.side < 0 ? "long" : "short"}`)
                .click();
        }, 1000);
    };
    cancelOrderCallback = () => {
        this.callJavascript("onCancelAllOrderPending('order_condition')");
        this.callJavascript("onCancelAllOrderPending('order')");
    };
    toggleChartVolumeCallback = visible =>
        this.chart.toggleChartVolume(visible);
    togglePopupCallback = visible => this.popup.toggle(visible);
    alertInvalidAccessCallback = () => this.popup.alertInvalidAccess();
    callJavascript = script => {
        var button = document.createElement("button");
        button.setAttribute("onclick", script);
        button.click();
    };
    registerFullscreenEvent = () => {
        document
            .querySelector(".timeStamp")
            .addEventListener("dblclick", () => {
                if (document.fullscreenElement) document.exitFullscreen();
                else document.documentElement.requestFullscreen();
            });
    };
    detectVpsSystem = () => {
        const site = window.location.hostname.split(".")[0];
        document.body.classList.add(site);
        this.global.isSmartPro = site == "smartpro";
    };
}

var smartOrder = new SmartOrder();
smartOrder.init();

//# sourceMappingURL=data:application/json;charset=utf8;base64,

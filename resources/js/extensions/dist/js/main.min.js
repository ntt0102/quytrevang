goog.provide("proto.tcbs.BuySellActivePojo"),goog.provide("proto.tcbs.InvestorHistoryTrade"),goog.require("jspb.BinaryReader"),goog.require("jspb.BinaryWriter"),goog.require("jspb.Message"),proto.tcbs.BuySellActivePojo=function(e){jspb.Message.initialize(this,e,0,-1,null,null)},goog.inherits(proto.tcbs.BuySellActivePojo,jspb.Message),goog.DEBUG&&!COMPILED&&(proto.tcbs.BuySellActivePojo.displayName="proto.tcbs.BuySellActivePojo"),proto.tcbs.InvestorHistoryTrade=function(e){jspb.Message.initialize(this,e,0,-1,null,null)},goog.inherits(proto.tcbs.InvestorHistoryTrade,jspb.Message),goog.DEBUG&&!COMPILED&&(proto.tcbs.InvestorHistoryTrade.displayName="proto.tcbs.InvestorHistoryTrade"),jspb.Message.GENERATE_TO_OBJECT&&(proto.tcbs.BuySellActivePojo.prototype.toObject=function(e){return proto.tcbs.BuySellActivePojo.toObject(e,this)},proto.tcbs.BuySellActivePojo.toObject=function(e,t){var o={symbol:jspb.Message.getFieldWithDefault(t,1,""),closeprice:jspb.Message.getFloatingPointFieldWithDefault(t,2,0),closevol:jspb.Message.getFloatingPointFieldWithDefault(t,3,0),change:jspb.Message.getFloatingPointFieldWithDefault(t,4,0),reference:jspb.Message.getFloatingPointFieldWithDefault(t,5,0),totaltrading:jspb.Message.getFloatingPointFieldWithDefault(t,6,0),totaltradingvalue:jspb.Message.getFloatingPointFieldWithDefault(t,7,0),timesec:jspb.Message.getFieldWithDefault(t,8,0),action:jspb.Message.getFieldWithDefault(t,9,""),unittimeframe:jspb.Message.getFieldWithDefault(t,10,0),tradingvalue:jspb.Message.getFloatingPointFieldWithDefault(t,11,0),buyupacc:jspb.Message.getFloatingPointFieldWithDefault(t,12,0),selldownacc:jspb.Message.getFloatingPointFieldWithDefault(t,13,0),highlight:jspb.Message.getBooleanFieldWithDefault(t,14,!1),bidprice:jspb.Message.getFloatingPointFieldWithDefault(t,15,0),bidvol:jspb.Message.getFloatingPointFieldWithDefault(t,16,0),askprice:jspb.Message.getFloatingPointFieldWithDefault(t,17,0),askvol:jspb.Message.getFloatingPointFieldWithDefault(t,18,0),prevchange:jspb.Message.getFloatingPointFieldWithDefault(t,19,0)};return e&&(o.$jspbMessageInstance=t),o}),proto.tcbs.BuySellActivePojo.deserializeBinary=function(e){var e=new jspb.BinaryReader(e),t=new proto.tcbs.BuySellActivePojo;return proto.tcbs.BuySellActivePojo.deserializeBinaryFromReader(t,e)},proto.tcbs.BuySellActivePojo.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();)switch(t.getFieldNumber()){case 1:var o=t.readString();e.setSymbol(o);break;case 2:o=t.readDouble();e.setCloseprice(o);break;case 3:o=t.readDouble();e.setClosevol(o);break;case 4:o=t.readDouble();e.setChange(o);break;case 5:o=t.readDouble();e.setReference(o);break;case 6:o=t.readDouble();e.setTotaltrading(o);break;case 7:o=t.readDouble();e.setTotaltradingvalue(o);break;case 8:o=t.readInt64();e.setTimesec(o);break;case 9:o=t.readString();e.setAction(o);break;case 10:o=t.readInt64();e.setUnittimeframe(o);break;case 11:o=t.readDouble();e.setTradingvalue(o);break;case 12:o=t.readDouble();e.setBuyupacc(o);break;case 13:o=t.readDouble();e.setSelldownacc(o);break;case 14:o=t.readBool();e.setHighlight(o);break;case 15:o=t.readDouble();e.setBidprice(o);break;case 16:o=t.readDouble();e.setBidvol(o);break;case 17:o=t.readDouble();e.setAskprice(o);break;case 18:o=t.readDouble();e.setAskvol(o);break;case 19:o=t.readFloat();e.setPrevchange(o);break;default:t.skipField()}return e},proto.tcbs.BuySellActivePojo.prototype.serializeBinary=function(){var e=new jspb.BinaryWriter;return proto.tcbs.BuySellActivePojo.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.tcbs.BuySellActivePojo.serializeBinaryToWriter=function(e,t){var o;0<(o=e.getSymbol()).length&&t.writeString(1,o),0!==(o=e.getCloseprice())&&t.writeDouble(2,o),0!==(o=e.getClosevol())&&t.writeDouble(3,o),0!==(o=e.getChange())&&t.writeDouble(4,o),0!==(o=e.getReference())&&t.writeDouble(5,o),0!==(o=e.getTotaltrading())&&t.writeDouble(6,o),0!==(o=e.getTotaltradingvalue())&&t.writeDouble(7,o),0!==(o=e.getTimesec())&&t.writeInt64(8,o),0<(o=e.getAction()).length&&t.writeString(9,o),0!==(o=e.getUnittimeframe())&&t.writeInt64(10,o),0!==(o=e.getTradingvalue())&&t.writeDouble(11,o),0!==(o=e.getBuyupacc())&&t.writeDouble(12,o),0!==(o=e.getSelldownacc())&&t.writeDouble(13,o),(o=e.getHighlight())&&t.writeBool(14,o),0!==(o=e.getBidprice())&&t.writeDouble(15,o),0!==(o=e.getBidvol())&&t.writeDouble(16,o),0!==(o=e.getAskprice())&&t.writeDouble(17,o),0!==(o=e.getAskvol())&&t.writeDouble(18,o),0!==(o=e.getPrevchange())&&t.writeFloat(19,o)},proto.tcbs.BuySellActivePojo.prototype.getSymbol=function(){return jspb.Message.getFieldWithDefault(this,1,"")},proto.tcbs.BuySellActivePojo.prototype.setSymbol=function(e){return jspb.Message.setProto3StringField(this,1,e)},proto.tcbs.BuySellActivePojo.prototype.getCloseprice=function(){return jspb.Message.getFloatingPointFieldWithDefault(this,2,0)},proto.tcbs.BuySellActivePojo.prototype.setCloseprice=function(e){return jspb.Message.setProto3FloatField(this,2,e)},proto.tcbs.BuySellActivePojo.prototype.getClosevol=function(){return jspb.Message.getFloatingPointFieldWithDefault(this,3,0)},proto.tcbs.BuySellActivePojo.prototype.setClosevol=function(e){return jspb.Message.setProto3FloatField(this,3,e)},proto.tcbs.BuySellActivePojo.prototype.getChange=function(){return jspb.Message.getFloatingPointFieldWithDefault(this,4,0)},proto.tcbs.BuySellActivePojo.prototype.setChange=function(e){return jspb.Message.setProto3FloatField(this,4,e)},proto.tcbs.BuySellActivePojo.prototype.getReference=function(){return jspb.Message.getFloatingPointFieldWithDefault(this,5,0)},proto.tcbs.BuySellActivePojo.prototype.setReference=function(e){return jspb.Message.setProto3FloatField(this,5,e)},proto.tcbs.BuySellActivePojo.prototype.getTotaltrading=function(){return jspb.Message.getFloatingPointFieldWithDefault(this,6,0)},proto.tcbs.BuySellActivePojo.prototype.setTotaltrading=function(e){return jspb.Message.setProto3FloatField(this,6,e)},proto.tcbs.BuySellActivePojo.prototype.getTotaltradingvalue=function(){return jspb.Message.getFloatingPointFieldWithDefault(this,7,0)},proto.tcbs.BuySellActivePojo.prototype.setTotaltradingvalue=function(e){return jspb.Message.setProto3FloatField(this,7,e)},proto.tcbs.BuySellActivePojo.prototype.getTimesec=function(){return jspb.Message.getFieldWithDefault(this,8,0)},proto.tcbs.BuySellActivePojo.prototype.setTimesec=function(e){return jspb.Message.setProto3IntField(this,8,e)},proto.tcbs.BuySellActivePojo.prototype.getAction=function(){return jspb.Message.getFieldWithDefault(this,9,"")},proto.tcbs.BuySellActivePojo.prototype.setAction=function(e){return jspb.Message.setProto3StringField(this,9,e)},proto.tcbs.BuySellActivePojo.prototype.getUnittimeframe=function(){return jspb.Message.getFieldWithDefault(this,10,0)},proto.tcbs.BuySellActivePojo.prototype.setUnittimeframe=function(e){return jspb.Message.setProto3IntField(this,10,e)},proto.tcbs.BuySellActivePojo.prototype.getTradingvalue=function(){return jspb.Message.getFloatingPointFieldWithDefault(this,11,0)},proto.tcbs.BuySellActivePojo.prototype.setTradingvalue=function(e){return jspb.Message.setProto3FloatField(this,11,e)},proto.tcbs.BuySellActivePojo.prototype.getBuyupacc=function(){return jspb.Message.getFloatingPointFieldWithDefault(this,12,0)},proto.tcbs.BuySellActivePojo.prototype.setBuyupacc=function(e){return jspb.Message.setProto3FloatField(this,12,e)},proto.tcbs.BuySellActivePojo.prototype.getSelldownacc=function(){return jspb.Message.getFloatingPointFieldWithDefault(this,13,0)},proto.tcbs.BuySellActivePojo.prototype.setSelldownacc=function(e){return jspb.Message.setProto3FloatField(this,13,e)},proto.tcbs.BuySellActivePojo.prototype.getHighlight=function(){return jspb.Message.getBooleanFieldWithDefault(this,14,!1)},proto.tcbs.BuySellActivePojo.prototype.setHighlight=function(e){return jspb.Message.setProto3BooleanField(this,14,e)},proto.tcbs.BuySellActivePojo.prototype.getBidprice=function(){return jspb.Message.getFloatingPointFieldWithDefault(this,15,0)},proto.tcbs.BuySellActivePojo.prototype.setBidprice=function(e){return jspb.Message.setProto3FloatField(this,15,e)},proto.tcbs.BuySellActivePojo.prototype.getBidvol=function(){return jspb.Message.getFloatingPointFieldWithDefault(this,16,0)},proto.tcbs.BuySellActivePojo.prototype.setBidvol=function(e){return jspb.Message.setProto3FloatField(this,16,e)},proto.tcbs.BuySellActivePojo.prototype.getAskprice=function(){return jspb.Message.getFloatingPointFieldWithDefault(this,17,0)},proto.tcbs.BuySellActivePojo.prototype.setAskprice=function(e){return jspb.Message.setProto3FloatField(this,17,e)},proto.tcbs.BuySellActivePojo.prototype.getAskvol=function(){return jspb.Message.getFloatingPointFieldWithDefault(this,18,0)},proto.tcbs.BuySellActivePojo.prototype.setAskvol=function(e){return jspb.Message.setProto3FloatField(this,18,e)},proto.tcbs.BuySellActivePojo.prototype.getPrevchange=function(){return jspb.Message.getFloatingPointFieldWithDefault(this,19,0)},proto.tcbs.BuySellActivePojo.prototype.setPrevchange=function(e){return jspb.Message.setProto3FloatField(this,19,e)},jspb.Message.GENERATE_TO_OBJECT&&(proto.tcbs.InvestorHistoryTrade.prototype.toObject=function(e){return proto.tcbs.InvestorHistoryTrade.toObject(e,this)},proto.tcbs.InvestorHistoryTrade.toObject=function(e,t){var o={symbol:jspb.Message.getFieldWithDefault(t,1,""),avgprice:jspb.Message.getFloatingPointFieldWithDefault(t,2,0),closevol:jspb.Message.getFloatingPointFieldWithDefault(t,3,0),change:jspb.Message.getFloatingPointFieldWithDefault(t,4,0),reference:jspb.Message.getFloatingPointFieldWithDefault(t,5,0),totalvalue:jspb.Message.getFloatingPointFieldWithDefault(t,6,0),timesec:jspb.Message.getFieldWithDefault(t,7,0),action:jspb.Message.getFieldWithDefault(t,8,""),type:jspb.Message.getFieldWithDefault(t,9,""),notrans:jspb.Message.getFieldWithDefault(t,10,0),unittimeframe:jspb.Message.getFieldWithDefault(t,11,0)};return e&&(o.$jspbMessageInstance=t),o}),proto.tcbs.InvestorHistoryTrade.deserializeBinary=function(e){var e=new jspb.BinaryReader(e),t=new proto.tcbs.InvestorHistoryTrade;return proto.tcbs.InvestorHistoryTrade.deserializeBinaryFromReader(t,e)},proto.tcbs.InvestorHistoryTrade.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();)switch(t.getFieldNumber()){case 1:var o=t.readString();e.setSymbol(o);break;case 2:o=t.readDouble();e.setAvgprice(o);break;case 3:o=t.readDouble();e.setClosevol(o);break;case 4:o=t.readDouble();e.setChange(o);break;case 5:o=t.readDouble();e.setReference(o);break;case 6:o=t.readDouble();e.setTotalvalue(o);break;case 7:o=t.readInt64();e.setTimesec(o);break;case 8:o=t.readString();e.setAction(o);break;case 9:o=t.readString();e.setType(o);break;case 10:o=t.readInt64();e.setNotrans(o);break;case 11:o=t.readInt64();e.setUnittimeframe(o);break;default:t.skipField()}return e},proto.tcbs.InvestorHistoryTrade.prototype.serializeBinary=function(){var e=new jspb.BinaryWriter;return proto.tcbs.InvestorHistoryTrade.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.tcbs.InvestorHistoryTrade.serializeBinaryToWriter=function(e,t){var o;0<(o=e.getSymbol()).length&&t.writeString(1,o),0!==(o=e.getAvgprice())&&t.writeDouble(2,o),0!==(o=e.getClosevol())&&t.writeDouble(3,o),0!==(o=e.getChange())&&t.writeDouble(4,o),0!==(o=e.getReference())&&t.writeDouble(5,o),0!==(o=e.getTotalvalue())&&t.writeDouble(6,o),0!==(o=e.getTimesec())&&t.writeInt64(7,o),0<(o=e.getAction()).length&&t.writeString(8,o),0<(o=e.getType()).length&&t.writeString(9,o),0!==(o=e.getNotrans())&&t.writeInt64(10,o),0!==(o=e.getUnittimeframe())&&t.writeInt64(11,o)},proto.tcbs.InvestorHistoryTrade.prototype.getSymbol=function(){return jspb.Message.getFieldWithDefault(this,1,"")},proto.tcbs.InvestorHistoryTrade.prototype.setSymbol=function(e){return jspb.Message.setProto3StringField(this,1,e)},proto.tcbs.InvestorHistoryTrade.prototype.getAvgprice=function(){return jspb.Message.getFloatingPointFieldWithDefault(this,2,0)},proto.tcbs.InvestorHistoryTrade.prototype.setAvgprice=function(e){return jspb.Message.setProto3FloatField(this,2,e)},proto.tcbs.InvestorHistoryTrade.prototype.getClosevol=function(){return jspb.Message.getFloatingPointFieldWithDefault(this,3,0)},proto.tcbs.InvestorHistoryTrade.prototype.setClosevol=function(e){return jspb.Message.setProto3FloatField(this,3,e)},proto.tcbs.InvestorHistoryTrade.prototype.getChange=function(){return jspb.Message.getFloatingPointFieldWithDefault(this,4,0)},proto.tcbs.InvestorHistoryTrade.prototype.setChange=function(e){return jspb.Message.setProto3FloatField(this,4,e)},proto.tcbs.InvestorHistoryTrade.prototype.getReference=function(){return jspb.Message.getFloatingPointFieldWithDefault(this,5,0)},proto.tcbs.InvestorHistoryTrade.prototype.setReference=function(e){return jspb.Message.setProto3FloatField(this,5,e)},proto.tcbs.InvestorHistoryTrade.prototype.getTotalvalue=function(){return jspb.Message.getFloatingPointFieldWithDefault(this,6,0)},proto.tcbs.InvestorHistoryTrade.prototype.setTotalvalue=function(e){return jspb.Message.setProto3FloatField(this,6,e)},proto.tcbs.InvestorHistoryTrade.prototype.getTimesec=function(){return jspb.Message.getFieldWithDefault(this,7,0)},proto.tcbs.InvestorHistoryTrade.prototype.setTimesec=function(e){return jspb.Message.setProto3IntField(this,7,e)},proto.tcbs.InvestorHistoryTrade.prototype.getAction=function(){return jspb.Message.getFieldWithDefault(this,8,"")},proto.tcbs.InvestorHistoryTrade.prototype.setAction=function(e){return jspb.Message.setProto3StringField(this,8,e)},proto.tcbs.InvestorHistoryTrade.prototype.getType=function(){return jspb.Message.getFieldWithDefault(this,9,"")},proto.tcbs.InvestorHistoryTrade.prototype.setType=function(e){return jspb.Message.setProto3StringField(this,9,e)},proto.tcbs.InvestorHistoryTrade.prototype.getNotrans=function(){return jspb.Message.getFieldWithDefault(this,10,0)},proto.tcbs.InvestorHistoryTrade.prototype.setNotrans=function(e){return jspb.Message.setProto3IntField(this,10,e)},proto.tcbs.InvestorHistoryTrade.prototype.getUnittimeframe=function(){return jspb.Message.getFieldWithDefault(this,11,0)},proto.tcbs.InvestorHistoryTrade.prototype.setUnittimeframe=function(e){return jspb.Message.setProto3IntField(this,11,e)};
class Notifier{status="success";text="test";autoclose=!0;constructor(){}show=(t,s,o)=>{this.status=t||this.status,this.text=s||this.text,this.autoclose=o&&this.autoclose,this.notify=new Notify({status:this.status,text:this.text,autoclose:this.autoclose,position:"right bottom"})};hide=()=>{this.notify.close()}}
class Lightweight{chart={};series={};data={};order={entry:{},tp:{},sl:{}};lines=[];markers=[];ruler={start:{},end:{},point:0};alerts=[];crosshair={};hasCrosshair=!1;hasNewData=!1;constructor(){}setOptions=e=>{this.dataEndpoint=e.dataEndpoint,this.accessToken=e.accessToken,this.localDB=e.localDB,this.audio=e.audio,this.notifier=e.notifier,this.isMobile=e.isMobile,this.timeFrame=e.timeFrame,this.sharkLimit=e.sharkLimit,this.getOrderPosition=e.getOrderPosition,this.closePosition=e.closePosition,this.orderEntryPrice=e.orderEntryPrice,this.orderTpPrice=e.orderTpPrice,this.orderSlPrice=e.orderSlPrice,this.cancelOrder=e.cancelOrder};init=()=>{this.createLightWeightChart(),this.createDataArea(),this.createToolArea(),this.createLegendArea(),this.createFreeArea(),setInterval(()=>this.intervalHandler(this),1e3),window.addEventListener("resize",()=>this.resize(this.chart)),window.addEventListener("keydown",e=>this.keyEvent(e,this))};createLightWeightChart=()=>{var e={localization:{dateFormat:"dd/MM/yyyy",locale:"vi-VN"},rightPriceScale:{visible:!0},leftPriceScale:{visible:!1},layout:{backgroundColor:"#181C27",textColor:"#A2A6AE"},grid:{vertLines:{color:"#30333F"},horzLines:{color:"#30333F"}},crosshair:{mode:LightweightCharts.CrosshairMode.Normal},timeScale:{timeVisible:!0,rightOffset:20,minBarSpacing:.1}},t=document.createElement("div");document.body.append(t),t.id="lightWeightChart",t.style.width="100vw",t.style.height="100vh",t.addEventListener("contextmenu",e=>this.chartContextmenu(e,this)),t.addEventListener("click",e=>this.chartClick(e,this)),this.chart=LightweightCharts.createChart(t,e),this.chart.subscribeCrosshairMove(e=>this.crosshairMove(e,this)),this.chart.subscribeCustomPriceLineDragged(e=>this.priceLineDrag(e,this)),this.series.shark=this.chart.addLineSeries({priceScaleId:"shark",color:"#FF00FF",priceFormat:{minMove:1},scaleMargins:{top:.6,bottom:0},visible:!1}),this.series.price=this.chart.addLineSeries({color:"white",priceFormat:{minMove:.1}}),this.chart.timeScale().fitContent(),this.chartElement=t};removeLightWeightChart=()=>{this.chartElement.remove()};createDataArea=()=>{var e=document.createElement("div");e.id="dataAreaDiv",e.className="area",this.chartElement.append(e),this.createSpinnerImg(e),this.createDateInput(e),this.createTimeFrameSelect(e),this.createRefreshButton(e),this.createClearButton(e)};createClearButton=e=>{var t=document.createElement("div");t.id="clearButton",t.className="command fa fa-trash",t.title="Delete local data",t.addEventListener("click",()=>{this.localDB.clear("data"),this.loadChartData()}),e.append(t)};createRefreshButton=e=>{var t=document.createElement("div");t.id="refreshButton",t.className="command fa fa-refresh",t.title="Refresh chart",t.addEventListener("click",()=>this.loadChartData()),e.append(t)};createTimeFrameSelect=e=>{var i=document.createElement("select");i.id="timeFrameSelect",i.className="command",[{text:"Tick",value:0},{text:"1 min",value:1},{text:"5 min",value:5},{text:"30 min",value:30},{text:"1 day",value:1440}].forEach((e,t)=>{var r=document.createElement("option");r.value=e.value,r.text=e.text,i.appendChild(r)}),i.value=this.timeFrame,i.addEventListener("change",e=>{this.timeFrame=e.target.value,this.loadChartData().then(()=>this.chart.timeScale().resetTimeScale())}),e.append(i)};createDateInput=e=>{var t=document.createElement("input");t.id="dateInput",t.type="date",t.value=moment().format("YYYY-MM-DD"),t.className="command",t.addEventListener("change",e=>{e.target.value&&this.loadChartData()}),e.append(t),this.dateInput=t};createSpinnerImg=e=>{var t=document.createElement("img");t.id="spinnerImg",t.style.opacity=0,t.src=chrome.runtime.getURL("spinner.gif"),e.append(t),this.spinnerImg=t};createToolArea=()=>{var e=document.createElement("div");e.id="toolAreaDiv",e.className="area",this.chartElement.append(e),this.createDrawLineButton(e),this.createDrawMarkerButton(e),this.createDrawRulerButton(e),this.createDrawAlertButton(e)};createDrawLineButton=e=>{var t=document.createElement("div");t.id="drawLineButton",t.className="command fa fa-minus",t.addEventListener("click",e=>{var t=e.target.classList.contains("selected");document.querySelectorAll("#toolAreaDiv > .command").forEach(e=>e.classList.remove("selected")),t||e.target.classList.add("selected"),e.stopPropagation()}),t.addEventListener("contextmenu",e=>{this.removeToolLines(),e.target.classList.remove("selected"),e.preventDefault(),e.stopPropagation()}),e.append(t),this.drawLineButton=t};createDrawMarkerButton=e=>{var t=document.createElement("div");t.id="drawMarkerButton",t.className="command fa fa-map-marker",t.addEventListener("click",e=>{var t=e.target.classList.contains("selected");document.querySelectorAll("#toolAreaDiv > .command").forEach(e=>e.classList.remove("selected")),t||e.target.classList.add("selected"),e.stopPropagation()}),t.addEventListener("contextmenu",e=>{this.removeMarkers(),e.target.classList.remove("selected"),e.preventDefault(),e.stopPropagation()}),e.append(t),this.drawMarkerButton=t};createDrawRulerButton=e=>{var t=document.createElement("div");t.id="drawRulerButton",t.className="command fa fa-arrows-v",t.addEventListener("click",e=>{var t=e.target.classList.contains("selected");document.querySelectorAll("#toolAreaDiv > .command").forEach(e=>e.classList.remove("selected")),t||(e.target.classList.add("selected"),this.removeRuler()),e.stopPropagation()}),t.addEventListener("contextmenu",e=>{this.removeRuler(),e.target.classList.remove("selected"),e.preventDefault(),e.stopPropagation()}),e.append(t),this.drawRulerButton=t};createDrawAlertButton=e=>{var t=document.createElement("div");t.id="drawAlertButton",t.className="command fa fa-bell-o",t.addEventListener("click",e=>{var t=e.target.classList.contains("selected");document.querySelectorAll("#toolAreaDiv > .command").forEach(e=>e.classList.remove("selected")),t||e.target.classList.add("selected"),e.stopPropagation()}),t.addEventListener("contextmenu",e=>{this.removeAlerts(),e.target.classList.remove("selected"),e.preventDefault(),e.stopPropagation()}),e.append(t),this.drawAlertButton=t};createLegendArea=()=>{var e=document.createElement("div");e.id="legendAreaDiv",this.chartElement.append(e),this.createPriceLegendP(e),this.createSharkLegendP(e)};createPriceLegendP=e=>{var t=document.createElement("p");t.id="priceLegendP",e.append(t),this.priceLegendP=t};createSharkLegendP=e=>{var t=document.createElement("p");t.id="sharkLegendP",e.append(t),this.sharkLegendP=t};createFreeArea=()=>{var e=this.chartElement;this.createCancelOrderButton(e),this.createEntryOrderButton(e),this.createTpslOrderButton(e),this.createScrollButton(e)};createCancelOrderButton=e=>{var t=document.createElement("button");t.id="cancelOrderButton",t.innerText="X",t.style.display="none",t.addEventListener("click",()=>{this.closePosition(),this.cancelOrder(),this.toggleCancelOrderButton(!1),this.removeOrderLine("entry"),this.removeOrderLine("tp"),this.removeOrderLine("sl"),this.localDB.clear("order")}),e.append(t),this.cancelOrderButton=t};createEntryOrderButton=e=>{var t=document.createElement("button");t.id="entryOrderButton",t.innerText="Entry",t.style.display="none",t.addEventListener("click",()=>{this.orderEntryPrice(this.order),this.drawOrderLine("entry"),this.toggleCancelOrderButton(!0),this.hideOrderButton()}),e.append(t),this.entryOrderButton=t};createTpslOrderButton=e=>{var t=document.createElement("button");t.id="tpslOrderButton",t.innerText="TP/SL",t.style.display="none",t.addEventListener("click",()=>{this.orderTpPrice(this.order,!0),this.drawOrderLine("tp"),this.orderSlPrice(this.order,!0),this.drawOrderLine("sl"),this.hideOrderButton()}),e.append(t),this.tpslOrderButton=t};createScrollButton=e=>{var t=document.createElement("div");t.id="scrollButton",t.className="command fa fa-angle-double-right",t.addEventListener("click",()=>this.chart.timeScale().scrollToRealTime()),e.append(t)};chartContextmenu=(e,t)=>{t.showOrderButton(),e.preventDefault()};chartClick=(e,t)=>{t.hideOrderButton(),t.drawLineButton.classList.contains("selected")?t.drawToolLine():t.drawMarkerButton.classList.contains("selected")?t.drawMarker():t.drawRulerButton.classList.contains("selected")?t.drawRuler():t.drawAlertButton.classList.contains("selected")&&t.drawAlert()};crosshairMove=(e,t)=>{e.time?(t.updateLegend(e.seriesPrices.get(t.series.price),e.seriesPrices.get(t.series.shark)),t.hasCrosshair=!0,t.crosshair.time=e.time,t.crosshair.price=e.seriesPrices.get(t.series.price)):(t.hasCrosshair=!1,t.isMobile||(t.crosshair.time=null,t.crosshair.price=null)),null!=e.point&&(t.crosshair.x=e.point.x,t.crosshair.y=e.point.y)};priceLineDrag=(e,t)=>{var r,i,a=e.customPriceLine.options(),s=(a.price=t.formatPrice(a.price),+e.fromPriceString),o=a.price;switch(a.lineType){case"order":o!=s&&(i=!1,r=t.getOrderPosition(),"entry"==a.kind?r||(i=!0,t.order[a.kind].price=o,t.orderEntryPrice(t.order),t.drawOrderLine(a.kind)):0<t.order.side*r&&(i=!0,t.order[a.kind].price=o,"tp"==a.kind?t.orderTpPrice(t.order):t.orderSlPrice(t.order),drawOrderLine(a.kind)),i||(t.order[a.kind].line.applyOptions({price:s}),t.notifier.show("warning","Không được thay đổi.")));break;case"line":t.localDB.set("line",{price:s,removed:!0}),t.localDB.set("line",a),t.drawLineButton.classList.remove("selected");break;case"ruler":1==a.point?(t.localDB.set("ruler",a),2==t.ruler.point&&(r=+(o+ +t.ruler.end.options().title).toFixed(1),t.ruler.end.applyOptions({price:r}),t.localDB.set("ruler",t.ruler.end.options()))):(t.localDB.set("ruler",a),i=+t.ruler.start.options().price,t.ruler.end.applyOptions({title:(o-i).toFixed(1)}));break;case"alert":t.audio.pause(),t.localDB.set("alert",{price:s,removed:!0}),t.localDB.set("alert",a),t.drawAlertButton.classList.remove("selected")}};showOrderButton=()=>{var e,t;this.getOrderPosition()?this.order.tp.hasOwnProperty("line")||(this.tpslOrderButton.style.left=+(this.crosshair.x+10)+"px",this.tpslOrderButton.style.top=+(this.crosshair.y+10)+"px",this.tpslOrderButton.style.display="block"):this.order.entry.hasOwnProperty("line")||(t=(e=this.coordinateToPrice(this.crosshair.y))>=this.data.price.slice(-1)[0].value?1:-1,this.order.entry.price=e,this.order.side=t,this.entryOrderButton.style.left=+(this.crosshair.x+10)+"px",this.entryOrderButton.style.top=+(this.crosshair.y+10)+"px",this.entryOrderButton.style.background=0<t?"green":"red",this.entryOrderButton.innerText=`${0<t?"Long":"Short"} `+e,this.entryOrderButton.style.display="block")};hideOrderButton=()=>{this.entryOrderButton.style.display="none",this.tpslOrderButton.style.display="none"};drawOrderLine=e=>{var t,r;switch(e){case"entry":t="silver",r=0<this.order.side?"Long":"Short";break;case"tp":t="lime",r=Math.abs(this.order.tp.price-this.order.entry.price).toFixed(1);break;case"sl":t="red",r=Math.abs(this.order.sl.price-this.order.entry.price).toFixed(1)}this.order[e].hasOwnProperty("line")?this.order[e].line.applyOptions({price:this.order[e].price,title:r}):this.order[e].line=this.series.price.createPriceLine({lineType:"order",kind:e,price:this.order[e].price,color:t,lineWidth:1,lineStyle:LightweightCharts.LineStyle.Solid,title:r,draggable:!0}),this.localDB.set("order",{kind:e,price:+this.order[e].price,side:this.order.side})};removeOrderLine=e=>{this.order[e].hasOwnProperty("line")&&(this.series.price.removePriceLine(this.order[e].line),delete this.order[e].line)};drawToolLine=()=>{const t=this.formatPrice(this.coordinateToPrice(this.crosshair.y));var e=this.lines.findIndex(e=>{e=e.options();return e.type=+e.price==t});-1!=e?(e=this.lines.splice(e,1),this.series.price.removePriceLine(e[0]),this.localDB.set("line",{price:t,removed:!0})):(e={lineType:"line",price:t,color:"aqua",lineWidth:1,lineStyle:LightweightCharts.LineStyle.Solid,draggable:!0},this.lines.push(this.series.price.createPriceLine(e)),this.localDB.set("line",e)),this.drawLineButton.classList.remove("selected")};removeToolLines=()=>{this.lines.forEach(e=>this.series.price.removePriceLine(e)),this.lines=[],this.localDB.clear("line")};drawMarker=()=>{var e,t;this.crosshair.time&&((e=this.markers.filter(e=>e.time!=this.crosshair.time)).length==this.markers.length?(t=this.crosshair.y>=this.series.price.priceToCoordinate(this.crosshair.price),this.markers.push({time:this.crosshair.time,position:t?"belowBar":"aboveBar",color:t?"lime":"red",shape:t?"arrowUp":"arrowDown"})):this.markers=e,this.series.price.setMarkers(this.markers),this.localDB.clear("marker").then(()=>this.localDB.set("marker",this.markers)),this.drawMarkerButton.classList.remove("selected"))};removeMarkers=()=>{this.markers=[],this.series.price.setMarkers([]),this.localDB.clear("marker")};drawRuler=()=>{var e,t=this.coordinateToPrice(this.crosshair.y),r={lineType:"ruler",price:t,color:"yellow",lineWidth:1,lineStyle:LightweightCharts.LineStyle.Solid,draggable:!0};0==this.ruler.point?(r.point=1,r.title="0",this.ruler.start=this.series.price.createPriceLine(r),this.ruler.point=1,this.localDB.set("ruler",r)):1==this.ruler.point&&(e=+this.ruler.start.options().price,r.point=2,r.title=(t-e).toFixed(1),this.ruler.end=this.series.price.createPriceLine(r),this.ruler.point=2,this.localDB.set("ruler",r),this.drawRulerButton.classList.remove("selected"))};removeRuler=()=>{0<this.ruler.point&&(this.series.price.removePriceLine(this.ruler.start),1<this.ruler.point&&this.series.price.removePriceLine(this.ruler.end),this.ruler={start:{},end:{},point:0},this.localDB.clear("ruler"))};drawAlert=()=>{const t=this.formatPrice(this.coordinateToPrice(this.crosshair.y));var e=this.alerts.findIndex(e=>{e=e.options();return e.type=+e.price==t});-1!=e?(e=this.alerts.splice(e,1),this.series.price.removePriceLine(e[0]),this.localDB.set("alert",{price:t,removed:!0})):(e={lineType:"alert",price:t,title:t>=this.data.original.slice(-1)[0].price?">":"<",color:"#FF00FF",lineWidth:1,lineStyle:LightweightCharts.LineStyle.Solid,draggable:!0},this.alerts.push(this.series.price.createPriceLine(e)),this.localDB.set("alert",e)),this.drawAlertButton.classList.remove("selected"),this.audio.pause()};removeAlerts=()=>{this.alerts.forEach(e=>this.series.price.removePriceLine(e)),this.alerts=[],this.localDB.clear("alert"),this.audio.pause()};toggleCancelOrderButton=e=>{e?(this.cancelOrderButton.style.display="block",this.cancelOrderButton.style.background=0<this.order.side?"green":"red"):this.cancelOrderButton.style.display="none"};updateLegend=(e,t)=>{e&&(this.priceLegendP.innerText=e),t&&(this.sharkLegendP.innerText=t.toLocaleString("en-US"))};coordinateToPrice=e=>this.formatPrice(this.series.price.coordinateToPrice(e));formatPrice=e=>+e.toFixed(1);loadChartData=()=>new Promise(async(e,t)=>{this.toggleSpinner(!0);for(var r=await this.getServerData();;){this.hasNewData=!1;var i=await this.localDB.get("data");const a=new Set(r.map(e=>e.time)),s=[...r,...i.filter(e=>!a.has(e.time))].sort((e,t)=>e.time-t.time);if(!this.hasNewData){this.localDB.clear("data").then(()=>this.localDB.set("data",s)),this.data=s.reduce((e,t)=>this.createChartData(e,t),{original:[],price:[],shark:[]}),this.series.price.setData(this.data.price),this.series.shark.setData(this.data.shark),!this.hasCrosshair&&this.data.original.length&&this.updateLegend(this.data.price.slice(-1)[0].value,this.data.shark.slice(-1)[0].value),this.toggleSpinner(!1),e();break}}});updateChartData=e=>{this.hasNewData=!0;var e={time:e.timesec,price:e.closeprice,volume:e.closevol,action:e.action},t=(this.data=this.createChartData(this.data,e),this.data.price.slice(-1)[0]),r=this.data.shark.slice(-1)[0];0<this.timeFrame?(this.series.price.setData(this.data.price),this.series.shark.setData(this.data.shark)):(this.series.price.update(t),this.series.shark.update(r)),this.hasCrosshair||this.updateLegend(t.value,r.value),this.localDB.set("data",e),this.data.original.push(e)};getServerData=()=>new Promise(async(e,t)=>{for(var r={action:"GET",date:this.dateInput.value},i=this.dataEndpoint;;)try{e(await(await fetch(i,{method:"POST",headers:{"Content-Type":"application/json",Authorization:"Bearer "+this.accessToken},body:JSON.stringify(r)})).json());break}catch(e){continue}});createChartData=(e,t)=>{var r,i,a,s,o=t.time+25200,n=e.shark.length?e.shark.slice(-1)[0].value:0,c=("BU"==t.action?1:-1)*t.volume;return 0<this.timeFrame&&(r=60*this.timeFrame,i=Math.floor(o/r),a=!1,(a=e.price.length&&(s=e.price.slice(-1)[0].time,i==Math.floor(s/r))?!0:a)&&(e.price.pop(),e.shark.pop()),o=i*r),e.original.push(t),e.price.push({time:o,value:t.price}),e.shark.push({time:o,value:n+(t.volume>this.sharkLimit?c:0)}),e};getHelperData=()=>new Promise(async(e,t)=>{(await this.localDB.get("order")).map(e=>{this.order.side=e.side,this.order[e.kind].price=e.price,this.drawOrderLine(e.kind),"entry"==e.kind&&(this.getOrderPosition()&&this.order.entry.line.applyOptions({draggable:!1}),this.toggleCancelOrderButton(!0))});(await this.localDB.get("line")).forEach(e=>{e.removed||this.lines.push(this.series.price.createPriceLine(e))}),this.markers=await this.localDB.get("marker"),this.series.price.setMarkers(this.markers);var r=await this.localDB.get("ruler");2==r.length&&r.forEach(e=>{this.ruler.point=2,1==e.point?this.ruler.start=this.series.price.createPriceLine(e):this.ruler.end=this.series.price.createPriceLine(e)}),(await this.localDB.get("alert")).forEach(e=>{e.removed||this.alerts.push(this.series.price.createPriceLine(e))}),e()});intervalHandler=r=>{r.getOrderPosition()?r.order.entry.hasOwnProperty("line")&&!r.order.tp.hasOwnProperty("line")&&(r.orderTpPrice(r.order,!0),r.drawOrderLine("tp"),r.orderSlPrice(r.order,!0),r.drawOrderLine("sl"),r.order.entry.line.applyOptions({draggable:!1}),r.notifier.show("success","Đã mở vị thế.")):r.order.tp.hasOwnProperty("line")&&(r.cancelOrder(),r.toggleCancelOrderButton(!1),r.removeOrderLine("entry"),r.removeOrderLine("tp"),r.removeOrderLine("sl"),r.localDB.clear("order"),r.notifier.show("success","Đã đóng vị thế.")),r.audio.paused&&r.alerts.forEach(e=>{var t,e=e.options();!e.removed&&r.data.original.length&&(t=r.data.original.slice(-1)[0].price,">"==e.title&&t>=e.price||"<"==e.title&&t<=e.price)&&r.audio.play()})};toggleSpinner=e=>{this.spinnerImg.style.opacity=e?1:0};resize=e=>{e.resize(window.innerWidth,window.innerHeight)};keyEvent=(e,t)=>{var r;e.ctrlKey||e.metaKey?e.shiftKey?39==e.keyCode&&t.chart.timeScale().scrollToRealTime():38==e.keyCode?(r=t.chart.options(),t.chart.timeScale().applyOptions({barSpacing:r.timeScale.barSpacing+.1})):40==e.keyCode?(r=t.chart.options()).timeScale.barSpacing>r.timeScale.minBarSpacing&&t.chart.timeScale().applyOptions({barSpacing:r.timeScale.barSpacing-.1}):37==e.keyCode?(r=t.chart.timeScale().scrollPosition(),t.chart.timeScale().scrollToPosition(r-10)):39==e.keyCode?(r=t.chart.timeScale().scrollPosition(),t.chart.timeScale().scrollToPosition(r+10)):97==e.keyCode?t.drawLineButton.click():98==e.keyCode?t.drawMarkerButton.click():99==e.keyCode?t.drawRulerButton.click():100==e.keyCode&&t.drawAlertButton.click():27===e.which&&t.removeOrderButton()}}
class OptionView{TOKEN_KEY="SOAT";isLogedin=!1;constructor(){}setOptions=e=>{this.APP_NAME=e.APP_NAME,this.deviceId=e.deviceId,this.registerEndpoint=e.registerEndpoint,this.loginEndpoint=e.loginEndpoint,this.logoutEndpoint=e.logoutEndpoint,this.menuButtonCallback=e.menuButtonCallback,this.notifier=e.notifier,this.lightweight=e.lightweight};init=()=>{this.createContainer()};createContainer=()=>{var e=document.createElement("div");e.id="optionViewContainer",document.body.append(e),this.container=e,this.createHearderContainer(e),this.createLoginContainer(e),this.createRegisterContainer(e),this.createInfoContainer(e),this.createOptionContainer(e)};createHearderContainer=e=>{var t=document.createElement("div"),e=(t.id="hearderContainer",e.append(t),this.hearderContainer=t,document.createElement("p"));t.append(e),e.className="title",e.innerText="SmartOrder cho VPS",e=document.createElement("p"),t.append(e),e.className="subtitle",e.innerText="Phát triển bởi Tho PS",e=document.createElement("p"),t.append(e),e.className="homepage link",e.innerText="Trang chủ",e.addEventListener("click",()=>window.open("https://www.w3schools.com"))};createLoginContainer=e=>{var t=document.createElement("div"),e=(t.id="loginContainer",t.className="section",t.style.display=this.isLogedin?"none":"block",e.append(t),this.loginContainer=t,document.createElement("form")),t=(t.append(e),e.id="loginForm",e.className="wrapper",e.addEventListener("submit",e=>this.login(e,this)),document.createElement("p")),n=(e.append(t),t.className="invalid",this.loginMessage=t,document.createElement("input")),i=(e.append(n),n.id="loginUsername",n.type="text",n.placeholder="Email hoặc Số điện thoại",n.required=!0,this.loginUsername=n,this.isLogedin||this.loginUsername.focus(),n=document.createElement("input"),e.append(n),n.id="loginPassword",n.type="password",n.placeholder="Mật khẩu",n.required=!0,this.loginPassword=n,document.createElement("div")),n=(e.append(i),n=document.createElement("input"),i.append(n),n.id="loginRememberMe",n.type="checkbox",this.loginRememberMe=n,document.createElement("label")),i=(i.append(n),n.setAttribute("for","loginRememberMe"),n.innerHTML="&ensp;Lưu đăng nhập",document.createElement("button")),t=(e.append(i),i.id="loginSubmit",i.innerText="ĐĂNG NHẬP",i.type="submit",this.loginSubmit=i,document.createElement("p"));e.append(t),t.className="link",t.innerText="Đăng ký",t.addEventListener("click",e=>{this.loginContainer.style.display="none",this.registerContainer.style.display="block",this.registerName.focus()})};createRegisterContainer=e=>{var t=document.createElement("div"),e=(t.id="registerContainer",t.className="section",t.style.display="none",e.append(t),this.registerContainer=t,document.createElement("form")),t=(t.append(e),e.id="registerForm",e.className="wrapper",e.addEventListener("submit",e=>this.register(e,this)),document.createElement("p")),n=(e.append(t),t.className="invalid",this.registerMessage=t,document.createElement("input")),n=(e.append(n),n.id="registerName",n.type="text",n.placeholder="Tên",n.required=!0,this.registerName=n,n=document.createElement("input"),e.append(n),n.id="registerEmail",n.type="email",n.placeholder="Email",n.required=!0,this.registerEmail=n,n=document.createElement("input"),e.append(n),n.id="registerPhone",n.type="text",n.placeholder="Số điện thoại",n.required=!0,n.setAttribute("maxlength",10),n.setAttribute("pattern","[0-9]+"),this.registerPhone=n,n=document.createElement("input"),e.append(n),n.id="registerPassword",n.type="password",n.placeholder="Mật khẩu",n.required=!0,this.registerPassword=n,n=document.createElement("input"),e.append(n),n.id="registerConfirmPassword",n.type="password",n.placeholder="Xác nhận mật khẩu",n.required=!0,this.registerConfirmPassword=n,document.createElement("button")),t=(e.append(n),n.id="registerSubmit",n.innerText="ĐĂNG KÝ",n.type="submit",this.registerSubmit=n,document.createElement("p"));e.append(t),t.className="link",t.innerText="Đăng nhập",t.addEventListener("click",e=>{this.registerContainer.style.display="none",this.loginContainer.style.display="block",this.loginUsername.focus()})};createInfoContainer=e=>{var t=document.createElement("div"),e=(t.id="infoContainer",t.className="section",t.style.display=this.isLogedin?"block":"none",e.append(t),this.infoContainer=t,document.createElement("div")),t=(e.className="wrapper",t.append(e),document.createElement("button")),t=(e.append(t),t.innerText="ĐĂNG XUẤT",t.addEventListener("click",e=>this.logout(e,this)),document.createElement("p"));e.append(t),t.className="link",t.innerText="Cài đặt",t.addEventListener("click",e=>{this.infoContainer.style.display="none",this.optionContainer.style.display="block"})};createOptionContainer=e=>{var t=document.createElement("div"),e=(t.id="optionContainer",t.className="section",t.style.display="none",e.append(t),this.optionContainer=t,document.createElement("div")),t=(e.className="wrapper",t.append(e),document.createElement("p"));e.append(t),t.className="link",t.innerText="Trở về",t.addEventListener("click",e=>{this.optionContainer.style.display="none",this.infoContainer.style.display="block"})};register=(e,t)=>{if(e.preventDefault(),t.registerConfirmPassword.value!=t.registerPassword.value)return!(t.registerMessage.innerText="Mật khẩu không khớp");t.registerSubmit.innerText="Đang đăng ký...",t.registerSubmit.disabled=!0,t.registerMessage.innerText="";e={name:t.registerName.value,email:t.registerEmail.value,phone:t.registerPhone.value,password:t.registerPassword.value,deviceId:t.deviceId,chanel:t.APP_NAME};fetch(t.registerEndpoint,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)}).then(e=>{if(e.ok)return e.json();throw new Error(e.statusText)}).then(e=>{t.registerSubmit.innerText="ĐĂNG KÝ",t.registerSubmit.disabled=!1,e.isOk?(t.setToken(e.token),t.user=e.user,t.notifier.show("success","Đăng ký thành công")):"emailExist"==e.message?t.registerMessage.innerText="Emai này đã đăng ký":"phoneExist"==e.message&&(t.registerMessage.innerText="Số điện thoại này đã đăng ký")}).catch(e=>{t.notifier.show("error","Đăng ký thất bại"),t.registerSubmit.innerText="ĐĂNG KÝ",t.registerSubmit.disabled=!1})};login=(e,n)=>(e.preventDefault(),new Promise(t=>{n.loginSubmit.innerText="Đang đăng nhập...",n.loginSubmit.disabled=!0,n.loginMessage.innerText="";var e={username:n.loginUsername.value,password:n.loginPassword.value,rememberMe:n.loginRememberMe.value,deviceId:n.deviceId,chanel:n.APP_NAME};console.log("login-data: ",e),fetch(n.loginEndpoint,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)}).then(e=>{if(e.ok)return e.json();throw new Error(e.statusText)}).then(e=>{console.log("login: ",e),n.loginSubmit.innerText="ĐĂNG NHẬP",n.loginSubmit.disabled=!1,e.isOk?(n.setToken(e.token),n.user=e.user,n.loginUsername.value="",n.loginPassword.value="",n.loginContainer.style.display="none",n.infoContainer.style.display="block",n.menuButtonCallback(!0)):"unauthorized"==e.message?n.loginMessage.innerText="Sai thông tin đăng nhập":"unsetup"==e.message?n.loginMessage.innerText="Lỗi khởi tạo tài khoản":"expired"==e.message?n.loginMessage.innerText="Quá hạn sử dụng dịch vụ":"deviceLimit"==e.message&&(n.loginMessage.innerText="Quá giới hạn thiết bị"),t()}).catch(e=>t(!1))}));logout=(e,n)=>new Promise(e=>{var t=n.getToken();fetch(n.logoutEndpoint,{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer "+t}}).then(()=>{n.removeToken(),n.lightweight.removeLightWeightChart(),n.infoContainer.style.display="none",n.loginContainer.style.display="block",n.menuButtonCallback(!1),n.loginUsername.focus(),e()})});getUser=e=>{var n=this;return new Promise(t=>{n.accessToken=n.getToken(),n.accessToken?fetch(e,{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer "+n.accessToken}}).then(e=>{if(e.ok)return e.json();throw new Error(e.statusText)}).then(e=>{console.log("getUser: ",e),n.user=e,n.isLogedin=!!e.code,t(n.isLogedin)}).catch(e=>t(!1)):t(!1)})};setToken=e=>localStorage.setItem(this.TOKEN_KEY,JSON.stringify(e));removeToken=()=>localStorage.removeItem(this.TOKEN_KEY);getToken=()=>{var e=JSON.parse(localStorage.getItem(this.TOKEN_KEY));return!(!e||!moment().isBefore(e.expires_at))&&e.access_token};toggle=()=>{this.container.classList.contains("show")?this.container.classList.remove("show"):this.container.classList.add("show")}}
class LocalDatabase{constructor(){}init=()=>new Promise((t,e)=>{var r=indexedDB.open("vpsDB",1);r.onupgradeneeded=e=>{console.log("onupgradeneeded"),this.database=e.target.result,this.database.createObjectStore("data",{keyPath:"time"}),this.database.createObjectStore("order",{keyPath:"kind"}),this.database.createObjectStore("marker",{keyPath:"time"}),this.database.createObjectStore("line",{keyPath:"price"}),this.database.createObjectStore("ruler",{keyPath:"point"}),this.database.createObjectStore("alert",{keyPath:"price"}),t()},r.onsuccess=e=>{console.log("onsuccess"),this.database=e.target.result,t()},r.onerror=()=>{console.log("onerror"),location.reload(),e()}});get=o=>{var s=this.database;return new Promise(function(t,e){var r,a=s.transaction(o,"readonly");Array.isArray(o)?(r=o.map(e=>a.objectStore(e)).map(n),Promise.all(r).then(e=>t(e))):n(a.objectStore(o)).then(e=>t(e))});function n(a){return new Promise(function(t,e){var r=a.getAll();r.onsuccess=e=>t(e.target.result),r.onerror=()=>e()})}};set=(e,t)=>{const r=this.database.transaction(e,"readwrite").objectStore(e);Array.isArray(t)?0<t.length&&t.forEach(e=>r.put(e)):r.put(t)};clear=a=>{var o=this.database;return new Promise(function(e,t){var r=o.transaction(a,"readwrite").objectStore(a).clear();r.onsuccess=()=>{e()},r.onerror=e=>{console.error("Error to empty Object Store: "+a),t()}})}}
class SmartOrder{APP_NAME="SmartOrder";notifier=new Notifier;localDB=new LocalDatabase;audio=new Audio(chrome.runtime.getURL("alert.wav"));isMobile=navigator.userAgentData.mobile;currentTime=moment().unix();lightweight=new Lightweight;optionView=new OptionView;constructor(){goog.require("proto.tcbs.BuySellActivePojo")}init=async()=>{await this.getDeviceId(),console.log("visitorId: ",this.deviceId),await this.getLocalConfig(),await this.optionView.getUser(this.config.root+this.config.endpoint.user),console.log("user: ",this.optionView.user),this.createMenuButtons(),this.registerEvent(),this.optionView.setOptions({APP_NAME:this.APP_NAME,deviceId:this.deviceId,notifier:this.notifier,lightweight:this.lightweight,registerEndpoint:this.config.root+this.config.endpoint.register,loginEndpoint:this.config.root+this.config.endpoint.login,logoutEndpoint:this.config.root+this.config.endpoint.logout,menuButtonCallback:this.toggleButton}),this.optionView.init(),(this.optionView.isLogedin?(this.notifier.show("warning","Đang cài đặt biểu đồ ...",!1),this.toggleButton(!0),await this.getServerConfig(),this.lightweight.setOptions({dataEndpoint:this.config.root+this.config.endpoint.data,accessToken:this.optionView.accessToken,localDB:this.localDB,notifier:this.notifier,audio:this.audio,isMobile:this.isMobile,timeFrame:this.config.timeFrame,sharkLimit:this.config.sharkLimit,getOrderPosition:this.getOrderPosition,closePosition:this.closePosition,orderEntryPrice:this.orderEntryPrice,orderTpPrice:this.orderTpPrice,orderSlPrice:this.orderSlPrice,cancelOrder:this.cancelOrder}),this.lightweight.init(),await this.localDB.init(),await this.lightweight.loadChartData(),await this.lightweight.getHelperData(),this.connectSocket(),document.getElementById("sohopdong").value=this.config.contractNumber,document.getElementById("right_price").value="MTL",this.audio.loop=!0,setInterval(()=>this.intervalHandler(this),1e3),setInterval(()=>this.refreshDataInSession(this),6e4),this.notifier.hide(),this.lightWeightButton):this.optionButton).click()};getLocalConfig=()=>new Promise((e,t)=>{var i=chrome.runtime.getURL("config.json");fetch(i).then(t=>t.json()).then(t=>{this.config=t,e()}).catch(()=>{console.log(err),confirm("Get local config error. Refresh now?")&&location.reload()})});getServerConfig=()=>new Promise((e,t)=>{var i=this.config.root+this.config.endpoint.config;fetch(i,{method:"POST",headers:{"Content-Type":"application/json",Authorization:"Bearer "+this.optionView.accessToken},body:JSON.stringify({})}).then(t=>t.json()).then(t=>{console.log("serverConfig",t),this.config={...this.config,...t},e()}).catch(t=>{console.log(t),confirm("Get server config error. Refresh now?")&&location.reload()})});createMenuButtons=()=>{var t=document.createElement("div");t.id="directionCommandDiv",document.body.append(t),this.createTradingViewButton(t),this.createLightWeightButton(t),this.createOptionButton(t),this.createReportButton(t)};createTradingViewButton=t=>{var e=document.createElement("button");e.id="tradingViewButton",e.classList="fa fa-bar-chart",e.title="TradingView Chart",e.style.display="none",e.addEventListener("click",()=>{var t=document.getElementById("left_order_type"),e=document.getElementById("right_order_type"),i=document.querySelector("#mainFooter .foot_tab:nth-child(1)"),n=document.querySelector("#mainFooter .foot_tab:nth-child(2)");i.classList.remove("fa","fa-check-circle"),n.classList.remove("fa","fa-question-circle"),document.body.classList.contains("tradingview-chart")?(document.body.classList.remove("tradingview-chart"),document.body.classList.remove("full-chart"),t.innerText="Lệnh thường",e.innerText="Lệnh điều kiện",i.innerText="DANH SÁCH LỆNH",n.innerText="DANH SÁCH LỆNH ĐIỀU KIỆN"):(document.body.classList.add("tradingview-chart"),document.body.classList.add("full-chart"),document.body.classList.remove("lightweight-chart"),t.innerText="LT",e.innerText="LĐK",i.innerText="LỆNH THƯỜNG",n.innerText="L. ĐIỀU KIỆN")}),t.append(e),this.tradingViewButton=e};createLightWeightButton=t=>{var e=document.createElement("button");e.id="lightWeightButton",e.classList="fa fa-line-chart",e.title="LightWeight Chart",e.style.display="none",e.addEventListener("click",()=>{var t=document.getElementById("left_order_type"),e=document.getElementById("right_order_type"),i=document.querySelector("#mainFooter .foot_tab:nth-child(1)"),n=document.querySelector("#mainFooter .foot_tab:nth-child(2)");document.body.classList.contains("lightweight-chart")?(document.body.classList.remove("lightweight-chart"),document.body.classList.remove("full-chart"),t.innerText="Lệnh thường",e.innerText="Lệnh điều kiện",i.classList.remove("fa","fa-check-circle"),i.innerText="DANH SÁCH LỆNH",n.classList.remove("fa","fa-question-circle"),n.innerText="DANH SÁCH LỆNH ĐIỀU KIỆN"):(document.body.classList.add("lightweight-chart"),document.body.classList.add("full-chart"),document.body.classList.remove("tradingview-chart"),t.innerText="LT",e.innerText="LĐK",i.classList.add("fa","fa-check-circle"),i.innerText="",n.classList.add("fa","fa-question-circle"),n.innerText="")}),t.append(e),this.lightWeightButton=e};createOptionButton=t=>{var e=document.createElement("button");e.id="optionButton",e.classList="fa fa-cog",e.title="Option",e.addEventListener("click",()=>this.optionButtonClick(this)),t.append(e),this.optionButton=e};optionButtonClick=t=>{t.optionView.toggle()};createReportButton=t=>{var e=document.createElement("button");e.id="reportButton",e.classList="fa fa-flag-checkered",e.title="Report",e.style.display="none",e.addEventListener("click",()=>this.reportButtonClick(this)),t.append(e),this.reportButton=e};reportButtonClick=t=>{t.currentTime>t.config.time.end&&t.reportHandler()};registerEvent=()=>{document.querySelector(".timeStamp").addEventListener("dblclick",()=>{document.fullscreenElement?document.exitFullscreen():document.documentElement.requestFullscreen()})};getOrderPosition=()=>{var t=document.querySelector(`#danhmuc_${this.config.symbol} > td:nth-child(2)`);return!t||(t=t.innerText,isNaN(t))?0:+t};closePosition=()=>{var t=this.getOrderPosition();t&&(document.getElementById("select_normal_order_wrapper").click(),document.getElementById("right_price").value="MTL",document.getElementById("sohopdong").value=Math.abs(t),document.getElementById("btn_"+(0<t?"short":"long")).click())};orderEntryPrice=t=>{this.callScript("onCancelAllOrderPending('order_condition')"),document.getElementById("select_condition_order_wrapper").click(),document.getElementById("right_stopOrderIndex").value=t.entry.price,document.getElementById("right_price").value="MTL",document.getElementById("right_selStopOrderType").value=0<t.side?"SOL":"SOU",setTimeout(()=>{document.getElementById("btn_"+(0<t.side?"long":"short")).click()},1e3)};orderTpPrice=(t,e=!1)=>{this.callScript("onCancelAllOrderPending('order')"),e&&(t.tp.price=+t.entry.price+t.side*this.config.order.TP),setTimeout(()=>{document.getElementById("select_normal_order_wrapper").click(),document.getElementById("right_price").value=t.tp.price,document.getElementById("btn_"+(t.side<0?"long":"short")).click()},1e3)};orderSlPrice=(t,e=!1)=>{this.callScript("onCancelAllOrderPending('order_condition')"),e&&(t.sl.price=+t.entry.price-t.side*this.config.order.SL),setTimeout(()=>{document.getElementById("select_condition_order_wrapper").click(),document.getElementById("right_stopOrderIndex").value=t.sl.price,document.getElementById("right_price").value="MTL",document.getElementById("right_selStopOrderType").value=t.side<0?"SOL":"SOU",document.getElementById("btn_"+(t.side<0?"long":"short")).click()},1e3)};cancelOrder=()=>{this.callScript("onCancelAllOrderPending('order_condition')"),this.callScript("onCancelAllOrderPending('order')")};connectSocket=()=>{var e=new WebSocket(this.config.endpoint.socket),i=this;e.onopen=function(t){e.send("d|st|C001|"+i.config.symbol)},e.onclose=function(t){i.refreshDataInSession(i)&&i.connectSocket()},e.onmessage=function(t){var t=t.data.split("|");"C001"==t[0]&&(t=proto.tcbs.BuySellActivePojo.deserializeBinary(function(t){for(var e=window.atob(t),i=e.length,n=new Uint8Array(i),o=0;o<i;o++)n[o]=e.charCodeAt(o);return n}(t[2])).toObject(),i.lightweight.updateChartData(t))},e.onerror=function(t){console.log("ws-error",t)}};intervalHandler=t=>{t.currentTime=moment().unix(),t.currentTime==t.config.time.start&&t.lightweight.connectSocket(),t.currentTime==t.config.time.end&&t.reportHandler(),t.showRunningStatus()};reportHandler=()=>{var t,e;this.config.isOpeningMarket&&!this.config.isReportedResult&&(this.config.isReportedResult=!0,this.lightweight.toggleSpinner(!0),t=this.config.root+this.config.endpoint.report,e={revenue:+document.getElementById("vmAccInfo").innerText.replaceAll(",",""),fees:+document.getElementById("othersAccInfo").innerText.replaceAll(",","")},fetch(t,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)}).then(t=>{if(t.ok)return t.json();throw new Error(t.statusText)}).then(t=>{this.config.isReportedResult=t.isOk,t.isOk&&(t.isExecuted?this.notifier.show("success","Báo cáo đã gửi thành công."):this.notifier.show("warning","Đã gửi báo cáo")),this.lightweight.toggleSpinner(!1)}).catch(t=>{this.config.isReportedResult=!1,this.notifier.show("error","Gửi báo cáo thất bại"),this.lightweight.toggleSpinner(!1)}))};showRunningStatus=()=>{this.lightWeightButton.classList.contains("dark")?this.lightWeightButton.classList.remove("dark"):this.lightWeightButton.classList.add("dark")};refreshDataInSession=t=>t.currentTime>=t.config.time.start&&t.currentTime<=t.config.time.end&&(t.lightweight.loadChartData(),!0);callScript=t=>{var e=document.createElement("button");e.setAttribute("onclick",t),e.click()};toggleButton=t=>{t=t?"block":"none";this.tradingViewButton.style.display=t,this.lightWeightButton.style.display=t,this.reportButton.style.display=t};getDeviceId=()=>new Promise(e=>{FingerprintJS.load().then(t=>t.get()).then(t=>{this.deviceId=t.visitorId,e()})})}var so=new SmartOrder;so.init();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImEucHJvdG9idWYuanMiLCJiLm5vdGlmaWNhdGlvbi5qcyIsImMubGlnaHRXZWlnaHQuanMiLCJkLm9wdGlvblZpZXcuanMiLCJlLmxvY2FsRGF0YWJhc2UuanMiLCJ6Lm1haW4uanMiXSwibmFtZXMiOlsiZ29vZyIsInByb3ZpZGUiLCJyZXF1aXJlIiwicHJvdG8iLCJ0Y2JzIiwiQnV5U2VsbEFjdGl2ZVBvam8iLCJvcHRfZGF0YSIsImpzcGIiLCJNZXNzYWdlIiwiaW5pdGlhbGl6ZSIsInRoaXMiLCJpbmhlcml0cyIsIkRFQlVHIiwiQ09NUElMRUQiLCJkaXNwbGF5TmFtZSIsIkludmVzdG9ySGlzdG9yeVRyYWRlIiwiR0VORVJBVEVfVE9fT0JKRUNUIiwicHJvdG90eXBlIiwidG9PYmplY3QiLCJvcHRfaW5jbHVkZUluc3RhbmNlIiwiaW5jbHVkZUluc3RhbmNlIiwibXNnIiwib2JqIiwic3ltYm9sIiwiZ2V0RmllbGRXaXRoRGVmYXVsdCIsImNsb3NlcHJpY2UiLCJnZXRGbG9hdGluZ1BvaW50RmllbGRXaXRoRGVmYXVsdCIsImNsb3Nldm9sIiwiY2hhbmdlIiwicmVmZXJlbmNlIiwidG90YWx0cmFkaW5nIiwidG90YWx0cmFkaW5ndmFsdWUiLCJ0aW1lc2VjIiwiYWN0aW9uIiwidW5pdHRpbWVmcmFtZSIsInRyYWRpbmd2YWx1ZSIsImJ1eXVwYWNjIiwic2VsbGRvd25hY2MiLCJoaWdobGlnaHQiLCJnZXRCb29sZWFuRmllbGRXaXRoRGVmYXVsdCIsImJpZHByaWNlIiwiYmlkdm9sIiwiYXNrcHJpY2UiLCJhc2t2b2wiLCJwcmV2Y2hhbmdlIiwiJGpzcGJNZXNzYWdlSW5zdGFuY2UiLCJkZXNlcmlhbGl6ZUJpbmFyeSIsImJ5dGVzIiwicmVhZGVyIiwiQmluYXJ5UmVhZGVyIiwiZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyIiwibmV4dEZpZWxkIiwiaXNFbmRHcm91cCIsImdldEZpZWxkTnVtYmVyIiwidmFsdWUiLCJyZWFkU3RyaW5nIiwic2V0U3ltYm9sIiwicmVhZERvdWJsZSIsInNldENsb3NlcHJpY2UiLCJzZXRDbG9zZXZvbCIsInNldENoYW5nZSIsInNldFJlZmVyZW5jZSIsInNldFRvdGFsdHJhZGluZyIsInNldFRvdGFsdHJhZGluZ3ZhbHVlIiwicmVhZEludDY0Iiwic2V0VGltZXNlYyIsInNldEFjdGlvbiIsInNldFVuaXR0aW1lZnJhbWUiLCJzZXRUcmFkaW5ndmFsdWUiLCJzZXRCdXl1cGFjYyIsInNldFNlbGxkb3duYWNjIiwicmVhZEJvb2wiLCJzZXRIaWdobGlnaHQiLCJzZXRCaWRwcmljZSIsInNldEJpZHZvbCIsInNldEFza3ByaWNlIiwic2V0QXNrdm9sIiwicmVhZEZsb2F0Iiwic2V0UHJldmNoYW5nZSIsInNraXBGaWVsZCIsInNlcmlhbGl6ZUJpbmFyeSIsIndyaXRlciIsIkJpbmFyeVdyaXRlciIsInNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyIiwiZ2V0UmVzdWx0QnVmZmVyIiwibWVzc2FnZSIsImYiLCJnZXRTeW1ib2wiLCJsZW5ndGgiLCJ3cml0ZVN0cmluZyIsImdldENsb3NlcHJpY2UiLCJ3cml0ZURvdWJsZSIsImdldENsb3Nldm9sIiwiZ2V0Q2hhbmdlIiwiZ2V0UmVmZXJlbmNlIiwiZ2V0VG90YWx0cmFkaW5nIiwiZ2V0VG90YWx0cmFkaW5ndmFsdWUiLCJnZXRUaW1lc2VjIiwid3JpdGVJbnQ2NCIsImdldEFjdGlvbiIsImdldFVuaXR0aW1lZnJhbWUiLCJnZXRUcmFkaW5ndmFsdWUiLCJnZXRCdXl1cGFjYyIsImdldFNlbGxkb3duYWNjIiwiZ2V0SGlnaGxpZ2h0Iiwid3JpdGVCb29sIiwiZ2V0QmlkcHJpY2UiLCJnZXRCaWR2b2wiLCJnZXRBc2twcmljZSIsImdldEFza3ZvbCIsImdldFByZXZjaGFuZ2UiLCJ3cml0ZUZsb2F0Iiwic2V0UHJvdG8zU3RyaW5nRmllbGQiLCJzZXRQcm90bzNGbG9hdEZpZWxkIiwic2V0UHJvdG8zSW50RmllbGQiLCJzZXRQcm90bzNCb29sZWFuRmllbGQiLCJhdmdwcmljZSIsInRvdGFsdmFsdWUiLCJ0eXBlIiwibm90cmFucyIsInNldEF2Z3ByaWNlIiwic2V0VG90YWx2YWx1ZSIsInNldFR5cGUiLCJzZXROb3RyYW5zIiwiZ2V0QXZncHJpY2UiLCJnZXRUb3RhbHZhbHVlIiwiZ2V0VHlwZSIsImdldE5vdHJhbnMiLCJOb3RpZmllciIsInN0YXR1cyIsInRleHQiLCJhdXRvY2xvc2UiLCJjb25zdHJ1Y3RvciIsInNob3ciLCJub3RpZnkiLCJOb3RpZnkiLCJwb3NpdGlvbiIsImhpZGUiLCJjbG9zZSIsIkxpZ2h0d2VpZ2h0IiwiY2hhcnQiLCJzZXJpZXMiLCJkYXRhIiwib3JkZXIiLCJlbnRyeSIsInRwIiwic2wiLCJsaW5lcyIsIm1hcmtlcnMiLCJydWxlciIsInN0YXJ0IiwiZW5kIiwicG9pbnQiLCJhbGVydHMiLCJjcm9zc2hhaXIiLCJoYXNDcm9zc2hhaXIiLCJoYXNOZXdEYXRhIiwic2V0T3B0aW9ucyIsIm9wdGlvbnMiLCJkYXRhRW5kcG9pbnQiLCJhY2Nlc3NUb2tlbiIsImxvY2FsREIiLCJhdWRpbyIsIm5vdGlmaWVyIiwiaXNNb2JpbGUiLCJ0aW1lRnJhbWUiLCJzaGFya0xpbWl0IiwiZ2V0T3JkZXJQb3NpdGlvbiIsImNsb3NlUG9zaXRpb24iLCJvcmRlckVudHJ5UHJpY2UiLCJvcmRlclRwUHJpY2UiLCJvcmRlclNsUHJpY2UiLCJjYW5jZWxPcmRlciIsImluaXQiLCJjcmVhdGVMaWdodFdlaWdodENoYXJ0IiwiY3JlYXRlRGF0YUFyZWEiLCJjcmVhdGVUb29sQXJlYSIsImNyZWF0ZUxlZ2VuZEFyZWEiLCJjcmVhdGVGcmVlQXJlYSIsInNldEludGVydmFsIiwiaW50ZXJ2YWxIYW5kbGVyIiwid2luZG93IiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlc2l6ZSIsImUiLCJrZXlFdmVudCIsImNoYXJ0T3B0aW9ucyIsImxvY2FsaXphdGlvbiIsImRhdGVGb3JtYXQiLCJsb2NhbGUiLCJyaWdodFByaWNlU2NhbGUiLCJ2aXNpYmxlIiwibGVmdFByaWNlU2NhbGUiLCJsYXlvdXQiLCJiYWNrZ3JvdW5kQ29sb3IiLCJ0ZXh0Q29sb3IiLCJncmlkIiwidmVydExpbmVzIiwiY29sb3IiLCJob3J6TGluZXMiLCJtb2RlIiwiTGlnaHR3ZWlnaHRDaGFydHMiLCJDcm9zc2hhaXJNb2RlIiwiTm9ybWFsIiwidGltZVNjYWxlIiwidGltZVZpc2libGUiLCJyaWdodE9mZnNldCIsIm1pbkJhclNwYWNpbmciLCJjaGFydEVsZW1lbnQiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJib2R5IiwiYXBwZW5kIiwiaWQiLCJzdHlsZSIsIndpZHRoIiwiaGVpZ2h0IiwiY2hhcnRDb250ZXh0bWVudSIsImNoYXJ0Q2xpY2siLCJjcmVhdGVDaGFydCIsInN1YnNjcmliZUNyb3NzaGFpck1vdmUiLCJjcm9zc2hhaXJNb3ZlIiwic3Vic2NyaWJlQ3VzdG9tUHJpY2VMaW5lRHJhZ2dlZCIsInByaWNlTGluZURyYWciLCJzaGFyayIsImFkZExpbmVTZXJpZXMiLCJwcmljZVNjYWxlSWQiLCJwcmljZUZvcm1hdCIsIm1pbk1vdmUiLCJzY2FsZU1hcmdpbnMiLCJ0b3AiLCJib3R0b20iLCJwcmljZSIsImZpdENvbnRlbnQiLCJyZW1vdmVMaWdodFdlaWdodENoYXJ0IiwicmVtb3ZlIiwiZGl2IiwiY2xhc3NOYW1lIiwiY3JlYXRlU3Bpbm5lckltZyIsImNyZWF0ZURhdGVJbnB1dCIsImNyZWF0ZVRpbWVGcmFtZVNlbGVjdCIsImNyZWF0ZVJlZnJlc2hCdXR0b24iLCJjcmVhdGVDbGVhckJ1dHRvbiIsImNvbnRhaW5lciIsImJ1dHRvbiIsInRpdGxlIiwiY2xlYXIiLCJsb2FkQ2hhcnREYXRhIiwic2VsZWN0IiwiZm9yRWFjaCIsIml0ZW0iLCJpbmRleCIsIm9wdGlvbiIsImFwcGVuZENoaWxkIiwidGFyZ2V0IiwidGhlbiIsInJlc2V0VGltZVNjYWxlIiwiaW5wdXQiLCJtb21lbnQiLCJmb3JtYXQiLCJkYXRlSW5wdXQiLCJpbWciLCJvcGFjaXR5Iiwic3JjIiwiY2hyb21lIiwicnVudGltZSIsImdldFVSTCIsInNwaW5uZXJJbWciLCJjcmVhdGVEcmF3TGluZUJ1dHRvbiIsImNyZWF0ZURyYXdNYXJrZXJCdXR0b24iLCJjcmVhdGVEcmF3UnVsZXJCdXR0b24iLCJjcmVhdGVEcmF3QWxlcnRCdXR0b24iLCJzZWxlY3RlZCIsImNsYXNzTGlzdCIsImNvbnRhaW5zIiwicXVlcnlTZWxlY3RvckFsbCIsImVsIiwiYWRkIiwic3RvcFByb3BhZ2F0aW9uIiwicmVtb3ZlVG9vbExpbmVzIiwicHJldmVudERlZmF1bHQiLCJkcmF3TGluZUJ1dHRvbiIsInJlbW92ZU1hcmtlcnMiLCJkcmF3TWFya2VyQnV0dG9uIiwicmVtb3ZlUnVsZXIiLCJkcmF3UnVsZXJCdXR0b24iLCJyZW1vdmVBbGVydHMiLCJkcmF3QWxlcnRCdXR0b24iLCJjcmVhdGVQcmljZUxlZ2VuZFAiLCJjcmVhdGVTaGFya0xlZ2VuZFAiLCJwIiwicHJpY2VMZWdlbmRQIiwic2hhcmtMZWdlbmRQIiwiY3JlYXRlQ2FuY2VsT3JkZXJCdXR0b24iLCJjcmVhdGVFbnRyeU9yZGVyQnV0dG9uIiwiY3JlYXRlVHBzbE9yZGVyQnV0dG9uIiwiY3JlYXRlU2Nyb2xsQnV0dG9uIiwiaW5uZXJUZXh0IiwiZGlzcGxheSIsInRvZ2dsZUNhbmNlbE9yZGVyQnV0dG9uIiwicmVtb3ZlT3JkZXJMaW5lIiwiY2FuY2VsT3JkZXJCdXR0b24iLCJkcmF3T3JkZXJMaW5lIiwiaGlkZU9yZGVyQnV0dG9uIiwiZW50cnlPcmRlckJ1dHRvbiIsInRwc2xPcmRlckJ1dHRvbiIsInNjcm9sbFRvUmVhbFRpbWUiLCJzZWxmIiwic2hvd09yZGVyQnV0dG9uIiwiZHJhd1Rvb2xMaW5lIiwiZHJhd01hcmtlciIsImRyYXdSdWxlciIsImRyYXdBbGVydCIsInRpbWUiLCJ1cGRhdGVMZWdlbmQiLCJzZXJpZXNQcmljZXMiLCJnZXQiLCJ1bmRlZmluZWQiLCJ4IiwieSIsImVuZFByaWNlIiwic3RhcnRQcmljZSIsImxpbmUiLCJjdXN0b21QcmljZUxpbmUiLCJvbGRQcmljZSIsImZvcm1hdFByaWNlIiwiZnJvbVByaWNlU3RyaW5nIiwibmV3UHJpY2UiLCJsaW5lVHlwZSIsImlzQ2hhbmdlZCIsImtpbmQiLCJzaWRlIiwiYXBwbHlPcHRpb25zIiwic2V0IiwicmVtb3ZlZCIsInRvRml4ZWQiLCJwYXVzZSIsImhhc093blByb3BlcnR5IiwibGVmdCIsImNvb3JkaW5hdGVUb1ByaWNlIiwic2xpY2UiLCJiYWNrZ3JvdW5kIiwiTWF0aCIsImFicyIsImNyZWF0ZVByaWNlTGluZSIsImxpbmVXaWR0aCIsImxpbmVTdHlsZSIsIkxpbmVTdHlsZSIsIlNvbGlkIiwiZHJhZ2dhYmxlIiwicmVtb3ZlUHJpY2VMaW5lIiwiZXhpc3RJbmRleCIsImZpbmRJbmRleCIsIm9wcyIsInJlbW92ZUxpbmUiLCJzcGxpY2UiLCJwdXNoIiwiZGlyIiwiZmlsdGVyIiwicHJpY2VUb0Nvb3JkaW5hdGUiLCJzaGFwZSIsInNldE1hcmtlcnMiLCJvcmlnaW5hbCIsInRvTG9jYWxlU3RyaW5nIiwiUHJvbWlzZSIsImFzeW5jIiwicmVzb2x2ZSIsInJlamVjdCIsInRvZ2dsZVNwaW5uZXIiLCJzdkRhdGEiLCJhd2FpdCIsImdldFNlcnZlckRhdGEiLCJsY0RhdGEiLCJpZHMiLCJTZXQiLCJtYXAiLCJkIiwiaGFzIiwic29ydCIsImEiLCJiIiwicmVkdWNlIiwiciIsImNyZWF0ZUNoYXJ0RGF0YSIsInNldERhdGEiLCJ1cGRhdGVDaGFydERhdGEiLCJwYXJhbSIsInZvbHVtZSIsImxhc3RQcmljZSIsImxhc3RTaGFyayIsInVwZGF0ZSIsImRhdGUiLCJ1cmwiLCJmZXRjaCIsIm1ldGhvZCIsImhlYWRlcnMiLCJDb250ZW50LVR5cGUiLCJBdXRob3JpemF0aW9uIiwiSlNPTiIsInN0cmluZ2lmeSIsImpzb24iLCJwZXJpb2QiLCJ0aW1lSW5kZXgiLCJpc1NhbWVUaW1lIiwicHJldlRpbWUiLCJwcmV2U2hhcmsiLCJmbG9vciIsInBvcCIsImdldEhlbHBlckRhdGEiLCJydWxlckxpbmVzIiwicGF1c2VkIiwiYWxlcnQiLCJjdXJyZW50UHJpY2UiLCJwbGF5IiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0IiwiY3RybEtleSIsIm1ldGFLZXkiLCJzaGlmdEtleSIsImtleUNvZGUiLCJiYXJTcGFjaW5nIiwic2Nyb2xsUG9zaXRpb24iLCJzY3JvbGxUb1Bvc2l0aW9uIiwiY2xpY2siLCJ3aGljaCIsInJlbW92ZU9yZGVyQnV0dG9uIiwiT3B0aW9uVmlldyIsIlRPS0VOX0tFWSIsImlzTG9nZWRpbiIsIkFQUF9OQU1FIiwiZGV2aWNlSWQiLCJyZWdpc3RlckVuZHBvaW50IiwibG9naW5FbmRwb2ludCIsImxvZ291dEVuZHBvaW50IiwibWVudUJ1dHRvbkNhbGxiYWNrIiwibGlnaHR3ZWlnaHQiLCJjcmVhdGVDb250YWluZXIiLCJjcmVhdGVIZWFyZGVyQ29udGFpbmVyIiwiY3JlYXRlTG9naW5Db250YWluZXIiLCJjcmVhdGVSZWdpc3RlckNvbnRhaW5lciIsImNyZWF0ZUluZm9Db250YWluZXIiLCJjcmVhdGVPcHRpb25Db250YWluZXIiLCJoZWFyZGVyQ29udGFpbmVyIiwib3BlbiIsIndyYXBwZXIiLCJsb2dpbkNvbnRhaW5lciIsImxvZ2luIiwibG9naW5NZXNzYWdlIiwiY2hlY2tib3hXcmFwcGVyIiwicGxhY2Vob2xkZXIiLCJyZXF1aXJlZCIsImxvZ2luVXNlcm5hbWUiLCJmb2N1cyIsImxvZ2luUGFzc3dvcmQiLCJsYWJlbCIsImxvZ2luUmVtZW1iZXJNZSIsInNldEF0dHJpYnV0ZSIsImlubmVySFRNTCIsImxvZ2luU3VibWl0IiwicmVnaXN0ZXJDb250YWluZXIiLCJyZWdpc3Rlck5hbWUiLCJyZWdpc3RlciIsInJlZ2lzdGVyTWVzc2FnZSIsInJlZ2lzdGVyRW1haWwiLCJyZWdpc3RlclBob25lIiwicmVnaXN0ZXJQYXNzd29yZCIsInJlZ2lzdGVyQ29uZmlybVBhc3N3b3JkIiwicmVnaXN0ZXJTdWJtaXQiLCJpbmZvQ29udGFpbmVyIiwibG9nb3V0Iiwib3B0aW9uQ29udGFpbmVyIiwiZGlzYWJsZWQiLCJuYW1lIiwiZW1haWwiLCJwaG9uZSIsInBhc3N3b3JkIiwiY2hhbmVsIiwicmVzcG9uc2UiLCJvayIsIkVycm9yIiwic3RhdHVzVGV4dCIsImpzb25kYXRhIiwiaXNPayIsInNldFRva2VuIiwidG9rZW4iLCJ1c2VyIiwiY2F0Y2giLCJlcnJvciIsInVzZXJuYW1lIiwicmVtZW1iZXJNZSIsImNvbnNvbGUiLCJsb2ciLCJnZXRUb2tlbiIsInJlbW92ZVRva2VuIiwiZ2V0VXNlciIsImNvZGUiLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwicmVtb3ZlSXRlbSIsInBhcnNlIiwiZ2V0SXRlbSIsImlzQmVmb3JlIiwiZXhwaXJlc19hdCIsImFjY2Vzc190b2tlbiIsInRvZ2dsZSIsIkxvY2FsRGF0YWJhc2UiLCJyZXF1ZXN0IiwiaW5kZXhlZERCIiwib251cGdyYWRlbmVlZGVkIiwiZGF0YWJhc2UiLCJyZXN1bHQiLCJjcmVhdGVPYmplY3RTdG9yZSIsImtleVBhdGgiLCJvbnN1Y2Nlc3MiLCJvbmVycm9yIiwibG9jYXRpb24iLCJyZWxvYWQiLCJ0YWJsZXMiLCJwcm9taXNlcyIsInR4IiwidHJhbnNhY3Rpb24iLCJBcnJheSIsImlzQXJyYXkiLCJ0YWJsZSIsIm9iamVjdFN0b3JlIiwibG9hZFN0b3JlIiwiYWxsIiwiYXJyIiwic3RvcmUiLCJnZXRBbGwiLCJwdXQiLCJlcnIiLCJTbWFydE9yZGVyIiwiQXVkaW8iLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnREYXRhIiwibW9iaWxlIiwiY3VycmVudFRpbWUiLCJ1bml4Iiwib3B0aW9uVmlldyIsImdldERldmljZUlkIiwiZ2V0TG9jYWxDb25maWciLCJjb25maWciLCJyb290IiwiZW5kcG9pbnQiLCJjcmVhdGVNZW51QnV0dG9ucyIsInJlZ2lzdGVyRXZlbnQiLCJ0b2dnbGVCdXR0b24iLCJnZXRTZXJ2ZXJDb25maWciLCJjb25uZWN0U29ja2V0IiwiZ2V0RWxlbWVudEJ5SWQiLCJjb250cmFjdE51bWJlciIsImxvb3AiLCJyZWZyZXNoRGF0YUluU2Vzc2lvbiIsImxpZ2h0V2VpZ2h0QnV0dG9uIiwib3B0aW9uQnV0dG9uIiwiZmlsZSIsImNvbmZpcm0iLCJjcmVhdGVUcmFkaW5nVmlld0J1dHRvbiIsImNyZWF0ZUxpZ2h0V2VpZ2h0QnV0dG9uIiwiY3JlYXRlT3B0aW9uQnV0dG9uIiwiY3JlYXRlUmVwb3J0QnV0dG9uIiwibGVmdEVsIiwicmlnaHRFbCIsIm9yZGVyRWwiLCJxdWVyeVNlbGVjdG9yIiwiY29uZE9yZGVyRWwiLCJ0cmFkaW5nVmlld0J1dHRvbiIsIm9wdGlvbkJ1dHRvbkNsaWNrIiwicmVwb3J0QnV0dG9uQ2xpY2siLCJyZXBvcnRCdXR0b24iLCJyZXBvcnRIYW5kbGVyIiwiZnVsbHNjcmVlbkVsZW1lbnQiLCJleGl0RnVsbHNjcmVlbiIsImRvY3VtZW50RWxlbWVudCIsInJlcXVlc3RGdWxsc2NyZWVuIiwiaXNOYU4iLCJjYWxsU2NyaXB0Iiwic2V0VGltZW91dCIsImlzSW5pdCIsIlRQIiwiU0wiLCJ3cyIsIldlYlNvY2tldCIsInNvY2tldCIsIm9ub3BlbiIsInNlbmQiLCJvbmNsb3NlIiwib25tZXNzYWdlIiwidCIsInNwbGl0IiwiZyIsImF0b2IiLCJoIiwiVWludDhBcnJheSIsIkEiLCJjaGFyQ29kZUF0Iiwic2hvd1J1bm5pbmdTdGF0dXMiLCJpc09wZW5pbmdNYXJrZXQiLCJpc1JlcG9ydGVkUmVzdWx0IiwicmVwb3J0IiwicmV2ZW51ZSIsInJlcGxhY2VBbGwiLCJmZWVzIiwiaXNFeGVjdXRlZCIsInNjcmlwdCIsIkZpbmdlcnByaW50SlMiLCJsb2FkIiwiZnAiLCJ2aXNpdG9ySWQiLCJzbyJdLCJtYXBwaW5ncyI6IkFBY0FBLEtBQUtDLFFBQVEsOEJBQThCLEVBQzNDRCxLQUFLQyxRQUFRLGlDQUFpQyxFQUU5Q0QsS0FBS0UsUUFBUSxtQkFBbUIsRUFDaENGLEtBQUtFLFFBQVEsbUJBQW1CLEVBQ2hDRixLQUFLRSxRQUFRLGNBQWMsRUFZM0JDLE1BQU1DLEtBQUtDLGtCQUFvQixTQUFTQyxHQUN0Q0MsS0FBS0MsUUFB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S0FDWjNrQixLQUFLZ2lCLGtCQUFrQnpSLFVBQVVDLFNBQVMsTUFBTSxFQUNoRHhRLEtBQUtnaUIsa0JBQWtCelIsVUFBVXRDLE9BQU8sTUFBTSxFQUM3Q2pPLEtBQUtnaUIsa0JBQWtCelIsVUFBVUksSUFBSSxNQUFNLENBQ3BELEVBQ0FvUixxQkFBdUJ0UCxHQUVmQSxFQUFLc08sYUFBZXRPLEVBQUsyTyxPQUFPck8sS0FBS25LLE9BQ3JDNkosRUFBS3NPLGFBQWV0TyxFQUFLMk8sT0FBT3JPLEtBQUtsSyxNQUVyQzRKLEVBQUtnSSxZQUFZNUwsY0FBYyxFQUN4QixDQUFBLEdBSWYwVSxXQUFhNEIsSUFDVCxJQUFJelcsRUFBU25DLFNBQVNDLGNBQWMsUUFBUSxFQUM1Q2tDLEVBQU9vTixhQUFhLFVBQVdxSixDQUFNLEVBQ3JDelcsRUFBT21MLE1BQU0sQ0FDakIsRUFDQTRILGFBQWVwVyxJQUNMMkcsRUFBVTNHLEVBQVUsUUFBVSxPQUNwQ3JMLEtBQUs2aUIsa0JBQWtCalcsTUFBTW9GLFFBQVVBLEVBQ3ZDaFMsS0FBS2dpQixrQkFBa0JwVixNQUFNb0YsUUFBVUEsRUFDdkNoUyxLQUFLZ2pCLGFBQWFwVyxNQUFNb0YsUUFBVUEsQ0FDdEMsRUFDQWtQLFlBQWMsSUFDSCxJQUFJaEwsUUFBUUUsSUFDZmdQLGNBQWNDLEtBQUssRUFDZGhXLEtBQUtpVyxHQUFNQSxFQUFHcFMsSUFBSSxDQUFDLEVBQ25CN0QsS0FBSytQLElBQ0ZwZixLQUFLb2EsU0FBV2dGLEVBQU9tRyxVQUN2Qm5QLEVBQVEsQ0FDWixDQUFDLENBQ1QsQ0FBQyxDQUVULENBRUEsSUFBSW9QLEdBQUssSUFBSTlFLFdBQ2I4RSxHQUFHcmIsS0FBSyIsImZpbGUiOiJtYWluLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHNvdXJjZTogdGNicy5wcm90b1xuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3XG4gKiBAZW5oYW5jZWFibGVcbiAqIEBzdXBwcmVzcyB7bWlzc2luZ1JlcXVpcmV9IHJlcG9ydHMgZXJyb3Igb24gaW1wbGljaXQgdHlwZSB1c2FnZXMuXG4gKiBAc3VwcHJlc3Mge21lc3NhZ2VDb252ZW50aW9uc30gSlMgQ29tcGlsZXIgcmVwb3J0cyBhbiBlcnJvciBpZiBhIHZhcmlhYmxlIG9yXG4gKiAgICAgZmllbGQgc3RhcnRzIHdpdGggJ01TR18nIGFuZCBpc24ndCBhIHRyYW5zbGF0YWJsZSBtZXNzYWdlLlxuICogQHB1YmxpY1xuICovXG4vLyBHRU5FUkFURUQgQ09ERSAtLSBETyBOT1QgRURJVCFcbi8qIGVzbGludC1kaXNhYmxlICovXG4vLyBAdHMtbm9jaGVja1xuXG5cbmdvb2cucHJvdmlkZSgncHJvdG8udGNicy5CdXlTZWxsQWN0aXZlUG9qbycpO1xuZ29vZy5wcm92aWRlKCdwcm90by50Y2JzLkludmVzdG9ySGlzdG9yeVRyYWRlJyk7XG5cbmdvb2cucmVxdWlyZSgnanNwYi5CaW5hcnlSZWFkZXInKTtcbmdvb2cucmVxdWlyZSgnanNwYi5CaW5hcnlXcml0ZXInKTtcbmdvb2cucmVxdWlyZSgnanNwYi5NZXNzYWdlJyk7XG5cbi8qKlxuICogR2VuZXJhdGVkIGJ5IEpzUGJDb2RlR2VuZXJhdG9yLlxuICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYVxuICogc2VydmVyIHJlc3BvbnNlLCBvciBjb25zdHJ1Y3RlZCBkaXJlY3RseSBpbiBKYXZhc2NyaXB0LiBUaGUgYXJyYXkgaXMgdXNlZFxuICogaW4gcGxhY2UgYW5kIGJlY29tZXMgcGFydCBvZiB0aGUgY29uc3RydWN0ZWQgb2JqZWN0LiBJdCBpcyBub3QgY2xvbmVkLlxuICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGxcbiAqIHZhbGlkLlxuICogQGV4dGVuZHMge2pzcGIuTWVzc2FnZX1cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5wcm90by50Y2JzLkJ1eVNlbGxBY3RpdmVQb2pvID0gZnVuY3Rpb24ob3B0X2RhdGEpIHtcbiAganNwYi5NZXNzYWdlLmluaXRpYWxpemUodGhpcywgb3B0X2RhdGEsIDAsIC0xLCBudWxsLCBudWxsKTtcbn07XG5nb29nLmluaGVyaXRzKHByb3RvLnRjYnMuQnV5U2VsbEFjdGl2ZVBvam8sIGpzcGIuTWVzc2FnZSk7XG5pZiAoZ29vZy5ERUJVRyAmJiAhQ09NUElMRUQpIHtcbiAgLyoqXG4gICAqIEBwdWJsaWNcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBwcm90by50Y2JzLkJ1eVNlbGxBY3RpdmVQb2pvLmRpc3BsYXlOYW1lID0gJ3Byb3RvLnRjYnMuQnV5U2VsbEFjdGl2ZVBvam8nO1xufVxuLyoqXG4gKiBHZW5lcmF0ZWQgYnkgSnNQYkNvZGVHZW5lcmF0b3IuXG4gKiBAcGFyYW0ge0FycmF5PX0gb3B0X2RhdGEgT3B0aW9uYWwgaW5pdGlhbCBkYXRhIGFycmF5LCB0eXBpY2FsbHkgZnJvbSBhXG4gKiBzZXJ2ZXIgcmVzcG9uc2UsIG9yIGNvbnN0cnVjdGVkIGRpcmVjdGx5IGluIEphdmFzY3JpcHQuIFRoZSBhcnJheSBpcyB1c2VkXG4gKiBpbiBwbGFjZSBhbmQgYmVjb21lcyBwYXJ0IG9mIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3QuIEl0IGlzIG5vdCBjbG9uZWQuXG4gKiBJZiBubyBkYXRhIGlzIHByb3ZpZGVkLCB0aGUgY29uc3RydWN0ZWQgb2JqZWN0IHdpbGwgYmUgZW1wdHksIGJ1dCBzdGlsbFxuICogdmFsaWQuXG4gKiBAZXh0ZW5kcyB7anNwYi5NZXNzYWdlfVxuICogQGNvbnN0cnVjdG9yXG4gKi9cbnByb3RvLnRjYnMuSW52ZXN0b3JIaXN0b3J5VHJhZGUgPSBmdW5jdGlvbihvcHRfZGF0YSkge1xuICBqc3BiLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLCBvcHRfZGF0YSwgMCwgLTEsIG51bGwsIG51bGwpO1xufTtcbmdvb2cuaW5oZXJpdHMocHJvdG8udGNicy5JbnZlc3Rvckhpc3RvcnlUcmFkZSwganNwYi5NZXNzYWdlKTtcbmlmIChnb29nLkRFQlVHICYmICFDT01QSUxFRCkge1xuICAvKipcbiAgICogQHB1YmxpY1xuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHByb3RvLnRjYnMuSW52ZXN0b3JIaXN0b3J5VHJhZGUuZGlzcGxheU5hbWUgPSAncHJvdG8udGNicy5JbnZlc3Rvckhpc3RvcnlUcmFkZSc7XG59XG5cblxuXG5pZiAoanNwYi5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCkge1xuLyoqXG4gKiBDcmVhdGVzIGFuIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHByb3RvLlxuICogRmllbGQgbmFtZXMgdGhhdCBhcmUgcmVzZXJ2ZWQgaW4gSmF2YVNjcmlwdCBhbmQgd2lsbCBiZSByZW5hbWVkIHRvIHBiX25hbWUuXG4gKiBPcHRpb25hbCBmaWVsZHMgdGhhdCBhcmUgbm90IHNldCB3aWxsIGJlIHNldCB0byB1bmRlZmluZWQuXG4gKiBUbyBhY2Nlc3MgYSByZXNlcnZlZCBmaWVsZCB1c2UsIGZvby5wYl88bmFtZT4sIGVnLCBmb28ucGJfZGVmYXVsdC5cbiAqIEZvciB0aGUgbGlzdCBvZiByZXNlcnZlZCBuYW1lcyBwbGVhc2Ugc2VlOlxuICogICAgIG5ldC9wcm90bzIvY29tcGlsZXIvanMvaW50ZXJuYWwvZ2VuZXJhdG9yLmNjI2tLZXl3b3JkLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2luY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiB3aGV0aGVyIHRvIGluY2x1ZGUgdGhlXG4gKiAgICAgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cbiAqIEByZXR1cm4geyFPYmplY3R9XG4gKi9cbnByb3RvLnRjYnMuQnV5U2VsbEFjdGl2ZVBvam8ucHJvdG90eXBlLnRvT2JqZWN0ID0gZnVuY3Rpb24ob3B0X2luY2x1ZGVJbnN0YW5jZSkge1xuICByZXR1cm4gcHJvdG8udGNicy5CdXlTZWxsQWN0aXZlUG9qby50b09iamVjdChvcHRfaW5jbHVkZUluc3RhbmNlLCB0aGlzKTtcbn07XG5cblxuLyoqXG4gKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbnx1bmRlZmluZWR9IGluY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiBXaGV0aGVyIHRvIGluY2x1ZGVcbiAqICAgICB0aGUgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cbiAqIEBwYXJhbSB7IXByb3RvLnRjYnMuQnV5U2VsbEFjdGl2ZVBvam99IG1zZyBUaGUgbXNnIGluc3RhbmNlIHRvIHRyYW5zZm9ybS5cbiAqIEByZXR1cm4geyFPYmplY3R9XG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXG4gKi9cbnByb3RvLnRjYnMuQnV5U2VsbEFjdGl2ZVBvam8udG9PYmplY3QgPSBmdW5jdGlvbihpbmNsdWRlSW5zdGFuY2UsIG1zZykge1xuICB2YXIgZiwgb2JqID0ge1xuICAgIHN5bWJvbDoganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLCAxLCBcIlwiKSxcbiAgICBjbG9zZXByaWNlOiBqc3BiLk1lc3NhZ2UuZ2V0RmxvYXRpbmdQb2ludEZpZWxkV2l0aERlZmF1bHQobXNnLCAyLCAwLjApLFxuICAgIGNsb3Nldm9sOiBqc3BiLk1lc3NhZ2UuZ2V0RmxvYXRpbmdQb2ludEZpZWxkV2l0aERlZmF1bHQobXNnLCAzLCAwLjApLFxuICAgIGNoYW5nZToganNwYi5NZXNzYWdlLmdldEZsb2F0aW5nUG9pbnRGaWVsZFdpdGhEZWZhdWx0KG1zZywgNCwgMC4wKSxcbiAgICByZWZlcmVuY2U6IGpzcGIuTWVzc2FnZS5nZXRGbG9hdGluZ1BvaW50RmllbGRXaXRoRGVmYXVsdChtc2csIDUsIDAuMCksXG4gICAgdG90YWx0cmFkaW5nOiBqc3BiLk1lc3NhZ2UuZ2V0RmxvYXRpbmdQb2ludEZpZWxkV2l0aERlZmF1bHQobXNnLCA2LCAwLjApLFxuICAgIHRvdGFsdHJhZGluZ3ZhbHVlOiBqc3BiLk1lc3NhZ2UuZ2V0RmxvYXRpbmdQb2ludEZpZWxkV2l0aERlZmF1bHQobXNnLCA3LCAwLjApLFxuICAgIHRpbWVzZWM6IGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZywgOCwgMCksXG4gICAgYWN0aW9uOiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csIDksIFwiXCIpLFxuICAgIHVuaXR0aW1lZnJhbWU6IGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZywgMTAsIDApLFxuICAgIHRyYWRpbmd2YWx1ZToganNwYi5NZXNzYWdlLmdldEZsb2F0aW5nUG9pbnRGaWVsZFdpdGhEZWZhdWx0KG1zZywgMTEsIDAuMCksXG4gICAgYnV5dXBhY2M6IGpzcGIuTWVzc2FnZS5nZXRGbG9hdGluZ1BvaW50RmllbGRXaXRoRGVmYXVsdChtc2csIDEyLCAwLjApLFxuICAgIHNlbGxkb3duYWNjOiBqc3BiLk1lc3NhZ2UuZ2V0RmxvYXRpbmdQb2ludEZpZWxkV2l0aERlZmF1bHQobXNnLCAxMywgMC4wKSxcbiAgICBoaWdobGlnaHQ6IGpzcGIuTWVzc2FnZS5nZXRCb29sZWFuRmllbGRXaXRoRGVmYXVsdChtc2csIDE0LCBmYWxzZSksXG4gICAgYmlkcHJpY2U6IGpzcGIuTWVzc2FnZS5nZXRGbG9hdGluZ1BvaW50RmllbGRXaXRoRGVmYXVsdChtc2csIDE1LCAwLjApLFxuICAgIGJpZHZvbDoganNwYi5NZXNzYWdlLmdldEZsb2F0aW5nUG9pbnRGaWVsZFdpdGhEZWZhdWx0KG1zZywgMTYsIDAuMCksXG4gICAgYXNrcHJpY2U6IGpzcGIuTWVzc2FnZS5nZXRGbG9hdGluZ1BvaW50RmllbGRXaXRoRGVmYXVsdChtc2csIDE3LCAwLjApLFxuICAgIGFza3ZvbDoganNwYi5NZXNzYWdlLmdldEZsb2F0aW5nUG9pbnRGaWVsZFdpdGhEZWZhdWx0KG1zZywgMTgsIDAuMCksXG4gICAgcHJldmNoYW5nZToganNwYi5NZXNzYWdlLmdldEZsb2F0aW5nUG9pbnRGaWVsZFdpdGhEZWZhdWx0KG1zZywgMTksIDAuMClcbiAgfTtcblxuICBpZiAoaW5jbHVkZUluc3RhbmNlKSB7XG4gICAgb2JqLiRqc3BiTWVzc2FnZUluc3RhbmNlID0gbXNnO1xuICB9XG4gIHJldHVybiBvYmo7XG59O1xufVxuXG5cbi8qKlxuICogRGVzZXJpYWxpemVzIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXG4gKiBAcGFyYW0ge2pzcGIuQnl0ZVNvdXJjZX0gYnl0ZXMgVGhlIGJ5dGVzIHRvIGRlc2VyaWFsaXplLlxuICogQHJldHVybiB7IXByb3RvLnRjYnMuQnV5U2VsbEFjdGl2ZVBvam99XG4gKi9cbnByb3RvLnRjYnMuQnV5U2VsbEFjdGl2ZVBvam8uZGVzZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbihieXRlcykge1xuICB2YXIgcmVhZGVyID0gbmV3IGpzcGIuQmluYXJ5UmVhZGVyKGJ5dGVzKTtcbiAgdmFyIG1zZyA9IG5ldyBwcm90by50Y2JzLkJ1eVNlbGxBY3RpdmVQb2pvO1xuICByZXR1cm4gcHJvdG8udGNicy5CdXlTZWxsQWN0aXZlUG9qby5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLCByZWFkZXIpO1xufTtcblxuXG4vKipcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpIGZyb20gdGhlXG4gKiBnaXZlbiByZWFkZXIgaW50byB0aGUgZ2l2ZW4gbWVzc2FnZSBvYmplY3QuXG4gKiBAcGFyYW0geyFwcm90by50Y2JzLkJ1eVNlbGxBY3RpdmVQb2pvfSBtc2cgVGhlIG1lc3NhZ2Ugb2JqZWN0IHRvIGRlc2VyaWFsaXplIGludG8uXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVJlYWRlcn0gcmVhZGVyIFRoZSBCaW5hcnlSZWFkZXIgdG8gdXNlLlxuICogQHJldHVybiB7IXByb3RvLnRjYnMuQnV5U2VsbEFjdGl2ZVBvam99XG4gKi9cbnByb3RvLnRjYnMuQnV5U2VsbEFjdGl2ZVBvam8uZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyID0gZnVuY3Rpb24obXNnLCByZWFkZXIpIHtcbiAgd2hpbGUgKHJlYWRlci5uZXh0RmllbGQoKSkge1xuICAgIGlmIChyZWFkZXIuaXNFbmRHcm91cCgpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgdmFyIGZpZWxkID0gcmVhZGVyLmdldEZpZWxkTnVtYmVyKCk7XG4gICAgc3dpdGNoIChmaWVsZCkge1xuICAgIGNhc2UgMTpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocmVhZGVyLnJlYWRTdHJpbmcoKSk7XG4gICAgICBtc2cuc2V0U3ltYm9sKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAocmVhZGVyLnJlYWREb3VibGUoKSk7XG4gICAgICBtc2cuc2V0Q2xvc2VwcmljZSh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDM6XG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKHJlYWRlci5yZWFkRG91YmxlKCkpO1xuICAgICAgbXNnLnNldENsb3Nldm9sKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgNDpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAocmVhZGVyLnJlYWREb3VibGUoKSk7XG4gICAgICBtc2cuc2V0Q2hhbmdlKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgNTpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAocmVhZGVyLnJlYWREb3VibGUoKSk7XG4gICAgICBtc2cuc2V0UmVmZXJlbmNlKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgNjpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAocmVhZGVyLnJlYWREb3VibGUoKSk7XG4gICAgICBtc2cuc2V0VG90YWx0cmFkaW5nKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgNzpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAocmVhZGVyLnJlYWREb3VibGUoKSk7XG4gICAgICBtc2cuc2V0VG90YWx0cmFkaW5ndmFsdWUodmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA4OlxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChyZWFkZXIucmVhZEludDY0KCkpO1xuICAgICAgbXNnLnNldFRpbWVzZWModmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA5OlxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChyZWFkZXIucmVhZFN0cmluZygpKTtcbiAgICAgIG1zZy5zZXRBY3Rpb24odmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxMDpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAocmVhZGVyLnJlYWRJbnQ2NCgpKTtcbiAgICAgIG1zZy5zZXRVbml0dGltZWZyYW1lKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTE6XG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKHJlYWRlci5yZWFkRG91YmxlKCkpO1xuICAgICAgbXNnLnNldFRyYWRpbmd2YWx1ZSh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDEyOlxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChyZWFkZXIucmVhZERvdWJsZSgpKTtcbiAgICAgIG1zZy5zZXRCdXl1cGFjYyh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDEzOlxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChyZWFkZXIucmVhZERvdWJsZSgpKTtcbiAgICAgIG1zZy5zZXRTZWxsZG93bmFjYyh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDE0OlxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtib29sZWFufSAqLyAocmVhZGVyLnJlYWRCb29sKCkpO1xuICAgICAgbXNnLnNldEhpZ2hsaWdodCh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDE1OlxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChyZWFkZXIucmVhZERvdWJsZSgpKTtcbiAgICAgIG1zZy5zZXRCaWRwcmljZSh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDE2OlxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChyZWFkZXIucmVhZERvdWJsZSgpKTtcbiAgICAgIG1zZy5zZXRCaWR2b2wodmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxNzpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAocmVhZGVyLnJlYWREb3VibGUoKSk7XG4gICAgICBtc2cuc2V0QXNrcHJpY2UodmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxODpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAocmVhZGVyLnJlYWREb3VibGUoKSk7XG4gICAgICBtc2cuc2V0QXNrdm9sKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTk6XG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKHJlYWRlci5yZWFkRmxvYXQoKSk7XG4gICAgICBtc2cuc2V0UHJldmNoYW5nZSh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgcmVhZGVyLnNraXBGaWVsZCgpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBtc2c7XG59O1xuXG5cbi8qKlxuICogU2VyaWFsaXplcyB0aGUgbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxuICogQHJldHVybiB7IVVpbnQ4QXJyYXl9XG4gKi9cbnByb3RvLnRjYnMuQnV5U2VsbEFjdGl2ZVBvam8ucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgd3JpdGVyID0gbmV3IGpzcGIuQmluYXJ5V3JpdGVyKCk7XG4gIHByb3RvLnRjYnMuQnV5U2VsbEFjdGl2ZVBvam8uc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcywgd3JpdGVyKTtcbiAgcmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTtcbn07XG5cblxuLyoqXG4gKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlXG4gKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuXG4gKiBAcGFyYW0geyFwcm90by50Y2JzLkJ1eVNlbGxBY3RpdmVQb2pvfSBtZXNzYWdlXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyXG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXG4gKi9cbnByb3RvLnRjYnMuQnV5U2VsbEFjdGl2ZVBvam8uc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIgPSBmdW5jdGlvbihtZXNzYWdlLCB3cml0ZXIpIHtcbiAgdmFyIGYgPSB1bmRlZmluZWQ7XG4gIGYgPSBtZXNzYWdlLmdldFN5bWJvbCgpO1xuICBpZiAoZi5sZW5ndGggPiAwKSB7XG4gICAgd3JpdGVyLndyaXRlU3RyaW5nKFxuICAgICAgMSxcbiAgICAgIGZcbiAgICApO1xuICB9XG4gIGYgPSBtZXNzYWdlLmdldENsb3NlcHJpY2UoKTtcbiAgaWYgKGYgIT09IDAuMCkge1xuICAgIHdyaXRlci53cml0ZURvdWJsZShcbiAgICAgIDIsXG4gICAgICBmXG4gICAgKTtcbiAgfVxuICBmID0gbWVzc2FnZS5nZXRDbG9zZXZvbCgpO1xuICBpZiAoZiAhPT0gMC4wKSB7XG4gICAgd3JpdGVyLndyaXRlRG91YmxlKFxuICAgICAgMyxcbiAgICAgIGZcbiAgICApO1xuICB9XG4gIGYgPSBtZXNzYWdlLmdldENoYW5nZSgpO1xuICBpZiAoZiAhPT0gMC4wKSB7XG4gICAgd3JpdGVyLndyaXRlRG91YmxlKFxuICAgICAgNCxcbiAgICAgIGZcbiAgICApO1xuICB9XG4gIGYgPSBtZXNzYWdlLmdldFJlZmVyZW5jZSgpO1xuICBpZiAoZiAhPT0gMC4wKSB7XG4gICAgd3JpdGVyLndyaXRlRG91YmxlKFxuICAgICAgNSxcbiAgICAgIGZcbiAgICApO1xuICB9XG4gIGYgPSBtZXNzYWdlLmdldFRvdGFsdHJhZGluZygpO1xuICBpZiAoZiAhPT0gMC4wKSB7XG4gICAgd3JpdGVyLndyaXRlRG91YmxlKFxuICAgICAgNixcbiAgICAgIGZcbiAgICApO1xuICB9XG4gIGYgPSBtZXNzYWdlLmdldFRvdGFsdHJhZGluZ3ZhbHVlKCk7XG4gIGlmIChmICE9PSAwLjApIHtcbiAgICB3cml0ZXIud3JpdGVEb3VibGUoXG4gICAgICA3LFxuICAgICAgZlxuICAgICk7XG4gIH1cbiAgZiA9IG1lc3NhZ2UuZ2V0VGltZXNlYygpO1xuICBpZiAoZiAhPT0gMCkge1xuICAgIHdyaXRlci53cml0ZUludDY0KFxuICAgICAgOCxcbiAgICAgIGZcbiAgICApO1xuICB9XG4gIGYgPSBtZXNzYWdlLmdldEFjdGlvbigpO1xuICBpZiAoZi5sZW5ndGggPiAwKSB7XG4gICAgd3JpdGVyLndyaXRlU3RyaW5nKFxuICAgICAgOSxcbiAgICAgIGZcbiAgICApO1xuICB9XG4gIGYgPSBtZXNzYWdlLmdldFVuaXR0aW1lZnJhbWUoKTtcbiAgaWYgKGYgIT09IDApIHtcbiAgICB3cml0ZXIud3JpdGVJbnQ2NChcbiAgICAgIDEwLFxuICAgICAgZlxuICAgICk7XG4gIH1cbiAgZiA9IG1lc3NhZ2UuZ2V0VHJhZGluZ3ZhbHVlKCk7XG4gIGlmIChmICE9PSAwLjApIHtcbiAgICB3cml0ZXIud3JpdGVEb3VibGUoXG4gICAgICAxMSxcbiAgICAgIGZcbiAgICApO1xuICB9XG4gIGYgPSBtZXNzYWdlLmdldEJ1eXVwYWNjKCk7XG4gIGlmIChmICE9PSAwLjApIHtcbiAgICB3cml0ZXIud3JpdGVEb3VibGUoXG4gICAgICAxMixcbiAgICAgIGZcbiAgICApO1xuICB9XG4gIGYgPSBtZXNzYWdlLmdldFNlbGxkb3duYWNjKCk7XG4gIGlmIChmICE9PSAwLjApIHtcbiAgICB3cml0ZXIud3JpdGVEb3VibGUoXG4gICAgICAxMyxcbiAgICAgIGZcbiAgICApO1xuICB9XG4gIGYgPSBtZXNzYWdlLmdldEhpZ2hsaWdodCgpO1xuICBpZiAoZikge1xuICAgIHdyaXRlci53cml0ZUJvb2woXG4gICAgICAxNCxcbiAgICAgIGZcbiAgICApO1xuICB9XG4gIGYgPSBtZXNzYWdlLmdldEJpZHByaWNlKCk7XG4gIGlmIChmICE9PSAwLjApIHtcbiAgICB3cml0ZXIud3JpdGVEb3VibGUoXG4gICAgICAxNSxcbiAgICAgIGZcbiAgICApO1xuICB9XG4gIGYgPSBtZXNzYWdlLmdldEJpZHZvbCgpO1xuICBpZiAoZiAhPT0gMC4wKSB7XG4gICAgd3JpdGVyLndyaXRlRG91YmxlKFxuICAgICAgMTYsXG4gICAgICBmXG4gICAgKTtcbiAgfVxuICBmID0gbWVzc2FnZS5nZXRBc2twcmljZSgpO1xuICBpZiAoZiAhPT0gMC4wKSB7XG4gICAgd3JpdGVyLndyaXRlRG91YmxlKFxuICAgICAgMTcsXG4gICAgICBmXG4gICAgKTtcbiAgfVxuICBmID0gbWVzc2FnZS5nZXRBc2t2b2woKTtcbiAgaWYgKGYgIT09IDAuMCkge1xuICAgIHdyaXRlci53cml0ZURvdWJsZShcbiAgICAgIDE4LFxuICAgICAgZlxuICAgICk7XG4gIH1cbiAgZiA9IG1lc3NhZ2UuZ2V0UHJldmNoYW5nZSgpO1xuICBpZiAoZiAhPT0gMC4wKSB7XG4gICAgd3JpdGVyLndyaXRlRmxvYXQoXG4gICAgICAxOSxcbiAgICAgIGZcbiAgICApO1xuICB9XG59O1xuXG5cbi8qKlxuICogb3B0aW9uYWwgc3RyaW5nIHN5bWJvbCA9IDE7XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbnByb3RvLnRjYnMuQnV5U2VsbEFjdGl2ZVBvam8ucHJvdG90eXBlLmdldFN5bWJvbCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLCAxLCBcIlwiKSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8udGNicy5CdXlTZWxsQWN0aXZlUG9qb30gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLnRjYnMuQnV5U2VsbEFjdGl2ZVBvam8ucHJvdG90eXBlLnNldFN5bWJvbCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zU3RyaW5nRmllbGQodGhpcywgMSwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIGRvdWJsZSBjbG9zZXByaWNlID0gMjtcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xucHJvdG8udGNicy5CdXlTZWxsQWN0aXZlUG9qby5wcm90b3R5cGUuZ2V0Q2xvc2VwcmljZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmxvYXRpbmdQb2ludEZpZWxkV2l0aERlZmF1bHQodGhpcywgMiwgMC4wKSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8udGNicy5CdXlTZWxsQWN0aXZlUG9qb30gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLnRjYnMuQnV5U2VsbEFjdGl2ZVBvam8ucHJvdG90eXBlLnNldENsb3NlcHJpY2UgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0Zsb2F0RmllbGQodGhpcywgMiwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIGRvdWJsZSBjbG9zZXZvbCA9IDM7XG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbnByb3RvLnRjYnMuQnV5U2VsbEFjdGl2ZVBvam8ucHJvdG90eXBlLmdldENsb3Nldm9sID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUge251bWJlcn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGbG9hdGluZ1BvaW50RmllbGRXaXRoRGVmYXVsdCh0aGlzLCAzLCAwLjApKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by50Y2JzLkJ1eVNlbGxBY3RpdmVQb2pvfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8udGNicy5CdXlTZWxsQWN0aXZlUG9qby5wcm90b3R5cGUuc2V0Q2xvc2V2b2wgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0Zsb2F0RmllbGQodGhpcywgMywgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIGRvdWJsZSBjaGFuZ2UgPSA0O1xuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5wcm90by50Y2JzLkJ1eVNlbGxBY3RpdmVQb2pvLnByb3RvdHlwZS5nZXRDaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoanNwYi5NZXNzYWdlLmdldEZsb2F0aW5nUG9pbnRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDQsIDAuMCkpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLnRjYnMuQnV5U2VsbEFjdGl2ZVBvam99IHJldHVybnMgdGhpc1xuICovXG5wcm90by50Y2JzLkJ1eVNlbGxBY3RpdmVQb2pvLnByb3RvdHlwZS5zZXRDaGFuZ2UgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0Zsb2F0RmllbGQodGhpcywgNCwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIGRvdWJsZSByZWZlcmVuY2UgPSA1O1xuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5wcm90by50Y2JzLkJ1eVNlbGxBY3RpdmVQb2pvLnByb3RvdHlwZS5nZXRSZWZlcmVuY2UgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoanNwYi5NZXNzYWdlLmdldEZsb2F0aW5nUG9pbnRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDUsIDAuMCkpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLnRjYnMuQnV5U2VsbEFjdGl2ZVBvam99IHJldHVybnMgdGhpc1xuICovXG5wcm90by50Y2JzLkJ1eVNlbGxBY3RpdmVQb2pvLnByb3RvdHlwZS5zZXRSZWZlcmVuY2UgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0Zsb2F0RmllbGQodGhpcywgNSwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIGRvdWJsZSB0b3RhbHRyYWRpbmcgPSA2O1xuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5wcm90by50Y2JzLkJ1eVNlbGxBY3RpdmVQb2pvLnByb3RvdHlwZS5nZXRUb3RhbHRyYWRpbmcgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoanNwYi5NZXNzYWdlLmdldEZsb2F0aW5nUG9pbnRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDYsIDAuMCkpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLnRjYnMuQnV5U2VsbEFjdGl2ZVBvam99IHJldHVybnMgdGhpc1xuICovXG5wcm90by50Y2JzLkJ1eVNlbGxBY3RpdmVQb2pvLnByb3RvdHlwZS5zZXRUb3RhbHRyYWRpbmcgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0Zsb2F0RmllbGQodGhpcywgNiwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIGRvdWJsZSB0b3RhbHRyYWRpbmd2YWx1ZSA9IDc7XG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbnByb3RvLnRjYnMuQnV5U2VsbEFjdGl2ZVBvam8ucHJvdG90eXBlLmdldFRvdGFsdHJhZGluZ3ZhbHVlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUge251bWJlcn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGbG9hdGluZ1BvaW50RmllbGRXaXRoRGVmYXVsdCh0aGlzLCA3LCAwLjApKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by50Y2JzLkJ1eVNlbGxBY3RpdmVQb2pvfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8udGNicy5CdXlTZWxsQWN0aXZlUG9qby5wcm90b3R5cGUuc2V0VG90YWx0cmFkaW5ndmFsdWUgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0Zsb2F0RmllbGQodGhpcywgNywgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIGludDY0IHRpbWVzZWMgPSA4O1xuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5wcm90by50Y2JzLkJ1eVNlbGxBY3RpdmVQb2pvLnByb3RvdHlwZS5nZXRUaW1lc2VjID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUge251bWJlcn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDgsIDApKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by50Y2JzLkJ1eVNlbGxBY3RpdmVQb2pvfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8udGNicy5CdXlTZWxsQWN0aXZlUG9qby5wcm90b3R5cGUuc2V0VGltZXNlYyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywgOCwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIHN0cmluZyBhY3Rpb24gPSA5O1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5wcm90by50Y2JzLkJ1eVNlbGxBY3RpdmVQb2pvLnByb3RvdHlwZS5nZXRBY3Rpb24gPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywgOSwgXCJcIikpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLnRjYnMuQnV5U2VsbEFjdGl2ZVBvam99IHJldHVybnMgdGhpc1xuICovXG5wcm90by50Y2JzLkJ1eVNlbGxBY3RpdmVQb2pvLnByb3RvdHlwZS5zZXRBY3Rpb24gPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM1N0cmluZ0ZpZWxkKHRoaXMsIDksIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBvcHRpb25hbCBpbnQ2NCB1bml0dGltZWZyYW1lID0gMTA7XG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbnByb3RvLnRjYnMuQnV5U2VsbEFjdGl2ZVBvam8ucHJvdG90eXBlLmdldFVuaXR0aW1lZnJhbWUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywgMTAsIDApKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by50Y2JzLkJ1eVNlbGxBY3RpdmVQb2pvfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8udGNicy5CdXlTZWxsQWN0aXZlUG9qby5wcm90b3R5cGUuc2V0VW5pdHRpbWVmcmFtZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywgMTAsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBvcHRpb25hbCBkb3VibGUgdHJhZGluZ3ZhbHVlID0gMTE7XG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbnByb3RvLnRjYnMuQnV5U2VsbEFjdGl2ZVBvam8ucHJvdG90eXBlLmdldFRyYWRpbmd2YWx1ZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmxvYXRpbmdQb2ludEZpZWxkV2l0aERlZmF1bHQodGhpcywgMTEsIDAuMCkpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLnRjYnMuQnV5U2VsbEFjdGl2ZVBvam99IHJldHVybnMgdGhpc1xuICovXG5wcm90by50Y2JzLkJ1eVNlbGxBY3RpdmVQb2pvLnByb3RvdHlwZS5zZXRUcmFkaW5ndmFsdWUgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0Zsb2F0RmllbGQodGhpcywgMTEsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBvcHRpb25hbCBkb3VibGUgYnV5dXBhY2MgPSAxMjtcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xucHJvdG8udGNicy5CdXlTZWxsQWN0aXZlUG9qby5wcm90b3R5cGUuZ2V0QnV5dXBhY2MgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoanNwYi5NZXNzYWdlLmdldEZsb2F0aW5nUG9pbnRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDEyLCAwLjApKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by50Y2JzLkJ1eVNlbGxBY3RpdmVQb2pvfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8udGNicy5CdXlTZWxsQWN0aXZlUG9qby5wcm90b3R5cGUuc2V0QnV5dXBhY2MgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0Zsb2F0RmllbGQodGhpcywgMTIsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBvcHRpb25hbCBkb3VibGUgc2VsbGRvd25hY2MgPSAxMztcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xucHJvdG8udGNicy5CdXlTZWxsQWN0aXZlUG9qby5wcm90b3R5cGUuZ2V0U2VsbGRvd25hY2MgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoanNwYi5NZXNzYWdlLmdldEZsb2F0aW5nUG9pbnRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDEzLCAwLjApKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by50Y2JzLkJ1eVNlbGxBY3RpdmVQb2pvfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8udGNicy5CdXlTZWxsQWN0aXZlUG9qby5wcm90b3R5cGUuc2V0U2VsbGRvd25hY2MgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0Zsb2F0RmllbGQodGhpcywgMTMsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBvcHRpb25hbCBib29sIGhpZ2hsaWdodCA9IDE0O1xuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xucHJvdG8udGNicy5CdXlTZWxsQWN0aXZlUG9qby5wcm90b3R5cGUuZ2V0SGlnaGxpZ2h0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUge2Jvb2xlYW59ICovIChqc3BiLk1lc3NhZ2UuZ2V0Qm9vbGVhbkZpZWxkV2l0aERlZmF1bHQodGhpcywgMTQsIGZhbHNlKSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtib29sZWFufSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLnRjYnMuQnV5U2VsbEFjdGl2ZVBvam99IHJldHVybnMgdGhpc1xuICovXG5wcm90by50Y2JzLkJ1eVNlbGxBY3RpdmVQb2pvLnByb3RvdHlwZS5zZXRIaWdobGlnaHQgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0Jvb2xlYW5GaWVsZCh0aGlzLCAxNCwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIGRvdWJsZSBiaWRwcmljZSA9IDE1O1xuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5wcm90by50Y2JzLkJ1eVNlbGxBY3RpdmVQb2pvLnByb3RvdHlwZS5nZXRCaWRwcmljZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmxvYXRpbmdQb2ludEZpZWxkV2l0aERlZmF1bHQodGhpcywgMTUsIDAuMCkpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLnRjYnMuQnV5U2VsbEFjdGl2ZVBvam99IHJldHVybnMgdGhpc1xuICovXG5wcm90by50Y2JzLkJ1eVNlbGxBY3RpdmVQb2pvLnByb3RvdHlwZS5zZXRCaWRwcmljZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zRmxvYXRGaWVsZCh0aGlzLCAxNSwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIGRvdWJsZSBiaWR2b2wgPSAxNjtcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xucHJvdG8udGNicy5CdXlTZWxsQWN0aXZlUG9qby5wcm90b3R5cGUuZ2V0Qmlkdm9sID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUge251bWJlcn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGbG9hdGluZ1BvaW50RmllbGRXaXRoRGVmYXVsdCh0aGlzLCAxNiwgMC4wKSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8udGNicy5CdXlTZWxsQWN0aXZlUG9qb30gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLnRjYnMuQnV5U2VsbEFjdGl2ZVBvam8ucHJvdG90eXBlLnNldEJpZHZvbCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zRmxvYXRGaWVsZCh0aGlzLCAxNiwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIGRvdWJsZSBhc2twcmljZSA9IDE3O1xuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5wcm90by50Y2JzLkJ1eVNlbGxBY3RpdmVQb2pvLnByb3RvdHlwZS5nZXRBc2twcmljZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmxvYXRpbmdQb2ludEZpZWxkV2l0aERlZmF1bHQodGhpcywgMTcsIDAuMCkpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLnRjYnMuQnV5U2VsbEFjdGl2ZVBvam99IHJldHVybnMgdGhpc1xuICovXG5wcm90by50Y2JzLkJ1eVNlbGxBY3RpdmVQb2pvLnByb3RvdHlwZS5zZXRBc2twcmljZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zRmxvYXRGaWVsZCh0aGlzLCAxNywgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIGRvdWJsZSBhc2t2b2wgPSAxODtcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xucHJvdG8udGNicy5CdXlTZWxsQWN0aXZlUG9qby5wcm90b3R5cGUuZ2V0QXNrdm9sID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUge251bWJlcn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGbG9hdGluZ1BvaW50RmllbGRXaXRoRGVmYXVsdCh0aGlzLCAxOCwgMC4wKSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8udGNicy5CdXlTZWxsQWN0aXZlUG9qb30gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLnRjYnMuQnV5U2VsbEFjdGl2ZVBvam8ucHJvdG90eXBlLnNldEFza3ZvbCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zRmxvYXRGaWVsZCh0aGlzLCAxOCwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIGZsb2F0IHByZXZjaGFuZ2UgPSAxOTtcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xucHJvdG8udGNicy5CdXlTZWxsQWN0aXZlUG9qby5wcm90b3R5cGUuZ2V0UHJldmNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmxvYXRpbmdQb2ludEZpZWxkV2l0aERlZmF1bHQodGhpcywgMTksIDAuMCkpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLnRjYnMuQnV5U2VsbEFjdGl2ZVBvam99IHJldHVybnMgdGhpc1xuICovXG5wcm90by50Y2JzLkJ1eVNlbGxBY3RpdmVQb2pvLnByb3RvdHlwZS5zZXRQcmV2Y2hhbmdlID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNGbG9hdEZpZWxkKHRoaXMsIDE5LCB2YWx1ZSk7XG59O1xuXG5cblxuXG5cbmlmIChqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKSB7XG4vKipcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uXG4gKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS5cbiAqIE9wdGlvbmFsIGZpZWxkcyB0aGF0IGFyZSBub3Qgc2V0IHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC5cbiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LlxuICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6XG4gKiAgICAgbmV0L3Byb3RvMi9jb21waWxlci9qcy9pbnRlcm5hbC9nZW5lcmF0b3IuY2Mja0tleXdvcmQuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGVcbiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxuICogQHJldHVybiB7IU9iamVjdH1cbiAqL1xucHJvdG8udGNicy5JbnZlc3Rvckhpc3RvcnlUcmFkZS5wcm90b3R5cGUudG9PYmplY3QgPSBmdW5jdGlvbihvcHRfaW5jbHVkZUluc3RhbmNlKSB7XG4gIHJldHVybiBwcm90by50Y2JzLkludmVzdG9ySGlzdG9yeVRyYWRlLnRvT2JqZWN0KG9wdF9pbmNsdWRlSW5zdGFuY2UsIHRoaXMpO1xufTtcblxuXG4vKipcbiAqIFN0YXRpYyB2ZXJzaW9uIG9mIHRoZSB7QHNlZSB0b09iamVjdH0gbWV0aG9kLlxuICogQHBhcmFtIHtib29sZWFufHVuZGVmaW5lZH0gaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIFdoZXRoZXIgdG8gaW5jbHVkZVxuICogICAgIHRoZSBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxuICogQHBhcmFtIHshcHJvdG8udGNicy5JbnZlc3Rvckhpc3RvcnlUcmFkZX0gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLlxuICogQHJldHVybiB7IU9iamVjdH1cbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcbiAqL1xucHJvdG8udGNicy5JbnZlc3Rvckhpc3RvcnlUcmFkZS50b09iamVjdCA9IGZ1bmN0aW9uKGluY2x1ZGVJbnN0YW5jZSwgbXNnKSB7XG4gIHZhciBmLCBvYmogPSB7XG4gICAgc3ltYm9sOiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csIDEsIFwiXCIpLFxuICAgIGF2Z3ByaWNlOiBqc3BiLk1lc3NhZ2UuZ2V0RmxvYXRpbmdQb2ludEZpZWxkV2l0aERlZmF1bHQobXNnLCAyLCAwLjApLFxuICAgIGNsb3Nldm9sOiBqc3BiLk1lc3NhZ2UuZ2V0RmxvYXRpbmdQb2ludEZpZWxkV2l0aERlZmF1bHQobXNnLCAzLCAwLjApLFxuICAgIGNoYW5nZToganNwYi5NZXNzYWdlLmdldEZsb2F0aW5nUG9pbnRGaWVsZFdpdGhEZWZhdWx0KG1zZywgNCwgMC4wKSxcbiAgICByZWZlcmVuY2U6IGpzcGIuTWVzc2FnZS5nZXRGbG9hdGluZ1BvaW50RmllbGRXaXRoRGVmYXVsdChtc2csIDUsIDAuMCksXG4gICAgdG90YWx2YWx1ZToganNwYi5NZXNzYWdlLmdldEZsb2F0aW5nUG9pbnRGaWVsZFdpdGhEZWZhdWx0KG1zZywgNiwgMC4wKSxcbiAgICB0aW1lc2VjOiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csIDcsIDApLFxuICAgIGFjdGlvbjoganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLCA4LCBcIlwiKSxcbiAgICB0eXBlOiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csIDksIFwiXCIpLFxuICAgIG5vdHJhbnM6IGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZywgMTAsIDApLFxuICAgIHVuaXR0aW1lZnJhbWU6IGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZywgMTEsIDApXG4gIH07XG5cbiAgaWYgKGluY2x1ZGVJbnN0YW5jZSkge1xuICAgIG9iai4kanNwYk1lc3NhZ2VJbnN0YW5jZSA9IG1zZztcbiAgfVxuICByZXR1cm4gb2JqO1xufTtcbn1cblxuXG4vKipcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxuICogQHBhcmFtIHtqc3BiLkJ5dGVTb3VyY2V9IGJ5dGVzIFRoZSBieXRlcyB0byBkZXNlcmlhbGl6ZS5cbiAqIEByZXR1cm4geyFwcm90by50Y2JzLkludmVzdG9ySGlzdG9yeVRyYWRlfVxuICovXG5wcm90by50Y2JzLkludmVzdG9ySGlzdG9yeVRyYWRlLmRlc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oYnl0ZXMpIHtcbiAgdmFyIHJlYWRlciA9IG5ldyBqc3BiLkJpbmFyeVJlYWRlcihieXRlcyk7XG4gIHZhciBtc2cgPSBuZXcgcHJvdG8udGNicy5JbnZlc3Rvckhpc3RvcnlUcmFkZTtcbiAgcmV0dXJuIHByb3RvLnRjYnMuSW52ZXN0b3JIaXN0b3J5VHJhZGUuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKG1zZywgcmVhZGVyKTtcbn07XG5cblxuLyoqXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KSBmcm9tIHRoZVxuICogZ2l2ZW4gcmVhZGVyIGludG8gdGhlIGdpdmVuIG1lc3NhZ2Ugb2JqZWN0LlxuICogQHBhcmFtIHshcHJvdG8udGNicy5JbnZlc3Rvckhpc3RvcnlUcmFkZX0gbXNnIFRoZSBtZXNzYWdlIG9iamVjdCB0byBkZXNlcmlhbGl6ZSBpbnRvLlxuICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS5cbiAqIEByZXR1cm4geyFwcm90by50Y2JzLkludmVzdG9ySGlzdG9yeVRyYWRlfVxuICovXG5wcm90by50Y2JzLkludmVzdG9ySGlzdG9yeVRyYWRlLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlciA9IGZ1bmN0aW9uKG1zZywgcmVhZGVyKSB7XG4gIHdoaWxlIChyZWFkZXIubmV4dEZpZWxkKCkpIHtcbiAgICBpZiAocmVhZGVyLmlzRW5kR3JvdXAoKSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHZhciBmaWVsZCA9IHJlYWRlci5nZXRGaWVsZE51bWJlcigpO1xuICAgIHN3aXRjaCAoZmllbGQpIHtcbiAgICBjYXNlIDE6XG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUge3N0cmluZ30gKi8gKHJlYWRlci5yZWFkU3RyaW5nKCkpO1xuICAgICAgbXNnLnNldFN5bWJvbCh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDI6XG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKHJlYWRlci5yZWFkRG91YmxlKCkpO1xuICAgICAgbXNnLnNldEF2Z3ByaWNlKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMzpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAocmVhZGVyLnJlYWREb3VibGUoKSk7XG4gICAgICBtc2cuc2V0Q2xvc2V2b2wodmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA0OlxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChyZWFkZXIucmVhZERvdWJsZSgpKTtcbiAgICAgIG1zZy5zZXRDaGFuZ2UodmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA1OlxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChyZWFkZXIucmVhZERvdWJsZSgpKTtcbiAgICAgIG1zZy5zZXRSZWZlcmVuY2UodmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA2OlxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChyZWFkZXIucmVhZERvdWJsZSgpKTtcbiAgICAgIG1zZy5zZXRUb3RhbHZhbHVlKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgNzpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAocmVhZGVyLnJlYWRJbnQ2NCgpKTtcbiAgICAgIG1zZy5zZXRUaW1lc2VjKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgODpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocmVhZGVyLnJlYWRTdHJpbmcoKSk7XG4gICAgICBtc2cuc2V0QWN0aW9uKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgOTpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocmVhZGVyLnJlYWRTdHJpbmcoKSk7XG4gICAgICBtc2cuc2V0VHlwZSh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDEwOlxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChyZWFkZXIucmVhZEludDY0KCkpO1xuICAgICAgbXNnLnNldE5vdHJhbnModmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxMTpcbiAgICAgIHZhciB2YWx1ZSA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAocmVhZGVyLnJlYWRJbnQ2NCgpKTtcbiAgICAgIG1zZy5zZXRVbml0dGltZWZyYW1lKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZWFkZXIuc2tpcEZpZWxkKCk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1zZztcbn07XG5cblxuLyoqXG4gKiBTZXJpYWxpemVzIHRoZSBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXG4gKiBAcmV0dXJuIHshVWludDhBcnJheX1cbiAqL1xucHJvdG8udGNicy5JbnZlc3Rvckhpc3RvcnlUcmFkZS5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oKSB7XG4gIHZhciB3cml0ZXIgPSBuZXcganNwYi5CaW5hcnlXcml0ZXIoKTtcbiAgcHJvdG8udGNicy5JbnZlc3Rvckhpc3RvcnlUcmFkZS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLCB3cml0ZXIpO1xuICByZXR1cm4gd3JpdGVyLmdldFJlc3VsdEJ1ZmZlcigpO1xufTtcblxuXG4vKipcbiAqIFNlcmlhbGl6ZXMgdGhlIGdpdmVuIG1lc3NhZ2UgdG8gYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmVcbiAqIGZvcm1hdCksIHdyaXRpbmcgdG8gdGhlIGdpdmVuIEJpbmFyeVdyaXRlci5cbiAqIEBwYXJhbSB7IXByb3RvLnRjYnMuSW52ZXN0b3JIaXN0b3J5VHJhZGV9IG1lc3NhZ2VcbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5V3JpdGVyfSB3cml0ZXJcbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcbiAqL1xucHJvdG8udGNicy5JbnZlc3Rvckhpc3RvcnlUcmFkZS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlciA9IGZ1bmN0aW9uKG1lc3NhZ2UsIHdyaXRlcikge1xuICB2YXIgZiA9IHVuZGVmaW5lZDtcbiAgZiA9IG1lc3NhZ2UuZ2V0U3ltYm9sKCk7XG4gIGlmIChmLmxlbmd0aCA+IDApIHtcbiAgICB3cml0ZXIud3JpdGVTdHJpbmcoXG4gICAgICAxLFxuICAgICAgZlxuICAgICk7XG4gIH1cbiAgZiA9IG1lc3NhZ2UuZ2V0QXZncHJpY2UoKTtcbiAgaWYgKGYgIT09IDAuMCkge1xuICAgIHdyaXRlci53cml0ZURvdWJsZShcbiAgICAgIDIsXG4gICAgICBmXG4gICAgKTtcbiAgfVxuICBmID0gbWVzc2FnZS5nZXRDbG9zZXZvbCgpO1xuICBpZiAoZiAhPT0gMC4wKSB7XG4gICAgd3JpdGVyLndyaXRlRG91YmxlKFxuICAgICAgMyxcbiAgICAgIGZcbiAgICApO1xuICB9XG4gIGYgPSBtZXNzYWdlLmdldENoYW5nZSgpO1xuICBpZiAoZiAhPT0gMC4wKSB7XG4gICAgd3JpdGVyLndyaXRlRG91YmxlKFxuICAgICAgNCxcbiAgICAgIGZcbiAgICApO1xuICB9XG4gIGYgPSBtZXNzYWdlLmdldFJlZmVyZW5jZSgpO1xuICBpZiAoZiAhPT0gMC4wKSB7XG4gICAgd3JpdGVyLndyaXRlRG91YmxlKFxuICAgICAgNSxcbiAgICAgIGZcbiAgICApO1xuICB9XG4gIGYgPSBtZXNzYWdlLmdldFRvdGFsdmFsdWUoKTtcbiAgaWYgKGYgIT09IDAuMCkge1xuICAgIHdyaXRlci53cml0ZURvdWJsZShcbiAgICAgIDYsXG4gICAgICBmXG4gICAgKTtcbiAgfVxuICBmID0gbWVzc2FnZS5nZXRUaW1lc2VjKCk7XG4gIGlmIChmICE9PSAwKSB7XG4gICAgd3JpdGVyLndyaXRlSW50NjQoXG4gICAgICA3LFxuICAgICAgZlxuICAgICk7XG4gIH1cbiAgZiA9IG1lc3NhZ2UuZ2V0QWN0aW9uKCk7XG4gIGlmIChmLmxlbmd0aCA+IDApIHtcbiAgICB3cml0ZXIud3JpdGVTdHJpbmcoXG4gICAgICA4LFxuICAgICAgZlxuICAgICk7XG4gIH1cbiAgZiA9IG1lc3NhZ2UuZ2V0VHlwZSgpO1xuICBpZiAoZi5sZW5ndGggPiAwKSB7XG4gICAgd3JpdGVyLndyaXRlU3RyaW5nKFxuICAgICAgOSxcbiAgICAgIGZcbiAgICApO1xuICB9XG4gIGYgPSBtZXNzYWdlLmdldE5vdHJhbnMoKTtcbiAgaWYgKGYgIT09IDApIHtcbiAgICB3cml0ZXIud3JpdGVJbnQ2NChcbiAgICAgIDEwLFxuICAgICAgZlxuICAgICk7XG4gIH1cbiAgZiA9IG1lc3NhZ2UuZ2V0VW5pdHRpbWVmcmFtZSgpO1xuICBpZiAoZiAhPT0gMCkge1xuICAgIHdyaXRlci53cml0ZUludDY0KFxuICAgICAgMTEsXG4gICAgICBmXG4gICAgKTtcbiAgfVxufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIHN0cmluZyBzeW1ib2wgPSAxO1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5wcm90by50Y2JzLkludmVzdG9ySGlzdG9yeVRyYWRlLnByb3RvdHlwZS5nZXRTeW1ib2wgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywgMSwgXCJcIikpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLnRjYnMuSW52ZXN0b3JIaXN0b3J5VHJhZGV9IHJldHVybnMgdGhpc1xuICovXG5wcm90by50Y2JzLkludmVzdG9ySGlzdG9yeVRyYWRlLnByb3RvdHlwZS5zZXRTeW1ib2wgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM1N0cmluZ0ZpZWxkKHRoaXMsIDEsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBvcHRpb25hbCBkb3VibGUgYXZncHJpY2UgPSAyO1xuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5wcm90by50Y2JzLkludmVzdG9ySGlzdG9yeVRyYWRlLnByb3RvdHlwZS5nZXRBdmdwcmljZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmxvYXRpbmdQb2ludEZpZWxkV2l0aERlZmF1bHQodGhpcywgMiwgMC4wKSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8udGNicy5JbnZlc3Rvckhpc3RvcnlUcmFkZX0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLnRjYnMuSW52ZXN0b3JIaXN0b3J5VHJhZGUucHJvdG90eXBlLnNldEF2Z3ByaWNlID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNGbG9hdEZpZWxkKHRoaXMsIDIsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBvcHRpb25hbCBkb3VibGUgY2xvc2V2b2wgPSAzO1xuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5wcm90by50Y2JzLkludmVzdG9ySGlzdG9yeVRyYWRlLnByb3RvdHlwZS5nZXRDbG9zZXZvbCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmxvYXRpbmdQb2ludEZpZWxkV2l0aERlZmF1bHQodGhpcywgMywgMC4wKSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8udGNicy5JbnZlc3Rvckhpc3RvcnlUcmFkZX0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLnRjYnMuSW52ZXN0b3JIaXN0b3J5VHJhZGUucHJvdG90eXBlLnNldENsb3Nldm9sID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNGbG9hdEZpZWxkKHRoaXMsIDMsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBvcHRpb25hbCBkb3VibGUgY2hhbmdlID0gNDtcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xucHJvdG8udGNicy5JbnZlc3Rvckhpc3RvcnlUcmFkZS5wcm90b3R5cGUuZ2V0Q2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUge251bWJlcn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGbG9hdGluZ1BvaW50RmllbGRXaXRoRGVmYXVsdCh0aGlzLCA0LCAwLjApKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by50Y2JzLkludmVzdG9ySGlzdG9yeVRyYWRlfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8udGNicy5JbnZlc3Rvckhpc3RvcnlUcmFkZS5wcm90b3R5cGUuc2V0Q2hhbmdlID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNGbG9hdEZpZWxkKHRoaXMsIDQsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBvcHRpb25hbCBkb3VibGUgcmVmZXJlbmNlID0gNTtcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xucHJvdG8udGNicy5JbnZlc3Rvckhpc3RvcnlUcmFkZS5wcm90b3R5cGUuZ2V0UmVmZXJlbmNlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUge251bWJlcn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGbG9hdGluZ1BvaW50RmllbGRXaXRoRGVmYXVsdCh0aGlzLCA1LCAwLjApKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by50Y2JzLkludmVzdG9ySGlzdG9yeVRyYWRlfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8udGNicy5JbnZlc3Rvckhpc3RvcnlUcmFkZS5wcm90b3R5cGUuc2V0UmVmZXJlbmNlID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNGbG9hdEZpZWxkKHRoaXMsIDUsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBvcHRpb25hbCBkb3VibGUgdG90YWx2YWx1ZSA9IDY7XG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbnByb3RvLnRjYnMuSW52ZXN0b3JIaXN0b3J5VHJhZGUucHJvdG90eXBlLmdldFRvdGFsdmFsdWUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoanNwYi5NZXNzYWdlLmdldEZsb2F0aW5nUG9pbnRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDYsIDAuMCkpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLnRjYnMuSW52ZXN0b3JIaXN0b3J5VHJhZGV9IHJldHVybnMgdGhpc1xuICovXG5wcm90by50Y2JzLkludmVzdG9ySGlzdG9yeVRyYWRlLnByb3RvdHlwZS5zZXRUb3RhbHZhbHVlID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNGbG9hdEZpZWxkKHRoaXMsIDYsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBvcHRpb25hbCBpbnQ2NCB0aW1lc2VjID0gNztcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xucHJvdG8udGNicy5JbnZlc3Rvckhpc3RvcnlUcmFkZS5wcm90b3R5cGUuZ2V0VGltZXNlYyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLCA3LCAwKSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8udGNicy5JbnZlc3Rvckhpc3RvcnlUcmFkZX0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLnRjYnMuSW52ZXN0b3JIaXN0b3J5VHJhZGUucHJvdG90eXBlLnNldFRpbWVzZWMgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsIDcsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBvcHRpb25hbCBzdHJpbmcgYWN0aW9uID0gODtcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xucHJvdG8udGNicy5JbnZlc3Rvckhpc3RvcnlUcmFkZS5wcm90b3R5cGUuZ2V0QWN0aW9uID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUge3N0cmluZ30gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDgsIFwiXCIpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by50Y2JzLkludmVzdG9ySGlzdG9yeVRyYWRlfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8udGNicy5JbnZlc3Rvckhpc3RvcnlUcmFkZS5wcm90b3R5cGUuc2V0QWN0aW9uID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNTdHJpbmdGaWVsZCh0aGlzLCA4LCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogb3B0aW9uYWwgc3RyaW5nIHR5cGUgPSA5O1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5wcm90by50Y2JzLkludmVzdG9ySGlzdG9yeVRyYWRlLnByb3RvdHlwZS5nZXRUeXBlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUge3N0cmluZ30gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDksIFwiXCIpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by50Y2JzLkludmVzdG9ySGlzdG9yeVRyYWRlfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8udGNicy5JbnZlc3Rvckhpc3RvcnlUcmFkZS5wcm90b3R5cGUuc2V0VHlwZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zU3RyaW5nRmllbGQodGhpcywgOSwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIGludDY0IG5vdHJhbnMgPSAxMDtcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xucHJvdG8udGNicy5JbnZlc3Rvckhpc3RvcnlUcmFkZS5wcm90b3R5cGUuZ2V0Tm90cmFucyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLCAxMCwgMCkpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLnRjYnMuSW52ZXN0b3JIaXN0b3J5VHJhZGV9IHJldHVybnMgdGhpc1xuICovXG5wcm90by50Y2JzLkludmVzdG9ySGlzdG9yeVRyYWRlLnByb3RvdHlwZS5zZXROb3RyYW5zID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLCAxMCwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIGludDY0IHVuaXR0aW1lZnJhbWUgPSAxMTtcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xucHJvdG8udGNicy5JbnZlc3Rvckhpc3RvcnlUcmFkZS5wcm90b3R5cGUuZ2V0VW5pdHRpbWVmcmFtZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLCAxMSwgMCkpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLnRjYnMuSW52ZXN0b3JIaXN0b3J5VHJhZGV9IHJldHVybnMgdGhpc1xuICovXG5wcm90by50Y2JzLkludmVzdG9ySGlzdG9yeVRyYWRlLnByb3RvdHlwZS5zZXRVbml0dGltZWZyYW1lID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLCAxMSwgdmFsdWUpO1xufTtcblxuXG4iLCJjbGFzcyBOb3RpZmllciB7XHJcbiAgICAvLyBDw6FjIHRodeG7mWMgdMOtbmhcclxuICAgIHN0YXR1cyA9IFwic3VjY2Vzc1wiO1xyXG4gICAgdGV4dCA9IFwidGVzdFwiO1xyXG4gICAgYXV0b2Nsb3NlID0gdHJ1ZTtcclxuICAgIC8vIEjDoG0ga2jhu59pIHThuqFvXHJcbiAgICBjb25zdHJ1Y3RvcigpIHt9XHJcbiAgICAvLyBDw6FjIHBoxrDGoW5nIHRo4bupY1xyXG4gICAgc2hvdyA9IChzdGF0dXMsIHRleHQsIGF1dG9jbG9zZSkgPT4ge1xyXG4gICAgICAgIHRoaXMuc3RhdHVzID0gc3RhdHVzIHx8IHRoaXMuc3RhdHVzO1xyXG4gICAgICAgIHRoaXMudGV4dCA9IHRleHQgfHwgdGhpcy50ZXh0O1xyXG4gICAgICAgIHRoaXMuYXV0b2Nsb3NlID0gYXV0b2Nsb3NlICYmIHRoaXMuYXV0b2Nsb3NlO1xyXG4gICAgICAgIHRoaXMubm90aWZ5ID0gbmV3IE5vdGlmeSh7XHJcbiAgICAgICAgICAgIHN0YXR1czogdGhpcy5zdGF0dXMsXHJcbiAgICAgICAgICAgIHRleHQ6IHRoaXMudGV4dCxcclxuICAgICAgICAgICAgYXV0b2Nsb3NlOiB0aGlzLmF1dG9jbG9zZSxcclxuICAgICAgICAgICAgcG9zaXRpb246IFwicmlnaHQgYm90dG9tXCJcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBoaWRlID0gKCkgPT4ge1xyXG4gICAgICAgIHRoaXMubm90aWZ5LmNsb3NlKCk7XHJcbiAgICB9O1xyXG59XHJcbiIsImNsYXNzIExpZ2h0d2VpZ2h0IHtcclxuICAgIC8vIEPDoWMgdGh14buZYyB0w61uaFxyXG4gICAgY2hhcnQgPSB7fTtcclxuICAgIHNlcmllcyA9IHt9O1xyXG4gICAgZGF0YSA9IHt9O1xyXG4gICAgb3JkZXIgPSB7IGVudHJ5OiB7fSwgdHA6IHt9LCBzbDoge30gfTtcclxuICAgIGxpbmVzID0gW107XHJcbiAgICBtYXJrZXJzID0gW107XHJcbiAgICBydWxlciA9IHsgc3RhcnQ6IHt9LCBlbmQ6IHt9LCBwb2ludDogMCB9O1xyXG4gICAgYWxlcnRzID0gW107XHJcbiAgICBjcm9zc2hhaXIgPSB7fTtcclxuICAgIGhhc0Nyb3NzaGFpciA9IGZhbHNlO1xyXG4gICAgaGFzTmV3RGF0YSA9IGZhbHNlO1xyXG5cclxuICAgIC8vIEjDoG0ga2jhu59pIHThuqFvXHJcbiAgICBjb25zdHJ1Y3RvcigpIHt9XHJcblxyXG4gICAgLy8gQ8OhYyBwaMawxqFuZyB0aOG7qWNcclxuICAgIHNldE9wdGlvbnMgPSBvcHRpb25zID0+IHtcclxuICAgICAgICB0aGlzLmRhdGFFbmRwb2ludCA9IG9wdGlvbnMuZGF0YUVuZHBvaW50O1xyXG4gICAgICAgIHRoaXMuYWNjZXNzVG9rZW4gPSBvcHRpb25zLmFjY2Vzc1Rva2VuO1xyXG4gICAgICAgIHRoaXMubG9jYWxEQiA9IG9wdGlvbnMubG9jYWxEQjtcclxuICAgICAgICB0aGlzLmF1ZGlvID0gb3B0aW9ucy5hdWRpbztcclxuICAgICAgICB0aGlzLm5vdGlmaWVyID0gb3B0aW9ucy5ub3RpZmllcjtcclxuICAgICAgICB0aGlzLmlzTW9iaWxlID0gb3B0aW9ucy5pc01vYmlsZTtcclxuICAgICAgICB0aGlzLnRpbWVGcmFtZSA9IG9wdGlvbnMudGltZUZyYW1lO1xyXG4gICAgICAgIHRoaXMuc2hhcmtMaW1pdCA9IG9wdGlvbnMuc2hhcmtMaW1pdDtcclxuICAgICAgICB0aGlzLmdldE9yZGVyUG9zaXRpb24gPSBvcHRpb25zLmdldE9yZGVyUG9zaXRpb247XHJcbiAgICAgICAgdGhpcy5jbG9zZVBvc2l0aW9uID0gb3B0aW9ucy5jbG9zZVBvc2l0aW9uO1xyXG4gICAgICAgIHRoaXMub3JkZXJFbnRyeVByaWNlID0gb3B0aW9ucy5vcmRlckVudHJ5UHJpY2U7XHJcbiAgICAgICAgdGhpcy5vcmRlclRwUHJpY2UgPSBvcHRpb25zLm9yZGVyVHBQcmljZTtcclxuICAgICAgICB0aGlzLm9yZGVyU2xQcmljZSA9IG9wdGlvbnMub3JkZXJTbFByaWNlO1xyXG4gICAgICAgIHRoaXMuY2FuY2VsT3JkZXIgPSBvcHRpb25zLmNhbmNlbE9yZGVyO1xyXG4gICAgfTtcclxuICAgIGluaXQgPSAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5jcmVhdGVMaWdodFdlaWdodENoYXJ0KCk7XHJcbiAgICAgICAgdGhpcy5jcmVhdGVEYXRhQXJlYSgpO1xyXG4gICAgICAgIHRoaXMuY3JlYXRlVG9vbEFyZWEoKTtcclxuICAgICAgICB0aGlzLmNyZWF0ZUxlZ2VuZEFyZWEoKTtcclxuICAgICAgICB0aGlzLmNyZWF0ZUZyZWVBcmVhKCk7XHJcbiAgICAgICAgc2V0SW50ZXJ2YWwoKCkgPT4gdGhpcy5pbnRlcnZhbEhhbmRsZXIodGhpcyksIDEwMDApO1xyXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsICgpID0+IHRoaXMucmVzaXplKHRoaXMuY2hhcnQpKTtcclxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgZSA9PiB0aGlzLmtleUV2ZW50KGUsIHRoaXMpKTtcclxuICAgIH07XHJcbiAgICBjcmVhdGVMaWdodFdlaWdodENoYXJ0ID0gKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGNoYXJ0T3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgbG9jYWxpemF0aW9uOiB7IGRhdGVGb3JtYXQ6IFwiZGQvTU0veXl5eVwiLCBsb2NhbGU6IFwidmktVk5cIiB9LFxyXG4gICAgICAgICAgICByaWdodFByaWNlU2NhbGU6IHtcclxuICAgICAgICAgICAgICAgIHZpc2libGU6IHRydWVcclxuICAgICAgICAgICAgICAgIC8vIHNjYWxlTWFyZ2luczogeyB0b3A6IDAuMSwgYm90dG9tOiAwLjQgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBsZWZ0UHJpY2VTY2FsZTogeyB2aXNpYmxlOiBmYWxzZSB9LFxyXG4gICAgICAgICAgICBsYXlvdXQ6IHtcclxuICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogXCIjMTgxQzI3XCIsXHJcbiAgICAgICAgICAgICAgICB0ZXh0Q29sb3I6IFwiI0EyQTZBRVwiXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdyaWQ6IHtcclxuICAgICAgICAgICAgICAgIHZlcnRMaW5lczogeyBjb2xvcjogXCIjMzAzMzNGXCIgfSxcclxuICAgICAgICAgICAgICAgIGhvcnpMaW5lczogeyBjb2xvcjogXCIjMzAzMzNGXCIgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBjcm9zc2hhaXI6IHsgbW9kZTogTGlnaHR3ZWlnaHRDaGFydHMuQ3Jvc3NoYWlyTW9kZS5Ob3JtYWwgfSxcclxuICAgICAgICAgICAgdGltZVNjYWxlOiB7XHJcbiAgICAgICAgICAgICAgICB0aW1lVmlzaWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIHJpZ2h0T2Zmc2V0OiAyMCxcclxuICAgICAgICAgICAgICAgIG1pbkJhclNwYWNpbmc6IDAuMVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICB2YXIgY2hhcnRFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZChjaGFydEVsZW1lbnQpO1xyXG4gICAgICAgIGNoYXJ0RWxlbWVudC5pZCA9IFwibGlnaHRXZWlnaHRDaGFydFwiO1xyXG4gICAgICAgIGNoYXJ0RWxlbWVudC5zdHlsZS53aWR0aCA9IFwiMTAwdndcIjtcclxuICAgICAgICBjaGFydEVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gXCIxMDB2aFwiO1xyXG4gICAgICAgIGNoYXJ0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY29udGV4dG1lbnVcIiwgZSA9PlxyXG4gICAgICAgICAgICB0aGlzLmNoYXJ0Q29udGV4dG1lbnUoZSwgdGhpcylcclxuICAgICAgICApO1xyXG4gICAgICAgIGNoYXJ0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZSA9PiB0aGlzLmNoYXJ0Q2xpY2soZSwgdGhpcykpO1xyXG4gICAgICAgIHRoaXMuY2hhcnQgPSBMaWdodHdlaWdodENoYXJ0cy5jcmVhdGVDaGFydChjaGFydEVsZW1lbnQsIGNoYXJ0T3B0aW9ucyk7XHJcbiAgICAgICAgdGhpcy5jaGFydC5zdWJzY3JpYmVDcm9zc2hhaXJNb3ZlKGUgPT4gdGhpcy5jcm9zc2hhaXJNb3ZlKGUsIHRoaXMpKTtcclxuICAgICAgICB0aGlzLmNoYXJ0LnN1YnNjcmliZUN1c3RvbVByaWNlTGluZURyYWdnZWQoZSA9PlxyXG4gICAgICAgICAgICB0aGlzLnByaWNlTGluZURyYWcoZSwgdGhpcylcclxuICAgICAgICApO1xyXG4gICAgICAgIC8vXHJcbiAgICAgICAgdGhpcy5zZXJpZXMuc2hhcmsgPSB0aGlzLmNoYXJ0LmFkZExpbmVTZXJpZXMoe1xyXG4gICAgICAgICAgICBwcmljZVNjYWxlSWQ6IFwic2hhcmtcIixcclxuICAgICAgICAgICAgY29sb3I6IFwiI0ZGMDBGRlwiLFxyXG4gICAgICAgICAgICBwcmljZUZvcm1hdDogeyBtaW5Nb3ZlOiAxIH0sXHJcbiAgICAgICAgICAgIHNjYWxlTWFyZ2luczogeyB0b3A6IDAuNiwgYm90dG9tOiAwIH0sXHJcbiAgICAgICAgICAgIHZpc2libGU6IGZhbHNlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5zZXJpZXMucHJpY2UgPSB0aGlzLmNoYXJ0LmFkZExpbmVTZXJpZXMoe1xyXG4gICAgICAgICAgICBjb2xvcjogXCJ3aGl0ZVwiLFxyXG4gICAgICAgICAgICBwcmljZUZvcm1hdDogeyBtaW5Nb3ZlOiAwLjEgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuY2hhcnQudGltZVNjYWxlKCkuZml0Q29udGVudCgpO1xyXG4gICAgICAgIHRoaXMuY2hhcnRFbGVtZW50ID0gY2hhcnRFbGVtZW50O1xyXG4gICAgfTtcclxuICAgIHJlbW92ZUxpZ2h0V2VpZ2h0Q2hhcnQgPSAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5jaGFydEVsZW1lbnQucmVtb3ZlKCk7XHJcbiAgICB9O1xyXG4gICAgY3JlYXRlRGF0YUFyZWEgPSAoKSA9PiB7XHJcbiAgICAgICAgdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICAgZGl2LmlkID0gXCJkYXRhQXJlYURpdlwiO1xyXG4gICAgICAgIGRpdi5jbGFzc05hbWUgPSBcImFyZWFcIjtcclxuICAgICAgICB0aGlzLmNoYXJ0RWxlbWVudC5hcHBlbmQoZGl2KTtcclxuICAgICAgICAvL1xyXG4gICAgICAgIHRoaXMuY3JlYXRlU3Bpbm5lckltZyhkaXYpO1xyXG4gICAgICAgIHRoaXMuY3JlYXRlRGF0ZUlucHV0KGRpdik7XHJcbiAgICAgICAgdGhpcy5jcmVhdGVUaW1lRnJhbWVTZWxlY3QoZGl2KTtcclxuICAgICAgICB0aGlzLmNyZWF0ZVJlZnJlc2hCdXR0b24oZGl2KTtcclxuICAgICAgICB0aGlzLmNyZWF0ZUNsZWFyQnV0dG9uKGRpdik7XHJcbiAgICB9O1xyXG4gICAgY3JlYXRlQ2xlYXJCdXR0b24gPSBjb250YWluZXIgPT4ge1xyXG4gICAgICAgIHZhciBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgIGJ1dHRvbi5pZCA9IFwiY2xlYXJCdXR0b25cIjtcclxuICAgICAgICBidXR0b24uY2xhc3NOYW1lID0gXCJjb21tYW5kIGZhIGZhLXRyYXNoXCI7XHJcbiAgICAgICAgYnV0dG9uLnRpdGxlID0gXCJEZWxldGUgbG9jYWwgZGF0YVwiO1xyXG4gICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmxvY2FsREIuY2xlYXIoXCJkYXRhXCIpO1xyXG4gICAgICAgICAgICB0aGlzLmxvYWRDaGFydERhdGEoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBjb250YWluZXIuYXBwZW5kKGJ1dHRvbik7XHJcbiAgICB9O1xyXG4gICAgY3JlYXRlUmVmcmVzaEJ1dHRvbiA9IGNvbnRhaW5lciA9PiB7XHJcbiAgICAgICAgdmFyIGJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICAgYnV0dG9uLmlkID0gXCJyZWZyZXNoQnV0dG9uXCI7XHJcbiAgICAgICAgYnV0dG9uLmNsYXNzTmFtZSA9IFwiY29tbWFuZCBmYSBmYS1yZWZyZXNoXCI7XHJcbiAgICAgICAgYnV0dG9uLnRpdGxlID0gXCJSZWZyZXNoIGNoYXJ0XCI7XHJcbiAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB0aGlzLmxvYWRDaGFydERhdGEoKSk7XHJcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZChidXR0b24pO1xyXG4gICAgfTtcclxuICAgIGNyZWF0ZVRpbWVGcmFtZVNlbGVjdCA9IGNvbnRhaW5lciA9PiB7XHJcbiAgICAgICAgdmFyIHNlbGVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzZWxlY3RcIik7XHJcbiAgICAgICAgc2VsZWN0LmlkID0gXCJ0aW1lRnJhbWVTZWxlY3RcIjtcclxuICAgICAgICBzZWxlY3QuY2xhc3NOYW1lID0gXCJjb21tYW5kXCI7XHJcbiAgICAgICAgW1xyXG4gICAgICAgICAgICB7IHRleHQ6IFwiVGlja1wiLCB2YWx1ZTogMCB9LFxyXG4gICAgICAgICAgICB7IHRleHQ6IFwiMSBtaW5cIiwgdmFsdWU6IDEgfSxcclxuICAgICAgICAgICAgeyB0ZXh0OiBcIjUgbWluXCIsIHZhbHVlOiA1IH0sXHJcbiAgICAgICAgICAgIHsgdGV4dDogXCIzMCBtaW5cIiwgdmFsdWU6IDMwIH0sXHJcbiAgICAgICAgICAgIHsgdGV4dDogXCIxIGRheVwiLCB2YWx1ZTogMTQ0MCB9XHJcbiAgICAgICAgXS5mb3JFYWNoKChpdGVtLCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICB2YXIgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiKTtcclxuICAgICAgICAgICAgb3B0aW9uLnZhbHVlID0gaXRlbS52YWx1ZTtcclxuICAgICAgICAgICAgb3B0aW9uLnRleHQgPSBpdGVtLnRleHQ7XHJcbiAgICAgICAgICAgIHNlbGVjdC5hcHBlbmRDaGlsZChvcHRpb24pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHNlbGVjdC52YWx1ZSA9IHRoaXMudGltZUZyYW1lO1xyXG4gICAgICAgIHNlbGVjdC5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIGUgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnRpbWVGcmFtZSA9IGUudGFyZ2V0LnZhbHVlO1xyXG4gICAgICAgICAgICB0aGlzLmxvYWRDaGFydERhdGEoKS50aGVuKCgpID0+XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoYXJ0LnRpbWVTY2FsZSgpLnJlc2V0VGltZVNjYWxlKClcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBjb250YWluZXIuYXBwZW5kKHNlbGVjdCk7XHJcbiAgICB9O1xyXG4gICAgY3JlYXRlRGF0ZUlucHV0ID0gY29udGFpbmVyID0+IHtcclxuICAgICAgICB2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XHJcbiAgICAgICAgaW5wdXQuaWQgPSBcImRhdGVJbnB1dFwiO1xyXG4gICAgICAgIGlucHV0LnR5cGUgPSBcImRhdGVcIjtcclxuICAgICAgICBpbnB1dC52YWx1ZSA9IG1vbWVudCgpLmZvcm1hdChcIllZWVktTU0tRERcIik7XHJcbiAgICAgICAgaW5wdXQuY2xhc3NOYW1lID0gXCJjb21tYW5kXCI7XHJcbiAgICAgICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCBlID0+IHtcclxuICAgICAgICAgICAgaWYgKCEhZS50YXJnZXQudmFsdWUpIHRoaXMubG9hZENoYXJ0RGF0YSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGNvbnRhaW5lci5hcHBlbmQoaW5wdXQpO1xyXG4gICAgICAgIHRoaXMuZGF0ZUlucHV0ID0gaW5wdXQ7XHJcbiAgICB9O1xyXG4gICAgY3JlYXRlU3Bpbm5lckltZyA9IGNvbnRhaW5lciA9PiB7XHJcbiAgICAgICAgdmFyIGltZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIik7XHJcbiAgICAgICAgaW1nLmlkID0gXCJzcGlubmVySW1nXCI7XHJcbiAgICAgICAgaW1nLnN0eWxlLm9wYWNpdHkgPSAwO1xyXG4gICAgICAgIGltZy5zcmMgPSBjaHJvbWUucnVudGltZS5nZXRVUkwoXCJzcGlubmVyLmdpZlwiKTtcclxuICAgICAgICBjb250YWluZXIuYXBwZW5kKGltZyk7XHJcbiAgICAgICAgdGhpcy5zcGlubmVySW1nID0gaW1nO1xyXG4gICAgfTtcclxuICAgIGNyZWF0ZVRvb2xBcmVhID0gKCkgPT4ge1xyXG4gICAgICAgIHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgIGRpdi5pZCA9IFwidG9vbEFyZWFEaXZcIjtcclxuICAgICAgICBkaXYuY2xhc3NOYW1lID0gXCJhcmVhXCI7XHJcbiAgICAgICAgdGhpcy5jaGFydEVsZW1lbnQuYXBwZW5kKGRpdik7XHJcbiAgICAgICAgLy9cclxuICAgICAgICB0aGlzLmNyZWF0ZURyYXdMaW5lQnV0dG9uKGRpdik7XHJcbiAgICAgICAgdGhpcy5jcmVhdGVEcmF3TWFya2VyQnV0dG9uKGRpdik7XHJcbiAgICAgICAgdGhpcy5jcmVhdGVEcmF3UnVsZXJCdXR0b24oZGl2KTtcclxuICAgICAgICB0aGlzLmNyZWF0ZURyYXdBbGVydEJ1dHRvbihkaXYpO1xyXG4gICAgfTtcclxuICAgIGNyZWF0ZURyYXdMaW5lQnV0dG9uID0gY29udGFpbmVyID0+IHtcclxuICAgICAgICB2YXIgYnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICBidXR0b24uaWQgPSBcImRyYXdMaW5lQnV0dG9uXCI7XHJcbiAgICAgICAgYnV0dG9uLmNsYXNzTmFtZSA9IFwiY29tbWFuZCBmYSBmYS1taW51c1wiO1xyXG4gICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkID0gZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwic2VsZWN0ZWRcIik7XHJcbiAgICAgICAgICAgIGRvY3VtZW50XHJcbiAgICAgICAgICAgICAgICAucXVlcnlTZWxlY3RvckFsbChcIiN0b29sQXJlYURpdiA+IC5jb21tYW5kXCIpXHJcbiAgICAgICAgICAgICAgICAuZm9yRWFjaChlbCA9PiBlbC5jbGFzc0xpc3QucmVtb3ZlKFwic2VsZWN0ZWRcIikpO1xyXG4gICAgICAgICAgICBpZiAoIXNlbGVjdGVkKSBlLnRhcmdldC5jbGFzc0xpc3QuYWRkKFwic2VsZWN0ZWRcIik7XHJcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjb250ZXh0bWVudVwiLCBlID0+IHtcclxuICAgICAgICAgICAgdGhpcy5yZW1vdmVUb29sTGluZXMoKTtcclxuICAgICAgICAgICAgZS50YXJnZXQuY2xhc3NMaXN0LnJlbW92ZShcInNlbGVjdGVkXCIpO1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZChidXR0b24pO1xyXG4gICAgICAgIHRoaXMuZHJhd0xpbmVCdXR0b24gPSBidXR0b247XHJcbiAgICB9O1xyXG4gICAgY3JlYXRlRHJhd01hcmtlckJ1dHRvbiA9IGNvbnRhaW5lciA9PiB7XHJcbiAgICAgICAgdmFyIGJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICAgYnV0dG9uLmlkID0gXCJkcmF3TWFya2VyQnV0dG9uXCI7XHJcbiAgICAgICAgYnV0dG9uLmNsYXNzTmFtZSA9IFwiY29tbWFuZCBmYSBmYS1tYXAtbWFya2VyXCI7XHJcbiAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBlID0+IHtcclxuICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWQgPSBlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJzZWxlY3RlZFwiKTtcclxuICAgICAgICAgICAgZG9jdW1lbnRcclxuICAgICAgICAgICAgICAgIC5xdWVyeVNlbGVjdG9yQWxsKFwiI3Rvb2xBcmVhRGl2ID4gLmNvbW1hbmRcIilcclxuICAgICAgICAgICAgICAgIC5mb3JFYWNoKGVsID0+IGVsLmNsYXNzTGlzdC5yZW1vdmUoXCJzZWxlY3RlZFwiKSk7XHJcbiAgICAgICAgICAgIGlmICghc2VsZWN0ZWQpIGUudGFyZ2V0LmNsYXNzTGlzdC5hZGQoXCJzZWxlY3RlZFwiKTtcclxuICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNvbnRleHRtZW51XCIsIGUgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnJlbW92ZU1hcmtlcnMoKTtcclxuICAgICAgICAgICAgZS50YXJnZXQuY2xhc3NMaXN0LnJlbW92ZShcInNlbGVjdGVkXCIpO1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZChidXR0b24pO1xyXG4gICAgICAgIHRoaXMuZHJhd01hcmtlckJ1dHRvbiA9IGJ1dHRvbjtcclxuICAgIH07XHJcbiAgICBjcmVhdGVEcmF3UnVsZXJCdXR0b24gPSBjb250YWluZXIgPT4ge1xyXG4gICAgICAgIHZhciBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgIGJ1dHRvbi5pZCA9IFwiZHJhd1J1bGVyQnV0dG9uXCI7XHJcbiAgICAgICAgYnV0dG9uLmNsYXNzTmFtZSA9IFwiY29tbWFuZCBmYSBmYS1hcnJvd3MtdlwiO1xyXG4gICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkID0gZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwic2VsZWN0ZWRcIik7XHJcbiAgICAgICAgICAgIGRvY3VtZW50XHJcbiAgICAgICAgICAgICAgICAucXVlcnlTZWxlY3RvckFsbChcIiN0b29sQXJlYURpdiA+IC5jb21tYW5kXCIpXHJcbiAgICAgICAgICAgICAgICAuZm9yRWFjaChlbCA9PiBlbC5jbGFzc0xpc3QucmVtb3ZlKFwic2VsZWN0ZWRcIikpO1xyXG4gICAgICAgICAgICBpZiAoIXNlbGVjdGVkKSB7XHJcbiAgICAgICAgICAgICAgICBlLnRhcmdldC5jbGFzc0xpc3QuYWRkKFwic2VsZWN0ZWRcIik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZVJ1bGVyKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNvbnRleHRtZW51XCIsIGUgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnJlbW92ZVJ1bGVyKCk7XHJcbiAgICAgICAgICAgIGUudGFyZ2V0LmNsYXNzTGlzdC5yZW1vdmUoXCJzZWxlY3RlZFwiKTtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGNvbnRhaW5lci5hcHBlbmQoYnV0dG9uKTtcclxuICAgICAgICB0aGlzLmRyYXdSdWxlckJ1dHRvbiA9IGJ1dHRvbjtcclxuICAgIH07XHJcbiAgICBjcmVhdGVEcmF3QWxlcnRCdXR0b24gPSBjb250YWluZXIgPT4ge1xyXG4gICAgICAgIHZhciBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgIGJ1dHRvbi5pZCA9IFwiZHJhd0FsZXJ0QnV0dG9uXCI7XHJcbiAgICAgICAgYnV0dG9uLmNsYXNzTmFtZSA9IFwiY29tbWFuZCBmYSBmYS1iZWxsLW9cIjtcclxuICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGUgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBzZWxlY3RlZCA9IGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcInNlbGVjdGVkXCIpO1xyXG4gICAgICAgICAgICBkb2N1bWVudFxyXG4gICAgICAgICAgICAgICAgLnF1ZXJ5U2VsZWN0b3JBbGwoXCIjdG9vbEFyZWFEaXYgPiAuY29tbWFuZFwiKVxyXG4gICAgICAgICAgICAgICAgLmZvckVhY2goZWwgPT4gZWwuY2xhc3NMaXN0LnJlbW92ZShcInNlbGVjdGVkXCIpKTtcclxuICAgICAgICAgICAgaWYgKCFzZWxlY3RlZCkgZS50YXJnZXQuY2xhc3NMaXN0LmFkZChcInNlbGVjdGVkXCIpO1xyXG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY29udGV4dG1lbnVcIiwgZSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlQWxlcnRzKCk7XHJcbiAgICAgICAgICAgIGUudGFyZ2V0LmNsYXNzTGlzdC5yZW1vdmUoXCJzZWxlY3RlZFwiKTtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGNvbnRhaW5lci5hcHBlbmQoYnV0dG9uKTtcclxuICAgICAgICB0aGlzLmRyYXdBbGVydEJ1dHRvbiA9IGJ1dHRvbjtcclxuICAgIH07XHJcbiAgICBjcmVhdGVMZWdlbmRBcmVhID0gKCkgPT4ge1xyXG4gICAgICAgIHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgIGRpdi5pZCA9IFwibGVnZW5kQXJlYURpdlwiO1xyXG4gICAgICAgIHRoaXMuY2hhcnRFbGVtZW50LmFwcGVuZChkaXYpO1xyXG4gICAgICAgIC8vXHJcbiAgICAgICAgdGhpcy5jcmVhdGVQcmljZUxlZ2VuZFAoZGl2KTtcclxuICAgICAgICB0aGlzLmNyZWF0ZVNoYXJrTGVnZW5kUChkaXYpO1xyXG4gICAgfTtcclxuICAgIGNyZWF0ZVByaWNlTGVnZW5kUCA9IGNvbnRhaW5lciA9PiB7XHJcbiAgICAgICAgdmFyIHAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcclxuICAgICAgICBwLmlkID0gXCJwcmljZUxlZ2VuZFBcIjtcclxuICAgICAgICBjb250YWluZXIuYXBwZW5kKHApO1xyXG4gICAgICAgIHRoaXMucHJpY2VMZWdlbmRQID0gcDtcclxuICAgIH07XHJcbiAgICBjcmVhdGVTaGFya0xlZ2VuZFAgPSBjb250YWluZXIgPT4ge1xyXG4gICAgICAgIC8vXHJcbiAgICAgICAgdmFyIHAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcclxuICAgICAgICBwLmlkID0gXCJzaGFya0xlZ2VuZFBcIjtcclxuICAgICAgICBjb250YWluZXIuYXBwZW5kKHApO1xyXG4gICAgICAgIHRoaXMuc2hhcmtMZWdlbmRQID0gcDtcclxuICAgIH07XHJcbiAgICBjcmVhdGVGcmVlQXJlYSA9ICgpID0+IHtcclxuICAgICAgICB2YXIgY29udGFpbmVyID0gdGhpcy5jaGFydEVsZW1lbnQ7XHJcbiAgICAgICAgdGhpcy5jcmVhdGVDYW5jZWxPcmRlckJ1dHRvbihjb250YWluZXIpO1xyXG4gICAgICAgIHRoaXMuY3JlYXRlRW50cnlPcmRlckJ1dHRvbihjb250YWluZXIpO1xyXG4gICAgICAgIHRoaXMuY3JlYXRlVHBzbE9yZGVyQnV0dG9uKGNvbnRhaW5lcik7XHJcbiAgICAgICAgdGhpcy5jcmVhdGVTY3JvbGxCdXR0b24oY29udGFpbmVyKTtcclxuICAgIH07XHJcbiAgICBjcmVhdGVDYW5jZWxPcmRlckJ1dHRvbiA9IGNvbnRhaW5lciA9PiB7XHJcbiAgICAgICAgdmFyIGJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XHJcbiAgICAgICAgYnV0dG9uLmlkID0gXCJjYW5jZWxPcmRlckJ1dHRvblwiO1xyXG4gICAgICAgIGJ1dHRvbi5pbm5lclRleHQgPSBcIlhcIjtcclxuICAgICAgICBidXR0b24uc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmNsb3NlUG9zaXRpb24oKTtcclxuICAgICAgICAgICAgdGhpcy5jYW5jZWxPcmRlcigpO1xyXG4gICAgICAgICAgICB0aGlzLnRvZ2dsZUNhbmNlbE9yZGVyQnV0dG9uKGZhbHNlKTtcclxuICAgICAgICAgICAgdGhpcy5yZW1vdmVPcmRlckxpbmUoXCJlbnRyeVwiKTtcclxuICAgICAgICAgICAgdGhpcy5yZW1vdmVPcmRlckxpbmUoXCJ0cFwiKTtcclxuICAgICAgICAgICAgdGhpcy5yZW1vdmVPcmRlckxpbmUoXCJzbFwiKTtcclxuICAgICAgICAgICAgdGhpcy5sb2NhbERCLmNsZWFyKFwib3JkZXJcIik7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZChidXR0b24pO1xyXG4gICAgICAgIHRoaXMuY2FuY2VsT3JkZXJCdXR0b24gPSBidXR0b247XHJcbiAgICB9O1xyXG4gICAgY3JlYXRlRW50cnlPcmRlckJ1dHRvbiA9IGNvbnRhaW5lciA9PiB7XHJcbiAgICAgICAgdmFyIGJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XHJcbiAgICAgICAgYnV0dG9uLmlkID0gXCJlbnRyeU9yZGVyQnV0dG9uXCI7XHJcbiAgICAgICAgYnV0dG9uLmlubmVyVGV4dCA9IFwiRW50cnlcIjtcclxuICAgICAgICBidXR0b24uc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLm9yZGVyRW50cnlQcmljZSh0aGlzLm9yZGVyKTtcclxuICAgICAgICAgICAgdGhpcy5kcmF3T3JkZXJMaW5lKFwiZW50cnlcIik7XHJcbiAgICAgICAgICAgIHRoaXMudG9nZ2xlQ2FuY2VsT3JkZXJCdXR0b24odHJ1ZSk7XHJcbiAgICAgICAgICAgIHRoaXMuaGlkZU9yZGVyQnV0dG9uKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZChidXR0b24pO1xyXG4gICAgICAgIHRoaXMuZW50cnlPcmRlckJ1dHRvbiA9IGJ1dHRvbjtcclxuICAgIH07XHJcbiAgICBjcmVhdGVUcHNsT3JkZXJCdXR0b24gPSBjb250YWluZXIgPT4ge1xyXG4gICAgICAgIHZhciBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xyXG4gICAgICAgIGJ1dHRvbi5pZCA9IFwidHBzbE9yZGVyQnV0dG9uXCI7XHJcbiAgICAgICAgYnV0dG9uLmlubmVyVGV4dCA9IFwiVFAvU0xcIjtcclxuICAgICAgICBidXR0b24uc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLm9yZGVyVHBQcmljZSh0aGlzLm9yZGVyLCB0cnVlKTtcclxuICAgICAgICAgICAgdGhpcy5kcmF3T3JkZXJMaW5lKFwidHBcIik7XHJcbiAgICAgICAgICAgIHRoaXMub3JkZXJTbFByaWNlKHRoaXMub3JkZXIsIHRydWUpO1xyXG4gICAgICAgICAgICB0aGlzLmRyYXdPcmRlckxpbmUoXCJzbFwiKTtcclxuICAgICAgICAgICAgdGhpcy5oaWRlT3JkZXJCdXR0b24oKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBjb250YWluZXIuYXBwZW5kKGJ1dHRvbik7XHJcbiAgICAgICAgdGhpcy50cHNsT3JkZXJCdXR0b24gPSBidXR0b247XHJcbiAgICB9O1xyXG4gICAgY3JlYXRlU2Nyb2xsQnV0dG9uID0gY29udGFpbmVyID0+IHtcclxuICAgICAgICB2YXIgYnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICBidXR0b24uaWQgPSBcInNjcm9sbEJ1dHRvblwiO1xyXG4gICAgICAgIGJ1dHRvbi5jbGFzc05hbWUgPSBcImNvbW1hbmQgZmEgZmEtYW5nbGUtZG91YmxlLXJpZ2h0XCI7XHJcbiAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PlxyXG4gICAgICAgICAgICB0aGlzLmNoYXJ0LnRpbWVTY2FsZSgpLnNjcm9sbFRvUmVhbFRpbWUoKVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZChidXR0b24pO1xyXG4gICAgfTtcclxuICAgIGNoYXJ0Q29udGV4dG1lbnUgPSAoZSwgc2VsZikgPT4ge1xyXG4gICAgICAgIHNlbGYuc2hvd09yZGVyQnV0dG9uKCk7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgfTtcclxuICAgIGNoYXJ0Q2xpY2sgPSAoZSwgc2VsZikgPT4ge1xyXG4gICAgICAgIHNlbGYuaGlkZU9yZGVyQnV0dG9uKCk7XHJcbiAgICAgICAgaWYgKHNlbGYuZHJhd0xpbmVCdXR0b24uY2xhc3NMaXN0LmNvbnRhaW5zKFwic2VsZWN0ZWRcIikpXHJcbiAgICAgICAgICAgIHNlbGYuZHJhd1Rvb2xMaW5lKCk7XHJcbiAgICAgICAgZWxzZSBpZiAoc2VsZi5kcmF3TWFya2VyQnV0dG9uLmNsYXNzTGlzdC5jb250YWlucyhcInNlbGVjdGVkXCIpKVxyXG4gICAgICAgICAgICBzZWxmLmRyYXdNYXJrZXIoKTtcclxuICAgICAgICBlbHNlIGlmIChzZWxmLmRyYXdSdWxlckJ1dHRvbi5jbGFzc0xpc3QuY29udGFpbnMoXCJzZWxlY3RlZFwiKSlcclxuICAgICAgICAgICAgc2VsZi5kcmF3UnVsZXIoKTtcclxuICAgICAgICBlbHNlIGlmIChzZWxmLmRyYXdBbGVydEJ1dHRvbi5jbGFzc0xpc3QuY29udGFpbnMoXCJzZWxlY3RlZFwiKSlcclxuICAgICAgICAgICAgc2VsZi5kcmF3QWxlcnQoKTtcclxuICAgIH07XHJcbiAgICBjcm9zc2hhaXJNb3ZlID0gKGUsIHNlbGYpID0+IHtcclxuICAgICAgICBpZiAoZS50aW1lKSB7XHJcbiAgICAgICAgICAgIHNlbGYudXBkYXRlTGVnZW5kKFxyXG4gICAgICAgICAgICAgICAgZS5zZXJpZXNQcmljZXMuZ2V0KHNlbGYuc2VyaWVzLnByaWNlKSxcclxuICAgICAgICAgICAgICAgIGUuc2VyaWVzUHJpY2VzLmdldChzZWxmLnNlcmllcy5zaGFyaylcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgc2VsZi5oYXNDcm9zc2hhaXIgPSB0cnVlO1xyXG4gICAgICAgICAgICBzZWxmLmNyb3NzaGFpci50aW1lID0gZS50aW1lO1xyXG4gICAgICAgICAgICBzZWxmLmNyb3NzaGFpci5wcmljZSA9IGUuc2VyaWVzUHJpY2VzLmdldChzZWxmLnNlcmllcy5wcmljZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgc2VsZi5oYXNDcm9zc2hhaXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKCFzZWxmLmlzTW9iaWxlKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmNyb3NzaGFpci50aW1lID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIHNlbGYuY3Jvc3NoYWlyLnByaWNlID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZS5wb2ludCAhPSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgc2VsZi5jcm9zc2hhaXIueCA9IGUucG9pbnQueDtcclxuICAgICAgICAgICAgc2VsZi5jcm9zc2hhaXIueSA9IGUucG9pbnQueTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcHJpY2VMaW5lRHJhZyA9IChlLCBzZWxmKSA9PiB7XHJcbiAgICAgICAgdmFyIGxpbmUgPSBlLmN1c3RvbVByaWNlTGluZS5vcHRpb25zKCk7XHJcbiAgICAgICAgbGluZS5wcmljZSA9IHNlbGYuZm9ybWF0UHJpY2UobGluZS5wcmljZSk7XHJcbiAgICAgICAgY29uc3Qgb2xkUHJpY2UgPSArZS5mcm9tUHJpY2VTdHJpbmc7XHJcbiAgICAgICAgY29uc3QgbmV3UHJpY2UgPSBsaW5lLnByaWNlO1xyXG4gICAgICAgIHN3aXRjaCAobGluZS5saW5lVHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIFwib3JkZXJcIjpcclxuICAgICAgICAgICAgICAgIGlmIChuZXdQcmljZSAhPSBvbGRQcmljZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpc0NoYW5nZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwb3NpdGlvbiA9IHNlbGYuZ2V0T3JkZXJQb3NpdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChsaW5lLmtpbmQgPT0gXCJlbnRyeVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcG9zaXRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzQ2hhbmdlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLm9yZGVyW2xpbmUua2luZF0ucHJpY2UgPSBuZXdQcmljZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYub3JkZXJFbnRyeVByaWNlKHNlbGYub3JkZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5kcmF3T3JkZXJMaW5lKGxpbmUua2luZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZi5vcmRlci5zaWRlICogcG9zaXRpb24gPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0NoYW5nZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5vcmRlcltsaW5lLmtpbmRdLnByaWNlID0gbmV3UHJpY2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGluZS5raW5kID09IFwidHBcIilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLm9yZGVyVHBQcmljZShzZWxmLm9yZGVyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Ugc2VsZi5vcmRlclNsUHJpY2Uoc2VsZi5vcmRlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcmF3T3JkZXJMaW5lKGxpbmUua2luZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzQ2hhbmdlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLm9yZGVyW2xpbmUua2luZF0ubGluZS5hcHBseU9wdGlvbnMoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpY2U6IG9sZFByaWNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLm5vdGlmaWVyLnNob3coXCJ3YXJuaW5nXCIsIFwiS2jDtG5nIMSRxrDhu6NjIHRoYXkgxJHhu5VpLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcImxpbmVcIjpcclxuICAgICAgICAgICAgICAgIHNlbGYubG9jYWxEQi5zZXQoXCJsaW5lXCIsIHsgcHJpY2U6IG9sZFByaWNlLCByZW1vdmVkOiB0cnVlIH0pO1xyXG4gICAgICAgICAgICAgICAgc2VsZi5sb2NhbERCLnNldChcImxpbmVcIiwgbGluZSk7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmRyYXdMaW5lQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoXCJzZWxlY3RlZFwiKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwicnVsZXJcIjpcclxuICAgICAgICAgICAgICAgIGlmIChsaW5lLnBvaW50ID09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLmxvY2FsREIuc2V0KFwicnVsZXJcIiwgbGluZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGYucnVsZXIucG9pbnQgPT0gMikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkaXN0YW5jZSA9ICtzZWxmLnJ1bGVyLmVuZC5vcHRpb25zKCkudGl0bGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVuZFByaWNlID0gKyhuZXdQcmljZSArIGRpc3RhbmNlKS50b0ZpeGVkKDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnJ1bGVyLmVuZC5hcHBseU9wdGlvbnMoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpY2U6IGVuZFByaWNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmxvY2FsREIuc2V0KFwicnVsZXJcIiwgc2VsZi5ydWxlci5lbmQub3B0aW9ucygpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYubG9jYWxEQi5zZXQoXCJydWxlclwiLCBsaW5lKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdGFydFByaWNlID0gK3NlbGYucnVsZXIuc3RhcnQub3B0aW9ucygpLnByaWNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYucnVsZXIuZW5kLmFwcGx5T3B0aW9ucyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAobmV3UHJpY2UgLSBzdGFydFByaWNlKS50b0ZpeGVkKDEpXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcImFsZXJ0XCI6XHJcbiAgICAgICAgICAgICAgICBzZWxmLmF1ZGlvLnBhdXNlKCk7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmxvY2FsREIuc2V0KFwiYWxlcnRcIiwgeyBwcmljZTogb2xkUHJpY2UsIHJlbW92ZWQ6IHRydWUgfSk7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmxvY2FsREIuc2V0KFwiYWxlcnRcIiwgbGluZSk7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmRyYXdBbGVydEJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKFwic2VsZWN0ZWRcIik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLy9cclxuICAgIHNob3dPcmRlckJ1dHRvbiA9ICgpID0+IHtcclxuICAgICAgICBpZiAodGhpcy5nZXRPcmRlclBvc2l0aW9uKCkpIHtcclxuICAgICAgICAgICAgLy8gaWYgKHRoaXMub3JkZXIuZW50cnkuaGFzT3duUHJvcGVydHkoXCJsaW5lXCIpKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5vcmRlci50cC5oYXNPd25Qcm9wZXJ0eShcImxpbmVcIikpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudHBzbE9yZGVyQnV0dG9uLnN0eWxlLmxlZnQgPVxyXG4gICAgICAgICAgICAgICAgICAgICsodGhpcy5jcm9zc2hhaXIueCArIDEwKSArIFwicHhcIjtcclxuICAgICAgICAgICAgICAgIHRoaXMudHBzbE9yZGVyQnV0dG9uLnN0eWxlLnRvcCA9XHJcbiAgICAgICAgICAgICAgICAgICAgKyh0aGlzLmNyb3NzaGFpci55ICsgMTApICsgXCJweFwiO1xyXG4gICAgICAgICAgICAgICAgdGhpcy50cHNsT3JkZXJCdXR0b24uc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5vcmRlci5lbnRyeS5oYXNPd25Qcm9wZXJ0eShcImxpbmVcIikpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHByaWNlID0gdGhpcy5jb29yZGluYXRlVG9QcmljZSh0aGlzLmNyb3NzaGFpci55KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHNpZGUgPVxyXG4gICAgICAgICAgICAgICAgICAgIHByaWNlID49IHRoaXMuZGF0YS5wcmljZS5zbGljZSgtMSlbMF0udmFsdWUgPyAxIDogLTE7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9yZGVyLmVudHJ5LnByaWNlID0gcHJpY2U7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9yZGVyLnNpZGUgPSBzaWRlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lbnRyeU9yZGVyQnV0dG9uLnN0eWxlLmxlZnQgPVxyXG4gICAgICAgICAgICAgICAgICAgICsodGhpcy5jcm9zc2hhaXIueCArIDEwKSArIFwicHhcIjtcclxuICAgICAgICAgICAgICAgIHRoaXMuZW50cnlPcmRlckJ1dHRvbi5zdHlsZS50b3AgPVxyXG4gICAgICAgICAgICAgICAgICAgICsodGhpcy5jcm9zc2hhaXIueSArIDEwKSArIFwicHhcIjtcclxuICAgICAgICAgICAgICAgIHRoaXMuZW50cnlPcmRlckJ1dHRvbi5zdHlsZS5iYWNrZ3JvdW5kID1cclxuICAgICAgICAgICAgICAgICAgICBzaWRlID4gMCA/IFwiZ3JlZW5cIiA6IFwicmVkXCI7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVudHJ5T3JkZXJCdXR0b24uaW5uZXJUZXh0ID0gYCR7XHJcbiAgICAgICAgICAgICAgICAgICAgc2lkZSA+IDAgPyBcIkxvbmdcIiA6IFwiU2hvcnRcIlxyXG4gICAgICAgICAgICAgICAgfSAke3ByaWNlfWA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVudHJ5T3JkZXJCdXR0b24uc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBoaWRlT3JkZXJCdXR0b24gPSAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5lbnRyeU9yZGVyQnV0dG9uLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgICAgICB0aGlzLnRwc2xPcmRlckJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICB9O1xyXG4gICAgLy9cclxuICAgIGRyYXdPcmRlckxpbmUgPSBraW5kID0+IHtcclxuICAgICAgICB2YXIgY29sb3IsIHRpdGxlO1xyXG4gICAgICAgIHN3aXRjaCAoa2luZCkge1xyXG4gICAgICAgICAgICBjYXNlIFwiZW50cnlcIjpcclxuICAgICAgICAgICAgICAgIGNvbG9yID0gXCJzaWx2ZXJcIjtcclxuICAgICAgICAgICAgICAgIHRpdGxlID0gdGhpcy5vcmRlci5zaWRlID4gMCA/IFwiTG9uZ1wiIDogXCJTaG9ydFwiO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJ0cFwiOlxyXG4gICAgICAgICAgICAgICAgY29sb3IgPSBcImxpbWVcIjtcclxuICAgICAgICAgICAgICAgIHRpdGxlID0gTWF0aC5hYnMoXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vcmRlci50cC5wcmljZSAtIHRoaXMub3JkZXIuZW50cnkucHJpY2VcclxuICAgICAgICAgICAgICAgICkudG9GaXhlZCgxKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwic2xcIjpcclxuICAgICAgICAgICAgICAgIGNvbG9yID0gXCJyZWRcIjtcclxuICAgICAgICAgICAgICAgIHRpdGxlID0gTWF0aC5hYnMoXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vcmRlci5zbC5wcmljZSAtIHRoaXMub3JkZXIuZW50cnkucHJpY2VcclxuICAgICAgICAgICAgICAgICkudG9GaXhlZCgxKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5vcmRlcltraW5kXS5oYXNPd25Qcm9wZXJ0eShcImxpbmVcIikpIHtcclxuICAgICAgICAgICAgdGhpcy5vcmRlcltraW5kXS5saW5lLmFwcGx5T3B0aW9ucyh7XHJcbiAgICAgICAgICAgICAgICBwcmljZTogdGhpcy5vcmRlcltraW5kXS5wcmljZSxcclxuICAgICAgICAgICAgICAgIHRpdGxlOiB0aXRsZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLm9yZGVyW2tpbmRdLmxpbmUgPSB0aGlzLnNlcmllcy5wcmljZS5jcmVhdGVQcmljZUxpbmUoe1xyXG4gICAgICAgICAgICAgICAgbGluZVR5cGU6IFwib3JkZXJcIixcclxuICAgICAgICAgICAgICAgIGtpbmQ6IGtpbmQsXHJcbiAgICAgICAgICAgICAgICBwcmljZTogdGhpcy5vcmRlcltraW5kXS5wcmljZSxcclxuICAgICAgICAgICAgICAgIGNvbG9yOiBjb2xvcixcclxuICAgICAgICAgICAgICAgIGxpbmVXaWR0aDogMSxcclxuICAgICAgICAgICAgICAgIGxpbmVTdHlsZTogTGlnaHR3ZWlnaHRDaGFydHMuTGluZVN0eWxlLlNvbGlkLFxyXG4gICAgICAgICAgICAgICAgdGl0bGU6IHRpdGxlLFxyXG4gICAgICAgICAgICAgICAgZHJhZ2dhYmxlOiB0cnVlXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmxvY2FsREIuc2V0KFwib3JkZXJcIiwge1xyXG4gICAgICAgICAgICBraW5kOiBraW5kLFxyXG4gICAgICAgICAgICBwcmljZTogK3RoaXMub3JkZXJba2luZF0ucHJpY2UsXHJcbiAgICAgICAgICAgIHNpZGU6IHRoaXMub3JkZXIuc2lkZVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIHJlbW92ZU9yZGVyTGluZSA9IGtpbmQgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLm9yZGVyW2tpbmRdLmhhc093blByb3BlcnR5KFwibGluZVwiKSkge1xyXG4gICAgICAgICAgICB0aGlzLnNlcmllcy5wcmljZS5yZW1vdmVQcmljZUxpbmUodGhpcy5vcmRlcltraW5kXS5saW5lKTtcclxuICAgICAgICAgICAgZGVsZXRlIHRoaXMub3JkZXJba2luZF0ubGluZTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLy9cclxuICAgIGRyYXdUb29sTGluZSA9ICgpID0+IHtcclxuICAgICAgICBjb25zdCBUWVBFID0gXCJsaW5lXCI7XHJcbiAgICAgICAgY29uc3QgcHJpY2UgPSB0aGlzLmZvcm1hdFByaWNlKFxyXG4gICAgICAgICAgICB0aGlzLmNvb3JkaW5hdGVUb1ByaWNlKHRoaXMuY3Jvc3NoYWlyLnkpXHJcbiAgICAgICAgKTtcclxuICAgICAgICBjb25zdCBleGlzdEluZGV4ID0gdGhpcy5saW5lcy5maW5kSW5kZXgobGluZSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IG9wcyA9IGxpbmUub3B0aW9ucygpO1xyXG4gICAgICAgICAgICByZXR1cm4gKG9wcy50eXBlID0gVFlQRSAmJiArb3BzLnByaWNlID09IHByaWNlKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAoZXhpc3RJbmRleCAhPSAtMSkge1xyXG4gICAgICAgICAgICBjb25zdCByZW1vdmVMaW5lID0gdGhpcy5saW5lcy5zcGxpY2UoZXhpc3RJbmRleCwgMSk7XHJcbiAgICAgICAgICAgIHRoaXMuc2VyaWVzLnByaWNlLnJlbW92ZVByaWNlTGluZShyZW1vdmVMaW5lWzBdKTtcclxuICAgICAgICAgICAgdGhpcy5sb2NhbERCLnNldChcImxpbmVcIiwgeyBwcmljZTogcHJpY2UsIHJlbW92ZWQ6IHRydWUgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgICAgIGxpbmVUeXBlOiBUWVBFLFxyXG4gICAgICAgICAgICAgICAgcHJpY2U6IHByaWNlLFxyXG4gICAgICAgICAgICAgICAgY29sb3I6IFwiYXF1YVwiLFxyXG4gICAgICAgICAgICAgICAgbGluZVdpZHRoOiAxLFxyXG4gICAgICAgICAgICAgICAgbGluZVN0eWxlOiBMaWdodHdlaWdodENoYXJ0cy5MaW5lU3R5bGUuU29saWQsXHJcbiAgICAgICAgICAgICAgICBkcmFnZ2FibGU6IHRydWVcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgdGhpcy5saW5lcy5wdXNoKHRoaXMuc2VyaWVzLnByaWNlLmNyZWF0ZVByaWNlTGluZShvcHRpb25zKSk7XHJcbiAgICAgICAgICAgIHRoaXMubG9jYWxEQi5zZXQoXCJsaW5lXCIsIG9wdGlvbnMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmRyYXdMaW5lQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoXCJzZWxlY3RlZFwiKTtcclxuICAgIH07XHJcbiAgICByZW1vdmVUb29sTGluZXMgPSAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5saW5lcy5mb3JFYWNoKGxpbmUgPT4gdGhpcy5zZXJpZXMucHJpY2UucmVtb3ZlUHJpY2VMaW5lKGxpbmUpKTtcclxuICAgICAgICB0aGlzLmxpbmVzID0gW107XHJcbiAgICAgICAgdGhpcy5sb2NhbERCLmNsZWFyKFwibGluZVwiKTtcclxuICAgIH07XHJcbiAgICAvL1xyXG4gICAgZHJhd01hcmtlciA9ICgpID0+IHtcclxuICAgICAgICBpZiAodGhpcy5jcm9zc2hhaXIudGltZSkge1xyXG4gICAgICAgICAgICBjb25zdCBtYXJrZXJzID0gdGhpcy5tYXJrZXJzLmZpbHRlcihcclxuICAgICAgICAgICAgICAgIGl0ZW0gPT4gaXRlbS50aW1lICE9IHRoaXMuY3Jvc3NoYWlyLnRpbWVcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgaWYgKG1hcmtlcnMubGVuZ3RoID09IHRoaXMubWFya2Vycy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGRpciA9XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jcm9zc2hhaXIueSA+PVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VyaWVzLnByaWNlLnByaWNlVG9Db29yZGluYXRlKHRoaXMuY3Jvc3NoYWlyLnByaWNlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubWFya2Vycy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICB0aW1lOiB0aGlzLmNyb3NzaGFpci50aW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBkaXIgPyBcImJlbG93QmFyXCIgOiBcImFib3ZlQmFyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6IGRpciA/IFwibGltZVwiIDogXCJyZWRcIixcclxuICAgICAgICAgICAgICAgICAgICBzaGFwZTogZGlyID8gXCJhcnJvd1VwXCIgOiBcImFycm93RG93blwiXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSBlbHNlIHRoaXMubWFya2VycyA9IG1hcmtlcnM7XHJcbiAgICAgICAgICAgIHRoaXMuc2VyaWVzLnByaWNlLnNldE1hcmtlcnModGhpcy5tYXJrZXJzKTtcclxuICAgICAgICAgICAgdGhpcy5sb2NhbERCXHJcbiAgICAgICAgICAgICAgICAuY2xlYXIoXCJtYXJrZXJcIilcclxuICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IHRoaXMubG9jYWxEQi5zZXQoXCJtYXJrZXJcIiwgdGhpcy5tYXJrZXJzKSk7XHJcbiAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgIHRoaXMuZHJhd01hcmtlckJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKFwic2VsZWN0ZWRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJlbW92ZU1hcmtlcnMgPSAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5tYXJrZXJzID0gW107XHJcbiAgICAgICAgdGhpcy5zZXJpZXMucHJpY2Uuc2V0TWFya2VycyhbXSk7XHJcbiAgICAgICAgdGhpcy5sb2NhbERCLmNsZWFyKFwibWFya2VyXCIpO1xyXG4gICAgfTtcclxuICAgIC8vXHJcbiAgICBkcmF3UnVsZXIgPSAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgcHJpY2UgPSB0aGlzLmNvb3JkaW5hdGVUb1ByaWNlKHRoaXMuY3Jvc3NoYWlyLnkpO1xyXG4gICAgICAgIHZhciBvcHRpb25zID0ge1xyXG4gICAgICAgICAgICBsaW5lVHlwZTogXCJydWxlclwiLFxyXG4gICAgICAgICAgICBwcmljZTogcHJpY2UsXHJcbiAgICAgICAgICAgIGNvbG9yOiBcInllbGxvd1wiLFxyXG4gICAgICAgICAgICBsaW5lV2lkdGg6IDEsXHJcbiAgICAgICAgICAgIGxpbmVTdHlsZTogTGlnaHR3ZWlnaHRDaGFydHMuTGluZVN0eWxlLlNvbGlkLFxyXG4gICAgICAgICAgICBkcmFnZ2FibGU6IHRydWVcclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmICh0aGlzLnJ1bGVyLnBvaW50ID09IDApIHtcclxuICAgICAgICAgICAgY29uc3QgcG9pbnQgPSAxO1xyXG4gICAgICAgICAgICBvcHRpb25zLnBvaW50ID0gcG9pbnQ7XHJcbiAgICAgICAgICAgIG9wdGlvbnMudGl0bGUgPSBcIjBcIjtcclxuICAgICAgICAgICAgdGhpcy5ydWxlci5zdGFydCA9IHRoaXMuc2VyaWVzLnByaWNlLmNyZWF0ZVByaWNlTGluZShvcHRpb25zKTtcclxuICAgICAgICAgICAgdGhpcy5ydWxlci5wb2ludCA9IHBvaW50O1xyXG4gICAgICAgICAgICB0aGlzLmxvY2FsREIuc2V0KFwicnVsZXJcIiwgb3B0aW9ucyk7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnJ1bGVyLnBvaW50ID09IDEpIHtcclxuICAgICAgICAgICAgY29uc3Qgc3RhcnRQcmljZSA9ICt0aGlzLnJ1bGVyLnN0YXJ0Lm9wdGlvbnMoKS5wcmljZTtcclxuICAgICAgICAgICAgY29uc3QgcG9pbnQgPSAyO1xyXG4gICAgICAgICAgICBvcHRpb25zLnBvaW50ID0gcG9pbnQ7XHJcbiAgICAgICAgICAgIG9wdGlvbnMudGl0bGUgPSAocHJpY2UgLSBzdGFydFByaWNlKS50b0ZpeGVkKDEpO1xyXG4gICAgICAgICAgICB0aGlzLnJ1bGVyLmVuZCA9IHRoaXMuc2VyaWVzLnByaWNlLmNyZWF0ZVByaWNlTGluZShvcHRpb25zKTtcclxuICAgICAgICAgICAgdGhpcy5ydWxlci5wb2ludCA9IHBvaW50O1xyXG4gICAgICAgICAgICB0aGlzLmxvY2FsREIuc2V0KFwicnVsZXJcIiwgb3B0aW9ucyk7XHJcbiAgICAgICAgICAgIHRoaXMuZHJhd1J1bGVyQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoXCJzZWxlY3RlZFwiKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmVtb3ZlUnVsZXIgPSAoKSA9PiB7XHJcbiAgICAgICAgaWYgKHRoaXMucnVsZXIucG9pbnQgPiAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VyaWVzLnByaWNlLnJlbW92ZVByaWNlTGluZSh0aGlzLnJ1bGVyLnN0YXJ0KTtcclxuICAgICAgICAgICAgaWYgKHRoaXMucnVsZXIucG9pbnQgPiAxKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXJpZXMucHJpY2UucmVtb3ZlUHJpY2VMaW5lKHRoaXMucnVsZXIuZW5kKTtcclxuICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgdGhpcy5ydWxlciA9IHsgc3RhcnQ6IHt9LCBlbmQ6IHt9LCBwb2ludDogMCB9O1xyXG4gICAgICAgICAgICB0aGlzLmxvY2FsREIuY2xlYXIoXCJydWxlclwiKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLy9cclxuICAgIGRyYXdBbGVydCA9ICgpID0+IHtcclxuICAgICAgICBjb25zdCBUWVBFID0gXCJhbGVydFwiO1xyXG4gICAgICAgIGNvbnN0IHByaWNlID0gdGhpcy5mb3JtYXRQcmljZShcclxuICAgICAgICAgICAgdGhpcy5jb29yZGluYXRlVG9QcmljZSh0aGlzLmNyb3NzaGFpci55KVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgY29uc3QgZXhpc3RJbmRleCA9IHRoaXMuYWxlcnRzLmZpbmRJbmRleChsaW5lID0+IHtcclxuICAgICAgICAgICAgY29uc3Qgb3BzID0gbGluZS5vcHRpb25zKCk7XHJcbiAgICAgICAgICAgIHJldHVybiAob3BzLnR5cGUgPSBUWVBFICYmICtvcHMucHJpY2UgPT0gcHJpY2UpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmIChleGlzdEluZGV4ICE9IC0xKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlbW92ZUxpbmUgPSB0aGlzLmFsZXJ0cy5zcGxpY2UoZXhpc3RJbmRleCwgMSk7XHJcbiAgICAgICAgICAgIHRoaXMuc2VyaWVzLnByaWNlLnJlbW92ZVByaWNlTGluZShyZW1vdmVMaW5lWzBdKTtcclxuICAgICAgICAgICAgdGhpcy5sb2NhbERCLnNldChcImFsZXJ0XCIsIHsgcHJpY2U6IHByaWNlLCByZW1vdmVkOiB0cnVlIH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgICAgICBsaW5lVHlwZTogVFlQRSxcclxuICAgICAgICAgICAgICAgIHByaWNlOiBwcmljZSxcclxuICAgICAgICAgICAgICAgIHRpdGxlOlxyXG4gICAgICAgICAgICAgICAgICAgIHByaWNlID49IHRoaXMuZGF0YS5vcmlnaW5hbC5zbGljZSgtMSlbMF0ucHJpY2UgPyBcIj5cIiA6IFwiPFwiLFxyXG4gICAgICAgICAgICAgICAgY29sb3I6IFwiI0ZGMDBGRlwiLFxyXG4gICAgICAgICAgICAgICAgbGluZVdpZHRoOiAxLFxyXG4gICAgICAgICAgICAgICAgbGluZVN0eWxlOiBMaWdodHdlaWdodENoYXJ0cy5MaW5lU3R5bGUuU29saWQsXHJcbiAgICAgICAgICAgICAgICBkcmFnZ2FibGU6IHRydWVcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgdGhpcy5hbGVydHMucHVzaCh0aGlzLnNlcmllcy5wcmljZS5jcmVhdGVQcmljZUxpbmUob3B0aW9ucykpO1xyXG4gICAgICAgICAgICB0aGlzLmxvY2FsREIuc2V0KFwiYWxlcnRcIiwgb3B0aW9ucyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZHJhd0FsZXJ0QnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoXCJzZWxlY3RlZFwiKTtcclxuICAgICAgICB0aGlzLmF1ZGlvLnBhdXNlKCk7XHJcbiAgICB9O1xyXG4gICAgcmVtb3ZlQWxlcnRzID0gKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuYWxlcnRzLmZvckVhY2gobGluZSA9PiB0aGlzLnNlcmllcy5wcmljZS5yZW1vdmVQcmljZUxpbmUobGluZSkpO1xyXG4gICAgICAgIHRoaXMuYWxlcnRzID0gW107XHJcbiAgICAgICAgdGhpcy5sb2NhbERCLmNsZWFyKFwiYWxlcnRcIik7XHJcbiAgICAgICAgdGhpcy5hdWRpby5wYXVzZSgpO1xyXG4gICAgfTtcclxuICAgIC8vXHJcbiAgICB0b2dnbGVDYW5jZWxPcmRlckJ1dHRvbiA9IHZpc2libGUgPT4ge1xyXG4gICAgICAgIGlmICh2aXNpYmxlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2FuY2VsT3JkZXJCdXR0b24uc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcclxuICAgICAgICAgICAgdGhpcy5jYW5jZWxPcmRlckJ1dHRvbi5zdHlsZS5iYWNrZ3JvdW5kID1cclxuICAgICAgICAgICAgICAgIHRoaXMub3JkZXIuc2lkZSA+IDAgPyBcImdyZWVuXCIgOiBcInJlZFwiO1xyXG4gICAgICAgIH0gZWxzZSB0aGlzLmNhbmNlbE9yZGVyQnV0dG9uLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgIH07XHJcbiAgICAvL1xyXG4gICAgdXBkYXRlTGVnZW5kID0gKHByaWNlLCBzaGFyaykgPT4ge1xyXG4gICAgICAgIGlmICghIXByaWNlKSB0aGlzLnByaWNlTGVnZW5kUC5pbm5lclRleHQgPSBwcmljZTtcclxuICAgICAgICBpZiAoISFzaGFyaylcclxuICAgICAgICAgICAgdGhpcy5zaGFya0xlZ2VuZFAuaW5uZXJUZXh0ID0gc2hhcmsudG9Mb2NhbGVTdHJpbmcoXCJlbi1VU1wiKTtcclxuICAgIH07XHJcbiAgICBjb29yZGluYXRlVG9QcmljZSA9IHkgPT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmZvcm1hdFByaWNlKHRoaXMuc2VyaWVzLnByaWNlLmNvb3JkaW5hdGVUb1ByaWNlKHkpKTtcclxuICAgIH07XHJcbiAgICBmb3JtYXRQcmljZSA9IHByaWNlID0+IHtcclxuICAgICAgICByZXR1cm4gKygrcHJpY2UudG9GaXhlZCgxKSk7XHJcbiAgICB9O1xyXG4gICAgLy9cclxuICAgIGxvYWRDaGFydERhdGEgPSAoKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGFzeW5jIChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgdGhpcy50b2dnbGVTcGlubmVyKHRydWUpO1xyXG4gICAgICAgICAgICBjb25zdCBzdkRhdGEgPSBhd2FpdCB0aGlzLmdldFNlcnZlckRhdGEoKTtcclxuICAgICAgICAgICAgc3RhcnQ6IHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmhhc05ld0RhdGEgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGxjRGF0YSA9IGF3YWl0IHRoaXMubG9jYWxEQi5nZXQoXCJkYXRhXCIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaWRzID0gbmV3IFNldChzdkRhdGEubWFwKGQgPT4gZC50aW1lKSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gW1xyXG4gICAgICAgICAgICAgICAgICAgIC4uLnN2RGF0YSxcclxuICAgICAgICAgICAgICAgICAgICAuLi5sY0RhdGEuZmlsdGVyKGQgPT4gIWlkcy5oYXMoZC50aW1lKSlcclxuICAgICAgICAgICAgICAgIF0uc29ydCgoYSwgYikgPT4gYS50aW1lIC0gYi50aW1lKTtcclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiZGF0YVwiLCBkYXRhKTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmhhc05ld0RhdGEpIGNvbnRpbnVlIHN0YXJ0O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2NhbERCXHJcbiAgICAgICAgICAgICAgICAgICAgLmNsZWFyKFwiZGF0YVwiKVxyXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IHRoaXMubG9jYWxEQi5zZXQoXCJkYXRhXCIsIGRhdGEpKTtcclxuICAgICAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEgPSBkYXRhLnJlZHVjZShcclxuICAgICAgICAgICAgICAgICAgICAociwgaXRlbSkgPT4gdGhpcy5jcmVhdGVDaGFydERhdGEociwgaXRlbSksXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbDogW10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByaWNlOiBbXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2hhcms6IFtdXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlcmllcy5wcmljZS5zZXREYXRhKHRoaXMuZGF0YS5wcmljZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlcmllcy5zaGFyay5zZXREYXRhKHRoaXMuZGF0YS5zaGFyayk7XHJcbiAgICAgICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmhhc0Nyb3NzaGFpciAmJiAhIXRoaXMuZGF0YS5vcmlnaW5hbC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUxlZ2VuZChcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLnByaWNlLnNsaWNlKC0xKVswXS52YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLnNoYXJrLnNsaWNlKC0xKVswXS52YWx1ZVxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICAgICAgdGhpcy50b2dnbGVTcGlubmVyKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgdXBkYXRlQ2hhcnREYXRhID0gZGF0YSA9PiB7XHJcbiAgICAgICAgdGhpcy5oYXNOZXdEYXRhID0gdHJ1ZTtcclxuICAgICAgICBjb25zdCBwYXJhbSA9IHtcclxuICAgICAgICAgICAgdGltZTogZGF0YS50aW1lc2VjLFxyXG4gICAgICAgICAgICBwcmljZTogZGF0YS5jbG9zZXByaWNlLFxyXG4gICAgICAgICAgICB2b2x1bWU6IGRhdGEuY2xvc2V2b2wsXHJcbiAgICAgICAgICAgIGFjdGlvbjogZGF0YS5hY3Rpb25cclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IHRoaXMuY3JlYXRlQ2hhcnREYXRhKHRoaXMuZGF0YSwgcGFyYW0pO1xyXG4gICAgICAgIGNvbnN0IGxhc3RQcmljZSA9IHRoaXMuZGF0YS5wcmljZS5zbGljZSgtMSlbMF07XHJcbiAgICAgICAgY29uc3QgbGFzdFNoYXJrID0gdGhpcy5kYXRhLnNoYXJrLnNsaWNlKC0xKVswXTtcclxuICAgICAgICAvL1xyXG4gICAgICAgIGlmICh0aGlzLnRpbWVGcmFtZSA+IDApIHtcclxuICAgICAgICAgICAgdGhpcy5zZXJpZXMucHJpY2Uuc2V0RGF0YSh0aGlzLmRhdGEucHJpY2UpO1xyXG4gICAgICAgICAgICB0aGlzLnNlcmllcy5zaGFyay5zZXREYXRhKHRoaXMuZGF0YS5zaGFyayk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5zZXJpZXMucHJpY2UudXBkYXRlKGxhc3RQcmljZSk7XHJcbiAgICAgICAgICAgIHRoaXMuc2VyaWVzLnNoYXJrLnVwZGF0ZShsYXN0U2hhcmspO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXRoaXMuaGFzQ3Jvc3NoYWlyKSB7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlTGVnZW5kKGxhc3RQcmljZS52YWx1ZSwgbGFzdFNoYXJrLnZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy9cclxuICAgICAgICB0aGlzLmxvY2FsREIuc2V0KFwiZGF0YVwiLCBwYXJhbSk7XHJcbiAgICAgICAgdGhpcy5kYXRhLm9yaWdpbmFsLnB1c2gocGFyYW0pO1xyXG4gICAgfTtcclxuICAgIGdldFNlcnZlckRhdGEgPSAoKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGFzeW5jIChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgZGF0ZSA9IHRoaXMuZGF0ZUlucHV0LnZhbHVlO1xyXG4gICAgICAgICAgICBjb25zdCBkYXRhID0geyBhY3Rpb246IFwiR0VUXCIsIGRhdGU6IGRhdGUgfTtcclxuICAgICAgICAgICAgY29uc3QgdXJsID0gdGhpcy5kYXRhRW5kcG9pbnQ7XHJcbiAgICAgICAgICAgIHN0YXJ0OiB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7dGhpcy5hY2Nlc3NUb2tlbn1gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGRhdGEpXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGpzb24gPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShqc29uKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZSBzdGFydDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIGNyZWF0ZUNoYXJ0RGF0YSA9IChyLCBpdGVtKSA9PiB7XHJcbiAgICAgICAgdmFyIHRpbWUgPSBpdGVtLnRpbWUgKyA3ICogNjAgKiA2MDtcclxuICAgICAgICBjb25zdCBwcmV2U2hhcmsgPSAhIXIuc2hhcmsubGVuZ3RoID8gci5zaGFyay5zbGljZSgtMSlbMF0udmFsdWUgOiAwO1xyXG4gICAgICAgIGNvbnN0IHZvbHVtZSA9IChpdGVtLmFjdGlvbiA9PSBcIkJVXCIgPyAxIDogLTEpICogaXRlbS52b2x1bWU7XHJcbiAgICAgICAgaWYgKHRoaXMudGltZUZyYW1lID4gMCkge1xyXG4gICAgICAgICAgICBjb25zdCBwZXJpb2QgPSA2MCAqIHRoaXMudGltZUZyYW1lO1xyXG4gICAgICAgICAgICBjb25zdCB0aW1lSW5kZXggPSBNYXRoLmZsb29yKHRpbWUgLyBwZXJpb2QpO1xyXG4gICAgICAgICAgICB2YXIgaXNTYW1lVGltZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAoISFyLnByaWNlLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcHJldlRpbWUgPSByLnByaWNlLnNsaWNlKC0xKVswXS50aW1lO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRpbWVJbmRleCA9PSBNYXRoLmZsb29yKHByZXZUaW1lIC8gcGVyaW9kKSlcclxuICAgICAgICAgICAgICAgICAgICBpc1NhbWVUaW1lID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoaXNTYW1lVGltZSkge1xyXG4gICAgICAgICAgICAgICAgci5wcmljZS5wb3AoKTtcclxuICAgICAgICAgICAgICAgIHIuc2hhcmsucG9wKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGltZSA9IHRpbWVJbmRleCAqIHBlcmlvZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgci5vcmlnaW5hbC5wdXNoKGl0ZW0pO1xyXG4gICAgICAgIHIucHJpY2UucHVzaCh7IHRpbWU6IHRpbWUsIHZhbHVlOiBpdGVtLnByaWNlIH0pO1xyXG4gICAgICAgIHIuc2hhcmsucHVzaCh7XHJcbiAgICAgICAgICAgIHRpbWU6IHRpbWUsXHJcbiAgICAgICAgICAgIHZhbHVlOiBwcmV2U2hhcmsgKyAoaXRlbS52b2x1bWUgPiB0aGlzLnNoYXJrTGltaXQgPyB2b2x1bWUgOiAwKVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8vXHJcbiAgICAgICAgcmV0dXJuIHI7XHJcbiAgICB9O1xyXG4gICAgZ2V0SGVscGVyRGF0YSA9ICgpID0+IHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoYXN5bmMgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBvcmRlciA9IGF3YWl0IHRoaXMubG9jYWxEQi5nZXQoXCJvcmRlclwiKTtcclxuICAgICAgICAgICAgb3JkZXIubWFwKGl0ZW0gPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vcmRlci5zaWRlID0gaXRlbS5zaWRlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vcmRlcltpdGVtLmtpbmRdLnByaWNlID0gaXRlbS5wcmljZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZHJhd09yZGVyTGluZShpdGVtLmtpbmQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGl0ZW0ua2luZCA9PSBcImVudHJ5XCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5nZXRPcmRlclBvc2l0aW9uKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vcmRlci5lbnRyeS5saW5lLmFwcGx5T3B0aW9ucyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcmFnZ2FibGU6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZUNhbmNlbE9yZGVyQnV0dG9uKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgY29uc3QgbGluZXMgPSBhd2FpdCB0aGlzLmxvY2FsREIuZ2V0KFwibGluZVwiKTtcclxuICAgICAgICAgICAgbGluZXMuZm9yRWFjaChsaW5lID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICghbGluZS5yZW1vdmVkKVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGluZXMucHVzaCh0aGlzLnNlcmllcy5wcmljZS5jcmVhdGVQcmljZUxpbmUobGluZSkpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgdGhpcy5tYXJrZXJzID0gYXdhaXQgdGhpcy5sb2NhbERCLmdldChcIm1hcmtlclwiKTtcclxuICAgICAgICAgICAgdGhpcy5zZXJpZXMucHJpY2Uuc2V0TWFya2Vycyh0aGlzLm1hcmtlcnMpO1xyXG4gICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICBjb25zdCBydWxlckxpbmVzID0gYXdhaXQgdGhpcy5sb2NhbERCLmdldChcInJ1bGVyXCIpO1xyXG4gICAgICAgICAgICBpZiAocnVsZXJMaW5lcy5sZW5ndGggPT0gMikge1xyXG4gICAgICAgICAgICAgICAgcnVsZXJMaW5lcy5mb3JFYWNoKGxpbmUgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucnVsZXIucG9pbnQgPSAyO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChsaW5lLnBvaW50ID09IDEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucnVsZXIuc3RhcnQgPSB0aGlzLnNlcmllcy5wcmljZS5jcmVhdGVQcmljZUxpbmUoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJ1bGVyLmVuZCA9IHRoaXMuc2VyaWVzLnByaWNlLmNyZWF0ZVByaWNlTGluZShcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVcclxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgIGNvbnN0IGFsZXJ0TGluZXMgPSBhd2FpdCB0aGlzLmxvY2FsREIuZ2V0KFwiYWxlcnRcIik7XHJcbiAgICAgICAgICAgIGFsZXJ0TGluZXMuZm9yRWFjaChsaW5lID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICghbGluZS5yZW1vdmVkKVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWxlcnRzLnB1c2godGhpcy5zZXJpZXMucHJpY2UuY3JlYXRlUHJpY2VMaW5lKGxpbmUpKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICAvL1xyXG4gICAgaW50ZXJ2YWxIYW5kbGVyID0gc2VsZiA9PiB7XHJcbiAgICAgICAgaWYgKHNlbGYuZ2V0T3JkZXJQb3NpdGlvbigpKSB7XHJcbiAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgIHNlbGYub3JkZXIuZW50cnkuaGFzT3duUHJvcGVydHkoXCJsaW5lXCIpICYmXHJcbiAgICAgICAgICAgICAgICAhc2VsZi5vcmRlci50cC5oYXNPd25Qcm9wZXJ0eShcImxpbmVcIilcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLm9yZGVyVHBQcmljZShzZWxmLm9yZGVyLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIHNlbGYuZHJhd09yZGVyTGluZShcInRwXCIpO1xyXG4gICAgICAgICAgICAgICAgc2VsZi5vcmRlclNsUHJpY2Uoc2VsZi5vcmRlciwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmRyYXdPcmRlckxpbmUoXCJzbFwiKTtcclxuICAgICAgICAgICAgICAgIHNlbGYub3JkZXIuZW50cnkubGluZS5hcHBseU9wdGlvbnMoe1xyXG4gICAgICAgICAgICAgICAgICAgIGRyYWdnYWJsZTogZmFsc2VcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgc2VsZi5ub3RpZmllci5zaG93KFwic3VjY2Vzc1wiLCBcIsSQw6MgbeG7nyB24buLIHRo4bq/LlwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChzZWxmLm9yZGVyLnRwLmhhc093blByb3BlcnR5KFwibGluZVwiKSkge1xyXG4gICAgICAgICAgICAgICAgc2VsZi5jYW5jZWxPcmRlcigpO1xyXG4gICAgICAgICAgICAgICAgc2VsZi50b2dnbGVDYW5jZWxPcmRlckJ1dHRvbihmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICBzZWxmLnJlbW92ZU9yZGVyTGluZShcImVudHJ5XCIpO1xyXG4gICAgICAgICAgICAgICAgc2VsZi5yZW1vdmVPcmRlckxpbmUoXCJ0cFwiKTtcclxuICAgICAgICAgICAgICAgIHNlbGYucmVtb3ZlT3JkZXJMaW5lKFwic2xcIik7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmxvY2FsREIuY2xlYXIoXCJvcmRlclwiKTtcclxuICAgICAgICAgICAgICAgIHNlbGYubm90aWZpZXIuc2hvdyhcInN1Y2Nlc3NcIiwgXCLEkMOjIMSRw7NuZyB24buLIHRo4bq/LlwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvL1xyXG4gICAgICAgIGlmIChzZWxmLmF1ZGlvLnBhdXNlZCkge1xyXG4gICAgICAgICAgICBzZWxmLmFsZXJ0cy5mb3JFYWNoKGFsZXJ0ID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG9wcyA9IGFsZXJ0Lm9wdGlvbnMoKTtcclxuICAgICAgICAgICAgICAgIGlmICghb3BzLnJlbW92ZWQgJiYgISFzZWxmLmRhdGEub3JpZ2luYWwubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY3VycmVudFByaWNlID0gc2VsZi5kYXRhLm9yaWdpbmFsLnNsaWNlKC0xKVswXS5wcmljZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChvcHMudGl0bGUgPT0gXCI+XCIgJiYgY3VycmVudFByaWNlID49IG9wcy5wcmljZSkgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgKG9wcy50aXRsZSA9PSBcIjxcIiAmJiBjdXJyZW50UHJpY2UgPD0gb3BzLnByaWNlKVxyXG4gICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5hdWRpby5wbGF5KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvL1xyXG4gICAgdG9nZ2xlU3Bpbm5lciA9IHZpc2libGUgPT4ge1xyXG4gICAgICAgIHRoaXMuc3Bpbm5lckltZy5zdHlsZS5vcGFjaXR5ID0gdmlzaWJsZSA/IDEgOiAwO1xyXG4gICAgfTtcclxuICAgIHJlc2l6ZSA9IGNoYXJ0ID0+IHtcclxuICAgICAgICBjaGFydC5yZXNpemUod2luZG93LmlubmVyV2lkdGgsIHdpbmRvdy5pbm5lckhlaWdodCk7XHJcbiAgICB9O1xyXG4gICAga2V5RXZlbnQgPSAoZSwgc2VsZikgPT4ge1xyXG4gICAgICAgIGlmIChlLmN0cmxLZXkgfHwgZS5tZXRhS2V5KSB7XHJcbiAgICAgICAgICAgIGlmIChlLnNoaWZ0S2V5KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZS5rZXlDb2RlID09IDM5KSBzZWxmLmNoYXJ0LnRpbWVTY2FsZSgpLnNjcm9sbFRvUmVhbFRpbWUoKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmIChlLmtleUNvZGUgPT0gMzgpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBvcHRpb25zID0gc2VsZi5jaGFydC5vcHRpb25zKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5jaGFydC50aW1lU2NhbGUoKS5hcHBseU9wdGlvbnMoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBiYXJTcGFjaW5nOiBvcHRpb25zLnRpbWVTY2FsZS5iYXJTcGFjaW5nICsgMC4xXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGUua2V5Q29kZSA9PSA0MCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSBzZWxmLmNoYXJ0Lm9wdGlvbnMoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMudGltZVNjYWxlLmJhclNwYWNpbmcgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLnRpbWVTY2FsZS5taW5CYXJTcGFjaW5nXHJcbiAgICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmNoYXJ0LnRpbWVTY2FsZSgpLmFwcGx5T3B0aW9ucyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYXJTcGFjaW5nOiBvcHRpb25zLnRpbWVTY2FsZS5iYXJTcGFjaW5nIC0gMC4xXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlLmtleUNvZGUgPT0gMzcpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwb3NpdGlvbiA9IHNlbGYuY2hhcnQudGltZVNjYWxlKCkuc2Nyb2xsUG9zaXRpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLmNoYXJ0LnRpbWVTY2FsZSgpLnNjcm9sbFRvUG9zaXRpb24ocG9zaXRpb24gLSAxMCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGUua2V5Q29kZSA9PSAzOSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uID0gc2VsZi5jaGFydC50aW1lU2NhbGUoKS5zY3JvbGxQb3NpdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuY2hhcnQudGltZVNjYWxlKCkuc2Nyb2xsVG9Qb3NpdGlvbihwb3NpdGlvbiArIDEwKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZS5rZXlDb2RlID09IDk3KSBzZWxmLmRyYXdMaW5lQnV0dG9uLmNsaWNrKCk7XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChlLmtleUNvZGUgPT0gOTgpIHNlbGYuZHJhd01hcmtlckJ1dHRvbi5jbGljaygpO1xyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoZS5rZXlDb2RlID09IDk5KSBzZWxmLmRyYXdSdWxlckJ1dHRvbi5jbGljaygpO1xyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoZS5rZXlDb2RlID09IDEwMCkgc2VsZi5kcmF3QWxlcnRCdXR0b24uY2xpY2soKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAoZS53aGljaCA9PT0gMjcpIHNlbGYucmVtb3ZlT3JkZXJCdXR0b24oKTtcclxuICAgIH07XHJcbn1cclxuIiwiY2xhc3MgT3B0aW9uVmlldyB7XHJcbiAgICAvLyBDw6FjIHRodeG7mWMgdMOtbmhcclxuICAgIFRPS0VOX0tFWSA9IFwiU09BVFwiO1xyXG4gICAgaXNMb2dlZGluID0gZmFsc2U7XHJcblxyXG4gICAgLy8gSMOgbSBraOG7n2kgdOG6oW9cclxuICAgIGNvbnN0cnVjdG9yKCkge31cclxuXHJcbiAgICAvLyBDw6FjIHBoxrDGoW5nIHRo4bupY1xyXG4gICAgc2V0T3B0aW9ucyA9IG9wdGlvbnMgPT4ge1xyXG4gICAgICAgIHRoaXMuQVBQX05BTUUgPSBvcHRpb25zLkFQUF9OQU1FO1xyXG4gICAgICAgIHRoaXMuZGV2aWNlSWQgPSBvcHRpb25zLmRldmljZUlkO1xyXG4gICAgICAgIHRoaXMucmVnaXN0ZXJFbmRwb2ludCA9IG9wdGlvbnMucmVnaXN0ZXJFbmRwb2ludDtcclxuICAgICAgICB0aGlzLmxvZ2luRW5kcG9pbnQgPSBvcHRpb25zLmxvZ2luRW5kcG9pbnQ7XHJcbiAgICAgICAgdGhpcy5sb2dvdXRFbmRwb2ludCA9IG9wdGlvbnMubG9nb3V0RW5kcG9pbnQ7XHJcbiAgICAgICAgdGhpcy5tZW51QnV0dG9uQ2FsbGJhY2sgPSBvcHRpb25zLm1lbnVCdXR0b25DYWxsYmFjaztcclxuICAgICAgICB0aGlzLm5vdGlmaWVyID0gb3B0aW9ucy5ub3RpZmllcjtcclxuICAgICAgICB0aGlzLmxpZ2h0d2VpZ2h0ID0gb3B0aW9ucy5saWdodHdlaWdodDtcclxuICAgIH07XHJcbiAgICBpbml0ID0gKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuY3JlYXRlQ29udGFpbmVyKCk7XHJcbiAgICB9O1xyXG4gICAgY3JlYXRlQ29udGFpbmVyID0gKCkgPT4ge1xyXG4gICAgICAgIHZhciBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgIGNvbnRhaW5lci5pZCA9IFwib3B0aW9uVmlld0NvbnRhaW5lclwiO1xyXG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kKGNvbnRhaW5lcik7XHJcbiAgICAgICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XHJcbiAgICAgICAgLy9cclxuICAgICAgICB0aGlzLmNyZWF0ZUhlYXJkZXJDb250YWluZXIoY29udGFpbmVyKTtcclxuICAgICAgICB0aGlzLmNyZWF0ZUxvZ2luQ29udGFpbmVyKGNvbnRhaW5lcik7XHJcbiAgICAgICAgdGhpcy5jcmVhdGVSZWdpc3RlckNvbnRhaW5lcihjb250YWluZXIpO1xyXG4gICAgICAgIHRoaXMuY3JlYXRlSW5mb0NvbnRhaW5lcihjb250YWluZXIpO1xyXG4gICAgICAgIHRoaXMuY3JlYXRlT3B0aW9uQ29udGFpbmVyKGNvbnRhaW5lcik7XHJcbiAgICB9O1xyXG4gICAgY3JlYXRlSGVhcmRlckNvbnRhaW5lciA9IGNvbnRhaW5lciA9PiB7XHJcbiAgICAgICAgdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICAgZGl2LmlkID0gXCJoZWFyZGVyQ29udGFpbmVyXCI7XHJcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZChkaXYpO1xyXG4gICAgICAgIHRoaXMuaGVhcmRlckNvbnRhaW5lciA9IGRpdjtcclxuICAgICAgICAvL1xyXG4gICAgICAgIHZhciBwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XHJcbiAgICAgICAgZGl2LmFwcGVuZChwKTtcclxuICAgICAgICBwLmNsYXNzTmFtZSA9IFwidGl0bGVcIjtcclxuICAgICAgICBwLmlubmVyVGV4dCA9IFwiU21hcnRPcmRlciBjaG8gVlBTXCI7XHJcbiAgICAgICAgLy9cclxuICAgICAgICBwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XHJcbiAgICAgICAgZGl2LmFwcGVuZChwKTtcclxuICAgICAgICBwLmNsYXNzTmFtZSA9IFwic3VidGl0bGVcIjtcclxuICAgICAgICBwLmlubmVyVGV4dCA9IFwiUGjDoXQgdHJp4buDbiBi4bufaSBUaG8gUFNcIjtcclxuICAgICAgICAvL1xyXG4gICAgICAgIHAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcclxuICAgICAgICBkaXYuYXBwZW5kKHApO1xyXG4gICAgICAgIHAuY2xhc3NOYW1lID0gXCJob21lcGFnZSBsaW5rXCI7XHJcbiAgICAgICAgcC5pbm5lclRleHQgPSBcIlRyYW5nIGNo4bunXCI7XHJcbiAgICAgICAgcC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT5cclxuICAgICAgICAgICAgd2luZG93Lm9wZW4oXCJodHRwczovL3d3dy53M3NjaG9vbHMuY29tXCIpXHJcbiAgICAgICAgKTtcclxuICAgIH07XHJcbiAgICBjcmVhdGVMb2dpbkNvbnRhaW5lciA9IGNvbnRhaW5lciA9PiB7XHJcbiAgICAgICAgdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICAgZGl2LmlkID0gXCJsb2dpbkNvbnRhaW5lclwiO1xyXG4gICAgICAgIGRpdi5jbGFzc05hbWUgPSBcInNlY3Rpb25cIjtcclxuICAgICAgICBkaXYuc3R5bGUuZGlzcGxheSA9IHRoaXMuaXNMb2dlZGluID8gXCJub25lXCIgOiBcImJsb2NrXCI7XHJcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZChkaXYpO1xyXG4gICAgICAgIHRoaXMubG9naW5Db250YWluZXIgPSBkaXY7XHJcbiAgICAgICAgLy9cclxuICAgICAgICB2YXIgd3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmb3JtXCIpO1xyXG4gICAgICAgIGRpdi5hcHBlbmQod3JhcHBlcik7XHJcbiAgICAgICAgd3JhcHBlci5pZCA9IFwibG9naW5Gb3JtXCI7XHJcbiAgICAgICAgd3JhcHBlci5jbGFzc05hbWUgPSBcIndyYXBwZXJcIjtcclxuICAgICAgICB3cmFwcGVyLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgZSA9PiB0aGlzLmxvZ2luKGUsIHRoaXMpKTtcclxuICAgICAgICAvL1xyXG4gICAgICAgIHZhciBwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XHJcbiAgICAgICAgd3JhcHBlci5hcHBlbmQocCk7XHJcbiAgICAgICAgcC5jbGFzc05hbWUgPSBcImludmFsaWRcIjtcclxuICAgICAgICB0aGlzLmxvZ2luTWVzc2FnZSA9IHA7XHJcbiAgICAgICAgLy9cclxuICAgICAgICB2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XHJcbiAgICAgICAgd3JhcHBlci5hcHBlbmQoaW5wdXQpO1xyXG4gICAgICAgIGlucHV0LmlkID0gXCJsb2dpblVzZXJuYW1lXCI7XHJcbiAgICAgICAgaW5wdXQudHlwZSA9IFwidGV4dFwiO1xyXG4gICAgICAgIGlucHV0LnBsYWNlaG9sZGVyID0gXCJFbWFpbCBob+G6t2MgU+G7kSDEkWnhu4duIHRob+G6oWlcIjtcclxuICAgICAgICBpbnB1dC5yZXF1aXJlZCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5sb2dpblVzZXJuYW1lID0gaW5wdXQ7XHJcbiAgICAgICAgaWYgKCF0aGlzLmlzTG9nZWRpbikgdGhpcy5sb2dpblVzZXJuYW1lLmZvY3VzKCk7XHJcbiAgICAgICAgLy9cclxuICAgICAgICBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcclxuICAgICAgICB3cmFwcGVyLmFwcGVuZChpbnB1dCk7XHJcbiAgICAgICAgaW5wdXQuaWQgPSBcImxvZ2luUGFzc3dvcmRcIjtcclxuICAgICAgICBpbnB1dC50eXBlID0gXCJwYXNzd29yZFwiO1xyXG4gICAgICAgIGlucHV0LnBsYWNlaG9sZGVyID0gXCJN4bqtdCBraOG6qXVcIjtcclxuICAgICAgICBpbnB1dC5yZXF1aXJlZCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5sb2dpblBhc3N3b3JkID0gaW5wdXQ7XHJcbiAgICAgICAgLy9cclxuICAgICAgICB2YXIgY2hlY2tib3hXcmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICB3cmFwcGVyLmFwcGVuZChjaGVja2JveFdyYXBwZXIpO1xyXG4gICAgICAgIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xyXG4gICAgICAgIGNoZWNrYm94V3JhcHBlci5hcHBlbmQoaW5wdXQpO1xyXG4gICAgICAgIGlucHV0LmlkID0gXCJsb2dpblJlbWVtYmVyTWVcIjtcclxuICAgICAgICBpbnB1dC50eXBlID0gXCJjaGVja2JveFwiO1xyXG4gICAgICAgIHRoaXMubG9naW5SZW1lbWJlck1lID0gaW5wdXQ7XHJcbiAgICAgICAgdmFyIGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xyXG4gICAgICAgIGNoZWNrYm94V3JhcHBlci5hcHBlbmQobGFiZWwpO1xyXG4gICAgICAgIGxhYmVsLnNldEF0dHJpYnV0ZShcImZvclwiLCBcImxvZ2luUmVtZW1iZXJNZVwiKTtcclxuICAgICAgICBsYWJlbC5pbm5lckhUTUwgPSBcIiZlbnNwO0zGsHUgxJHEg25nIG5o4bqtcFwiO1xyXG4gICAgICAgIC8vXHJcbiAgICAgICAgdmFyIGJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XHJcbiAgICAgICAgd3JhcHBlci5hcHBlbmQoYnV0dG9uKTtcclxuICAgICAgICBidXR0b24uaWQgPSBcImxvZ2luU3VibWl0XCI7XHJcbiAgICAgICAgYnV0dG9uLmlubmVyVGV4dCA9IFwixJDEgk5HIE5I4bqsUFwiO1xyXG4gICAgICAgIGJ1dHRvbi50eXBlID0gXCJzdWJtaXRcIjtcclxuICAgICAgICB0aGlzLmxvZ2luU3VibWl0ID0gYnV0dG9uO1xyXG4gICAgICAgIC8vXHJcbiAgICAgICAgdmFyIHAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcclxuICAgICAgICB3cmFwcGVyLmFwcGVuZChwKTtcclxuICAgICAgICBwLmNsYXNzTmFtZSA9IFwibGlua1wiO1xyXG4gICAgICAgIHAuaW5uZXJUZXh0ID0gXCLEkMSDbmcga8O9XCI7XHJcbiAgICAgICAgcC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMubG9naW5Db250YWluZXIuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgICAgICAgICB0aGlzLnJlZ2lzdGVyQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XHJcbiAgICAgICAgICAgIHRoaXMucmVnaXN0ZXJOYW1lLmZvY3VzKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgY3JlYXRlUmVnaXN0ZXJDb250YWluZXIgPSBjb250YWluZXIgPT4ge1xyXG4gICAgICAgIHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgIGRpdi5pZCA9IFwicmVnaXN0ZXJDb250YWluZXJcIjtcclxuICAgICAgICBkaXYuY2xhc3NOYW1lID0gXCJzZWN0aW9uXCI7XHJcbiAgICAgICAgZGl2LnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgICAgICBjb250YWluZXIuYXBwZW5kKGRpdik7XHJcbiAgICAgICAgdGhpcy5yZWdpc3RlckNvbnRhaW5lciA9IGRpdjtcclxuICAgICAgICAvL1xyXG4gICAgICAgIHZhciB3cmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZvcm1cIik7XHJcbiAgICAgICAgZGl2LmFwcGVuZCh3cmFwcGVyKTtcclxuICAgICAgICB3cmFwcGVyLmlkID0gXCJyZWdpc3RlckZvcm1cIjtcclxuICAgICAgICB3cmFwcGVyLmNsYXNzTmFtZSA9IFwid3JhcHBlclwiO1xyXG4gICAgICAgIHdyYXBwZXIuYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCBlID0+IHRoaXMucmVnaXN0ZXIoZSwgdGhpcykpO1xyXG4gICAgICAgIC8vXHJcbiAgICAgICAgdmFyIHAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcclxuICAgICAgICB3cmFwcGVyLmFwcGVuZChwKTtcclxuICAgICAgICBwLmNsYXNzTmFtZSA9IFwiaW52YWxpZFwiO1xyXG4gICAgICAgIHRoaXMucmVnaXN0ZXJNZXNzYWdlID0gcDtcclxuICAgICAgICAvL1xyXG4gICAgICAgIHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcclxuICAgICAgICB3cmFwcGVyLmFwcGVuZChpbnB1dCk7XHJcbiAgICAgICAgaW5wdXQuaWQgPSBcInJlZ2lzdGVyTmFtZVwiO1xyXG4gICAgICAgIGlucHV0LnR5cGUgPSBcInRleHRcIjtcclxuICAgICAgICBpbnB1dC5wbGFjZWhvbGRlciA9IFwiVMOqblwiO1xyXG4gICAgICAgIGlucHV0LnJlcXVpcmVkID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnJlZ2lzdGVyTmFtZSA9IGlucHV0O1xyXG4gICAgICAgIC8vXHJcbiAgICAgICAgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XHJcbiAgICAgICAgd3JhcHBlci5hcHBlbmQoaW5wdXQpO1xyXG4gICAgICAgIGlucHV0LmlkID0gXCJyZWdpc3RlckVtYWlsXCI7XHJcbiAgICAgICAgaW5wdXQudHlwZSA9IFwiZW1haWxcIjtcclxuICAgICAgICBpbnB1dC5wbGFjZWhvbGRlciA9IFwiRW1haWxcIjtcclxuICAgICAgICBpbnB1dC5yZXF1aXJlZCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5yZWdpc3RlckVtYWlsID0gaW5wdXQ7XHJcbiAgICAgICAgLy9cclxuICAgICAgICBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcclxuICAgICAgICB3cmFwcGVyLmFwcGVuZChpbnB1dCk7XHJcbiAgICAgICAgaW5wdXQuaWQgPSBcInJlZ2lzdGVyUGhvbmVcIjtcclxuICAgICAgICBpbnB1dC50eXBlID0gXCJ0ZXh0XCI7XHJcbiAgICAgICAgaW5wdXQucGxhY2Vob2xkZXIgPSBcIlPhu5EgxJFp4buHbiB0aG/huqFpXCI7XHJcbiAgICAgICAgaW5wdXQucmVxdWlyZWQgPSB0cnVlO1xyXG4gICAgICAgIGlucHV0LnNldEF0dHJpYnV0ZShcIm1heGxlbmd0aFwiLCAxMCk7XHJcbiAgICAgICAgaW5wdXQuc2V0QXR0cmlidXRlKFwicGF0dGVyblwiLCBcIlswLTldK1wiKTtcclxuICAgICAgICB0aGlzLnJlZ2lzdGVyUGhvbmUgPSBpbnB1dDtcclxuICAgICAgICAvL1xyXG4gICAgICAgIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xyXG4gICAgICAgIHdyYXBwZXIuYXBwZW5kKGlucHV0KTtcclxuICAgICAgICBpbnB1dC5pZCA9IFwicmVnaXN0ZXJQYXNzd29yZFwiO1xyXG4gICAgICAgIGlucHV0LnR5cGUgPSBcInBhc3N3b3JkXCI7XHJcbiAgICAgICAgaW5wdXQucGxhY2Vob2xkZXIgPSBcIk3huq10IGto4bqpdVwiO1xyXG4gICAgICAgIGlucHV0LnJlcXVpcmVkID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnJlZ2lzdGVyUGFzc3dvcmQgPSBpbnB1dDtcclxuICAgICAgICAvL1xyXG4gICAgICAgIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xyXG4gICAgICAgIHdyYXBwZXIuYXBwZW5kKGlucHV0KTtcclxuICAgICAgICBpbnB1dC5pZCA9IFwicmVnaXN0ZXJDb25maXJtUGFzc3dvcmRcIjtcclxuICAgICAgICBpbnB1dC50eXBlID0gXCJwYXNzd29yZFwiO1xyXG4gICAgICAgIGlucHV0LnBsYWNlaG9sZGVyID0gXCJYw6FjIG5o4bqtbiBt4bqtdCBraOG6qXVcIjtcclxuICAgICAgICBpbnB1dC5yZXF1aXJlZCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5yZWdpc3RlckNvbmZpcm1QYXNzd29yZCA9IGlucHV0O1xyXG4gICAgICAgIC8vXHJcbiAgICAgICAgdmFyIGJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XHJcbiAgICAgICAgd3JhcHBlci5hcHBlbmQoYnV0dG9uKTtcclxuICAgICAgICBidXR0b24uaWQgPSBcInJlZ2lzdGVyU3VibWl0XCI7XHJcbiAgICAgICAgYnV0dG9uLmlubmVyVGV4dCA9IFwixJDEgk5HIEvDnVwiO1xyXG4gICAgICAgIGJ1dHRvbi50eXBlID0gXCJzdWJtaXRcIjtcclxuICAgICAgICB0aGlzLnJlZ2lzdGVyU3VibWl0ID0gYnV0dG9uO1xyXG4gICAgICAgIC8vXHJcbiAgICAgICAgdmFyIHAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcclxuICAgICAgICB3cmFwcGVyLmFwcGVuZChwKTtcclxuICAgICAgICBwLmNsYXNzTmFtZSA9IFwibGlua1wiO1xyXG4gICAgICAgIHAuaW5uZXJUZXh0ID0gXCLEkMSDbmcgbmjhuq1wXCI7XHJcbiAgICAgICAgcC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMucmVnaXN0ZXJDb250YWluZXIuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgICAgICAgICB0aGlzLmxvZ2luQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XHJcbiAgICAgICAgICAgIHRoaXMubG9naW5Vc2VybmFtZS5mb2N1cygpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIGNyZWF0ZUluZm9Db250YWluZXIgPSBjb250YWluZXIgPT4ge1xyXG4gICAgICAgIHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgIGRpdi5pZCA9IFwiaW5mb0NvbnRhaW5lclwiO1xyXG4gICAgICAgIGRpdi5jbGFzc05hbWUgPSBcInNlY3Rpb25cIjtcclxuICAgICAgICBkaXYuc3R5bGUuZGlzcGxheSA9IHRoaXMuaXNMb2dlZGluID8gXCJibG9ja1wiIDogXCJub25lXCI7XHJcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZChkaXYpO1xyXG4gICAgICAgIHRoaXMuaW5mb0NvbnRhaW5lciA9IGRpdjtcclxuICAgICAgICAvL1xyXG4gICAgICAgIHZhciB3cmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICB3cmFwcGVyLmNsYXNzTmFtZSA9IFwid3JhcHBlclwiO1xyXG4gICAgICAgIGRpdi5hcHBlbmQod3JhcHBlcik7XHJcbiAgICAgICAgLy9cclxuICAgICAgICB2YXIgYnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcclxuICAgICAgICB3cmFwcGVyLmFwcGVuZChidXR0b24pO1xyXG4gICAgICAgIGJ1dHRvbi5pbm5lclRleHQgPSBcIsSQxIJORyBYVeG6pFRcIjtcclxuICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGUgPT4gdGhpcy5sb2dvdXQoZSwgdGhpcykpO1xyXG4gICAgICAgIC8vXHJcbiAgICAgICAgdmFyIHAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcclxuICAgICAgICB3cmFwcGVyLmFwcGVuZChwKTtcclxuICAgICAgICBwLmNsYXNzTmFtZSA9IFwibGlua1wiO1xyXG4gICAgICAgIHAuaW5uZXJUZXh0ID0gXCJDw6BpIMSR4bq3dFwiO1xyXG4gICAgICAgIHAuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGUgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmluZm9Db250YWluZXIuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgICAgICAgICB0aGlzLm9wdGlvbkNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIGNyZWF0ZU9wdGlvbkNvbnRhaW5lciA9IGNvbnRhaW5lciA9PiB7XHJcbiAgICAgICAgdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICAgZGl2LmlkID0gXCJvcHRpb25Db250YWluZXJcIjtcclxuICAgICAgICBkaXYuY2xhc3NOYW1lID0gXCJzZWN0aW9uXCI7XHJcbiAgICAgICAgZGl2LnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgICAgICBjb250YWluZXIuYXBwZW5kKGRpdik7XHJcbiAgICAgICAgdGhpcy5vcHRpb25Db250YWluZXIgPSBkaXY7XHJcbiAgICAgICAgLy9cclxuICAgICAgICB2YXIgd3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICAgd3JhcHBlci5jbGFzc05hbWUgPSBcIndyYXBwZXJcIjtcclxuICAgICAgICBkaXYuYXBwZW5kKHdyYXBwZXIpO1xyXG4gICAgICAgIC8vXHJcbiAgICAgICAgdmFyIHAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcclxuICAgICAgICB3cmFwcGVyLmFwcGVuZChwKTtcclxuICAgICAgICBwLmNsYXNzTmFtZSA9IFwibGlua1wiO1xyXG4gICAgICAgIHAuaW5uZXJUZXh0ID0gXCJUcuG7nyB24buBXCI7XHJcbiAgICAgICAgcC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMub3B0aW9uQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgICAgICAgICAgdGhpcy5pbmZvQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgcmVnaXN0ZXIgPSAoZSwgc2VsZikgPT4ge1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBpZiAoc2VsZi5yZWdpc3RlckNvbmZpcm1QYXNzd29yZC52YWx1ZSAhPSBzZWxmLnJlZ2lzdGVyUGFzc3dvcmQudmFsdWUpIHtcclxuICAgICAgICAgICAgc2VsZi5yZWdpc3Rlck1lc3NhZ2UuaW5uZXJUZXh0ID0gXCJN4bqtdCBraOG6qXUga2jDtG5nIGto4bubcFwiO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgc2VsZi5yZWdpc3RlclN1Ym1pdC5pbm5lclRleHQgPSBcIsSQYW5nIMSRxINuZyBrw70uLi5cIjtcclxuICAgICAgICAgICAgc2VsZi5yZWdpc3RlclN1Ym1pdC5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIHNlbGYucmVnaXN0ZXJNZXNzYWdlLmlubmVyVGV4dCA9IFwiXCI7XHJcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiBzZWxmLnJlZ2lzdGVyTmFtZS52YWx1ZSxcclxuICAgICAgICAgICAgICAgIGVtYWlsOiBzZWxmLnJlZ2lzdGVyRW1haWwudmFsdWUsXHJcbiAgICAgICAgICAgICAgICBwaG9uZTogc2VsZi5yZWdpc3RlclBob25lLnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgcGFzc3dvcmQ6IHNlbGYucmVnaXN0ZXJQYXNzd29yZC52YWx1ZSxcclxuICAgICAgICAgICAgICAgIGRldmljZUlkOiBzZWxmLmRldmljZUlkLFxyXG4gICAgICAgICAgICAgICAgY2hhbmVsOiBzZWxmLkFQUF9OQU1FXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGZldGNoKHNlbGYucmVnaXN0ZXJFbmRwb2ludCwge1xyXG4gICAgICAgICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcclxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIgfSxcclxuICAgICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGRhdGEpXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLm9rKSByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihyZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAudGhlbihqc29uZGF0YSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJyZWdpc3RlcjogXCIsIGpzb25kYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLnJlZ2lzdGVyU3VibWl0LmlubmVyVGV4dCA9IFwixJDEgk5HIEvDnVwiO1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYucmVnaXN0ZXJTdWJtaXQuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoanNvbmRhdGEuaXNPaykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNldFRva2VuKGpzb25kYXRhLnRva2VuKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi51c2VyID0ganNvbmRhdGEudXNlcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5ub3RpZmllci5zaG93KFwic3VjY2Vzc1wiLCBcIsSQxINuZyBrw70gdGjDoG5oIGPDtG5nXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqc29uZGF0YS5tZXNzYWdlID09IFwiZW1haWxFeGlzdFwiKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5yZWdpc3Rlck1lc3NhZ2UuaW5uZXJUZXh0ID1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkVtYWkgbsOgeSDEkcOjIMSRxINuZyBrw71cIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoanNvbmRhdGEubWVzc2FnZSA9PSBcInBob25lRXhpc3RcIilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYucmVnaXN0ZXJNZXNzYWdlLmlubmVyVGV4dCA9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJT4buRIMSRaeG7h24gdGhv4bqhaSBuw6B5IMSRw6MgxJHEg25nIGvDvVwiO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAuY2F0Y2goZXJyb3IgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYubm90aWZpZXIuc2hvdyhcImVycm9yXCIsIFwixJDEg25nIGvDvSB0aOG6pXQgYuG6oWlcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5yZWdpc3RlclN1Ym1pdC5pbm5lclRleHQgPSBcIsSQxIJORyBLw51cIjtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLnJlZ2lzdGVyU3VibWl0LmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgbG9naW4gPSAoZSwgc2VsZikgPT4ge1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XHJcbiAgICAgICAgICAgIHNlbGYubG9naW5TdWJtaXQuaW5uZXJUZXh0ID0gXCLEkGFuZyDEkcSDbmcgbmjhuq1wLi4uXCI7XHJcbiAgICAgICAgICAgIHNlbGYubG9naW5TdWJtaXQuZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICBzZWxmLmxvZ2luTWVzc2FnZS5pbm5lclRleHQgPSBcIlwiO1xyXG4gICAgICAgICAgICBjb25zdCBkYXRhID0ge1xyXG4gICAgICAgICAgICAgICAgdXNlcm5hbWU6IHNlbGYubG9naW5Vc2VybmFtZS52YWx1ZSxcclxuICAgICAgICAgICAgICAgIHBhc3N3b3JkOiBzZWxmLmxvZ2luUGFzc3dvcmQudmFsdWUsXHJcbiAgICAgICAgICAgICAgICByZW1lbWJlck1lOiBzZWxmLmxvZ2luUmVtZW1iZXJNZS52YWx1ZSxcclxuICAgICAgICAgICAgICAgIGRldmljZUlkOiBzZWxmLmRldmljZUlkLFxyXG4gICAgICAgICAgICAgICAgY2hhbmVsOiBzZWxmLkFQUF9OQU1FXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwibG9naW4tZGF0YTogXCIsIGRhdGEpO1xyXG4gICAgICAgICAgICBmZXRjaChzZWxmLmxvZ2luRW5kcG9pbnQsIHtcclxuICAgICAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXHJcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7IFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiIH0sXHJcbiAgICAgICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShkYXRhKVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5vaykgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oanNvbmRhdGEgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwibG9naW46IFwiLCBqc29uZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dpblN1Ym1pdC5pbm5lclRleHQgPSBcIsSQxIJORyBOSOG6rFBcIjtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2luU3VibWl0LmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGpzb25kYXRhLmlzT2spIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zZXRUb2tlbihqc29uZGF0YS50b2tlbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYudXNlciA9IGpzb25kYXRhLnVzZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubG9naW5Vc2VybmFtZS52YWx1ZSA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubG9naW5QYXNzd29yZC52YWx1ZSA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubG9naW5Db250YWluZXIuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmluZm9Db250YWluZXIuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5tZW51QnV0dG9uQ2FsbGJhY2sodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGpzb25kYXRhLm1lc3NhZ2UgPT0gXCJ1bmF1dGhvcml6ZWRcIilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubG9naW5NZXNzYWdlLmlubmVyVGV4dCA9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJTYWkgdGjDtG5nIHRpbiDEkcSDbmcgbmjhuq1wXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGpzb25kYXRhLm1lc3NhZ2UgPT0gXCJ1bnNldHVwXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2luTWVzc2FnZS5pbm5lclRleHQgPVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiTOG7l2kga2jhu59pIHThuqFvIHTDoGkga2hv4bqjblwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChqc29uZGF0YS5tZXNzYWdlID09IFwiZXhwaXJlZFwiKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dpbk1lc3NhZ2UuaW5uZXJUZXh0ID1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlF1w6EgaOG6oW4gc+G7rSBk4bulbmcgZOG7i2NoIHbhu6VcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoanNvbmRhdGEubWVzc2FnZSA9PSBcImRldmljZUxpbWl0XCIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2luTWVzc2FnZS5pbm5lclRleHQgPVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiUXXDoSBnaeG7m2kgaOG6oW4gdGhp4bq/dCBi4buLXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC5jYXRjaChlcnJvciA9PiByZXNvbHZlKGZhbHNlKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgbG9nb3V0ID0gKGUsIHNlbGYpID0+IHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGFjY2Vzc1Rva2VuID0gc2VsZi5nZXRUb2tlbigpO1xyXG4gICAgICAgICAgICBmZXRjaChzZWxmLmxvZ291dEVuZHBvaW50LCB7XHJcbiAgICAgICAgICAgICAgICBtZXRob2Q6IFwiR0VUXCIsXHJcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke2FjY2Vzc1Rva2VufWBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSkudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLnJlbW92ZVRva2VuKCk7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmxpZ2h0d2VpZ2h0LnJlbW92ZUxpZ2h0V2VpZ2h0Q2hhcnQoKTtcclxuICAgICAgICAgICAgICAgIHNlbGYuaW5mb0NvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmxvZ2luQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XHJcbiAgICAgICAgICAgICAgICBzZWxmLm1lbnVCdXR0b25DYWxsYmFjayhmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmxvZ2luVXNlcm5hbWUuZm9jdXMoKTtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgZ2V0VXNlciA9IHVybCA9PiB7XHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcclxuICAgICAgICAgICAgc2VsZi5hY2Nlc3NUb2tlbiA9IHNlbGYuZ2V0VG9rZW4oKTtcclxuICAgICAgICAgICAgaWYgKCFzZWxmLmFjY2Vzc1Rva2VuKSByZXNvbHZlKGZhbHNlKTtcclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBmZXRjaCh1cmwsIHtcclxuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IFwiR0VUXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke3NlbGYuYWNjZXNzVG9rZW59YFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uub2spIHJldHVybiByZXNwb25zZS5qc29uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihyZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGpzb25kYXRhID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJnZXRVc2VyOiBcIiwganNvbmRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnVzZXIgPSBqc29uZGF0YTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5pc0xvZ2VkaW4gPSAhIWpzb25kYXRhLmNvZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoc2VsZi5pc0xvZ2VkaW4pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGVycm9yID0+IHJlc29sdmUoZmFsc2UpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIHNldFRva2VuID0gdG9rZW4gPT5cclxuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSh0aGlzLlRPS0VOX0tFWSwgSlNPTi5zdHJpbmdpZnkodG9rZW4pKTtcclxuICAgIHJlbW92ZVRva2VuID0gKCkgPT4gbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0odGhpcy5UT0tFTl9LRVkpO1xyXG4gICAgZ2V0VG9rZW4gPSAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgdG9rZW4gPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKHRoaXMuVE9LRU5fS0VZKSk7XHJcbiAgICAgICAgaWYgKCEhdG9rZW4gJiYgbW9tZW50KCkuaXNCZWZvcmUodG9rZW4uZXhwaXJlc19hdCkpXHJcbiAgICAgICAgICAgIHJldHVybiB0b2tlbi5hY2Nlc3NfdG9rZW47XHJcbiAgICAgICAgZWxzZSByZXR1cm4gZmFsc2U7XHJcbiAgICB9O1xyXG4gICAgdG9nZ2xlID0gKCkgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLmNvbnRhaW5lci5jbGFzc0xpc3QuY29udGFpbnMoXCJzaG93XCIpKVxyXG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKFwic2hvd1wiKTtcclxuICAgICAgICBlbHNlIHRoaXMuY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoXCJzaG93XCIpO1xyXG4gICAgfTtcclxufVxyXG4iLCJjbGFzcyBMb2NhbERhdGFiYXNlIHtcclxuICAgIC8vIEjDoG0ga2jhu59pIHThuqFvXHJcbiAgICBjb25zdHJ1Y3RvcigpIHt9XHJcblxyXG4gICAgLy8gQ8OhYyBwaMawxqFuZyB0aOG7qWNcclxuICAgIGluaXQgPSAoKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgcmVxdWVzdCA9IGluZGV4ZWREQi5vcGVuKFwidnBzREJcIiwgMSk7XHJcbiAgICAgICAgICAgIHJlcXVlc3Qub251cGdyYWRlbmVlZGVkID0gZSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIm9udXBncmFkZW5lZWRlZFwiKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGF0YWJhc2UgPSBlLnRhcmdldC5yZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGFiYXNlLmNyZWF0ZU9iamVjdFN0b3JlKFwiZGF0YVwiLCB7IGtleVBhdGg6IFwidGltZVwiIH0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhYmFzZS5jcmVhdGVPYmplY3RTdG9yZShcIm9yZGVyXCIsIHsga2V5UGF0aDogXCJraW5kXCIgfSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGFiYXNlLmNyZWF0ZU9iamVjdFN0b3JlKFwibWFya2VyXCIsIHsga2V5UGF0aDogXCJ0aW1lXCIgfSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGFiYXNlLmNyZWF0ZU9iamVjdFN0b3JlKFwibGluZVwiLCB7IGtleVBhdGg6IFwicHJpY2VcIiB9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGF0YWJhc2UuY3JlYXRlT2JqZWN0U3RvcmUoXCJydWxlclwiLCB7IGtleVBhdGg6IFwicG9pbnRcIiB9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGF0YWJhc2UuY3JlYXRlT2JqZWN0U3RvcmUoXCJhbGVydFwiLCB7IGtleVBhdGg6IFwicHJpY2VcIiB9KTtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgcmVxdWVzdC5vbnN1Y2Nlc3MgPSBlID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwib25zdWNjZXNzXCIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhYmFzZSA9IGUudGFyZ2V0LnJlc3VsdDtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgcmVxdWVzdC5vbmVycm9yID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJvbmVycm9yXCIpO1xyXG4gICAgICAgICAgICAgICAgbG9jYXRpb24ucmVsb2FkKCk7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBnZXQgPSB0YWJsZXMgPT4ge1xyXG4gICAgICAgIHZhciBkYXRhYmFzZSA9IHRoaXMuZGF0YWJhc2U7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICB2YXIgdHggPSBkYXRhYmFzZS50cmFuc2FjdGlvbih0YWJsZXMsIFwicmVhZG9ubHlcIik7XHJcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRhYmxlcykpIHtcclxuICAgICAgICAgICAgICAgIHZhciBzdG9yZXMgPSB0YWJsZXMubWFwKHRhYmxlID0+IHR4Lm9iamVjdFN0b3JlKHRhYmxlKSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgcHJvbWlzZXMgPSBzdG9yZXMubWFwKGxvYWRTdG9yZSk7XHJcbiAgICAgICAgICAgICAgICBQcm9taXNlLmFsbChwcm9taXNlcykudGhlbihhcnIgPT4gcmVzb2x2ZShhcnIpKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZhciBzdG9yZSA9IHR4Lm9iamVjdFN0b3JlKHRhYmxlcyk7XHJcbiAgICAgICAgICAgICAgICBsb2FkU3RvcmUoc3RvcmUpLnRoZW4oZCA9PiByZXNvbHZlKGQpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBsb2FkU3RvcmUoc3RvcmUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVxdWVzdCA9IHN0b3JlLmdldEFsbCgpO1xyXG4gICAgICAgICAgICAgICAgcmVxdWVzdC5vbnN1Y2Nlc3MgPSBlID0+IHJlc29sdmUoZS50YXJnZXQucmVzdWx0KTtcclxuICAgICAgICAgICAgICAgIHJlcXVlc3Qub25lcnJvciA9ICgpID0+IHJlamVjdCgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgc2V0ID0gKHRhYmxlLCBkYXRhKSA9PiB7XHJcbiAgICAgICAgY29uc3Qgc3RvcmUgPSB0aGlzLmRhdGFiYXNlXHJcbiAgICAgICAgICAgIC50cmFuc2FjdGlvbih0YWJsZSwgXCJyZWFkd3JpdGVcIilcclxuICAgICAgICAgICAgLm9iamVjdFN0b3JlKHRhYmxlKTtcclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShkYXRhKSkge1xyXG4gICAgICAgICAgICBpZiAoZGF0YS5sZW5ndGggPiAwKSBkYXRhLmZvckVhY2goaXRlbSA9PiBzdG9yZS5wdXQoaXRlbSkpO1xyXG4gICAgICAgIH0gZWxzZSBzdG9yZS5wdXQoZGF0YSk7XHJcbiAgICB9O1xyXG4gICAgY2xlYXIgPSB0YWJsZSA9PiB7XHJcbiAgICAgICAgdmFyIGRhdGFiYXNlID0gdGhpcy5kYXRhYmFzZTtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlcXVlc3QgPSBkYXRhYmFzZVxyXG4gICAgICAgICAgICAgICAgLnRyYW5zYWN0aW9uKHRhYmxlLCBcInJlYWR3cml0ZVwiKVxyXG4gICAgICAgICAgICAgICAgLm9iamVjdFN0b3JlKHRhYmxlKVxyXG4gICAgICAgICAgICAgICAgLmNsZWFyKCk7XHJcblxyXG4gICAgICAgICAgICByZXF1ZXN0Lm9uc3VjY2VzcyA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHJlcXVlc3Qub25lcnJvciA9IGVyciA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGBFcnJvciB0byBlbXB0eSBPYmplY3QgU3RvcmU6ICR7dGFibGV9YCk7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbn1cclxuIiwiY2xhc3MgU21hcnRPcmRlciB7XHJcbiAgICAvL1xyXG4gICAgLy8gQ8OhYyB0aHXhu5ljIHTDrW5oXHJcbiAgICBBUFBfTkFNRSA9IFwiU21hcnRPcmRlclwiO1xyXG4gICAgbm90aWZpZXIgPSBuZXcgTm90aWZpZXIoKTtcclxuICAgIGxvY2FsREIgPSBuZXcgTG9jYWxEYXRhYmFzZSgpO1xyXG4gICAgYXVkaW8gPSBuZXcgQXVkaW8oY2hyb21lLnJ1bnRpbWUuZ2V0VVJMKFwiYWxlcnQud2F2XCIpKTtcclxuICAgIGlzTW9iaWxlID0gbmF2aWdhdG9yLnVzZXJBZ2VudERhdGEubW9iaWxlO1xyXG4gICAgY3VycmVudFRpbWUgPSBtb21lbnQoKS51bml4KCk7XHJcbiAgICBsaWdodHdlaWdodCA9IG5ldyBMaWdodHdlaWdodCgpO1xyXG4gICAgb3B0aW9uVmlldyA9IG5ldyBPcHRpb25WaWV3KCk7XHJcblxyXG4gICAgLy8gSMOgbSBraOG7n2kgdOG6oW9cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIGdvb2cucmVxdWlyZShcInByb3RvLnRjYnMuQnV5U2VsbEFjdGl2ZVBvam9cIik7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ8OhYyBwaMawxqFuZyB0aOG7qWNcclxuICAgIGluaXQgPSBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5nZXREZXZpY2VJZCgpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwidmlzaXRvcklkOiBcIiwgdGhpcy5kZXZpY2VJZCk7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5nZXRMb2NhbENvbmZpZygpO1xyXG4gICAgICAgIGF3YWl0IHRoaXMub3B0aW9uVmlldy5nZXRVc2VyKFxyXG4gICAgICAgICAgICB0aGlzLmNvbmZpZy5yb290ICsgdGhpcy5jb25maWcuZW5kcG9pbnQudXNlclxyXG4gICAgICAgICk7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJ1c2VyOiBcIiwgdGhpcy5vcHRpb25WaWV3LnVzZXIpO1xyXG4gICAgICAgIHRoaXMuY3JlYXRlTWVudUJ1dHRvbnMoKTtcclxuICAgICAgICB0aGlzLnJlZ2lzdGVyRXZlbnQoKTtcclxuICAgICAgICB0aGlzLm9wdGlvblZpZXcuc2V0T3B0aW9ucyh7XHJcbiAgICAgICAgICAgIEFQUF9OQU1FOiB0aGlzLkFQUF9OQU1FLFxyXG4gICAgICAgICAgICBkZXZpY2VJZDogdGhpcy5kZXZpY2VJZCxcclxuICAgICAgICAgICAgbm90aWZpZXI6IHRoaXMubm90aWZpZXIsXHJcbiAgICAgICAgICAgIGxpZ2h0d2VpZ2h0OiB0aGlzLmxpZ2h0d2VpZ2h0LFxyXG4gICAgICAgICAgICByZWdpc3RlckVuZHBvaW50OiB0aGlzLmNvbmZpZy5yb290ICsgdGhpcy5jb25maWcuZW5kcG9pbnQucmVnaXN0ZXIsXHJcbiAgICAgICAgICAgIGxvZ2luRW5kcG9pbnQ6IHRoaXMuY29uZmlnLnJvb3QgKyB0aGlzLmNvbmZpZy5lbmRwb2ludC5sb2dpbixcclxuICAgICAgICAgICAgbG9nb3V0RW5kcG9pbnQ6IHRoaXMuY29uZmlnLnJvb3QgKyB0aGlzLmNvbmZpZy5lbmRwb2ludC5sb2dvdXQsXHJcbiAgICAgICAgICAgIG1lbnVCdXR0b25DYWxsYmFjazogdGhpcy50b2dnbGVCdXR0b25cclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLm9wdGlvblZpZXcuaW5pdCgpO1xyXG4gICAgICAgIGlmICh0aGlzLm9wdGlvblZpZXcuaXNMb2dlZGluKSB7XHJcbiAgICAgICAgICAgIHRoaXMubm90aWZpZXIuc2hvdyhcIndhcm5pbmdcIiwgXCLEkGFuZyBjw6BpIMSR4bq3dCBiaeG7g3UgxJHhu5MgLi4uXCIsIGZhbHNlKTtcclxuICAgICAgICAgICAgLy8gdGhpcy5jcmVhdGVNZW51QnV0dG9ucygpO1xyXG4gICAgICAgICAgICAvLyB0aGlzLnJlZ2lzdGVyRXZlbnQoKTtcclxuICAgICAgICAgICAgdGhpcy50b2dnbGVCdXR0b24odHJ1ZSk7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuZ2V0U2VydmVyQ29uZmlnKCk7XHJcbiAgICAgICAgICAgIHRoaXMubGlnaHR3ZWlnaHQuc2V0T3B0aW9ucyh7XHJcbiAgICAgICAgICAgICAgICBkYXRhRW5kcG9pbnQ6IHRoaXMuY29uZmlnLnJvb3QgKyB0aGlzLmNvbmZpZy5lbmRwb2ludC5kYXRhLFxyXG4gICAgICAgICAgICAgICAgYWNjZXNzVG9rZW46IHRoaXMub3B0aW9uVmlldy5hY2Nlc3NUb2tlbixcclxuICAgICAgICAgICAgICAgIGxvY2FsREI6IHRoaXMubG9jYWxEQixcclxuICAgICAgICAgICAgICAgIG5vdGlmaWVyOiB0aGlzLm5vdGlmaWVyLFxyXG4gICAgICAgICAgICAgICAgYXVkaW86IHRoaXMuYXVkaW8sXHJcbiAgICAgICAgICAgICAgICBpc01vYmlsZTogdGhpcy5pc01vYmlsZSxcclxuICAgICAgICAgICAgICAgIHRpbWVGcmFtZTogdGhpcy5jb25maWcudGltZUZyYW1lLFxyXG4gICAgICAgICAgICAgICAgc2hhcmtMaW1pdDogdGhpcy5jb25maWcuc2hhcmtMaW1pdCxcclxuICAgICAgICAgICAgICAgIGdldE9yZGVyUG9zaXRpb246IHRoaXMuZ2V0T3JkZXJQb3NpdGlvbixcclxuICAgICAgICAgICAgICAgIGNsb3NlUG9zaXRpb246IHRoaXMuY2xvc2VQb3NpdGlvbixcclxuICAgICAgICAgICAgICAgIG9yZGVyRW50cnlQcmljZTogdGhpcy5vcmRlckVudHJ5UHJpY2UsXHJcbiAgICAgICAgICAgICAgICBvcmRlclRwUHJpY2U6IHRoaXMub3JkZXJUcFByaWNlLFxyXG4gICAgICAgICAgICAgICAgb3JkZXJTbFByaWNlOiB0aGlzLm9yZGVyU2xQcmljZSxcclxuICAgICAgICAgICAgICAgIGNhbmNlbE9yZGVyOiB0aGlzLmNhbmNlbE9yZGVyXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB0aGlzLmxpZ2h0d2VpZ2h0LmluaXQoKTtcclxuXHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMubG9jYWxEQi5pbml0KCk7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMubGlnaHR3ZWlnaHQubG9hZENoYXJ0RGF0YSgpO1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLmxpZ2h0d2VpZ2h0LmdldEhlbHBlckRhdGEoKTtcclxuICAgICAgICAgICAgdGhpcy5jb25uZWN0U29ja2V0KCk7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxyXG4gICAgICAgICAgICAgICAgXCJzb2hvcGRvbmdcIlxyXG4gICAgICAgICAgICApLnZhbHVlID0gdGhpcy5jb25maWcuY29udHJhY3ROdW1iZXI7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicmlnaHRfcHJpY2VcIikudmFsdWUgPSBcIk1UTFwiO1xyXG4gICAgICAgICAgICB0aGlzLmF1ZGlvLmxvb3AgPSB0cnVlO1xyXG4gICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICBzZXRJbnRlcnZhbCgoKSA9PiB0aGlzLmludGVydmFsSGFuZGxlcih0aGlzKSwgMTAwMCk7XHJcbiAgICAgICAgICAgIHNldEludGVydmFsKCgpID0+IHRoaXMucmVmcmVzaERhdGFJblNlc3Npb24odGhpcyksIDYwMDAwKTtcclxuICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgdGhpcy5ub3RpZmllci5oaWRlKCk7XHJcbiAgICAgICAgICAgIHRoaXMubGlnaHRXZWlnaHRCdXR0b24uY2xpY2soKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLm9wdGlvbkJ1dHRvbi5jbGljaygpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBnZXRMb2NhbENvbmZpZyA9ICgpID0+IHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBmaWxlID0gY2hyb21lLnJ1bnRpbWUuZ2V0VVJMKFwiY29uZmlnLmpzb25cIik7XHJcbiAgICAgICAgICAgIGZldGNoKGZpbGUpXHJcbiAgICAgICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkpXHJcbiAgICAgICAgICAgICAgICAudGhlbihqc29uID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcImxvY2FsQ29uZmlnXCIsIGpzb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29uZmlnID0ganNvbjtcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLmNhdGNoKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjaG9pY2UgPSBjb25maXJtKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcIkdldCBsb2NhbCBjb25maWcgZXJyb3IuIFJlZnJlc2ggbm93P1wiXHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2hvaWNlKSBsb2NhdGlvbi5yZWxvYWQoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIGdldFNlcnZlckNvbmZpZyA9ICgpID0+IHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCB1cmwgPSB0aGlzLmNvbmZpZy5yb290ICsgdGhpcy5jb25maWcuZW5kcG9pbnQuY29uZmlnO1xyXG4gICAgICAgICAgICBmZXRjaCh1cmwsIHtcclxuICAgICAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXHJcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke3RoaXMub3B0aW9uVmlldy5hY2Nlc3NUb2tlbn1gXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe30pXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkpXHJcbiAgICAgICAgICAgICAgICAudGhlbihqc29uID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInNlcnZlckNvbmZpZ1wiLCBqc29uKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbmZpZyA9IHsgLi4udGhpcy5jb25maWcsIC4uLmpzb24gfTtcclxuICAgICAgICAgICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAuY2F0Y2goZXJyID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjaG9pY2UgPSBjb25maXJtKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcIkdldCBzZXJ2ZXIgY29uZmlnIGVycm9yLiBSZWZyZXNoIG5vdz9cIlxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNob2ljZSkgbG9jYXRpb24ucmVsb2FkKCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBjcmVhdGVNZW51QnV0dG9ucyA9ICgpID0+IHtcclxuICAgICAgICB2YXIgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICBjb250YWluZXIuaWQgPSBcImRpcmVjdGlvbkNvbW1hbmREaXZcIjtcclxuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZChjb250YWluZXIpO1xyXG4gICAgICAgIC8vXHJcbiAgICAgICAgdGhpcy5jcmVhdGVUcmFkaW5nVmlld0J1dHRvbihjb250YWluZXIpO1xyXG4gICAgICAgIHRoaXMuY3JlYXRlTGlnaHRXZWlnaHRCdXR0b24oY29udGFpbmVyKTtcclxuICAgICAgICB0aGlzLmNyZWF0ZU9wdGlvbkJ1dHRvbihjb250YWluZXIpO1xyXG4gICAgICAgIHRoaXMuY3JlYXRlUmVwb3J0QnV0dG9uKGNvbnRhaW5lcik7XHJcbiAgICB9O1xyXG4gICAgY3JlYXRlVHJhZGluZ1ZpZXdCdXR0b24gPSBjb250YWluZXIgPT4ge1xyXG4gICAgICAgIHZhciBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xyXG4gICAgICAgIGJ1dHRvbi5pZCA9IFwidHJhZGluZ1ZpZXdCdXR0b25cIjtcclxuICAgICAgICBidXR0b24uY2xhc3NMaXN0ID0gXCJmYSBmYS1iYXItY2hhcnRcIjtcclxuICAgICAgICBidXR0b24udGl0bGUgPSBcIlRyYWRpbmdWaWV3IENoYXJ0XCI7XHJcbiAgICAgICAgYnV0dG9uLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgICAgICAgdmFyIGxlZnRFbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibGVmdF9vcmRlcl90eXBlXCIpO1xyXG4gICAgICAgICAgICB2YXIgcmlnaHRFbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicmlnaHRfb3JkZXJfdHlwZVwiKTtcclxuICAgICAgICAgICAgdmFyIG9yZGVyRWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICAgICAgICAgICAgXCIjbWFpbkZvb3RlciAuZm9vdF90YWI6bnRoLWNoaWxkKDEpXCJcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgdmFyIGNvbmRPcmRlckVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcclxuICAgICAgICAgICAgICAgIFwiI21haW5Gb290ZXIgLmZvb3RfdGFiOm50aC1jaGlsZCgyKVwiXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIG9yZGVyRWwuY2xhc3NMaXN0LnJlbW92ZShcImZhXCIsIFwiZmEtY2hlY2stY2lyY2xlXCIpO1xyXG4gICAgICAgICAgICBjb25kT3JkZXJFbC5jbGFzc0xpc3QucmVtb3ZlKFwiZmFcIiwgXCJmYS1xdWVzdGlvbi1jaXJjbGVcIik7XHJcbiAgICAgICAgICAgIGlmIChkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5jb250YWlucyhcInRyYWRpbmd2aWV3LWNoYXJ0XCIpKSB7XHJcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoXCJ0cmFkaW5ndmlldy1jaGFydFwiKTtcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZShcImZ1bGwtY2hhcnRcIik7XHJcbiAgICAgICAgICAgICAgICBsZWZ0RWwuaW5uZXJUZXh0ID0gXCJM4buHbmggdGjGsOG7nW5nXCI7XHJcbiAgICAgICAgICAgICAgICByaWdodEVsLmlubmVyVGV4dCA9IFwiTOG7h25oIMSRaeG7gXUga2nhu4duXCI7XHJcbiAgICAgICAgICAgICAgICBvcmRlckVsLmlubmVyVGV4dCA9IFwiREFOSCBTw4FDSCBM4buGTkhcIjtcclxuICAgICAgICAgICAgICAgIGNvbmRPcmRlckVsLmlubmVyVGV4dCA9IFwiREFOSCBTw4FDSCBM4buGTkggxJBJ4buAVSBLSeG7hk5cIjtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZChcInRyYWRpbmd2aWV3LWNoYXJ0XCIpO1xyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKFwiZnVsbC1jaGFydFwiKTtcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZShcImxpZ2h0d2VpZ2h0LWNoYXJ0XCIpO1xyXG4gICAgICAgICAgICAgICAgbGVmdEVsLmlubmVyVGV4dCA9IFwiTFRcIjtcclxuICAgICAgICAgICAgICAgIHJpZ2h0RWwuaW5uZXJUZXh0ID0gXCJMxJBLXCI7XHJcbiAgICAgICAgICAgICAgICBvcmRlckVsLmlubmVyVGV4dCA9IFwiTOG7hk5IIFRIxq/hu5xOR1wiO1xyXG4gICAgICAgICAgICAgICAgY29uZE9yZGVyRWwuaW5uZXJUZXh0ID0gXCJMLiDEkEnhu4BVIEtJ4buGTlwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZChidXR0b24pO1xyXG4gICAgICAgIHRoaXMudHJhZGluZ1ZpZXdCdXR0b24gPSBidXR0b247XHJcbiAgICB9O1xyXG4gICAgY3JlYXRlTGlnaHRXZWlnaHRCdXR0b24gPSBjb250YWluZXIgPT4ge1xyXG4gICAgICAgIHZhciBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xyXG4gICAgICAgIGJ1dHRvbi5pZCA9IFwibGlnaHRXZWlnaHRCdXR0b25cIjtcclxuICAgICAgICBidXR0b24uY2xhc3NMaXN0ID0gXCJmYSBmYS1saW5lLWNoYXJ0XCI7XHJcbiAgICAgICAgYnV0dG9uLnRpdGxlID0gXCJMaWdodFdlaWdodCBDaGFydFwiO1xyXG4gICAgICAgIGJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHZhciBsZWZ0RWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImxlZnRfb3JkZXJfdHlwZVwiKTtcclxuICAgICAgICAgICAgdmFyIHJpZ2h0RWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJpZ2h0X29yZGVyX3R5cGVcIik7XHJcbiAgICAgICAgICAgIHZhciBvcmRlckVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcclxuICAgICAgICAgICAgICAgIFwiI21haW5Gb290ZXIgLmZvb3RfdGFiOm50aC1jaGlsZCgxKVwiXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIHZhciBjb25kT3JkZXJFbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgICAgICAgICAgICBcIiNtYWluRm9vdGVyIC5mb290X3RhYjpudGgtY2hpbGQoMilcIlxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICBpZiAoZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuY29udGFpbnMoXCJsaWdodHdlaWdodC1jaGFydFwiKSkge1xyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKFwibGlnaHR3ZWlnaHQtY2hhcnRcIik7XHJcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoXCJmdWxsLWNoYXJ0XCIpO1xyXG4gICAgICAgICAgICAgICAgbGVmdEVsLmlubmVyVGV4dCA9IFwiTOG7h25oIHRoxrDhu51uZ1wiO1xyXG4gICAgICAgICAgICAgICAgcmlnaHRFbC5pbm5lclRleHQgPSBcIkzhu4duaCDEkWnhu4F1IGtp4buHblwiO1xyXG4gICAgICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgICAgIG9yZGVyRWwuY2xhc3NMaXN0LnJlbW92ZShcImZhXCIsIFwiZmEtY2hlY2stY2lyY2xlXCIpO1xyXG4gICAgICAgICAgICAgICAgb3JkZXJFbC5pbm5lclRleHQgPSBcIkRBTkggU8OBQ0ggTOG7hk5IXCI7XHJcbiAgICAgICAgICAgICAgICBjb25kT3JkZXJFbC5jbGFzc0xpc3QucmVtb3ZlKFwiZmFcIiwgXCJmYS1xdWVzdGlvbi1jaXJjbGVcIik7XHJcbiAgICAgICAgICAgICAgICBjb25kT3JkZXJFbC5pbm5lclRleHQgPSBcIkRBTkggU8OBQ0ggTOG7hk5IIMSQSeG7gFUgS0nhu4ZOXCI7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoXCJsaWdodHdlaWdodC1jaGFydFwiKTtcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZChcImZ1bGwtY2hhcnRcIik7XHJcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoXCJ0cmFkaW5ndmlldy1jaGFydFwiKTtcclxuICAgICAgICAgICAgICAgIGxlZnRFbC5pbm5lclRleHQgPSBcIkxUXCI7XHJcbiAgICAgICAgICAgICAgICByaWdodEVsLmlubmVyVGV4dCA9IFwiTMSQS1wiO1xyXG4gICAgICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgICAgIG9yZGVyRWwuY2xhc3NMaXN0LmFkZChcImZhXCIsIFwiZmEtY2hlY2stY2lyY2xlXCIpO1xyXG4gICAgICAgICAgICAgICAgb3JkZXJFbC5pbm5lclRleHQgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgY29uZE9yZGVyRWwuY2xhc3NMaXN0LmFkZChcImZhXCIsIFwiZmEtcXVlc3Rpb24tY2lyY2xlXCIpO1xyXG4gICAgICAgICAgICAgICAgY29uZE9yZGVyRWwuaW5uZXJUZXh0ID0gXCJcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGNvbnRhaW5lci5hcHBlbmQoYnV0dG9uKTtcclxuICAgICAgICB0aGlzLmxpZ2h0V2VpZ2h0QnV0dG9uID0gYnV0dG9uO1xyXG4gICAgfTtcclxuICAgIGNyZWF0ZU9wdGlvbkJ1dHRvbiA9IGNvbnRhaW5lciA9PiB7XHJcbiAgICAgICAgdmFyIGJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XHJcbiAgICAgICAgYnV0dG9uLmlkID0gXCJvcHRpb25CdXR0b25cIjtcclxuICAgICAgICBidXR0b24uY2xhc3NMaXN0ID0gXCJmYSBmYS1jb2dcIjtcclxuICAgICAgICBidXR0b24udGl0bGUgPSBcIk9wdGlvblwiO1xyXG4gICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4gdGhpcy5vcHRpb25CdXR0b25DbGljayh0aGlzKSk7XHJcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZChidXR0b24pO1xyXG4gICAgICAgIHRoaXMub3B0aW9uQnV0dG9uID0gYnV0dG9uO1xyXG4gICAgfTtcclxuICAgIG9wdGlvbkJ1dHRvbkNsaWNrID0gc2VsZiA9PiB7XHJcbiAgICAgICAgc2VsZi5vcHRpb25WaWV3LnRvZ2dsZSgpO1xyXG4gICAgfTtcclxuICAgIGNyZWF0ZVJlcG9ydEJ1dHRvbiA9IGNvbnRhaW5lciA9PiB7XHJcbiAgICAgICAgdmFyIGJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XHJcbiAgICAgICAgYnV0dG9uLmlkID0gXCJyZXBvcnRCdXR0b25cIjtcclxuICAgICAgICBidXR0b24uY2xhc3NMaXN0ID0gXCJmYSBmYS1mbGFnLWNoZWNrZXJlZFwiO1xyXG4gICAgICAgIGJ1dHRvbi50aXRsZSA9IFwiUmVwb3J0XCI7XHJcbiAgICAgICAgYnV0dG9uLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHRoaXMucmVwb3J0QnV0dG9uQ2xpY2sodGhpcykpO1xyXG4gICAgICAgIGNvbnRhaW5lci5hcHBlbmQoYnV0dG9uKTtcclxuICAgICAgICB0aGlzLnJlcG9ydEJ1dHRvbiA9IGJ1dHRvbjtcclxuICAgIH07XHJcbiAgICByZXBvcnRCdXR0b25DbGljayA9IHNlbGYgPT4ge1xyXG4gICAgICAgIGlmIChzZWxmLmN1cnJlbnRUaW1lID4gc2VsZi5jb25maWcudGltZS5lbmQpIHNlbGYucmVwb3J0SGFuZGxlcigpO1xyXG4gICAgfTtcclxuICAgIHJlZ2lzdGVyRXZlbnQgPSAoKSA9PiB7XHJcbiAgICAgICAgZG9jdW1lbnRcclxuICAgICAgICAgICAgLnF1ZXJ5U2VsZWN0b3IoXCIudGltZVN0YW1wXCIpXHJcbiAgICAgICAgICAgIC5hZGRFdmVudExpc3RlbmVyKFwiZGJsY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50LmZ1bGxzY3JlZW5FbGVtZW50KSBkb2N1bWVudC5leGl0RnVsbHNjcmVlbigpO1xyXG4gICAgICAgICAgICAgICAgZWxzZSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQucmVxdWVzdEZ1bGxzY3JlZW4oKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLy9cclxuICAgIGdldE9yZGVyUG9zaXRpb24gPSAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICAgICAgICBgI2RhbmhtdWNfJHt0aGlzLmNvbmZpZy5zeW1ib2x9ID4gdGQ6bnRoLWNoaWxkKDIpYFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgaWYgKCFlbCkgcmV0dXJuIDA7XHJcbiAgICAgICAgY29uc3QgcG9zaXRpb24gPSBlbC5pbm5lclRleHQ7XHJcbiAgICAgICAgaWYgKGlzTmFOKHBvc2l0aW9uKSkgcmV0dXJuIDA7XHJcbiAgICAgICAgZWxzZSByZXR1cm4gK3Bvc2l0aW9uO1xyXG4gICAgfTtcclxuICAgIGNsb3NlUG9zaXRpb24gPSAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgcG9zaXRpb24gPSB0aGlzLmdldE9yZGVyUG9zaXRpb24oKTtcclxuICAgICAgICBpZiAocG9zaXRpb24pIHtcclxuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzZWxlY3Rfbm9ybWFsX29yZGVyX3dyYXBwZXJcIikuY2xpY2soKTtcclxuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyaWdodF9wcmljZVwiKS52YWx1ZSA9IFwiTVRMXCI7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic29ob3Bkb25nXCIpLnZhbHVlID0gTWF0aC5hYnMocG9zaXRpb24pO1xyXG4gICAgICAgICAgICBkb2N1bWVudFxyXG4gICAgICAgICAgICAgICAgLmdldEVsZW1lbnRCeUlkKGBidG5fJHtwb3NpdGlvbiA+IDAgPyBcInNob3J0XCIgOiBcImxvbmdcIn1gKVxyXG4gICAgICAgICAgICAgICAgLmNsaWNrKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIG9yZGVyRW50cnlQcmljZSA9IG9yZGVyID0+IHtcclxuICAgICAgICB0aGlzLmNhbGxTY3JpcHQoXCJvbkNhbmNlbEFsbE9yZGVyUGVuZGluZygnb3JkZXJfY29uZGl0aW9uJylcIik7XHJcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzZWxlY3RfY29uZGl0aW9uX29yZGVyX3dyYXBwZXJcIikuY2xpY2soKTtcclxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJpZ2h0X3N0b3BPcmRlckluZGV4XCIpLnZhbHVlID1cclxuICAgICAgICAgICAgb3JkZXIuZW50cnkucHJpY2U7XHJcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyaWdodF9wcmljZVwiKS52YWx1ZSA9IFwiTVRMXCI7XHJcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyaWdodF9zZWxTdG9wT3JkZXJUeXBlXCIpLnZhbHVlID1cclxuICAgICAgICAgICAgb3JkZXIuc2lkZSA+IDAgPyBcIlNPTFwiIDogXCJTT1VcIjtcclxuICAgICAgICAvL1xyXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBkb2N1bWVudFxyXG4gICAgICAgICAgICAgICAgLmdldEVsZW1lbnRCeUlkKGBidG5fJHtvcmRlci5zaWRlID4gMCA/IFwibG9uZ1wiIDogXCJzaG9ydFwifWApXHJcbiAgICAgICAgICAgICAgICAuY2xpY2soKTtcclxuICAgICAgICB9LCAxMDAwKTtcclxuICAgIH07XHJcbiAgICBvcmRlclRwUHJpY2UgPSAob3JkZXIsIGlzSW5pdCA9IGZhbHNlKSA9PiB7XHJcbiAgICAgICAgdGhpcy5jYWxsU2NyaXB0KFwib25DYW5jZWxBbGxPcmRlclBlbmRpbmcoJ29yZGVyJylcIik7XHJcbiAgICAgICAgaWYgKGlzSW5pdClcclxuICAgICAgICAgICAgb3JkZXIudHAucHJpY2UgPVxyXG4gICAgICAgICAgICAgICAgK29yZGVyLmVudHJ5LnByaWNlICsgb3JkZXIuc2lkZSAqIHRoaXMuY29uZmlnLm9yZGVyLlRQO1xyXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNlbGVjdF9ub3JtYWxfb3JkZXJfd3JhcHBlclwiKS5jbGljaygpO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJpZ2h0X3ByaWNlXCIpLnZhbHVlID0gb3JkZXIudHAucHJpY2U7XHJcbiAgICAgICAgICAgIGRvY3VtZW50XHJcbiAgICAgICAgICAgICAgICAuZ2V0RWxlbWVudEJ5SWQoYGJ0bl8ke29yZGVyLnNpZGUgPCAwID8gXCJsb25nXCIgOiBcInNob3J0XCJ9YClcclxuICAgICAgICAgICAgICAgIC5jbGljaygpO1xyXG4gICAgICAgIH0sIDEwMDApO1xyXG4gICAgfTtcclxuICAgIG9yZGVyU2xQcmljZSA9IChvcmRlciwgaXNJbml0ID0gZmFsc2UpID0+IHtcclxuICAgICAgICB0aGlzLmNhbGxTY3JpcHQoXCJvbkNhbmNlbEFsbE9yZGVyUGVuZGluZygnb3JkZXJfY29uZGl0aW9uJylcIik7XHJcbiAgICAgICAgaWYgKGlzSW5pdClcclxuICAgICAgICAgICAgb3JkZXIuc2wucHJpY2UgPVxyXG4gICAgICAgICAgICAgICAgK29yZGVyLmVudHJ5LnByaWNlIC0gb3JkZXIuc2lkZSAqIHRoaXMuY29uZmlnLm9yZGVyLlNMO1xyXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNlbGVjdF9jb25kaXRpb25fb3JkZXJfd3JhcHBlclwiKS5jbGljaygpO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJpZ2h0X3N0b3BPcmRlckluZGV4XCIpLnZhbHVlID1cclxuICAgICAgICAgICAgICAgIG9yZGVyLnNsLnByaWNlO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJpZ2h0X3ByaWNlXCIpLnZhbHVlID0gXCJNVExcIjtcclxuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyaWdodF9zZWxTdG9wT3JkZXJUeXBlXCIpLnZhbHVlID1cclxuICAgICAgICAgICAgICAgIG9yZGVyLnNpZGUgPCAwID8gXCJTT0xcIiA6IFwiU09VXCI7XHJcbiAgICAgICAgICAgIGRvY3VtZW50XHJcbiAgICAgICAgICAgICAgICAuZ2V0RWxlbWVudEJ5SWQoYGJ0bl8ke29yZGVyLnNpZGUgPCAwID8gXCJsb25nXCIgOiBcInNob3J0XCJ9YClcclxuICAgICAgICAgICAgICAgIC5jbGljaygpO1xyXG4gICAgICAgIH0sIDEwMDApO1xyXG4gICAgfTtcclxuICAgIGNhbmNlbE9yZGVyID0gKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuY2FsbFNjcmlwdChcIm9uQ2FuY2VsQWxsT3JkZXJQZW5kaW5nKCdvcmRlcl9jb25kaXRpb24nKVwiKTtcclxuICAgICAgICB0aGlzLmNhbGxTY3JpcHQoXCJvbkNhbmNlbEFsbE9yZGVyUGVuZGluZygnb3JkZXInKVwiKTtcclxuICAgIH07XHJcbiAgICBjb25uZWN0U29ja2V0ID0gKCkgPT4ge1xyXG4gICAgICAgIHZhciB3cyA9IG5ldyBXZWJTb2NrZXQodGhpcy5jb25maWcuZW5kcG9pbnQuc29ja2V0KTtcclxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgd3Mub25vcGVuID0gZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICB3cy5zZW5kKGBkfHN0fEMwMDF8JHtzZWxmLmNvbmZpZy5zeW1ib2x9YCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB3cy5vbmNsb3NlID0gZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIndzLWNsb3NlXCIsIGUpO1xyXG4gICAgICAgICAgICBpZiAoc2VsZi5yZWZyZXNoRGF0YUluU2Vzc2lvbihzZWxmKSkgc2VsZi5jb25uZWN0U29ja2V0KCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB3cy5vbm1lc3NhZ2UgPSBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHQgPSBlLmRhdGEuc3BsaXQoXCJ8XCIpO1xyXG4gICAgICAgICAgICBpZiAodFswXSA9PSBcIkMwMDFcIikge1xyXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJ3cy1tZXNzYWdlXCIsIGUuZGF0YSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gcHJvdG8udGNicy5CdXlTZWxsQWN0aXZlUG9qby5kZXNlcmlhbGl6ZUJpbmFyeShcclxuICAgICAgICAgICAgICAgICAgICBiYXNlNjRUb0FycmF5VW5pdDgodFsyXSlcclxuICAgICAgICAgICAgICAgICkudG9PYmplY3QoKTtcclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwibWVzc2FnZTogXCIsIG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgc2VsZi5saWdodHdlaWdodC51cGRhdGVDaGFydERhdGEobWVzc2FnZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHdzLm9uZXJyb3IgPSBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwid3MtZXJyb3JcIiwgZSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gYmFzZTY0VG9BcnJheVVuaXQ4KGcpIHtcclxuICAgICAgICAgICAgZm9yIChcclxuICAgICAgICAgICAgICAgIHZhciBwID0gd2luZG93LmF0b2IoZyksXHJcbiAgICAgICAgICAgICAgICAgICAgciA9IHAubGVuZ3RoLFxyXG4gICAgICAgICAgICAgICAgICAgIGggPSBuZXcgVWludDhBcnJheShyKSxcclxuICAgICAgICAgICAgICAgICAgICBBID0gMDtcclxuICAgICAgICAgICAgICAgIEEgPCByO1xyXG4gICAgICAgICAgICAgICAgQSsrXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgIGhbQV0gPSBwLmNoYXJDb2RlQXQoQSk7XHJcbiAgICAgICAgICAgIHJldHVybiBoO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBpbnRlcnZhbEhhbmRsZXIgPSBzZWxmID0+IHtcclxuICAgICAgICBzZWxmLmN1cnJlbnRUaW1lID0gbW9tZW50KCkudW5peCgpO1xyXG4gICAgICAgIC8vIEJlZ2luIFNvY2tldFxyXG4gICAgICAgIGlmIChzZWxmLmN1cnJlbnRUaW1lID09IHNlbGYuY29uZmlnLnRpbWUuc3RhcnQpXHJcbiAgICAgICAgICAgIHNlbGYubGlnaHR3ZWlnaHQuY29ubmVjdFNvY2tldCgpO1xyXG4gICAgICAgIC8vIFJlcG9ydFxyXG4gICAgICAgIGlmIChzZWxmLmN1cnJlbnRUaW1lID09IHNlbGYuY29uZmlnLnRpbWUuZW5kKSBzZWxmLnJlcG9ydEhhbmRsZXIoKTtcclxuICAgICAgICAvL1xyXG4gICAgICAgIHNlbGYuc2hvd1J1bm5pbmdTdGF0dXMoKTtcclxuICAgIH07XHJcbiAgICByZXBvcnRIYW5kbGVyID0gKCkgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLmNvbmZpZy5pc09wZW5pbmdNYXJrZXQgJiYgIXRoaXMuY29uZmlnLmlzUmVwb3J0ZWRSZXN1bHQpIHtcclxuICAgICAgICAgICAgdGhpcy5jb25maWcuaXNSZXBvcnRlZFJlc3VsdCA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMubGlnaHR3ZWlnaHQudG9nZ2xlU3Bpbm5lcih0cnVlKTtcclxuICAgICAgICAgICAgY29uc3QgdXJsID0gdGhpcy5jb25maWcucm9vdCArIHRoaXMuY29uZmlnLmVuZHBvaW50LnJlcG9ydDtcclxuICAgICAgICAgICAgY29uc3QgZGF0YSA9IHtcclxuICAgICAgICAgICAgICAgIHJldmVudWU6ICtkb2N1bWVudFxyXG4gICAgICAgICAgICAgICAgICAgIC5nZXRFbGVtZW50QnlJZChcInZtQWNjSW5mb1wiKVxyXG4gICAgICAgICAgICAgICAgICAgIC5pbm5lclRleHQucmVwbGFjZUFsbChcIixcIiwgXCJcIiksXHJcbiAgICAgICAgICAgICAgICBmZWVzOiArZG9jdW1lbnRcclxuICAgICAgICAgICAgICAgICAgICAuZ2V0RWxlbWVudEJ5SWQoXCJvdGhlcnNBY2NJbmZvXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgLmlubmVyVGV4dC5yZXBsYWNlQWxsKFwiLFwiLCBcIlwiKVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBmZXRjaCh1cmwsIHtcclxuICAgICAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXHJcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7IFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiIH0sXHJcbiAgICAgICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShkYXRhKVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5vaykgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oanNvbmRhdGEgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29uZmlnLmlzUmVwb3J0ZWRSZXN1bHQgPSBqc29uZGF0YS5pc09rO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChqc29uZGF0YS5pc09rKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqc29uZGF0YS5pc0V4ZWN1dGVkKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RpZmllci5zaG93KFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic3VjY2Vzc1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiQsOhbyBjw6FvIMSRw6MgZ+G7rWkgdGjDoG5oIGPDtG5nLlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHRoaXMubm90aWZpZXIuc2hvdyhcIndhcm5pbmdcIiwgXCLEkMOjIGfhu61pIGLDoW8gY8Ohb1wiKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxpZ2h0d2VpZ2h0LnRvZ2dsZVNwaW5uZXIoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC5jYXRjaChlcnJvciA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb25maWcuaXNSZXBvcnRlZFJlc3VsdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubm90aWZpZXIuc2hvdyhcImVycm9yXCIsIFwiR+G7rWkgYsOhbyBjw6FvIHRo4bqldCBi4bqhaVwiKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxpZ2h0d2VpZ2h0LnRvZ2dsZVNwaW5uZXIoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHNob3dSdW5uaW5nU3RhdHVzID0gKCkgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLmxpZ2h0V2VpZ2h0QnV0dG9uLmNsYXNzTGlzdC5jb250YWlucyhcImRhcmtcIikpXHJcbiAgICAgICAgICAgIHRoaXMubGlnaHRXZWlnaHRCdXR0b24uY2xhc3NMaXN0LnJlbW92ZShcImRhcmtcIik7XHJcbiAgICAgICAgZWxzZSB0aGlzLmxpZ2h0V2VpZ2h0QnV0dG9uLmNsYXNzTGlzdC5hZGQoXCJkYXJrXCIpO1xyXG4gICAgfTtcclxuICAgIHJlZnJlc2hEYXRhSW5TZXNzaW9uID0gc2VsZiA9PiB7XHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICBzZWxmLmN1cnJlbnRUaW1lID49IHNlbGYuY29uZmlnLnRpbWUuc3RhcnQgJiZcclxuICAgICAgICAgICAgc2VsZi5jdXJyZW50VGltZSA8PSBzZWxmLmNvbmZpZy50aW1lLmVuZFxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBzZWxmLmxpZ2h0d2VpZ2h0LmxvYWRDaGFydERhdGEoKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH07XHJcbiAgICBjYWxsU2NyaXB0ID0gc2NyaXB0ID0+IHtcclxuICAgICAgICB2YXIgYnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcclxuICAgICAgICBidXR0b24uc2V0QXR0cmlidXRlKFwib25jbGlja1wiLCBzY3JpcHQpO1xyXG4gICAgICAgIGJ1dHRvbi5jbGljaygpO1xyXG4gICAgfTtcclxuICAgIHRvZ2dsZUJ1dHRvbiA9IHZpc2libGUgPT4ge1xyXG4gICAgICAgIGNvbnN0IGRpc3BsYXkgPSB2aXNpYmxlID8gXCJibG9ja1wiIDogXCJub25lXCI7XHJcbiAgICAgICAgdGhpcy50cmFkaW5nVmlld0J1dHRvbi5zdHlsZS5kaXNwbGF5ID0gZGlzcGxheTtcclxuICAgICAgICB0aGlzLmxpZ2h0V2VpZ2h0QnV0dG9uLnN0eWxlLmRpc3BsYXkgPSBkaXNwbGF5O1xyXG4gICAgICAgIHRoaXMucmVwb3J0QnV0dG9uLnN0eWxlLmRpc3BsYXkgPSBkaXNwbGF5O1xyXG4gICAgfTtcclxuICAgIGdldERldmljZUlkID0gKCkgPT4ge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcclxuICAgICAgICAgICAgRmluZ2VycHJpbnRKUy5sb2FkKClcclxuICAgICAgICAgICAgICAgIC50aGVuKGZwID0+IGZwLmdldCgpKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4ocmVzdWx0ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRldmljZUlkID0gcmVzdWx0LnZpc2l0b3JJZDtcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbn1cclxuXHJcbnZhciBzbyA9IG5ldyBTbWFydE9yZGVyKCk7XHJcbnNvLmluaXQoKTtcclxuIl19

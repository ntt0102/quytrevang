goog.provide("proto.tcbs.BuySellActivePojo"),goog.provide("proto.tcbs.InvestorHistoryTrade"),goog.require("jspb.BinaryReader"),goog.require("jspb.BinaryWriter"),goog.require("jspb.Message"),proto.tcbs.BuySellActivePojo=function(e){jspb.Message.initialize(this,e,0,-1,null,null)},goog.inherits(proto.tcbs.BuySellActivePojo,jspb.Message),goog.DEBUG&&!COMPILED&&(proto.tcbs.BuySellActivePojo.displayName="proto.tcbs.BuySellActivePojo"),proto.tcbs.InvestorHistoryTrade=function(e){jspb.Message.initialize(this,e,0,-1,null,null)},goog.inherits(proto.tcbs.InvestorHistoryTrade,jspb.Message),goog.DEBUG&&!COMPILED&&(proto.tcbs.InvestorHistoryTrade.displayName="proto.tcbs.InvestorHistoryTrade"),jspb.Message.GENERATE_TO_OBJECT&&(proto.tcbs.BuySellActivePojo.prototype.toObject=function(e){return proto.tcbs.BuySellActivePojo.toObject(e,this)},proto.tcbs.BuySellActivePojo.toObject=function(e,t){var o={symbol:jspb.Message.getFieldWithDefault(t,1,""),closeprice:jspb.Message.getFloatingPointFieldWithDefault(t,2,0),closevol:jspb.Message.getFloatingPointFieldWithDefault(t,3,0),change:jspb.Message.getFloatingPointFieldWithDefault(t,4,0),reference:jspb.Message.getFloatingPointFieldWithDefault(t,5,0),totaltrading:jspb.Message.getFloatingPointFieldWithDefault(t,6,0),totaltradingvalue:jspb.Message.getFloatingPointFieldWithDefault(t,7,0),timesec:jspb.Message.getFieldWithDefault(t,8,0),action:jspb.Message.getFieldWithDefault(t,9,""),unittimeframe:jspb.Message.getFieldWithDefault(t,10,0),tradingvalue:jspb.Message.getFloatingPointFieldWithDefault(t,11,0),buyupacc:jspb.Message.getFloatingPointFieldWithDefault(t,12,0),selldownacc:jspb.Message.getFloatingPointFieldWithDefault(t,13,0),highlight:jspb.Message.getBooleanFieldWithDefault(t,14,!1),bidprice:jspb.Message.getFloatingPointFieldWithDefault(t,15,0),bidvol:jspb.Message.getFloatingPointFieldWithDefault(t,16,0),askprice:jspb.Message.getFloatingPointFieldWithDefault(t,17,0),askvol:jspb.Message.getFloatingPointFieldWithDefault(t,18,0),prevchange:jspb.Message.getFloatingPointFieldWithDefault(t,19,0)};return e&&(o.$jspbMessageInstance=t),o}),proto.tcbs.BuySellActivePojo.deserializeBinary=function(e){var e=new jspb.BinaryReader(e),t=new proto.tcbs.BuySellActivePojo;return proto.tcbs.BuySellActivePojo.deserializeBinaryFromReader(t,e)},proto.tcbs.BuySellActivePojo.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();)switch(t.getFieldNumber()){case 1:var o=t.readString();e.setSymbol(o);break;case 2:o=t.readDouble();e.setCloseprice(o);break;case 3:o=t.readDouble();e.setClosevol(o);break;case 4:o=t.readDouble();e.setChange(o);break;case 5:o=t.readDouble();e.setReference(o);break;case 6:o=t.readDouble();e.setTotaltrading(o);break;case 7:o=t.readDouble();e.setTotaltradingvalue(o);break;case 8:o=t.readInt64();e.setTimesec(o);break;case 9:o=t.readString();e.setAction(o);break;case 10:o=t.readInt64();e.setUnittimeframe(o);break;case 11:o=t.readDouble();e.setTradingvalue(o);break;case 12:o=t.readDouble();e.setBuyupacc(o);break;case 13:o=t.readDouble();e.setSelldownacc(o);break;case 14:o=t.readBool();e.setHighlight(o);break;case 15:o=t.readDouble();e.setBidprice(o);break;case 16:o=t.readDouble();e.setBidvol(o);break;case 17:o=t.readDouble();e.setAskprice(o);break;case 18:o=t.readDouble();e.setAskvol(o);break;case 19:o=t.readFloat();e.setPrevchange(o);break;default:t.skipField()}return e},proto.tcbs.BuySellActivePojo.prototype.serializeBinary=function(){var e=new jspb.BinaryWriter;return proto.tcbs.BuySellActivePojo.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.tcbs.BuySellActivePojo.serializeBinaryToWriter=function(e,t){var o;0<(o=e.getSymbol()).length&&t.writeString(1,o),0!==(o=e.getCloseprice())&&t.writeDouble(2,o),0!==(o=e.getClosevol())&&t.writeDouble(3,o),0!==(o=e.getChange())&&t.writeDouble(4,o),0!==(o=e.getReference())&&t.writeDouble(5,o),0!==(o=e.getTotaltrading())&&t.writeDouble(6,o),0!==(o=e.getTotaltradingvalue())&&t.writeDouble(7,o),0!==(o=e.getTimesec())&&t.writeInt64(8,o),0<(o=e.getAction()).length&&t.writeString(9,o),0!==(o=e.getUnittimeframe())&&t.writeInt64(10,o),0!==(o=e.getTradingvalue())&&t.writeDouble(11,o),0!==(o=e.getBuyupacc())&&t.writeDouble(12,o),0!==(o=e.getSelldownacc())&&t.writeDouble(13,o),(o=e.getHighlight())&&t.writeBool(14,o),0!==(o=e.getBidprice())&&t.writeDouble(15,o),0!==(o=e.getBidvol())&&t.writeDouble(16,o),0!==(o=e.getAskprice())&&t.writeDouble(17,o),0!==(o=e.getAskvol())&&t.writeDouble(18,o),0!==(o=e.getPrevchange())&&t.writeFloat(19,o)},proto.tcbs.BuySellActivePojo.prototype.getSymbol=function(){return jspb.Message.getFieldWithDefault(this,1,"")},proto.tcbs.BuySellActivePojo.prototype.setSymbol=function(e){return jspb.Message.setProto3StringField(this,1,e)},proto.tcbs.BuySellActivePojo.prototype.getCloseprice=function(){return jspb.Message.getFloatingPointFieldWithDefault(this,2,0)},proto.tcbs.BuySellActivePojo.prototype.setCloseprice=function(e){return jspb.Message.setProto3FloatField(this,2,e)},proto.tcbs.BuySellActivePojo.prototype.getClosevol=function(){return jspb.Message.getFloatingPointFieldWithDefault(this,3,0)},proto.tcbs.BuySellActivePojo.prototype.setClosevol=function(e){return jspb.Message.setProto3FloatField(this,3,e)},proto.tcbs.BuySellActivePojo.prototype.getChange=function(){return jspb.Message.getFloatingPointFieldWithDefault(this,4,0)},proto.tcbs.BuySellActivePojo.prototype.setChange=function(e){return jspb.Message.setProto3FloatField(this,4,e)},proto.tcbs.BuySellActivePojo.prototype.getReference=function(){return jspb.Message.getFloatingPointFieldWithDefault(this,5,0)},proto.tcbs.BuySellActivePojo.prototype.setReference=function(e){return jspb.Message.setProto3FloatField(this,5,e)},proto.tcbs.BuySellActivePojo.prototype.getTotaltrading=function(){return jspb.Message.getFloatingPointFieldWithDefault(this,6,0)},proto.tcbs.BuySellActivePojo.prototype.setTotaltrading=function(e){return jspb.Message.setProto3FloatField(this,6,e)},proto.tcbs.BuySellActivePojo.prototype.getTotaltradingvalue=function(){return jspb.Message.getFloatingPointFieldWithDefault(this,7,0)},proto.tcbs.BuySellActivePojo.prototype.setTotaltradingvalue=function(e){return jspb.Message.setProto3FloatField(this,7,e)},proto.tcbs.BuySellActivePojo.prototype.getTimesec=function(){return jspb.Message.getFieldWithDefault(this,8,0)},proto.tcbs.BuySellActivePojo.prototype.setTimesec=function(e){return jspb.Message.setProto3IntField(this,8,e)},proto.tcbs.BuySellActivePojo.prototype.getAction=function(){return jspb.Message.getFieldWithDefault(this,9,"")},proto.tcbs.BuySellActivePojo.prototype.setAction=function(e){return jspb.Message.setProto3StringField(this,9,e)},proto.tcbs.BuySellActivePojo.prototype.getUnittimeframe=function(){return jspb.Message.getFieldWithDefault(this,10,0)},proto.tcbs.BuySellActivePojo.prototype.setUnittimeframe=function(e){return jspb.Message.setProto3IntField(this,10,e)},proto.tcbs.BuySellActivePojo.prototype.getTradingvalue=function(){return jspb.Message.getFloatingPointFieldWithDefault(this,11,0)},proto.tcbs.BuySellActivePojo.prototype.setTradingvalue=function(e){return jspb.Message.setProto3FloatField(this,11,e)},proto.tcbs.BuySellActivePojo.prototype.getBuyupacc=function(){return jspb.Message.getFloatingPointFieldWithDefault(this,12,0)},proto.tcbs.BuySellActivePojo.prototype.setBuyupacc=function(e){return jspb.Message.setProto3FloatField(this,12,e)},proto.tcbs.BuySellActivePojo.prototype.getSelldownacc=function(){return jspb.Message.getFloatingPointFieldWithDefault(this,13,0)},proto.tcbs.BuySellActivePojo.prototype.setSelldownacc=function(e){return jspb.Message.setProto3FloatField(this,13,e)},proto.tcbs.BuySellActivePojo.prototype.getHighlight=function(){return jspb.Message.getBooleanFieldWithDefault(this,14,!1)},proto.tcbs.BuySellActivePojo.prototype.setHighlight=function(e){return jspb.Message.setProto3BooleanField(this,14,e)},proto.tcbs.BuySellActivePojo.prototype.getBidprice=function(){return jspb.Message.getFloatingPointFieldWithDefault(this,15,0)},proto.tcbs.BuySellActivePojo.prototype.setBidprice=function(e){return jspb.Message.setProto3FloatField(this,15,e)},proto.tcbs.BuySellActivePojo.prototype.getBidvol=function(){return jspb.Message.getFloatingPointFieldWithDefault(this,16,0)},proto.tcbs.BuySellActivePojo.prototype.setBidvol=function(e){return jspb.Message.setProto3FloatField(this,16,e)},proto.tcbs.BuySellActivePojo.prototype.getAskprice=function(){return jspb.Message.getFloatingPointFieldWithDefault(this,17,0)},proto.tcbs.BuySellActivePojo.prototype.setAskprice=function(e){return jspb.Message.setProto3FloatField(this,17,e)},proto.tcbs.BuySellActivePojo.prototype.getAskvol=function(){return jspb.Message.getFloatingPointFieldWithDefault(this,18,0)},proto.tcbs.BuySellActivePojo.prototype.setAskvol=function(e){return jspb.Message.setProto3FloatField(this,18,e)},proto.tcbs.BuySellActivePojo.prototype.getPrevchange=function(){return jspb.Message.getFloatingPointFieldWithDefault(this,19,0)},proto.tcbs.BuySellActivePojo.prototype.setPrevchange=function(e){return jspb.Message.setProto3FloatField(this,19,e)},jspb.Message.GENERATE_TO_OBJECT&&(proto.tcbs.InvestorHistoryTrade.prototype.toObject=function(e){return proto.tcbs.InvestorHistoryTrade.toObject(e,this)},proto.tcbs.InvestorHistoryTrade.toObject=function(e,t){var o={symbol:jspb.Message.getFieldWithDefault(t,1,""),avgprice:jspb.Message.getFloatingPointFieldWithDefault(t,2,0),closevol:jspb.Message.getFloatingPointFieldWithDefault(t,3,0),change:jspb.Message.getFloatingPointFieldWithDefault(t,4,0),reference:jspb.Message.getFloatingPointFieldWithDefault(t,5,0),totalvalue:jspb.Message.getFloatingPointFieldWithDefault(t,6,0),timesec:jspb.Message.getFieldWithDefault(t,7,0),action:jspb.Message.getFieldWithDefault(t,8,""),type:jspb.Message.getFieldWithDefault(t,9,""),notrans:jspb.Message.getFieldWithDefault(t,10,0),unittimeframe:jspb.Message.getFieldWithDefault(t,11,0)};return e&&(o.$jspbMessageInstance=t),o}),proto.tcbs.InvestorHistoryTrade.deserializeBinary=function(e){var e=new jspb.BinaryReader(e),t=new proto.tcbs.InvestorHistoryTrade;return proto.tcbs.InvestorHistoryTrade.deserializeBinaryFromReader(t,e)},proto.tcbs.InvestorHistoryTrade.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();)switch(t.getFieldNumber()){case 1:var o=t.readString();e.setSymbol(o);break;case 2:o=t.readDouble();e.setAvgprice(o);break;case 3:o=t.readDouble();e.setClosevol(o);break;case 4:o=t.readDouble();e.setChange(o);break;case 5:o=t.readDouble();e.setReference(o);break;case 6:o=t.readDouble();e.setTotalvalue(o);break;case 7:o=t.readInt64();e.setTimesec(o);break;case 8:o=t.readString();e.setAction(o);break;case 9:o=t.readString();e.setType(o);break;case 10:o=t.readInt64();e.setNotrans(o);break;case 11:o=t.readInt64();e.setUnittimeframe(o);break;default:t.skipField()}return e},proto.tcbs.InvestorHistoryTrade.prototype.serializeBinary=function(){var e=new jspb.BinaryWriter;return proto.tcbs.InvestorHistoryTrade.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.tcbs.InvestorHistoryTrade.serializeBinaryToWriter=function(e,t){var o;0<(o=e.getSymbol()).length&&t.writeString(1,o),0!==(o=e.getAvgprice())&&t.writeDouble(2,o),0!==(o=e.getClosevol())&&t.writeDouble(3,o),0!==(o=e.getChange())&&t.writeDouble(4,o),0!==(o=e.getReference())&&t.writeDouble(5,o),0!==(o=e.getTotalvalue())&&t.writeDouble(6,o),0!==(o=e.getTimesec())&&t.writeInt64(7,o),0<(o=e.getAction()).length&&t.writeString(8,o),0<(o=e.getType()).length&&t.writeString(9,o),0!==(o=e.getNotrans())&&t.writeInt64(10,o),0!==(o=e.getUnittimeframe())&&t.writeInt64(11,o)},proto.tcbs.InvestorHistoryTrade.prototype.getSymbol=function(){return jspb.Message.getFieldWithDefault(this,1,"")},proto.tcbs.InvestorHistoryTrade.prototype.setSymbol=function(e){return jspb.Message.setProto3StringField(this,1,e)},proto.tcbs.InvestorHistoryTrade.prototype.getAvgprice=function(){return jspb.Message.getFloatingPointFieldWithDefault(this,2,0)},proto.tcbs.InvestorHistoryTrade.prototype.setAvgprice=function(e){return jspb.Message.setProto3FloatField(this,2,e)},proto.tcbs.InvestorHistoryTrade.prototype.getClosevol=function(){return jspb.Message.getFloatingPointFieldWithDefault(this,3,0)},proto.tcbs.InvestorHistoryTrade.prototype.setClosevol=function(e){return jspb.Message.setProto3FloatField(this,3,e)},proto.tcbs.InvestorHistoryTrade.prototype.getChange=function(){return jspb.Message.getFloatingPointFieldWithDefault(this,4,0)},proto.tcbs.InvestorHistoryTrade.prototype.setChange=function(e){return jspb.Message.setProto3FloatField(this,4,e)},proto.tcbs.InvestorHistoryTrade.prototype.getReference=function(){return jspb.Message.getFloatingPointFieldWithDefault(this,5,0)},proto.tcbs.InvestorHistoryTrade.prototype.setReference=function(e){return jspb.Message.setProto3FloatField(this,5,e)},proto.tcbs.InvestorHistoryTrade.prototype.getTotalvalue=function(){return jspb.Message.getFloatingPointFieldWithDefault(this,6,0)},proto.tcbs.InvestorHistoryTrade.prototype.setTotalvalue=function(e){return jspb.Message.setProto3FloatField(this,6,e)},proto.tcbs.InvestorHistoryTrade.prototype.getTimesec=function(){return jspb.Message.getFieldWithDefault(this,7,0)},proto.tcbs.InvestorHistoryTrade.prototype.setTimesec=function(e){return jspb.Message.setProto3IntField(this,7,e)},proto.tcbs.InvestorHistoryTrade.prototype.getAction=function(){return jspb.Message.getFieldWithDefault(this,8,"")},proto.tcbs.InvestorHistoryTrade.prototype.setAction=function(e){return jspb.Message.setProto3StringField(this,8,e)},proto.tcbs.InvestorHistoryTrade.prototype.getType=function(){return jspb.Message.getFieldWithDefault(this,9,"")},proto.tcbs.InvestorHistoryTrade.prototype.setType=function(e){return jspb.Message.setProto3StringField(this,9,e)},proto.tcbs.InvestorHistoryTrade.prototype.getNotrans=function(){return jspb.Message.getFieldWithDefault(this,10,0)},proto.tcbs.InvestorHistoryTrade.prototype.setNotrans=function(e){return jspb.Message.setProto3IntField(this,10,e)},proto.tcbs.InvestorHistoryTrade.prototype.getUnittimeframe=function(){return jspb.Message.getFieldWithDefault(this,11,0)},proto.tcbs.InvestorHistoryTrade.prototype.setUnittimeframe=function(e){return jspb.Message.setProto3IntField(this,11,e)};
class Notifier{status="success";text="test";autoclose=!0;constructor(){}show=(t,s,o)=>{this.status=t||this.status,this.text=s||this.text,this.autoclose=o&&this.autoclose,this.notify=new Notify({status:this.status,text:this.text,autoclose:this.autoclose,position:"right bottom"})};hide=()=>{this.notify.close()}}
class Lightweight{chart={};series={};data={};order={entry:{},tp:{},sl:{}};lines=[];markers=[];ruler={start:{},end:{},point:0};alerts=[];crosshair={};hasCrosshair=!1;hasNewData=!1;constructor(e){this.dataEndpoint=e.dataEndpoint,this.localDB=e.localDB,this.audio=e.audio,this.notifier=e.notifier,this.isMobile=e.isMobile,this.timeFrame=e.timeFrame,this.sharkLimit=e.sharkLimit,this.getOrderPosition=e.getOrderPosition,this.closePosition=e.closePosition,this.orderEntryPrice=e.orderEntryPrice,this.orderTpPrice=e.orderTpPrice,this.orderSlPrice=e.orderSlPrice,this.cancelOrder=e.cancelOrder}init=()=>{this.createLightWeightChart(),this.createDataArea(),this.createToolArea(),this.createLegendArea(),this.createFreeArea(),setInterval(()=>this.intervalHandler(this),1e3),window.addEventListener("resize",()=>this.resize(this.chart)),window.addEventListener("keydown",e=>this.keyEvent(e,this))};createLightWeightChart=()=>{var e={localization:{dateFormat:"dd/MM/yyyy",locale:"vi-VN"},rightPriceScale:{visible:!0,scaleMargins:{top:.1,bottom:.4}},leftPriceScale:{visible:!1},layout:{backgroundColor:"#181C27",textColor:"#A2A6AE"},grid:{vertLines:{color:"#30333F"},horzLines:{color:"#30333F"}},crosshair:{mode:LightweightCharts.CrosshairMode.Normal},timeScale:{timeVisible:!0,rightOffset:20,minBarSpacing:.1}},t=document.createElement("div");document.body.append(t),t.id="lightWeightChart",t.style.width="100vw",t.style.height="100vh",t.addEventListener("contextmenu",e=>this.chartContextmenu(e,this)),t.addEventListener("click",e=>this.chartClick(e,this)),this.chart=LightweightCharts.createChart(t,e),this.chart.subscribeCrosshairMove(e=>this.crosshairMove(e,this)),this.chart.subscribeCustomPriceLineDragged(e=>this.priceLineDrag(e,this)),this.series.shark=this.chart.addLineSeries({priceScaleId:"shark",color:"#FF00FF",priceFormat:{minMove:1},scaleMargins:{top:.6,bottom:0}}),this.series.price=this.chart.addLineSeries({color:"white",priceFormat:{minMove:.1}}),this.chart.timeScale().fitContent(),this.chartElement=t};createDataArea=()=>{var e=document.createElement("div");e.id="dataAreaDiv",e.className="area",this.chartElement.append(e),this.createSpinnerImg(e),this.createDateInput(e),this.createTimeFrameSelect(e),this.createRefreshButton(e),this.createClearButton(e)};createClearButton=e=>{var t=document.createElement("div");t.id="clearButton",t.className="command fa fa-trash",t.title="Delete local data",t.addEventListener("click",()=>{this.localDB.clear("data"),this.loadChartData()}),e.append(t)};createRefreshButton=e=>{var t=document.createElement("div");t.id="refreshButton",t.className="command fa fa-refresh",t.title="Refresh chart",t.addEventListener("click",()=>this.loadChartData()),e.append(t)};createTimeFrameSelect=e=>{var i=document.createElement("select");i.id="timeFrameSelect",i.className="command",[{text:"Tick",value:0},{text:"1 min",value:1},{text:"5 min",value:5},{text:"30 min",value:30},{text:"1 day",value:1440}].forEach((e,t)=>{var r=document.createElement("option");r.value=e.value,r.text=e.text,i.appendChild(r)}),i.value=this.timeFrame,i.addEventListener("change",e=>{this.timeFrame=e.target.value,this.loadChartData().then(()=>this.chart.timeScale().resetTimeScale())}),e.append(i)};createDateInput=e=>{var t=document.createElement("input");t.id="dateInput",t.type="date",t.value=moment().format("YYYY-MM-DD"),t.className="command",t.addEventListener("change",e=>{e.target.value&&this.loadChartData()}),e.append(t),this.dateInput=t};createSpinnerImg=e=>{var t=document.createElement("img");t.id="spinnerImg",t.style.opacity=0,t.src=chrome.runtime.getURL("spinner.gif"),e.append(t),this.spinnerImg=t};createToolArea=()=>{var e=document.createElement("div");e.id="toolAreaDiv",e.className="area",this.chartElement.append(e),this.createDrawLineButton(e),this.createDrawMarkerButton(e),this.createDrawRulerButton(e),this.createDrawAlertButton(e)};createDrawLineButton=e=>{var t=document.createElement("div");t.id="drawLineButton",t.className="command fa fa-minus",t.addEventListener("click",e=>{var t=e.target.classList.contains("selected");document.querySelectorAll("#toolAreaDiv > .command").forEach(e=>e.classList.remove("selected")),t||e.target.classList.add("selected"),e.stopPropagation()}),t.addEventListener("contextmenu",e=>{this.removeToolLines(),e.target.classList.remove("selected"),e.preventDefault(),e.stopPropagation()}),e.append(t),this.drawLineButton=t};createDrawMarkerButton=e=>{var t=document.createElement("div");t.id="drawMarkerButton",t.className="command fa fa-map-marker",t.addEventListener("click",e=>{var t=e.target.classList.contains("selected");document.querySelectorAll("#toolAreaDiv > .command").forEach(e=>e.classList.remove("selected")),t||e.target.classList.add("selected"),e.stopPropagation()}),t.addEventListener("contextmenu",e=>{this.removeMarkers(),e.target.classList.remove("selected"),e.preventDefault(),e.stopPropagation()}),e.append(t),this.drawMarkerButton=t};createDrawRulerButton=e=>{var t=document.createElement("div");t.id="drawRulerButton",t.className="command fa fa-arrows-v",t.addEventListener("click",e=>{var t=e.target.classList.contains("selected");document.querySelectorAll("#toolAreaDiv > .command").forEach(e=>e.classList.remove("selected")),t||(e.target.classList.add("selected"),this.removeRuler()),e.stopPropagation()}),t.addEventListener("contextmenu",e=>{this.removeRuler(),e.target.classList.remove("selected"),e.preventDefault(),e.stopPropagation()}),e.append(t),this.drawRulerButton=t};createDrawAlertButton=e=>{var t=document.createElement("div");t.id="drawAlertButton",t.className="command fa fa-bell-o",t.addEventListener("click",e=>{var t=e.target.classList.contains("selected");document.querySelectorAll("#toolAreaDiv > .command").forEach(e=>e.classList.remove("selected")),t||e.target.classList.add("selected"),e.stopPropagation()}),t.addEventListener("contextmenu",e=>{this.removeAlerts(),e.target.classList.remove("selected"),e.preventDefault(),e.stopPropagation()}),e.append(t),this.drawAlertButton=t};createLegendArea=()=>{var e=document.createElement("div");e.id="legendAreaDiv",this.chartElement.append(e),this.createPriceLegendP(e),this.createSharkLegendP(e)};createPriceLegendP=e=>{var t=document.createElement("p");t.id="priceLegendP",e.append(t),this.priceLegendP=t};createSharkLegendP=e=>{var t=document.createElement("p");t.id="sharkLegendP",e.append(t),this.sharkLegendP=t};createFreeArea=()=>{var e=this.chartElement;this.createCancelOrderButton(e),this.createEntryOrderButton(e),this.createTpslOrderButton(e),this.createScrollButton(e)};createCancelOrderButton=e=>{var t=document.createElement("button");t.id="cancelOrderButton",t.innerText="X",t.style.display="none",t.addEventListener("click",()=>{this.closePosition(),this.cancelOrder(),this.toggleCancelOrderButton(!1),this.removeOrderLine("entry"),this.removeOrderLine("tp"),this.removeOrderLine("sl"),this.localDB.clear("order")}),e.append(t),this.cancelOrderButton=t};createEntryOrderButton=e=>{var t=document.createElement("button");t.id="entryOrderButton",t.innerText="Entry",t.style.display="none",t.addEventListener("click",()=>{this.orderEntryPrice(this.order),this.drawOrderLine("entry"),this.toggleCancelOrderButton(!0),this.hideOrderButton()}),e.append(t),this.entryOrderButton=t};createTpslOrderButton=e=>{var t=document.createElement("button");t.id="tpslOrderButton",t.innerText="TP/SL",t.style.display="none",t.addEventListener("click",()=>{this.orderTpPrice(this.order,!0),this.drawOrderLine("tp"),this.orderSlPrice(this.order,!0),this.drawOrderLine("sl"),this.hideOrderButton()}),e.append(t),this.tpslOrderButton=t};createScrollButton=e=>{var t=document.createElement("div");t.id="scrollButton",t.className="command fa fa-angle-double-right",t.addEventListener("click",()=>this.chart.timeScale().scrollToRealTime()),e.append(t)};chartContextmenu=(e,t)=>{t.showOrderButton(),e.preventDefault()};chartClick=(e,t)=>{t.hideOrderButton(),t.drawLineButton.classList.contains("selected")?t.drawToolLine():t.drawMarkerButton.classList.contains("selected")?t.drawMarker():t.drawRulerButton.classList.contains("selected")?t.drawRuler():t.drawAlertButton.classList.contains("selected")&&t.drawAlert()};crosshairMove=(e,t)=>{e.time?(t.updateLegend(e.seriesPrices.get(t.series.price),e.seriesPrices.get(t.series.shark)),t.hasCrosshair=!0,t.crosshair.time=e.time,t.crosshair.price=e.seriesPrices.get(t.series.price)):(t.hasCrosshair=!1,t.isMobile||(t.crosshair.time=null,t.crosshair.price=null)),null!=e.point&&(t.crosshair.x=e.point.x,t.crosshair.y=e.point.y)};priceLineDrag=(e,t)=>{var r,i,a=e.customPriceLine.options(),s=(a.price=t.formatPrice(a.price),+e.fromPriceString),o=a.price;switch(a.lineType){case"order":o!=s&&(i=!1,r=t.getOrderPosition(),"entry"==a.kind?r||(i=!0,t.order[a.kind].price=o,t.orderEntryPrice(t.order),t.drawOrderLine(a.kind)):0<t.order.side*r&&(i=!0,t.order[a.kind].price=o,"tp"==a.kind?t.orderTpPrice(t.order):t.orderSlPrice(t.order),drawOrderLine(a.kind)),i||(t.order[a.kind].line.applyOptions({price:s}),t.notifier.show("warning","Không được thay đổi.")));break;case"line":t.localDB.set("line",{price:s,removed:!0}),t.localDB.set("line",a),t.drawLineButton.classList.remove("selected");break;case"ruler":1==a.point?(t.localDB.set("ruler",a),2==t.ruler.point&&(r=+(o+ +t.ruler.end.options().title).toFixed(1),t.ruler.end.applyOptions({price:r}),t.localDB.set("ruler",t.ruler.end.options()))):(t.localDB.set("ruler",a),i=+t.ruler.start.options().price,t.ruler.end.applyOptions({title:(o-i).toFixed(1)}));break;case"alert":t.audio.pause(),t.localDB.set("alert",{price:s,removed:!0}),t.localDB.set("alert",a),t.drawAlertButton.classList.remove("selected")}};showOrderButton=()=>{var e,t;this.getOrderPosition()?this.order.tp.hasOwnProperty("line")||(this.tpslOrderButton.style.left=+(this.crosshair.x+10)+"px",this.tpslOrderButton.style.top=+(this.crosshair.y+10)+"px",this.tpslOrderButton.style.display="block"):this.order.entry.hasOwnProperty("line")||(t=(e=this.coordinateToPrice(this.crosshair.y))>=this.data.price.slice(-1)[0].value?1:-1,this.order.entry.price=e,this.order.side=t,this.entryOrderButton.style.left=+(this.crosshair.x+10)+"px",this.entryOrderButton.style.top=+(this.crosshair.y+10)+"px",this.entryOrderButton.style.background=0<t?"green":"red",this.entryOrderButton.innerText=`${0<t?"Long":"Short"} `+e,this.entryOrderButton.style.display="block")};hideOrderButton=()=>{this.entryOrderButton.style.display="none",this.tpslOrderButton.style.display="none"};drawOrderLine=e=>{var t,r;switch(e){case"entry":t="silver",r=0<this.order.side?"Long":"Short";break;case"tp":t="lime",r=Math.abs(this.order.tp.price-this.order.entry.price).toFixed(1);break;case"sl":t="red",r=Math.abs(this.order.sl.price-this.order.entry.price).toFixed(1)}this.order[e].hasOwnProperty("line")?this.order[e].line.applyOptions({price:this.order[e].price,title:r}):this.order[e].line=this.series.price.createPriceLine({lineType:"order",kind:e,price:this.order[e].price,color:t,lineWidth:1,lineStyle:LightweightCharts.LineStyle.Solid,title:r,draggable:!0}),this.localDB.set("order",{kind:e,price:+this.order[e].price,side:this.order.side})};removeOrderLine=e=>{this.order[e].hasOwnProperty("line")&&(this.series.price.removePriceLine(this.order[e].line),delete this.order[e].line)};drawToolLine=()=>{const t=this.formatPrice(this.coordinateToPrice(this.crosshair.y));var e=this.lines.findIndex(e=>{e=e.options();return e.type=+e.price==t});-1!=e?(e=this.lines.splice(e,1),this.series.price.removePriceLine(e[0]),this.localDB.set("line",{price:t,removed:!0})):(e={lineType:"line",price:t,color:"aqua",lineWidth:1,lineStyle:LightweightCharts.LineStyle.Solid,draggable:!0},this.lines.push(this.series.price.createPriceLine(e)),this.localDB.set("line",e)),this.drawLineButton.classList.remove("selected")};removeToolLines=()=>{this.lines.forEach(e=>this.series.price.removePriceLine(e)),this.lines=[],this.localDB.clear("line")};drawMarker=()=>{var e,t;this.crosshair.time&&((e=this.markers.filter(e=>e.time!=this.crosshair.time)).length==this.markers.length?(t=this.crosshair.y>=this.series.price.priceToCoordinate(this.crosshair.price),this.markers.push({time:this.crosshair.time,position:t?"belowBar":"aboveBar",color:t?"lime":"red",shape:t?"arrowUp":"arrowDown"})):this.markers=e,this.series.price.setMarkers(this.markers),this.localDB.clear("marker").then(()=>this.localDB.set("marker",this.markers)),this.drawMarkerButton.classList.remove("selected"))};removeMarkers=()=>{this.markers=[],this.series.price.setMarkers([]),this.localDB.clear("marker")};drawRuler=()=>{var e,t=this.coordinateToPrice(this.crosshair.y),r={lineType:"ruler",price:t,color:"yellow",lineWidth:1,lineStyle:LightweightCharts.LineStyle.Solid,draggable:!0};0==this.ruler.point?(r.point=1,r.title="0",this.ruler.start=this.series.price.createPriceLine(r),this.ruler.point=1,this.localDB.set("ruler",r)):1==this.ruler.point&&(e=+this.ruler.start.options().price,r.point=2,r.title=(t-e).toFixed(1),this.ruler.end=this.series.price.createPriceLine(r),this.ruler.point=2,this.localDB.set("ruler",r),this.drawRulerButton.classList.remove("selected"))};removeRuler=()=>{0<this.ruler.point&&(this.series.price.removePriceLine(this.ruler.start),1<this.ruler.point&&this.series.price.removePriceLine(this.ruler.end),this.ruler={start:{},end:{},point:0},this.localDB.clear("ruler"))};drawAlert=()=>{const t=this.formatPrice(this.coordinateToPrice(this.crosshair.y));var e=this.alerts.findIndex(e=>{e=e.options();return e.type=+e.price==t});-1!=e?(e=this.alerts.splice(e,1),this.series.price.removePriceLine(e[0]),this.localDB.set("alert",{price:t,removed:!0})):(e={lineType:"alert",price:t,title:t>=this.data.original.slice(-1)[0].price?">":"<",color:"#FF00FF",lineWidth:1,lineStyle:LightweightCharts.LineStyle.Solid,draggable:!0},this.alerts.push(this.series.price.createPriceLine(e)),this.localDB.set("alert",e)),this.drawAlertButton.classList.remove("selected"),this.audio.pause()};removeAlerts=()=>{this.alerts.forEach(e=>this.series.price.removePriceLine(e)),this.alerts=[],this.localDB.clear("alert"),this.audio.pause()};toggleCancelOrderButton=e=>{e?(this.cancelOrderButton.style.display="block",this.cancelOrderButton.style.background=0<this.order.side?"green":"red"):this.cancelOrderButton.style.display="none"};updateLegend=(e,t)=>{e&&(this.priceLegendP.innerText=e),t&&(this.sharkLegendP.innerText=t.toLocaleString("en-US"))};coordinateToPrice=e=>this.formatPrice(this.series.price.coordinateToPrice(e));formatPrice=e=>+e.toFixed(1);loadChartData=()=>new Promise(async(e,t)=>{this.toggleSpinner(!0);for(var r=await this.getServerData();;){this.hasNewData=!1;var i=await this.localDB.get("data");const a=new Set(r.map(e=>e.time)),s=[...r,...i.filter(e=>!a.has(e.time))].sort((e,t)=>e.time-t.time);if(!this.hasNewData){this.localDB.clear("data").then(()=>this.localDB.set("data",s)),this.data=s.reduce((e,t)=>this.createChartData(e,t),{original:[],price:[],shark:[]}),this.series.price.setData(this.data.price),this.series.shark.setData(this.data.shark),!this.hasCrosshair&&this.data.original.length&&this.updateLegend(this.data.price.slice(-1)[0].value,this.data.shark.slice(-1)[0].value),this.toggleSpinner(!1),e();break}}});updateChartData=e=>{this.hasNewData=!0;var e={time:e.timesec,price:e.closeprice,volume:e.closevol,action:e.action},t=(this.data=this.createChartData(this.data,e),this.data.price.slice(-1)[0]),r=this.data.shark.slice(-1)[0];0<this.timeFrame?(this.series.price.setData(this.data.price),this.series.shark.setData(this.data.shark)):(this.series.price.update(t),this.series.shark.update(r)),this.hasCrosshair||this.updateLegend(t.value,r.value),this.localDB.set("data",e),this.data.original.push(e)};getServerData=()=>new Promise(async(e,t)=>{for(var r={action:"GET",date:this.dateInput.value},i=this.dataEndpoint;;)try{e(await(await fetch(i,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(r)})).json());break}catch(e){continue}});createChartData=(e,t)=>{var r,i,a,s,o=t.time+25200,n=e.shark.length?e.shark.slice(-1)[0].value:0,c=("BU"==t.action?1:-1)*t.volume;return 0<this.timeFrame&&(r=60*this.timeFrame,i=Math.floor(o/r),a=!1,(a=e.price.length&&(s=e.price.slice(-1)[0].time,i==Math.floor(s/r))?!0:a)&&(e.price.pop(),e.shark.pop()),o=i*r),e.original.push(t),e.price.push({time:o,value:t.price}),e.shark.push({time:o,value:n+(t.volume>this.sharkLimit?c:0)}),e};getHelperData=()=>new Promise(async(e,t)=>{(await this.localDB.get("order")).map(e=>{this.order.side=e.side,this.order[e.kind].price=e.price,this.drawOrderLine(e.kind),"entry"==e.kind&&(this.getOrderPosition()&&this.order.entry.line.applyOptions({draggable:!1}),this.toggleCancelOrderButton(!0))});(await this.localDB.get("line")).forEach(e=>{e.removed||this.lines.push(this.series.price.createPriceLine(e))}),this.markers=await this.localDB.get("marker"),this.series.price.setMarkers(this.markers);var r=await this.localDB.get("ruler");2==r.length&&r.forEach(e=>{this.ruler.point=2,1==e.point?this.ruler.start=this.series.price.createPriceLine(e):this.ruler.end=this.series.price.createPriceLine(e)}),(await this.localDB.get("alert")).forEach(e=>{e.removed||this.alerts.push(this.series.price.createPriceLine(e))}),e()});intervalHandler=r=>{r.getOrderPosition()?r.order.entry.hasOwnProperty("line")&&!r.order.tp.hasOwnProperty("line")&&(r.orderTpPrice(r.order,!0),r.drawOrderLine("tp"),r.orderSlPrice(r.order,!0),r.drawOrderLine("sl"),r.order.entry.line.applyOptions({draggable:!1}),r.notifier.show("success","Đã mở vị thế.")):r.order.tp.hasOwnProperty("line")&&(r.cancelOrder(),r.toggleCancelOrderButton(!1),r.removeOrderLine("entry"),r.removeOrderLine("tp"),r.removeOrderLine("sl"),r.localDB.clear("order"),r.notifier.show("success","Đã đóng vị thế.")),r.audio.paused&&r.alerts.forEach(e=>{var t,e=e.options();!e.removed&&r.data.original.length&&(t=r.data.original.slice(-1)[0].price,">"==e.title&&t>=e.price||"<"==e.title&&t<=e.price)&&r.audio.play()})};toggleSpinner=e=>{this.spinnerImg.style.opacity=e?1:0};resize=e=>{e.resize(window.innerWidth,window.innerHeight)};keyEvent=(e,t)=>{var r;e.ctrlKey||e.metaKey?e.shiftKey?39==e.keyCode&&t.chart.timeScale().scrollToRealTime():38==e.keyCode?(r=t.chart.options(),t.chart.timeScale().applyOptions({barSpacing:r.timeScale.barSpacing+.1})):40==e.keyCode?(r=t.chart.options()).timeScale.barSpacing>r.timeScale.minBarSpacing&&t.chart.timeScale().applyOptions({barSpacing:r.timeScale.barSpacing-.1}):37==e.keyCode?(r=t.chart.timeScale().scrollPosition(),t.chart.timeScale().scrollToPosition(r-10)):39==e.keyCode?(r=t.chart.timeScale().scrollPosition(),t.chart.timeScale().scrollToPosition(r+10)):97==e.keyCode?t.drawLineButton.click():98==e.keyCode?t.drawMarkerButton.click():99==e.keyCode?t.drawRulerButton.click():100==e.keyCode&&t.drawAlertButton.click():27===e.which&&t.removeOrderButton()}}
class OptionView{constructor(){}init=()=>{console.log("init optionview"),this.createContainer()};createContainer=()=>{var t=document.createElement("div");t.id="optionViewContainer",document.body.append(t),this.container=t};toggle=()=>{this.container.classList.contains("show")?this.container.classList.remove("show"):this.container.classList.add("show")}}
class LocalDatabase{constructor(){}init=()=>new Promise((t,e)=>{var r=indexedDB.open("vpsDB",1);r.onupgradeneeded=e=>{console.log("onupgradeneeded"),this.database=e.target.result,this.database.createObjectStore("data",{keyPath:"time"}),this.database.createObjectStore("order",{keyPath:"kind"}),this.database.createObjectStore("marker",{keyPath:"time"}),this.database.createObjectStore("line",{keyPath:"price"}),this.database.createObjectStore("ruler",{keyPath:"point"}),this.database.createObjectStore("alert",{keyPath:"price"}),t()},r.onsuccess=e=>{console.log("onsuccess"),this.database=e.target.result,t()},r.onerror=()=>{console.log("onerror"),location.reload(),e()}});get=o=>{var s=this.database;return new Promise(function(t,e){var r,a=s.transaction(o,"readonly");Array.isArray(o)?(r=o.map(e=>a.objectStore(e)).map(n),Promise.all(r).then(e=>t(e))):n(a.objectStore(o)).then(e=>t(e))});function n(a){return new Promise(function(t,e){var r=a.getAll();r.onsuccess=e=>t(e.target.result),r.onerror=()=>e()})}};set=(e,t)=>{const r=this.database.transaction(e,"readwrite").objectStore(e);Array.isArray(t)?0<t.length&&t.forEach(e=>r.put(e)):r.put(t)};clear=a=>{var o=this.database;return new Promise(function(e,t){var r=o.transaction(a,"readwrite").objectStore(a).clear();r.onsuccess=()=>{e()},r.onerror=e=>{console.error("Error to empty Object Store: "+a),t()}})}}
class SmartOrder{notifier=new Notifier;localDB=new LocalDatabase;audio=new Audio(chrome.runtime.getURL("alert.wav"));isMobile=navigator.userAgentData.mobile;currentTime=moment().unix();optionView=new OptionView;constructor(){goog.require("proto.tcbs.BuySellActivePojo")}init=async()=>{this.notifier.show("warning","Đang cài đặt biểu đồ ...",!1),this.createButtons(),this.registerEvent(),await this.getLocalConfig(),await this.getServerConfig(),this.lw=new Lightweight({dataEndpoint:this.config.root+this.config.endpoint.data,localDB:this.localDB,notifier:this.notifier,audio:this.audio,isMobile:this.isMobile,timeFrame:this.config.timeFrame,sharkLimit:this.config.sharkLimit,getOrderPosition:this.getOrderPosition,closePosition:this.closePosition,orderEntryPrice:this.orderEntryPrice,orderTpPrice:this.orderTpPrice,orderSlPrice:this.orderSlPrice,cancelOrder:this.cancelOrder}),this.lw.init(),this.optionView.init(),await this.localDB.init(),await this.lw.loadChartData(),await this.lw.getHelperData(),document.getElementById("sohopdong").value=this.config.contractNumber,document.getElementById("right_price").value="MTL",this.audio.loop=!0,setInterval(()=>this.intervalHandler(this),1e3),setInterval(()=>this.refreshDataInSession(this),6e4),this.notifier.hide(),this.lightWeightButton.click()};getLocalConfig=()=>new Promise((t,e)=>{var i=chrome.runtime.getURL("config.json");fetch(i).then(e=>e.json()).then(e=>{this.config=e,t()}).catch(()=>{console.log(err),confirm("Get local config error. Refresh now?")&&location.reload()})});getServerConfig=()=>new Promise((t,e)=>{var i=this.config.root+this.config.endpoint.config;fetch(i,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({})}).then(e=>e.json()).then(e=>{this.config={...this.config,...e},t()}).catch(e=>{console.log(e),confirm("Get server config error. Refresh now?")&&location.reload()})});createButtons=()=>{var e=document.createElement("div");e.id="directionCommandDiv",document.body.append(e),this.createTradingViewButton(e),this.createLightWeightButton(e),this.createOptionButton(e),this.createReportButton(e)};createTradingViewButton=e=>{var t=document.createElement("button");t.id="tradingViewButton",t.classList="fa fa-bar-chart",t.title="TradingView Chart",t.addEventListener("click",()=>{var e=document.getElementById("left_order_type"),t=document.getElementById("right_order_type"),i=document.querySelector("#mainFooter .foot_tab:nth-child(1)"),n=document.querySelector("#mainFooter .foot_tab:nth-child(2)");i.classList.remove("fa","fa-check-circle"),n.classList.remove("fa","fa-question-circle"),document.body.classList.contains("tradingview-chart")?(document.body.classList.remove("tradingview-chart"),document.body.classList.remove("full-chart"),e.innerText="Lệnh thường",t.innerText="Lệnh điều kiện",i.innerText="DANH SÁCH LỆNH",n.innerText="DANH SÁCH LỆNH ĐIỀU KIỆN"):(document.body.classList.add("tradingview-chart"),document.body.classList.add("full-chart"),document.body.classList.remove("lightweight-chart"),e.innerText="LT",t.innerText="LĐK",i.innerText="LỆNH THƯỜNG",n.innerText="L. ĐIỀU KIỆN")}),e.append(t),this.tradingViewButton=t};createLightWeightButton=e=>{var t=document.createElement("button");t.id="lightWeightButton",t.classList="fa fa-line-chart",t.title="LightWeight Chart",t.addEventListener("click",()=>{var e=document.getElementById("left_order_type"),t=document.getElementById("right_order_type"),i=document.querySelector("#mainFooter .foot_tab:nth-child(1)"),n=document.querySelector("#mainFooter .foot_tab:nth-child(2)");document.body.classList.contains("lightweight-chart")?(document.body.classList.remove("lightweight-chart"),document.body.classList.remove("full-chart"),e.innerText="Lệnh thường",t.innerText="Lệnh điều kiện",i.classList.remove("fa","fa-check-circle"),i.innerText="DANH SÁCH LỆNH",n.classList.remove("fa","fa-question-circle"),n.innerText="DANH SÁCH LỆNH ĐIỀU KIỆN"):(document.body.classList.add("lightweight-chart"),document.body.classList.add("full-chart"),document.body.classList.remove("tradingview-chart"),e.innerText="LT",t.innerText="LĐK",i.classList.add("fa","fa-check-circle"),i.innerText="",n.classList.add("fa","fa-question-circle"),n.innerText="")}),e.append(t),this.lightWeightButton=t};createOptionButton=e=>{var t=document.createElement("button");t.id="optionButton",t.classList="fa fa-cog",t.title="Option",t.addEventListener("click",()=>this.optionButtonClick(this)),e.append(t),this.optionButton=t};optionButtonClick=e=>{e.optionView.toggle()};createReportButton=e=>{var t=document.createElement("button");t.id="reportButton",t.classList="fa fa-flag-checkered",t.title="Report",t.addEventListener("click",()=>this.reportButtonClick(this)),e.append(t),this.reportButton=t};reportButtonClick=e=>{e.currentTime>e.config.time.end&&e.reportHandler()};registerEvent=()=>{document.querySelector(".timeStamp").addEventListener("dblclick",()=>{document.fullscreenElement?document.exitFullscreen():document.documentElement.requestFullscreen()})};getOrderPosition=()=>{var e=document.querySelector(`#danhmuc_${this.config.symbol} > td:nth-child(2)`);return!e||(e=e.innerText,isNaN(e))?0:+e};closePosition=()=>{var e=this.getOrderPosition();e&&(document.getElementById("select_normal_order_wrapper").click(),document.getElementById("right_price").value="MTL",document.getElementById("sohopdong").value=Math.abs(e),document.getElementById("btn_"+(0<e?"short":"long")).click())};orderEntryPrice=e=>{this.callScript("onCancelAllOrderPending('order_condition')"),document.getElementById("select_condition_order_wrapper").click(),document.getElementById("right_stopOrderIndex").value=e.entry.price,document.getElementById("right_price").value="MTL",document.getElementById("right_selStopOrderType").value=0<e.side?"SOL":"SOU",setTimeout(()=>{document.getElementById("btn_"+(0<e.side?"long":"short")).click()},1e3)};orderTpPrice=(e,t=!1)=>{this.callScript("onCancelAllOrderPending('order')"),t&&(e.tp.price=+e.entry.price+e.side*this.config.order.TP),setTimeout(()=>{document.getElementById("select_normal_order_wrapper").click(),document.getElementById("right_price").value=e.tp.price,document.getElementById("btn_"+(e.side<0?"long":"short")).click()},1e3)};orderSlPrice=(e,t=!1)=>{this.callScript("onCancelAllOrderPending('order_condition')"),t&&(e.sl.price=+e.entry.price-e.side*this.config.order.SL),setTimeout(()=>{document.getElementById("select_condition_order_wrapper").click(),document.getElementById("right_stopOrderIndex").value=e.sl.price,document.getElementById("right_price").value="MTL",document.getElementById("right_selStopOrderType").value=e.side<0?"SOL":"SOU",document.getElementById("btn_"+(e.side<0?"long":"short")).click()},1e3)};cancelOrder=()=>{this.callScript("onCancelAllOrderPending('order_condition')"),this.callScript("onCancelAllOrderPending('order')")};connectSocket=()=>{var t=new WebSocket(this.config.endpoint.socket);t.onopen=function(e){t.send("d|st|C001|"+this.config.symbol)},t.onclose=function(e){this.refreshDataInSession()&&this.connectSocket()},t.onmessage=function(e){var e=e.data.split("|");"C001"==e[0]&&(e=proto.tcbs.BuySellActivePojo.deserializeBinary(function(e){for(var t=window.atob(e),i=t.length,n=new Uint8Array(i),o=0;o<i;o++)n[o]=t.charCodeAt(o);return n}(e[2])).toObject(),this.lw.updateChartData(e))},t.onerror=function(e){console.log("ws-error",e)}};intervalHandler=e=>{e.currentTime=moment().unix(),e.currentTime==e.config.time.start&&e.lw.connectSocket(),e.currentTime==e.config.time.end&&e.reportHandler(),e.showRunningStatus()};reportHandler=()=>{var e,t;this.config.isOpeningMarket&&!this.config.isReportedResult&&(this.config.isReportedResult=!0,this.lw.toggleSpinner(!0),e=this.config.root+this.config.endpoint.report,t={revenue:+document.getElementById("vmAccInfo").innerText.replaceAll(",",""),fees:+document.getElementById("othersAccInfo").innerText.replaceAll(",","")},fetch(e,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)}).then(e=>{if(e.ok)return e.json();throw new Error(e.statusText)}).then(e=>{console.log("Report-Start ##############################"),console.log(e),console.log("Report-End ##############################"),this.config.isReportedResult=e.isOk,e.isOk&&(e.isExecuted?this.notifier.show("success","Báo cáo đã gửi thành công."):this.notifier.show("warning","Đã gửi báo cáo")),this.lw.toggleSpinner(!1)}).catch(e=>{this.config.isReportedResult=!1,console.log("Report-Start ##############################"),console.log(e),console.log("Report-End ##############################"),this.notifier.show("error","Gửi báo cáo thất bại"),this.lw.toggleSpinner(!1)}))};showRunningStatus=()=>{this.lightWeightButton.classList.contains("dark")?this.lightWeightButton.classList.remove("dark"):this.lightWeightButton.classList.add("dark")};refreshDataInSession=e=>e.currentTime>=e.config.time.start&&e.currentTime<=e.config.time.end&&(e.lw.loadChartData(),!0);callScript=e=>{var t=document.createElement("button");t.setAttribute("onclick",e),t.click()}}var so=new SmartOrder;so.init();
//# sourceMappingURL=data:application/json;charset=utf8;base64,

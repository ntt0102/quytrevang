(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[56],{

/***/ "./node_modules/devextreme-quill/dist/dx-quill.js":
/*!********************************************************!*\
  !*** ./node_modules/devextreme-quill/dist/dx-quill.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*!\n * DevExtreme-Quill Editor v.1.5.16\n * https://js.devexpress.com/\n * Copyright (c) 2020, Developer Express Inc.\n * Copyright (c) 2017, Slab\n * Copyright (c) 2014, Jason Chen\n * Copyright (c) 2013, salesforce.com\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory();\n\telse {}\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__webpack_require__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__webpack_require__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __webpack_require__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__webpack_require__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 172);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return globalRegistry; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return expandConfig; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return overload; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return Quill; });\n/* harmony import */ var quill_delta__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);\n/* harmony import */ var quill_delta__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(quill_delta__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var lodash_clonedeep__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(18);\n/* harmony import */ var lodash_clonedeep__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash_clonedeep__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var lodash_merge__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(34);\n/* harmony import */ var lodash_merge__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash_merge__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var parchment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(2);\n/* harmony import */ var _editor__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(4);\n/* harmony import */ var _emitter__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(3);\n/* harmony import */ var _module__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(14);\n/* harmony import */ var _selection__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(7);\n/* harmony import */ var _instances__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(41);\n/* harmony import */ var _logger__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(23);\n/* harmony import */ var _theme__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(53);\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\n\n\n\n\n\n\n\n\n\nvar debug = Object(_logger__WEBPACK_IMPORTED_MODULE_9__[/* default */ \"a\"])('quill');\nvar globalRegistry = new parchment__WEBPACK_IMPORTED_MODULE_3__[\"Registry\"]();\nparchment__WEBPACK_IMPORTED_MODULE_3__[\"ParentBlot\"].uiClass = 'ql-ui';\n\nvar Quill = /*#__PURE__*/function () {\n  function Quill(container) {\n    var _this = this;\n\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Quill);\n\n    this.options = expandConfig(container, options);\n    this.container = this.options.container;\n\n    if (this.container == null) {\n      return debug.error('Invalid Quill container', container);\n    }\n\n    if (this.options.debug) {\n      Quill.debug(this.options.debug);\n    }\n\n    var html = this.container.innerHTML.trim();\n    this.container.classList.add('ql-container');\n    this.container.innerHTML = '';\n    _instances__WEBPACK_IMPORTED_MODULE_8__[/* default */ \"a\"].set(this.container, this);\n    this.root = this.addContainer('ql-editor');\n    this.root.classList.add('ql-blank');\n    this.scrollingContainer = this.options.scrollingContainer || this.root;\n    this.emitter = new _emitter__WEBPACK_IMPORTED_MODULE_5__[/* default */ \"a\"]();\n    var ScrollBlot = this.options.registry.query(parchment__WEBPACK_IMPORTED_MODULE_3__[\"ScrollBlot\"].blotName);\n    this.scroll = new ScrollBlot(this.options.registry, this.root, {\n      emitter: this.emitter,\n      toggleBlankClass: this.toggleBlankClass.bind(this)\n    });\n    this.editor = new _editor__WEBPACK_IMPORTED_MODULE_4__[/* default */ \"a\"](this.scroll);\n    this.selection = new _selection__WEBPACK_IMPORTED_MODULE_7__[/* default */ \"b\"](this.scroll, this.emitter);\n    this.theme = new this.options.theme(this, this.options); // eslint-disable-line new-cap\n\n    this.keyboard = this.theme.addModule('keyboard');\n    this.clipboard = this.theme.addModule('clipboard');\n    this.history = this.theme.addModule('history');\n    this.uploader = this.theme.addModule('uploader');\n    this.theme.init();\n    this.emitter.on(_emitter__WEBPACK_IMPORTED_MODULE_5__[/* default */ \"a\"].events.EDITOR_CHANGE, function (type) {\n      if (type === _emitter__WEBPACK_IMPORTED_MODULE_5__[/* default */ \"a\"].events.TEXT_CHANGE) {\n        _this.toggleBlankClass();\n      }\n    });\n    this.emitter.on(_emitter__WEBPACK_IMPORTED_MODULE_5__[/* default */ \"a\"].events.SCROLL_UPDATE, function (source, mutations) {\n      var oldRange = _this.selection.lastRange;\n\n      var _this$selection$getRa = _this.selection.getRange(),\n          _this$selection$getRa2 = _slicedToArray(_this$selection$getRa, 1),\n          newRange = _this$selection$getRa2[0];\n\n      var selectionInfo = oldRange && newRange ? {\n        oldRange: oldRange,\n        newRange: newRange\n      } : undefined;\n      modify.call(_this, function () {\n        return _this.editor.update(null, mutations, selectionInfo);\n      }, source);\n    });\n    this.setContents(this.getInitialContent(html));\n    this.history.clear();\n\n    if (this.options.placeholder) {\n      this.root.setAttribute('data-placeholder', this.options.placeholder);\n    }\n\n    if (this.options.readOnly) {\n      this.disable();\n    }\n\n    this.allowReadOnlyEdits = false;\n  }\n\n  _createClass(Quill, [{\n    key: \"getInitialContent\",\n    value: function getInitialContent(html) {\n      return this.clipboard.convert({\n        html: \"\".concat(html, \"<p><br></p>\"),\n        text: '\\n'\n      });\n    }\n  }, {\n    key: \"toggleBlankClass\",\n    value: function toggleBlankClass() {\n      var isComposing = this.selection.composing;\n      this.root.classList.toggle('ql-blank', this.editor.isBlank(isComposing));\n    }\n  }, {\n    key: \"addContainer\",\n    value: function addContainer(container) {\n      var refNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      if (typeof container === 'string') {\n        var className = container;\n        container = document.createElement('div');\n        container.classList.add(className);\n      }\n\n      this.container.insertBefore(container, refNode);\n      return container;\n    }\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      this.selection.setRange(null);\n    }\n  }, {\n    key: \"deleteText\",\n    value: function deleteText(index, length, source) {\n      var _this2 = this;\n\n      var _overload = overload(index, length, source);\n\n      var _overload2 = _slicedToArray(_overload, 4);\n\n      index = _overload2[0];\n      length = _overload2[1];\n      source = _overload2[3];\n      return modify.call(this, function () {\n        return _this2.editor.deleteText(index, length);\n      }, source, index, -1 * length);\n    }\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      this.enable(false);\n    }\n  }, {\n    key: \"editReadOnly\",\n    value: function editReadOnly(modifier) {\n      this.allowReadOnlyEdits = true;\n      var value = modifier();\n      this.allowReadOnlyEdits = false;\n      return value;\n    }\n  }, {\n    key: \"enable\",\n    value: function enable() {\n      var enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this.scroll.enable(enabled);\n      this.container.classList.toggle('ql-disabled', !enabled);\n    }\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      var scrollTop = this.scrollingContainer.scrollTop;\n      this.selection.focus();\n      this.scrollingContainer.scrollTop = scrollTop;\n      this.scrollIntoView();\n    }\n  }, {\n    key: \"format\",\n    value: function format(name, value) {\n      var _this3 = this;\n\n      var source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _emitter__WEBPACK_IMPORTED_MODULE_5__[/* default */ \"a\"].sources.API;\n      return modify.call(this, function () {\n        var range = _this3.getSelection(true);\n\n        var change = new quill_delta__WEBPACK_IMPORTED_MODULE_0___default.a();\n        if (range == null) return change;\n\n        if (_this3.scroll.query(name, parchment__WEBPACK_IMPORTED_MODULE_3__[\"Scope\"].BLOCK)) {\n          change = _this3.editor.formatLine(range.index, range.length, _defineProperty({}, name, value));\n        } else if (range.length === 0) {\n          _this3.selection.format(name, value);\n\n          return change;\n        } else {\n          change = _this3.editor.formatText(range.index, range.length, _defineProperty({}, name, value));\n        }\n\n        _this3.setSelection(range, _emitter__WEBPACK_IMPORTED_MODULE_5__[/* default */ \"a\"].sources.SILENT);\n\n        return change;\n      }, source);\n    }\n  }, {\n    key: \"formatLine\",\n    value: function formatLine(index, length, name, value, source) {\n      var _this4 = this;\n\n      var formats; // eslint-disable-next-line prefer-const\n\n      var _overload3 = overload(index, length, name, value, source);\n\n      var _overload4 = _slicedToArray(_overload3, 4);\n\n      index = _overload4[0];\n      length = _overload4[1];\n      formats = _overload4[2];\n      source = _overload4[3];\n      return modify.call(this, function () {\n        return _this4.editor.formatLine(index, length, formats);\n      }, source, index, 0);\n    }\n  }, {\n    key: \"formatText\",\n    value: function formatText(index, length, name, value, source) {\n      var _this5 = this;\n\n      var formats; // eslint-disable-next-line prefer-const\n\n      var _overload5 = overload(index, length, name, value, source);\n\n      var _overload6 = _slicedToArray(_overload5, 4);\n\n      index = _overload6[0];\n      length = _overload6[1];\n      formats = _overload6[2];\n      source = _overload6[3];\n      return modify.call(this, function () {\n        return _this5.editor.formatText(index, length, formats);\n      }, source, index, 0);\n    }\n  }, {\n    key: \"getBounds\",\n    value: function getBounds(index) {\n      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var bounds;\n\n      if (typeof index === 'number') {\n        bounds = this.selection.getBounds(index, length);\n      } else {\n        bounds = this.selection.getBounds(index.index, index.length);\n      }\n\n      var containerBounds = this.container.getBoundingClientRect();\n      return {\n        bottom: bounds.bottom - containerBounds.top,\n        height: bounds.height,\n        left: bounds.left - containerBounds.left,\n        right: bounds.right - containerBounds.left,\n        top: bounds.top - containerBounds.top,\n        width: bounds.width\n      };\n    }\n  }, {\n    key: \"getContents\",\n    value: function getContents() {\n      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getLength() - index;\n\n      var _overload7 = overload(index, length);\n\n      var _overload8 = _slicedToArray(_overload7, 2);\n\n      index = _overload8[0];\n      length = _overload8[1];\n      return this.editor.getContents(index, length);\n    }\n  }, {\n    key: \"getFormat\",\n    value: function getFormat() {\n      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getSelection(true);\n      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      if (typeof index === 'number') {\n        return this.editor.getFormat(index, length);\n      }\n\n      return this.editor.getFormat(index.index, index.length);\n    }\n  }, {\n    key: \"getIndex\",\n    value: function getIndex(blot) {\n      return blot.offset(this.scroll);\n    }\n  }, {\n    key: \"getLength\",\n    value: function getLength() {\n      return this.scroll.length();\n    }\n  }, {\n    key: \"getLeaf\",\n    value: function getLeaf(index) {\n      return this.scroll.leaf(index);\n    }\n  }, {\n    key: \"getLine\",\n    value: function getLine(index) {\n      return this.scroll.line(index);\n    }\n  }, {\n    key: \"getLines\",\n    value: function getLines() {\n      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.MAX_VALUE;\n\n      if (typeof index !== 'number') {\n        return this.scroll.lines(index.index, index.length);\n      }\n\n      return this.scroll.lines(index, length);\n    }\n  }, {\n    key: \"getModule\",\n    value: function getModule(name) {\n      return this.theme.modules[name];\n    }\n  }, {\n    key: \"getSelection\",\n    value: function getSelection() {\n      var focus = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      if (focus) this.focus();\n      this.update(); // Make sure we access getRange with editor in consistent state\n\n      return this.selection.getRange()[0];\n    }\n  }, {\n    key: \"getSemanticHTML\",\n    value: function getSemanticHTML() {\n      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getLength() - index;\n\n      var _overload9 = overload(index, length);\n\n      var _overload10 = _slicedToArray(_overload9, 2);\n\n      index = _overload10[0];\n      length = _overload10[1];\n      return this.editor.getHTML(index, length);\n    }\n  }, {\n    key: \"getText\",\n    value: function getText() {\n      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getLength() - index;\n\n      var _overload11 = overload(index, length);\n\n      var _overload12 = _slicedToArray(_overload11, 2);\n\n      index = _overload12[0];\n      length = _overload12[1];\n      return this.editor.getText(index, length);\n    }\n  }, {\n    key: \"hasFocus\",\n    value: function hasFocus() {\n      return this.selection.hasFocus();\n    }\n  }, {\n    key: \"insertEmbed\",\n    value: function insertEmbed(index, embed, value) {\n      var _this6 = this;\n\n      var source = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Quill.sources.API;\n      return modify.call(this, function () {\n        return _this6.editor.insertEmbed(index, embed, value);\n      }, source, index);\n    }\n  }, {\n    key: \"insertText\",\n    value: function insertText(index, text, name, value, source) {\n      var _this7 = this;\n\n      var formats; // eslint-disable-next-line prefer-const\n\n      var _overload13 = overload(index, 0, name, value, source);\n\n      var _overload14 = _slicedToArray(_overload13, 4);\n\n      index = _overload14[0];\n      formats = _overload14[2];\n      source = _overload14[3];\n      return modify.call(this, function () {\n        return _this7.editor.insertText(index, text, formats);\n      }, source, index, text.length);\n    }\n  }, {\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      return this.scroll.isEnabled();\n    }\n  }, {\n    key: \"off\",\n    value: function off() {\n      var _this$emitter;\n\n      return (_this$emitter = this.emitter).off.apply(_this$emitter, arguments);\n    }\n  }, {\n    key: \"on\",\n    value: function on() {\n      var _this$emitter2;\n\n      return (_this$emitter2 = this.emitter).on.apply(_this$emitter2, arguments);\n    }\n  }, {\n    key: \"once\",\n    value: function once() {\n      var _this$emitter3;\n\n      return (_this$emitter3 = this.emitter).once.apply(_this$emitter3, arguments);\n    }\n  }, {\n    key: \"removeFormat\",\n    value: function removeFormat(index, length, source) {\n      var _this8 = this;\n\n      var _overload15 = overload(index, length, source);\n\n      var _overload16 = _slicedToArray(_overload15, 4);\n\n      index = _overload16[0];\n      length = _overload16[1];\n      source = _overload16[3];\n      return modify.call(this, function () {\n        return _this8.editor.removeFormat(index, length);\n      }, source, index);\n    }\n  }, {\n    key: \"scrollIntoView\",\n    value: function scrollIntoView() {\n      this.selection.scrollIntoView(this.scrollingContainer);\n    }\n  }, {\n    key: \"setContents\",\n    value: function setContents(delta) {\n      var _this9 = this;\n\n      var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _emitter__WEBPACK_IMPORTED_MODULE_5__[/* default */ \"a\"].sources.API;\n      return modify.call(this, function () {\n        delta = new quill_delta__WEBPACK_IMPORTED_MODULE_0___default.a(delta);\n\n        var length = _this9.getLength(); // Quill will set empty editor to \\n\n\n\n        var delete1 = _this9.editor.deleteText(0, length); // delta always applied before existing content\n\n\n        var applied = _this9.editor.applyDelta(delta); // Remove extra \\n from empty editor initialization\n\n\n        var delete2 = _this9.editor.deleteText(_this9.getLength() - 1, 1);\n\n        _this9.emitter.emit(Quill.events.CONTENT_SETTED);\n\n        return delete1.compose(applied).compose(delete2);\n      }, source);\n    }\n  }, {\n    key: \"setSelection\",\n    value: function setSelection(index, length, source) {\n      if (index == null) {\n        this.selection.setRange(null, length || Quill.sources.API);\n      } else {\n        var _overload17 = overload(index, length, source);\n\n        var _overload18 = _slicedToArray(_overload17, 4);\n\n        index = _overload18[0];\n        length = _overload18[1];\n        source = _overload18[3];\n        this.selection.setRange(new _selection__WEBPACK_IMPORTED_MODULE_7__[/* Range */ \"a\"](Math.max(0, index), length), source);\n\n        if (source !== _emitter__WEBPACK_IMPORTED_MODULE_5__[/* default */ \"a\"].sources.SILENT) {\n          this.selection.scrollIntoView(this.scrollingContainer);\n        }\n      }\n    }\n  }, {\n    key: \"setText\",\n    value: function setText(text) {\n      var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _emitter__WEBPACK_IMPORTED_MODULE_5__[/* default */ \"a\"].sources.API;\n      var delta = new quill_delta__WEBPACK_IMPORTED_MODULE_0___default.a().insert(text);\n      return this.setContents(delta, source);\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _emitter__WEBPACK_IMPORTED_MODULE_5__[/* default */ \"a\"].sources.USER;\n      var change = this.scroll.update(source); // Will update selection before selection.update() does if text changes\n\n      this.selection.update(source); // TODO this is usually undefined\n\n      return change;\n    }\n  }, {\n    key: \"updateContents\",\n    value: function updateContents(delta) {\n      var _this10 = this;\n\n      var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _emitter__WEBPACK_IMPORTED_MODULE_5__[/* default */ \"a\"].sources.API;\n      return modify.call(this, function () {\n        delta = new quill_delta__WEBPACK_IMPORTED_MODULE_0___default.a(delta);\n        return _this10.editor.applyDelta(delta, source);\n      }, source, true);\n    }\n  }], [{\n    key: \"debug\",\n    value: function debug(limit) {\n      if (limit === true) {\n        limit = 'log';\n      }\n\n      _logger__WEBPACK_IMPORTED_MODULE_9__[/* default */ \"a\"].level(limit);\n    }\n  }, {\n    key: \"find\",\n    value: function find(node) {\n      return _instances__WEBPACK_IMPORTED_MODULE_8__[/* default */ \"a\"].get(node) || globalRegistry.find(node);\n    }\n  }, {\n    key: \"import\",\n    value: function _import(name) {\n      if (this.imports[name] == null) {\n        debug.error(\"Cannot import \".concat(name, \". Are you sure it was registered?\"));\n      }\n\n      return this.imports[name];\n    }\n  }, {\n    key: \"register\",\n    value: function register(path, target) {\n      var _this11 = this;\n\n      var overwrite = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      if (typeof path !== 'string') {\n        var name = path.attrName || path.blotName;\n\n        if (typeof name === 'string') {\n          // register(Blot | Attributor, overwrite)\n          this.register(\"formats/\".concat(name), path, target);\n        } else {\n          Object.keys(path).forEach(function (key) {\n            _this11.register(key, path[key], target);\n          });\n        }\n      } else {\n        if (this.imports[path] != null && !overwrite) {\n          debug.warn(\"Overwriting \".concat(path, \" with\"), target);\n        }\n\n        this.imports[path] = target;\n\n        if ((path.indexOf('blots/') === 0 || path.indexOf('formats/') === 0) && target.blotName !== 'abstract') {\n          globalRegistry.register(target);\n        }\n\n        if (typeof target.register === 'function') {\n          target.register(globalRegistry);\n        }\n      }\n    }\n  }]);\n\n  return Quill;\n}();\n\nQuill.DEFAULTS = {\n  bounds: null,\n  modules: {},\n  placeholder: '',\n  readOnly: false,\n  registry: globalRegistry,\n  scrollingContainer: null,\n  theme: 'default'\n};\nQuill.events = _emitter__WEBPACK_IMPORTED_MODULE_5__[/* default */ \"a\"].events;\nQuill.sources = _emitter__WEBPACK_IMPORTED_MODULE_5__[/* default */ \"a\"].sources; // eslint-disable-next-line no-undef\n\nQuill.version =  false ? undefined : \"1.5.16\";\nQuill.imports = {\n  delta: quill_delta__WEBPACK_IMPORTED_MODULE_0___default.a,\n  parchment: parchment__WEBPACK_IMPORTED_MODULE_3__,\n  'core/module': _module__WEBPACK_IMPORTED_MODULE_6__[/* default */ \"a\"],\n  'core/theme': _theme__WEBPACK_IMPORTED_MODULE_10__[/* default */ \"a\"]\n};\n\nfunction expandConfig(container, userConfig) {\n  userConfig = lodash_merge__WEBPACK_IMPORTED_MODULE_2___default()({\n    container: container,\n    modules: {\n      clipboard: true,\n      keyboard: true,\n      history: true,\n      uploader: true\n    }\n  }, userConfig);\n\n  if (!userConfig.theme || userConfig.theme === Quill.DEFAULTS.theme) {\n    userConfig.theme = _theme__WEBPACK_IMPORTED_MODULE_10__[/* default */ \"a\"];\n  } else {\n    userConfig.theme = Quill.import(\"themes/\".concat(userConfig.theme));\n\n    if (userConfig.theme == null) {\n      throw new Error(\"Invalid theme \".concat(userConfig.theme, \". Did you register it?\"));\n    }\n  }\n\n  var themeConfig = lodash_clonedeep__WEBPACK_IMPORTED_MODULE_1___default()(userConfig.theme.DEFAULTS);\n  [themeConfig, userConfig].forEach(function (config) {\n    config.modules = config.modules || {};\n    Object.keys(config.modules).forEach(function (module) {\n      if (config.modules[module] === true) {\n        config.modules[module] = {};\n      }\n    });\n  });\n  var moduleNames = Object.keys(themeConfig.modules).concat(Object.keys(userConfig.modules));\n  var moduleConfig = moduleNames.reduce(function (config, name) {\n    var moduleClass = Quill.import(\"modules/\".concat(name));\n\n    if (moduleClass == null) {\n      debug.error(\"Cannot load \".concat(name, \" module. Are you sure you registered it?\"));\n    } else {\n      config[name] = moduleClass.DEFAULTS || {};\n    }\n\n    return config;\n  }, {}); // Special case toolbar shorthand\n\n  if (userConfig.modules != null && userConfig.modules.toolbar && userConfig.modules.toolbar.constructor !== Object) {\n    userConfig.modules.toolbar = {\n      container: userConfig.modules.toolbar\n    };\n  }\n\n  userConfig = lodash_merge__WEBPACK_IMPORTED_MODULE_2___default()({}, Quill.DEFAULTS, {\n    modules: moduleConfig\n  }, themeConfig, userConfig);\n  ['bounds', 'container', 'scrollingContainer'].forEach(function (key) {\n    if (typeof userConfig[key] === 'string') {\n      userConfig[key] = document.querySelector(userConfig[key]);\n    }\n  });\n  userConfig.modules = Object.keys(userConfig.modules).reduce(function (config, name) {\n    if (userConfig.modules[name]) {\n      config[name] = userConfig.modules[name];\n    }\n\n    return config;\n  }, {});\n  return userConfig;\n} // Handle selection preservation and TEXT_CHANGE emission\n// common to modification APIs\n\n\nfunction modify(modifier, source, index, shift) {\n  if (!this.isEnabled() && source === _emitter__WEBPACK_IMPORTED_MODULE_5__[/* default */ \"a\"].sources.USER && !this.allowReadOnlyEdits) {\n    return new quill_delta__WEBPACK_IMPORTED_MODULE_0___default.a();\n  }\n\n  var range = index == null ? null : this.getSelection();\n  var oldDelta = this.editor.delta;\n  var change = modifier();\n\n  if (range != null) {\n    if (index === true) {\n      index = range.index; // eslint-disable-line prefer-destructuring\n    }\n\n    if (shift == null) {\n      range = shiftRange(range, change, source);\n    } else if (shift !== 0) {\n      range = shiftRange(range, index, shift, source);\n    }\n\n    this.setSelection(range, _emitter__WEBPACK_IMPORTED_MODULE_5__[/* default */ \"a\"].sources.SILENT);\n  }\n\n  if (change.length() > 0) {\n    var _this$emitter4;\n\n    var args = [_emitter__WEBPACK_IMPORTED_MODULE_5__[/* default */ \"a\"].events.TEXT_CHANGE, change, oldDelta, source];\n\n    (_this$emitter4 = this.emitter).emit.apply(_this$emitter4, [_emitter__WEBPACK_IMPORTED_MODULE_5__[/* default */ \"a\"].events.EDITOR_CHANGE].concat(args));\n\n    if (source !== _emitter__WEBPACK_IMPORTED_MODULE_5__[/* default */ \"a\"].sources.SILENT) {\n      var _this$emitter5;\n\n      (_this$emitter5 = this.emitter).emit.apply(_this$emitter5, args);\n    }\n  }\n\n  return change;\n}\n\nfunction overload(index, length, name, value, source) {\n  var formats = {};\n\n  if (typeof index.index === 'number' && typeof index.length === 'number') {\n    // Allow for throwaway end (used by insertText/insertEmbed)\n    if (typeof length !== 'number') {\n      source = value;\n      value = name;\n      name = length;\n      length = index.length; // eslint-disable-line prefer-destructuring\n\n      index = index.index; // eslint-disable-line prefer-destructuring\n    } else {\n      length = index.length; // eslint-disable-line prefer-destructuring\n\n      index = index.index; // eslint-disable-line prefer-destructuring\n    }\n  } else if (typeof length !== 'number') {\n    source = value;\n    value = name;\n    name = length;\n    length = 0;\n  } // Handle format being object, two format name/value strings or excluded\n\n\n  if (_typeof(name) === 'object') {\n    formats = name;\n    source = value;\n  } else if (typeof name === 'string') {\n    if (value != null) {\n      formats[name] = value;\n    } else {\n      source = name;\n    }\n  } // Handle optional source\n\n\n  source = source || _emitter__WEBPACK_IMPORTED_MODULE_5__[/* default */ \"a\"].sources.API;\n  return [index, length, formats, source];\n}\n\nfunction shiftRange(range, index, length, source) {\n  if (range == null) return null;\n  var start;\n  var end;\n\n  if (index instanceof quill_delta__WEBPACK_IMPORTED_MODULE_0___default.a) {\n    var _map = [range.index, range.index + range.length].map(function (pos) {\n      return index.transformPosition(pos, source !== _emitter__WEBPACK_IMPORTED_MODULE_5__[/* default */ \"a\"].sources.USER);\n    });\n\n    var _map2 = _slicedToArray(_map, 2);\n\n    start = _map2[0];\n    end = _map2[1];\n  } else {\n    var _map3 = [range.index, range.index + range.length].map(function (pos) {\n      if (pos < index || pos === index && source === _emitter__WEBPACK_IMPORTED_MODULE_5__[/* default */ \"a\"].sources.USER) return pos;\n\n      if (length >= 0) {\n        return pos + length;\n      }\n\n      return Math.max(index, pos + length);\n    });\n\n    var _map4 = _slicedToArray(_map3, 2);\n\n    start = _map4[0];\n    end = _map4[1];\n  }\n\n  return new _selection__WEBPACK_IMPORTED_MODULE_7__[/* Range */ \"a\"](start, end - start);\n}\n\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar fast_diff_1 = __importDefault(__webpack_require__(114));\nvar lodash_clonedeep_1 = __importDefault(__webpack_require__(18));\nvar lodash_isequal_1 = __importDefault(__webpack_require__(29));\nvar AttributeMap_1 = __importDefault(__webpack_require__(115));\nvar Op_1 = __importDefault(__webpack_require__(90));\nvar NULL_CHARACTER = String.fromCharCode(0); // Placeholder char for embed in diff()\nvar Delta = /** @class */ (function () {\n    function Delta(ops) {\n        // Assume we are given a well formed ops\n        if (Array.isArray(ops)) {\n            this.ops = ops;\n        }\n        else if (ops != null && Array.isArray(ops.ops)) {\n            this.ops = ops.ops;\n        }\n        else {\n            this.ops = [];\n        }\n    }\n    Delta.prototype.insert = function (arg, attributes) {\n        var newOp = {};\n        if (typeof arg === 'string' && arg.length === 0) {\n            return this;\n        }\n        newOp.insert = arg;\n        if (attributes != null &&\n            typeof attributes === 'object' &&\n            Object.keys(attributes).length > 0) {\n            newOp.attributes = attributes;\n        }\n        return this.push(newOp);\n    };\n    Delta.prototype.delete = function (length) {\n        if (length <= 0) {\n            return this;\n        }\n        return this.push({ delete: length });\n    };\n    Delta.prototype.retain = function (length, attributes) {\n        if (length <= 0) {\n            return this;\n        }\n        var newOp = { retain: length };\n        if (attributes != null &&\n            typeof attributes === 'object' &&\n            Object.keys(attributes).length > 0) {\n            newOp.attributes = attributes;\n        }\n        return this.push(newOp);\n    };\n    Delta.prototype.push = function (newOp) {\n        var index = this.ops.length;\n        var lastOp = this.ops[index - 1];\n        newOp = lodash_clonedeep_1.default(newOp);\n        if (typeof lastOp === 'object') {\n            if (typeof newOp.delete === 'number' &&\n                typeof lastOp.delete === 'number') {\n                this.ops[index - 1] = { delete: lastOp.delete + newOp.delete };\n                return this;\n            }\n            // Since it does not matter if we insert before or after deleting at the same index,\n            // always prefer to insert first\n            if (typeof lastOp.delete === 'number' && newOp.insert != null) {\n                index -= 1;\n                lastOp = this.ops[index - 1];\n                if (typeof lastOp !== 'object') {\n                    this.ops.unshift(newOp);\n                    return this;\n                }\n            }\n            if (lodash_isequal_1.default(newOp.attributes, lastOp.attributes)) {\n                if (typeof newOp.insert === 'string' &&\n                    typeof lastOp.insert === 'string') {\n                    this.ops[index - 1] = { insert: lastOp.insert + newOp.insert };\n                    if (typeof newOp.attributes === 'object') {\n                        this.ops[index - 1].attributes = newOp.attributes;\n                    }\n                    return this;\n                }\n                else if (typeof newOp.retain === 'number' &&\n                    typeof lastOp.retain === 'number') {\n                    this.ops[index - 1] = { retain: lastOp.retain + newOp.retain };\n                    if (typeof newOp.attributes === 'object') {\n                        this.ops[index - 1].attributes = newOp.attributes;\n                    }\n                    return this;\n                }\n            }\n        }\n        if (index === this.ops.length) {\n            this.ops.push(newOp);\n        }\n        else {\n            this.ops.splice(index, 0, newOp);\n        }\n        return this;\n    };\n    Delta.prototype.chop = function () {\n        var lastOp = this.ops[this.ops.length - 1];\n        if (lastOp && lastOp.retain && !lastOp.attributes) {\n            this.ops.pop();\n        }\n        return this;\n    };\n    Delta.prototype.filter = function (predicate) {\n        return this.ops.filter(predicate);\n    };\n    Delta.prototype.forEach = function (predicate) {\n        this.ops.forEach(predicate);\n    };\n    Delta.prototype.map = function (predicate) {\n        return this.ops.map(predicate);\n    };\n    Delta.prototype.partition = function (predicate) {\n        var passed = [];\n        var failed = [];\n        this.forEach(function (op) {\n            var target = predicate(op) ? passed : failed;\n            target.push(op);\n        });\n        return [passed, failed];\n    };\n    Delta.prototype.reduce = function (predicate, initialValue) {\n        return this.ops.reduce(predicate, initialValue);\n    };\n    Delta.prototype.changeLength = function () {\n        return this.reduce(function (length, elem) {\n            if (elem.insert) {\n                return length + Op_1.default.length(elem);\n            }\n            else if (elem.delete) {\n                return length - elem.delete;\n            }\n            return length;\n        }, 0);\n    };\n    Delta.prototype.length = function () {\n        return this.reduce(function (length, elem) {\n            return length + Op_1.default.length(elem);\n        }, 0);\n    };\n    Delta.prototype.slice = function (start, end) {\n        if (start === void 0) { start = 0; }\n        if (end === void 0) { end = Infinity; }\n        var ops = [];\n        var iter = Op_1.default.iterator(this.ops);\n        var index = 0;\n        while (index < end && iter.hasNext()) {\n            var nextOp = void 0;\n            if (index < start) {\n                nextOp = iter.next(start - index);\n            }\n            else {\n                nextOp = iter.next(end - index);\n                ops.push(nextOp);\n            }\n            index += Op_1.default.length(nextOp);\n        }\n        return new Delta(ops);\n    };\n    Delta.prototype.compose = function (other) {\n        var thisIter = Op_1.default.iterator(this.ops);\n        var otherIter = Op_1.default.iterator(other.ops);\n        var ops = [];\n        var firstOther = otherIter.peek();\n        if (firstOther != null &&\n            typeof firstOther.retain === 'number' &&\n            firstOther.attributes == null) {\n            var firstLeft = firstOther.retain;\n            while (thisIter.peekType() === 'insert' &&\n                thisIter.peekLength() <= firstLeft) {\n                firstLeft -= thisIter.peekLength();\n                ops.push(thisIter.next());\n            }\n            if (firstOther.retain - firstLeft > 0) {\n                otherIter.next(firstOther.retain - firstLeft);\n            }\n        }\n        var delta = new Delta(ops);\n        while (thisIter.hasNext() || otherIter.hasNext()) {\n            if (otherIter.peekType() === 'insert') {\n                delta.push(otherIter.next());\n            }\n            else if (thisIter.peekType() === 'delete') {\n                delta.push(thisIter.next());\n            }\n            else {\n                var length_1 = Math.min(thisIter.peekLength(), otherIter.peekLength());\n                var thisOp = thisIter.next(length_1);\n                var otherOp = otherIter.next(length_1);\n                if (typeof otherOp.retain === 'number') {\n                    var newOp = {};\n                    if (typeof thisOp.retain === 'number') {\n                        newOp.retain = length_1;\n                    }\n                    else {\n                        newOp.insert = thisOp.insert;\n                    }\n                    // Preserve null when composing with a retain, otherwise remove it for inserts\n                    var attributes = AttributeMap_1.default.compose(thisOp.attributes, otherOp.attributes, typeof thisOp.retain === 'number');\n                    if (attributes) {\n                        newOp.attributes = attributes;\n                    }\n                    delta.push(newOp);\n                    // Optimization if rest of other is just retain\n                    if (!otherIter.hasNext() &&\n                        lodash_isequal_1.default(delta.ops[delta.ops.length - 1], newOp)) {\n                        var rest = new Delta(thisIter.rest());\n                        return delta.concat(rest).chop();\n                    }\n                    // Other op should be delete, we could be an insert or retain\n                    // Insert + delete cancels out\n                }\n                else if (typeof otherOp.delete === 'number' &&\n                    typeof thisOp.retain === 'number') {\n                    delta.push(otherOp);\n                }\n            }\n        }\n        return delta.chop();\n    };\n    Delta.prototype.concat = function (other) {\n        var delta = new Delta(this.ops.slice());\n        if (other.ops.length > 0) {\n            delta.push(other.ops[0]);\n            delta.ops = delta.ops.concat(other.ops.slice(1));\n        }\n        return delta;\n    };\n    Delta.prototype.diff = function (other, cursor) {\n        if (this.ops === other.ops) {\n            return new Delta();\n        }\n        var strings = [this, other].map(function (delta) {\n            return delta\n                .map(function (op) {\n                if (op.insert != null) {\n                    return typeof op.insert === 'string' ? op.insert : NULL_CHARACTER;\n                }\n                var prep = delta === other ? 'on' : 'with';\n                throw new Error('diff() called ' + prep + ' non-document');\n            })\n                .join('');\n        });\n        var retDelta = new Delta();\n        var diffResult = fast_diff_1.default(strings[0], strings[1], cursor);\n        var thisIter = Op_1.default.iterator(this.ops);\n        var otherIter = Op_1.default.iterator(other.ops);\n        diffResult.forEach(function (component) {\n            var length = component[1].length;\n            while (length > 0) {\n                var opLength = 0;\n                switch (component[0]) {\n                    case fast_diff_1.default.INSERT:\n                        opLength = Math.min(otherIter.peekLength(), length);\n                        retDelta.push(otherIter.next(opLength));\n                        break;\n                    case fast_diff_1.default.DELETE:\n                        opLength = Math.min(length, thisIter.peekLength());\n                        thisIter.next(opLength);\n                        retDelta.delete(opLength);\n                        break;\n                    case fast_diff_1.default.EQUAL:\n                        opLength = Math.min(thisIter.peekLength(), otherIter.peekLength(), length);\n                        var thisOp = thisIter.next(opLength);\n                        var otherOp = otherIter.next(opLength);\n                        if (lodash_isequal_1.default(thisOp.insert, otherOp.insert)) {\n                            retDelta.retain(opLength, AttributeMap_1.default.diff(thisOp.attributes, otherOp.attributes));\n                        }\n                        else {\n                            retDelta.push(otherOp).delete(opLength);\n                        }\n                        break;\n                }\n                length -= opLength;\n            }\n        });\n        return retDelta.chop();\n    };\n    Delta.prototype.eachLine = function (predicate, newline) {\n        if (newline === void 0) { newline = '\\n'; }\n        var iter = Op_1.default.iterator(this.ops);\n        var line = new Delta();\n        var i = 0;\n        while (iter.hasNext()) {\n            if (iter.peekType() !== 'insert') {\n                return;\n            }\n            var thisOp = iter.peek();\n            var start = Op_1.default.length(thisOp) - iter.peekLength();\n            var index = typeof thisOp.insert === 'string'\n                ? thisOp.insert.indexOf(newline, start) - start\n                : -1;\n            if (index < 0) {\n                line.push(iter.next());\n            }\n            else if (index > 0) {\n                line.push(iter.next(index));\n            }\n            else {\n                if (predicate(line, iter.next(1).attributes || {}, i) === false) {\n                    return;\n                }\n                i += 1;\n                line = new Delta();\n            }\n        }\n        if (line.length() > 0) {\n            predicate(line, {}, i);\n        }\n    };\n    Delta.prototype.invert = function (base) {\n        var inverted = new Delta();\n        this.reduce(function (baseIndex, op) {\n            if (op.insert) {\n                inverted.delete(Op_1.default.length(op));\n            }\n            else if (op.retain && op.attributes == null) {\n                inverted.retain(op.retain);\n                return baseIndex + op.retain;\n            }\n            else if (op.delete || (op.retain && op.attributes)) {\n                var length_2 = (op.delete || op.retain);\n                var slice = base.slice(baseIndex, baseIndex + length_2);\n                slice.forEach(function (baseOp) {\n                    if (op.delete) {\n                        inverted.push(baseOp);\n                    }\n                    else if (op.retain && op.attributes) {\n                        inverted.retain(Op_1.default.length(baseOp), AttributeMap_1.default.invert(op.attributes, baseOp.attributes));\n                    }\n                });\n                return baseIndex + length_2;\n            }\n            return baseIndex;\n        }, 0);\n        return inverted.chop();\n    };\n    Delta.prototype.transform = function (arg, priority) {\n        if (priority === void 0) { priority = false; }\n        priority = !!priority;\n        if (typeof arg === 'number') {\n            return this.transformPosition(arg, priority);\n        }\n        var other = arg;\n        var thisIter = Op_1.default.iterator(this.ops);\n        var otherIter = Op_1.default.iterator(other.ops);\n        var delta = new Delta();\n        while (thisIter.hasNext() || otherIter.hasNext()) {\n            if (thisIter.peekType() === 'insert' &&\n                (priority || otherIter.peekType() !== 'insert')) {\n                delta.retain(Op_1.default.length(thisIter.next()));\n            }\n            else if (otherIter.peekType() === 'insert') {\n                delta.push(otherIter.next());\n            }\n            else {\n                var length_3 = Math.min(thisIter.peekLength(), otherIter.peekLength());\n                var thisOp = thisIter.next(length_3);\n                var otherOp = otherIter.next(length_3);\n                if (thisOp.delete) {\n                    // Our delete either makes their delete redundant or removes their retain\n                    continue;\n                }\n                else if (otherOp.delete) {\n                    delta.push(otherOp);\n                }\n                else {\n                    // We retain either their retain or insert\n                    delta.retain(length_3, AttributeMap_1.default.transform(thisOp.attributes, otherOp.attributes, priority));\n                }\n            }\n        }\n        return delta.chop();\n    };\n    Delta.prototype.transformPosition = function (index, priority) {\n        if (priority === void 0) { priority = false; }\n        priority = !!priority;\n        var thisIter = Op_1.default.iterator(this.ops);\n        var offset = 0;\n        while (thisIter.hasNext() && offset <= index) {\n            var length_4 = thisIter.peekLength();\n            var nextType = thisIter.peekType();\n            thisIter.next();\n            if (nextType === 'delete') {\n                index -= Math.min(length_4, index - offset);\n                continue;\n            }\n            else if (nextType === 'insert' && (offset < index || !priority)) {\n                index += length_4;\n            }\n            offset += length_4;\n        }\n        return index;\n    };\n    Delta.Op = Op_1.default;\n    Delta.AttributeMap = AttributeMap_1.default;\n    return Delta;\n}());\nmodule.exports = Delta;\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, \"ParentBlot\", function() { return /* reexport */ abstract_parent; });\n__webpack_require__.d(__webpack_exports__, \"ContainerBlot\", function() { return /* reexport */ container; });\n__webpack_require__.d(__webpack_exports__, \"LeafBlot\", function() { return /* reexport */ leaf; });\n__webpack_require__.d(__webpack_exports__, \"EmbedBlot\", function() { return /* reexport */ blot_embed; });\n__webpack_require__.d(__webpack_exports__, \"ScrollBlot\", function() { return /* reexport */ blot_scroll; });\n__webpack_require__.d(__webpack_exports__, \"BlockBlot\", function() { return /* reexport */ block; });\n__webpack_require__.d(__webpack_exports__, \"InlineBlot\", function() { return /* reexport */ inline; });\n__webpack_require__.d(__webpack_exports__, \"TextBlot\", function() { return /* reexport */ blot_text; });\n__webpack_require__.d(__webpack_exports__, \"Attributor\", function() { return /* reexport */ attributor; });\n__webpack_require__.d(__webpack_exports__, \"ClassAttributor\", function() { return /* reexport */ attributor_class; });\n__webpack_require__.d(__webpack_exports__, \"StyleAttributor\", function() { return /* reexport */ style; });\n__webpack_require__.d(__webpack_exports__, \"AttributorStore\", function() { return /* reexport */ store; });\n__webpack_require__.d(__webpack_exports__, \"Registry\", function() { return /* reexport */ registry; });\n__webpack_require__.d(__webpack_exports__, \"Scope\", function() { return /* reexport */ src_scope; });\n\n// CONCATENATED MODULE: ./node_modules/parchment/src/scope.ts\nvar Scope;\n\n(function (Scope) {\n  Scope[Scope[\"TYPE\"] = 3] = \"TYPE\";\n  Scope[Scope[\"LEVEL\"] = 12] = \"LEVEL\";\n  Scope[Scope[\"ATTRIBUTE\"] = 13] = \"ATTRIBUTE\";\n  Scope[Scope[\"BLOT\"] = 14] = \"BLOT\";\n  Scope[Scope[\"INLINE\"] = 7] = \"INLINE\";\n  Scope[Scope[\"BLOCK\"] = 11] = \"BLOCK\";\n  Scope[Scope[\"BLOCK_BLOT\"] = 10] = \"BLOCK_BLOT\";\n  Scope[Scope[\"INLINE_BLOT\"] = 6] = \"INLINE_BLOT\";\n  Scope[Scope[\"BLOCK_ATTRIBUTE\"] = 9] = \"BLOCK_ATTRIBUTE\";\n  Scope[Scope[\"INLINE_ATTRIBUTE\"] = 5] = \"INLINE_ATTRIBUTE\";\n  Scope[Scope[\"ANY\"] = 15] = \"ANY\";\n})(Scope || (Scope = {}));\n\n/* harmony default export */ var src_scope = (Scope);\n// CONCATENATED MODULE: ./node_modules/parchment/src/collection/linked-list.ts\nvar LinkedList =\n/** @class */\nfunction () {\n  function LinkedList() {\n    this.head = null;\n    this.tail = null;\n    this.length = 0;\n  }\n\n  LinkedList.prototype.append = function () {\n    var nodes = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      nodes[_i] = arguments[_i];\n    }\n\n    this.insertBefore(nodes[0], null);\n\n    if (nodes.length > 1) {\n      var rest = nodes.slice(1);\n      this.append.apply(this, rest);\n    }\n  };\n\n  LinkedList.prototype.at = function (index) {\n    var next = this.iterator();\n    var cur = next();\n\n    while (cur && index > 0) {\n      index -= 1;\n      cur = next();\n    }\n\n    return cur;\n  };\n\n  LinkedList.prototype.contains = function (node) {\n    var next = this.iterator();\n    var cur = next();\n\n    while (cur) {\n      if (cur === node) {\n        return true;\n      }\n\n      cur = next();\n    }\n\n    return false;\n  };\n\n  LinkedList.prototype.indexOf = function (node) {\n    var next = this.iterator();\n    var cur = next();\n    var index = 0;\n\n    while (cur) {\n      if (cur === node) {\n        return index;\n      }\n\n      index += 1;\n      cur = next();\n    }\n\n    return -1;\n  };\n\n  LinkedList.prototype.insertBefore = function (node, refNode) {\n    if (node == null) {\n      return;\n    }\n\n    this.remove(node);\n    node.next = refNode;\n\n    if (refNode != null) {\n      node.prev = refNode.prev;\n\n      if (refNode.prev != null) {\n        refNode.prev.next = node;\n      }\n\n      refNode.prev = node;\n\n      if (refNode === this.head) {\n        this.head = node;\n      }\n    } else if (this.tail != null) {\n      this.tail.next = node;\n      node.prev = this.tail;\n      this.tail = node;\n    } else {\n      node.prev = null;\n      this.head = this.tail = node;\n    }\n\n    this.length += 1;\n  };\n\n  LinkedList.prototype.offset = function (target) {\n    var index = 0;\n    var cur = this.head;\n\n    while (cur != null) {\n      if (cur === target) {\n        return index;\n      }\n\n      index += cur.length();\n      cur = cur.next;\n    }\n\n    return -1;\n  };\n\n  LinkedList.prototype.remove = function (node) {\n    if (!this.contains(node)) {\n      return;\n    }\n\n    if (node.prev != null) {\n      node.prev.next = node.next;\n    }\n\n    if (node.next != null) {\n      node.next.prev = node.prev;\n    }\n\n    if (node === this.head) {\n      this.head = node.next;\n    }\n\n    if (node === this.tail) {\n      this.tail = node.prev;\n    }\n\n    this.length -= 1;\n  };\n\n  LinkedList.prototype.iterator = function (curNode) {\n    if (curNode === void 0) {\n      curNode = this.head;\n    } // TODO use yield when we can\n\n\n    return function () {\n      var ret = curNode;\n\n      if (curNode != null) {\n        curNode = curNode.next;\n      }\n\n      return ret;\n    };\n  };\n\n  LinkedList.prototype.find = function (index, inclusive) {\n    if (inclusive === void 0) {\n      inclusive = false;\n    }\n\n    var next = this.iterator();\n    var cur = next();\n\n    while (cur) {\n      var length = cur.length();\n\n      if (index < length || inclusive && index === length && (cur.next == null || cur.next.length() !== 0)) {\n        return [cur, index];\n      }\n\n      index -= length;\n      cur = next();\n    }\n\n    return [null, 0];\n  };\n\n  LinkedList.prototype.forEach = function (callback) {\n    var next = this.iterator();\n    var cur = next();\n\n    while (cur) {\n      callback(cur);\n      cur = next();\n    }\n  };\n\n  LinkedList.prototype.forEachAt = function (index, length, callback) {\n    if (length <= 0) {\n      return;\n    }\n\n    var _a = this.find(index),\n        startNode = _a[0],\n        offset = _a[1];\n\n    var curIndex = index - offset;\n    var next = this.iterator(startNode);\n    var cur = next();\n\n    while (cur && curIndex < index + length) {\n      var curLength = cur.length();\n\n      if (index > curIndex) {\n        callback(cur, index - curIndex, Math.min(length, curIndex + curLength - index));\n      } else {\n        callback(cur, 0, Math.min(curLength, index + length - curIndex));\n      }\n\n      curIndex += curLength;\n      cur = next();\n    }\n  };\n\n  LinkedList.prototype.map = function (callback) {\n    return this.reduce(function (memo, cur) {\n      memo.push(callback(cur));\n      return memo;\n    }, []);\n  };\n\n  LinkedList.prototype.reduce = function (callback, memo) {\n    var next = this.iterator();\n    var cur = next();\n\n    while (cur) {\n      memo = callback(memo, cur);\n      cur = next();\n    }\n\n    return memo;\n  };\n\n  return LinkedList;\n}();\n\n/* harmony default export */ var linked_list = (LinkedList);\n// CONCATENATED MODULE: ./node_modules/parchment/src/error.ts\nvar __extends = undefined && undefined.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar ParchmentError =\n/** @class */\nfunction (_super) {\n  __extends(ParchmentError, _super);\n\n  function ParchmentError(message) {\n    var _this = this;\n\n    message = '[Parchment] ' + message;\n    _this = _super.call(this, message) || this;\n    _this.message = message;\n    _this.name = _this.constructor.name;\n    return _this;\n  }\n\n  return ParchmentError;\n}(Error);\n\n/* harmony default export */ var error = (ParchmentError);\n// CONCATENATED MODULE: ./node_modules/parchment/src/registry.ts\n\n\n\nvar registry_Registry =\n/** @class */\nfunction () {\n  function Registry() {\n    this.attributes = {};\n    this.classes = {};\n    this.tags = {};\n    this.types = {};\n  }\n\n  Registry.find = function (node, bubble) {\n    if (bubble === void 0) {\n      bubble = false;\n    }\n\n    if (node == null) {\n      return null;\n    }\n\n    if (this.blots.has(node)) {\n      return this.blots.get(node) || null;\n    }\n\n    if (bubble) {\n      return this.find(node.parentNode, bubble);\n    }\n\n    return null;\n  };\n\n  Registry.prototype.create = function (scroll, input, value) {\n    var match = this.query(input);\n\n    if (match == null) {\n      throw new error(\"Unable to create \" + input + \" blot\");\n    }\n\n    var blotClass = match;\n    var node = // @ts-ignore\n    input instanceof Node || input.nodeType === Node.TEXT_NODE ? input : blotClass.create(value);\n    var blot = new blotClass(scroll, node, value);\n    Registry.blots.set(blot.domNode, blot);\n    return blot;\n  };\n\n  Registry.prototype.find = function (node, bubble) {\n    if (bubble === void 0) {\n      bubble = false;\n    }\n\n    return Registry.find(node, bubble);\n  };\n\n  Registry.prototype.query = function (query, scope) {\n    var _this = this;\n\n    if (scope === void 0) {\n      scope = src_scope.ANY;\n    }\n\n    var match;\n\n    if (typeof query === 'string') {\n      match = this.types[query] || this.attributes[query]; // @ts-ignore\n    } else if (query instanceof Text || query.nodeType === Node.TEXT_NODE) {\n      match = this.types.text;\n    } else if (typeof query === 'number') {\n      if (query & src_scope.LEVEL & src_scope.BLOCK) {\n        match = this.types.block;\n      } else if (query & src_scope.LEVEL & src_scope.INLINE) {\n        match = this.types.inline;\n      }\n    } else if (query instanceof HTMLElement) {\n      var names = (query.getAttribute('class') || '').split(/\\s+/);\n      names.some(function (name) {\n        match = _this.classes[name];\n\n        if (match) {\n          return true;\n        }\n\n        return false;\n      });\n      match = match || this.tags[query.tagName];\n    }\n\n    if (match == null) {\n      return null;\n    } // @ts-ignore\n\n\n    if (scope & src_scope.LEVEL & match.scope && scope & src_scope.TYPE & match.scope) {\n      return match;\n    }\n\n    return null;\n  };\n\n  Registry.prototype.register = function () {\n    var _this = this;\n\n    var definitions = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      definitions[_i] = arguments[_i];\n    }\n\n    if (definitions.length > 1) {\n      return definitions.map(function (d) {\n        return _this.register(d);\n      });\n    }\n\n    var definition = definitions[0];\n\n    if (typeof definition.blotName !== 'string' && typeof definition.attrName !== 'string') {\n      throw new error('Invalid definition');\n    } else if (definition.blotName === 'abstract') {\n      throw new error('Cannot register abstract class');\n    }\n\n    this.types[definition.blotName || definition.attrName] = definition;\n\n    if (typeof definition.keyName === 'string') {\n      this.attributes[definition.keyName] = definition;\n    } else {\n      if (definition.className != null) {\n        this.classes[definition.className] = definition;\n      }\n\n      if (definition.tagName != null) {\n        if (Array.isArray(definition.tagName)) {\n          definition.tagName = definition.tagName.map(function (tagName) {\n            return tagName.toUpperCase();\n          });\n        } else {\n          definition.tagName = definition.tagName.toUpperCase();\n        }\n\n        var tagNames = Array.isArray(definition.tagName) ? definition.tagName : [definition.tagName];\n        tagNames.forEach(function (tag) {\n          if (_this.tags[tag] == null || definition.className == null) {\n            _this.tags[tag] = definition;\n          }\n        });\n      }\n    }\n\n    return definition;\n  };\n\n  Registry.blots = new WeakMap();\n  return Registry;\n}();\n\n/* harmony default export */ var registry = (registry_Registry);\n// CONCATENATED MODULE: ./node_modules/parchment/src/blot/abstract/shadow.ts\n\n\n\n\nvar shadow_ShadowBlot =\n/** @class */\nfunction () {\n  function ShadowBlot(scroll, domNode) {\n    this.scroll = scroll;\n    this.domNode = domNode;\n    registry.blots.set(domNode, this);\n    this.prev = null;\n    this.next = null;\n  }\n\n  ShadowBlot.create = function (value) {\n    if (this.tagName == null) {\n      throw new error('Blot definition missing tagName');\n    }\n\n    var node;\n\n    if (Array.isArray(this.tagName)) {\n      if (typeof value === 'string') {\n        value = value.toUpperCase();\n\n        if (parseInt(value, 10).toString() === value) {\n          value = parseInt(value, 10);\n        }\n      }\n\n      if (typeof value === 'number') {\n        node = document.createElement(this.tagName[value - 1]);\n      } else if (this.tagName.indexOf(value) > -1) {\n        node = document.createElement(value);\n      } else {\n        node = document.createElement(this.tagName[0]);\n      }\n    } else {\n      node = document.createElement(this.tagName);\n    }\n\n    if (this.className) {\n      node.classList.add(this.className);\n    }\n\n    return node;\n  };\n\n  Object.defineProperty(ShadowBlot.prototype, \"statics\", {\n    // Hack for accessing inherited static methods\n    get: function get() {\n      return this.constructor;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  ShadowBlot.prototype.attach = function () {// Nothing to do\n  };\n\n  ShadowBlot.prototype.clone = function () {\n    var domNode = this.domNode.cloneNode(false);\n    return this.scroll.create(domNode);\n  };\n\n  ShadowBlot.prototype.detach = function () {\n    if (this.parent != null) {\n      this.parent.removeChild(this);\n    }\n\n    registry.blots.delete(this.domNode);\n  };\n\n  ShadowBlot.prototype.deleteAt = function (index, length) {\n    var blot = this.isolate(index, length);\n    blot.remove();\n  };\n\n  ShadowBlot.prototype.formatAt = function (index, length, name, value) {\n    var blot = this.isolate(index, length);\n\n    if (this.scroll.query(name, src_scope.BLOT) != null && value) {\n      blot.wrap(name, value);\n    } else if (this.scroll.query(name, src_scope.ATTRIBUTE) != null) {\n      var parent = this.scroll.create(this.statics.scope);\n      blot.wrap(parent);\n      parent.format(name, value);\n    }\n  };\n\n  ShadowBlot.prototype.insertAt = function (index, value, def) {\n    var blot = def == null ? this.scroll.create('text', value) : this.scroll.create(value, def);\n    var ref = this.split(index);\n    this.parent.insertBefore(blot, ref || undefined);\n  };\n\n  ShadowBlot.prototype.isolate = function (index, length) {\n    var target = this.split(index);\n\n    if (target == null) {\n      throw new Error('Attempt to isolate at end');\n    }\n\n    target.split(length);\n    return target;\n  };\n\n  ShadowBlot.prototype.length = function () {\n    return 1;\n  };\n\n  ShadowBlot.prototype.offset = function (root) {\n    if (root === void 0) {\n      root = this.parent;\n    }\n\n    if (this.parent == null || this === root) {\n      return 0;\n    }\n\n    return this.parent.children.offset(this) + this.parent.offset(root);\n  };\n\n  ShadowBlot.prototype.optimize = function (_context) {\n    if (this.statics.requiredContainer && !(this.parent instanceof this.statics.requiredContainer)) {\n      this.wrap(this.statics.requiredContainer.blotName);\n    }\n  };\n\n  ShadowBlot.prototype.remove = function () {\n    if (this.domNode.parentNode != null) {\n      this.domNode.parentNode.removeChild(this.domNode);\n    }\n\n    this.detach();\n  };\n\n  ShadowBlot.prototype.replaceWith = function (name, value) {\n    var replacement = typeof name === 'string' ? this.scroll.create(name, value) : name;\n\n    if (this.parent != null) {\n      this.parent.insertBefore(replacement, this.next || undefined);\n      this.remove();\n    }\n\n    return replacement;\n  };\n\n  ShadowBlot.prototype.split = function (index, _force) {\n    return index === 0 ? this : this.next;\n  };\n\n  ShadowBlot.prototype.update = function (_mutations, _context) {// Nothing to do by default\n  };\n\n  ShadowBlot.prototype.wrap = function (name, value) {\n    var wrapper = typeof name === 'string' ? this.scroll.create(name, value) : name;\n\n    if (this.parent != null) {\n      this.parent.insertBefore(wrapper, this.next || undefined);\n    }\n\n    if (typeof wrapper.appendChild !== 'function') {\n      throw new error(\"Cannot wrap \" + name);\n    }\n\n    wrapper.appendChild(this);\n    return wrapper;\n  };\n\n  ShadowBlot.blotName = 'abstract';\n  return ShadowBlot;\n}();\n\n/* harmony default export */ var shadow = (shadow_ShadowBlot);\n// CONCATENATED MODULE: ./node_modules/parchment/src/blot/abstract/parent.ts\nvar parent_extends = undefined && undefined.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\n\n\n\n\n\nfunction makeAttachedBlot(node, scroll) {\n  var blot = scroll.find(node);\n\n  if (blot == null) {\n    try {\n      blot = scroll.create(node);\n    } catch (e) {\n      blot = scroll.create(src_scope.INLINE);\n      Array.from(node.childNodes).forEach(function (child) {\n        // @ts-ignore\n        blot.domNode.appendChild(child);\n      });\n\n      if (node.parentNode) {\n        node.parentNode.replaceChild(blot.domNode, node);\n      }\n\n      blot.attach();\n    }\n  }\n\n  return blot;\n}\n\nvar parent_ParentBlot =\n/** @class */\nfunction (_super) {\n  parent_extends(ParentBlot, _super);\n\n  function ParentBlot(scroll, domNode) {\n    var _this = _super.call(this, scroll, domNode) || this;\n\n    _this.uiNode = null;\n\n    _this.build();\n\n    return _this;\n  }\n\n  ParentBlot.prototype.appendChild = function (other) {\n    this.insertBefore(other);\n  };\n\n  ParentBlot.prototype.attach = function () {\n    _super.prototype.attach.call(this);\n\n    this.children.forEach(function (child) {\n      child.attach();\n    });\n  };\n\n  ParentBlot.prototype.attachUI = function (node) {\n    if (this.uiNode != null) {\n      this.uiNode.remove();\n    }\n\n    this.uiNode = node;\n\n    if (ParentBlot.uiClass) {\n      this.uiNode.classList.add(ParentBlot.uiClass);\n    }\n\n    this.uiNode.setAttribute('contenteditable', 'false');\n    this.domNode.insertBefore(this.uiNode, this.domNode.firstChild);\n  };\n\n  ParentBlot.prototype.build = function () {\n    var _this = this;\n\n    this.children = new linked_list(); // Need to be reversed for if DOM nodes already in order\n\n    Array.from(this.domNode.childNodes).filter(function (node) {\n      return node !== _this.uiNode;\n    }).reverse().forEach(function (node) {\n      try {\n        var child = makeAttachedBlot(node, _this.scroll);\n\n        _this.insertBefore(child, _this.children.head || undefined);\n      } catch (err) {\n        if (err instanceof error) {\n          return;\n        } else {\n          throw err;\n        }\n      }\n    });\n  };\n\n  ParentBlot.prototype.deleteAt = function (index, length) {\n    if (index === 0 && length === this.length()) {\n      return this.remove();\n    }\n\n    this.children.forEachAt(index, length, function (child, offset, childLength) {\n      child.deleteAt(offset, childLength);\n    });\n  };\n\n  ParentBlot.prototype.descendant = function (criteria, index) {\n    if (index === void 0) {\n      index = 0;\n    }\n\n    var _a = this.children.find(index),\n        child = _a[0],\n        offset = _a[1];\n\n    if (criteria.blotName == null && criteria(child) || criteria.blotName != null && child instanceof criteria) {\n      return [child, offset];\n    } else if (child instanceof ParentBlot) {\n      return child.descendant(criteria, offset);\n    } else {\n      return [null, -1];\n    }\n  };\n\n  ParentBlot.prototype.descendants = function (criteria, index, length) {\n    if (index === void 0) {\n      index = 0;\n    }\n\n    if (length === void 0) {\n      length = Number.MAX_VALUE;\n    }\n\n    var descendants = [];\n    var lengthLeft = length;\n    this.children.forEachAt(index, length, function (child, childIndex, childLength) {\n      if (criteria.blotName == null && criteria(child) || criteria.blotName != null && child instanceof criteria) {\n        descendants.push(child);\n      }\n\n      if (child instanceof ParentBlot) {\n        descendants = descendants.concat(child.descendants(criteria, childIndex, lengthLeft));\n      }\n\n      lengthLeft -= childLength;\n    });\n    return descendants;\n  };\n\n  ParentBlot.prototype.detach = function () {\n    this.children.forEach(function (child) {\n      child.detach();\n    });\n\n    _super.prototype.detach.call(this);\n  };\n\n  ParentBlot.prototype.enforceAllowedChildren = function () {\n    var _this = this;\n\n    var done = false;\n    this.children.forEach(function (child) {\n      if (done) {\n        return;\n      }\n\n      var allowed = _this.statics.allowedChildren.some(function (def) {\n        return child instanceof def;\n      });\n\n      if (allowed) {\n        return;\n      }\n\n      if (child.statics.scope === src_scope.BLOCK_BLOT) {\n        if (child.next != null) {\n          _this.splitAfter(child);\n        }\n\n        if (child.prev != null) {\n          _this.splitAfter(child.prev);\n        }\n\n        child.parent.unwrap();\n        done = true;\n      } else if (child instanceof ParentBlot) {\n        child.unwrap();\n      } else {\n        child.remove();\n      }\n    });\n  };\n\n  ParentBlot.prototype.formatAt = function (index, length, name, value) {\n    this.children.forEachAt(index, length, function (child, offset, childLength) {\n      child.formatAt(offset, childLength, name, value);\n    });\n  };\n\n  ParentBlot.prototype.insertAt = function (index, value, def) {\n    var _a = this.children.find(index),\n        child = _a[0],\n        offset = _a[1];\n\n    if (child) {\n      child.insertAt(offset, value, def);\n    } else {\n      var blot = def == null ? this.scroll.create('text', value) : this.scroll.create(value, def);\n      this.appendChild(blot);\n    }\n  };\n\n  ParentBlot.prototype.insertBefore = function (childBlot, refBlot) {\n    if (childBlot.parent != null) {\n      childBlot.parent.children.remove(childBlot);\n    }\n\n    var refDomNode = null;\n    this.children.insertBefore(childBlot, refBlot || null);\n    childBlot.parent = this;\n\n    if (refBlot != null) {\n      refDomNode = refBlot.domNode;\n    }\n\n    if (this.domNode.parentNode !== childBlot.domNode || this.domNode.nextSibling !== refDomNode) {\n      this.domNode.insertBefore(childBlot.domNode, refDomNode);\n    }\n\n    childBlot.attach();\n  };\n\n  ParentBlot.prototype.length = function () {\n    return this.children.reduce(function (memo, child) {\n      return memo + child.length();\n    }, 0);\n  };\n\n  ParentBlot.prototype.moveChildren = function (targetParent, refNode) {\n    this.children.forEach(function (child) {\n      targetParent.insertBefore(child, refNode);\n    });\n  };\n\n  ParentBlot.prototype.optimize = function (context) {\n    _super.prototype.optimize.call(this, context);\n\n    this.enforceAllowedChildren();\n\n    if (this.uiNode != null && this.uiNode !== this.domNode.firstChild) {\n      this.domNode.insertBefore(this.uiNode, this.domNode.firstChild);\n    }\n\n    if (this.children.length === 0) {\n      if (this.statics.defaultChild != null) {\n        var child = this.scroll.create(this.statics.defaultChild.blotName);\n        this.appendChild(child); // TODO double check if necessary\n        // child.optimize(context);\n      } else {\n        this.remove();\n      }\n    }\n  };\n\n  ParentBlot.prototype.path = function (index, inclusive) {\n    if (inclusive === void 0) {\n      inclusive = false;\n    }\n\n    var _a = this.children.find(index, inclusive),\n        child = _a[0],\n        offset = _a[1];\n\n    var position = [[this, index]];\n\n    if (child instanceof ParentBlot) {\n      return position.concat(child.path(offset, inclusive));\n    } else if (child != null) {\n      position.push([child, offset]);\n    }\n\n    return position;\n  };\n\n  ParentBlot.prototype.removeChild = function (child) {\n    this.children.remove(child);\n  };\n\n  ParentBlot.prototype.replaceWith = function (name, value) {\n    var replacement = typeof name === 'string' ? this.scroll.create(name, value) : name;\n\n    if (replacement instanceof ParentBlot) {\n      this.moveChildren(replacement);\n    }\n\n    return _super.prototype.replaceWith.call(this, replacement);\n  };\n\n  ParentBlot.prototype.split = function (index, force) {\n    if (force === void 0) {\n      force = false;\n    }\n\n    if (!force) {\n      if (index === 0) {\n        return this;\n      }\n\n      if (index === this.length()) {\n        return this.next;\n      }\n    }\n\n    var after = this.clone();\n\n    if (this.parent) {\n      this.parent.insertBefore(after, this.next || undefined);\n    }\n\n    this.children.forEachAt(index, this.length(), function (child, offset, _length) {\n      var split = child.split(offset, force);\n\n      if (split != null) {\n        after.appendChild(split);\n      }\n    });\n    return after;\n  };\n\n  ParentBlot.prototype.splitAfter = function (child) {\n    var after = this.clone();\n\n    while (child.next != null) {\n      after.appendChild(child.next);\n    }\n\n    if (this.parent) {\n      this.parent.insertBefore(after, this.next || undefined);\n    }\n\n    return after;\n  };\n\n  ParentBlot.prototype.unwrap = function () {\n    if (this.parent) {\n      this.moveChildren(this.parent, this.next || undefined);\n    }\n\n    this.remove();\n  };\n\n  ParentBlot.prototype.update = function (mutations, _context) {\n    var _this = this;\n\n    var addedNodes = [];\n    var removedNodes = [];\n    mutations.forEach(function (mutation) {\n      if (mutation.target === _this.domNode && mutation.type === 'childList') {\n        addedNodes.push.apply(addedNodes, mutation.addedNodes);\n        removedNodes.push.apply(removedNodes, mutation.removedNodes);\n      }\n    });\n    removedNodes.forEach(function (node) {\n      // Check node has actually been removed\n      // One exception is Chrome does not immediately remove IFRAMEs\n      // from DOM but MutationRecord is correct in its reported removal\n      if (node.parentNode != null && // @ts-ignore\n      node.tagName !== 'IFRAME' && document.body.compareDocumentPosition(node) & Node.DOCUMENT_POSITION_CONTAINED_BY) {\n        return;\n      }\n\n      var blot = _this.scroll.find(node);\n\n      if (blot == null) {\n        return;\n      }\n\n      if (blot.domNode.parentNode == null || blot.domNode.parentNode === _this.domNode) {\n        blot.detach();\n      }\n    });\n    addedNodes.filter(function (node) {\n      return node.parentNode === _this.domNode || node === _this.uiNode;\n    }).sort(function (a, b) {\n      if (a === b) {\n        return 0;\n      }\n\n      if (a.compareDocumentPosition(b) & Node.DOCUMENT_POSITION_FOLLOWING) {\n        return 1;\n      }\n\n      return -1;\n    }).forEach(function (node) {\n      var refBlot = null;\n\n      if (node.nextSibling != null) {\n        refBlot = _this.scroll.find(node.nextSibling);\n      }\n\n      var blot = makeAttachedBlot(node, _this.scroll);\n\n      if (blot.next !== refBlot || blot.next == null) {\n        if (blot.parent != null) {\n          blot.parent.removeChild(_this);\n        }\n\n        _this.insertBefore(blot, refBlot || undefined);\n      }\n    });\n    this.enforceAllowedChildren();\n  };\n\n  ParentBlot.uiClass = '';\n  return ParentBlot;\n}(shadow);\n\n/* harmony default export */ var abstract_parent = (parent_ParentBlot);\n// CONCATENATED MODULE: ./node_modules/parchment/src/blot/abstract/container.ts\nvar container_extends = undefined && undefined.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\n\n\n\nvar container_ContainerBlot =\n/** @class */\nfunction (_super) {\n  container_extends(ContainerBlot, _super);\n\n  function ContainerBlot() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  ContainerBlot.prototype.checkMerge = function () {\n    return this.next !== null && this.next.statics.blotName === this.statics.blotName;\n  };\n\n  ContainerBlot.prototype.deleteAt = function (index, length) {\n    _super.prototype.deleteAt.call(this, index, length);\n\n    this.enforceAllowedChildren();\n  };\n\n  ContainerBlot.prototype.formatAt = function (index, length, name, value) {\n    _super.prototype.formatAt.call(this, index, length, name, value);\n\n    this.enforceAllowedChildren();\n  };\n\n  ContainerBlot.prototype.insertAt = function (index, value, def) {\n    _super.prototype.insertAt.call(this, index, value, def);\n\n    this.enforceAllowedChildren();\n  };\n\n  ContainerBlot.prototype.optimize = function (context) {\n    _super.prototype.optimize.call(this, context);\n\n    if (this.children.length > 0 && this.next != null && this.checkMerge()) {\n      this.next.moveChildren(this);\n      this.next.remove();\n    }\n  };\n\n  ContainerBlot.blotName = 'container';\n  ContainerBlot.scope = src_scope.BLOCK_BLOT;\n  return ContainerBlot;\n}(abstract_parent);\n\n/* harmony default export */ var container = (container_ContainerBlot);\n// CONCATENATED MODULE: ./node_modules/parchment/src/blot/abstract/leaf.ts\nvar leaf_extends = undefined && undefined.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\n\n\n\nvar leaf_LeafBlot =\n/** @class */\nfunction (_super) {\n  leaf_extends(LeafBlot, _super);\n\n  function LeafBlot() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  LeafBlot.value = function (_domNode) {\n    return true;\n  };\n\n  LeafBlot.prototype.index = function (node, offset) {\n    if (this.domNode === node || this.domNode.compareDocumentPosition(node) & Node.DOCUMENT_POSITION_CONTAINED_BY) {\n      return Math.min(offset, 1);\n    }\n\n    return -1;\n  };\n\n  LeafBlot.prototype.position = function (index, _inclusive) {\n    var childNodes = Array.from(this.parent.domNode.childNodes);\n    var offset = childNodes.indexOf(this.domNode);\n\n    if (index > 0) {\n      offset += 1;\n    }\n\n    return [this.parent.domNode, offset];\n  };\n\n  LeafBlot.prototype.value = function () {\n    var _a;\n\n    return _a = {}, _a[this.statics.blotName] = this.statics.value(this.domNode) || true, _a;\n  };\n\n  LeafBlot.scope = src_scope.INLINE_BLOT;\n  return LeafBlot;\n}(shadow);\n\n/* harmony default export */ var leaf = (leaf_LeafBlot);\n// CONCATENATED MODULE: ./node_modules/parchment/src/attributor/attributor.ts\n\n\nvar attributor_Attributor =\n/** @class */\nfunction () {\n  function Attributor(attrName, keyName, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this.attrName = attrName;\n    this.keyName = keyName;\n    var attributeBit = src_scope.TYPE & src_scope.ATTRIBUTE;\n    this.scope = options.scope != null ? // Ignore type bits, force attribute bit\n    options.scope & src_scope.LEVEL | attributeBit : src_scope.ATTRIBUTE;\n\n    if (options.whitelist != null) {\n      this.whitelist = options.whitelist;\n    }\n  }\n\n  Attributor.keys = function (node) {\n    return Array.from(node.attributes).map(function (item) {\n      return item.name;\n    });\n  };\n\n  Attributor.prototype.add = function (node, value) {\n    if (!this.canAdd(node, value)) {\n      return false;\n    }\n\n    node.setAttribute(this.keyName, value);\n    return true;\n  };\n\n  Attributor.prototype.canAdd = function (_node, value) {\n    if (this.whitelist == null) {\n      return true;\n    }\n\n    if (typeof value === 'string') {\n      return this.whitelist.indexOf(value.replace(/[\"']/g, '')) > -1;\n    } else {\n      return this.whitelist.indexOf(value) > -1;\n    }\n  };\n\n  Attributor.prototype.remove = function (node) {\n    node.removeAttribute(this.keyName);\n  };\n\n  Attributor.prototype.value = function (node) {\n    var value = node.getAttribute(this.keyName);\n\n    if (this.canAdd(node, value) && value) {\n      return value;\n    }\n\n    return '';\n  };\n\n  return Attributor;\n}();\n\n/* harmony default export */ var attributor = (attributor_Attributor);\n// CONCATENATED MODULE: ./node_modules/parchment/src/attributor/class.ts\nvar class_extends = undefined && undefined.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\n\n\nfunction class_match(node, prefix) {\n  var className = node.getAttribute('class') || '';\n  return className.split(/\\s+/).filter(function (name) {\n    return name.indexOf(prefix + \"-\") === 0;\n  });\n}\n\nvar ClassAttributor =\n/** @class */\nfunction (_super) {\n  class_extends(ClassAttributor, _super);\n\n  function ClassAttributor() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  ClassAttributor.keys = function (node) {\n    return (node.getAttribute('class') || '').split(/\\s+/).map(function (name) {\n      return name.split('-').slice(0, -1).join('-');\n    });\n  };\n\n  ClassAttributor.prototype.add = function (node, value) {\n    if (!this.canAdd(node, value)) {\n      return false;\n    }\n\n    this.remove(node);\n    node.classList.add(this.keyName + \"-\" + value);\n    return true;\n  };\n\n  ClassAttributor.prototype.remove = function (node) {\n    var matches = class_match(node, this.keyName);\n    matches.forEach(function (name) {\n      node.classList.remove(name);\n    });\n\n    if (node.classList.length === 0) {\n      node.removeAttribute('class');\n    }\n  };\n\n  ClassAttributor.prototype.value = function (node) {\n    var result = class_match(node, this.keyName)[0] || '';\n    var value = result.slice(this.keyName.length + 1); // +1 for hyphen\n\n    return this.canAdd(node, value) ? value : '';\n  };\n\n  return ClassAttributor;\n}(attributor);\n\n/* harmony default export */ var attributor_class = (ClassAttributor);\n// CONCATENATED MODULE: ./node_modules/parchment/src/attributor/style.ts\nvar style_extends = undefined && undefined.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\n\n\nfunction camelize(name) {\n  var parts = name.split('-');\n  var rest = parts.slice(1).map(function (part) {\n    return part[0].toUpperCase() + part.slice(1);\n  }).join('');\n  return parts[0] + rest;\n}\n\nvar StyleAttributor =\n/** @class */\nfunction (_super) {\n  style_extends(StyleAttributor, _super);\n\n  function StyleAttributor() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  StyleAttributor.keys = function (node) {\n    return (node.getAttribute('style') || '').split(';').map(function (value) {\n      var arr = value.split(':');\n      return arr[0].trim();\n    });\n  };\n\n  StyleAttributor.prototype.add = function (node, value) {\n    if (!this.canAdd(node, value)) {\n      return false;\n    } // @ts-ignore\n\n\n    node.style[camelize(this.keyName)] = value;\n    return true;\n  };\n\n  StyleAttributor.prototype.remove = function (node) {\n    // @ts-ignore\n    node.style[camelize(this.keyName)] = '';\n\n    if (!node.getAttribute('style')) {\n      node.removeAttribute('style');\n    }\n  };\n\n  StyleAttributor.prototype.value = function (node) {\n    // @ts-ignore\n    var value = node.style[camelize(this.keyName)];\n    return this.canAdd(node, value) ? value : '';\n  };\n\n  return StyleAttributor;\n}(attributor);\n\n/* harmony default export */ var style = (StyleAttributor);\n// CONCATENATED MODULE: ./node_modules/parchment/src/attributor/store.ts\n\n\n\n\n\n\nvar store_AttributorStore =\n/** @class */\nfunction () {\n  function AttributorStore(domNode) {\n    this.attributes = {};\n    this.domNode = domNode;\n    this.build();\n  }\n\n  AttributorStore.prototype.attribute = function (attribute, value) {\n    // verb\n    if (value) {\n      if (attribute.add(this.domNode, value)) {\n        if (attribute.value(this.domNode) != null) {\n          this.attributes[attribute.attrName] = attribute;\n        } else {\n          delete this.attributes[attribute.attrName];\n        }\n      }\n    } else {\n      attribute.remove(this.domNode);\n      delete this.attributes[attribute.attrName];\n    }\n  };\n\n  AttributorStore.prototype.build = function () {\n    var _this = this;\n\n    this.attributes = {};\n    var blot = registry.find(this.domNode);\n\n    if (blot == null) {\n      return;\n    }\n\n    var attributes = attributor.keys(this.domNode);\n    var classes = attributor_class.keys(this.domNode);\n    var styles = style.keys(this.domNode);\n    attributes.concat(classes).concat(styles).forEach(function (name) {\n      var attr = blot.scroll.query(name, src_scope.ATTRIBUTE);\n\n      if (attr instanceof attributor) {\n        _this.attributes[attr.attrName] = attr;\n      }\n    });\n  };\n\n  AttributorStore.prototype.copy = function (target) {\n    var _this = this;\n\n    Object.keys(this.attributes).forEach(function (key) {\n      var value = _this.attributes[key].value(_this.domNode);\n\n      target.format(key, value);\n    });\n  };\n\n  AttributorStore.prototype.move = function (target) {\n    var _this = this;\n\n    this.copy(target);\n    Object.keys(this.attributes).forEach(function (key) {\n      _this.attributes[key].remove(_this.domNode);\n    });\n    this.attributes = {};\n  };\n\n  AttributorStore.prototype.values = function () {\n    var _this = this;\n\n    return Object.keys(this.attributes).reduce(function (attributes, name) {\n      attributes[name] = _this.attributes[name].value(_this.domNode);\n      return attributes;\n    }, {});\n  };\n\n  return AttributorStore;\n}();\n\n/* harmony default export */ var store = (store_AttributorStore);\n// CONCATENATED MODULE: ./node_modules/parchment/src/blot/inline.ts\nvar inline_extends = undefined && undefined.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\n\n\n\n\n // Shallow object comparison\n\nfunction isEqual(obj1, obj2) {\n  if (Object.keys(obj1).length !== Object.keys(obj2).length) {\n    return false;\n  } // @ts-ignore\n\n\n  for (var prop in obj1) {\n    // @ts-ignore\n    if (obj1[prop] !== obj2[prop]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nvar inline_InlineBlot =\n/** @class */\nfunction (_super) {\n  inline_extends(InlineBlot, _super);\n\n  function InlineBlot(scroll, domNode) {\n    var _this = _super.call(this, scroll, domNode) || this;\n\n    _this.attributes = new store(_this.domNode);\n    return _this;\n  }\n\n  InlineBlot.formats = function (domNode, scroll) {\n    var match = scroll.query(InlineBlot.blotName);\n\n    if (match != null && domNode.tagName === match.tagName) {\n      return undefined;\n    } else if (typeof this.tagName === 'string') {\n      return true;\n    } else if (Array.isArray(this.tagName)) {\n      return domNode.tagName.toLowerCase();\n    }\n\n    return undefined;\n  };\n\n  InlineBlot.prototype.format = function (name, value) {\n    var _this = this;\n\n    if (name === this.statics.blotName && !value) {\n      this.children.forEach(function (child) {\n        if (!(child instanceof InlineBlot)) {\n          child = child.wrap(InlineBlot.blotName, true);\n        }\n\n        _this.attributes.copy(child);\n      });\n      this.unwrap();\n    } else {\n      var format = this.scroll.query(name, src_scope.INLINE);\n\n      if (format == null) {\n        return;\n      }\n\n      if (format instanceof attributor) {\n        this.attributes.attribute(format, value);\n      } else if (value && (name !== this.statics.blotName || this.formats()[name] !== value)) {\n        this.replaceWith(name, value);\n      }\n    }\n  };\n\n  InlineBlot.prototype.formats = function () {\n    var formats = this.attributes.values();\n    var format = this.statics.formats(this.domNode, this.scroll);\n\n    if (format != null) {\n      formats[this.statics.blotName] = format;\n    }\n\n    return formats;\n  };\n\n  InlineBlot.prototype.formatAt = function (index, length, name, value) {\n    if (this.formats()[name] != null || this.scroll.query(name, src_scope.ATTRIBUTE)) {\n      var blot = this.isolate(index, length);\n      blot.format(name, value);\n    } else {\n      _super.prototype.formatAt.call(this, index, length, name, value);\n    }\n  };\n\n  InlineBlot.prototype.optimize = function (context) {\n    _super.prototype.optimize.call(this, context);\n\n    var formats = this.formats();\n\n    if (Object.keys(formats).length === 0) {\n      return this.unwrap(); // unformatted span\n    }\n\n    var next = this.next;\n\n    if (next instanceof InlineBlot && next.prev === this && isEqual(formats, next.formats())) {\n      next.moveChildren(this);\n      next.remove();\n    }\n  };\n\n  InlineBlot.prototype.replaceWith = function (name, value) {\n    var replacement = _super.prototype.replaceWith.call(this, name, value);\n\n    this.attributes.copy(replacement);\n    return replacement;\n  };\n\n  InlineBlot.prototype.update = function (mutations, context) {\n    var _this = this;\n\n    _super.prototype.update.call(this, mutations, context);\n\n    var attributeChanged = mutations.some(function (mutation) {\n      return mutation.target === _this.domNode && mutation.type === 'attributes';\n    });\n\n    if (attributeChanged) {\n      this.attributes.build();\n    }\n  };\n\n  InlineBlot.prototype.wrap = function (name, value) {\n    var wrapper = _super.prototype.wrap.call(this, name, value);\n\n    if (wrapper instanceof InlineBlot) {\n      this.attributes.move(wrapper);\n    }\n\n    return wrapper;\n  };\n\n  InlineBlot.allowedChildren = [InlineBlot, leaf];\n  InlineBlot.blotName = 'inline';\n  InlineBlot.scope = src_scope.INLINE_BLOT;\n  InlineBlot.tagName = 'SPAN';\n  return InlineBlot;\n}(abstract_parent);\n\n/* harmony default export */ var inline = (inline_InlineBlot);\n// CONCATENATED MODULE: ./node_modules/parchment/src/blot/block.ts\nvar block_extends = undefined && undefined.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\n\n\n\n\n\n\n\nvar block_BlockBlot =\n/** @class */\nfunction (_super) {\n  block_extends(BlockBlot, _super);\n\n  function BlockBlot(scroll, domNode) {\n    var _this = _super.call(this, scroll, domNode) || this;\n\n    _this.attributes = new store(_this.domNode);\n    return _this;\n  }\n\n  BlockBlot.formats = function (domNode, scroll) {\n    var match = scroll.query(BlockBlot.blotName);\n\n    if (match != null && domNode.tagName === match.tagName) {\n      return undefined;\n    } else if (typeof this.tagName === 'string') {\n      return true;\n    } else if (Array.isArray(this.tagName)) {\n      return domNode.tagName.toLowerCase();\n    }\n  };\n\n  BlockBlot.prototype.format = function (name, value) {\n    var format = this.scroll.query(name, src_scope.BLOCK);\n\n    if (format == null) {\n      return;\n    } else if (format instanceof attributor) {\n      this.attributes.attribute(format, value);\n    } else if (name === this.statics.blotName && !value) {\n      this.replaceWith(BlockBlot.blotName);\n    } else if (value && (name !== this.statics.blotName || this.formats()[name] !== value)) {\n      this.replaceWith(name, value);\n    }\n  };\n\n  BlockBlot.prototype.formats = function () {\n    var formats = this.attributes.values();\n    var format = this.statics.formats(this.domNode, this.scroll);\n\n    if (format != null) {\n      formats[this.statics.blotName] = format;\n    }\n\n    return formats;\n  };\n\n  BlockBlot.prototype.formatAt = function (index, length, name, value) {\n    if (this.scroll.query(name, src_scope.BLOCK) != null) {\n      this.format(name, value);\n    } else {\n      _super.prototype.formatAt.call(this, index, length, name, value);\n    }\n  };\n\n  BlockBlot.prototype.insertAt = function (index, value, def) {\n    if (def == null || this.scroll.query(value, src_scope.INLINE) != null) {\n      // Insert text or inline\n      _super.prototype.insertAt.call(this, index, value, def);\n    } else {\n      var after = this.split(index);\n\n      if (after != null) {\n        var blot = this.scroll.create(value, def);\n        after.parent.insertBefore(blot, after);\n      } else {\n        throw new Error('Attempt to insertAt after block boundaries');\n      }\n    }\n  };\n\n  BlockBlot.prototype.replaceWith = function (name, value) {\n    var replacement = _super.prototype.replaceWith.call(this, name, value);\n\n    this.attributes.copy(replacement);\n    return replacement;\n  };\n\n  BlockBlot.prototype.update = function (mutations, context) {\n    var _this = this;\n\n    _super.prototype.update.call(this, mutations, context);\n\n    var attributeChanged = mutations.some(function (mutation) {\n      return mutation.target === _this.domNode && mutation.type === 'attributes';\n    });\n\n    if (attributeChanged) {\n      this.attributes.build();\n    }\n  };\n\n  BlockBlot.blotName = 'block';\n  BlockBlot.scope = src_scope.BLOCK_BLOT;\n  BlockBlot.tagName = 'P';\n  BlockBlot.allowedChildren = [inline, BlockBlot, leaf];\n  return BlockBlot;\n}(abstract_parent);\n\n/* harmony default export */ var block = (block_BlockBlot);\n// CONCATENATED MODULE: ./node_modules/parchment/src/blot/embed.ts\nvar embed_extends = undefined && undefined.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\n\n\nvar EmbedBlot =\n/** @class */\nfunction (_super) {\n  embed_extends(EmbedBlot, _super);\n\n  function EmbedBlot() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  EmbedBlot.formats = function (_domNode, _scroll) {\n    return undefined;\n  };\n\n  EmbedBlot.prototype.format = function (name, value) {\n    // super.formatAt wraps, which is what we want in general,\n    // but this allows subclasses to overwrite for formats\n    // that just apply to particular embeds\n    _super.prototype.formatAt.call(this, 0, this.length(), name, value);\n  };\n\n  EmbedBlot.prototype.formatAt = function (index, length, name, value) {\n    if (index === 0 && length === this.length()) {\n      this.format(name, value);\n    } else {\n      _super.prototype.formatAt.call(this, index, length, name, value);\n    }\n  };\n\n  EmbedBlot.prototype.formats = function () {\n    return this.statics.formats(this.domNode, this.scroll);\n  };\n\n  return EmbedBlot;\n}(leaf);\n\n/* harmony default export */ var blot_embed = (EmbedBlot);\n// CONCATENATED MODULE: ./node_modules/parchment/src/blot/scroll.ts\nvar scroll_extends = undefined && undefined.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\n\n\n\n\n\nvar OBSERVER_CONFIG = {\n  attributes: true,\n  characterData: true,\n  characterDataOldValue: true,\n  childList: true,\n  subtree: true\n};\nvar MAX_OPTIMIZE_ITERATIONS = 100;\n\nvar scroll_ScrollBlot =\n/** @class */\nfunction (_super) {\n  scroll_extends(ScrollBlot, _super);\n\n  function ScrollBlot(registry, node) {\n    var _this = // @ts-ignore\n    _super.call(this, null, node) || this;\n\n    _this.registry = registry;\n    _this.scroll = _this;\n\n    _this.build();\n\n    _this.observer = new MutationObserver(function (mutations) {\n      _this.update(mutations);\n    });\n\n    _this.observer.observe(_this.domNode, OBSERVER_CONFIG);\n\n    _this.attach();\n\n    return _this;\n  }\n\n  ScrollBlot.prototype.create = function (input, value) {\n    return this.registry.create(this, input, value);\n  };\n\n  ScrollBlot.prototype.find = function (node, bubble) {\n    if (bubble === void 0) {\n      bubble = false;\n    }\n\n    return this.registry.find(node, bubble);\n  };\n\n  ScrollBlot.prototype.query = function (query, scope) {\n    if (scope === void 0) {\n      scope = src_scope.ANY;\n    }\n\n    return this.registry.query(query, scope);\n  };\n\n  ScrollBlot.prototype.register = function () {\n    var _a;\n\n    var definitions = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      definitions[_i] = arguments[_i];\n    }\n\n    return (_a = this.registry).register.apply(_a, definitions);\n  };\n\n  ScrollBlot.prototype.build = function () {\n    if (this.scroll == null) {\n      return;\n    }\n\n    _super.prototype.build.call(this);\n  };\n\n  ScrollBlot.prototype.detach = function () {\n    _super.prototype.detach.call(this);\n\n    this.observer.disconnect();\n  };\n\n  ScrollBlot.prototype.deleteAt = function (index, length) {\n    this.update();\n\n    if (index === 0 && length === this.length()) {\n      this.children.forEach(function (child) {\n        child.remove();\n      });\n    } else {\n      _super.prototype.deleteAt.call(this, index, length);\n    }\n  };\n\n  ScrollBlot.prototype.formatAt = function (index, length, name, value) {\n    this.update();\n\n    _super.prototype.formatAt.call(this, index, length, name, value);\n  };\n\n  ScrollBlot.prototype.insertAt = function (index, value, def) {\n    this.update();\n\n    _super.prototype.insertAt.call(this, index, value, def);\n  };\n\n  ScrollBlot.prototype.optimize = function (mutations, context) {\n    var _this = this;\n\n    if (mutations === void 0) {\n      mutations = [];\n    }\n\n    if (context === void 0) {\n      context = {};\n    }\n\n    _super.prototype.optimize.call(this, context);\n\n    var mutationsMap = context.mutationsMap || new WeakMap(); // We must modify mutations directly, cannot make copy and then modify\n\n    var records = Array.from(this.observer.takeRecords()); // Array.push currently seems to be implemented by a non-tail recursive function\n    // so we cannot just mutations.push.apply(mutations, this.observer.takeRecords());\n\n    while (records.length > 0) {\n      mutations.push(records.pop());\n    }\n\n    var mark = function mark(blot, markParent) {\n      if (markParent === void 0) {\n        markParent = true;\n      }\n\n      if (blot == null || blot === _this) {\n        return;\n      }\n\n      if (blot.domNode.parentNode == null) {\n        return;\n      }\n\n      if (!mutationsMap.has(blot.domNode)) {\n        mutationsMap.set(blot.domNode, []);\n      }\n\n      if (markParent) {\n        mark(blot.parent);\n      }\n    };\n\n    var optimize = function optimize(blot) {\n      // Post-order traversal\n      if (!mutationsMap.has(blot.domNode)) {\n        return;\n      }\n\n      if (blot instanceof abstract_parent) {\n        blot.children.forEach(optimize);\n      }\n\n      mutationsMap.delete(blot.domNode);\n      blot.optimize(context);\n    };\n\n    var remaining = mutations;\n\n    for (var i = 0; remaining.length > 0; i += 1) {\n      if (i >= MAX_OPTIMIZE_ITERATIONS) {\n        throw new Error('[Parchment] Maximum optimize iterations reached');\n      }\n\n      remaining.forEach(function (mutation) {\n        var blot = _this.find(mutation.target, true);\n\n        if (blot == null) {\n          return;\n        }\n\n        if (blot.domNode === mutation.target) {\n          if (mutation.type === 'childList') {\n            mark(_this.find(mutation.previousSibling, false));\n            Array.from(mutation.addedNodes).forEach(function (node) {\n              var child = _this.find(node, false);\n\n              mark(child, false);\n\n              if (child instanceof abstract_parent) {\n                child.children.forEach(function (grandChild) {\n                  mark(grandChild, false);\n                });\n              }\n            });\n          } else if (mutation.type === 'attributes') {\n            mark(blot.prev);\n          }\n        }\n\n        mark(blot);\n      });\n      this.children.forEach(optimize);\n      remaining = Array.from(this.observer.takeRecords());\n      records = remaining.slice();\n\n      while (records.length > 0) {\n        mutations.push(records.pop());\n      }\n    }\n  };\n\n  ScrollBlot.prototype.update = function (mutations, context) {\n    var _this = this;\n\n    if (context === void 0) {\n      context = {};\n    }\n\n    mutations = mutations || this.observer.takeRecords();\n    var mutationsMap = new WeakMap();\n    mutations.map(function (mutation) {\n      var blot = registry.find(mutation.target, true);\n\n      if (blot == null) {\n        return null;\n      }\n\n      if (mutationsMap.has(blot.domNode)) {\n        mutationsMap.get(blot.domNode).push(mutation);\n        return null;\n      } else {\n        mutationsMap.set(blot.domNode, [mutation]);\n        return blot;\n      }\n    }).forEach(function (blot) {\n      if (blot != null && blot !== _this && mutationsMap.has(blot.domNode)) {\n        blot.update(mutationsMap.get(blot.domNode) || [], context);\n      }\n    });\n    context.mutationsMap = mutationsMap;\n\n    if (mutationsMap.has(this.domNode)) {\n      _super.prototype.update.call(this, mutationsMap.get(this.domNode), context);\n    }\n\n    this.optimize(mutations, context);\n  };\n\n  ScrollBlot.blotName = 'scroll';\n  ScrollBlot.defaultChild = block;\n  ScrollBlot.allowedChildren = [block, container];\n  ScrollBlot.scope = src_scope.BLOCK_BLOT;\n  ScrollBlot.tagName = 'DIV';\n  return ScrollBlot;\n}(abstract_parent);\n\n/* harmony default export */ var blot_scroll = (scroll_ScrollBlot);\n// CONCATENATED MODULE: ./node_modules/parchment/src/blot/text.ts\nvar text_extends = undefined && undefined.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\n\n\n\nvar text_TextBlot =\n/** @class */\nfunction (_super) {\n  text_extends(TextBlot, _super);\n\n  function TextBlot(scroll, node) {\n    var _this = _super.call(this, scroll, node) || this;\n\n    _this.text = _this.statics.value(_this.domNode);\n    return _this;\n  }\n\n  TextBlot.create = function (value) {\n    return document.createTextNode(value);\n  };\n\n  TextBlot.value = function (domNode) {\n    return domNode.data;\n  };\n\n  TextBlot.prototype.deleteAt = function (index, length) {\n    this.domNode.data = this.text = this.text.slice(0, index) + this.text.slice(index + length);\n  };\n\n  TextBlot.prototype.index = function (node, offset) {\n    if (this.domNode === node) {\n      return offset;\n    }\n\n    return -1;\n  };\n\n  TextBlot.prototype.insertAt = function (index, value, def) {\n    if (def == null) {\n      this.text = this.text.slice(0, index) + value + this.text.slice(index);\n      this.domNode.data = this.text;\n    } else {\n      _super.prototype.insertAt.call(this, index, value, def);\n    }\n  };\n\n  TextBlot.prototype.length = function () {\n    return this.text.length;\n  };\n\n  TextBlot.prototype.optimize = function (context) {\n    _super.prototype.optimize.call(this, context);\n\n    this.text = this.statics.value(this.domNode);\n\n    if (this.text.length === 0) {\n      this.remove();\n    } else if (this.next instanceof TextBlot && this.next.prev === this) {\n      this.insertAt(this.length(), this.next.value());\n      this.next.remove();\n    }\n  };\n\n  TextBlot.prototype.position = function (index, _inclusive) {\n    if (_inclusive === void 0) {\n      _inclusive = false;\n    }\n\n    return [this.domNode, index];\n  };\n\n  TextBlot.prototype.split = function (index, force) {\n    if (force === void 0) {\n      force = false;\n    }\n\n    if (!force) {\n      if (index === 0) {\n        return this;\n      }\n\n      if (index === this.length()) {\n        return this.next;\n      }\n    }\n\n    var after = this.scroll.create(this.domNode.splitText(index));\n    this.parent.insertBefore(after, this.next || undefined);\n    this.text = this.statics.value(this.domNode);\n    return after;\n  };\n\n  TextBlot.prototype.update = function (mutations, _context) {\n    var _this = this;\n\n    if (mutations.some(function (mutation) {\n      return mutation.type === 'characterData' && mutation.target === _this.domNode;\n    })) {\n      this.text = this.statics.value(this.domNode);\n    }\n  };\n\n  TextBlot.prototype.value = function () {\n    return this.text;\n  };\n\n  TextBlot.blotName = 'text';\n  TextBlot.scope = src_scope.INLINE_BLOT;\n  return TextBlot;\n}(leaf);\n\n/* harmony default export */ var blot_text = (text_TextBlot);\n// CONCATENATED MODULE: ./node_modules/parchment/src/parchment.ts\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(91);\n/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(eventemitter3__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _utils_has_window__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(17);\n/* harmony import */ var _instances__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(41);\n/* harmony import */ var _logger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(23);\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n\n\n\n\nvar debug = Object(_logger__WEBPACK_IMPORTED_MODULE_3__[/* default */ \"a\"])('quill:events');\nvar EVENTS = ['selectionchange', 'mousedown', 'mouseup', 'click'];\n\nif (Object(_utils_has_window__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"])()) {\n  EVENTS.forEach(function (eventName) {\n    document.addEventListener(eventName, function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      Array.from(document.querySelectorAll('.ql-container')).forEach(function (node) {\n        var quill = _instances__WEBPACK_IMPORTED_MODULE_2__[/* default */ \"a\"].get(node);\n\n        if (quill && quill.emitter) {\n          var _quill$emitter;\n\n          (_quill$emitter = quill.emitter).handleDOM.apply(_quill$emitter, args);\n        }\n      });\n    });\n  });\n}\n\nvar Emitter = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(Emitter, _EventEmitter);\n\n  var _super = _createSuper(Emitter);\n\n  function Emitter() {\n    var _this;\n\n    _classCallCheck(this, Emitter);\n\n    _this = _super.call(this);\n    _this.listeners = {};\n\n    _this.on('error', debug.error);\n\n    return _this;\n  }\n\n  _createClass(Emitter, [{\n    key: \"emit\",\n    value: function emit() {\n      var _debug$log, _get2;\n\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      (_debug$log = debug.log).call.apply(_debug$log, [debug].concat(args));\n\n      (_get2 = _get(_getPrototypeOf(Emitter.prototype), \"emit\", this)).call.apply(_get2, [this].concat(args));\n    }\n  }, {\n    key: \"handleDOM\",\n    value: function handleDOM(event) {\n      for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n        args[_key3 - 1] = arguments[_key3];\n      }\n\n      (this.listeners[event.type] || []).forEach(function (_ref) {\n        var node = _ref.node,\n            handler = _ref.handler;\n\n        if (event.target === node || node.contains(event.target)) {\n          handler.apply(void 0, [event].concat(args));\n        }\n      });\n    }\n  }, {\n    key: \"listenDOM\",\n    value: function listenDOM(eventName, node, handler) {\n      if (!this.listeners[eventName]) {\n        this.listeners[eventName] = [];\n      }\n\n      this.listeners[eventName].push({\n        node: node,\n        handler: handler\n      });\n    }\n  }]);\n\n  return Emitter;\n}(eventemitter3__WEBPACK_IMPORTED_MODULE_0___default.a);\n\nEmitter.events = {\n  EDITOR_CHANGE: 'editor-change',\n  SCROLL_BEFORE_UPDATE: 'scroll-before-update',\n  SCROLL_BLOT_MOUNT: 'scroll-blot-mount',\n  SCROLL_BLOT_UNMOUNT: 'scroll-blot-unmount',\n  SCROLL_OPTIMIZE: 'scroll-optimize',\n  SCROLL_UPDATE: 'scroll-update',\n  SELECTION_CHANGE: 'selection-change',\n  TEXT_CHANGE: 'text-change',\n  CONTENT_SETTED: 'content-setted'\n};\nEmitter.sources = {\n  API: 'api',\n  SILENT: 'silent',\n  USER: 'user'\n};\n/* harmony default export */ __webpack_exports__[\"a\"] = (Emitter);\n\n/***/ }),\n/* 4 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n// EXTERNAL MODULE: ./node_modules/lodash.clonedeep/index.js\nvar lodash_clonedeep = __webpack_require__(18);\nvar lodash_clonedeep_default = /*#__PURE__*/__webpack_require__.n(lodash_clonedeep);\n\n// EXTERNAL MODULE: ./node_modules/lodash.isequal/index.js\nvar lodash_isequal = __webpack_require__(29);\nvar lodash_isequal_default = /*#__PURE__*/__webpack_require__.n(lodash_isequal);\n\n// EXTERNAL MODULE: ./node_modules/lodash.merge/index.js\nvar lodash_merge = __webpack_require__(34);\nvar lodash_merge_default = /*#__PURE__*/__webpack_require__.n(lodash_merge);\n\n// EXTERNAL MODULE: ./node_modules/quill-delta/dist/Delta.js\nvar Delta = __webpack_require__(1);\nvar Delta_default = /*#__PURE__*/__webpack_require__.n(Delta);\n\n// EXTERNAL MODULE: ./node_modules/parchment/src/parchment.ts + 17 modules\nvar parchment = __webpack_require__(2);\n\n// EXTERNAL MODULE: ./core/selection.js\nvar selection = __webpack_require__(7);\n\n// EXTERNAL MODULE: ./blots/cursor.js\nvar cursor = __webpack_require__(24);\n\n// EXTERNAL MODULE: ./blots/block.js\nvar blots_block = __webpack_require__(6);\n\n// EXTERNAL MODULE: ./blots/break.js\nvar blots_break = __webpack_require__(12);\n\n// EXTERNAL MODULE: ./blots/text.js\nvar blots_text = __webpack_require__(11);\n\n// CONCATENATED MODULE: ./utils/remove_class.js\nfunction removeClass(node, className) {\n  node.classList.remove(className);\n\n  if (node.classList.length === 0) {\n    node.removeAttribute('class');\n  }\n}\n// CONCATENATED MODULE: ./core/editor.js\nfunction _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest(); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\n\n\n\n\n\n\n\n\n\nvar ASCII = /^[ -~]*$/;\n\nvar editor_Editor = /*#__PURE__*/function () {\n  function Editor(scroll) {\n    _classCallCheck(this, Editor);\n\n    this.scroll = scroll;\n    this.delta = this.getDelta();\n    this.immediateFormats = new Set();\n  }\n\n  _createClass(Editor, [{\n    key: \"addImmediateFormat\",\n    value: function addImmediateFormat(name) {\n      this.immediateFormats.add(name);\n    }\n  }, {\n    key: \"applyDelta\",\n    value: function applyDelta(delta) {\n      var _this = this;\n\n      this.scroll.update();\n      var scrollLength = this.scroll.length();\n      this.scroll.batchStart();\n      var normalizedDelta = normalizeDelta(delta);\n      var deleteDelta = new Delta_default.a();\n      normalizedDelta.reduce(function (index, op) {\n        var length = Delta[\"Op\"].length(op);\n        var attributes = op.attributes || {};\n        var addedNewline = false;\n\n        if (op.insert != null) {\n          deleteDelta.retain(length);\n\n          if (typeof op.insert === 'string') {\n            var text = op.insert;\n            addedNewline = !text.endsWith('\\n') && (scrollLength <= index || _this.scroll.descendant(blots_block[\"a\" /* BlockEmbed */], index)[0]);\n\n            _this.scroll.insertAt(index, text);\n\n            var _this$scroll$line = _this.scroll.line(index),\n                _this$scroll$line2 = _slicedToArray(_this$scroll$line, 2),\n                line = _this$scroll$line2[0],\n                offset = _this$scroll$line2[1];\n\n            var formats = lodash_merge_default()({}, Object(blots_block[\"c\" /* bubbleFormats */])(line));\n\n            if (line instanceof blots_block[\"d\" /* default */]) {\n              var _line$descendant = line.descendant(parchment[\"LeafBlot\"], offset),\n                  _line$descendant2 = _slicedToArray(_line$descendant, 1),\n                  leaf = _line$descendant2[0];\n\n              formats = lodash_merge_default()(formats, Object(blots_block[\"c\" /* bubbleFormats */])(leaf));\n            }\n\n            attributes = Delta[\"AttributeMap\"].diff(formats, attributes) || {};\n          } else if (_typeof(op.insert) === 'object') {\n            var key = Object.keys(op.insert)[0]; // There should only be one key\n\n            if (key == null) return index;\n            addedNewline = _this.scroll.query(key, parchment[\"Scope\"].INLINE) != null && (scrollLength <= index || _this.scroll.descendant(blots_block[\"a\" /* BlockEmbed */], index)[0]);\n\n            _this.scroll.insertAt(index, key, op.insert[key]);\n          }\n\n          scrollLength += length;\n        } else {\n          deleteDelta.push(op);\n        }\n\n        var keys = Object.keys(attributes);\n\n        _this.immediateFormats.forEach(function (format) {\n          if (keys.indexOf(format) > -1) {\n            _this.scroll.formatAt(index, length, format, attributes[format]);\n\n            delete attributes[format];\n          }\n        });\n\n        Object.keys(attributes).forEach(function (name) {\n          _this.scroll.formatAt(index, length, name, attributes[name]);\n        });\n        var addedLength = addedNewline ? 1 : 0;\n        scrollLength += addedLength;\n        deleteDelta.delete(addedLength);\n        return index + length + addedLength;\n      }, 0);\n      deleteDelta.reduce(function (index, op) {\n        if (typeof op.delete === 'number') {\n          _this.scroll.deleteAt(index, op.delete);\n\n          return index;\n        }\n\n        return index + Delta[\"Op\"].length(op);\n      }, 0);\n      this.scroll.batchEnd();\n      this.scroll.optimize();\n      return this.update(normalizedDelta);\n    }\n  }, {\n    key: \"deleteText\",\n    value: function deleteText(index, length) {\n      this.scroll.deleteAt(index, length);\n      return this.update(new Delta_default.a().retain(index).delete(length));\n    }\n  }, {\n    key: \"formatLine\",\n    value: function formatLine(index, length) {\n      var _this2 = this;\n\n      var formats = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      this.scroll.update();\n      Object.keys(formats).forEach(function (format) {\n        _this2.scroll.lines(index, Math.max(length, 1)).forEach(function (line) {\n          line.format(format, formats[format]);\n        });\n      });\n      this.scroll.optimize();\n      var delta = new Delta_default.a().retain(index).retain(length, lodash_clonedeep_default()(formats));\n      return this.update(delta);\n    }\n  }, {\n    key: \"formatText\",\n    value: function formatText(index, length) {\n      var _this3 = this;\n\n      var formats = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      Object.keys(formats).forEach(function (format) {\n        _this3.scroll.formatAt(index, length, format, formats[format]);\n      });\n      var delta = new Delta_default.a().retain(index).retain(length, lodash_clonedeep_default()(formats));\n      return this.update(delta);\n    }\n  }, {\n    key: \"getContents\",\n    value: function getContents(index, length) {\n      return this.delta.slice(index, index + length);\n    }\n  }, {\n    key: \"getDelta\",\n    value: function getDelta() {\n      return this.scroll.lines().reduce(function (delta, line) {\n        return delta.concat(line.delta());\n      }, new Delta_default.a());\n    }\n  }, {\n    key: \"getFormat\",\n    value: function getFormat(index) {\n      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var lines = [];\n      var leaves = [];\n\n      if (length === 0) {\n        this.scroll.path(index).forEach(function (path) {\n          var _path = _slicedToArray(path, 1),\n              blot = _path[0];\n\n          if (blot instanceof blots_block[\"d\" /* default */]) {\n            lines.push(blot);\n          } else if (blot instanceof parchment[\"LeafBlot\"]) {\n            leaves.push(blot);\n          }\n        });\n      } else {\n        lines = this.scroll.lines(index, length);\n        leaves = this.scroll.descendants(parchment[\"LeafBlot\"], index, length);\n      }\n\n      var _map = [lines, leaves].map(function (blots) {\n        if (blots.length === 0) return {};\n        var formats = Object(blots_block[\"c\" /* bubbleFormats */])(blots.shift());\n\n        while (Object.keys(formats).length > 0) {\n          var blot = blots.shift();\n          if (blot == null) return formats;\n          formats = combineFormats(Object(blots_block[\"c\" /* bubbleFormats */])(blot), formats);\n        }\n\n        return formats;\n      });\n\n      var _map2 = _slicedToArray(_map, 2);\n\n      lines = _map2[0];\n      leaves = _map2[1];\n      return _objectSpread(_objectSpread({}, lines), leaves);\n    }\n  }, {\n    key: \"getHTML\",\n    value: function getHTML(index, length) {\n      var _this$scroll$line3 = this.scroll.line(index),\n          _this$scroll$line4 = _slicedToArray(_this$scroll$line3, 2),\n          line = _this$scroll$line4[0],\n          lineOffset = _this$scroll$line4[1];\n\n      if (line.length() >= lineOffset + length) {\n        return convertHTML(line, lineOffset, length, true);\n      }\n\n      return convertHTML(this.scroll, index, length, true);\n    }\n  }, {\n    key: \"getText\",\n    value: function getText(index, length) {\n      return this.getContents(index, length).filter(function (op) {\n        return typeof op.insert === 'string';\n      }).map(function (op) {\n        return op.insert;\n      }).join('');\n    }\n  }, {\n    key: \"insertEmbed\",\n    value: function insertEmbed(index, embed, value) {\n      this.scroll.insertAt(index, embed, value);\n      return this.update(new Delta_default.a().retain(index).insert(_defineProperty({}, embed, value)));\n    }\n  }, {\n    key: \"insertText\",\n    value: function insertText(index, text) {\n      var _this4 = this;\n\n      var formats = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      text = text.replace(/\\r\\n/g, '\\n').replace(/\\r/g, '\\n');\n      this.scroll.insertAt(index, text);\n      Object.keys(formats).forEach(function (format) {\n        _this4.scroll.formatAt(index, text.length, format, formats[format]);\n      });\n      return this.update(new Delta_default.a().retain(index).insert(text, lodash_clonedeep_default()(formats)));\n    }\n  }, {\n    key: \"isBlank\",\n    value: function isBlank() {\n      var isComposing = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      if (this.scroll.children.length === 0) return true;\n      if (isComposing) return false;\n      if (this.scroll.children.length > 1) return false;\n      var block = this.scroll.children.head;\n      if (block.statics.blotName !== blots_block[\"d\" /* default */].blotName) return false;\n      if (block.children.length > 1) return false;\n      return block.children.head instanceof blots_break[\"a\" /* default */];\n    }\n  }, {\n    key: \"removeFormat\",\n    value: function removeFormat(index, length) {\n      var text = this.getText(index, length);\n\n      var _this$scroll$line5 = this.scroll.line(index + length),\n          _this$scroll$line6 = _slicedToArray(_this$scroll$line5, 2),\n          line = _this$scroll$line6[0],\n          offset = _this$scroll$line6[1];\n\n      var suffixLength = 0;\n      var suffix = new Delta_default.a();\n\n      if (line != null) {\n        suffixLength = line.length() - offset;\n        suffix = line.delta().slice(offset, offset + suffixLength - 1).insert('\\n');\n      }\n\n      var contents = this.getContents(index, length + suffixLength);\n      var diff = contents.diff(new Delta_default.a().insert(text).concat(suffix));\n      var delta = new Delta_default.a().retain(index).concat(diff);\n      return this.applyDelta(delta);\n    }\n  }, {\n    key: \"update\",\n    value: function update(change) {\n      var mutations = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      var selectionInfo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n      var oldDelta = this.delta;\n\n      if (mutations.length === 1 && mutations[0].type === 'characterData' && mutations[0].target.data.match(ASCII) && this.scroll.find(mutations[0].target)) {\n        // Optimization for character changes\n        var textBlot = this.scroll.find(mutations[0].target);\n        var formats = Object(blots_block[\"c\" /* bubbleFormats */])(textBlot);\n        var index = textBlot.offset(this.scroll);\n        var oldValue = mutations[0].oldValue.replace(cursor[\"a\" /* default */].CONTENTS, '');\n        var oldText = new Delta_default.a().insert(oldValue);\n        var newText = new Delta_default.a().insert(textBlot.value());\n        var relativeSelectionInfo = selectionInfo && {\n          oldRange: shiftRange(selectionInfo.oldRange, -index),\n          newRange: shiftRange(selectionInfo.newRange, -index)\n        };\n        var diffDelta = new Delta_default.a().retain(index).concat(oldText.diff(newText, relativeSelectionInfo));\n        change = diffDelta.reduce(function (delta, op) {\n          if (op.insert) {\n            return delta.insert(op.insert, formats);\n          }\n\n          return delta.push(op);\n        }, new Delta_default.a());\n        this.delta = oldDelta.compose(change);\n      } else {\n        this.delta = this.getDelta();\n\n        if (!change || !lodash_isequal_default()(oldDelta.compose(change), this.delta)) {\n          change = oldDelta.diff(this.delta, selectionInfo);\n        }\n      }\n\n      return change;\n    }\n  }]);\n\n  return Editor;\n}();\n\nfunction convertListHTML(items, lastIndent, types) {\n  if (items.length === 0) {\n    var _getListType = getListType(types.pop()),\n        _getListType2 = _slicedToArray(_getListType, 1),\n        _endTag = _getListType2[0];\n\n    if (lastIndent <= 0) {\n      return \"</li></\".concat(_endTag, \">\");\n    }\n\n    return \"</li></\".concat(_endTag, \">\").concat(convertListHTML([], lastIndent - 1, types));\n  }\n\n  var _items = _toArray(items),\n      _items$ = _items[0],\n      child = _items$.child,\n      offset = _items$.offset,\n      length = _items$.length,\n      indent = _items$.indent,\n      type = _items$.type,\n      rest = _items.slice(1);\n\n  var _getListType3 = getListType(type, child),\n      _getListType4 = _slicedToArray(_getListType3, 2),\n      tag = _getListType4[0],\n      attribute = _getListType4[1];\n\n  if (indent > lastIndent) {\n    types.push(type);\n\n    if (indent === lastIndent + 1) {\n      return \"<\".concat(tag, \"><li\").concat(attribute, \">\").concat(convertHTML(child, offset, length)).concat(convertListHTML(rest, indent, types));\n    }\n\n    return \"<\".concat(tag, \"><li>\").concat(convertListHTML(items, lastIndent + 1, types));\n  }\n\n  var previousType = types[types.length - 1];\n\n  if (indent === lastIndent && type === previousType) {\n    return \"</li><li\".concat(attribute, \">\").concat(convertHTML(child, offset, length)).concat(convertListHTML(rest, indent, types));\n  }\n\n  var _getListType5 = getListType(types.pop()),\n      _getListType6 = _slicedToArray(_getListType5, 1),\n      endTag = _getListType6[0];\n\n  return \"</li></\".concat(endTag, \">\").concat(convertListHTML(items, lastIndent - 1, types));\n}\n\nfunction convertHTML(blot, index, length) {\n  var isRoot = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n  if (typeof blot.html === 'function') {\n    return blot.html(index, length);\n  }\n\n  if (blot instanceof blots_text[\"a\" /* default */]) {\n    return Object(blots_text[\"b\" /* escapeText */])(blot.value().slice(index, index + length));\n  }\n\n  if (blot.children) {\n    // TODO fix API\n    if (blot.statics.blotName === 'list-container') {\n      var items = [];\n      blot.children.forEachAt(index, length, function (child, offset, childLength) {\n        var formats = child.formats();\n        items.push({\n          child: child,\n          offset: offset,\n          length: childLength,\n          indent: formats.indent || 0,\n          type: formats.list\n        });\n      });\n      return convertListHTML(items, -1, []);\n    }\n\n    var parts = [];\n    blot.children.forEachAt(index, length, function (child, offset, childLength) {\n      parts.push(convertHTML(child, offset, childLength));\n    });\n    handleBreakLine(blot.children, parts);\n\n    if (isRoot || blot.statics.blotName === 'list') {\n      return parts.join('');\n    }\n\n    var domNode = extractNodeFromBlot(blot);\n    var outerHTML = domNode.outerHTML,\n        innerHTML = domNode.innerHTML;\n\n    var _outerHTML$split = outerHTML.split(\">\".concat(innerHTML, \"<\")),\n        _outerHTML$split2 = _slicedToArray(_outerHTML$split, 2),\n        start = _outerHTML$split2[0],\n        end = _outerHTML$split2[1];\n\n    if (start.indexOf('<table') === 0) {\n      return \"\".concat(start.replace(/(\\sdata-.+?=[\"'].*?[\"'])/g, ''), \">\").concat(parts.join('').replace(/(\\sdata-.+?=[\"'].*?[\"'])/g, ''), \"<\").concat(end);\n    }\n\n    return \"\".concat(start, \">\").concat(parts.join(''), \"<\").concat(end);\n  }\n\n  return blot.domNode.outerHTML;\n}\n\nfunction handleBreakLine(linkedList, parts) {\n  if (linkedList.length === 1 && linkedList.head instanceof blots_break[\"a\" /* default */]) {\n    parts.push('<br>');\n  }\n}\n\nfunction extractNodeFromBlot(blot) {\n  var domNode = blot.domNode.cloneNode(true);\n  return removeTableServiceClasses(blot, domNode);\n}\n\nfunction removeTableServiceClasses(blot, domNode) {\n  var BLOTS_WITH_SERVICE_CLASS = ['tableCellLine', 'tableHeaderCellLine', 'tableCell', 'tableHeaderCell'];\n\n  if (BLOTS_WITH_SERVICE_CLASS.includes(blot.statics.blotName)) {\n    removeClass(domNode, blot.statics.className);\n  }\n\n  return domNode;\n}\n\nfunction combineFormats(formats, combined) {\n  return Object.keys(combined).reduce(function (merged, name) {\n    if (formats[name] == null) return merged;\n\n    if (combined[name] === formats[name]) {\n      merged[name] = combined[name];\n    } else if (Array.isArray(combined[name])) {\n      if (combined[name].indexOf(formats[name]) < 0) {\n        merged[name] = combined[name].concat([formats[name]]);\n      }\n    } else {\n      merged[name] = [combined[name], formats[name]];\n    }\n\n    return merged;\n  }, {});\n}\n\nfunction getListType(type, child) {\n  var tag = type === 'ordered' ? 'ol' : 'ul';\n  var attributes = child ? \"\".concat(getBlotNodeAttributes(child)) : '';\n\n  switch (type) {\n    case 'checked':\n      return [tag, \"\".concat(attributes, \" data-list=\\\"checked\\\"\")];\n\n    case 'unchecked':\n      return [tag, \"\".concat(attributes, \" data-list=\\\"unchecked\\\"\")];\n\n    default:\n      return [tag, attributes];\n  }\n}\n\nfunction getBlotNodeAttributes(_ref) {\n  var domNode = _ref.domNode;\n\n  if (!domNode.hasAttributes()) {\n    return '';\n  }\n\n  var attributes = domNode.attributes;\n  var attributesString = ' ';\n\n  for (var i = 0; i < attributes.length; i += 1) {\n    var name = attributes[i].name;\n    var value = attributes[i].value;\n\n    if (name === 'class') {\n      value = removeIndentClass(value);\n    }\n\n    if (value.length && name.indexOf('data-') === -1) {\n      attributesString += \"\".concat(name, \"=\\\"\").concat(value, \"\\\"\");\n    }\n  }\n\n  return attributesString.length > 1 ? attributesString : '';\n}\n\nfunction removeIndentClass(classString) {\n  return classString.replace(/ql-indent-\\d/g, '').trim();\n}\n\nfunction normalizeDelta(delta) {\n  return delta.reduce(function (normalizedDelta, op) {\n    if (typeof op.insert === 'string') {\n      var text = op.insert.replace(/\\r\\n/g, '\\n').replace(/\\r/g, '\\n');\n      return normalizedDelta.insert(text, op.attributes);\n    }\n\n    return normalizedDelta.push(op);\n  }, new Delta_default.a());\n}\n\nfunction shiftRange(_ref2, amount) {\n  var index = _ref2.index,\n      length = _ref2.length;\n  return new selection[\"a\" /* Range */](index + amount, length);\n}\n\n/* harmony default export */ var editor = __webpack_exports__[\"a\"] = (editor_Editor);\n\n/***/ }),\n/* 5 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return isDefined; });\nfunction isDefined(object) {\n  return object !== null && object !== undefined;\n}\n\n/***/ }),\n/* 6 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return blockDelta; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return bubbleFormats; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return BlockEmbed; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return Block; });\n/* harmony import */ var quill_delta__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);\n/* harmony import */ var quill_delta__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(quill_delta__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var parchment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);\n/* harmony import */ var _break__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(12);\n/* harmony import */ var _inline__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(16);\n/* harmony import */ var _text__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(11);\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n\n\n\n\n\nvar NEWLINE_LENGTH = 1;\n\nvar Block = /*#__PURE__*/function (_BlockBlot) {\n  _inherits(Block, _BlockBlot);\n\n  var _super = _createSuper(Block);\n\n  function Block(scroll, domNode) {\n    var _this;\n\n    _classCallCheck(this, Block);\n\n    _this = _super.call(this, scroll, domNode);\n    _this.cache = {};\n    return _this;\n  }\n\n  _createClass(Block, [{\n    key: \"delta\",\n    value: function delta() {\n      if (this.cache.delta == null) {\n        this.cache.delta = blockDelta(this);\n      }\n\n      return this.cache.delta;\n    }\n  }, {\n    key: \"deleteAt\",\n    value: function deleteAt(index, length) {\n      _get(_getPrototypeOf(Block.prototype), \"deleteAt\", this).call(this, index, length);\n\n      this.cache = {};\n    }\n  }, {\n    key: \"formatAt\",\n    value: function formatAt(index, length, name, value) {\n      if (length <= 0) return;\n\n      if (this.scroll.query(name, parchment__WEBPACK_IMPORTED_MODULE_1__[\"Scope\"].BLOCK)) {\n        if (index + length === this.length()) {\n          this.format(name, value);\n        }\n      } else {\n        _get(_getPrototypeOf(Block.prototype), \"formatAt\", this).call(this, index, Math.min(length, this.length() - index - 1), name, value);\n      }\n\n      this.cache = {};\n    }\n  }, {\n    key: \"insertAt\",\n    value: function insertAt(index, value, def) {\n      if (def != null) {\n        _get(_getPrototypeOf(Block.prototype), \"insertAt\", this).call(this, index, value, def);\n\n        this.cache = {};\n        return;\n      }\n\n      if (value.length === 0) return;\n      var lines = value.split('\\n');\n      var text = lines.shift();\n\n      if (text.length > 0) {\n        if (index < this.length() - 1 || this.children.tail == null) {\n          _get(_getPrototypeOf(Block.prototype), \"insertAt\", this).call(this, Math.min(index, this.length() - 1), text);\n        } else {\n          this.children.tail.insertAt(this.children.tail.length(), text);\n        }\n\n        this.cache = {};\n      }\n\n      var block = this;\n      lines.reduce(function (lineIndex, line) {\n        block = block.split(lineIndex, true);\n        block.insertAt(0, line);\n        return line.length;\n      }, index + text.length);\n    }\n  }, {\n    key: \"insertBefore\",\n    value: function insertBefore(blot, ref) {\n      var head = this.children.head;\n\n      _get(_getPrototypeOf(Block.prototype), \"insertBefore\", this).call(this, blot, ref);\n\n      if (head instanceof _break__WEBPACK_IMPORTED_MODULE_2__[/* default */ \"a\"]) {\n        head.remove();\n      }\n\n      this.cache = {};\n    }\n  }, {\n    key: \"length\",\n    value: function length() {\n      if (this.cache.length == null) {\n        this.cache.length = _get(_getPrototypeOf(Block.prototype), \"length\", this).call(this) + NEWLINE_LENGTH;\n      }\n\n      return this.cache.length;\n    }\n  }, {\n    key: \"moveChildren\",\n    value: function moveChildren(target, ref) {\n      _get(_getPrototypeOf(Block.prototype), \"moveChildren\", this).call(this, target, ref);\n\n      this.cache = {};\n    }\n  }, {\n    key: \"optimize\",\n    value: function optimize(context) {\n      _get(_getPrototypeOf(Block.prototype), \"optimize\", this).call(this, context);\n\n      this.cache = {};\n    }\n  }, {\n    key: \"path\",\n    value: function path(index) {\n      return _get(_getPrototypeOf(Block.prototype), \"path\", this).call(this, index, true);\n    }\n  }, {\n    key: \"removeChild\",\n    value: function removeChild(child) {\n      _get(_getPrototypeOf(Block.prototype), \"removeChild\", this).call(this, child);\n\n      this.cache = {};\n    }\n  }, {\n    key: \"split\",\n    value: function split(index) {\n      var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (force && (index === 0 || index >= this.length() - NEWLINE_LENGTH)) {\n        var clone = this.clone();\n\n        if (index === 0) {\n          this.parent.insertBefore(clone, this);\n          return this;\n        }\n\n        this.parent.insertBefore(clone, this.next);\n        return clone;\n      }\n\n      var next = _get(_getPrototypeOf(Block.prototype), \"split\", this).call(this, index, force);\n\n      this.cache = {};\n      return next;\n    }\n  }]);\n\n  return Block;\n}(parchment__WEBPACK_IMPORTED_MODULE_1__[\"BlockBlot\"]);\n\nBlock.blotName = 'block';\nBlock.tagName = 'P';\nBlock.defaultChild = _break__WEBPACK_IMPORTED_MODULE_2__[/* default */ \"a\"];\nBlock.allowedChildren = [_break__WEBPACK_IMPORTED_MODULE_2__[/* default */ \"a\"], _inline__WEBPACK_IMPORTED_MODULE_3__[/* default */ \"a\"], parchment__WEBPACK_IMPORTED_MODULE_1__[\"EmbedBlot\"], _text__WEBPACK_IMPORTED_MODULE_4__[/* default */ \"a\"]];\n\nvar BlockEmbed = /*#__PURE__*/function (_EmbedBlot) {\n  _inherits(BlockEmbed, _EmbedBlot);\n\n  var _super2 = _createSuper(BlockEmbed);\n\n  function BlockEmbed() {\n    _classCallCheck(this, BlockEmbed);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(BlockEmbed, [{\n    key: \"attach\",\n    value: function attach() {\n      _get(_getPrototypeOf(BlockEmbed.prototype), \"attach\", this).call(this);\n\n      this.attributes = new parchment__WEBPACK_IMPORTED_MODULE_1__[\"AttributorStore\"](this.domNode);\n    }\n  }, {\n    key: \"delta\",\n    value: function delta() {\n      return new quill_delta__WEBPACK_IMPORTED_MODULE_0___default.a().insert(this.value(), _objectSpread(_objectSpread({}, this.formats()), this.attributes.values()));\n    }\n  }, {\n    key: \"format\",\n    value: function format(name, value) {\n      var attribute = this.scroll.query(name, parchment__WEBPACK_IMPORTED_MODULE_1__[\"Scope\"].BLOCK_ATTRIBUTE);\n\n      if (attribute != null) {\n        this.attributes.attribute(attribute, value);\n      }\n    }\n  }, {\n    key: \"formatAt\",\n    value: function formatAt(index, length, name, value) {\n      this.format(name, value);\n    }\n  }, {\n    key: \"insertAt\",\n    value: function insertAt(index, value, def) {\n      if (typeof value === 'string' && value.endsWith('\\n')) {\n        var block = this.scroll.create(Block.blotName);\n        this.parent.insertBefore(block, index === 0 ? this : this.next);\n        block.insertAt(0, value.slice(0, -1));\n      } else {\n        _get(_getPrototypeOf(BlockEmbed.prototype), \"insertAt\", this).call(this, index, value, def);\n      }\n    }\n  }]);\n\n  return BlockEmbed;\n}(parchment__WEBPACK_IMPORTED_MODULE_1__[\"EmbedBlot\"]);\n\nBlockEmbed.scope = parchment__WEBPACK_IMPORTED_MODULE_1__[\"Scope\"].BLOCK_BLOT; // It is important for cursor behavior BlockEmbeds use tags that are block level elements\n\nfunction blockDelta(blot) {\n  var filter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  return blot.descendants(parchment__WEBPACK_IMPORTED_MODULE_1__[\"LeafBlot\"]).reduce(function (delta, leaf) {\n    if (leaf.length() === 0) {\n      return delta;\n    }\n\n    return delta.insert(leaf.value(), bubbleFormats(leaf, {}, filter));\n  }, new quill_delta__WEBPACK_IMPORTED_MODULE_0___default.a()).insert('\\n', bubbleFormats(blot));\n}\n\nfunction bubbleFormats(blot) {\n  var formats = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var filter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  if (blot == null) return formats;\n\n  if (typeof blot.formats === 'function') {\n    formats = _objectSpread(_objectSpread({}, formats), blot.formats());\n\n    if (filter) {\n      // exclude syntax highlighting from deltas and getFormat()\n      delete formats['code-token'];\n    }\n  }\n\n  if (blot.parent == null || blot.parent.statics.blotName === 'scroll' || blot.parent.statics.scope !== blot.statics.scope) {\n    return formats;\n  }\n\n  return bubbleFormats(blot.parent, formats, filter);\n}\n\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return Range; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return Selection; });\n/* harmony import */ var parchment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);\n/* harmony import */ var lodash_clonedeep__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(18);\n/* harmony import */ var lodash_clonedeep__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash_clonedeep__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var lodash_isequal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(29);\n/* harmony import */ var lodash_isequal__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash_isequal__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _emitter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(3);\n/* harmony import */ var _logger__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(23);\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\n\n\n\n\nvar debug = Object(_logger__WEBPACK_IMPORTED_MODULE_4__[/* default */ \"a\"])('quill:selection');\n\nvar Range = function Range(index) {\n  var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n  _classCallCheck(this, Range);\n\n  this.index = index;\n  this.length = length;\n};\n\nvar Selection = /*#__PURE__*/function () {\n  function Selection(scroll, emitter) {\n    var _this = this;\n\n    _classCallCheck(this, Selection);\n\n    this.emitter = emitter;\n    this.scroll = scroll;\n    this.composing = false;\n    this.mouseDown = false;\n    this.root = this.scroll.domNode;\n    this.cursor = this.scroll.create('cursor', this); // savedRange is last non-null range\n\n    this.savedRange = new Range(0, 0);\n    this.lastRange = this.savedRange;\n    this.lastNative = null;\n    this.handleComposition();\n    this.handleDragging();\n    this.emitter.listenDOM('selectionchange', document, function () {\n      if (!_this.mouseDown && !_this.composing) {\n        setTimeout(_this.update.bind(_this, _emitter__WEBPACK_IMPORTED_MODULE_3__[/* default */ \"a\"].sources.USER), 1);\n      }\n    });\n    this.emitter.on(_emitter__WEBPACK_IMPORTED_MODULE_3__[/* default */ \"a\"].events.SCROLL_BEFORE_UPDATE, function () {\n      if (!_this.hasFocus()) return;\n\n      var native = _this.getNativeRange();\n\n      if (native == null) return;\n      if (native.start.node === _this.cursor.textNode) return; // cursor.restore() will handle\n\n      _this.emitter.once(_emitter__WEBPACK_IMPORTED_MODULE_3__[/* default */ \"a\"].events.SCROLL_UPDATE, function () {\n        try {\n          if (_this.root.contains(native.start.node) && _this.root.contains(native.end.node)) {\n            _this.setNativeRange(native.start.node, native.start.offset, native.end.node, native.end.offset);\n          }\n\n          _this.update(_emitter__WEBPACK_IMPORTED_MODULE_3__[/* default */ \"a\"].sources.SILENT);\n        } catch (ignored) {// ignore\n        }\n      });\n    });\n    this.emitter.on(_emitter__WEBPACK_IMPORTED_MODULE_3__[/* default */ \"a\"].events.SCROLL_OPTIMIZE, function (mutations, context) {\n      if (context.range) {\n        var _context$range = context.range,\n            startNode = _context$range.startNode,\n            startOffset = _context$range.startOffset,\n            endNode = _context$range.endNode,\n            endOffset = _context$range.endOffset;\n\n        _this.setNativeRange(startNode, startOffset, endNode, endOffset);\n\n        _this.update(_emitter__WEBPACK_IMPORTED_MODULE_3__[/* default */ \"a\"].sources.SILENT);\n      }\n    });\n    this.update(_emitter__WEBPACK_IMPORTED_MODULE_3__[/* default */ \"a\"].sources.SILENT);\n  }\n\n  _createClass(Selection, [{\n    key: \"handleComposition\",\n    value: function handleComposition() {\n      var _this2 = this;\n\n      this.root.addEventListener('compositionstart', function () {\n        _this2.composing = true;\n\n        _this2.scroll.batchStart();\n      });\n      this.root.addEventListener('compositionend', function () {\n        _this2.scroll.batchEnd();\n\n        _this2.composing = false;\n\n        if (_this2.cursor.parent) {\n          var range = _this2.cursor.restore();\n\n          if (!range) return;\n          setTimeout(function () {\n            _this2.setNativeRange(range.startNode, range.startOffset, range.endNode, range.endOffset);\n          }, 1);\n        }\n      });\n    }\n  }, {\n    key: \"handleDragging\",\n    value: function handleDragging() {\n      var _this3 = this;\n\n      this.emitter.listenDOM('mousedown', document.body, function () {\n        _this3.mouseDown = true;\n      });\n      this.emitter.listenDOM('mouseup', document.body, function () {\n        _this3.mouseDown = false;\n\n        _this3.update(_emitter__WEBPACK_IMPORTED_MODULE_3__[/* default */ \"a\"].sources.USER);\n      });\n    }\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      if (this.hasFocus()) return;\n      this.root.focus();\n      this.setRange(this.savedRange);\n    }\n  }, {\n    key: \"format\",\n    value: function format(_format, value) {\n      this.scroll.update();\n      var nativeRange = this.getNativeRange();\n      if (nativeRange == null || !nativeRange.native.collapsed || this.scroll.query(_format, parchment__WEBPACK_IMPORTED_MODULE_0__[\"Scope\"].BLOCK)) return;\n\n      if (nativeRange.start.node !== this.cursor.textNode) {\n        var blot = this.scroll.find(nativeRange.start.node, false);\n        if (blot == null) return; // TODO Give blot ability to not split\n\n        if (blot instanceof parchment__WEBPACK_IMPORTED_MODULE_0__[\"LeafBlot\"]) {\n          var after = blot.split(nativeRange.start.offset);\n          blot.parent.insertBefore(this.cursor, after);\n        } else {\n          blot.insertBefore(this.cursor, nativeRange.start.node); // Should never happen\n        }\n\n        this.cursor.attach();\n      }\n\n      this.cursor.format(_format, value);\n      this.scroll.optimize();\n      this.setNativeRange(this.cursor.textNode, this.cursor.textNode.data.length);\n      this.update();\n    }\n  }, {\n    key: \"getBounds\",\n    value: function getBounds(index) {\n      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var scrollLength = this.scroll.length();\n      index = Math.min(index, scrollLength - 1);\n      length = Math.min(index + length, scrollLength - 1) - index;\n      var node;\n\n      var _this$scroll$leaf = this.scroll.leaf(index),\n          _this$scroll$leaf2 = _slicedToArray(_this$scroll$leaf, 2),\n          leaf = _this$scroll$leaf2[0],\n          offset = _this$scroll$leaf2[1];\n\n      if (leaf == null) return null;\n\n      var _leaf$position = leaf.position(offset, true);\n\n      var _leaf$position2 = _slicedToArray(_leaf$position, 2);\n\n      node = _leaf$position2[0];\n      offset = _leaf$position2[1];\n      var range = document.createRange();\n\n      if (length > 0) {\n        range.setStart(node, offset);\n\n        var _this$scroll$leaf3 = this.scroll.leaf(index + length);\n\n        var _this$scroll$leaf4 = _slicedToArray(_this$scroll$leaf3, 2);\n\n        leaf = _this$scroll$leaf4[0];\n        offset = _this$scroll$leaf4[1];\n        if (leaf == null) return null;\n\n        var _leaf$position3 = leaf.position(offset, true);\n\n        var _leaf$position4 = _slicedToArray(_leaf$position3, 2);\n\n        node = _leaf$position4[0];\n        offset = _leaf$position4[1];\n        range.setEnd(node, offset);\n        return range.getBoundingClientRect();\n      }\n\n      var side = 'left';\n      var rect;\n\n      if (node instanceof Text) {\n        if (offset < node.data.length) {\n          range.setStart(node, offset);\n          range.setEnd(node, offset + 1);\n        } else {\n          range.setStart(node, offset - 1);\n          range.setEnd(node, offset);\n          side = 'right';\n        }\n\n        rect = range.getBoundingClientRect();\n      } else {\n        rect = leaf.domNode.getBoundingClientRect();\n        if (offset > 0) side = 'right';\n      }\n\n      return {\n        bottom: rect.top + rect.height,\n        height: rect.height,\n        left: rect[side],\n        right: rect[side],\n        top: rect.top,\n        width: 0\n      };\n    }\n  }, {\n    key: \"getNativeRange\",\n    value: function getNativeRange() {\n      var selection = document.getSelection();\n      if (selection == null || selection.rangeCount <= 0) return null;\n      var nativeRange = selection.getRangeAt(0);\n      if (nativeRange == null) return null;\n      var range = this.normalizeNative(nativeRange);\n      debug.info('getNativeRange', range);\n      return range;\n    }\n  }, {\n    key: \"getRange\",\n    value: function getRange() {\n      var normalized = this.getNativeRange();\n      if (normalized == null) return [null, null];\n      var range = this.normalizedToRange(normalized);\n      return [range, normalized];\n    }\n  }, {\n    key: \"hasFocus\",\n    value: function hasFocus() {\n      return document.activeElement === this.root || contains(this.root, document.activeElement);\n    }\n  }, {\n    key: \"normalizedToRange\",\n    value: function normalizedToRange(range) {\n      var _this4 = this;\n\n      var positions = [[range.start.node, range.start.offset]];\n\n      if (!range.native.collapsed) {\n        positions.push([range.end.node, range.end.offset]);\n      }\n\n      var indexes = positions.map(function (position) {\n        var _position = _slicedToArray(position, 2),\n            node = _position[0],\n            offset = _position[1];\n\n        var blot = _this4.scroll.find(node, true);\n\n        var index = blot.offset(_this4.scroll);\n\n        if (offset === 0) {\n          return index;\n        }\n\n        if (blot instanceof parchment__WEBPACK_IMPORTED_MODULE_0__[\"LeafBlot\"]) {\n          return index + blot.index(node, offset);\n        }\n\n        return index + blot.length();\n      });\n      var end = Math.min(Math.max.apply(Math, _toConsumableArray(indexes)), this.scroll.length() - 1);\n      var start = Math.min.apply(Math, [end].concat(_toConsumableArray(indexes)));\n      return new Range(start, end - start);\n    }\n  }, {\n    key: \"normalizeNative\",\n    value: function normalizeNative(nativeRange) {\n      if (!contains(this.root, nativeRange.startContainer) || !nativeRange.collapsed && !contains(this.root, nativeRange.endContainer)) {\n        return null;\n      }\n\n      var range = {\n        start: {\n          node: nativeRange.startContainer,\n          offset: nativeRange.startOffset\n        },\n        end: {\n          node: nativeRange.endContainer,\n          offset: nativeRange.endOffset\n        },\n        native: nativeRange\n      };\n      [range.start, range.end].forEach(function (position) {\n        var node = position.node,\n            offset = position.offset;\n\n        while (!(node instanceof Text) && node.childNodes.length > 0) {\n          if (node.childNodes.length > offset) {\n            node = node.childNodes[offset];\n            offset = 0;\n          } else if (node.childNodes.length === offset) {\n            node = node.lastChild;\n\n            if (node instanceof Text) {\n              offset = node.data.length;\n            } else if (node.childNodes.length > 0) {\n              // Container case\n              offset = node.childNodes.length;\n            } else {\n              // Embed case\n              offset = node.childNodes.length + 1;\n            }\n          } else {\n            break;\n          }\n        }\n\n        position.node = node;\n        position.offset = offset;\n      });\n      return range;\n    }\n  }, {\n    key: \"rangeToNative\",\n    value: function rangeToNative(range) {\n      var _this5 = this;\n\n      var indexes = range.collapsed ? [range.index] : [range.index, range.index + range.length];\n      var args = [];\n      var scrollLength = this.scroll.length();\n      indexes.forEach(function (index, i) {\n        index = Math.min(scrollLength - 1, index);\n\n        var _this5$scroll$leaf = _this5.scroll.leaf(index),\n            _this5$scroll$leaf2 = _slicedToArray(_this5$scroll$leaf, 2),\n            leaf = _this5$scroll$leaf2[0],\n            leafOffset = _this5$scroll$leaf2[1];\n\n        var _leaf$position5 = leaf.position(leafOffset, i !== 0),\n            _leaf$position6 = _slicedToArray(_leaf$position5, 2),\n            node = _leaf$position6[0],\n            offset = _leaf$position6[1];\n\n        args.push(node, offset);\n      });\n\n      if (args.length < 2) {\n        return args.concat(args);\n      }\n\n      return args;\n    }\n  }, {\n    key: \"scrollIntoView\",\n    value: function scrollIntoView(scrollingContainer) {\n      var range = this.lastRange;\n      if (range == null) return;\n      var bounds = this.getBounds(range.index, range.length);\n      if (bounds == null) return;\n      var limit = this.scroll.length() - 1;\n\n      var _this$scroll$line = this.scroll.line(Math.min(range.index, limit)),\n          _this$scroll$line2 = _slicedToArray(_this$scroll$line, 1),\n          first = _this$scroll$line2[0];\n\n      var last = first;\n\n      if (range.length > 0) {\n        var _this$scroll$line3 = this.scroll.line(Math.min(range.index + range.length, limit));\n\n        var _this$scroll$line4 = _slicedToArray(_this$scroll$line3, 1);\n\n        last = _this$scroll$line4[0];\n      }\n\n      if (first == null || last == null) return;\n      var scrollBounds = scrollingContainer.getBoundingClientRect();\n\n      if (bounds.top < scrollBounds.top) {\n        scrollingContainer.scrollTop -= scrollBounds.top - bounds.top;\n      } else if (bounds.bottom > scrollBounds.bottom) {\n        scrollingContainer.scrollTop += bounds.bottom - scrollBounds.bottom;\n      }\n    }\n  }, {\n    key: \"setNativeRange\",\n    value: function setNativeRange(startNode, startOffset) {\n      var endNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : startNode;\n      var endOffset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : startOffset;\n      var force = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      debug.info('setNativeRange', startNode, startOffset, endNode, endOffset);\n\n      if (startNode != null && (this.root.parentNode == null || startNode.parentNode == null || endNode.parentNode == null)) {\n        return;\n      }\n\n      var selection = document.getSelection();\n      if (selection == null) return;\n\n      if (startNode != null) {\n        if (!this.hasFocus()) this.root.focus();\n\n        var _ref = this.getNativeRange() || {},\n            native = _ref.native;\n\n        if (native == null || force || startNode !== native.startContainer || startOffset !== native.startOffset || endNode !== native.endContainer || endOffset !== native.endOffset) {\n          if (startNode.tagName === 'BR') {\n            startOffset = Array.from(startNode.parentNode.childNodes).indexOf(startNode);\n            startNode = startNode.parentNode;\n          }\n\n          if (endNode.tagName === 'BR') {\n            endOffset = Array.from(endNode.parentNode.childNodes).indexOf(endNode);\n            endNode = endNode.parentNode;\n          }\n\n          var range = document.createRange();\n          range.setStart(startNode, startOffset);\n          range.setEnd(endNode, endOffset);\n          selection.removeAllRanges();\n          selection.addRange(range);\n        }\n      } else {\n        selection.removeAllRanges();\n        this.root.blur();\n        document.body.focus(); // root.blur() not enough for IE11\n      }\n    }\n  }, {\n    key: \"setRange\",\n    value: function setRange(range) {\n      var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _emitter__WEBPACK_IMPORTED_MODULE_3__[/* default */ \"a\"].sources.API;\n\n      if (typeof force === 'string') {\n        source = force;\n        force = false;\n      }\n\n      debug.info('setRange', range);\n\n      if (range != null) {\n        var args = this.rangeToNative(range);\n        this.setNativeRange.apply(this, _toConsumableArray(args).concat([force]));\n      } else {\n        this.setNativeRange(null);\n      }\n\n      this.update(source);\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _emitter__WEBPACK_IMPORTED_MODULE_3__[/* default */ \"a\"].sources.USER;\n      var oldRange = this.lastRange;\n\n      var _this$getRange = this.getRange(),\n          _this$getRange2 = _slicedToArray(_this$getRange, 2),\n          lastRange = _this$getRange2[0],\n          nativeRange = _this$getRange2[1];\n\n      this.lastRange = lastRange;\n      this.lastNative = nativeRange;\n\n      if (this.lastRange != null) {\n        this.savedRange = this.lastRange;\n      }\n\n      if (!lodash_isequal__WEBPACK_IMPORTED_MODULE_2___default()(oldRange, this.lastRange)) {\n        var _this$emitter;\n\n        if (!this.composing && nativeRange != null && nativeRange.native.collapsed && nativeRange.start.node !== this.cursor.textNode) {\n          var range = this.cursor.restore();\n\n          if (range) {\n            this.setNativeRange(range.startNode, range.startOffset, range.endNode, range.endOffset);\n          }\n        }\n\n        var args = [_emitter__WEBPACK_IMPORTED_MODULE_3__[/* default */ \"a\"].events.SELECTION_CHANGE, lodash_clonedeep__WEBPACK_IMPORTED_MODULE_1___default()(this.lastRange), lodash_clonedeep__WEBPACK_IMPORTED_MODULE_1___default()(oldRange), source];\n\n        (_this$emitter = this.emitter).emit.apply(_this$emitter, [_emitter__WEBPACK_IMPORTED_MODULE_3__[/* default */ \"a\"].events.EDITOR_CHANGE].concat(args));\n\n        if (source !== _emitter__WEBPACK_IMPORTED_MODULE_3__[/* default */ \"a\"].sources.SILENT) {\n          var _this$emitter2;\n\n          (_this$emitter2 = this.emitter).emit.apply(_this$emitter2, args);\n        }\n      }\n    }\n  }]);\n\n  return Selection;\n}();\n\nfunction contains(parent, descendant) {\n  try {\n    // Firefox inserts inaccessible nodes around video elements\n    descendant.parentNode; // eslint-disable-line no-unused-expressions\n  } catch (e) {\n    return false;\n  } // IE11 has bug with Text nodes\n  // https://connect.microsoft.com/IE/feedback/details/780874/node-contains-is-incorrect\n\n\n  if (descendant instanceof Text) {\n    descendant = descendant.parentNode;\n  }\n\n  return parent.contains(descendant);\n}\n\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"j\", function() { return TableTextAlignStyle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return TableBackgroundColorStyle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"e\", function() { return TableBorderStyle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"f\", function() { return TableBorderStyleStyle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"g\", function() { return TableBorderWidthStyle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return TableBorderColorStyle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"i\", function() { return TableHeightStyle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"l\", function() { return TableWidthStyle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"k\", function() { return TableWidthAttribute; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"h\", function() { return TableHeightAttribute; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return TABLE_FORMATS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return TABLE_ATTRIBUTORS; });\n/* harmony import */ var _prepare_attributor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(50);\n/* harmony import */ var _prepare_style_attributor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(13);\n\n\nvar tableConfig = {\n  name: 'table',\n  allowedTags: ['TABLE']\n};\nvar TableHeightAttribute = Object(_prepare_attributor__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"])(tableConfig, 'height');\nvar TableWidthAttribute = Object(_prepare_attributor__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"])(tableConfig, 'width');\nvar TableHeightStyle = Object(_prepare_style_attributor__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"])(tableConfig, 'height');\nvar TableWidthStyle = Object(_prepare_style_attributor__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"])(tableConfig, 'width');\nvar TableTextAlignStyle = Object(_prepare_style_attributor__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"])(tableConfig, 'text', 'align');\nvar TableBackgroundColorStyle = Object(_prepare_style_attributor__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"])(tableConfig, 'background', 'color');\nvar TableBorderStyle = Object(_prepare_style_attributor__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"])(tableConfig, 'border');\nvar TableBorderStyleStyle = Object(_prepare_style_attributor__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"])(tableConfig, 'border', 'style');\nvar TableBorderWidthStyle = Object(_prepare_style_attributor__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"])(tableConfig, 'border', 'width');\nvar TableBorderColorStyle = Object(_prepare_style_attributor__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"])(tableConfig, 'border', 'color');\nvar TABLE_FORMATS = {\n  tableTextAlign: TableTextAlignStyle,\n  tableBackgroundColor: TableBackgroundColorStyle,\n  tableBorder: TableBorderStyle,\n  tableBorderStyle: TableBorderStyleStyle,\n  tableBorderWidth: TableBorderWidthStyle,\n  tableBorderColor: TableBorderColorStyle,\n  tableWidth: TableWidthStyle,\n  tableHeight: TableHeightStyle\n};\nvar TABLE_ATTRIBUTORS = [TableTextAlignStyle, TableBackgroundColorStyle, TableBorderStyle, TableBorderStyleStyle, TableBorderColorStyle, TableBorderWidthStyle, TableHeightStyle, TableWidthStyle, TableWidthAttribute, TableHeightAttribute].reduce(function (memo, attr) {\n  memo[attr.keyName] = attr;\n  return memo;\n}, {});\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"p\", function() { return CellVerticalAlignStyle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"o\", function() { return CellTextAlignStyle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return CellBackgroundColorStyle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"e\", function() { return CellBorderStyle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"f\", function() { return CellBorderStyleStyle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"g\", function() { return CellBorderWidthStyle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return CellBorderColorStyle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"m\", function() { return CellPaddingStyle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"n\", function() { return CellPaddingTopStyle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"j\", function() { return CellPaddingBottomStyle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"k\", function() { return CellPaddingLeftStyle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"l\", function() { return CellPaddingRightStyle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"i\", function() { return CellHeightStyle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"r\", function() { return CellWidthStyle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"h\", function() { return CellHeightAttribute; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"q\", function() { return CellWidthAttribute; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return CELL_FORMATS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return CELL_ATTRIBUTORS; });\n/* harmony import */ var _prepare_attributor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(50);\n/* harmony import */ var _prepare_style_attributor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(13);\n\n\nvar cellConfig = {\n  name: 'cell',\n  allowedTags: ['TH', 'TD']\n};\nvar CellHeightAttribute = Object(_prepare_attributor__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"])(cellConfig, 'height');\nvar CellWidthAttribute = Object(_prepare_attributor__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"])(cellConfig, 'width');\nvar CellHeightStyle = Object(_prepare_style_attributor__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"])(cellConfig, 'height');\nvar CellWidthStyle = Object(_prepare_style_attributor__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"])(cellConfig, 'width');\nvar CellVerticalAlignStyle = Object(_prepare_style_attributor__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"])(cellConfig, 'vertical', 'align');\nvar CellTextAlignStyle = Object(_prepare_style_attributor__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"])(cellConfig, 'text', 'align');\nvar CellBackgroundColorStyle = Object(_prepare_style_attributor__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"])(cellConfig, 'background', 'color');\nvar CellBorderStyle = Object(_prepare_style_attributor__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"])(cellConfig, 'border');\nvar CellBorderStyleStyle = Object(_prepare_style_attributor__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"])(cellConfig, 'border', 'style');\nvar CellBorderWidthStyle = Object(_prepare_style_attributor__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"])(cellConfig, 'border', 'width');\nvar CellBorderColorStyle = Object(_prepare_style_attributor__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"])(cellConfig, 'border', 'color');\nvar CellPaddingStyle = Object(_prepare_style_attributor__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"])(cellConfig, 'padding');\nvar CellPaddingTopStyle = Object(_prepare_style_attributor__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"])(cellConfig, 'padding', 'top');\nvar CellPaddingBottomStyle = Object(_prepare_style_attributor__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"])(cellConfig, 'padding', 'bottom');\nvar CellPaddingLeftStyle = Object(_prepare_style_attributor__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"])(cellConfig, 'padding', 'left');\nvar CellPaddingRightStyle = Object(_prepare_style_attributor__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"])(cellConfig, 'padding', 'right');\nvar CELL_FORMATS = {\n  cellBorder: CellBorderStyle,\n  cellBorderStyle: CellBorderStyleStyle,\n  cellBorderWidth: CellBorderWidthStyle,\n  cellBorderColor: CellBorderColorStyle,\n  cellBackgroundColor: CellBackgroundColorStyle,\n  cellPadding: CellPaddingStyle,\n  cellPaddingTop: CellPaddingTopStyle,\n  cellPaddingBottom: CellPaddingBottomStyle,\n  cellPaddingLeft: CellPaddingLeftStyle,\n  cellPaddingRight: CellPaddingRightStyle,\n  cellVerticalAlign: CellVerticalAlignStyle,\n  cellTextAlign: CellTextAlignStyle,\n  cellWidth: CellWidthStyle,\n  cellHeight: CellHeightStyle\n};\nvar CELL_ATTRIBUTORS = [CellBackgroundColorStyle, CellBorderColorStyle, CellBorderStyle, CellBorderStyleStyle, CellBorderWidthStyle, CellPaddingBottomStyle, CellPaddingLeftStyle, CellPaddingRightStyle, CellPaddingStyle, CellPaddingTopStyle, CellVerticalAlignStyle, CellTextAlignStyle, CellHeightStyle, CellWidthStyle, CellWidthAttribute, CellHeightAttribute].reduce(function (memo, attr) {\n  memo[attr.keyName] = attr;\n  return memo;\n}, {});\n\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(global) {var check = function (it) {\n  return it && it.Math == Math && it;\n};\n\n// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nmodule.exports =\n  // eslint-disable-next-line es/no-global-this -- safe\n  check(typeof globalThis == 'object' && globalThis) ||\n  check(typeof window == 'object' && window) ||\n  // eslint-disable-next-line no-restricted-globals -- safe\n  check(typeof self == 'object' && self) ||\n  check(typeof global == 'object' && global) ||\n  // eslint-disable-next-line no-new-func -- fallback\n  (function () { return this; })() || Function('return this')();\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(54)))\n\n/***/ }),\n/* 11 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return Text; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return escapeText; });\n/* harmony import */ var parchment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n\n\nvar Text = /*#__PURE__*/function (_TextBlot) {\n  _inherits(Text, _TextBlot);\n\n  var _super = _createSuper(Text);\n\n  function Text() {\n    _classCallCheck(this, Text);\n\n    return _super.apply(this, arguments);\n  }\n\n  return Text;\n}(parchment__WEBPACK_IMPORTED_MODULE_0__[\"TextBlot\"]);\n\nfunction escapeText(text) {\n  return text.replace(/[&<>\"']/g, function (s) {\n    // https://lodash.com/docs#escape\n    var entityMap = {\n      '&': '&amp;',\n      '<': '&lt;',\n      '>': '&gt;',\n      '\"': '&quot;',\n      \"'\": '&#39;'\n    };\n    return entityMap[s];\n  });\n}\n\n\n\n/***/ }),\n/* 12 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var parchment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n\n\nvar Break = /*#__PURE__*/function (_EmbedBlot) {\n  _inherits(Break, _EmbedBlot);\n\n  var _super = _createSuper(Break);\n\n  function Break() {\n    _classCallCheck(this, Break);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Break, [{\n    key: \"optimize\",\n    value: function optimize() {\n      if (this.prev || this.next) {\n        this.remove();\n      }\n    }\n  }, {\n    key: \"length\",\n    value: function length() {\n      return 0;\n    }\n  }, {\n    key: \"value\",\n    value: function value() {\n      return '';\n    }\n  }], [{\n    key: \"value\",\n    value: function value() {\n      return undefined;\n    }\n  }]);\n\n  return Break;\n}(parchment__WEBPACK_IMPORTED_MODULE_0__[\"EmbedBlot\"]);\n\nBreak.blotName = 'break';\nBreak.tagName = 'BR';\n/* harmony default export */ __webpack_exports__[\"a\"] = (Break);\n\n/***/ }),\n/* 13 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return prepareStyleAttributor; });\n/* harmony import */ var _attributors_element_style__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(70);\n/* harmony import */ var _utils_capitalize__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(30);\nvar _excluded = [\"name\", \"formatName\"];\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\nfunction prepareStyleAttributor(_ref, propName) {\n  var name = _ref.name,\n      formatName = _ref.formatName,\n      elementConfig = _objectWithoutProperties(_ref, _excluded);\n\n  var subPropName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  var fullName = \"\".concat(propName).concat(subPropName ? \"-\".concat(subPropName) : '');\n  return new _attributors_element_style__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"](\"\".concat(name).concat(Object(_utils_capitalize__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"])(formatName !== null && formatName !== void 0 ? formatName : propName)).concat(Object(_utils_capitalize__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"])(subPropName)), fullName, elementConfig);\n}\n\n/***/ }),\n/* 14 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Module = function Module(quill) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  _classCallCheck(this, Module);\n\n  this.quill = quill;\n  this.options = options;\n};\n\nModule.DEFAULTS = {};\n/* harmony default export */ __webpack_exports__[\"a\"] = (Module);\n\n/***/ }),\n/* 15 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var parchment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n\n\nvar Container = /*#__PURE__*/function (_ContainerBlot) {\n  _inherits(Container, _ContainerBlot);\n\n  var _super = _createSuper(Container);\n\n  function Container() {\n    _classCallCheck(this, Container);\n\n    return _super.apply(this, arguments);\n  }\n\n  return Container;\n}(parchment__WEBPACK_IMPORTED_MODULE_0__[\"ContainerBlot\"]);\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Container);\n\n/***/ }),\n/* 16 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var parchment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);\n/* harmony import */ var _break__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(12);\n/* harmony import */ var _text__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(11);\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n\n\n\n\nvar Inline = /*#__PURE__*/function (_InlineBlot) {\n  _inherits(Inline, _InlineBlot);\n\n  var _super = _createSuper(Inline);\n\n  function Inline() {\n    _classCallCheck(this, Inline);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Inline, [{\n    key: \"formatAt\",\n    value: function formatAt(index, length, name, value) {\n      if (Inline.compare(this.statics.blotName, name) < 0 && this.scroll.query(name, parchment__WEBPACK_IMPORTED_MODULE_0__[\"Scope\"].BLOT)) {\n        var blot = this.isolate(index, length);\n\n        if (value) {\n          blot.wrap(name, value);\n        }\n      } else {\n        _get(_getPrototypeOf(Inline.prototype), \"formatAt\", this).call(this, index, length, name, value);\n      }\n    }\n  }, {\n    key: \"optimize\",\n    value: function optimize(context) {\n      _get(_getPrototypeOf(Inline.prototype), \"optimize\", this).call(this, context);\n\n      if (this.parent instanceof Inline && Inline.compare(this.statics.blotName, this.parent.statics.blotName) > 0) {\n        var parent = this.parent.isolate(this.offset(), this.length());\n        this.moveChildren(parent);\n        parent.wrap(this);\n      }\n    }\n  }], [{\n    key: \"compare\",\n    value: function compare(self, other) {\n      var selfIndex = Inline.order.indexOf(self);\n      var otherIndex = Inline.order.indexOf(other);\n\n      if (selfIndex >= 0 || otherIndex >= 0) {\n        return selfIndex - otherIndex;\n      }\n\n      if (self === other) {\n        return 0;\n      }\n\n      if (self < other) {\n        return -1;\n      }\n\n      return 1;\n    }\n  }]);\n\n  return Inline;\n}(parchment__WEBPACK_IMPORTED_MODULE_0__[\"InlineBlot\"]);\n\nInline.allowedChildren = [Inline, _break__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"], parchment__WEBPACK_IMPORTED_MODULE_0__[\"EmbedBlot\"], _text__WEBPACK_IMPORTED_MODULE_2__[/* default */ \"a\"]]; // Lower index means deeper in the DOM tree, since not found (-1) is for embeds\n\nInline.order = ['cursor', 'inline', // Must be lower\n'link', // Chrome wants <a> to be lower\n'underline', 'strike', 'italic', 'bold', 'script', 'code' // Must be higher\n];\n/* harmony default export */ __webpack_exports__[\"a\"] = (Inline);\n\n/***/ }),\n/* 17 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nvar hasWindow = function hasWindow() {\n  return typeof window !== 'undefined';\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (hasWindow);\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(global, module) {/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports =   true && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/**\n * Adds the key-value `pair` to `map`.\n *\n * @private\n * @param {Object} map The map to modify.\n * @param {Array} pair The key-value pair to add.\n * @returns {Object} Returns `map`.\n */\nfunction addMapEntry(map, pair) {\n  // Don't return `map.set` because it's not chainable in IE 11.\n  map.set(pair[0], pair[1]);\n  return map;\n}\n\n/**\n * Adds `value` to `set`.\n *\n * @private\n * @param {Object} set The set to modify.\n * @param {*} value The value to add.\n * @returns {Object} Returns `set`.\n */\nfunction addSetEntry(set, value) {\n  // Don't return `set.add` because it's not chainable in IE 11.\n  set.add(value);\n  return set;\n}\n\n/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    getPrototype = overArg(Object.getPrototypeOf, Object),\n    objectCreate = Object.create,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  this.__data__ = new ListCache(entries);\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  return this.__data__['delete'](key);\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var cache = this.__data__;\n  if (cache instanceof ListCache) {\n    var pairs = cache.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      return this;\n    }\n    cache = this.__data__ = new MapCache(pairs);\n  }\n  cache.set(key, value);\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    object[key] = value;\n  }\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @param {boolean} [isFull] Specify a clone including symbols.\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, isDeep, isFull, customizer, key, object, stack) {\n  var result;\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      if (isHostObject(value)) {\n        return object ? value : {};\n      }\n      result = initCloneObject(isFunc ? {} : value);\n      if (!isDeep) {\n        return copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, baseClone, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (!isArr) {\n    var props = isFull ? getAllKeys(value) : keys(value);\n  }\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));\n  });\n  return result;\n}\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} prototype The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nfunction baseCreate(proto) {\n  return isObject(proto) ? objectCreate(proto) : {};\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  return objectToString.call(value);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var result = new buffer.constructor(buffer.length);\n  buffer.copy(result);\n  return result;\n}\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\n/**\n * Creates a clone of `map`.\n *\n * @private\n * @param {Object} map The map to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned map.\n */\nfunction cloneMap(map, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);\n  return arrayReduce(array, addMapEntry, new map.constructor);\n}\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\n/**\n * Creates a clone of `set`.\n *\n * @private\n * @param {Object} set The set to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned set.\n */\nfunction cloneSet(set, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);\n  return arrayReduce(array, addSetEntry, new set.constructor);\n}\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\n/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    assignValue(object, key, newValue === undefined ? source[key] : newValue);\n  }\n  return object;\n}\n\n/**\n * Copies own symbol properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Creates an array of the own enumerable symbol properties of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = objectToString.call(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : undefined;\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, cloneFunc, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return cloneMap(object, isDeep, cloneFunc);\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return cloneSet(object, isDeep, cloneFunc);\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, true, true);\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = cloneDeep;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(54), __webpack_require__(61)(module)))\n\n/***/ }),\n/* 19 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return Code; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return CodeBlockContainer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return CodeBlock; });\n/* harmony import */ var _blots_block__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6);\n/* harmony import */ var _blots_break__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(12);\n/* harmony import */ var _blots_cursor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(24);\n/* harmony import */ var _blots_inline__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(16);\n/* harmony import */ var _blots_text__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(11);\n/* harmony import */ var _blots_container__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(15);\n/* harmony import */ var _core_quill__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(0);\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n\n\n\n\n\n\n\n\nvar CodeBlockContainer = /*#__PURE__*/function (_Container) {\n  _inherits(CodeBlockContainer, _Container);\n\n  var _super = _createSuper(CodeBlockContainer);\n\n  function CodeBlockContainer() {\n    _classCallCheck(this, CodeBlockContainer);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(CodeBlockContainer, [{\n    key: \"code\",\n    value: function code(index, length) {\n      var text = this.children.map(function (child) {\n        return child.length() <= 1 ? '' : child.domNode.textContent;\n      }).join('\\n').slice(index, index + length);\n      return Object(_blots_text__WEBPACK_IMPORTED_MODULE_4__[/* escapeText */ \"b\"])(text);\n    }\n  }, {\n    key: \"html\",\n    value: function html(index, length) {\n      // `\\n`s are needed in order to support empty lines at the beginning and the end.\n      // https://html.spec.whatwg.org/multipage/syntax.html#element-restrictions\n      return \"<pre>\\n\".concat(this.code(index, length), \"\\n</pre>\");\n    }\n  }], [{\n    key: \"create\",\n    value: function create(value) {\n      var domNode = _get(_getPrototypeOf(CodeBlockContainer), \"create\", this).call(this, value);\n\n      domNode.setAttribute('spellcheck', false);\n      return domNode;\n    }\n  }]);\n\n  return CodeBlockContainer;\n}(_blots_container__WEBPACK_IMPORTED_MODULE_5__[/* default */ \"a\"]);\n\nvar CodeBlock = /*#__PURE__*/function (_Block) {\n  _inherits(CodeBlock, _Block);\n\n  var _super2 = _createSuper(CodeBlock);\n\n  function CodeBlock() {\n    _classCallCheck(this, CodeBlock);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(CodeBlock, null, [{\n    key: \"register\",\n    value: function register() {\n      _core_quill__WEBPACK_IMPORTED_MODULE_6__[/* default */ \"a\"].register(CodeBlockContainer);\n    }\n  }]);\n\n  return CodeBlock;\n}(_blots_block__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"d\"]);\n\nvar Code = /*#__PURE__*/function (_Inline) {\n  _inherits(Code, _Inline);\n\n  var _super3 = _createSuper(Code);\n\n  function Code() {\n    _classCallCheck(this, Code);\n\n    return _super3.apply(this, arguments);\n  }\n\n  return Code;\n}(_blots_inline__WEBPACK_IMPORTED_MODULE_3__[/* default */ \"a\"]);\n\nCode.blotName = 'code';\nCode.tagName = 'CODE';\nCodeBlock.blotName = 'code-block';\nCodeBlock.className = 'ql-code-block';\nCodeBlock.tagName = 'DIV';\nCodeBlockContainer.blotName = 'code-block-container';\nCodeBlockContainer.className = 'ql-code-block-container';\nCodeBlockContainer.tagName = 'DIV';\nCodeBlockContainer.allowedChildren = [CodeBlock];\nCodeBlock.allowedChildren = [_blots_text__WEBPACK_IMPORTED_MODULE_4__[/* default */ \"a\"], _blots_break__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"], _blots_cursor__WEBPACK_IMPORTED_MODULE_2__[/* default */ \"a\"]];\nCodeBlock.requiredContainer = CodeBlockContainer;\nCodeBlock.TAB = '  ';\n\n\n/***/ }),\n/* 20 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var parchment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);\n/* harmony import */ var _core_emitter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3);\n/* harmony import */ var _block__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(6);\n/* harmony import */ var _break__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(12);\n/* harmony import */ var _container__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(15);\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n\n\n\n\n\n\nfunction isLine(blot) {\n  return blot instanceof _block__WEBPACK_IMPORTED_MODULE_2__[/* default */ \"d\"] || blot instanceof _block__WEBPACK_IMPORTED_MODULE_2__[/* BlockEmbed */ \"a\"];\n}\n\nvar Scroll = /*#__PURE__*/function (_ScrollBlot) {\n  _inherits(Scroll, _ScrollBlot);\n\n  var _super = _createSuper(Scroll);\n\n  function Scroll(registry, domNode, _ref) {\n    var _this;\n\n    var emitter = _ref.emitter,\n        toggleBlankClass = _ref.toggleBlankClass;\n\n    _classCallCheck(this, Scroll);\n\n    _this = _super.call(this, registry, domNode);\n    _this.emitter = emitter;\n    _this.toggleBlankClass = toggleBlankClass;\n    _this.batch = false;\n\n    _this.optimize();\n\n    _this.enable();\n\n    _this.domNode.addEventListener('dragstart', function (e) {\n      return _this.handleDragStart(e);\n    });\n\n    return _this;\n  }\n\n  _createClass(Scroll, [{\n    key: \"batchStart\",\n    value: function batchStart() {\n      if (!Array.isArray(this.batch)) {\n        this.batch = [];\n      }\n    }\n  }, {\n    key: \"batchEnd\",\n    value: function batchEnd() {\n      var mutations = this.batch;\n      this.batch = false;\n      this.update(mutations);\n    }\n  }, {\n    key: \"emitMount\",\n    value: function emitMount(blot) {\n      this.emitter.emit(_core_emitter__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"].events.SCROLL_BLOT_MOUNT, blot);\n    }\n  }, {\n    key: \"emitUnmount\",\n    value: function emitUnmount(blot) {\n      this.emitter.emit(_core_emitter__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"].events.SCROLL_BLOT_UNMOUNT, blot);\n    }\n  }, {\n    key: \"deleteAt\",\n    value: function deleteAt(index, length) {\n      var _this$line = this.line(index),\n          _this$line2 = _slicedToArray(_this$line, 2),\n          first = _this$line2[0],\n          offset = _this$line2[1];\n\n      var _this$line3 = this.line(index + length),\n          _this$line4 = _slicedToArray(_this$line3, 1),\n          last = _this$line4[0];\n\n      _get(_getPrototypeOf(Scroll.prototype), \"deleteAt\", this).call(this, index, length);\n\n      if (last != null && first !== last && offset > 0) {\n        if (first instanceof _block__WEBPACK_IMPORTED_MODULE_2__[/* BlockEmbed */ \"a\"] || last instanceof _block__WEBPACK_IMPORTED_MODULE_2__[/* BlockEmbed */ \"a\"]) {\n          this.optimize();\n          return;\n        }\n\n        var ref = last.children.head instanceof _break__WEBPACK_IMPORTED_MODULE_3__[/* default */ \"a\"] ? null : last.children.head;\n        first.moveChildren(last, ref);\n        first.remove();\n      }\n\n      this.optimize();\n    }\n  }, {\n    key: \"enable\",\n    value: function enable() {\n      var enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this.domNode.setAttribute('contenteditable', enabled);\n    }\n  }, {\n    key: \"formatAt\",\n    value: function formatAt(index, length, format, value) {\n      _get(_getPrototypeOf(Scroll.prototype), \"formatAt\", this).call(this, index, length, format, value);\n\n      this.optimize();\n    }\n  }, {\n    key: \"handleDragStart\",\n    value: function handleDragStart(event) {\n      event.preventDefault();\n    }\n  }, {\n    key: \"insertAt\",\n    value: function insertAt(index, value, def) {\n      if (index >= this.length()) {\n        if (def == null || this.scroll.query(value, parchment__WEBPACK_IMPORTED_MODULE_0__[\"Scope\"].BLOCK) == null) {\n          var blot = this.scroll.create(this.statics.defaultChild.blotName);\n          this.appendChild(blot);\n\n          if (def == null && value.endsWith('\\n')) {\n            blot.insertAt(0, value.slice(0, -1), def);\n          } else {\n            blot.insertAt(0, value, def);\n          }\n        } else {\n          var embed = this.scroll.create(value, def);\n          this.appendChild(embed);\n        }\n      } else {\n        _get(_getPrototypeOf(Scroll.prototype), \"insertAt\", this).call(this, index, value, def);\n      }\n\n      this.optimize();\n    }\n  }, {\n    key: \"insertBefore\",\n    value: function insertBefore(blot, ref) {\n      if (blot.statics.scope === parchment__WEBPACK_IMPORTED_MODULE_0__[\"Scope\"].INLINE_BLOT) {\n        var wrapper = this.scroll.create(this.statics.defaultChild.blotName);\n        wrapper.appendChild(blot);\n\n        _get(_getPrototypeOf(Scroll.prototype), \"insertBefore\", this).call(this, wrapper, ref);\n      } else {\n        _get(_getPrototypeOf(Scroll.prototype), \"insertBefore\", this).call(this, blot, ref);\n      }\n    }\n  }, {\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      return this.domNode.getAttribute('contenteditable') === 'true';\n    }\n  }, {\n    key: \"leaf\",\n    value: function leaf(index) {\n      return this.path(index).pop() || [null, -1];\n    }\n  }, {\n    key: \"line\",\n    value: function line(index) {\n      if (index === this.length()) {\n        return this.line(index - 1);\n      }\n\n      return this.descendant(isLine, index);\n    }\n  }, {\n    key: \"lines\",\n    value: function lines() {\n      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.MAX_VALUE;\n\n      var getLines = function getLines(blot, blotIndex, blotLength) {\n        var lines = [];\n        var lengthLeft = blotLength;\n        blot.children.forEachAt(blotIndex, blotLength, function (child, childIndex, childLength) {\n          if (isLine(child)) {\n            lines.push(child);\n          } else if (child instanceof parchment__WEBPACK_IMPORTED_MODULE_0__[\"ContainerBlot\"]) {\n            lines = lines.concat(getLines(child, childIndex, lengthLeft));\n          }\n\n          lengthLeft -= childLength;\n        });\n        return lines;\n      };\n\n      return getLines(this, index, length);\n    }\n  }, {\n    key: \"optimize\",\n    value: function optimize() {\n      var mutations = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (this.batch) return;\n\n      _get(_getPrototypeOf(Scroll.prototype), \"optimize\", this).call(this, mutations, context);\n\n      if (mutations.length > 0) {\n        this.emitter.emit(_core_emitter__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"].events.SCROLL_OPTIMIZE, mutations, context);\n      }\n    }\n  }, {\n    key: \"path\",\n    value: function path(index) {\n      return _get(_getPrototypeOf(Scroll.prototype), \"path\", this).call(this, index).slice(1); // Exclude self\n    }\n  }, {\n    key: \"remove\",\n    value: function remove() {// Never remove self\n    }\n  }, {\n    key: \"update\",\n    value: function update(mutations) {\n      var _this2 = this;\n\n      if (this.batch) {\n        if (Array.isArray(mutations)) {\n          this.batch = this.batch.concat(mutations);\n          this.toggleBlankClass();\n        }\n\n        return;\n      }\n\n      var source = _core_emitter__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"].sources.USER;\n\n      if (typeof mutations === 'string') {\n        source = mutations;\n      }\n\n      if (!Array.isArray(mutations)) {\n        mutations = this.observer.takeRecords();\n      }\n\n      mutations = mutations.filter(function (_ref2) {\n        var target = _ref2.target;\n\n        var blot = _this2.find(target, true);\n\n        return blot && blot.scroll === _this2;\n      });\n\n      if (mutations.length > 0) {\n        this.emitter.emit(_core_emitter__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"].events.SCROLL_BEFORE_UPDATE, source, mutations);\n      }\n\n      _get(_getPrototypeOf(Scroll.prototype), \"update\", this).call(this, mutations.concat([])); // pass copy\n\n\n      if (mutations.length > 0) {\n        this.emitter.emit(_core_emitter__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"].events.SCROLL_UPDATE, source, mutations);\n      }\n    }\n  }]);\n\n  return Scroll;\n}(parchment__WEBPACK_IMPORTED_MODULE_0__[\"ScrollBlot\"]);\n\nScroll.blotName = 'scroll';\nScroll.className = 'ql-editor';\nScroll.tagName = 'DIV';\nScroll.defaultChild = _block__WEBPACK_IMPORTED_MODULE_2__[/* default */ \"d\"];\nScroll.allowedChildren = [_block__WEBPACK_IMPORTED_MODULE_2__[/* default */ \"d\"], _block__WEBPACK_IMPORTED_MODULE_2__[/* BlockEmbed */ \"a\"], _container__WEBPACK_IMPORTED_MODULE_4__[/* default */ \"a\"]];\n/* harmony default export */ __webpack_exports__[\"a\"] = (Scroll);\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports) {\n\nvar FunctionPrototype = Function.prototype;\nvar bind = FunctionPrototype.bind;\nvar call = FunctionPrototype.call;\nvar callBind = bind && bind.bind(call);\n\nmodule.exports = bind ? function (fn) {\n  return fn && callBind(call, fn);\n} : function (fn) {\n  return fn && function () {\n    return call.apply(fn, arguments);\n  };\n};\n\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports) {\n\n// `IsCallable` abstract operation\n// https://tc39.es/ecma262/#sec-iscallable\nmodule.exports = function (argument) {\n  return typeof argument == 'function';\n};\n\n\n/***/ }),\n/* 23 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nvar levels = ['error', 'warn', 'log', 'info'];\nvar level = 'warn';\n\nfunction debug(method) {\n  if (levels.indexOf(method) <= levels.indexOf(level)) {\n    var _console;\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    (_console = console)[method].apply(_console, args); // eslint-disable-line no-console\n\n  }\n}\n\nfunction namespace(ns) {\n  return levels.reduce(function (logger, method) {\n    logger[method] = debug.bind(console, method, ns);\n    return logger;\n  }, {});\n}\n\nnamespace.level = function (newLevel) {\n  level = newLevel;\n};\n\ndebug.level = namespace.level;\n/* harmony default export */ __webpack_exports__[\"a\"] = (namespace);\n\n/***/ }),\n/* 24 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var parchment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);\n/* harmony import */ var _text__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(11);\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n\n\n\nvar Cursor = /*#__PURE__*/function (_EmbedBlot) {\n  _inherits(Cursor, _EmbedBlot);\n\n  var _super = _createSuper(Cursor);\n\n  function Cursor(scroll, domNode, selection) {\n    var _this;\n\n    _classCallCheck(this, Cursor);\n\n    _this = _super.call(this, scroll, domNode);\n    _this.selection = selection;\n    _this.textNode = document.createTextNode(Cursor.CONTENTS);\n\n    _this.domNode.appendChild(_this.textNode);\n\n    _this.savedLength = 0;\n    return _this;\n  }\n\n  _createClass(Cursor, [{\n    key: \"detach\",\n    value: function detach() {\n      // super.detach() will also clear domNode.__blot\n      if (this.parent != null) this.parent.removeChild(this);\n    }\n  }, {\n    key: \"format\",\n    value: function format(name, value) {\n      if (this.savedLength !== 0) {\n        _get(_getPrototypeOf(Cursor.prototype), \"format\", this).call(this, name, value);\n\n        return;\n      }\n\n      var target = this;\n      var index = 0;\n\n      while (target != null && target.statics.scope !== parchment__WEBPACK_IMPORTED_MODULE_0__[\"Scope\"].BLOCK_BLOT) {\n        index += target.offset(target.parent);\n        target = target.parent;\n      }\n\n      if (target != null) {\n        this.savedLength = Cursor.CONTENTS.length;\n        target.optimize();\n        target.formatAt(index, Cursor.CONTENTS.length, name, value);\n        this.savedLength = 0;\n      }\n    }\n  }, {\n    key: \"index\",\n    value: function index(node, offset) {\n      if (node === this.textNode) return 0;\n      return _get(_getPrototypeOf(Cursor.prototype), \"index\", this).call(this, node, offset);\n    }\n  }, {\n    key: \"length\",\n    value: function length() {\n      return this.savedLength;\n    }\n  }, {\n    key: \"position\",\n    value: function position() {\n      return [this.textNode, this.textNode.data.length];\n    }\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      _get(_getPrototypeOf(Cursor.prototype), \"remove\", this).call(this);\n\n      this.parent = null;\n    }\n  }, {\n    key: \"restore\",\n    value: function restore() {\n      if (this.selection.composing || this.parent == null) return null;\n      var range = this.selection.getNativeRange(); // Link format will insert text outside of anchor tag\n\n      while (this.domNode.lastChild != null && this.domNode.lastChild !== this.textNode) {\n        this.domNode.parentNode.insertBefore(this.domNode.lastChild, this.domNode);\n      }\n\n      var prevTextBlot = this.prev instanceof _text__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"] ? this.prev : null;\n      var prevTextLength = prevTextBlot ? prevTextBlot.length() : 0;\n      var nextTextBlot = this.next instanceof _text__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"] ? this.next : null;\n      var nextText = nextTextBlot ? nextTextBlot.text : '';\n      var textNode = this.textNode; // take text from inside this blot and reset it\n\n      var newText = textNode.data.split(Cursor.CONTENTS).join('');\n      textNode.data = Cursor.CONTENTS; // proactively merge TextBlots around cursor so that optimization\n      // doesn't lose the cursor.  the reason we are here in cursor.restore\n      // could be that the user clicked in prevTextBlot or nextTextBlot, or\n      // the user typed something.\n\n      var mergedTextBlot;\n\n      if (prevTextBlot) {\n        mergedTextBlot = prevTextBlot;\n\n        if (newText || nextTextBlot) {\n          prevTextBlot.insertAt(prevTextBlot.length(), newText + nextText);\n\n          if (nextTextBlot) {\n            nextTextBlot.remove();\n          }\n        }\n      } else if (nextTextBlot) {\n        mergedTextBlot = nextTextBlot;\n        nextTextBlot.insertAt(0, newText);\n      } else {\n        var newTextNode = document.createTextNode(newText);\n        mergedTextBlot = this.scroll.create(newTextNode);\n        this.parent.insertBefore(mergedTextBlot, this);\n      }\n\n      this.remove();\n\n      if (range) {\n        // calculate selection to restore\n        var remapOffset = function remapOffset(node, offset) {\n          if (prevTextBlot && node === prevTextBlot.domNode) {\n            return offset;\n          }\n\n          if (node === textNode) {\n            return prevTextLength + offset - 1;\n          }\n\n          if (nextTextBlot && node === nextTextBlot.domNode) {\n            return prevTextLength + newText.length + offset;\n          }\n\n          return null;\n        };\n\n        var start = remapOffset(range.start.node, range.start.offset);\n        var end = remapOffset(range.end.node, range.end.offset);\n\n        if (start !== null && end !== null) {\n          return {\n            startNode: mergedTextBlot.domNode,\n            startOffset: start,\n            endNode: mergedTextBlot.domNode,\n            endOffset: end\n          };\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"update\",\n    value: function update(mutations, context) {\n      var _this2 = this;\n\n      if (mutations.some(function (mutation) {\n        return mutation.type === 'characterData' && mutation.target === _this2.textNode;\n      })) {\n        var range = this.restore();\n        if (range) context.range = range;\n      }\n    }\n  }, {\n    key: \"value\",\n    value: function value() {\n      return '';\n    }\n  }], [{\n    key: \"value\",\n    value: function value() {\n      return undefined;\n    }\n  }]);\n\n  return Cursor;\n}(parchment__WEBPACK_IMPORTED_MODULE_0__[\"EmbedBlot\"]);\n\nCursor.blotName = 'cursor';\nCursor.className = 'ql-cursor';\nCursor.tagName = 'span';\nCursor.CONTENTS = \"\\uFEFF\"; // Zero width no break space\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Cursor);\n\n/***/ }),\n/* 25 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_quill__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\n/* harmony import */ var _blots_block__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6);\n/* harmony import */ var _blots_break__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(12);\n/* harmony import */ var _blots_container__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(15);\n/* harmony import */ var _blots_cursor__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(24);\n/* harmony import */ var _blots_embed__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(59);\n/* harmony import */ var _blots_inline__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(16);\n/* harmony import */ var _blots_scroll__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(20);\n/* harmony import */ var _blots_text__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(11);\n/* harmony import */ var _modules_clipboard__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(28);\n/* harmony import */ var _modules_history__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(47);\n/* harmony import */ var _modules_keyboard__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(26);\n/* harmony import */ var _modules_uploader__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(55);\n\n\n\n\n\n\n\n\n\n\n\n\n\n_core_quill__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"].register({\n  'blots/block': _blots_block__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"d\"],\n  'blots/block/embed': _blots_block__WEBPACK_IMPORTED_MODULE_1__[/* BlockEmbed */ \"a\"],\n  'blots/break': _blots_break__WEBPACK_IMPORTED_MODULE_2__[/* default */ \"a\"],\n  'blots/container': _blots_container__WEBPACK_IMPORTED_MODULE_3__[/* default */ \"a\"],\n  'blots/cursor': _blots_cursor__WEBPACK_IMPORTED_MODULE_4__[/* default */ \"a\"],\n  'blots/embed': _blots_embed__WEBPACK_IMPORTED_MODULE_5__[/* default */ \"a\"],\n  'blots/inline': _blots_inline__WEBPACK_IMPORTED_MODULE_6__[/* default */ \"a\"],\n  'blots/scroll': _blots_scroll__WEBPACK_IMPORTED_MODULE_7__[/* default */ \"a\"],\n  'blots/text': _blots_text__WEBPACK_IMPORTED_MODULE_8__[/* default */ \"a\"],\n  'modules/clipboard': _modules_clipboard__WEBPACK_IMPORTED_MODULE_9__[/* default */ \"b\"],\n  'modules/history': _modules_history__WEBPACK_IMPORTED_MODULE_10__[/* default */ \"a\"],\n  'modules/keyboard': _modules_keyboard__WEBPACK_IMPORTED_MODULE_11__[/* default */ \"b\"],\n  'modules/uploader': _modules_uploader__WEBPACK_IMPORTED_MODULE_12__[/* default */ \"a\"]\n});\n/* harmony default export */ __webpack_exports__[\"default\"] = (_core_quill__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"]);\n\n/***/ }),\n/* 26 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, \"b\", function() { return /* binding */ keyboard_Keyboard; });\n__webpack_require__.d(__webpack_exports__, \"a\", function() { return /* binding */ SHORTKEY; });\n__webpack_require__.d(__webpack_exports__, \"d\", function() { return /* binding */ normalize; });\n__webpack_require__.d(__webpack_exports__, \"c\", function() { return /* binding */ deleteRange; });\n\n// EXTERNAL MODULE: ./node_modules/lodash.clonedeep/index.js\nvar lodash_clonedeep = __webpack_require__(18);\nvar lodash_clonedeep_default = /*#__PURE__*/__webpack_require__.n(lodash_clonedeep);\n\n// EXTERNAL MODULE: ./node_modules/lodash.isequal/index.js\nvar lodash_isequal = __webpack_require__(29);\nvar lodash_isequal_default = /*#__PURE__*/__webpack_require__.n(lodash_isequal);\n\n// EXTERNAL MODULE: ./node_modules/quill-delta/dist/Delta.js\nvar Delta = __webpack_require__(1);\nvar Delta_default = /*#__PURE__*/__webpack_require__.n(Delta);\n\n// EXTERNAL MODULE: ./node_modules/parchment/src/parchment.ts + 17 modules\nvar parchment = __webpack_require__(2);\n\n// EXTERNAL MODULE: ./core/quill.js\nvar core_quill = __webpack_require__(0);\n\n// EXTERNAL MODULE: ./core/logger.js\nvar logger = __webpack_require__(23);\n\n// EXTERNAL MODULE: ./core/module.js\nvar core_module = __webpack_require__(14);\n\n// EXTERNAL MODULE: ./utils/has_window.js\nvar has_window = __webpack_require__(17);\n\n// CONCATENATED MODULE: ./utils/get_scroll_into_view_config.js\nfunction getScrollIntoViewConfig(element) {\n  var _window = window,\n      windowHeight = _window.innerHeight;\n\n  var _element$getBoundingC = element.getBoundingClientRect(),\n      elemTop = _element$getBoundingC.y,\n      elemBottom = _element$getBoundingC.bottom;\n\n  if (elemTop < 0) {\n    return true; // scroll to the top\n  }\n\n  if (elemBottom >= windowHeight) {\n    return false; // scroll to the bottom\n  }\n\n  return null;\n}\n// CONCATENATED MODULE: ./modules/keyboard.js\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n\n\n\n\n\n\n\n\n\nvar debug = Object(logger[\"a\" /* default */])('quill:keyboard');\nvar KEY_NAMES = {\n  backspace: 'backspace',\n  tab: 'tab',\n  enter: 'enter',\n  escape: 'escape',\n  pageup: 'pageUp',\n  pagedown: 'pageDown',\n  end: 'end',\n  home: 'home',\n  arrowleft: 'leftArrow',\n  arrowup: 'upArrow',\n  arrowright: 'rightArrow',\n  arrowdown: 'downArrow',\n  delete: 'del',\n  ' ': 'space',\n  '*': 'asterisk',\n  '-': 'minus',\n  alt: 'alt',\n  control: 'control',\n  shift: 'shift',\n  // IE11:\n  left: 'leftArrow',\n  up: 'upArrow',\n  right: 'rightArrow',\n  down: 'downArrow',\n  multiply: 'asterisk',\n  spacebar: 'space',\n  del: 'del',\n  subtract: 'minus',\n  esc: 'escape'\n};\nvar KEY_CODES = {\n  // iOS 10.2 and lower didn't supports KeyboardEvent.key\n  '8': 'backspace',\n  '9': 'tab',\n  '13': 'enter',\n  '27': 'escape',\n  '33': 'pageUp',\n  '34': 'pageDown',\n  '35': 'end',\n  '36': 'home',\n  '37': 'leftArrow',\n  '38': 'upArrow',\n  '39': 'rightArrow',\n  '40': 'downArrow',\n  '46': 'del',\n  '32': 'space',\n  '106': 'asterisk',\n  '109': 'minus',\n  '189': 'minus',\n  '173': 'minus',\n  '16': 'shift',\n  '17': 'control',\n  '18': 'alt'\n};\nvar SHORTKEY = Object(has_window[\"a\" /* default */])() && /Mac/i.test(navigator.platform) ? 'metaKey' : 'ctrlKey';\n\nvar keyboard_Keyboard = /*#__PURE__*/function (_Module) {\n  _inherits(Keyboard, _Module);\n\n  var _super = _createSuper(Keyboard);\n\n  function Keyboard(quill, options) {\n    var _this;\n\n    _classCallCheck(this, Keyboard);\n\n    _this = _super.call(this, quill, options);\n    _this.bindings = {};\n    Object.keys(_this.options.bindings).forEach(function (name) {\n      if (_this.options.bindings[name]) {\n        _this.addBinding(_this.options.bindings[name]);\n      }\n    });\n\n    _this.addInternalBindings();\n\n    _this.listen();\n\n    return _this;\n  }\n\n  _createClass(Keyboard, [{\n    key: \"addInternalBindings\",\n    value: function addInternalBindings() {\n      var _this2 = this;\n\n      this.quill.once(core_quill[\"a\" /* default */].events.CONTENT_SETTED, function () {\n        _this2.addBinding({\n          key: 'enter',\n          shiftKey: null\n        }, _this2.handleEnter);\n\n        _this2.addBinding({\n          key: 'enter',\n          metaKey: null,\n          ctrlKey: null,\n          altKey: null\n        }, function () {});\n\n        if (Object(has_window[\"a\" /* default */])() && /Firefox/i.test(navigator.userAgent)) {\n          // Need to handle delete and backspace for Firefox in the general case #1171\n          _this2.addBinding({\n            key: 'backspace'\n          }, {\n            collapsed: true\n          }, _this2.handleBackspace);\n\n          _this2.addBinding({\n            key: 'del'\n          }, {\n            collapsed: true\n          }, _this2.handleDelete);\n        } else {\n          _this2.addBinding({\n            key: 'backspace'\n          }, {\n            collapsed: true,\n            prefix: /^.?$/\n          }, _this2.handleBackspace);\n\n          _this2.addBinding({\n            key: 'del'\n          }, {\n            collapsed: true,\n            suffix: /^.?$/\n          }, _this2.handleDelete);\n        }\n\n        _this2.addBinding({\n          key: 'backspace'\n        }, {\n          collapsed: false\n        }, _this2.handleDeleteRange);\n\n        _this2.addBinding({\n          key: 'del'\n        }, {\n          collapsed: false\n        }, _this2.handleDeleteRange);\n\n        _this2.addBinding({\n          key: 'backspace',\n          altKey: null,\n          ctrlKey: null,\n          metaKey: null,\n          shiftKey: null\n        }, {\n          collapsed: true,\n          offset: 0\n        }, _this2.handleBackspace);\n      });\n    }\n  }, {\n    key: \"addBinding\",\n    value: function addBinding(keyBinding) {\n      var _this3 = this;\n\n      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var handler = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var binding = normalize(keyBinding);\n\n      if (binding == null) {\n        debug.warn('Attempted to add invalid keyboard binding', binding);\n        return;\n      }\n\n      if (typeof context === 'function') {\n        context = {\n          handler: context\n        };\n      }\n\n      if (typeof handler === 'function') {\n        handler = {\n          handler: handler\n        };\n      }\n\n      var keyPropery = binding.which ? 'which' : 'key';\n      var keys = Array.isArray(binding[keyPropery]) ? binding[keyPropery] : [binding[keyPropery]];\n      keys.forEach(function (key) {\n        var singleBinding = _objectSpread(_objectSpread(_objectSpread({}, binding), {}, {\n          key: key\n        }, context), handler);\n\n        _this3.bindings[singleBinding.key] = _this3.bindings[singleBinding.key] || [];\n\n        _this3.bindings[singleBinding.key].push(singleBinding);\n      });\n    }\n  }, {\n    key: \"listen\",\n    value: function listen() {\n      var _this4 = this;\n\n      this.quill.root.addEventListener('keydown', function (evt) {\n        if (evt.defaultPrevented || evt.isComposing) return;\n\n        _this4.raiseOnKeydownCallback(evt);\n\n        var keyName = Keyboard.normalizeKeyName(evt);\n        var bindings = (_this4.bindings[keyName] || []).concat(_this4.bindings[evt.which] || []);\n        var matches = bindings.filter(function (binding) {\n          return Keyboard.match(evt, binding);\n        });\n        if (matches.length === 0) return;\n\n        var range = _this4.quill.getSelection();\n\n        if (range == null || !_this4.quill.hasFocus()) return;\n\n        var _this4$quill$getLine = _this4.quill.getLine(range.index),\n            _this4$quill$getLine2 = _slicedToArray(_this4$quill$getLine, 2),\n            line = _this4$quill$getLine2[0],\n            offset = _this4$quill$getLine2[1];\n\n        var _this4$quill$getLeaf = _this4.quill.getLeaf(range.index),\n            _this4$quill$getLeaf2 = _slicedToArray(_this4$quill$getLeaf, 2),\n            leafStart = _this4$quill$getLeaf2[0],\n            offsetStart = _this4$quill$getLeaf2[1];\n\n        var _ref = range.length === 0 ? [leafStart, offsetStart] : _this4.quill.getLeaf(range.index + range.length),\n            _ref2 = _slicedToArray(_ref, 2),\n            leafEnd = _ref2[0],\n            offsetEnd = _ref2[1];\n\n        var prefixText = leafStart instanceof parchment[\"TextBlot\"] ? leafStart.value().slice(0, offsetStart) : '';\n        var suffixText = leafEnd instanceof parchment[\"TextBlot\"] ? leafEnd.value().slice(offsetEnd) : '';\n        var curContext = {\n          collapsed: range.length === 0,\n          empty: range.length === 0 && line.length() <= 1,\n          format: _this4.quill.getFormat(range),\n          line: line,\n          offset: offset,\n          prefix: prefixText,\n          suffix: suffixText,\n          event: evt\n        };\n        var prevented = false;\n        matches.some(function (binding) {\n          if (binding.collapsed != null && binding.collapsed !== curContext.collapsed) {\n            return false;\n          }\n\n          if (binding.empty != null && binding.empty !== curContext.empty) {\n            return false;\n          }\n\n          if (binding.offset != null && binding.offset !== curContext.offset) {\n            return false;\n          }\n\n          if (Array.isArray(binding.format)) {\n            // any format is present\n            if (binding.format.every(function (name) {\n              return curContext.format[name] == null;\n            })) {\n              return false;\n            }\n          } else if (_typeof(binding.format) === 'object') {\n            // all formats must match\n            if (!Object.keys(binding.format).every(function (name) {\n              if (binding.format[name] === true) return curContext.format[name] != null;\n              if (binding.format[name] === false) return curContext.format[name] == null;\n              return lodash_isequal_default()(binding.format[name], curContext.format[name]);\n            })) {\n              return false;\n            }\n          }\n\n          if (binding.prefix != null && !binding.prefix.test(curContext.prefix)) {\n            return false;\n          }\n\n          if (binding.suffix != null && !binding.suffix.test(curContext.suffix)) {\n            return false;\n          }\n\n          var handlerResult = binding.handler.call(_this4, range, curContext, binding);\n          var preventAfterAllMatches = handlerResult === null || handlerResult === void 0 ? void 0 : handlerResult.preventAfterAllMatches;\n          prevented = handlerResult !== true || preventAfterAllMatches;\n          return prevented && !preventAfterAllMatches;\n        });\n\n        if (prevented) {\n          evt.preventDefault();\n        }\n      });\n    }\n  }, {\n    key: \"raiseOnKeydownCallback\",\n    value: function raiseOnKeydownCallback(event) {\n      var callback = this.options.onKeydown;\n\n      if (callback && typeof callback === 'function') {\n        callback(event);\n      }\n    }\n  }, {\n    key: \"handleBackspace\",\n    value: function handleBackspace(range, context) {\n      // Check for astral symbols\n      var length = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]$/.test(context.prefix) ? 2 : 1;\n      if (range.index === 0 || this.quill.getLength() <= 1) return;\n      var formats = {};\n\n      var _this$quill$getLine = this.quill.getLine(range.index),\n          _this$quill$getLine2 = _slicedToArray(_this$quill$getLine, 1),\n          line = _this$quill$getLine2[0];\n\n      var delta = new Delta_default.a().retain(range.index - length).delete(length);\n\n      if (context.offset === 0) {\n        // Always deleting newline here, length always 1\n        var _this$quill$getLine3 = this.quill.getLine(range.index - 1),\n            _this$quill$getLine4 = _slicedToArray(_this$quill$getLine3, 1),\n            prev = _this$quill$getLine4[0];\n\n        if (prev) {\n          var isPrevLineEmpty = prev.statics.blotName === 'block' && prev.length() <= 1;\n\n          if (!isPrevLineEmpty) {\n            var curFormats = line.formats();\n            var prevFormats = this.quill.getFormat(range.index - 1, 1);\n            formats = Delta[\"AttributeMap\"].diff(curFormats, prevFormats) || {};\n\n            if (Object.keys(formats).length > 0) {\n              // line.length() - 1 targets \\n in line, another -1 for newline being deleted\n              var formatDelta = new Delta_default.a().retain(range.index + line.length() - 2).retain(1, formats);\n              delta = delta.compose(formatDelta);\n            }\n          }\n        }\n      }\n\n      this.quill.updateContents(delta, core_quill[\"a\" /* default */].sources.USER);\n      this.quill.focus();\n    }\n  }, {\n    key: \"handleDelete\",\n    value: function handleDelete(range, context) {\n      // Check for astral symbols\n      var length = /^[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/.test(context.suffix) ? 2 : 1;\n      if (range.index >= this.quill.getLength() - length) return;\n      var formats = {};\n\n      var _this$quill$getLine5 = this.quill.getLine(range.index),\n          _this$quill$getLine6 = _slicedToArray(_this$quill$getLine5, 1),\n          line = _this$quill$getLine6[0];\n\n      var delta = new Delta_default.a().retain(range.index).delete(length);\n\n      if (context.offset >= line.length() - 1) {\n        var _this$quill$getLine7 = this.quill.getLine(range.index + 1),\n            _this$quill$getLine8 = _slicedToArray(_this$quill$getLine7, 1),\n            next = _this$quill$getLine8[0];\n\n        if (next) {\n          var curFormats = line.formats();\n          var nextFormats = this.quill.getFormat(range.index, 1);\n          formats = Delta[\"AttributeMap\"].diff(curFormats, nextFormats) || {};\n\n          if (Object.keys(formats).length > 0) {\n            delta = delta.retain(next.length() - 1).retain(1, formats);\n          }\n        }\n      }\n\n      this.quill.updateContents(delta, core_quill[\"a\" /* default */].sources.USER);\n      this.quill.focus();\n    }\n  }, {\n    key: \"handleDeleteRange\",\n    value: function handleDeleteRange(range, context) {\n      this.raiseOnKeydownCallback(context.event);\n      deleteRange({\n        range: range,\n        quill: this.quill\n      });\n      this.quill.focus();\n    }\n  }, {\n    key: \"handleEnter\",\n    value: function handleEnter(range, context) {\n      var _this5 = this;\n\n      var lineFormats = Object.keys(context.format).reduce(function (formats, format) {\n        if (_this5.quill.scroll.query(format, parchment[\"Scope\"].BLOCK) && !Array.isArray(context.format[format])) {\n          formats[format] = context.format[format];\n        }\n\n        return formats;\n      }, {});\n      var delta = new Delta_default.a().retain(range.index).delete(range.length).insert('\\n', lineFormats);\n      this.quill.updateContents(delta, core_quill[\"a\" /* default */].sources.USER);\n      this.quill.setSelection(range.index + 1, core_quill[\"a\" /* default */].sources.SILENT);\n      this.quill.focus();\n\n      var _this$quill$getLine9 = this.quill.getLine(range.index + 1),\n          _this$quill$getLine10 = _slicedToArray(_this$quill$getLine9, 1),\n          line = _this$quill$getLine10[0];\n\n      var scrollConfig = getScrollIntoViewConfig(line.domNode);\n\n      if (scrollConfig !== null) {\n        line.domNode.scrollIntoView(scrollConfig);\n      }\n\n      Object.keys(context.format).forEach(function (name) {\n        if (lineFormats[name] != null) return;\n        if (Array.isArray(context.format[name])) return;\n        if (name === 'code' || name === 'link') return;\n\n        _this5.raiseOnKeydownCallback(context.event);\n\n        _this5.quill.format(name, context.format[name], core_quill[\"a\" /* default */].sources.USER);\n      });\n    }\n  }], [{\n    key: \"match\",\n    value: function match(evt, binding) {\n      if (['altKey', 'ctrlKey', 'metaKey', 'shiftKey'].some(function (key) {\n        return !!binding[key] !== evt[key] && binding[key] !== null;\n      })) {\n        return false;\n      }\n\n      return binding.key === Keyboard.normalizeKeyName(evt) || binding.key === evt.which;\n    }\n  }, {\n    key: \"normalizeKeyName\",\n    value: function normalizeKeyName(_ref3) {\n      var key = _ref3.key,\n          which = _ref3.which;\n      var isKeySupported = !!key;\n      var normalizedKey = isKeySupported ? key : which;\n\n      if (normalizedKey) {\n        if (isKeySupported) {\n          normalizedKey = KEY_NAMES[normalizedKey.toLowerCase()] || normalizedKey;\n        } else {\n          normalizedKey = KEY_CODES[normalizedKey] || String.fromCharCode(normalizedKey);\n        }\n      }\n\n      return normalizedKey;\n    }\n  }]);\n\n  return Keyboard;\n}(core_module[\"a\" /* default */]);\n\nkeyboard_Keyboard.DEFAULTS = {\n  bindings: {\n    bold: makeFormatHandler('bold', 66),\n    italic: makeFormatHandler('italic', 73),\n    underline: makeFormatHandler('underline', 85),\n    indent: {\n      // highlight tab or tab at beginning of list, indent or blockquote\n      key: 'tab',\n      format: ['blockquote', 'indent', 'list'],\n      handler: function handler(range, context) {\n        if (context.collapsed && context.offset !== 0) return true;\n        this.quill.format('indent', '+1', core_quill[\"a\" /* default */].sources.USER);\n        return false;\n      }\n    },\n    outdent: {\n      key: 'tab',\n      shiftKey: true,\n      format: ['blockquote', 'indent', 'list'],\n      // highlight tab or tab at beginning of list, indent or blockquote\n      handler: function handler(range, context) {\n        if (context.collapsed && context.offset !== 0) return true;\n        this.quill.format('indent', '-1', core_quill[\"a\" /* default */].sources.USER);\n        return false;\n      }\n    },\n    'outdent backspace': {\n      key: 'backspace',\n      collapsed: true,\n      shiftKey: null,\n      metaKey: null,\n      ctrlKey: null,\n      altKey: null,\n      format: ['indent', 'list'],\n      offset: 0,\n      handler: function handler(range, context) {\n        if (context.format.indent != null) {\n          this.quill.format('indent', '-1', core_quill[\"a\" /* default */].sources.USER);\n        } else if (context.format.list != null) {\n          this.quill.format('list', false, core_quill[\"a\" /* default */].sources.USER);\n        }\n      }\n    },\n    'indent code-block': makeCodeBlockHandler(true),\n    'outdent code-block': makeCodeBlockHandler(false),\n    'remove tab': {\n      key: 'tab',\n      shiftKey: true,\n      collapsed: true,\n      prefix: /\\t$/,\n      handler: function handler(range) {\n        this.quill.deleteText(range.index - 1, 1, core_quill[\"a\" /* default */].sources.USER);\n      }\n    },\n    tab: {\n      key: 'tab',\n      handler: function handler(range, context) {\n        if (context.format.table) return true;\n        this.quill.history.cutoff();\n        var delta = new Delta_default.a().retain(range.index).delete(range.length).insert('\\t');\n        this.quill.updateContents(delta, core_quill[\"a\" /* default */].sources.USER);\n        this.quill.history.cutoff();\n        this.quill.setSelection(range.index + 1, core_quill[\"a\" /* default */].sources.SILENT);\n        return false;\n      }\n    },\n    'blockquote empty enter': {\n      key: 'enter',\n      collapsed: true,\n      format: ['blockquote'],\n      empty: true,\n      handler: function handler() {\n        this.quill.format('blockquote', false, core_quill[\"a\" /* default */].sources.USER);\n      }\n    },\n    'list empty enter': {\n      key: 'enter',\n      collapsed: true,\n      format: ['list'],\n      empty: true,\n      handler: function handler(range, context) {\n        var formats = {\n          list: false\n        };\n\n        if (context.format.indent) {\n          formats.indent = false;\n        }\n\n        this.quill.formatLine(range.index, range.length, formats, core_quill[\"a\" /* default */].sources.USER);\n      }\n    },\n    'checklist enter': {\n      key: 'enter',\n      collapsed: true,\n      format: {\n        list: 'checked'\n      },\n      handler: function handler(range) {\n        var _this$quill$getLine11 = this.quill.getLine(range.index),\n            _this$quill$getLine12 = _slicedToArray(_this$quill$getLine11, 2),\n            line = _this$quill$getLine12[0],\n            offset = _this$quill$getLine12[1];\n\n        var formats = _objectSpread(_objectSpread({}, line.formats()), {}, {\n          list: 'checked'\n        });\n\n        var delta = new Delta_default.a().retain(range.index).insert('\\n', formats).retain(line.length() - offset - 1).retain(1, {\n          list: 'unchecked'\n        });\n        this.quill.updateContents(delta, core_quill[\"a\" /* default */].sources.USER);\n        this.quill.setSelection(range.index + 1, core_quill[\"a\" /* default */].sources.SILENT);\n        this.quill.scrollIntoView();\n      }\n    },\n    'header enter': {\n      key: 'enter',\n      collapsed: true,\n      format: ['header'],\n      suffix: /^$/,\n      handler: function handler(range, context) {\n        var _this$quill$getLine13 = this.quill.getLine(range.index),\n            _this$quill$getLine14 = _slicedToArray(_this$quill$getLine13, 2),\n            line = _this$quill$getLine14[0],\n            offset = _this$quill$getLine14[1];\n\n        var delta = new Delta_default.a().retain(range.index).insert('\\n', context.format).retain(line.length() - offset - 1).retain(1, {\n          header: null\n        });\n        this.quill.updateContents(delta, core_quill[\"a\" /* default */].sources.USER);\n        this.quill.setSelection(range.index + 1, core_quill[\"a\" /* default */].sources.SILENT);\n        this.quill.scrollIntoView();\n      }\n    },\n    'list autofill': {\n      key: 'space',\n      shiftKey: null,\n      collapsed: true,\n      format: {\n        'code-block': false,\n        blockquote: false,\n        table: false\n      },\n      prefix: /^\\s*?(\\d+\\.|-|\\*|\\[ ?\\]|\\[x\\])$/,\n      handler: function handler(range, context) {\n        if (this.quill.scroll.query('list') == null) return true;\n        var length = context.prefix.length;\n\n        var _this$quill$getLine15 = this.quill.getLine(range.index),\n            _this$quill$getLine16 = _slicedToArray(_this$quill$getLine15, 2),\n            line = _this$quill$getLine16[0],\n            offset = _this$quill$getLine16[1];\n\n        if (offset > length) return true;\n        var value;\n\n        switch (context.prefix.trim()) {\n          case '[]':\n          case '[ ]':\n            value = 'unchecked';\n            break;\n\n          case '[x]':\n            value = 'checked';\n            break;\n\n          case '-':\n          case '*':\n            value = 'bullet';\n            break;\n\n          default:\n            value = 'ordered';\n        }\n\n        this.quill.insertText(range.index, ' ', core_quill[\"a\" /* default */].sources.USER);\n        this.quill.history.cutoff();\n        var delta = new Delta_default.a().retain(range.index - offset).delete(length + 1).retain(line.length() - 2 - offset).retain(1, {\n          list: value\n        });\n        this.raiseOnKeydownCallback(context.event);\n        this.quill.updateContents(delta, core_quill[\"a\" /* default */].sources.USER);\n        this.quill.history.cutoff();\n        this.quill.setSelection(range.index - length, core_quill[\"a\" /* default */].sources.SILENT);\n        return false;\n      }\n    },\n    'code exit': {\n      key: 'enter',\n      collapsed: true,\n      format: ['code-block'],\n      prefix: /^$/,\n      suffix: /^\\s*$/,\n      handler: function handler(range) {\n        var _this$quill$getLine17 = this.quill.getLine(range.index),\n            _this$quill$getLine18 = _slicedToArray(_this$quill$getLine17, 2),\n            line = _this$quill$getLine18[0],\n            offset = _this$quill$getLine18[1];\n\n        var numLines = 2;\n        var cur = line;\n\n        while (cur != null && cur.length() <= 1 && cur.formats()['code-block']) {\n          cur = cur.prev;\n          numLines -= 1; // Requisite prev lines are empty\n\n          if (numLines <= 0) {\n            var delta = new Delta_default.a().retain(range.index + line.length() - offset - 2).retain(1, {\n              'code-block': null\n            }).delete(1);\n            this.quill.updateContents(delta, core_quill[\"a\" /* default */].sources.USER);\n            this.quill.setSelection(range.index - 1, core_quill[\"a\" /* default */].sources.SILENT);\n            return false;\n          }\n        }\n\n        return true;\n      }\n    },\n    'embed left': makeEmbedArrowHandler('leftArrow', false),\n    'embed left shift': makeEmbedArrowHandler('leftArrow', true),\n    'embed right': makeEmbedArrowHandler('rightArrow', false),\n    'embed right shift': makeEmbedArrowHandler('rightArrow', true)\n  }\n};\n\nfunction makeCodeBlockHandler(indent) {\n  return {\n    key: 'tab',\n    shiftKey: !indent,\n    format: {\n      'code-block': true\n    },\n    handler: function handler(range) {\n      var CodeBlock = this.quill.scroll.query('code-block');\n      var lines = range.length === 0 ? this.quill.getLines(range.index, 1) : this.quill.getLines(range);\n      var index = range.index,\n          length = range.length;\n      lines.forEach(function (line, i) {\n        if (indent) {\n          line.insertAt(0, CodeBlock.TAB);\n\n          if (i === 0) {\n            index += CodeBlock.TAB.length;\n          } else {\n            length += CodeBlock.TAB.length;\n          }\n        } else if (line.domNode.textContent.indexOf(CodeBlock.TAB) === 0) {\n          line.deleteAt(0, CodeBlock.TAB.length);\n\n          if (i === 0) {\n            index -= CodeBlock.TAB.length;\n          } else {\n            length -= CodeBlock.TAB.length;\n          }\n        }\n      });\n      this.quill.update(core_quill[\"a\" /* default */].sources.USER);\n      this.quill.setSelection(index, length, core_quill[\"a\" /* default */].sources.SILENT);\n    }\n  };\n}\n\nfunction makeEmbedArrowHandler(key, shiftKey) {\n  var _ref4;\n\n  var where = key === 'leftArrow' ? 'prefix' : 'suffix';\n  return _ref4 = {\n    key: key,\n    shiftKey: shiftKey,\n    altKey: null\n  }, _defineProperty(_ref4, where, /^$/), _defineProperty(_ref4, \"handler\", function handler(range) {\n    var index = range.index;\n\n    if (key === 'rightArrow') {\n      index += range.length + 1;\n    }\n\n    var _this$quill$getLeaf = this.quill.getLeaf(index),\n        _this$quill$getLeaf2 = _slicedToArray(_this$quill$getLeaf, 1),\n        leaf = _this$quill$getLeaf2[0];\n\n    if (!(leaf instanceof parchment[\"EmbedBlot\"])) return true;\n\n    if (key === 'leftArrow') {\n      if (shiftKey) {\n        this.quill.setSelection(range.index - 1, range.length + 1, core_quill[\"a\" /* default */].sources.USER);\n      } else {\n        this.quill.setSelection(range.index - 1, core_quill[\"a\" /* default */].sources.USER);\n      }\n    } else if (shiftKey) {\n      this.quill.setSelection(range.index, range.length + 1, core_quill[\"a\" /* default */].sources.USER);\n    } else {\n      this.quill.setSelection(range.index + range.length + 1, core_quill[\"a\" /* default */].sources.USER);\n    }\n\n    return false;\n  }), _ref4;\n}\n\nfunction makeFormatHandler(format, which) {\n  return {\n    key: format[0],\n    which: which,\n    shortKey: true,\n    handler: function handler(range, context) {\n      this.quill.format(format, !context.format[format], core_quill[\"a\" /* default */].sources.USER);\n      return {\n        preventAfterAllMatches: true\n      };\n    }\n  };\n}\n\nfunction normalize(binding) {\n  if (typeof binding === 'string' || typeof binding === 'number') {\n    binding = {\n      key: binding\n    };\n  } else if (_typeof(binding) === 'object') {\n    binding = lodash_clonedeep_default()(binding);\n  } else {\n    return null;\n  }\n\n  if (binding.shortKey) {\n    binding[SHORTKEY] = binding.shortKey;\n    delete binding.shortKey;\n  }\n\n  return binding;\n}\n\nfunction deleteRange(_ref5) {\n  var quill = _ref5.quill,\n      range = _ref5.range;\n  var lines = quill.getLines(range);\n  var formats = {};\n\n  if (lines.length > 1) {\n    var firstFormats = lines[0].formats();\n    var lastFormats = lines[lines.length - 1].formats();\n    formats = Delta[\"AttributeMap\"].diff(lastFormats, firstFormats) || {};\n  }\n\n  quill.deleteText(range, core_quill[\"a\" /* default */].sources.USER);\n\n  if (Object.keys(formats).length > 0) {\n    quill.formatLine(range.index, 1, formats, core_quill[\"a\" /* default */].sources.USER);\n  }\n\n  quill.setSelection(range.index, core_quill[\"a\" /* default */].sources.SILENT);\n}\n\n\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar global = __webpack_require__(10);\nvar shared = __webpack_require__(92);\nvar hasOwn = __webpack_require__(33);\nvar uid = __webpack_require__(93);\nvar NATIVE_SYMBOL = __webpack_require__(94);\nvar USE_SYMBOL_AS_UID = __webpack_require__(95);\n\nvar WellKnownSymbolsStore = shared('wks');\nvar Symbol = global.Symbol;\nvar symbolFor = Symbol && Symbol['for'];\nvar createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol : Symbol && Symbol.withoutSetter || uid;\n\nmodule.exports = function (name) {\n  if (!hasOwn(WellKnownSymbolsStore, name) || !(NATIVE_SYMBOL || typeof WellKnownSymbolsStore[name] == 'string')) {\n    var description = 'Symbol.' + name;\n    if (NATIVE_SYMBOL && hasOwn(Symbol, name)) {\n      WellKnownSymbolsStore[name] = Symbol[name];\n    } else if (USE_SYMBOL_AS_UID && symbolFor) {\n      WellKnownSymbolsStore[name] = symbolFor(description);\n    } else {\n      WellKnownSymbolsStore[name] = createWellKnownSymbol(description);\n    }\n  } return WellKnownSymbolsStore[name];\n};\n\n\n/***/ }),\n/* 28 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return Clipboard; });\n/* unused harmony export matchAttributor */\n/* unused harmony export matchBlot */\n/* unused harmony export matchNewline */\n/* unused harmony export matchText */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return traverse; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return applyFormat; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return deltaEndsWith; });\n/* harmony import */ var quill_delta__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);\n/* harmony import */ var quill_delta__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(quill_delta__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var parchment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);\n/* harmony import */ var _blots_block__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(6);\n/* harmony import */ var _core_quill__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(0);\n/* harmony import */ var _core_logger__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(23);\n/* harmony import */ var _core_module__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(14);\n/* harmony import */ var _formats_align__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(35);\n/* harmony import */ var _formats_background__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(42);\n/* harmony import */ var _formats_code__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(19);\n/* harmony import */ var _formats_color__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(31);\n/* harmony import */ var _formats_direction__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(32);\n/* harmony import */ var _formats_font__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(43);\n/* harmony import */ var _formats_size__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(44);\n/* harmony import */ var _keyboard__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(26);\n/* harmony import */ var _utils_capitalize__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(30);\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar debug = Object(_core_logger__WEBPACK_IMPORTED_MODULE_4__[/* default */ \"a\"])('quill:clipboard');\nvar ELEMENT_NODE = 1;\nvar TEXT_NODE = 3;\nvar CLIPBOARD_CONFIG = [[TEXT_NODE, matchText], [TEXT_NODE, matchNewline], ['br', matchBreak], [ELEMENT_NODE, matchNewline], [ELEMENT_NODE, matchBlot], [ELEMENT_NODE, matchAttributor], [ELEMENT_NODE, matchStyles], ['li', matchIndent], ['ol, ul', matchList], ['pre', matchCodeBlock], ['b', matchAlias.bind(matchAlias, 'bold')], ['i', matchAlias.bind(matchAlias, 'italic')], ['strike', matchAlias.bind(matchAlias, 'strike')], ['style', matchIgnore]];\nvar HTML_TEXT_MATCHERS = [matchText, matchNewline];\nvar ATTRIBUTE_ATTRIBUTORS = [_formats_align__WEBPACK_IMPORTED_MODULE_6__[/* AlignAttribute */ \"a\"], _formats_direction__WEBPACK_IMPORTED_MODULE_10__[/* DirectionAttribute */ \"a\"]].reduce(function (memo, attr) {\n  memo[attr.keyName] = attr;\n  return memo;\n}, {});\nvar STYLE_ATTRIBUTORS = [_formats_align__WEBPACK_IMPORTED_MODULE_6__[/* AlignStyle */ \"c\"], _formats_background__WEBPACK_IMPORTED_MODULE_7__[/* BackgroundStyle */ \"b\"], _formats_color__WEBPACK_IMPORTED_MODULE_9__[/* ColorStyle */ \"c\"], _formats_direction__WEBPACK_IMPORTED_MODULE_10__[/* DirectionStyle */ \"c\"], _formats_font__WEBPACK_IMPORTED_MODULE_11__[/* FontStyle */ \"b\"], _formats_size__WEBPACK_IMPORTED_MODULE_12__[/* SizeStyle */ \"b\"]].reduce(function (memo, attr) {\n  memo[attr.keyName] = attr;\n  return memo;\n}, {});\n\nvar Clipboard = /*#__PURE__*/function (_Module) {\n  _inherits(Clipboard, _Module);\n\n  var _super = _createSuper(Clipboard);\n\n  function Clipboard(quill, options) {\n    var _options$tableBlots;\n\n    var _this;\n\n    _classCallCheck(this, Clipboard);\n\n    _this = _super.call(this, quill, options);\n\n    _this.quill.root.addEventListener('copy', function (e) {\n      return _this.onCaptureCopy(e, false);\n    });\n\n    _this.quill.root.addEventListener('cut', function (e) {\n      return _this.onCaptureCopy(e, true);\n    });\n\n    _this.quill.root.addEventListener('paste', _this.onCapturePaste.bind(_assertThisInitialized(_this)));\n\n    _this.matchers = [];\n    _this.tableBlots = (_options$tableBlots = options.tableBlots) !== null && _options$tableBlots !== void 0 ? _options$tableBlots : [];\n    CLIPBOARD_CONFIG.concat(_this.options.matchers).forEach(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          selector = _ref2[0],\n          matcher = _ref2[1];\n\n      _this.addMatcher(selector, matcher);\n    });\n    return _this;\n  }\n\n  _createClass(Clipboard, [{\n    key: \"addMatcher\",\n    value: function addMatcher(selector, matcher) {\n      this.matchers.push([selector, matcher]);\n    }\n  }, {\n    key: \"addTableBlot\",\n    value: function addTableBlot(blotName) {\n      this.tableBlots.push(blotName);\n    }\n  }, {\n    key: \"convert\",\n    value: function convert(_ref3) {\n      var html = _ref3.html,\n          text = _ref3.text;\n      var formats = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (formats[_formats_code__WEBPACK_IMPORTED_MODULE_8__[/* default */ \"c\"].blotName]) {\n        return new quill_delta__WEBPACK_IMPORTED_MODULE_0___default.a().insert(text, _defineProperty({}, _formats_code__WEBPACK_IMPORTED_MODULE_8__[/* default */ \"c\"].blotName, formats[_formats_code__WEBPACK_IMPORTED_MODULE_8__[/* default */ \"c\"].blotName]));\n      }\n\n      return html ? this.applyMatchers(html, formats) : this.applyTextMatchers(text);\n    }\n  }, {\n    key: \"applyTextMatchers\",\n    value: function applyTextMatchers() {\n      var _this2 = this;\n\n      var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n      if (text.length === 0) {\n        return new quill_delta__WEBPACK_IMPORTED_MODULE_0___default.a();\n      }\n\n      var matchers = this.prepareTextMatching();\n      var element = this.quill.root.ownerDocument.createElement('div');\n      element.textContent = text;\n      var node = element.childNodes[0];\n      return matchers.reduce(function (delta, matcher) {\n        return matcher(node, delta, _this2.quill.scroll);\n      }, new quill_delta__WEBPACK_IMPORTED_MODULE_0___default.a());\n    }\n  }, {\n    key: \"applyMatchers\",\n    value: function applyMatchers(html) {\n      var _this3 = this;\n\n      var formats = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var doc = new DOMParser().parseFromString(html, 'text/html');\n      var container = doc.body;\n      var nodeMatches = new WeakMap();\n\n      var _this$prepareMatching = this.prepareMatching(container, nodeMatches),\n          _this$prepareMatching2 = _slicedToArray(_this$prepareMatching, 2),\n          elementMatchers = _this$prepareMatching2[0],\n          textMatchers = _this$prepareMatching2[1];\n\n      var delta = traverse(this.quill.scroll, container, elementMatchers, textMatchers, nodeMatches); // Remove trailing newline\n\n      if (deltaEndsWith(delta, '\\n') && (delta.ops[delta.ops.length - 1].attributes == null || Object.values(formats).some(function (blotName) {\n        return _this3.tableBlots.includes(blotName);\n      }))) {\n        return delta.compose(new quill_delta__WEBPACK_IMPORTED_MODULE_0___default.a().retain(delta.length() - 1).delete(1));\n      }\n\n      return delta;\n    }\n  }, {\n    key: \"dangerouslyPasteHTML\",\n    value: function dangerouslyPasteHTML(index, html) {\n      var source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _core_quill__WEBPACK_IMPORTED_MODULE_3__[/* default */ \"a\"].sources.API;\n\n      if (typeof index === 'string') {\n        var delta = this.convert({\n          html: index,\n          text: ''\n        });\n        this.quill.setContents(delta, html);\n        this.quill.setSelection(0, _core_quill__WEBPACK_IMPORTED_MODULE_3__[/* default */ \"a\"].sources.SILENT);\n      } else {\n        var paste = this.convert({\n          html: html,\n          text: ''\n        });\n        this.quill.updateContents(new quill_delta__WEBPACK_IMPORTED_MODULE_0___default.a().retain(index).concat(paste), source);\n        this.quill.setSelection(index + paste.length(), _core_quill__WEBPACK_IMPORTED_MODULE_3__[/* default */ \"a\"].sources.SILENT);\n      }\n    }\n  }, {\n    key: \"onCaptureCopy\",\n    value: function onCaptureCopy(e) {\n      var isCut = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      if (e.defaultPrevented) return;\n\n      if (e.clipboardData) {\n        e.preventDefault();\n      } else {\n        return;\n      }\n\n      var _this$quill$selection = this.quill.selection.getRange(),\n          _this$quill$selection2 = _slicedToArray(_this$quill$selection, 1),\n          range = _this$quill$selection2[0];\n\n      if (range == null) return;\n\n      var _this$onCopy = this.onCopy(range, isCut),\n          html = _this$onCopy.html,\n          text = _this$onCopy.text;\n\n      e.clipboardData.setData('text/plain', text);\n      e.clipboardData.setData('text/html', html);\n\n      if (isCut) {\n        this.raiseCallback('onCut', e);\n        Object(_keyboard__WEBPACK_IMPORTED_MODULE_13__[/* deleteRange */ \"c\"])({\n          range: range,\n          quill: this.quill\n        });\n      }\n    }\n  }, {\n    key: \"onCapturePaste\",\n    value: function onCapturePaste(e) {\n      if (e.defaultPrevented || !this.quill.isEnabled()) {\n        return;\n      }\n\n      this.raiseCallback('onPaste', e);\n\n      if (e.clipboardData) {\n        e.preventDefault();\n      } else {\n        return;\n      }\n\n      var range = this.quill.getSelection(true);\n\n      if (range == null) {\n        return;\n      }\n\n      var html = e.clipboardData.getData('text/html');\n      var files = Array.from(e.clipboardData.files || []);\n\n      if (!html && files.length > 0) {\n        this.quill.uploader.upload(range, files);\n        return;\n      }\n\n      if (html && files.length > 0) {\n        var _DOMParser$parseFromS = new DOMParser().parseFromString(html, 'text/html'),\n            body = _DOMParser$parseFromS.body;\n\n        var documentContainsImage = body.childElementCount === 1 && body.firstElementChild.tagName === 'IMG';\n\n        if (documentContainsImage) {\n          this.quill.uploader.upload(range, files);\n          return;\n        }\n      }\n\n      var text = e.clipboardData.getData('text/plain');\n      this.onPaste(range, {\n        html: html,\n        text: text\n      });\n    }\n  }, {\n    key: \"raiseCallback\",\n    value: function raiseCallback(name, event) {\n      var callback = this.options[name];\n\n      if (callback && typeof callback === 'function') {\n        callback(event);\n      }\n    }\n  }, {\n    key: \"onCopy\",\n    value: function onCopy(range) {\n      var text = this.quill.getText(range);\n      var html = this.quill.getSemanticHTML(range);\n      return {\n        html: html,\n        text: text\n      };\n    }\n  }, {\n    key: \"onPaste\",\n    value: function onPaste(range, _ref4) {\n      var text = _ref4.text,\n          html = _ref4.html;\n      var formats = this.quill.getFormat(range.index);\n      var pastedDelta = this.convert({\n        text: text,\n        html: html\n      }, formats);\n      debug.log('onPaste', pastedDelta, {\n        text: text,\n        html: html\n      });\n      var delta = new quill_delta__WEBPACK_IMPORTED_MODULE_0___default.a().retain(range.index).delete(range.length).concat(pastedDelta);\n      this.quill.updateContents(delta, _core_quill__WEBPACK_IMPORTED_MODULE_3__[/* default */ \"a\"].sources.USER); // range.length contributes to delta.length()\n\n      this.quill.setSelection(delta.length() - range.length, _core_quill__WEBPACK_IMPORTED_MODULE_3__[/* default */ \"a\"].sources.SILENT);\n      this.quill.scrollIntoView();\n    }\n  }, {\n    key: \"prepareMatching\",\n    value: function prepareMatching(container, nodeMatches) {\n      var elementMatchers = [];\n      var textMatchers = [];\n      this.matchers.forEach(function (pair) {\n        var _pair = _slicedToArray(pair, 2),\n            selector = _pair[0],\n            matcher = _pair[1];\n\n        switch (selector) {\n          case TEXT_NODE:\n            textMatchers.push(matcher);\n            break;\n\n          case ELEMENT_NODE:\n            elementMatchers.push(matcher);\n            break;\n\n          default:\n            Array.from(container.querySelectorAll(selector)).forEach(function (node) {\n              if (nodeMatches.has(node)) {\n                var matches = nodeMatches.get(node);\n                matches.push(matcher);\n              } else {\n                nodeMatches.set(node, [matcher]);\n              }\n            });\n            break;\n        }\n      });\n      return [elementMatchers, textMatchers];\n    }\n  }, {\n    key: \"prepareTextMatching\",\n    value: function prepareTextMatching() {\n      var textMatchers = [matchPlainText];\n      this.matchers.forEach(function (pair) {\n        var _pair2 = _slicedToArray(pair, 2),\n            selector = _pair2[0],\n            matcher = _pair2[1];\n\n        if (HTML_TEXT_MATCHERS.indexOf(matcher) === -1 && selector === TEXT_NODE) {\n          textMatchers.push(matcher);\n        }\n      });\n      return textMatchers;\n    }\n  }]);\n\n  return Clipboard;\n}(_core_module__WEBPACK_IMPORTED_MODULE_5__[/* default */ \"a\"]);\n\nClipboard.DEFAULTS = {\n  matchers: []\n};\n\nfunction applyFormat(delta, format, value) {\n  if (_typeof(format) === 'object') {\n    return Object.keys(format).reduce(function (newDelta, key) {\n      return applyFormat(newDelta, key, format[key]);\n    }, delta);\n  }\n\n  return delta.reduce(function (newDelta, op) {\n    if (op.attributes && op.attributes[format]) {\n      return newDelta.push(op);\n    }\n\n    var formats = value ? _defineProperty({}, format, value) : {};\n    return newDelta.insert(op.insert, _objectSpread(_objectSpread({}, formats), op.attributes));\n  }, new quill_delta__WEBPACK_IMPORTED_MODULE_0___default.a());\n}\n\nfunction deltaEndsWith(delta, text) {\n  var endText = '';\n\n  for (var i = delta.ops.length - 1; i >= 0 && endText.length < text.length; --i // eslint-disable-line no-plusplus\n  ) {\n    var op = delta.ops[i];\n    if (typeof op.insert !== 'string') break;\n    endText = op.insert + endText;\n  }\n\n  return endText.slice(-1 * text.length) === text;\n}\n\nfunction isLine(node) {\n  if (node.childNodes.length === 0) return false; // Exclude embed blocks\n\n  return ['address', 'article', 'blockquote', 'canvas', 'dd', 'div', 'dl', 'dt', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'iframe', 'li', 'main', 'nav', 'ol', 'output', 'p', 'pre', 'section', 'table', 'td', 'tr', 'ul', 'video'].indexOf(node.tagName.toLowerCase()) !== -1;\n}\n\nvar preNodes = new WeakMap();\n\nfunction isPre(node) {\n  if (node == null) return false;\n\n  if (!preNodes.has(node)) {\n    if (node.tagName === 'PRE') {\n      preNodes.set(node, true);\n    } else {\n      preNodes.set(node, isPre(node.parentNode));\n    }\n  }\n\n  return preNodes.get(node);\n}\n\nfunction traverse(scroll, node, elementMatchers, textMatchers, nodeMatches) {\n  // Post-order\n  if (node.nodeType === node.TEXT_NODE) {\n    return textMatchers.reduce(function (delta, matcher) {\n      return matcher(node, delta, scroll);\n    }, new quill_delta__WEBPACK_IMPORTED_MODULE_0___default.a());\n  }\n\n  if (node.nodeType === node.ELEMENT_NODE) {\n    return Array.from(node.childNodes || []).reduce(function (delta, childNode) {\n      var childrenDelta = traverse(scroll, childNode, elementMatchers, textMatchers, nodeMatches);\n\n      if (childNode.nodeType === node.ELEMENT_NODE) {\n        childrenDelta = elementMatchers.reduce(function (reducedDelta, matcher) {\n          return matcher(childNode, reducedDelta, scroll);\n        }, childrenDelta);\n        childrenDelta = (nodeMatches.get(childNode) || []).reduce(function (reducedDelta, matcher) {\n          return matcher(childNode, reducedDelta, scroll);\n        }, childrenDelta);\n      }\n\n      return delta.concat(childrenDelta);\n    }, new quill_delta__WEBPACK_IMPORTED_MODULE_0___default.a());\n  }\n\n  return new quill_delta__WEBPACK_IMPORTED_MODULE_0___default.a();\n}\n\nfunction matchAlias(format, node, delta) {\n  return applyFormat(delta, format, true);\n}\n\nfunction matchAttributor(node, delta, scroll) {\n  if (['TD', 'TH', 'TABLE'].indexOf(node.tagName) === -1) {\n    var attributes = parchment__WEBPACK_IMPORTED_MODULE_1__[\"Attributor\"].keys(node);\n    var classes = parchment__WEBPACK_IMPORTED_MODULE_1__[\"ClassAttributor\"].keys(node);\n    var styles = parchment__WEBPACK_IMPORTED_MODULE_1__[\"StyleAttributor\"].keys(node);\n    var formats = {};\n    attributes.concat(classes).concat(styles).forEach(function (name) {\n      var attr = scroll.query(name, parchment__WEBPACK_IMPORTED_MODULE_1__[\"Scope\"].ATTRIBUTE);\n\n      if (attr != null) {\n        formats[attr.attrName] = attr.value(node);\n        if (formats[attr.attrName]) return;\n      }\n\n      attr = ATTRIBUTE_ATTRIBUTORS[name];\n\n      if (attr != null && (attr.attrName === name || attr.keyName === name)) {\n        formats[attr.attrName] = attr.value(node) || undefined;\n      }\n\n      attr = STYLE_ATTRIBUTORS[name];\n\n      if (attr != null && (attr.attrName === name || attr.keyName === name)) {\n        attr = STYLE_ATTRIBUTORS[name];\n        formats[attr.attrName] = attr.value(node) || undefined;\n      }\n    });\n\n    if (Object.keys(formats).length > 0) {\n      return applyFormat(delta, formats);\n    }\n  }\n\n  return delta;\n}\n\nfunction matchBlot(node, delta, scroll) {\n  var match = scroll.query(node);\n  if (match == null) return delta;\n\n  if (match.prototype instanceof parchment__WEBPACK_IMPORTED_MODULE_1__[\"EmbedBlot\"]) {\n    var embed = {};\n    var value = match.value(node);\n\n    if (value != null) {\n      embed[match.blotName] = value;\n      return new quill_delta__WEBPACK_IMPORTED_MODULE_0___default.a().insert(embed, match.formats(node, scroll));\n    }\n  } else {\n    if (match.prototype instanceof parchment__WEBPACK_IMPORTED_MODULE_1__[\"BlockBlot\"] && !deltaEndsWith(delta, '\\n')) {\n      delta.insert('\\n');\n    }\n\n    if (typeof match.formats === 'function') {\n      return applyFormat(delta, match.blotName, match.formats(node, scroll));\n    }\n  }\n\n  return delta;\n}\n\nfunction matchBreak(node, delta) {\n  if (!deltaEndsWith(delta, '\\n')) {\n    delta.insert('\\n');\n  }\n\n  return delta;\n}\n\nfunction matchCodeBlock(node, delta, scroll) {\n  var match = scroll.query('code-block');\n  var language = match ? match.formats(node, scroll) : true;\n  return applyFormat(delta, 'code-block', language);\n}\n\nfunction matchIgnore() {\n  return new quill_delta__WEBPACK_IMPORTED_MODULE_0___default.a();\n}\n\nfunction matchIndent(node, delta, scroll) {\n  var match = scroll.query(node);\n\n  if (match == null || match.blotName !== 'list' || !deltaEndsWith(delta, '\\n')) {\n    return delta;\n  }\n\n  var indent = -1;\n  var parent = node.parentNode;\n\n  while (parent != null) {\n    if (['OL', 'UL'].indexOf(parent.tagName) !== -1) {\n      indent += 1;\n    }\n\n    parent = parent.parentNode;\n  }\n\n  if (indent <= 0) return delta;\n  return delta.reduce(function (composed, op) {\n    if (op.attributes && typeof op.attributes.indent === 'number') {\n      return composed.push(op);\n    }\n\n    return composed.insert(op.insert, _objectSpread({\n      indent: indent\n    }, op.attributes || {}));\n  }, new quill_delta__WEBPACK_IMPORTED_MODULE_0___default.a());\n}\n\nfunction matchList(node, delta) {\n  var list = node.tagName === 'OL' ? 'ordered' : 'bullet';\n  return applyFormat(delta, 'list', list);\n}\n\nfunction matchNewline(node, delta, scroll) {\n  if (!deltaEndsWith(delta, '\\n')) {\n    if (isLine(node)) {\n      return delta.insert('\\n');\n    }\n\n    if (delta.length() > 0 && node.nextSibling) {\n      var nextSibling = node.nextSibling;\n\n      while (nextSibling != null) {\n        if (isLine(nextSibling)) {\n          return delta.insert('\\n');\n        }\n\n        var match = scroll.query(nextSibling);\n\n        if ((match === null || match === void 0 ? void 0 : match.prototype) instanceof _blots_block__WEBPACK_IMPORTED_MODULE_2__[/* BlockEmbed */ \"a\"]) {\n          return delta.insert('\\n');\n        }\n\n        nextSibling = nextSibling.firstChild;\n      }\n    }\n  }\n\n  return delta;\n}\n\nfunction matchStyles(node, delta) {\n  var formats = {};\n  var style = node.style || {};\n  ['height', 'width'].forEach(function (dimension) {\n    var isCell = ['TD', 'TH'].indexOf(node.tagName) !== -1;\n    var isTable = node.tagName === 'TABLE';\n\n    if ((isCell || isTable) && style[dimension]) {\n      var name = \"\".concat(isTable ? 'table' : 'cell').concat(Object(_utils_capitalize__WEBPACK_IMPORTED_MODULE_14__[/* default */ \"a\"])(dimension));\n      formats[name] = style[dimension];\n    }\n  });\n\n  if (style.fontStyle === 'italic') {\n    formats.italic = true;\n  }\n\n  if (style.textDecoration.indexOf('underline') !== -1) {\n    formats.underline = true;\n  }\n\n  if (style.textDecoration.indexOf('line-through') !== -1) {\n    formats.strike = true;\n  }\n\n  if (style.fontWeight.indexOf('bold') === 0 || parseInt(style.fontWeight, 10) >= 700) {\n    formats.bold = true;\n  }\n\n  if (Object.keys(formats).length > 0) {\n    delta = applyFormat(delta, formats);\n  }\n\n  if (parseFloat(style.textIndent || 0) > 0) {\n    // Could be 0.5in\n    return new quill_delta__WEBPACK_IMPORTED_MODULE_0___default.a().insert('\\t').concat(delta);\n  }\n\n  return delta;\n}\n\nfunction matchPlainText(node, delta) {\n  var text = node.data || '';\n  text = text.replace(/\\r\\n/g, '\\n');\n  return delta.insert(text);\n}\n\nfunction matchText(node, delta) {\n  var text = node.data; // Word represents empty line with <o:p>&nbsp;</o:p>\n\n  if (node.parentNode.tagName === 'O:P') {\n    return delta.insert(text.trim());\n  }\n\n  if (text.trim().length === 0 && text.indexOf('\\n') !== -1) {\n    return delta;\n  }\n\n  if (!isPre(node)) {\n    var replacer = function replacer(collapse, match) {\n      var replaced = match.replace(/[^\\u00a0]/g, ''); // \\u00a0 is nbsp;\n\n      return replaced.length < 1 && collapse ? ' ' : replaced;\n    };\n\n    text = text.replace(/\\r\\n/g, ' ').replace(/\\n/g, ' ');\n    text = text.replace(/\\s\\s+/g, replacer.bind(replacer, true)); // collapse whitespace\n\n    if (node.previousSibling == null && isLine(node.parentNode) || node.previousSibling != null && isLine(node.previousSibling)) {\n      text = text.replace(/^\\s+/, replacer.bind(replacer, false));\n    }\n\n    if (node.nextSibling == null && isLine(node.parentNode) || node.nextSibling != null && isLine(node.nextSibling)) {\n      text = text.replace(/\\s+$/, replacer.bind(replacer, false));\n    }\n  }\n\n  return delta.insert(text);\n}\n\n\n\n/***/ }),\n/* 29 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(global, module) {/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports =   true && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = isEqual;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(54), __webpack_require__(61)(module)))\n\n/***/ }),\n/* 30 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return capitalize; });\nfunction capitalize(text) {\n  return text ? text.substring(0, 1).toUpperCase() + text.substring(1) : '';\n}\n\n/***/ }),\n/* 31 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return ColorAttributor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return ColorClass; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return ColorStyle; });\n/* harmony import */ var parchment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n\n\nvar ColorAttributor = /*#__PURE__*/function (_StyleAttributor) {\n  _inherits(ColorAttributor, _StyleAttributor);\n\n  var _super = _createSuper(ColorAttributor);\n\n  function ColorAttributor() {\n    _classCallCheck(this, ColorAttributor);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ColorAttributor, [{\n    key: \"value\",\n    value: function value(domNode) {\n      var value = _get(_getPrototypeOf(ColorAttributor.prototype), \"value\", this).call(this, domNode);\n\n      if (value.indexOf('rgb(') !== 0) return value;\n      value = value.replace(/^[^\\d]+/, '').replace(/[^\\d]+$/, '');\n      var hex = value.split(',').map(function (component) {\n        return \"00\".concat(parseInt(component, 10).toString(16)).slice(-2);\n      }).join('');\n      return \"#\".concat(hex);\n    }\n  }]);\n\n  return ColorAttributor;\n}(parchment__WEBPACK_IMPORTED_MODULE_0__[\"StyleAttributor\"]);\n\nvar ColorClass = new parchment__WEBPACK_IMPORTED_MODULE_0__[\"ClassAttributor\"]('color', 'ql-color', {\n  scope: parchment__WEBPACK_IMPORTED_MODULE_0__[\"Scope\"].INLINE\n});\nvar ColorStyle = new ColorAttributor('color', 'color', {\n  scope: parchment__WEBPACK_IMPORTED_MODULE_0__[\"Scope\"].INLINE\n});\n\n\n/***/ }),\n/* 32 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return DirectionAttribute; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return DirectionClass; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return DirectionStyle; });\n/* harmony import */ var parchment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);\n\nvar config = {\n  scope: parchment__WEBPACK_IMPORTED_MODULE_0__[\"Scope\"].BLOCK,\n  whitelist: ['rtl']\n};\nvar DirectionAttribute = new parchment__WEBPACK_IMPORTED_MODULE_0__[\"Attributor\"]('direction', 'dir', config);\nvar DirectionClass = new parchment__WEBPACK_IMPORTED_MODULE_0__[\"ClassAttributor\"]('direction', 'ql-direction', config);\nvar DirectionStyle = new parchment__WEBPACK_IMPORTED_MODULE_0__[\"StyleAttributor\"]('direction', 'direction', config);\n\n\n/***/ }),\n/* 33 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar uncurryThis = __webpack_require__(21);\nvar toObject = __webpack_require__(64);\n\nvar hasOwnProperty = uncurryThis({}.hasOwnProperty);\n\n// `HasOwnProperty` abstract operation\n// https://tc39.es/ecma262/#sec-hasownproperty\nmodule.exports = Object.hasOwn || function hasOwn(it, key) {\n  return hasOwnProperty(toObject(it), key);\n};\n\n\n/***/ }),\n/* 34 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(global, module) {/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to detect hot functions by number of calls within a span of milliseconds. */\nvar HOT_COUNT = 800,\n    HOT_SPAN = 16;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports =   true && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    // Use `util.types` for Node.js 10+.\n    var types = freeModule && freeModule.require && freeModule.require('util').types;\n\n    if (types) {\n      return types;\n    }\n\n    // Legacy `process.binding('util')` for Node.js < 10.\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A faster alternative to `Function#apply`, this function invokes `func`\n * with the `this` binding of `thisArg` and the arguments of `args`.\n *\n * @private\n * @param {Function} func The function to invoke.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} args The arguments to invoke `func` with.\n * @returns {*} Returns the result of `func`.\n */\nfunction apply(func, thisArg, args) {\n  switch (args.length) {\n    case 0: return func.call(thisArg);\n    case 1: return func.call(thisArg, args[0]);\n    case 2: return func.call(thisArg, args[0], args[1]);\n    case 3: return func.call(thisArg, args[0], args[1], args[2]);\n  }\n  return func.apply(thisArg, args);\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to infer the `Object` constructor. */\nvar objectCtorString = funcToString.call(Object);\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,\n    getPrototype = overArg(Object.getPrototypeOf, Object),\n    objectCreate = Object.create,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\nvar defineProperty = (function() {\n  try {\n    var func = getNative(Object, 'defineProperty');\n    func({}, '', {});\n    return func;\n  } catch (e) {}\n}());\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeMax = Math.max,\n    nativeNow = Date.now;\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map'),\n    nativeCreate = getNative(Object, 'create');\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} proto The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nvar baseCreate = (function() {\n  function object() {}\n  return function(proto) {\n    if (!isObject(proto)) {\n      return {};\n    }\n    if (objectCreate) {\n      return objectCreate(proto);\n    }\n    object.prototype = proto;\n    var result = new object;\n    object.prototype = undefined;\n    return result;\n  };\n}());\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * This function is like `assignValue` except that it doesn't assign\n * `undefined` values.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignMergeValue(object, key, value) {\n  if ((value !== undefined && !eq(object[key], value)) ||\n      (value === undefined && !(key in object))) {\n    baseAssignValue(object, key, value);\n  }\n}\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    baseAssignValue(object, key, value);\n  }\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `assignValue` and `assignMergeValue` without\n * value checks.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction baseAssignValue(object, key, value) {\n  if (key == '__proto__' && defineProperty) {\n    defineProperty(object, key, {\n      'configurable': true,\n      'enumerable': true,\n      'value': value,\n      'writable': true\n    });\n  } else {\n    object[key] = value;\n  }\n}\n\n/**\n * The base implementation of `baseForOwn` which iterates over `object`\n * properties returned by `keysFunc` and invokes `iteratee` for each property.\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @returns {Object} Returns `object`.\n */\nvar baseFor = createBaseFor();\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeysIn(object) {\n  if (!isObject(object)) {\n    return nativeKeysIn(object);\n  }\n  var isProto = isPrototype(object),\n      result = [];\n\n  for (var key in object) {\n    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.merge` without support for multiple sources.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @param {number} srcIndex The index of `source`.\n * @param {Function} [customizer] The function to customize merged values.\n * @param {Object} [stack] Tracks traversed source values and their merged\n *  counterparts.\n */\nfunction baseMerge(object, source, srcIndex, customizer, stack) {\n  if (object === source) {\n    return;\n  }\n  baseFor(source, function(srcValue, key) {\n    stack || (stack = new Stack);\n    if (isObject(srcValue)) {\n      baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);\n    }\n    else {\n      var newValue = customizer\n        ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)\n        : undefined;\n\n      if (newValue === undefined) {\n        newValue = srcValue;\n      }\n      assignMergeValue(object, key, newValue);\n    }\n  }, keysIn);\n}\n\n/**\n * A specialized version of `baseMerge` for arrays and objects which performs\n * deep merges and tracks traversed objects enabling objects with circular\n * references to be merged.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @param {string} key The key of the value to merge.\n * @param {number} srcIndex The index of `source`.\n * @param {Function} mergeFunc The function to merge values.\n * @param {Function} [customizer] The function to customize assigned values.\n * @param {Object} [stack] Tracks traversed source values and their merged\n *  counterparts.\n */\nfunction baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n  var objValue = safeGet(object, key),\n      srcValue = safeGet(source, key),\n      stacked = stack.get(srcValue);\n\n  if (stacked) {\n    assignMergeValue(object, key, stacked);\n    return;\n  }\n  var newValue = customizer\n    ? customizer(objValue, srcValue, (key + ''), object, source, stack)\n    : undefined;\n\n  var isCommon = newValue === undefined;\n\n  if (isCommon) {\n    var isArr = isArray(srcValue),\n        isBuff = !isArr && isBuffer(srcValue),\n        isTyped = !isArr && !isBuff && isTypedArray(srcValue);\n\n    newValue = srcValue;\n    if (isArr || isBuff || isTyped) {\n      if (isArray(objValue)) {\n        newValue = objValue;\n      }\n      else if (isArrayLikeObject(objValue)) {\n        newValue = copyArray(objValue);\n      }\n      else if (isBuff) {\n        isCommon = false;\n        newValue = cloneBuffer(srcValue, true);\n      }\n      else if (isTyped) {\n        isCommon = false;\n        newValue = cloneTypedArray(srcValue, true);\n      }\n      else {\n        newValue = [];\n      }\n    }\n    else if (isPlainObject(srcValue) || isArguments(srcValue)) {\n      newValue = objValue;\n      if (isArguments(objValue)) {\n        newValue = toPlainObject(objValue);\n      }\n      else if (!isObject(objValue) || isFunction(objValue)) {\n        newValue = initCloneObject(srcValue);\n      }\n    }\n    else {\n      isCommon = false;\n    }\n  }\n  if (isCommon) {\n    // Recursively merge objects and arrays (susceptible to call stack limits).\n    stack.set(srcValue, newValue);\n    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\n    stack['delete'](srcValue);\n  }\n  assignMergeValue(object, key, newValue);\n}\n\n/**\n * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @returns {Function} Returns the new function.\n */\nfunction baseRest(func, start) {\n  return setToString(overRest(func, start, identity), func + '');\n}\n\n/**\n * The base implementation of `setToString` without support for hot loop shorting.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar baseSetToString = !defineProperty ? identity : function(func, string) {\n  return defineProperty(func, 'toString', {\n    'configurable': true,\n    'enumerable': false,\n    'value': constant(string),\n    'writable': true\n  });\n};\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var length = buffer.length,\n      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\n\n  buffer.copy(result);\n  return result;\n}\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\n/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  var isNew = !object;\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    if (newValue === undefined) {\n      newValue = source[key];\n    }\n    if (isNew) {\n      baseAssignValue(object, key, newValue);\n    } else {\n      assignValue(object, key, newValue);\n    }\n  }\n  return object;\n}\n\n/**\n * Creates a function like `_.assign`.\n *\n * @private\n * @param {Function} assigner The function to assign values.\n * @returns {Function} Returns the new assigner function.\n */\nfunction createAssigner(assigner) {\n  return baseRest(function(object, sources) {\n    var index = -1,\n        length = sources.length,\n        customizer = length > 1 ? sources[length - 1] : undefined,\n        guard = length > 2 ? sources[2] : undefined;\n\n    customizer = (assigner.length > 3 && typeof customizer == 'function')\n      ? (length--, customizer)\n      : undefined;\n\n    if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n      customizer = length < 3 ? undefined : customizer;\n      length = 1;\n    }\n    object = Object(object);\n    while (++index < length) {\n      var source = sources[index];\n      if (source) {\n        assigner(object, source, index, customizer);\n      }\n    }\n    return object;\n  });\n}\n\n/**\n * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseFor(fromRight) {\n  return function(object, iteratee, keysFunc) {\n    var index = -1,\n        iterable = Object(object),\n        props = keysFunc(object),\n        length = props.length;\n\n    while (length--) {\n      var key = props[fromRight ? length : ++index];\n      if (iteratee(iterable[key], key, iterable) === false) {\n        break;\n      }\n    }\n    return object;\n  };\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  var type = typeof value;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n\n  return !!length &&\n    (type == 'number' ||\n      (type != 'symbol' && reIsUint.test(value))) &&\n        (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if the given arguments are from an iteratee call.\n *\n * @private\n * @param {*} value The potential iteratee value argument.\n * @param {*} index The potential iteratee index or key argument.\n * @param {*} object The potential iteratee object argument.\n * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n *  else `false`.\n */\nfunction isIterateeCall(value, index, object) {\n  if (!isObject(object)) {\n    return false;\n  }\n  var type = typeof index;\n  if (type == 'number'\n        ? (isArrayLike(object) && isIndex(index, object.length))\n        : (type == 'string' && index in object)\n      ) {\n    return eq(object[index], value);\n  }\n  return false;\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * This function is like\n * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * except that it includes inherited enumerable properties.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction nativeKeysIn(object) {\n  var result = [];\n  if (object != null) {\n    for (var key in Object(object)) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * A specialized version of `baseRest` which transforms the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @param {Function} transform The rest array transform.\n * @returns {Function} Returns the new function.\n */\nfunction overRest(func, start, transform) {\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        array = Array(length);\n\n    while (++index < length) {\n      array[index] = args[start + index];\n    }\n    index = -1;\n    var otherArgs = Array(start + 1);\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = transform(array);\n    return apply(func, this, otherArgs);\n  };\n}\n\n/**\n * Gets the value at `key`, unless `key` is \"__proto__\" or \"constructor\".\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction safeGet(object, key) {\n  if (key === 'constructor' && typeof object[key] === 'function') {\n    return;\n  }\n\n  if (key == '__proto__') {\n    return;\n  }\n\n  return object[key];\n}\n\n/**\n * Sets the `toString` method of `func` to return `string`.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar setToString = shortOut(baseSetToString);\n\n/**\n * Creates a function that'll short out and invoke `identity` instead\n * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n * milliseconds.\n *\n * @private\n * @param {Function} func The function to restrict.\n * @returns {Function} Returns the new shortable function.\n */\nfunction shortOut(func) {\n  var count = 0,\n      lastCalled = 0;\n\n  return function() {\n    var stamp = nativeNow(),\n        remaining = HOT_SPAN - (stamp - lastCalled);\n\n    lastCalled = stamp;\n    if (remaining > 0) {\n      if (++count >= HOT_COUNT) {\n        return arguments[0];\n      }\n    } else {\n      count = 0;\n    }\n    return func.apply(undefined, arguments);\n  };\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */\nfunction isPlainObject(value) {\n  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {\n    return false;\n  }\n  var proto = getPrototype(value);\n  if (proto === null) {\n    return true;\n  }\n  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n  return typeof Ctor == 'function' && Ctor instanceof Ctor &&\n    funcToString.call(Ctor) == objectCtorString;\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Converts `value` to a plain object flattening inherited enumerable string\n * keyed properties of `value` to own properties of the plain object.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {Object} Returns the converted plain object.\n * @example\n *\n * function Foo() {\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.assign({ 'a': 1 }, new Foo);\n * // => { 'a': 1, 'b': 2 }\n *\n * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));\n * // => { 'a': 1, 'b': 2, 'c': 3 }\n */\nfunction toPlainObject(value) {\n  return copyObject(value, keysIn(value));\n}\n\n/**\n * Creates an array of the own and inherited enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keysIn(new Foo);\n * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n */\nfunction keysIn(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n}\n\n/**\n * This method is like `_.assign` except that it recursively merges own and\n * inherited enumerable string keyed properties of source objects into the\n * destination object. Source properties that resolve to `undefined` are\n * skipped if a destination value exists. Array and plain object properties\n * are merged recursively. Other objects and value types are overridden by\n * assignment. Source objects are applied from left to right. Subsequent\n * sources overwrite property assignments of previous sources.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @memberOf _\n * @since 0.5.0\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @example\n *\n * var object = {\n *   'a': [{ 'b': 2 }, { 'd': 4 }]\n * };\n *\n * var other = {\n *   'a': [{ 'c': 3 }, { 'e': 5 }]\n * };\n *\n * _.merge(object, other);\n * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }\n */\nvar merge = createAssigner(function(object, source, srcIndex) {\n  baseMerge(object, source, srcIndex);\n});\n\n/**\n * Creates a function that returns `value`.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {*} value The value to return from the new function.\n * @returns {Function} Returns the new constant function.\n * @example\n *\n * var objects = _.times(2, _.constant({ 'a': 1 }));\n *\n * console.log(objects);\n * // => [{ 'a': 1 }, { 'a': 1 }]\n *\n * console.log(objects[0] === objects[1]);\n * // => true\n */\nfunction constant(value) {\n  return function() {\n    return value;\n  };\n}\n\n/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = merge;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(54), __webpack_require__(61)(module)))\n\n/***/ }),\n/* 35 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return AlignAttribute; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return AlignClass; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return AlignStyle; });\n/* harmony import */ var parchment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);\n\nvar config = {\n  scope: parchment__WEBPACK_IMPORTED_MODULE_0__[\"Scope\"].BLOCK,\n  whitelist: ['right', 'center', 'justify']\n};\nvar AlignAttribute = new parchment__WEBPACK_IMPORTED_MODULE_0__[\"Attributor\"]('align', 'align', config);\nvar AlignClass = new parchment__WEBPACK_IMPORTED_MODULE_0__[\"ClassAttributor\"]('align', 'ql-align', config);\nvar AlignStyle = new parchment__WEBPACK_IMPORTED_MODULE_0__[\"StyleAttributor\"]('align', 'text-align', config);\n\n\n/***/ }),\n/* 36 */\n/***/ (function(module, exports) {\n\nmodule.exports = function (exec) {\n  try {\n    return !!exec();\n  } catch (error) {\n    return true;\n  }\n};\n\n\n/***/ }),\n/* 37 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar global = __webpack_require__(10);\nvar isObject = __webpack_require__(48);\n\nvar String = global.String;\nvar TypeError = global.TypeError;\n\n// `Assert: Type(argument) is Object`\nmodule.exports = function (argument) {\n  if (isObject(argument)) return argument;\n  throw TypeError(String(argument) + ' is not an object');\n};\n\n\n/***/ }),\n/* 38 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar fails = __webpack_require__(36);\n\n// Detect IE8's incomplete defineProperty implementation\nmodule.exports = !fails(function () {\n  // eslint-disable-next-line es/no-object-defineproperty -- required for testing\n  return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] != 7;\n});\n\n\n/***/ }),\n/* 39 */\n/***/ (function(module, exports) {\n\nvar call = Function.prototype.call;\n\nmodule.exports = call.bind ? call.bind(call) : function () {\n  return call.apply(call, arguments);\n};\n\n\n/***/ }),\n/* 40 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return Link; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return _sanitize; });\n/* harmony import */ var _blots_inline__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(16);\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n\n\nvar Link = /*#__PURE__*/function (_Inline) {\n  _inherits(Link, _Inline);\n\n  var _super = _createSuper(Link);\n\n  function Link() {\n    _classCallCheck(this, Link);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Link, [{\n    key: \"format\",\n    value: function format(name, value) {\n      if (name !== this.statics.blotName || !value) {\n        _get(_getPrototypeOf(Link.prototype), \"format\", this).call(this, name, value);\n      } else {\n        this.domNode.setAttribute('href', this.constructor.sanitize(value));\n      }\n    }\n  }], [{\n    key: \"create\",\n    value: function create(value) {\n      var node = _get(_getPrototypeOf(Link), \"create\", this).call(this, value);\n\n      node.setAttribute('href', this.sanitize(value));\n      node.setAttribute('rel', 'noopener noreferrer');\n      node.setAttribute('target', '_blank');\n      return node;\n    }\n  }, {\n    key: \"formats\",\n    value: function formats(domNode) {\n      return domNode.getAttribute('href');\n    }\n  }, {\n    key: \"sanitize\",\n    value: function sanitize(url) {\n      return _sanitize(url, this.PROTOCOL_WHITELIST) ? url : this.SANITIZED_URL;\n    }\n  }]);\n\n  return Link;\n}(_blots_inline__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"]);\n\nLink.blotName = 'link';\nLink.tagName = 'A';\nLink.SANITIZED_URL = 'about:blank';\nLink.PROTOCOL_WHITELIST = ['http', 'https', 'mailto', 'tel'];\n\nfunction _sanitize(url, protocols) {\n  var anchor = document.createElement('a');\n  anchor.href = url;\n  var protocol = anchor.href.slice(0, anchor.href.indexOf(':'));\n  return protocols.indexOf(protocol) > -1;\n}\n\n\n\n/***/ }),\n/* 41 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony default export */ __webpack_exports__[\"a\"] = (new WeakMap());\n\n/***/ }),\n/* 42 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return BackgroundClass; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return BackgroundStyle; });\n/* harmony import */ var parchment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);\n/* harmony import */ var _color__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(31);\n\n\nvar BackgroundClass = new parchment__WEBPACK_IMPORTED_MODULE_0__[\"ClassAttributor\"]('background', 'ql-bg', {\n  scope: parchment__WEBPACK_IMPORTED_MODULE_0__[\"Scope\"].INLINE\n});\nvar BackgroundStyle = new _color__WEBPACK_IMPORTED_MODULE_1__[/* ColorAttributor */ \"a\"]('background', 'background-color', {\n  scope: parchment__WEBPACK_IMPORTED_MODULE_0__[\"Scope\"].INLINE\n});\n\n\n/***/ }),\n/* 43 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return FontStyle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return FontClass; });\n/* harmony import */ var parchment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n\nvar config = {\n  scope: parchment__WEBPACK_IMPORTED_MODULE_0__[\"Scope\"].INLINE,\n  whitelist: ['serif', 'monospace']\n};\nvar FontClass = new parchment__WEBPACK_IMPORTED_MODULE_0__[\"ClassAttributor\"]('font', 'ql-font', config);\n\nvar FontStyleAttributor = /*#__PURE__*/function (_StyleAttributor) {\n  _inherits(FontStyleAttributor, _StyleAttributor);\n\n  var _super = _createSuper(FontStyleAttributor);\n\n  function FontStyleAttributor() {\n    _classCallCheck(this, FontStyleAttributor);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(FontStyleAttributor, [{\n    key: \"value\",\n    value: function value(node) {\n      return _get(_getPrototypeOf(FontStyleAttributor.prototype), \"value\", this).call(this, node).replace(/[\"']/g, '');\n    }\n  }]);\n\n  return FontStyleAttributor;\n}(parchment__WEBPACK_IMPORTED_MODULE_0__[\"StyleAttributor\"]);\n\nvar FontStyle = new FontStyleAttributor('font', 'font-family', config);\n\n\n/***/ }),\n/* 44 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return SizeClass; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return SizeStyle; });\n/* harmony import */ var parchment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);\n\nvar SizeClass = new parchment__WEBPACK_IMPORTED_MODULE_0__[\"ClassAttributor\"]('size', 'ql-size', {\n  scope: parchment__WEBPACK_IMPORTED_MODULE_0__[\"Scope\"].INLINE,\n  whitelist: ['small', 'large', 'huge']\n});\nvar SizeStyle = new parchment__WEBPACK_IMPORTED_MODULE_0__[\"StyleAttributor\"]('size', 'font-size', {\n  scope: parchment__WEBPACK_IMPORTED_MODULE_0__[\"Scope\"].INLINE,\n  whitelist: ['10px', '18px', '32px']\n});\n\n\n/***/ }),\n/* 45 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return toggleAttribute; });\nfunction toggleAttribute(domNode, attrName, value) {\n  if (value) {\n    domNode.setAttribute(attrName, value);\n  } else {\n    domNode.removeAttribute(attrName);\n  }\n}\n\n/***/ }),\n/* 46 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var _blots_inline__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(16);\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n\n\nvar Bold = /*#__PURE__*/function (_Inline) {\n  _inherits(Bold, _Inline);\n\n  var _super = _createSuper(Bold);\n\n  function Bold() {\n    _classCallCheck(this, Bold);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Bold, [{\n    key: \"optimize\",\n    value: function optimize(context) {\n      _get(_getPrototypeOf(Bold.prototype), \"optimize\", this).call(this, context);\n\n      if (this.domNode.tagName !== this.statics.tagName[0]) {\n        this.replaceWith(this.statics.blotName);\n      }\n    }\n  }], [{\n    key: \"create\",\n    value: function create() {\n      return _get(_getPrototypeOf(Bold), \"create\", this).call(this);\n    }\n  }, {\n    key: \"formats\",\n    value: function formats() {\n      return true;\n    }\n  }]);\n\n  return Bold;\n}(_blots_inline__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"]);\n\nBold.blotName = 'bold';\nBold.tagName = ['STRONG', 'B'];\n/* harmony default export */ __webpack_exports__[\"a\"] = (Bold);\n\n/***/ }),\n/* 47 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return History; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return getLastChangeIndex; });\n/* harmony import */ var parchment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);\n/* harmony import */ var _core_quill__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);\n/* harmony import */ var _core_module__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(14);\n/* harmony import */ var _utils_has_window__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(17);\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n\n\n\n\n\nvar History = /*#__PURE__*/function (_Module) {\n  _inherits(History, _Module);\n\n  var _super = _createSuper(History);\n\n  function History(quill, options) {\n    var _this;\n\n    _classCallCheck(this, History);\n\n    _this = _super.call(this, quill, options);\n    _this.lastRecorded = 0;\n    _this.ignoreChange = false;\n\n    _this.clear();\n\n    _this.quill.on(_core_quill__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"].events.EDITOR_CHANGE, function (eventName, delta, oldDelta, source) {\n      if (eventName !== _core_quill__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"].events.TEXT_CHANGE || _this.ignoreChange) return;\n\n      if (!_this.options.userOnly || source === _core_quill__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"].sources.USER) {\n        _this.record(delta, oldDelta);\n      } else {\n        _this.transform(delta);\n      }\n    });\n\n    _this.quill.keyboard.addBinding({\n      key: 'z',\n      shortKey: true\n    }, _this.undo.bind(_assertThisInitialized(_this)));\n\n    _this.quill.keyboard.addBinding({\n      key: 'z',\n      shortKey: true,\n      shiftKey: true\n    }, _this.redo.bind(_assertThisInitialized(_this)));\n\n    if (Object(_utils_has_window__WEBPACK_IMPORTED_MODULE_3__[/* default */ \"a\"])() && /Win/i.test(navigator.platform)) {\n      _this.quill.keyboard.addBinding({\n        key: 'y',\n        shortKey: true\n      }, _this.redo.bind(_assertThisInitialized(_this)));\n    }\n\n    _this.quill.root.addEventListener('beforeinput', function (event) {\n      if (event.inputType === 'historyUndo') {\n        _this.undo();\n\n        event.preventDefault();\n      } else if (event.inputType === 'historyRedo') {\n        _this.redo();\n\n        event.preventDefault();\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(History, [{\n    key: \"change\",\n    value: function change(source, dest) {\n      if (this.stack[source].length === 0) return;\n      var delta = this.stack[source].pop();\n      var base = this.quill.getContents();\n      var inverseDelta = delta.invert(base);\n      this.stack[dest].push(inverseDelta);\n      this.lastRecorded = 0;\n      this.ignoreChange = true;\n      this.quill.updateContents(delta, _core_quill__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"].sources.USER);\n      this.ignoreChange = false;\n      var index = getLastChangeIndex(this.quill.scroll, delta);\n      this.quill.setSelection(index);\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.stack = {\n        undo: [],\n        redo: []\n      };\n    }\n  }, {\n    key: \"cutoff\",\n    value: function cutoff() {\n      this.lastRecorded = 0;\n    }\n  }, {\n    key: \"record\",\n    value: function record(changeDelta, oldDelta) {\n      if (changeDelta.ops.length === 0) return;\n      this.stack.redo = [];\n      var undoDelta = changeDelta.invert(oldDelta);\n      var timestamp = Date.now();\n\n      if (this.lastRecorded + this.options.delay > timestamp && this.stack.undo.length > 0) {\n        var delta = this.stack.undo.pop();\n        undoDelta = undoDelta.compose(delta);\n      } else {\n        this.lastRecorded = timestamp;\n      }\n\n      if (undoDelta.length() === 0) return;\n      this.stack.undo.push(undoDelta);\n\n      if (this.stack.undo.length > this.options.maxStack) {\n        this.stack.undo.shift();\n      }\n    }\n  }, {\n    key: \"redo\",\n    value: function redo() {\n      this.change('redo', 'undo');\n    }\n  }, {\n    key: \"transform\",\n    value: function transform(delta) {\n      transformStack(this.stack.undo, delta);\n      transformStack(this.stack.redo, delta);\n    }\n  }, {\n    key: \"undo\",\n    value: function undo() {\n      this.change('undo', 'redo');\n    }\n  }]);\n\n  return History;\n}(_core_module__WEBPACK_IMPORTED_MODULE_2__[/* default */ \"a\"]);\n\nHistory.DEFAULTS = {\n  delay: 1000,\n  maxStack: 100,\n  userOnly: false\n};\n\nfunction transformStack(stack, delta) {\n  var remoteDelta = delta;\n\n  for (var i = stack.length - 1; i >= 0; i -= 1) {\n    var oldDelta = stack[i];\n    stack[i] = remoteDelta.transform(oldDelta, true);\n    remoteDelta = oldDelta.transform(remoteDelta);\n\n    if (stack[i].length() === 0) {\n      stack.splice(i, 1);\n    }\n  }\n}\n\nfunction endsWithNewlineChange(scroll, delta) {\n  var lastOp = delta.ops[delta.ops.length - 1];\n  if (lastOp == null) return false;\n\n  if (lastOp.insert != null) {\n    return typeof lastOp.insert === 'string' && lastOp.insert.endsWith('\\n');\n  }\n\n  if (lastOp.attributes != null) {\n    return Object.keys(lastOp.attributes).some(function (attr) {\n      return scroll.query(attr, parchment__WEBPACK_IMPORTED_MODULE_0__[\"Scope\"].BLOCK) != null;\n    });\n  }\n\n  return false;\n}\n\nfunction getLastChangeIndex(scroll, delta) {\n  var deleteLength = delta.reduce(function (length, op) {\n    return length + (op.delete || 0);\n  }, 0);\n  var changeIndex = delta.length() - deleteLength;\n\n  if (endsWithNewlineChange(scroll, delta)) {\n    changeIndex -= 1;\n  }\n\n  return changeIndex;\n}\n\n\n\n/***/ }),\n/* 48 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar isCallable = __webpack_require__(22);\n\nmodule.exports = function (it) {\n  return typeof it == 'object' ? it !== null : isCallable(it);\n};\n\n\n/***/ }),\n/* 49 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar global = __webpack_require__(10);\nvar DESCRIPTORS = __webpack_require__(38);\nvar IE8_DOM_DEFINE = __webpack_require__(97);\nvar anObject = __webpack_require__(37);\nvar toPropertyKey = __webpack_require__(80);\n\nvar TypeError = global.TypeError;\n// eslint-disable-next-line es/no-object-defineproperty -- safe\nvar $defineProperty = Object.defineProperty;\n\n// `Object.defineProperty` method\n// https://tc39.es/ecma262/#sec-object.defineproperty\nexports.f = DESCRIPTORS ? $defineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPropertyKey(P);\n  anObject(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return $defineProperty(O, P, Attributes);\n  } catch (error) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n\n\n/***/ }),\n/* 50 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return prepareAttributor; });\n/* harmony import */ var _attributors_element_attributor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(69);\n/* harmony import */ var _utils_capitalize__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(30);\nvar _excluded = [\"name\"];\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\nfunction prepareAttributor(_ref, attrName) {\n  var name = _ref.name,\n      elementConfig = _objectWithoutProperties(_ref, _excluded);\n\n  return new _attributors_element_attributor__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"](\"\".concat(name).concat(Object(_utils_capitalize__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"])(attrName)), attrName, elementConfig);\n}\n\n/***/ }),\n/* 51 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return makeTableArrowHandler; });\n/* harmony import */ var _core_quill__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\n\nfunction makeTableArrowHandler(up, formats) {\n  return {\n    key: up ? 'upArrow' : 'downArrow',\n    collapsed: true,\n    format: formats,\n    handler: function handler(range, context) {\n      var key = up ? 'prev' : 'next';\n      var line = context.line;\n      var cell = line.statics.blotName.indexOf('Line') > -1 ? line.parent : line;\n      var targetTablePart = cell.parent.parent[key];\n      var targetRow = cell.parent[key] || (targetTablePart === null || targetTablePart === void 0 ? void 0 : targetTablePart.children.head);\n\n      if (targetRow != null) {\n        if (targetRow.statics.blotName === 'tableRow' || targetRow.statics.blotName === 'tableHeaderRow') {\n          var targetCell = targetRow.children.head;\n          var cur = cell;\n\n          while (cur.prev != null) {\n            cur = cur.prev;\n            targetCell = targetCell.next;\n          }\n\n          var index = targetCell.offset(this.quill.scroll) + Math.min(context.offset, targetCell.length() - 1);\n          this.quill.setSelection(index, 0, _core_quill__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"].sources.USER);\n        }\n      } else {\n        var targetLine = cell.table()[key];\n\n        if (targetLine != null) {\n          if (up) {\n            this.quill.setSelection(targetLine.offset(this.quill.scroll) + targetLine.length() - 1, 0, _core_quill__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"].sources.USER);\n          } else {\n            this.quill.setSelection(targetLine.offset(this.quill.scroll), 0, _core_quill__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"].sources.USER);\n          }\n        }\n      }\n\n      return false;\n    }\n  };\n}\n\n/***/ }),\n/* 52 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return prepareAttributeMatcher; });\n/* harmony import */ var parchment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);\n/* harmony import */ var _attributors_element_attributor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(69);\n/* harmony import */ var _attributors_element_style__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(70);\n/* harmony import */ var _formats_table_attributors_cell__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(9);\n/* harmony import */ var _formats_table_attributors_table__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(8);\n/* harmony import */ var _clipboard__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(28);\n\n\n\n\n\n\nvar ATTRIBUTORS = {\n  table: _formats_table_attributors_table__WEBPACK_IMPORTED_MODULE_4__[/* TABLE_ATTRIBUTORS */ \"a\"],\n  cell: _formats_table_attributors_cell__WEBPACK_IMPORTED_MODULE_3__[/* CELL_ATTRIBUTORS */ \"a\"]\n};\nfunction prepareAttributeMatcher(type) {\n  var attributors = ATTRIBUTORS[type];\n  return function (node, delta, scroll) {\n    var attributes = _attributors_element_attributor__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"].keys(node);\n    var styles = _attributors_element_style__WEBPACK_IMPORTED_MODULE_2__[/* default */ \"a\"].keys(node);\n    var formats = {};\n    attributes.concat(styles).forEach(function (name) {\n      var attr = scroll.query(name, parchment__WEBPACK_IMPORTED_MODULE_0__[\"Scope\"].ATTRIBUTE);\n\n      if (attr != null) {\n        formats[attr.attrName] = attr.value(node);\n        if (formats[attr.attrName]) return;\n      }\n\n      attr = attributors[name];\n\n      if (attr != null && (attr.attrName === name || attr.keyName === name)) {\n        attr = attributors[name];\n        formats[attr.attrName] = attr.value(node) || undefined;\n      }\n    });\n\n    if (Object.keys(formats).length > 0) {\n      return Object(_clipboard__WEBPACK_IMPORTED_MODULE_5__[/* applyFormat */ \"a\"])(delta, formats);\n    }\n\n    return delta;\n  };\n}\n\n/***/ }),\n/* 53 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Theme = /*#__PURE__*/function () {\n  function Theme(quill, options) {\n    _classCallCheck(this, Theme);\n\n    this.quill = quill;\n    this.options = options;\n    this.modules = {};\n  }\n\n  _createClass(Theme, [{\n    key: \"init\",\n    value: function init() {\n      var _this = this;\n\n      Object.keys(this.options.modules).forEach(function (name) {\n        if (_this.modules[name] == null) {\n          _this.addModule(name);\n        }\n      });\n    }\n  }, {\n    key: \"addModule\",\n    value: function addModule(name) {\n      var ModuleClass = this.quill.constructor.import(\"modules/\".concat(name));\n      this.modules[name] = new ModuleClass(this.quill, this.options.modules[name] || {});\n      return this.modules[name];\n    }\n  }]);\n\n  return Theme;\n}();\n\nTheme.DEFAULTS = {\n  modules: {}\n};\nTheme.themes = {\n  default: Theme\n};\n/* harmony default export */ __webpack_exports__[\"a\"] = (Theme);\n\n/***/ }),\n/* 54 */\n/***/ (function(module, exports) {\n\nvar g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n\n/***/ }),\n/* 55 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var quill_delta__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);\n/* harmony import */ var quill_delta__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(quill_delta__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _core_emitter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3);\n/* harmony import */ var _core_module__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(14);\n/* harmony import */ var _utils_has_window__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(17);\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n\n\n\n\n\nvar Uploader = /*#__PURE__*/function (_Module) {\n  _inherits(Uploader, _Module);\n\n  var _super = _createSuper(Uploader);\n\n  function Uploader(quill, options) {\n    var _this;\n\n    _classCallCheck(this, Uploader);\n\n    _this = _super.call(this, quill, options);\n\n    _this.preventImageUploading(false);\n\n    _this.addDragOverHandler();\n\n    _this.addDropHandler();\n\n    return _this;\n  }\n\n  _createClass(Uploader, [{\n    key: \"addDragOverHandler\",\n    value: function addDragOverHandler() {\n      if (Object(_utils_has_window__WEBPACK_IMPORTED_MODULE_3__[/* default */ \"a\"])()) {\n        var ua = window.navigator.userAgent.toLowerCase();\n        var isMsIe = ua.indexOf('msie ') !== -1 || ua.indexOf('trident/') !== -1 || ua.indexOf('edge/') !== -1;\n\n        if (isMsIe) {\n          this.quill.root.addEventListener('dragover', function (e) {\n            e.preventDefault();\n          });\n        }\n      }\n    }\n  }, {\n    key: \"addDropHandler\",\n    value: function addDropHandler() {\n      var _this2 = this;\n\n      this.quill.root.addEventListener('drop', function (e) {\n        var noFiles = e.dataTransfer.files.length === 0;\n        var onDrop = _this2.options.onDrop;\n\n        if (onDrop && typeof onDrop === 'function') {\n          onDrop(e);\n        }\n\n        if (noFiles || _this2.preventImageUpload) {\n          return;\n        }\n\n        e.preventDefault();\n        var native;\n\n        if (document.caretRangeFromPoint) {\n          native = document.caretRangeFromPoint(e.clientX, e.clientY);\n        } else if (document.caretPositionFromPoint) {\n          var position = document.caretPositionFromPoint(e.clientX, e.clientY);\n          native = document.createRange();\n          native.setStart(position.offsetNode, position.offset);\n          native.setEnd(position.offsetNode, position.offset);\n        } else {\n          return;\n        }\n\n        var normalized = _this2.quill.selection.normalizeNative(native);\n\n        var range = _this2.quill.selection.normalizedToRange(normalized);\n\n        _this2.upload(range, e.dataTransfer.files);\n      });\n    }\n  }, {\n    key: \"preventImageUploading\",\n    value: function preventImageUploading(value) {\n      if (typeof value !== 'undefined') {\n        this.preventImageUpload = value;\n      }\n\n      return this.preventImageUpload;\n    }\n  }, {\n    key: \"upload\",\n    value: function upload(range, files, force) {\n      var _this3 = this;\n\n      if (this.preventImageUpload && !force) {\n        return;\n      }\n\n      var uploads = [];\n      Array.from(files).forEach(function (file) {\n        if (file && _this3.options.mimetypes.indexOf(file.type) !== -1) {\n          uploads.push(file);\n        }\n      });\n\n      if (uploads.length > 0) {\n        this.options.handler.call(this, range, uploads, this.options.imageBlot);\n      }\n    }\n  }]);\n\n  return Uploader;\n}(_core_module__WEBPACK_IMPORTED_MODULE_2__[/* default */ \"a\"]);\n\nUploader.DEFAULTS = {\n  mimetypes: ['image/png', 'image/jpeg', 'image/pjpeg', 'image/gif', 'image/webp', 'image/bmp', 'image/svg+xml', 'image/vnd.microsoft.icon'],\n  imageBlot: 'image',\n  handler: function handler(range, files, blotName) {\n    var _this4 = this;\n\n    var promises = files.map(function (file) {\n      return new Promise(function (resolve) {\n        var reader = new FileReader();\n\n        reader.onload = function (e) {\n          resolve(e.target.result);\n        };\n\n        reader.readAsDataURL(file);\n      });\n    });\n    Promise.all(promises).then(function (images) {\n      var update = images.reduce(function (delta, image) {\n        return delta.insert(_defineProperty({}, blotName, image));\n      }, new quill_delta__WEBPACK_IMPORTED_MODULE_0___default.a().retain(range.index).delete(range.length));\n\n      _this4.quill.updateContents(update, _core_emitter__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"].sources.USER);\n\n      _this4.quill.setSelection(range.index + images.length, _core_emitter__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"].sources.SILENT);\n    });\n  }\n};\n/* harmony default export */ __webpack_exports__[\"a\"] = (Uploader);\n\n/***/ }),\n/* 56 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar global = __webpack_require__(10);\nvar isCallable = __webpack_require__(22);\n\nvar aFunction = function (argument) {\n  return isCallable(argument) ? argument : undefined;\n};\n\nmodule.exports = function (namespace, method) {\n  return arguments.length < 2 ? aFunction(global[namespace]) : global[namespace] && global[namespace][method];\n};\n\n\n/***/ }),\n/* 57 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar global = __webpack_require__(10);\nvar getOwnPropertyDescriptor = __webpack_require__(85).f;\nvar createNonEnumerableProperty = __webpack_require__(66);\nvar redefine = __webpack_require__(86);\nvar setGlobal = __webpack_require__(77);\nvar copyConstructorProperties = __webpack_require__(131);\nvar isForced = __webpack_require__(136);\n\n/*\n  options.target      - name of the target object\n  options.global      - target is the global object\n  options.stat        - export as static methods of target\n  options.proto       - export as prototype methods of target\n  options.real        - real prototype method for the `pure` version\n  options.forced      - export even if the native feature is available\n  options.bind        - bind methods to the target, required for the `pure` version\n  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version\n  options.unsafe      - use the simple assignment of property instead of delete + defineProperty\n  options.sham        - add a flag to not completely full polyfills\n  options.enumerable  - export as enumerable property\n  options.noTargetGet - prevent calling a getter on target\n  options.name        - the .name of the function if it does not match the key\n*/\nmodule.exports = function (options, source) {\n  var TARGET = options.target;\n  var GLOBAL = options.global;\n  var STATIC = options.stat;\n  var FORCED, target, key, targetProperty, sourceProperty, descriptor;\n  if (GLOBAL) {\n    target = global;\n  } else if (STATIC) {\n    target = global[TARGET] || setGlobal(TARGET, {});\n  } else {\n    target = (global[TARGET] || {}).prototype;\n  }\n  if (target) for (key in source) {\n    sourceProperty = source[key];\n    if (options.noTargetGet) {\n      descriptor = getOwnPropertyDescriptor(target, key);\n      targetProperty = descriptor && descriptor.value;\n    } else targetProperty = target[key];\n    FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);\n    // contained in target\n    if (!FORCED && targetProperty !== undefined) {\n      if (typeof sourceProperty == typeof targetProperty) continue;\n      copyConstructorProperties(sourceProperty, targetProperty);\n    }\n    // add a flag to not completely full polyfills\n    if (options.sham || (targetProperty && targetProperty.sham)) {\n      createNonEnumerableProperty(sourceProperty, 'sham', true);\n    }\n    // extend global\n    redefine(target, key, sourceProperty, options);\n  }\n};\n\n\n/***/ }),\n/* 58 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// toObject with fallback for non-array-like ES3 strings\nvar IndexedObject = __webpack_require__(130);\nvar requireObjectCoercible = __webpack_require__(65);\n\nmodule.exports = function (it) {\n  return IndexedObject(requireObjectCoercible(it));\n};\n\n\n/***/ }),\n/* 59 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var parchment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);\n/* harmony import */ var _text__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(11);\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n\n\nvar GUARD_TEXT = \"\\uFEFF\";\n\nvar Embed = /*#__PURE__*/function (_EmbedBlot) {\n  _inherits(Embed, _EmbedBlot);\n\n  var _super = _createSuper(Embed);\n\n  function Embed(scroll, node) {\n    var _this;\n\n    _classCallCheck(this, Embed);\n\n    _this = _super.call(this, scroll, node);\n    _this.contentNode = document.createElement('span');\n\n    _this.contentNode.setAttribute('contenteditable', false);\n\n    Array.from(_this.domNode.childNodes).forEach(function (childNode) {\n      _this.contentNode.appendChild(childNode);\n    });\n    _this.leftGuard = document.createTextNode(GUARD_TEXT);\n    _this.rightGuard = document.createTextNode(GUARD_TEXT);\n\n    _this.domNode.appendChild(_this.leftGuard);\n\n    _this.domNode.appendChild(_this.contentNode);\n\n    _this.domNode.appendChild(_this.rightGuard);\n\n    return _this;\n  }\n\n  _createClass(Embed, [{\n    key: \"index\",\n    value: function index(node, offset) {\n      if (node === this.leftGuard) return 0;\n      if (node === this.rightGuard) return 1;\n      return _get(_getPrototypeOf(Embed.prototype), \"index\", this).call(this, node, offset);\n    }\n  }, {\n    key: \"restore\",\n    value: function restore(node) {\n      var range;\n      var textNode;\n      var text = node.data.split(GUARD_TEXT).join('');\n\n      if (node === this.leftGuard) {\n        if (this.prev instanceof _text__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"]) {\n          var prevLength = this.prev.length();\n          this.prev.insertAt(prevLength, text);\n          range = {\n            startNode: this.prev.domNode,\n            startOffset: prevLength + text.length\n          };\n        } else {\n          textNode = document.createTextNode(text);\n          this.parent.insertBefore(this.scroll.create(textNode), this);\n          range = {\n            startNode: textNode,\n            startOffset: text.length\n          };\n        }\n      } else if (node === this.rightGuard) {\n        if (this.next instanceof _text__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"]) {\n          this.next.insertAt(0, text);\n          range = {\n            startNode: this.next.domNode,\n            startOffset: text.length\n          };\n        } else {\n          textNode = document.createTextNode(text);\n          this.parent.insertBefore(this.scroll.create(textNode), this.next);\n          range = {\n            startNode: textNode,\n            startOffset: text.length\n          };\n        }\n      }\n\n      node.data = GUARD_TEXT;\n      return range;\n    }\n  }, {\n    key: \"update\",\n    value: function update(mutations, context) {\n      var _this2 = this;\n\n      mutations.forEach(function (mutation) {\n        if (mutation.type === 'characterData' && (mutation.target === _this2.leftGuard || mutation.target === _this2.rightGuard)) {\n          var range = _this2.restore(mutation.target);\n\n          if (range) context.range = range;\n        }\n      });\n    }\n  }]);\n\n  return Embed;\n}(parchment__WEBPACK_IMPORTED_MODULE_0__[\"EmbedBlot\"]);\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Embed);\n\n/***/ }),\n/* 60 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return getId; });\nfunction getId() {\n  return Math.random().toString(36).slice(2, 6);\n}\n\n/***/ }),\n/* 61 */\n/***/ (function(module, exports) {\n\nmodule.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n\n\n/***/ }),\n/* 62 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n// EXTERNAL MODULE: ./node_modules/quill-delta/dist/Delta.js\nvar Delta = __webpack_require__(1);\nvar Delta_default = /*#__PURE__*/__webpack_require__.n(Delta);\n\n// EXTERNAL MODULE: ./node_modules/parchment/src/parchment.ts + 17 modules\nvar parchment = __webpack_require__(2);\n\n// EXTERNAL MODULE: ./core/quill.js\nvar quill = __webpack_require__(0);\n\n// EXTERNAL MODULE: ./core/module.js\nvar core_module = __webpack_require__(14);\n\n// EXTERNAL MODULE: ./blots/block.js\nvar block = __webpack_require__(6);\n\n// EXTERNAL MODULE: ./blots/break.js\nvar blots_break = __webpack_require__(12);\n\n// EXTERNAL MODULE: ./blots/container.js\nvar container = __webpack_require__(15);\n\n// EXTERNAL MODULE: ./utils/is_defined.js\nvar is_defined = __webpack_require__(5);\n\n// EXTERNAL MODULE: ./formats/table/attributors/cell.js\nvar attributors_cell = __webpack_require__(9);\n\n// EXTERNAL MODULE: ./formats/table/attributors/table.js\nvar attributors_table = __webpack_require__(8);\n\n// EXTERNAL MODULE: ./formats/table/get_id.js\nvar get_id = __webpack_require__(60);\n\n// EXTERNAL MODULE: ./formats/table/toggle_attribute.js\nvar toggle_attribute = __webpack_require__(45);\n\n// CONCATENATED MODULE: ./formats/table/index.js\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n\n\n\n\n\n\n\n\nvar CELL_IDENTITY_KEYS = ['row', 'cell'];\nvar TABLE_TAGS = ['TD', 'TH', 'TR', 'TBODY', 'THEAD', 'TABLE'];\nvar DATA_PREFIX = 'data-table-';\n\nvar table_CellLine = /*#__PURE__*/function (_Block) {\n  _inherits(CellLine, _Block);\n\n  var _super = _createSuper(CellLine);\n\n  function CellLine() {\n    _classCallCheck(this, CellLine);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(CellLine, [{\n    key: \"optimize\",\n    value: function optimize() {\n      var _get2;\n\n      var rowId = this.domNode.getAttribute(\"\".concat(DATA_PREFIX, \"row\"));\n\n      if (this.statics.requiredContainer && !(this.parent instanceof this.statics.requiredContainer)) {\n        var domNode = this.domNode;\n        var formats = {\n          row: rowId\n        };\n        Object.keys(attributors_cell[\"b\" /* CELL_FORMATS */]).forEach(function (format) {\n          var value = domNode.dataset[format.toLowerCase()];\n\n          if (value) {\n            formats[format] = value;\n          }\n        });\n        this.wrap(this.statics.requiredContainer.blotName, formats);\n      }\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      (_get2 = _get(_getPrototypeOf(CellLine.prototype), \"optimize\", this)).call.apply(_get2, [this].concat(args));\n    }\n  }, {\n    key: \"format\",\n    value: function format(name, value) {\n      var isCell = CELL_IDENTITY_KEYS.indexOf(name) > -1;\n\n      if (isCell || attributors_table[\"b\" /* TABLE_FORMATS */][name] || attributors_cell[\"b\" /* CELL_FORMATS */][name]) {\n        var attrName = \"data-\".concat(isCell ? 'table-' : '').concat(name.toLowerCase());\n        Object(toggle_attribute[\"a\" /* default */])(this.domNode, attrName, value);\n\n        if (attributors_cell[\"b\" /* CELL_FORMATS */][name]) {\n          var _this$cell;\n\n          (_this$cell = this.cell()) === null || _this$cell === void 0 ? void 0 : _this$cell.format(name, value);\n        }\n\n        if (attributors_table[\"b\" /* TABLE_FORMATS */][name]) {\n          var _this$cell2, _this$cell2$table;\n\n          (_this$cell2 = this.cell()) === null || _this$cell2 === void 0 ? void 0 : (_this$cell2$table = _this$cell2.table()) === null || _this$cell2$table === void 0 ? void 0 : _this$cell2$table.format(name, value);\n        }\n      } else {\n        _get(_getPrototypeOf(CellLine.prototype), \"format\", this).call(this, name, value);\n      }\n    }\n  }, {\n    key: \"cell\",\n    value: function cell() {\n      return 'row' in this.parent ? this.parent : null;\n    }\n  }], [{\n    key: \"create\",\n    value: function create(value) {\n      var node = _get(_getPrototypeOf(CellLine), \"create\", this).call(this, value);\n\n      CELL_IDENTITY_KEYS.forEach(function (key) {\n        var _value$key;\n\n        var identityMarker = key === 'row' ? tableId : table_cellId;\n        node.setAttribute(\"\".concat(DATA_PREFIX).concat(key), (_value$key = value[key]) !== null && _value$key !== void 0 ? _value$key : identityMarker());\n      });\n      return node;\n    }\n  }, {\n    key: \"formats\",\n    value: function formats(domNode) {\n      return CELL_IDENTITY_KEYS.reduce(function (formats, attribute) {\n        var attrName = \"\".concat(DATA_PREFIX).concat(attribute);\n\n        if (domNode.hasAttribute(attrName)) {\n          formats[attribute] = domNode.getAttribute(attrName) || undefined;\n        }\n\n        return formats;\n      }, {});\n    }\n  }]);\n\n  return CellLine;\n}(block[\"d\" /* default */]);\n\ntable_CellLine.blotName = 'tableCellLine';\ntable_CellLine.className = 'ql-table-cell-line';\ntable_CellLine.tagName = 'P';\n\nvar HeaderCellLine = /*#__PURE__*/function (_CellLine) {\n  _inherits(HeaderCellLine, _CellLine);\n\n  var _super2 = _createSuper(HeaderCellLine);\n\n  function HeaderCellLine() {\n    _classCallCheck(this, HeaderCellLine);\n\n    return _super2.apply(this, arguments);\n  }\n\n  return HeaderCellLine;\n}(table_CellLine);\n\nHeaderCellLine.blotName = 'tableHeaderCellLine';\nHeaderCellLine.className = 'ql-table-header-cell-line';\n\nvar table_BaseCell = /*#__PURE__*/function (_Container) {\n  _inherits(BaseCell, _Container);\n\n  var _super3 = _createSuper(BaseCell);\n\n  function BaseCell() {\n    _classCallCheck(this, BaseCell);\n\n    return _super3.apply(this, arguments);\n  }\n\n  _createClass(BaseCell, [{\n    key: \"format\",\n    value: function format(name, value) {\n      var _CELL_FORMATS$name;\n\n      (_CELL_FORMATS$name = attributors_cell[\"b\" /* CELL_FORMATS */][name]) === null || _CELL_FORMATS$name === void 0 ? void 0 : _CELL_FORMATS$name.add(this.domNode, value);\n    }\n  }, {\n    key: \"checkMerge\",\n    value: function checkMerge() {\n      if (_get(_getPrototypeOf(BaseCell.prototype), \"checkMerge\", this).call(this) && this.next.children.head != null) {\n        var thisHead = this.children.head.formats()[this.children.head.statics.blotName];\n        var thisTail = this.children.tail.formats()[this.children.tail.statics.blotName];\n        var nextHead = this.next.children.head.formats()[this.next.children.head.statics.blotName];\n        var nextTail = this.next.children.tail.formats()[this.next.children.tail.statics.blotName];\n        return thisHead.cell === thisTail.cell && thisHead.cell === nextHead.cell && thisHead.cell === nextTail.cell;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"formats\",\n    value: function formats() {\n      return BaseCell.cellFormats(this.domNode);\n    }\n  }, {\n    key: \"cellOffset\",\n    value: function cellOffset() {\n      if (this.parent) {\n        return this.parent.children.indexOf(this);\n      }\n\n      return -1;\n    }\n  }, {\n    key: \"row\",\n    value: function row() {\n      return 'table' in this.parent ? this.parent : null;\n    }\n  }, {\n    key: \"rowOffset\",\n    value: function rowOffset() {\n      if (this.row()) {\n        return this.row().rowOffset();\n      }\n\n      return -1;\n    }\n  }, {\n    key: \"table\",\n    value: function table() {\n      var _this$row;\n\n      return (_this$row = this.row()) === null || _this$row === void 0 ? void 0 : _this$row.table();\n    }\n  }, {\n    key: \"optimize\",\n    value: function optimize() {\n      var _this$domNode$getAttr, _get3;\n\n      var rowId = (_this$domNode$getAttr = this.domNode.getAttribute(\"\".concat(DATA_PREFIX, \"row\"))) !== null && _this$domNode$getAttr !== void 0 ? _this$domNode$getAttr : this.domNode.getAttribute(\"\".concat(DATA_PREFIX, \"header-row\"));\n\n      if (this.statics.requiredContainer && !(this.parent instanceof this.statics.requiredContainer)) {\n        this.wrap(this.statics.requiredContainer.blotName, {\n          row: rowId\n        });\n      }\n\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      (_get3 = _get(_getPrototypeOf(BaseCell.prototype), \"optimize\", this)).call.apply(_get3, [this].concat(args));\n    }\n  }], [{\n    key: \"create\",\n    value: function create(value) {\n      var node = _get(_getPrototypeOf(BaseCell), \"create\", this).call(this, value);\n\n      if (value) {\n        Object.keys(value).forEach(function (format) {\n          var _CELL_FORMATS$format;\n\n          (_CELL_FORMATS$format = attributors_cell[\"b\" /* CELL_FORMATS */][format]) === null || _CELL_FORMATS$format === void 0 ? void 0 : _CELL_FORMATS$format.add(node, value[format]);\n        });\n      }\n\n      return node;\n    }\n  }, {\n    key: \"cellFormats\",\n    value: function cellFormats(domNode) {\n      var formats = {};\n\n      if (domNode.hasAttribute(\"\".concat(DATA_PREFIX, \"row\")) || domNode.hasAttribute(\"\".concat(DATA_PREFIX, \"header-row\"))) {\n        var _domNode$getAttribute;\n\n        formats.row = (_domNode$getAttribute = domNode.getAttribute(\"\".concat(DATA_PREFIX, \"row\"))) !== null && _domNode$getAttribute !== void 0 ? _domNode$getAttribute : domNode.getAttribute(\"\".concat(DATA_PREFIX, \"header-row\"));\n      }\n\n      Object.keys(attributors_cell[\"b\" /* CELL_FORMATS */]).forEach(function (format) {\n        var _domNode$firstElement;\n\n        var value = (_domNode$firstElement = domNode.firstElementChild) === null || _domNode$firstElement === void 0 ? void 0 : _domNode$firstElement.dataset[format.toLowerCase()];\n\n        if (value) {\n          formats[format] = value;\n        }\n      });\n      return formats;\n    }\n  }]);\n\n  return BaseCell;\n}(container[\"a\" /* default */]);\n\ntable_BaseCell.tagName = ['TD', 'TH'];\n\nvar TableCell = /*#__PURE__*/function (_BaseCell) {\n  _inherits(TableCell, _BaseCell);\n\n  var _super4 = _createSuper(TableCell);\n\n  function TableCell() {\n    _classCallCheck(this, TableCell);\n\n    return _super4.apply(this, arguments);\n  }\n\n  _createClass(TableCell, [{\n    key: \"format\",\n    value: function format(name, value) {\n      if (name === 'row') {\n        this.domNode.setAttribute(\"\".concat(DATA_PREFIX).concat(name), value);\n        this.children.forEach(function (child) {\n          child.format(name, value);\n        });\n      } else {\n        _get(_getPrototypeOf(TableCell.prototype), \"format\", this).call(this, name, value);\n      }\n    }\n  }], [{\n    key: \"create\",\n    value: function create(value) {\n      var node = _get(_getPrototypeOf(TableCell), \"create\", this).call(this, value);\n\n      var attrName = \"\".concat(DATA_PREFIX, \"row\");\n\n      if (value !== null && value !== void 0 && value.row) {\n        node.setAttribute(attrName, value.row);\n      }\n\n      return node;\n    }\n  }]);\n\n  return TableCell;\n}(table_BaseCell);\n\nTableCell.blotName = 'tableCell';\nTableCell.className = 'ql-table-data-cell';\nTableCell.dataAttribute = \"\".concat(DATA_PREFIX, \"row\");\n\nvar TableHeaderCell = /*#__PURE__*/function (_BaseCell2) {\n  _inherits(TableHeaderCell, _BaseCell2);\n\n  var _super5 = _createSuper(TableHeaderCell);\n\n  function TableHeaderCell() {\n    _classCallCheck(this, TableHeaderCell);\n\n    return _super5.apply(this, arguments);\n  }\n\n  _createClass(TableHeaderCell, [{\n    key: \"format\",\n    value: function format(name, value) {\n      if (name === 'row') {\n        this.domNode.setAttribute(\"\".concat(DATA_PREFIX).concat(name), value);\n        this.children.forEach(function (child) {\n          child.format(name, value);\n        });\n      } else {\n        _get(_getPrototypeOf(TableHeaderCell.prototype), \"format\", this).call(this, name, value);\n      }\n    }\n  }], [{\n    key: \"create\",\n    value: function create(value) {\n      var node = _get(_getPrototypeOf(TableHeaderCell), \"create\", this).call(this, value);\n\n      var attrName = \"\".concat(DATA_PREFIX, \"header-row\");\n\n      if (value && value.row) {\n        node.setAttribute(attrName, value.row);\n      }\n\n      return node;\n    }\n  }]);\n\n  return TableHeaderCell;\n}(table_BaseCell);\n\nTableHeaderCell.tagName = ['TH', 'TD'];\nTableHeaderCell.className = 'ql-table-header-cell';\nTableHeaderCell.blotName = 'tableHeaderCell';\nTableHeaderCell.dataAttribute = \"\".concat(DATA_PREFIX, \"header-row\");\n\nvar table_BaseRow = /*#__PURE__*/function (_Container2) {\n  _inherits(BaseRow, _Container2);\n\n  var _super6 = _createSuper(BaseRow);\n\n  function BaseRow() {\n    _classCallCheck(this, BaseRow);\n\n    return _super6.apply(this, arguments);\n  }\n\n  _createClass(BaseRow, [{\n    key: \"checkMerge\",\n    value: function checkMerge() {\n      if (_get(_getPrototypeOf(BaseRow.prototype), \"checkMerge\", this).call(this) && Object(is_defined[\"a\" /* default */])(this.next.children.head)) {\n        var formatName = 'row';\n        var thisHead = this.children.head.formats();\n        var thisTail = this.children.tail.formats();\n        var nextHead = this.next.children.head.formats();\n        var nextTail = this.next.children.tail.formats();\n        return thisHead[formatName] === thisTail[formatName] && thisHead[formatName] === nextHead[formatName] && thisHead[formatName] === nextTail[formatName];\n      }\n\n      return false;\n    }\n  }, {\n    key: \"optimize\",\n    value: function optimize() {\n      var _get4,\n          _this = this;\n\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      (_get4 = _get(_getPrototypeOf(BaseRow.prototype), \"optimize\", this)).call.apply(_get4, [this].concat(args));\n\n      var formatName = this.childFormatName;\n      this.children.forEach(function (child) {\n        if (!Object(is_defined[\"a\" /* default */])(child.next)) {\n          return;\n        }\n\n        var childFormats = child.formats();\n        var nextFormats = child.next.formats();\n\n        if (childFormats[formatName] !== nextFormats[formatName]) {\n          var next = _this.splitAfter(child);\n\n          if (next) {\n            next.optimize();\n          }\n\n          if (_this.prev) {\n            _this.prev.optimize();\n          }\n        }\n      });\n    }\n  }, {\n    key: \"rowOffset\",\n    value: function rowOffset() {\n      if (this.parent) {\n        return this.parent.children.indexOf(this);\n      }\n\n      return -1;\n    }\n  }, {\n    key: \"table\",\n    value: function table() {\n      var _this$parent;\n\n      return (_this$parent = this.parent) === null || _this$parent === void 0 ? void 0 : _this$parent.parent;\n    }\n  }, {\n    key: \"formats\",\n    value: function formats() {\n      var formats = {};\n      var attrName = \"\".concat(DATA_PREFIX, \"row\");\n\n      if (this.domNode.hasAttribute(attrName)) {\n        formats[attrName] = this.domNode.getAttribute(attrName);\n      }\n\n      return formats;\n    }\n  }], [{\n    key: \"create\",\n    value: function create(value) {\n      var node = _get(_getPrototypeOf(BaseRow), \"create\", this).call(this, value);\n\n      if (value !== null && value !== void 0 && value.row) {\n        node.setAttribute(\"\".concat(DATA_PREFIX, \"row\"), value.row);\n      }\n\n      return node;\n    }\n  }]);\n\n  return BaseRow;\n}(container[\"a\" /* default */]);\n\ntable_BaseRow.tagName = 'TR';\n\nvar TableRow = /*#__PURE__*/function (_BaseRow) {\n  _inherits(TableRow, _BaseRow);\n\n  var _super7 = _createSuper(TableRow);\n\n  function TableRow(scroll, domNode) {\n    var _this2;\n\n    _classCallCheck(this, TableRow);\n\n    _this2 = _super7.call(this, scroll, domNode);\n    _this2.childFormatName = 'table';\n    return _this2;\n  }\n\n  return TableRow;\n}(table_BaseRow);\n\nTableRow.blotName = 'tableRow';\n\nvar TableHeaderRow = /*#__PURE__*/function (_BaseRow2) {\n  _inherits(TableHeaderRow, _BaseRow2);\n\n  var _super8 = _createSuper(TableHeaderRow);\n\n  function TableHeaderRow(scroll, domNode) {\n    var _this3;\n\n    _classCallCheck(this, TableHeaderRow);\n\n    _this3 = _super8.call(this, scroll, domNode);\n    _this3.childFormatName = 'tableHeaderCell';\n    return _this3;\n  }\n\n  return TableHeaderRow;\n}(table_BaseRow);\n\nTableHeaderRow.blotName = 'tableHeaderRow';\n\nvar table_RowContainer = /*#__PURE__*/function (_Container3) {\n  _inherits(RowContainer, _Container3);\n\n  var _super9 = _createSuper(RowContainer);\n\n  function RowContainer() {\n    _classCallCheck(this, RowContainer);\n\n    return _super9.apply(this, arguments);\n  }\n\n  _createClass(RowContainer, [{\n    key: \"optimize\",\n    value: function optimize() {\n      var _get5;\n\n      if (this.statics.requiredContainer && !(this.parent instanceof this.statics.requiredContainer)) {\n        var domNode = this.children.head.children.head.children.head.domNode;\n        var formats = {};\n        Object.keys(attributors_table[\"b\" /* TABLE_FORMATS */]).forEach(function (format) {\n          var value = domNode.dataset[format.toLowerCase()];\n\n          if (value) {\n            formats[format] = value;\n          }\n        });\n        this.wrap(this.statics.requiredContainer.blotName, formats);\n      }\n\n      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n\n      (_get5 = _get(_getPrototypeOf(RowContainer.prototype), \"optimize\", this)).call.apply(_get5, [this].concat(args));\n    }\n  }]);\n\n  return RowContainer;\n}(container[\"a\" /* default */]);\n\nvar TableBody = /*#__PURE__*/function (_RowContainer) {\n  _inherits(TableBody, _RowContainer);\n\n  var _super10 = _createSuper(TableBody);\n\n  function TableBody() {\n    _classCallCheck(this, TableBody);\n\n    return _super10.apply(this, arguments);\n  }\n\n  return TableBody;\n}(table_RowContainer);\n\nTableBody.blotName = 'tableBody';\nTableBody.tagName = 'TBODY';\n\nvar TableHeader = /*#__PURE__*/function (_RowContainer2) {\n  _inherits(TableHeader, _RowContainer2);\n\n  var _super11 = _createSuper(TableHeader);\n\n  function TableHeader() {\n    _classCallCheck(this, TableHeader);\n\n    return _super11.apply(this, arguments);\n  }\n\n  return TableHeader;\n}(table_RowContainer);\n\nTableHeader.blotName = 'tableHeader';\nTableHeader.tagName = 'THEAD';\n\nvar table_TableContainer = /*#__PURE__*/function (_Container4) {\n  _inherits(TableContainer, _Container4);\n\n  var _super12 = _createSuper(TableContainer);\n\n  function TableContainer() {\n    _classCallCheck(this, TableContainer);\n\n    return _super12.apply(this, arguments);\n  }\n\n  _createClass(TableContainer, [{\n    key: \"balanceCells\",\n    value: function balanceCells() {\n      var headerRows = this.descendants(TableHeaderRow);\n      var bodyRows = this.descendants(TableRow);\n      var maxColCount = this.getMaxTableColCount(headerRows, bodyRows);\n      this.balanceRows(maxColCount, headerRows, TableHeaderCell);\n      this.balanceRows(maxColCount, bodyRows, TableCell);\n    }\n  }, {\n    key: \"getMaxTableColCount\",\n    value: function getMaxTableColCount(headerRows, bodyRows) {\n      return Math.max(this.getMaxRowColCount(headerRows), this.getMaxRowColCount(bodyRows));\n    }\n  }, {\n    key: \"getMaxRowColCount\",\n    value: function getMaxRowColCount(rows) {\n      return Math.max.apply(Math, _toConsumableArray(rows.map(function (row) {\n        return row.children.length;\n      })));\n    }\n  }, {\n    key: \"balanceRows\",\n    value: function balanceRows(maxColCount, rows, CellClass) {\n      var _this4 = this;\n\n      rows.forEach(function (row) {\n        new Array(maxColCount - row.children.length).fill(0).forEach(function () {\n          var value;\n\n          if (Object(is_defined[\"a\" /* default */])(row.children.head)) {\n            value = CellClass.cellFormats(row.children.head.domNode);\n          }\n\n          var blot = _this4.scroll.create(CellClass.blotName, value);\n\n          var cellLine = _this4.scroll.create(CellClass.allowedChildren[0].blotName, value);\n\n          blot.appendChild(cellLine);\n          row.appendChild(blot);\n          blot.optimize(); // Add break blot\n        });\n      });\n    }\n  }, {\n    key: \"cells\",\n    value: function cells(column) {\n      return this.rows().map(function (row) {\n        return row.children.at(column);\n      });\n    }\n  }, {\n    key: \"deleteColumn\",\n    value: function deleteColumn(index) {\n      var _this5 = this;\n\n      [TableHeader, TableBody].forEach(function (blot) {\n        var _this5$descendants = _this5.descendants(blot),\n            _this5$descendants2 = _slicedToArray(_this5$descendants, 1),\n            tablePart = _this5$descendants2[0];\n\n        if (!Object(is_defined[\"a\" /* default */])(tablePart) || !Object(is_defined[\"a\" /* default */])(tablePart.children.head)) {\n          return;\n        }\n\n        tablePart.children.forEach(function (row) {\n          var cell = row.children.at(index);\n\n          if (Object(is_defined[\"a\" /* default */])(cell)) {\n            cell.remove();\n          }\n        });\n      });\n    }\n  }, {\n    key: \"insertColumn\",\n    value: function insertColumn(index) {\n      var _this6 = this;\n\n      [TableHeader, TableBody].forEach(function (blot) {\n        var _this6$descendants = _this6.descendants(blot),\n            _this6$descendants2 = _slicedToArray(_this6$descendants, 1),\n            tablePart = _this6$descendants2[0];\n\n        if (!Object(is_defined[\"a\" /* default */])(tablePart) || !Object(is_defined[\"a\" /* default */])(tablePart.children.head)) {\n          return;\n        }\n\n        var CellBlot = blot === TableHeader ? TableHeaderCell : TableCell;\n        var CellLineBlot = blot === TableHeader ? HeaderCellLine : table_CellLine;\n        tablePart.children.forEach(function (row) {\n          var ref = row.children.at(index);\n          var value = CellLineBlot.formats(row.children.head.children.head.domNode);\n\n          var cell = _this6.scroll.create(CellBlot.blotName, {\n            row: value.row\n          });\n\n          var cellLine = _this6.scroll.create(CellLineBlot.blotName, {\n            row: value.row\n          });\n\n          var emptyLine = _this6.scroll.create(blots_break[\"a\" /* default */].blotName);\n\n          cellLine.appendChild(emptyLine);\n          cell.appendChild(cellLine);\n          row.insertBefore(cell, ref);\n        });\n      });\n    }\n  }, {\n    key: \"insertRow\",\n    value: function insertRow(index) {\n      var _this7 = this;\n\n      var _this$descendants = this.descendants(TableBody),\n          _this$descendants2 = _slicedToArray(_this$descendants, 1),\n          body = _this$descendants2[0];\n\n      if (!Object(is_defined[\"a\" /* default */])(body) || !Object(is_defined[\"a\" /* default */])(body.children.head)) {\n        return;\n      }\n\n      var id = tableId();\n      var row = this.scroll.create(TableRow.blotName, {\n        row: id\n      });\n      body.children.head.children.forEach(function () {\n        var cell = _this7.scroll.create(TableCell.blotName, {\n          row: id\n        });\n\n        var cellLine = _this7.scroll.create(table_CellLine.blotName, {\n          row: id\n        });\n\n        var emptyLine = _this7.scroll.create(blots_break[\"a\" /* default */].blotName);\n\n        cellLine.appendChild(emptyLine);\n        cell.appendChild(cellLine);\n        row.appendChild(cell);\n      });\n      var ref = body.children.at(index);\n      body.insertBefore(row, ref);\n    }\n  }, {\n    key: \"insertHeaderRow\",\n    value: function insertHeaderRow() {\n      var _this8 = this;\n\n      var _this$descendants3 = this.descendants(TableHeader),\n          _this$descendants4 = _slicedToArray(_this$descendants3, 1),\n          header = _this$descendants4[0];\n\n      var _this$descendants5 = this.descendants(TableBody),\n          _this$descendants6 = _slicedToArray(_this$descendants5, 1),\n          body = _this$descendants6[0];\n\n      if (Object(is_defined[\"a\" /* default */])(header) || !Object(is_defined[\"a\" /* default */])(body) || !Object(is_defined[\"a\" /* default */])(body.children.head)) {\n        return;\n      }\n\n      var id = tableId();\n      var newHeader = this.scroll.create(TableHeader.blotName);\n      var row = this.scroll.create(TableHeaderRow.blotName);\n      var ref = this.children.at(0);\n      newHeader.appendChild(row);\n      body.children.head.children.forEach(function () {\n        var cell = _this8.scroll.create(TableHeaderCell.blotName, {\n          row: id\n        });\n\n        var cellLine = _this8.scroll.create(HeaderCellLine.blotName, {\n          row: id\n        });\n\n        var emptyLine = _this8.scroll.create(blots_break[\"a\" /* default */].blotName);\n\n        cellLine.appendChild(emptyLine);\n        cell.appendChild(cellLine);\n        row.appendChild(cell);\n        cell.optimize();\n      });\n      this.insertBefore(newHeader, ref);\n    }\n  }, {\n    key: \"rows\",\n    value: function rows() {\n      var body = this.children.head;\n      return Object(is_defined[\"a\" /* default */])(body) ? body.children.map(function (row) {\n        return row;\n      }) : [];\n    }\n  }, {\n    key: \"formats\",\n    value: function formats() {\n      var formats = {};\n      var childElem = this.cells()[0].domNode.firstElementChild;\n      Object.keys(attributors_table[\"b\" /* TABLE_FORMATS */]).forEach(function (format) {\n        var value = childElem.dataset[format.toLowerCase()];\n\n        if (value) {\n          formats[format] = value;\n        }\n      });\n      return formats;\n    }\n  }, {\n    key: \"format\",\n    value: function format(name, value) {\n      var tableFormat = attributors_table[\"b\" /* TABLE_FORMATS */][name];\n\n      if (tableFormat) {\n        var attrName = \"data-\".concat(name.toLowerCase());\n        this.cells().forEach(function (cell) {\n          Object(toggle_attribute[\"a\" /* default */])(cell.children.head.domNode, attrName, value);\n        });\n        tableFormat.add(this.domNode, value);\n      }\n    }\n  }], [{\n    key: \"create\",\n    value: function create(value) {\n      var node = _get(_getPrototypeOf(TableContainer), \"create\", this).call(this, value);\n\n      if (value) {\n        Object.keys(value).forEach(function (format) {\n          var _TABLE_FORMATS$format;\n\n          (_TABLE_FORMATS$format = attributors_table[\"b\" /* TABLE_FORMATS */][format]) === null || _TABLE_FORMATS$format === void 0 ? void 0 : _TABLE_FORMATS$format.add(node, value[format]);\n        });\n      }\n\n      return node;\n    }\n  }]);\n\n  return TableContainer;\n}(container[\"a\" /* default */]);\n\ntable_TableContainer.blotName = 'tableContainer';\ntable_TableContainer.tagName = 'TABLE';\ntable_TableContainer.allowedChildren = [TableHeader, TableBody];\nTableBody.requiredContainer = table_TableContainer;\nTableHeader.requiredContainer = table_TableContainer;\nTableBody.allowedChildren = [TableRow];\nTableRow.requiredContainer = TableBody;\nTableRow.allowedChildren = [TableCell];\nTableCell.requiredContainer = TableRow;\ntable_CellLine.requiredContainer = TableCell;\nTableCell.allowedChildren = [table_CellLine];\nTableHeader.allowedChildren = [TableHeaderRow];\nTableHeaderRow.requiredContainer = TableHeader;\nHeaderCellLine.requiredContainer = TableHeaderCell;\nTableHeaderCell.allowedChildren = [HeaderCellLine];\nTableHeaderRow.allowedChildren = [TableHeaderCell];\nTableHeaderCell.requiredContainer = TableHeaderRow;\n\nfunction tableId() {\n  return \"row-\".concat(Object(get_id[\"a\" /* default */])());\n}\n\nfunction table_cellId() {\n  return \"cell-\".concat(Object(get_id[\"a\" /* default */])());\n}\n\n\n// EXTERNAL MODULE: ./modules/clipboard.js\nvar clipboard = __webpack_require__(28);\n\n// EXTERNAL MODULE: ./modules/table/utils/make_table_arrow_handler.js\nvar make_table_arrow_handler = __webpack_require__(51);\n\n// EXTERNAL MODULE: ./modules/table/utils/prepare_attr_matcher.js\nvar prepare_attr_matcher = __webpack_require__(52);\n\n// CONCATENATED MODULE: ./modules/table/index.js\nfunction table_typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { table_typeof = function _typeof(obj) { return typeof obj; }; } else { table_typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return table_typeof(obj); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction table_slicedToArray(arr, i) { return table_arrayWithHoles(arr) || table_iterableToArrayLimit(arr, i) || table_unsupportedIterableToArray(arr, i) || table_nonIterableRest(); }\n\nfunction table_nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction table_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return table_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return table_arrayLikeToArray(o, minLen); }\n\nfunction table_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction table_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction table_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction table_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction table_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction table_createClass(Constructor, protoProps, staticProps) { if (protoProps) table_defineProperties(Constructor.prototype, protoProps); if (staticProps) table_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction table_inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) table_setPrototypeOf(subClass, superClass); }\n\nfunction table_setPrototypeOf(o, p) { table_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return table_setPrototypeOf(o, p); }\n\nfunction table_createSuper(Derived) { var hasNativeReflectConstruct = table_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = table_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = table_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return table_possibleConstructorReturn(this, result); }; }\n\nfunction table_possibleConstructorReturn(self, call) { if (call && (table_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return table_assertThisInitialized(self); }\n\nfunction table_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction table_isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction table_getPrototypeOf(o) { table_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return table_getPrototypeOf(o); }\n\n\n\n\n\n\n\n\n\n\n\n\nvar EMPTY_RESULT = [null, null, null, -1];\n\nvar table_Table = /*#__PURE__*/function (_Module) {\n  table_inherits(Table, _Module);\n\n  var _super = table_createSuper(Table);\n\n  function Table() {\n    var _this;\n\n    table_classCallCheck(this, Table);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.tableBlots = [table_CellLine.blotName, HeaderCellLine.blotName];\n\n    _this.tableBlots.forEach(function (blotName) {\n      _this.quill.editor.addImmediateFormat(blotName);\n    });\n\n    _this.integrateClipboard();\n\n    _this.addKeyboardHandlers();\n\n    _this.listenBalanceCells();\n\n    return _this;\n  }\n\n  table_createClass(Table, [{\n    key: \"integrateClipboard\",\n    value: function integrateClipboard() {\n      var _this2 = this;\n\n      this.tableBlots.forEach(function (blotName) {\n        _this2.quill.clipboard.addTableBlot(blotName);\n      });\n      this.quill.clipboard.addMatcher('td, th', matchCell);\n      this.quill.clipboard.addMatcher('table', Object(prepare_attr_matcher[\"a\" /* default */])('table'));\n      this.quill.clipboard.addMatcher('td, th', Object(prepare_attr_matcher[\"a\" /* default */])('cell'));\n    }\n  }, {\n    key: \"addKeyboardHandlers\",\n    value: function addKeyboardHandlers() {\n      var _this3 = this;\n\n      var bindings = Table.keyboardBindings;\n      Object.keys(bindings).forEach(function (name) {\n        if (bindings[name]) {\n          _this3.quill.keyboard.addBinding(bindings[name]);\n        }\n      });\n    }\n  }, {\n    key: \"balanceTables\",\n    value: function balanceTables() {\n      this.quill.scroll.descendants(table_TableContainer).forEach(function (table) {\n        table.balanceCells();\n      });\n    }\n  }, {\n    key: \"deleteColumn\",\n    value: function deleteColumn() {\n      var _this$getTable = this.getTable(),\n          _this$getTable2 = table_slicedToArray(_this$getTable, 3),\n          table = _this$getTable2[0],\n          cell = _this$getTable2[2];\n\n      if (!Object(is_defined[\"a\" /* default */])(cell)) {\n        return;\n      }\n\n      table.deleteColumn(cell.cellOffset());\n      this.quill.update(quill[\"a\" /* default */].sources.USER);\n    }\n  }, {\n    key: \"deleteRow\",\n    value: function deleteRow() {\n      var _this$getTable3 = this.getTable(),\n          _this$getTable4 = table_slicedToArray(_this$getTable3, 2),\n          row = _this$getTable4[1];\n\n      if (!Object(is_defined[\"a\" /* default */])(row)) {\n        return;\n      }\n\n      row.remove();\n      this.quill.update(quill[\"a\" /* default */].sources.USER);\n    }\n  }, {\n    key: \"deleteTable\",\n    value: function deleteTable() {\n      var _this$getTable5 = this.getTable(),\n          _this$getTable6 = table_slicedToArray(_this$getTable5, 1),\n          table = _this$getTable6[0];\n\n      if (!Object(is_defined[\"a\" /* default */])(table)) {\n        return;\n      }\n\n      var offset = table.offset();\n      table.remove();\n      this.quill.update(quill[\"a\" /* default */].sources.USER);\n      this.quill.setSelection(offset, quill[\"a\" /* default */].sources.SILENT);\n    }\n  }, {\n    key: \"getTable\",\n    value: function getTable() {\n      var range = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.quill.getSelection();\n\n      if (!Object(is_defined[\"a\" /* default */])(range)) {\n        return EMPTY_RESULT;\n      }\n\n      var _this$quill$getLine = this.quill.getLine(range.index),\n          _this$quill$getLine2 = table_slicedToArray(_this$quill$getLine, 2),\n          cellLine = _this$quill$getLine2[0],\n          offset = _this$quill$getLine2[1];\n\n      if (!Object(is_defined[\"a\" /* default */])(cellLine) || this.tableBlots.indexOf(cellLine.statics.blotName) === -1) {\n        return EMPTY_RESULT;\n      }\n\n      var cell = cellLine.parent;\n      var row = cell.parent;\n      var table = row.parent.parent;\n      return [table, row, cell, offset];\n    }\n  }, {\n    key: \"insertColumn\",\n    value: function insertColumn(offset) {\n      var range = this.quill.getSelection();\n\n      var _this$getTable7 = this.getTable(range),\n          _this$getTable8 = table_slicedToArray(_this$getTable7, 3),\n          table = _this$getTable8[0],\n          row = _this$getTable8[1],\n          cell = _this$getTable8[2];\n\n      if (!Object(is_defined[\"a\" /* default */])(cell)) {\n        return;\n      }\n\n      var column = cell.cellOffset();\n      table.insertColumn(column + offset);\n      this.quill.update(quill[\"a\" /* default */].sources.USER);\n      var shift = row.rowOffset();\n\n      if (offset === 0) {\n        shift += 1;\n      }\n\n      this.quill.setSelection(range.index + shift, range.length, quill[\"a\" /* default */].sources.SILENT);\n    }\n  }, {\n    key: \"insertColumnLeft\",\n    value: function insertColumnLeft() {\n      this.insertColumn(0);\n    }\n  }, {\n    key: \"insertColumnRight\",\n    value: function insertColumnRight() {\n      this.insertColumn(1);\n    }\n  }, {\n    key: \"insertRow\",\n    value: function insertRow(offset) {\n      var range = this.quill.getSelection();\n\n      var _this$getTable9 = this.getTable(range),\n          _this$getTable10 = table_slicedToArray(_this$getTable9, 3),\n          table = _this$getTable10[0],\n          row = _this$getTable10[1],\n          cell = _this$getTable10[2];\n\n      if (!Object(is_defined[\"a\" /* default */])(cell)) {\n        return;\n      }\n\n      var index = row.rowOffset();\n      table.insertRow(index + offset);\n      this.quill.update(quill[\"a\" /* default */].sources.USER);\n\n      if (offset > 0) {\n        this.quill.setSelection(range, quill[\"a\" /* default */].sources.SILENT);\n      } else {\n        this.quill.setSelection(range.index + row.children.length, range.length, quill[\"a\" /* default */].sources.SILENT);\n      }\n    }\n  }, {\n    key: \"insertRowAbove\",\n    value: function insertRowAbove() {\n      this.insertRow(0);\n    }\n  }, {\n    key: \"insertRowBelow\",\n    value: function insertRowBelow() {\n      this.insertRow(1);\n    }\n  }, {\n    key: \"insertHeaderRow\",\n    value: function insertHeaderRow() {\n      var range = this.quill.getSelection();\n\n      var _this$getTable11 = this.getTable(range),\n          _this$getTable12 = table_slicedToArray(_this$getTable11, 3),\n          table = _this$getTable12[0],\n          cell = _this$getTable12[2];\n\n      if (!Object(is_defined[\"a\" /* default */])(cell)) {\n        return;\n      }\n\n      table.insertHeaderRow();\n      this.quill.update(quill[\"a\" /* default */].sources.USER);\n    }\n  }, {\n    key: \"insertTable\",\n    value: function insertTable(rows, columns) {\n      var range = this.quill.getSelection();\n\n      if (!Object(is_defined[\"a\" /* default */])(range)) {\n        return;\n      }\n\n      var delta = new Array(rows).fill(0).reduce(function (memo) {\n        var rowId = tableId();\n        new Array(columns).fill('\\n').forEach(function (text) {\n          memo.insert(text, {\n            tableCellLine: {\n              row: rowId,\n              cell: tableId()\n            }\n          });\n        });\n        return memo;\n      }, new Delta_default.a().retain(range.index));\n      this.quill.updateContents(delta, quill[\"a\" /* default */].sources.USER);\n      this.quill.setSelection(range.index, quill[\"a\" /* default */].sources.SILENT);\n      this.balanceTables();\n    }\n  }, {\n    key: \"tableFormats\",\n    value: function tableFormats() {\n      return this.tableBlots;\n    }\n  }, {\n    key: \"listenBalanceCells\",\n    value: function listenBalanceCells() {\n      var _this4 = this;\n\n      this.quill.on(quill[\"a\" /* default */].events.SCROLL_OPTIMIZE, function (mutations) {\n        mutations.some(function (mutation) {\n          if (['TD', 'TH', 'TR', 'TBODY', 'THEAD', 'TABLE'].indexOf(mutation.target.tagName) !== -1) {\n            _this4.quill.once(quill[\"a\" /* default */].events.TEXT_CHANGE, function (delta, old, source) {\n              if (source !== quill[\"a\" /* default */].sources.USER) return;\n\n              _this4.balanceTables();\n            });\n\n            return true;\n          }\n\n          return false;\n        });\n      });\n      this.quill.on(quill[\"a\" /* default */].events.CONTENT_SETTED, function () {\n        _this4.quill.once(quill[\"a\" /* default */].events.TEXT_CHANGE, function () {\n          _this4.balanceTables();\n        });\n      });\n    }\n  }], [{\n    key: \"register\",\n    value: function register() {\n      quill[\"a\" /* default */].register(table_CellLine, true);\n      quill[\"a\" /* default */].register(HeaderCellLine, true);\n      quill[\"a\" /* default */].register(TableHeaderCell, true);\n      quill[\"a\" /* default */].register(TableCell, true);\n      quill[\"a\" /* default */].register(TableHeaderRow, true);\n      quill[\"a\" /* default */].register(TableRow, true);\n      quill[\"a\" /* default */].register(TableBody, true);\n      quill[\"a\" /* default */].register(TableHeader, true);\n      quill[\"a\" /* default */].register(table_TableContainer, true);\n      [attributors_table[\"b\" /* TABLE_FORMATS */], attributors_cell[\"b\" /* CELL_FORMATS */]].forEach(function (formats) {\n        Object.keys(formats).forEach(function (name) {\n          quill[\"a\" /* default */].register(_defineProperty({}, \"formats/\".concat(name), formats[name]), true);\n        });\n      });\n    }\n  }]);\n\n  return Table;\n}(core_module[\"a\" /* default */]);\n\ntable_Table.keyboardBindings = {\n  'table backspace': {\n    key: 'backspace',\n    format: ['tableCellLine', 'tableHeaderCellLine'],\n    collapsed: true,\n    offset: 0,\n    handler: function handler(range) {\n      var _this$quill$getLine3 = this.quill.getLine(range.index),\n          _this$quill$getLine4 = table_slicedToArray(_this$quill$getLine3, 1),\n          line = _this$quill$getLine4[0];\n\n      if (!line.prev || ['tableCellLine', 'tableHeaderCellLine'].indexOf(line.prev.statics.blotName) === -1) {\n        return false;\n      }\n\n      return true;\n    }\n  },\n  'table delete': {\n    key: 'del',\n    format: ['tableCellLine', 'tableHeaderCellLine'],\n    collapsed: true,\n    suffix: /^$/,\n    handler: function handler() {}\n  },\n  'table cell enter': {\n    key: 'enter',\n    shiftKey: null,\n    format: ['tableCellLine', 'tableHeaderCellLine'],\n    handler: function handler(range, context) {\n      var _this$quill$selection,\n          _this5 = this;\n\n      if ((_this$quill$selection = this.quill.selection) !== null && _this$quill$selection !== void 0 && _this$quill$selection.composing) return;\n\n      if (range.length > 0) {\n        this.quill.scroll.deleteAt(range.index, range.length);\n      }\n\n      var lineFormats = Object.keys(context.format).reduce(function (formats, format) {\n        if (_this5.quill.scroll.query(format, parchment[\"Scope\"].BLOCK) && !Array.isArray(context.format[format])) {\n          formats[format] = context.format[format];\n        }\n\n        return formats;\n      }, {});\n      this.quill.insertText(range.index, '\\n', lineFormats.tableCellLine, quill[\"a\" /* default */].sources.USER);\n      this.quill.setSelection(range.index + 1, quill[\"a\" /* default */].sources.SILENT);\n      this.quill.focus();\n      Object.keys(context.format).forEach(function (name) {\n        if (lineFormats[name] != null) return;\n        if (Array.isArray(context.format[name])) return;\n        if (name === 'link') return;\n\n        _this5.quill.format(name, context.format[name], quill[\"a\" /* default */].sources.USER);\n      });\n    }\n  },\n  'table tab': {\n    key: 'tab',\n    shiftKey: null,\n    format: ['tableCellLine', 'tableHeaderCellLine'],\n    handler: function handler(range, context) {\n      var event = context.event,\n          cell = context.line;\n      var offset = cell.offset(this.quill.scroll);\n\n      if (event.shiftKey) {\n        this.quill.setSelection(offset - 1, quill[\"a\" /* default */].sources.USER);\n      } else {\n        this.quill.setSelection(offset + cell.length(), quill[\"a\" /* default */].sources.USER);\n      }\n    }\n  },\n  'table down': Object(make_table_arrow_handler[\"a\" /* default */])(false, ['tableCellLine', 'tableHeaderCellLine']),\n  'table up': Object(make_table_arrow_handler[\"a\" /* default */])(true, ['tableCellLine', 'tableHeaderCellLine'])\n};\n\nfunction matchCell(node, delta) {\n  var row = node.parentNode;\n  var table = row.parentNode.tagName === 'TABLE' ? row.parentNode : row.parentNode.parentNode;\n  var isHeaderRow = row.parentNode.tagName === 'THEAD' ? true : null;\n  var rows = Array.from(table.querySelectorAll('tr'));\n  var cells = Array.from(row.querySelectorAll('th,td'));\n  var rowId = rows.indexOf(row) + 1;\n  var cellId = cells.indexOf(node) + 1;\n  var cellLineBlotName = isHeaderRow ? 'tableHeaderCellLine' : 'tableCellLine';\n\n  if (delta.length() === 0) {\n    delta = new Delta_default.a().insert('\\n', _defineProperty({}, cellLineBlotName, {\n      row: rowId,\n      cell: cellId\n    }));\n    return delta;\n  }\n\n  if (!Object(clipboard[\"c\" /* deltaEndsWith */])(delta, '\\n')) {\n    delta.insert('\\n');\n  }\n\n  return Object(clipboard[\"a\" /* applyFormat */])(delta, cellLineBlotName, {\n    row: rowId,\n    cell: cellId\n  });\n}\n\n/* harmony default export */ var modules_table = __webpack_exports__[\"a\"] = (table_Table);\n\n/***/ }),\n/* 63 */\n/***/ (function(module, exports) {\n\nmodule.exports = false;\n\n\n/***/ }),\n/* 64 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar global = __webpack_require__(10);\nvar requireObjectCoercible = __webpack_require__(65);\n\nvar Object = global.Object;\n\n// `ToObject` abstract operation\n// https://tc39.es/ecma262/#sec-toobject\nmodule.exports = function (argument) {\n  return Object(requireObjectCoercible(argument));\n};\n\n\n/***/ }),\n/* 65 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar global = __webpack_require__(10);\n\nvar TypeError = global.TypeError;\n\n// `RequireObjectCoercible` abstract operation\n// https://tc39.es/ecma262/#sec-requireobjectcoercible\nmodule.exports = function (it) {\n  if (it == undefined) throw TypeError(\"Can't call method on \" + it);\n  return it;\n};\n\n\n/***/ }),\n/* 66 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar DESCRIPTORS = __webpack_require__(38);\nvar definePropertyModule = __webpack_require__(49);\nvar createPropertyDescriptor = __webpack_require__(67);\n\nmodule.exports = DESCRIPTORS ? function (object, key, value) {\n  return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n\n\n/***/ }),\n/* 67 */\n/***/ (function(module, exports) {\n\nmodule.exports = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n\n\n/***/ }),\n/* 68 */\n/***/ (function(module, exports) {\n\nmodule.exports = {};\n\n\n/***/ }),\n/* 69 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var parchment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n\n\nvar ElementAttributor = /*#__PURE__*/function (_Attributor) {\n  _inherits(ElementAttributor, _Attributor);\n\n  var _super = _createSuper(ElementAttributor);\n\n  function ElementAttributor(attrName, keyName) {\n    var _options$allowedTags;\n\n    var _this;\n\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n      allowedTags: []\n    };\n\n    _classCallCheck(this, ElementAttributor);\n\n    _this = _super.call(this, attrName, keyName, options);\n    _this.allowedTags = (_options$allowedTags = options.allowedTags) !== null && _options$allowedTags !== void 0 ? _options$allowedTags : [];\n    return _this;\n  }\n\n  _createClass(ElementAttributor, [{\n    key: \"canAdd\",\n    value: function canAdd(node, value) {\n      var isNodeAllowed = this.allowedTags.indexOf(node.tagName) > -1;\n      return isNodeAllowed && _get(_getPrototypeOf(ElementAttributor.prototype), \"canAdd\", this).call(this, node, value);\n    }\n  }]);\n\n  return ElementAttributor;\n}(parchment__WEBPACK_IMPORTED_MODULE_0__[\"Attributor\"]);\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (ElementAttributor);\n\n/***/ }),\n/* 70 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var parchment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n\n\nvar ElementStyleAttributor = /*#__PURE__*/function (_StyleAttributor) {\n  _inherits(ElementStyleAttributor, _StyleAttributor);\n\n  var _super = _createSuper(ElementStyleAttributor);\n\n  function ElementStyleAttributor(attrName, keyName) {\n    var _options$allowedTags;\n\n    var _this;\n\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n      allowedTags: []\n    };\n\n    _classCallCheck(this, ElementStyleAttributor);\n\n    _this = _super.call(this, attrName, keyName, options);\n    _this.allowedTags = (_options$allowedTags = options.allowedTags) !== null && _options$allowedTags !== void 0 ? _options$allowedTags : [];\n    return _this;\n  }\n\n  _createClass(ElementStyleAttributor, [{\n    key: \"canAdd\",\n    value: function canAdd(node, value) {\n      var isNodeAllowed = this.allowedTags.indexOf(node.tagName) > -1;\n      return isNodeAllowed && _get(_getPrototypeOf(ElementStyleAttributor.prototype), \"canAdd\", this).call(this, node, value);\n    }\n  }]);\n\n  return ElementStyleAttributor;\n}(parchment__WEBPACK_IMPORTED_MODULE_0__[\"StyleAttributor\"]);\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (ElementStyleAttributor);\n\n/***/ }),\n/* 71 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n// EXTERNAL MODULE: ./node_modules/quill-delta/dist/Delta.js\nvar Delta = __webpack_require__(1);\nvar Delta_default = /*#__PURE__*/__webpack_require__.n(Delta);\n\n// EXTERNAL MODULE: ./core/quill.js\nvar core_quill = __webpack_require__(0);\n\n// EXTERNAL MODULE: ./core/module.js\nvar core_module = __webpack_require__(14);\n\n// EXTERNAL MODULE: ./blots/block.js\nvar block = __webpack_require__(6);\n\n// EXTERNAL MODULE: ./blots/container.js\nvar container = __webpack_require__(15);\n\n// EXTERNAL MODULE: ./utils/is_defined.js\nvar is_defined = __webpack_require__(5);\n\n// EXTERNAL MODULE: ./formats/table/attributors/table.js\nvar attributors_table = __webpack_require__(8);\n\n// EXTERNAL MODULE: ./formats/table/get_id.js\nvar get_id = __webpack_require__(60);\n\n// EXTERNAL MODULE: ./formats/table/toggle_attribute.js\nvar toggle_attribute = __webpack_require__(45);\n\n// CONCATENATED MODULE: ./formats/table/lite.js\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n\n\n\n\n\n\nvar TABLE_TAGS = ['TD', 'TH', 'TR', 'TBODY', 'THEAD', 'TABLE'];\nvar DATA_PREFIX = 'data-tablelite-';\n\nvar lite_BaseCell = /*#__PURE__*/function (_Block) {\n  _inherits(BaseCell, _Block);\n\n  var _super = _createSuper(BaseCell);\n\n  function BaseCell() {\n    _classCallCheck(this, BaseCell);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(BaseCell, [{\n    key: \"format\",\n    value: function format(name, value) {\n      if (attributors_table[\"b\" /* TABLE_FORMATS */][name]) {\n        var _this$row, _this$row$table;\n\n        var attrName = \"data-\".concat(name.toLowerCase());\n        Object(toggle_attribute[\"a\" /* default */])(this.domNode, attrName, value);\n        (_this$row = this.row()) === null || _this$row === void 0 ? void 0 : (_this$row$table = _this$row.table()) === null || _this$row$table === void 0 ? void 0 : _this$row$table.format(name, value);\n      } else {\n        _get(_getPrototypeOf(BaseCell.prototype), \"format\", this).call(this, name, value);\n      }\n    }\n  }, {\n    key: \"cellOffset\",\n    value: function cellOffset() {\n      if (this.parent) {\n        return this.parent.children.indexOf(this);\n      }\n\n      return -1;\n    }\n  }, {\n    key: \"row\",\n    value: function row() {\n      return 'table' in this.parent ? this.parent : null;\n    }\n  }, {\n    key: \"rowOffset\",\n    value: function rowOffset() {\n      if (this.row()) {\n        return this.row().rowOffset();\n      }\n\n      return -1;\n    }\n  }, {\n    key: \"table\",\n    value: function table() {\n      var _this$row2;\n\n      return (_this$row2 = this.row()) === null || _this$row2 === void 0 ? void 0 : _this$row2.table();\n    }\n  }], [{\n    key: \"create\",\n    value: function create(value) {\n      var node = _get(_getPrototypeOf(BaseCell), \"create\", this).call(this);\n\n      var attrName = this.dataAttribute;\n      Object(toggle_attribute[\"a\" /* default */])(node, attrName, value !== null && value !== void 0 ? value : tableId());\n      return node;\n    }\n  }, {\n    key: \"formats\",\n    value: function formats(domNode) {\n      var attrName = this.dataAttribute;\n\n      if (domNode.hasAttribute(attrName)) {\n        return domNode.getAttribute(attrName);\n      }\n\n      return undefined;\n    }\n  }]);\n\n  return BaseCell;\n}(block[\"d\" /* default */]);\n\nlite_BaseCell.tagName = ['TD', 'TH'];\n\nvar TableCell = /*#__PURE__*/function (_BaseCell) {\n  _inherits(TableCell, _BaseCell);\n\n  var _super2 = _createSuper(TableCell);\n\n  function TableCell() {\n    _classCallCheck(this, TableCell);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(TableCell, [{\n    key: \"format\",\n    value: function format(name, value) {\n      if (name === TableCell.blotName && value) {\n        this.domNode.setAttribute(TableCell.dataAttribute, value);\n      } else {\n        _get(_getPrototypeOf(TableCell.prototype), \"format\", this).call(this, name, value);\n      }\n    }\n  }]);\n\n  return TableCell;\n}(lite_BaseCell);\n\nTableCell.blotName = 'table';\nTableCell.dataAttribute = \"\".concat(DATA_PREFIX, \"row\");\n\nvar TableHeaderCell = /*#__PURE__*/function (_BaseCell2) {\n  _inherits(TableHeaderCell, _BaseCell2);\n\n  var _super3 = _createSuper(TableHeaderCell);\n\n  function TableHeaderCell() {\n    _classCallCheck(this, TableHeaderCell);\n\n    return _super3.apply(this, arguments);\n  }\n\n  _createClass(TableHeaderCell, [{\n    key: \"format\",\n    value: function format(name, value) {\n      if (name === TableHeaderCell.blotName && value) {\n        this.domNode.setAttribute(TableHeaderCell.dataAttribute, value);\n      } else {\n        _get(_getPrototypeOf(TableHeaderCell.prototype), \"format\", this).call(this, name, value);\n      }\n    }\n  }]);\n\n  return TableHeaderCell;\n}(lite_BaseCell);\n\nTableHeaderCell.tagName = ['TH', 'TD'];\nTableHeaderCell.blotName = 'tableHeaderCell';\nTableHeaderCell.dataAttribute = \"\".concat(DATA_PREFIX, \"header-row\");\n\nvar lite_BaseRow = /*#__PURE__*/function (_Container) {\n  _inherits(BaseRow, _Container);\n\n  var _super4 = _createSuper(BaseRow);\n\n  function BaseRow() {\n    _classCallCheck(this, BaseRow);\n\n    return _super4.apply(this, arguments);\n  }\n\n  _createClass(BaseRow, [{\n    key: \"checkMerge\",\n    value: function checkMerge() {\n      if (_get(_getPrototypeOf(BaseRow.prototype), \"checkMerge\", this).call(this) && Object(is_defined[\"a\" /* default */])(this.next.children.head)) {\n        var formatName = this.childFormatName;\n        var thisHead = this.children.head.formats();\n        var thisTail = this.children.tail.formats();\n        var nextHead = this.next.children.head.formats();\n        var nextTail = this.next.children.tail.formats();\n        return thisHead[formatName] === thisTail[formatName] && thisHead[formatName] === nextHead[formatName] && thisHead[formatName] === nextTail[formatName];\n      }\n\n      return false;\n    }\n  }, {\n    key: \"optimize\",\n    value: function optimize() {\n      var _get2,\n          _this = this;\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      (_get2 = _get(_getPrototypeOf(BaseRow.prototype), \"optimize\", this)).call.apply(_get2, [this].concat(args));\n\n      var formatName = this.childFormatName;\n      this.children.forEach(function (child) {\n        if (!Object(is_defined[\"a\" /* default */])(child.next)) {\n          return;\n        }\n\n        var childFormats = child.formats();\n        var nextFormats = child.next.formats();\n\n        if (childFormats[formatName] !== nextFormats[formatName]) {\n          var next = _this.splitAfter(child);\n\n          if (next) {\n            next.optimize();\n          } // We might be able to merge with prev now\n\n\n          if (_this.prev) {\n            _this.prev.optimize();\n          }\n        }\n      });\n    }\n  }, {\n    key: \"rowOffset\",\n    value: function rowOffset() {\n      if (this.parent) {\n        return this.parent.children.indexOf(this);\n      }\n\n      return -1;\n    }\n  }, {\n    key: \"table\",\n    value: function table() {\n      var _this$parent;\n\n      return (_this$parent = this.parent) === null || _this$parent === void 0 ? void 0 : _this$parent.parent;\n    }\n  }]);\n\n  return BaseRow;\n}(container[\"a\" /* default */]);\n\nlite_BaseRow.tagName = 'TR';\n\nvar TableRow = /*#__PURE__*/function (_BaseRow) {\n  _inherits(TableRow, _BaseRow);\n\n  var _super5 = _createSuper(TableRow);\n\n  function TableRow(scroll, domNode) {\n    var _this2;\n\n    _classCallCheck(this, TableRow);\n\n    _this2 = _super5.call(this, scroll, domNode);\n    _this2.childFormatName = 'table';\n    return _this2;\n  }\n\n  return TableRow;\n}(lite_BaseRow);\n\nTableRow.blotName = 'tableRow';\n\nvar TableHeaderRow = /*#__PURE__*/function (_BaseRow2) {\n  _inherits(TableHeaderRow, _BaseRow2);\n\n  var _super6 = _createSuper(TableHeaderRow);\n\n  function TableHeaderRow(scroll, domNode) {\n    var _this3;\n\n    _classCallCheck(this, TableHeaderRow);\n\n    _this3 = _super6.call(this, scroll, domNode);\n    _this3.childFormatName = 'tableHeaderCell';\n    return _this3;\n  }\n\n  return TableHeaderRow;\n}(lite_BaseRow);\n\nTableHeaderRow.blotName = 'tableHeaderRow';\n\nvar lite_RowContainer = /*#__PURE__*/function (_Container2) {\n  _inherits(RowContainer, _Container2);\n\n  var _super7 = _createSuper(RowContainer);\n\n  function RowContainer() {\n    _classCallCheck(this, RowContainer);\n\n    return _super7.apply(this, arguments);\n  }\n\n  _createClass(RowContainer, [{\n    key: \"optimize\",\n    value: function optimize() {\n      var _get3;\n\n      if (this.statics.requiredContainer && !(this.parent instanceof this.statics.requiredContainer)) {\n        var domNode = this.children.head.children.head.domNode;\n        var formats = {};\n        Object.keys(attributors_table[\"b\" /* TABLE_FORMATS */]).forEach(function (format) {\n          var value = domNode.dataset[format.toLowerCase()];\n\n          if (value) {\n            formats[format] = value;\n          }\n        });\n        this.wrap(this.statics.requiredContainer.blotName, formats);\n      }\n\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      (_get3 = _get(_getPrototypeOf(RowContainer.prototype), \"optimize\", this)).call.apply(_get3, [this].concat(args));\n    }\n  }]);\n\n  return RowContainer;\n}(container[\"a\" /* default */]);\n\nvar TableBody = /*#__PURE__*/function (_RowContainer) {\n  _inherits(TableBody, _RowContainer);\n\n  var _super8 = _createSuper(TableBody);\n\n  function TableBody() {\n    _classCallCheck(this, TableBody);\n\n    return _super8.apply(this, arguments);\n  }\n\n  return TableBody;\n}(lite_RowContainer);\n\nTableBody.blotName = 'tableBody';\nTableBody.tagName = ['TBODY'];\n\nvar TableHeader = /*#__PURE__*/function (_RowContainer2) {\n  _inherits(TableHeader, _RowContainer2);\n\n  var _super9 = _createSuper(TableHeader);\n\n  function TableHeader() {\n    _classCallCheck(this, TableHeader);\n\n    return _super9.apply(this, arguments);\n  }\n\n  return TableHeader;\n}(lite_RowContainer);\n\nTableHeader.blotName = 'tableHeader';\nTableHeader.tagName = ['THEAD'];\n\nvar lite_TableContainer = /*#__PURE__*/function (_Container3) {\n  _inherits(TableContainer, _Container3);\n\n  var _super10 = _createSuper(TableContainer);\n\n  function TableContainer() {\n    _classCallCheck(this, TableContainer);\n\n    return _super10.apply(this, arguments);\n  }\n\n  _createClass(TableContainer, [{\n    key: \"balanceCells\",\n    value: function balanceCells() {\n      var headerRows = this.descendants(TableHeaderRow);\n      var bodyRows = this.descendants(TableRow);\n      var maxColCount = this.getMaxTableColCount(headerRows, bodyRows);\n      this.balanceRows(maxColCount, headerRows, TableHeaderCell);\n      this.balanceRows(maxColCount, bodyRows, TableCell);\n    }\n  }, {\n    key: \"getMaxTableColCount\",\n    value: function getMaxTableColCount(headerRows, bodyRows) {\n      return Math.max(this.getMaxRowColCount(headerRows), this.getMaxRowColCount(bodyRows));\n    }\n  }, {\n    key: \"getMaxRowColCount\",\n    value: function getMaxRowColCount(rows) {\n      return Math.max.apply(Math, _toConsumableArray(rows.map(function (row) {\n        return row.children.length;\n      })));\n    }\n  }, {\n    key: \"balanceRows\",\n    value: function balanceRows(maxColCount, rows, CellClass) {\n      var _this4 = this;\n\n      rows.forEach(function (row) {\n        new Array(maxColCount - row.children.length).fill(0).forEach(function () {\n          var value;\n\n          if (Object(is_defined[\"a\" /* default */])(row.children.head)) {\n            value = CellClass.formats(row.children.head.domNode);\n          }\n\n          var blot = _this4.scroll.create(CellClass.blotName, value);\n\n          row.appendChild(blot);\n          blot.optimize(); // Add break blot\n        });\n      });\n    }\n  }, {\n    key: \"cells\",\n    value: function cells(column) {\n      return this.rows().map(function (row) {\n        return row.children.at(column);\n      });\n    }\n  }, {\n    key: \"deleteColumn\",\n    value: function deleteColumn(index) {\n      var _this5 = this;\n\n      [TableHeader, TableBody].forEach(function (blot) {\n        var _this5$descendants = _this5.descendants(blot),\n            _this5$descendants2 = _slicedToArray(_this5$descendants, 1),\n            tablePart = _this5$descendants2[0];\n\n        if (!Object(is_defined[\"a\" /* default */])(tablePart) || !Object(is_defined[\"a\" /* default */])(tablePart.children.head)) {\n          return;\n        }\n\n        tablePart.children.forEach(function (row) {\n          var cell = row.children.at(index);\n\n          if (Object(is_defined[\"a\" /* default */])(cell)) {\n            cell.remove();\n          }\n        });\n      });\n    }\n  }, {\n    key: \"insertColumn\",\n    value: function insertColumn(index) {\n      var _this6 = this;\n\n      [TableHeader, TableBody].forEach(function (blot) {\n        var _this6$descendants = _this6.descendants(blot),\n            _this6$descendants2 = _slicedToArray(_this6$descendants, 1),\n            tablePart = _this6$descendants2[0];\n\n        if (!Object(is_defined[\"a\" /* default */])(tablePart) || !Object(is_defined[\"a\" /* default */])(tablePart.children.head)) {\n          return;\n        }\n\n        var CellBlot = blot === TableHeader ? TableHeaderCell : TableCell;\n        tablePart.children.forEach(function (row) {\n          var ref = row.children.at(index);\n          var value = CellBlot.formats(row.children.head.domNode);\n\n          var cell = _this6.scroll.create(CellBlot.blotName, value);\n\n          row.insertBefore(cell, ref);\n        });\n      });\n    }\n  }, {\n    key: \"insertRow\",\n    value: function insertRow(index) {\n      var _this7 = this;\n\n      var _this$descendants = this.descendants(TableBody),\n          _this$descendants2 = _slicedToArray(_this$descendants, 1),\n          body = _this$descendants2[0];\n\n      if (!Object(is_defined[\"a\" /* default */])(body) || !Object(is_defined[\"a\" /* default */])(body.children.head)) {\n        return;\n      }\n\n      var id = tableId();\n      var row = this.scroll.create(TableRow.blotName);\n      body.children.head.children.forEach(function () {\n        var cell = _this7.scroll.create(TableCell.blotName, id);\n\n        row.appendChild(cell);\n      });\n      var ref = body.children.at(index);\n      body.insertBefore(row, ref);\n    }\n  }, {\n    key: \"insertHeaderRow\",\n    value: function insertHeaderRow() {\n      var _this8 = this;\n\n      var _this$descendants3 = this.descendants(TableHeader),\n          _this$descendants4 = _slicedToArray(_this$descendants3, 1),\n          header = _this$descendants4[0];\n\n      var _this$descendants5 = this.descendants(TableBody),\n          _this$descendants6 = _slicedToArray(_this$descendants5, 1),\n          body = _this$descendants6[0];\n\n      if (Object(is_defined[\"a\" /* default */])(header) || !Object(is_defined[\"a\" /* default */])(body) || !Object(is_defined[\"a\" /* default */])(body.children.head)) {\n        return;\n      }\n\n      var id = tableId();\n      var newHeader = this.scroll.create(TableHeader.blotName);\n      var row = this.scroll.create(TableHeaderRow.blotName);\n      var ref = this.children.at(0);\n      newHeader.appendChild(row);\n      body.children.head.children.forEach(function () {\n        var cell = _this8.scroll.create(TableHeaderCell.blotName, id);\n\n        row.appendChild(cell);\n        cell.optimize();\n      });\n      this.insertBefore(newHeader, ref);\n    }\n  }, {\n    key: \"rows\",\n    value: function rows() {\n      var body = this.children.head;\n      return Object(is_defined[\"a\" /* default */])(body) ? body.children.map(function (row) {\n        return row;\n      }) : [];\n    }\n  }, {\n    key: \"formats\",\n    value: function formats() {\n      var formats = {};\n      var childElem = this.cells()[0].domNode;\n      Object.keys(attributors_table[\"b\" /* TABLE_FORMATS */]).forEach(function (format) {\n        var value = childElem.dataset[format.toLowerCase()];\n\n        if (value) {\n          formats[format] = value;\n        }\n      });\n      return formats;\n    }\n  }, {\n    key: \"format\",\n    value: function format(name, value) {\n      var tableFormat = attributors_table[\"b\" /* TABLE_FORMATS */][name];\n\n      if (tableFormat) {\n        var attrName = \"data-\".concat(name.toLowerCase());\n        this.cells().forEach(function (cell) {\n          Object(toggle_attribute[\"a\" /* default */])(cell.domNode, attrName, value);\n        });\n        tableFormat.add(this.domNode, value);\n      }\n    }\n  }], [{\n    key: \"create\",\n    value: function create(value) {\n      var node = _get(_getPrototypeOf(TableContainer), \"create\", this).call(this, value);\n\n      if (value) {\n        Object.keys(value).forEach(function (format) {\n          var _TABLE_FORMATS$format;\n\n          (_TABLE_FORMATS$format = attributors_table[\"b\" /* TABLE_FORMATS */][format]) === null || _TABLE_FORMATS$format === void 0 ? void 0 : _TABLE_FORMATS$format.add(node, value[format]);\n        });\n      }\n\n      return node;\n    }\n  }]);\n\n  return TableContainer;\n}(container[\"a\" /* default */]);\n\nlite_TableContainer.blotName = 'tableContainer';\nlite_TableContainer.tagName = 'TABLE';\nlite_TableContainer.allowedChildren = [TableHeader, TableBody];\nTableBody.requiredContainer = lite_TableContainer;\nTableHeader.requiredContainer = lite_TableContainer;\nTableBody.allowedChildren = [TableRow];\nTableRow.requiredContainer = TableBody;\nTableRow.allowedChildren = [TableCell];\nTableCell.requiredContainer = TableRow;\nTableHeader.allowedChildren = [TableHeaderRow];\nTableHeaderRow.requiredContainer = TableHeader;\nTableHeaderRow.allowedChildren = [TableHeaderCell];\nTableHeaderCell.requiredContainer = TableHeaderRow;\n\nfunction tableId() {\n  return \"row-\".concat(Object(get_id[\"a\" /* default */])());\n}\n\n\n// EXTERNAL MODULE: ./modules/clipboard.js\nvar clipboard = __webpack_require__(28);\n\n// EXTERNAL MODULE: ./modules/table/utils/make_table_arrow_handler.js\nvar make_table_arrow_handler = __webpack_require__(51);\n\n// CONCATENATED MODULE: ./modules/table/utils/insert_pr_below.js\n\n\nfunction insertParagraphAbove(_ref) {\n  var quill = _ref.quill,\n      index = _ref.index,\n      range = _ref.range;\n  var insertIndex = index - 1;\n  var delta = new Delta_default.a().retain(insertIndex).insert('\\n');\n  quill.updateContents(delta, core_quill[\"a\" /* default */].sources.USER);\n  quill.setSelection(range.index + 1, range.length, core_quill[\"a\" /* default */].sources.SILENT);\n}\n// CONCATENATED MODULE: ./modules/table/utils/insert_pr_above.js\n\n\nfunction insertParagraphBelow(_ref) {\n  var quill = _ref.quill,\n      index = _ref.index,\n      table = _ref.table;\n  var insertIndex = index + table.length();\n  var delta = new Delta_default.a().retain(insertIndex).insert('\\n');\n  quill.updateContents(delta, core_quill[\"a\" /* default */].sources.USER);\n  quill.setSelection(insertIndex, core_quill[\"a\" /* default */].sources.USER);\n}\n// CONCATENATED MODULE: ./modules/table/utils/table_side.js\nfunction tableSide(row, cell, offset) {\n  if (row.prev == null && row.next == null) {\n    if (cell.prev == null && cell.next == null) {\n      return offset === 0 ? -1 : 1;\n    }\n\n    return cell.prev == null ? -1 : 1;\n  }\n\n  if (row.prev == null) {\n    return -1;\n  }\n\n  if (row.next == null) {\n    return 1;\n  }\n\n  return null;\n}\n// EXTERNAL MODULE: ./modules/table/utils/prepare_attr_matcher.js\nvar prepare_attr_matcher = __webpack_require__(52);\n\n// EXTERNAL MODULE: ./formats/table/attributors/cell.js\nvar attributors_cell = __webpack_require__(9);\n\n// CONCATENATED MODULE: ./modules/table/lite.js\nfunction lite_typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { lite_typeof = function _typeof(obj) { return typeof obj; }; } else { lite_typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return lite_typeof(obj); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction lite_slicedToArray(arr, i) { return lite_arrayWithHoles(arr) || lite_iterableToArrayLimit(arr, i) || lite_unsupportedIterableToArray(arr, i) || lite_nonIterableRest(); }\n\nfunction lite_nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction lite_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return lite_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return lite_arrayLikeToArray(o, minLen); }\n\nfunction lite_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction lite_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction lite_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction lite_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction lite_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction lite_createClass(Constructor, protoProps, staticProps) { if (protoProps) lite_defineProperties(Constructor.prototype, protoProps); if (staticProps) lite_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction lite_inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) lite_setPrototypeOf(subClass, superClass); }\n\nfunction lite_setPrototypeOf(o, p) { lite_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return lite_setPrototypeOf(o, p); }\n\nfunction lite_createSuper(Derived) { var hasNativeReflectConstruct = lite_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = lite_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = lite_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return lite_possibleConstructorReturn(this, result); }; }\n\nfunction lite_possibleConstructorReturn(self, call) { if (call && (lite_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return lite_assertThisInitialized(self); }\n\nfunction lite_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction lite_isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction lite_getPrototypeOf(o) { lite_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return lite_getPrototypeOf(o); }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar EMPTY_RESULT = [null, null, null, -1];\n\nvar lite_TableLite = /*#__PURE__*/function (_Module) {\n  lite_inherits(TableLite, _Module);\n\n  var _super = lite_createSuper(TableLite);\n\n  function TableLite() {\n    var _this;\n\n    lite_classCallCheck(this, TableLite);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.tableBlots = [TableCell.blotName, TableHeaderCell.blotName];\n\n    _this.tableBlots.forEach(function (blotName) {\n      _this.quill.editor.addImmediateFormat(blotName);\n    });\n\n    _this.integrateClipboard();\n\n    _this.addKeyboardHandlers();\n\n    _this.listenBalanceCells();\n\n    return _this;\n  }\n\n  lite_createClass(TableLite, [{\n    key: \"integrateClipboard\",\n    value: function integrateClipboard() {\n      var _this2 = this;\n\n      this.tableBlots.forEach(function (blotName) {\n        return _this2.quill.clipboard.addTableBlot(blotName);\n      });\n      this.quill.clipboard.addMatcher('tr', matchTable);\n      this.quill.clipboard.addMatcher('table', Object(prepare_attr_matcher[\"a\" /* default */])('table'));\n      this.quill.clipboard.addMatcher('td, th', Object(prepare_attr_matcher[\"a\" /* default */])('cell'));\n    }\n  }, {\n    key: \"addKeyboardHandlers\",\n    value: function addKeyboardHandlers() {\n      var _this3 = this;\n\n      var bindings = TableLite.keyboardBindings;\n      Object.keys(bindings).forEach(function (name) {\n        if (bindings[name]) {\n          _this3.quill.keyboard.addBinding(bindings[name]);\n        }\n      });\n    }\n  }, {\n    key: \"balanceTables\",\n    value: function balanceTables() {\n      this.quill.scroll.descendants(lite_TableContainer).forEach(function (table) {\n        table.balanceCells();\n      });\n    }\n  }, {\n    key: \"deleteColumn\",\n    value: function deleteColumn() {\n      var _this$getTable = this.getTable(),\n          _this$getTable2 = lite_slicedToArray(_this$getTable, 3),\n          table = _this$getTable2[0],\n          cell = _this$getTable2[2];\n\n      if (!Object(is_defined[\"a\" /* default */])(cell)) {\n        return;\n      }\n\n      table.deleteColumn(cell.cellOffset());\n      this.quill.update(core_quill[\"a\" /* default */].sources.USER);\n    }\n  }, {\n    key: \"deleteRow\",\n    value: function deleteRow() {\n      var _this$getTable3 = this.getTable(),\n          _this$getTable4 = lite_slicedToArray(_this$getTable3, 2),\n          row = _this$getTable4[1];\n\n      if (!Object(is_defined[\"a\" /* default */])(row)) {\n        return;\n      }\n\n      row.remove();\n      this.quill.update(core_quill[\"a\" /* default */].sources.USER);\n    }\n  }, {\n    key: \"deleteTable\",\n    value: function deleteTable() {\n      var _this$getTable5 = this.getTable(),\n          _this$getTable6 = lite_slicedToArray(_this$getTable5, 1),\n          table = _this$getTable6[0];\n\n      if (!Object(is_defined[\"a\" /* default */])(table)) {\n        return;\n      }\n\n      var offset = table.offset();\n      table.remove();\n      this.quill.update(core_quill[\"a\" /* default */].sources.USER);\n      this.quill.setSelection(offset, core_quill[\"a\" /* default */].sources.SILENT);\n    }\n  }, {\n    key: \"getTable\",\n    value: function getTable() {\n      var range = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.quill.getSelection();\n\n      if (!Object(is_defined[\"a\" /* default */])(range)) {\n        return EMPTY_RESULT;\n      }\n\n      var _this$quill$getLine = this.quill.getLine(range.index),\n          _this$quill$getLine2 = lite_slicedToArray(_this$quill$getLine, 2),\n          cell = _this$quill$getLine2[0],\n          offset = _this$quill$getLine2[1];\n\n      if (!Object(is_defined[\"a\" /* default */])(cell) || this.tableBlots.indexOf(cell.statics.blotName) === -1) {\n        return EMPTY_RESULT;\n      }\n\n      var row = cell.parent;\n      var table = row.parent.parent;\n      return [table, row, cell, offset];\n    }\n  }, {\n    key: \"insertColumn\",\n    value: function insertColumn(offset) {\n      var range = this.quill.getSelection();\n\n      var _this$getTable7 = this.getTable(range),\n          _this$getTable8 = lite_slicedToArray(_this$getTable7, 3),\n          table = _this$getTable8[0],\n          row = _this$getTable8[1],\n          cell = _this$getTable8[2];\n\n      if (!Object(is_defined[\"a\" /* default */])(cell)) {\n        return;\n      }\n\n      var column = cell.cellOffset();\n      table.insertColumn(column + offset);\n      this.quill.update(core_quill[\"a\" /* default */].sources.USER);\n      var shift = row.rowOffset();\n\n      if (offset === 0) {\n        shift += 1;\n      }\n\n      this.quill.setSelection(range.index + shift, range.length, core_quill[\"a\" /* default */].sources.SILENT);\n    }\n  }, {\n    key: \"insertColumnLeft\",\n    value: function insertColumnLeft() {\n      this.insertColumn(0);\n    }\n  }, {\n    key: \"insertColumnRight\",\n    value: function insertColumnRight() {\n      this.insertColumn(1);\n    }\n  }, {\n    key: \"insertRow\",\n    value: function insertRow(offset) {\n      var range = this.quill.getSelection();\n\n      var _this$getTable9 = this.getTable(range),\n          _this$getTable10 = lite_slicedToArray(_this$getTable9, 3),\n          table = _this$getTable10[0],\n          row = _this$getTable10[1],\n          cell = _this$getTable10[2];\n\n      if (!Object(is_defined[\"a\" /* default */])(cell)) {\n        return;\n      }\n\n      var index = row.rowOffset();\n      table.insertRow(index + offset);\n      this.quill.update(core_quill[\"a\" /* default */].sources.USER);\n\n      if (offset > 0) {\n        this.quill.setSelection(range, core_quill[\"a\" /* default */].sources.SILENT);\n      } else {\n        this.quill.setSelection(range.index + row.children.length, range.length, core_quill[\"a\" /* default */].sources.SILENT);\n      }\n    }\n  }, {\n    key: \"insertRowAbove\",\n    value: function insertRowAbove() {\n      this.insertRow(0);\n    }\n  }, {\n    key: \"insertRowBelow\",\n    value: function insertRowBelow() {\n      this.insertRow(1);\n    }\n  }, {\n    key: \"insertHeaderRow\",\n    value: function insertHeaderRow() {\n      var range = this.quill.getSelection();\n\n      var _this$getTable11 = this.getTable(range),\n          _this$getTable12 = lite_slicedToArray(_this$getTable11, 3),\n          table = _this$getTable12[0],\n          cell = _this$getTable12[2];\n\n      if (!Object(is_defined[\"a\" /* default */])(cell)) {\n        return;\n      }\n\n      table.insertHeaderRow();\n      this.quill.update(core_quill[\"a\" /* default */].sources.USER);\n    }\n  }, {\n    key: \"insertTable\",\n    value: function insertTable(rows, columns) {\n      var range = this.quill.getSelection();\n\n      if (!Object(is_defined[\"a\" /* default */])(range)) {\n        return;\n      }\n\n      var delta = new Array(rows).fill(0).reduce(function (memo) {\n        var text = new Array(columns).fill('\\n').join('');\n        return memo.insert(text, {\n          table: tableId()\n        });\n      }, new Delta_default.a().retain(range.index));\n      this.quill.updateContents(delta, core_quill[\"a\" /* default */].sources.USER);\n      this.quill.setSelection(range.index, core_quill[\"a\" /* default */].sources.SILENT);\n      this.balanceTables();\n    }\n  }, {\n    key: \"tableFormats\",\n    value: function tableFormats() {\n      return this.tableBlots;\n    }\n  }, {\n    key: \"listenBalanceCells\",\n    value: function listenBalanceCells() {\n      var _this4 = this;\n\n      this.quill.on(core_quill[\"a\" /* default */].events.SCROLL_OPTIMIZE, function (mutations) {\n        mutations.some(function (mutation) {\n          if (['TD', 'TH', 'TR', 'TBODY', 'THEAD', 'TABLE'].indexOf(mutation.target.tagName) !== -1) {\n            _this4.quill.once(core_quill[\"a\" /* default */].events.TEXT_CHANGE, function (delta, old, source) {\n              if (source !== core_quill[\"a\" /* default */].sources.USER) return;\n\n              _this4.balanceTables();\n            });\n\n            return true;\n          }\n\n          return false;\n        });\n      });\n      this.quill.on(core_quill[\"a\" /* default */].events.CONTENT_SETTED, function () {\n        _this4.quill.once(core_quill[\"a\" /* default */].events.TEXT_CHANGE, function () {\n          _this4.balanceTables();\n        });\n      });\n    }\n  }], [{\n    key: \"register\",\n    value: function register() {\n      core_quill[\"a\" /* default */].register(TableHeaderCell, true);\n      core_quill[\"a\" /* default */].register(TableCell, true);\n      core_quill[\"a\" /* default */].register(TableHeaderRow, true);\n      core_quill[\"a\" /* default */].register(TableRow, true);\n      core_quill[\"a\" /* default */].register(TableBody, true);\n      core_quill[\"a\" /* default */].register(TableHeader, true);\n      core_quill[\"a\" /* default */].register(lite_TableContainer, true);\n      [attributors_table[\"b\" /* TABLE_FORMATS */], attributors_cell[\"b\" /* CELL_FORMATS */]].forEach(function (formats) {\n        Object.keys(formats).forEach(function (name) {\n          core_quill[\"a\" /* default */].register(_defineProperty({}, \"formats/\".concat(name), formats[name]), true);\n        });\n      });\n    }\n  }]);\n\n  return TableLite;\n}(core_module[\"a\" /* default */]);\n\nlite_TableLite.keyboardBindings = {\n  'table backspace': {\n    key: 'backspace',\n    format: ['table', 'tableHeaderCell'],\n    collapsed: true,\n    offset: 0,\n    handler: function handler() {}\n  },\n  'table delete': {\n    key: 'del',\n    format: ['table', 'tableHeaderCell'],\n    collapsed: true,\n    suffix: /^$/,\n    handler: function handler() {}\n  },\n  'table enter': {\n    key: 'enter',\n    shiftKey: null,\n    format: ['table'],\n    handler: function handler(range) {\n      var module = this.quill.getModule('table');\n\n      if (module) {\n        var quill = this.quill;\n\n        var _module$getTable = module.getTable(range),\n            _module$getTable2 = lite_slicedToArray(_module$getTable, 4),\n            table = _module$getTable2[0],\n            row = _module$getTable2[1],\n            cell = _module$getTable2[2],\n            offset = _module$getTable2[3];\n\n        var shift = tableSide(row, cell, offset);\n        var hasHead = table.children.length > 1 && table.children.head;\n\n        if (shift == null || shift < 0 && hasHead) {\n          return;\n        }\n\n        var index = table.offset();\n\n        if (shift < 0) {\n          insertParagraphAbove({\n            quill: quill,\n            index: index,\n            range: range\n          });\n        } else {\n          insertParagraphBelow({\n            quill: quill,\n            index: index,\n            table: table\n          });\n        }\n      }\n    }\n  },\n  'table header enter': {\n    key: 'enter',\n    shiftKey: null,\n    format: ['tableHeaderCell'],\n    handler: function handler(range) {\n      var module = this.quill.getModule('table');\n\n      if (module) {\n        var quill = this.quill;\n\n        var _module$getTable3 = module.getTable(range),\n            _module$getTable4 = lite_slicedToArray(_module$getTable3, 4),\n            table = _module$getTable4[0],\n            row = _module$getTable4[1],\n            cell = _module$getTable4[2],\n            offset = _module$getTable4[3];\n\n        var shift = tableSide(row, cell, offset);\n\n        if (shift == null) {\n          return;\n        }\n\n        var index = table.offset();\n        var hasBody = table.children.length > 1 && table.children.tail;\n\n        if (shift < 0 || shift > 0 && hasBody) {\n          insertParagraphAbove({\n            quill: quill,\n            index: index,\n            range: range\n          });\n        } else {\n          insertParagraphBelow({\n            quill: quill,\n            index: index,\n            table: table\n          });\n        }\n      }\n    }\n  },\n  'table tab': {\n    key: 'tab',\n    shiftKey: null,\n    format: ['table', 'tableHeaderCell'],\n    handler: function handler(range, context) {\n      var event = context.event,\n          cell = context.line;\n      var offset = cell.offset(this.quill.scroll);\n\n      if (event.shiftKey) {\n        this.quill.setSelection(offset - 1, core_quill[\"a\" /* default */].sources.USER);\n      } else {\n        this.quill.setSelection(offset + cell.length(), core_quill[\"a\" /* default */].sources.USER);\n      }\n    }\n  },\n  'table down': Object(make_table_arrow_handler[\"a\" /* default */])(false, ['table', 'tableHeaderCell']),\n  'table up': Object(make_table_arrow_handler[\"a\" /* default */])(true, ['table', 'tableHeaderCell'])\n};\n\nfunction matchTable(node, delta) {\n  var table = node.parentNode.tagName === 'TABLE' ? node.parentNode : node.parentNode.parentNode;\n  var isHeaderRow = node.parentNode.tagName === 'THEAD' ? true : null;\n  var rows = Array.from(table.querySelectorAll('tr'));\n  var row = rows.indexOf(node) + 1;\n  return Object(clipboard[\"a\" /* applyFormat */])(delta, isHeaderRow ? 'tableHeaderCell' : 'table', row);\n}\n\n/* harmony default export */ var lite = __webpack_exports__[\"a\"] = (lite_TableLite);\n\n/***/ }),\n/* 72 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return SyntaxCodeBlock; });\n/* unused harmony export CodeToken */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return Syntax; });\n/* harmony import */ var quill_delta__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);\n/* harmony import */ var quill_delta__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(quill_delta__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var parchment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);\n/* harmony import */ var _blots_inline__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(16);\n/* harmony import */ var _core_quill__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(0);\n/* harmony import */ var _core_module__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(14);\n/* harmony import */ var _blots_block__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(6);\n/* harmony import */ var _blots_break__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(12);\n/* harmony import */ var _blots_cursor__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(24);\n/* harmony import */ var _blots_text__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(11);\n/* harmony import */ var _formats_code__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(19);\n/* harmony import */ var _clipboard__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(28);\n/* harmony import */ var _utils_has_window__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(17);\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar TokenAttributor = new parchment__WEBPACK_IMPORTED_MODULE_1__[\"ClassAttributor\"]('code-token', 'hljs', {\n  scope: parchment__WEBPACK_IMPORTED_MODULE_1__[\"Scope\"].INLINE\n});\n\nvar CodeToken = /*#__PURE__*/function (_Inline) {\n  _inherits(CodeToken, _Inline);\n\n  var _super = _createSuper(CodeToken);\n\n  function CodeToken(scroll, domNode, value) {\n    var _this;\n\n    _classCallCheck(this, CodeToken);\n\n    _this = _super.call(this, scroll, domNode, value);\n    TokenAttributor.add(_this.domNode, value);\n    return _this;\n  }\n\n  _createClass(CodeToken, [{\n    key: \"format\",\n    value: function format(_format, value) {\n      if (_format !== CodeToken.blotName) {\n        _get(_getPrototypeOf(CodeToken.prototype), \"format\", this).call(this, _format, value);\n      } else if (value) {\n        TokenAttributor.add(this.domNode, value);\n      } else {\n        TokenAttributor.remove(this.domNode);\n        this.domNode.classList.remove(this.statics.className);\n      }\n    }\n  }, {\n    key: \"optimize\",\n    value: function optimize() {\n      var _get2;\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      (_get2 = _get(_getPrototypeOf(CodeToken.prototype), \"optimize\", this)).call.apply(_get2, [this].concat(args));\n\n      if (!TokenAttributor.value(this.domNode)) {\n        this.unwrap();\n      }\n    }\n  }], [{\n    key: \"formats\",\n    value: function formats(node, scroll) {\n      while (node != null && node !== scroll.domNode) {\n        if (node.classList && node.classList.contains(_formats_code__WEBPACK_IMPORTED_MODULE_9__[/* default */ \"c\"].className)) {\n          return _get(_getPrototypeOf(CodeToken), \"formats\", this).call(this, node, scroll);\n        }\n\n        node = node.parentNode;\n      }\n\n      return undefined;\n    }\n  }]);\n\n  return CodeToken;\n}(_blots_inline__WEBPACK_IMPORTED_MODULE_2__[/* default */ \"a\"]);\n\nCodeToken.blotName = 'code-token';\nCodeToken.className = 'ql-token';\n\nvar SyntaxCodeBlock = /*#__PURE__*/function (_CodeBlock) {\n  _inherits(SyntaxCodeBlock, _CodeBlock);\n\n  var _super2 = _createSuper(SyntaxCodeBlock);\n\n  function SyntaxCodeBlock() {\n    _classCallCheck(this, SyntaxCodeBlock);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(SyntaxCodeBlock, [{\n    key: \"format\",\n    value: // Syntax module will register\n    function format(name, value) {\n      if (name === this.statics.blotName && value) {\n        this.domNode.setAttribute('data-language', value);\n      } else {\n        _get(_getPrototypeOf(SyntaxCodeBlock.prototype), \"format\", this).call(this, name, value);\n      }\n    }\n  }, {\n    key: \"replaceWith\",\n    value: function replaceWith(name, value) {\n      this.formatAt(0, this.length(), CodeToken.blotName, false);\n      return _get(_getPrototypeOf(SyntaxCodeBlock.prototype), \"replaceWith\", this).call(this, name, value);\n    }\n  }], [{\n    key: \"create\",\n    value: function create(value) {\n      var domNode = _get(_getPrototypeOf(SyntaxCodeBlock), \"create\", this).call(this, value);\n\n      if (typeof value === 'string') {\n        domNode.setAttribute('data-language', value);\n      }\n\n      return domNode;\n    }\n  }, {\n    key: \"formats\",\n    value: function formats(domNode) {\n      return domNode.getAttribute('data-language') || 'plain';\n    }\n  }, {\n    key: \"register\",\n    value: function register() {}\n  }]);\n\n  return SyntaxCodeBlock;\n}(_formats_code__WEBPACK_IMPORTED_MODULE_9__[/* default */ \"c\"]);\n\nvar SyntaxCodeBlockContainer = /*#__PURE__*/function (_CodeBlockContainer) {\n  _inherits(SyntaxCodeBlockContainer, _CodeBlockContainer);\n\n  var _super3 = _createSuper(SyntaxCodeBlockContainer);\n\n  function SyntaxCodeBlockContainer() {\n    _classCallCheck(this, SyntaxCodeBlockContainer);\n\n    return _super3.apply(this, arguments);\n  }\n\n  _createClass(SyntaxCodeBlockContainer, [{\n    key: \"attach\",\n    value: function attach() {\n      _get(_getPrototypeOf(SyntaxCodeBlockContainer.prototype), \"attach\", this).call(this);\n\n      this.forceNext = false;\n      this.scroll.emitMount(this);\n    }\n  }, {\n    key: \"format\",\n    value: function format(name, value) {\n      if (name === SyntaxCodeBlock.blotName) {\n        this.forceNext = true;\n        this.children.forEach(function (child) {\n          child.format(name, value);\n        });\n      }\n    }\n  }, {\n    key: \"formatAt\",\n    value: function formatAt(index, length, name, value) {\n      if (name === SyntaxCodeBlock.blotName) {\n        this.forceNext = true;\n      }\n\n      _get(_getPrototypeOf(SyntaxCodeBlockContainer.prototype), \"formatAt\", this).call(this, index, length, name, value);\n    }\n  }, {\n    key: \"highlight\",\n    value: function highlight(_highlight) {\n      var _this2 = this;\n\n      var forced = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      if (this.children.head == null) return;\n      var nodes = Array.from(this.domNode.childNodes).filter(function (node) {\n        return node !== _this2.uiNode;\n      });\n      var text = \"\".concat(nodes.map(function (node) {\n        return node.textContent;\n      }).join('\\n'), \"\\n\");\n      var language = SyntaxCodeBlock.formats(this.children.head.domNode);\n\n      if (forced || this.forceNext || this.cachedText !== text) {\n        if (text.trim().length > 0 || this.cachedText == null) {\n          var oldDelta = this.children.reduce(function (delta, child) {\n            return delta.concat(Object(_blots_block__WEBPACK_IMPORTED_MODULE_5__[/* blockDelta */ \"b\"])(child, false));\n          }, new quill_delta__WEBPACK_IMPORTED_MODULE_0___default.a());\n\n          var delta = _highlight(text, language);\n\n          oldDelta.diff(delta).reduce(function (index, _ref) {\n            var retain = _ref.retain,\n                attributes = _ref.attributes;\n            // Should be all retains\n            if (!retain) return index;\n\n            if (attributes) {\n              Object.keys(attributes).forEach(function (format) {\n                if ([SyntaxCodeBlock.blotName, CodeToken.blotName].indexOf(format) !== -1) {\n                  _this2.formatAt(index, retain, format, attributes[format]);\n                }\n              });\n            }\n\n            return index + retain;\n          }, 0);\n        }\n\n        this.cachedText = text;\n        this.forceNext = false;\n      }\n    }\n  }, {\n    key: \"html\",\n    value: function html(index, length) {\n      var _this$children$find = this.children.find(index),\n          _this$children$find2 = _slicedToArray(_this$children$find, 1),\n          codeBlock = _this$children$find2[0];\n\n      var language = codeBlock ? SyntaxCodeBlock.formats(codeBlock.domNode) : 'plain';\n      return \"<pre data-language=\\\"\".concat(language, \"\\\">\\n\").concat(this.code(index, length), \"\\n</pre>\");\n    }\n  }, {\n    key: \"optimize\",\n    value: function optimize(context) {\n      _get(_getPrototypeOf(SyntaxCodeBlockContainer.prototype), \"optimize\", this).call(this, context);\n\n      if (this.parent != null && this.children.head != null && this.uiNode != null) {\n        var language = SyntaxCodeBlock.formats(this.children.head.domNode);\n\n        if (language !== this.uiNode.value) {\n          this.uiNode.value = language;\n        }\n      }\n    }\n  }]);\n\n  return SyntaxCodeBlockContainer;\n}(_formats_code__WEBPACK_IMPORTED_MODULE_9__[/* CodeBlockContainer */ \"b\"]);\n\nSyntaxCodeBlockContainer.allowedChildren = [SyntaxCodeBlock];\nSyntaxCodeBlock.requiredContainer = SyntaxCodeBlockContainer;\nSyntaxCodeBlock.allowedChildren = [CodeToken, _blots_cursor__WEBPACK_IMPORTED_MODULE_7__[/* default */ \"a\"], _blots_text__WEBPACK_IMPORTED_MODULE_8__[/* default */ \"a\"], _blots_break__WEBPACK_IMPORTED_MODULE_6__[/* default */ \"a\"]];\n\nvar Syntax = /*#__PURE__*/function (_Module) {\n  _inherits(Syntax, _Module);\n\n  var _super4 = _createSuper(Syntax);\n\n  function Syntax(quill, options) {\n    var _this3;\n\n    _classCallCheck(this, Syntax);\n\n    _this3 = _super4.call(this, quill, options);\n\n    if (_this3.options.hljs == null) {\n      throw new Error('Syntax module requires highlight.js. Please include the library on the page before Quill.');\n    }\n\n    _this3.languages = _this3.options.languages.reduce(function (memo, _ref2) {\n      var key = _ref2.key;\n      memo[key] = true;\n      return memo;\n    }, {});\n    _this3.highlightBlot = _this3.highlightBlot.bind(_assertThisInitialized(_this3));\n\n    _this3.initListener();\n\n    _this3.initTimer();\n\n    return _this3;\n  }\n\n  _createClass(Syntax, [{\n    key: \"initListener\",\n    value: function initListener() {\n      var _this4 = this;\n\n      this.quill.on(_core_quill__WEBPACK_IMPORTED_MODULE_3__[/* default */ \"a\"].events.SCROLL_BLOT_MOUNT, function (blot) {\n        if (!(blot instanceof SyntaxCodeBlockContainer)) return;\n\n        var select = _this4.quill.root.ownerDocument.createElement('select');\n\n        _this4.options.languages.forEach(function (_ref3) {\n          var key = _ref3.key,\n              label = _ref3.label;\n          var option = select.ownerDocument.createElement('option');\n          option.textContent = label;\n          option.setAttribute('value', key);\n          select.appendChild(option);\n        });\n\n        select.addEventListener('change', function () {\n          blot.format(SyntaxCodeBlock.blotName, select.value);\n\n          _this4.quill.root.focus(); // Prevent scrolling\n\n\n          _this4.highlight(blot, true);\n        });\n\n        if (blot.uiNode == null) {\n          blot.attachUI(select);\n\n          if (blot.children.head) {\n            select.value = SyntaxCodeBlock.formats(blot.children.head.domNode);\n          }\n        }\n      });\n    }\n  }, {\n    key: \"initTimer\",\n    value: function initTimer() {\n      var _this5 = this;\n\n      var timer = null;\n      this.quill.on(_core_quill__WEBPACK_IMPORTED_MODULE_3__[/* default */ \"a\"].events.SCROLL_OPTIMIZE, function () {\n        clearTimeout(timer);\n        timer = setTimeout(function () {\n          _this5.highlight();\n\n          timer = null;\n        }, _this5.options.interval);\n      });\n    }\n  }, {\n    key: \"highlight\",\n    value: function highlight() {\n      var _this6 = this;\n\n      var blot = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      if (this.quill.selection.composing) return;\n      this.quill.update(_core_quill__WEBPACK_IMPORTED_MODULE_3__[/* default */ \"a\"].sources.USER);\n      var range = this.quill.getSelection();\n      var blots = blot == null ? this.quill.scroll.descendants(SyntaxCodeBlockContainer) : [blot];\n      blots.forEach(function (container) {\n        container.highlight(_this6.highlightBlot, force);\n      });\n      this.quill.update(_core_quill__WEBPACK_IMPORTED_MODULE_3__[/* default */ \"a\"].sources.SILENT);\n\n      if (range != null) {\n        this.quill.setSelection(range, _core_quill__WEBPACK_IMPORTED_MODULE_3__[/* default */ \"a\"].sources.SILENT);\n      }\n    }\n  }, {\n    key: \"highlightBlot\",\n    value: function highlightBlot(text) {\n      var language = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'plain';\n      language = this.languages[language] ? language : 'plain';\n\n      if (language === 'plain') {\n        return Object(_blots_text__WEBPACK_IMPORTED_MODULE_8__[/* escapeText */ \"b\"])(text).split('\\n').reduce(function (delta, line, i) {\n          if (i !== 0) {\n            delta.insert('\\n', _defineProperty({}, _formats_code__WEBPACK_IMPORTED_MODULE_9__[/* default */ \"c\"].blotName, language));\n          }\n\n          return delta.insert(line);\n        }, new quill_delta__WEBPACK_IMPORTED_MODULE_0___default.a());\n      }\n\n      var container = this.quill.root.ownerDocument.createElement('div');\n      container.classList.add(_formats_code__WEBPACK_IMPORTED_MODULE_9__[/* default */ \"c\"].className);\n      container.innerHTML = this.options.hljs.highlight(language, text).value;\n      return Object(_clipboard__WEBPACK_IMPORTED_MODULE_10__[/* traverse */ \"d\"])(this.quill.scroll, container, [function (node, delta) {\n        var value = TokenAttributor.value(node);\n\n        if (value) {\n          return delta.compose(new quill_delta__WEBPACK_IMPORTED_MODULE_0___default.a().retain(delta.length(), _defineProperty({}, CodeToken.blotName, value)));\n        }\n\n        return delta;\n      }], [function (node, delta) {\n        return node.data.split('\\n').reduce(function (memo, nodeText, i) {\n          if (i !== 0) memo.insert('\\n', _defineProperty({}, _formats_code__WEBPACK_IMPORTED_MODULE_9__[/* default */ \"c\"].blotName, language));\n          return memo.insert(nodeText);\n        }, delta);\n      }], new WeakMap());\n    }\n  }], [{\n    key: \"register\",\n    value: function register() {\n      _core_quill__WEBPACK_IMPORTED_MODULE_3__[/* default */ \"a\"].register(CodeToken, true);\n      _core_quill__WEBPACK_IMPORTED_MODULE_3__[/* default */ \"a\"].register(SyntaxCodeBlock, true);\n      _core_quill__WEBPACK_IMPORTED_MODULE_3__[/* default */ \"a\"].register(SyntaxCodeBlockContainer, true);\n    }\n  }]);\n\n  return Syntax;\n}(_core_module__WEBPACK_IMPORTED_MODULE_4__[/* default */ \"a\"]);\n\nSyntax.DEFAULTS = {\n  hljs: function () {\n    if (Object(_utils_has_window__WEBPACK_IMPORTED_MODULE_11__[/* default */ \"a\"])()) {\n      return window.hljs;\n    }\n\n    return null;\n  }(),\n  interval: 1000,\n  languages: [{\n    key: 'plain',\n    label: 'Plain'\n  }, {\n    key: 'bash',\n    label: 'Bash'\n  }, {\n    key: 'cpp',\n    label: 'C++'\n  }, {\n    key: 'cs',\n    label: 'C#'\n  }, {\n    key: 'css',\n    label: 'CSS'\n  }, {\n    key: 'diff',\n    label: 'Diff'\n  }, {\n    key: 'xml',\n    label: 'HTML/XML'\n  }, {\n    key: 'java',\n    label: 'Java'\n  }, {\n    key: 'javascript',\n    label: 'Javascript'\n  }, {\n    key: 'markdown',\n    label: 'Markdown'\n  }, {\n    key: 'php',\n    label: 'PHP'\n  }, {\n    key: 'python',\n    label: 'Python'\n  }, {\n    key: 'ruby',\n    label: 'Ruby'\n  }, {\n    key: 'sql',\n    label: 'SQL'\n  }]\n};\n\n\n/***/ }),\n/* 73 */\n/***/ (function(module, exports) {\n\nvar ceil = Math.ceil;\nvar floor = Math.floor;\n\n// `ToIntegerOrInfinity` abstract operation\n// https://tc39.es/ecma262/#sec-tointegerorinfinity\nmodule.exports = function (argument) {\n  var number = +argument;\n  // eslint-disable-next-line no-self-compare -- safe\n  return number !== number || number === 0 ? 0 : (number > 0 ? floor : ceil)(number);\n};\n\n\n/***/ }),\n/* 74 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar global = __webpack_require__(10);\nvar classof = __webpack_require__(75);\n\nvar String = global.String;\n\nmodule.exports = function (argument) {\n  if (classof(argument) === 'Symbol') throw TypeError('Cannot convert a Symbol value to a string');\n  return String(argument);\n};\n\n\n/***/ }),\n/* 75 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar global = __webpack_require__(10);\nvar TO_STRING_TAG_SUPPORT = __webpack_require__(122);\nvar isCallable = __webpack_require__(22);\nvar classofRaw = __webpack_require__(78);\nvar wellKnownSymbol = __webpack_require__(27);\n\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\nvar Object = global.Object;\n\n// ES3 wrong here\nvar CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) == 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function (it, key) {\n  try {\n    return it[key];\n  } catch (error) { /* empty */ }\n};\n\n// getting tag from ES6+ `Object.prototype.toString`\nmodule.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function (it) {\n  var O, tag, result;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (tag = tryGet(O = Object(it), TO_STRING_TAG)) == 'string' ? tag\n    // builtinTag case\n    : CORRECT_ARGUMENTS ? classofRaw(O)\n    // ES3 arguments fallback\n    : (result = classofRaw(O)) == 'Object' && isCallable(O.callee) ? 'Arguments' : result;\n};\n\n\n/***/ }),\n/* 76 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar global = __webpack_require__(10);\nvar setGlobal = __webpack_require__(77);\n\nvar SHARED = '__core-js_shared__';\nvar store = global[SHARED] || setGlobal(SHARED, {});\n\nmodule.exports = store;\n\n\n/***/ }),\n/* 77 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar global = __webpack_require__(10);\n\n// eslint-disable-next-line es/no-object-defineproperty -- safe\nvar defineProperty = Object.defineProperty;\n\nmodule.exports = function (key, value) {\n  try {\n    defineProperty(global, key, { value: value, configurable: true, writable: true });\n  } catch (error) {\n    global[key] = value;\n  } return value;\n};\n\n\n/***/ }),\n/* 78 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar uncurryThis = __webpack_require__(21);\n\nvar toString = uncurryThis({}.toString);\nvar stringSlice = uncurryThis(''.slice);\n\nmodule.exports = function (it) {\n  return stringSlice(toString(it), 8, -1);\n};\n\n\n/***/ }),\n/* 79 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar uncurryThis = __webpack_require__(21);\nvar isCallable = __webpack_require__(22);\nvar store = __webpack_require__(76);\n\nvar functionToString = uncurryThis(Function.toString);\n\n// this helper broken in `core-js@3.4.1-3.4.4`, so we can't use `shared` helper\nif (!isCallable(store.inspectSource)) {\n  store.inspectSource = function (it) {\n    return functionToString(it);\n  };\n}\n\nmodule.exports = store.inspectSource;\n\n\n/***/ }),\n/* 80 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar toPrimitive = __webpack_require__(126);\nvar isSymbol = __webpack_require__(99);\n\n// `ToPropertyKey` abstract operation\n// https://tc39.es/ecma262/#sec-topropertykey\nmodule.exports = function (argument) {\n  var key = toPrimitive(argument, 'string');\n  return isSymbol(key) ? key : key + '';\n};\n\n\n/***/ }),\n/* 81 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar aCallable = __webpack_require__(82);\n\n// `GetMethod` abstract operation\n// https://tc39.es/ecma262/#sec-getmethod\nmodule.exports = function (V, P) {\n  var func = V[P];\n  return func == null ? undefined : aCallable(func);\n};\n\n\n/***/ }),\n/* 82 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar global = __webpack_require__(10);\nvar isCallable = __webpack_require__(22);\nvar tryToString = __webpack_require__(100);\n\nvar TypeError = global.TypeError;\n\n// `Assert: IsCallable(argument) is true`\nmodule.exports = function (argument) {\n  if (isCallable(argument)) return argument;\n  throw TypeError(tryToString(argument) + ' is not a function');\n};\n\n\n/***/ }),\n/* 83 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar shared = __webpack_require__(92);\nvar uid = __webpack_require__(93);\n\nvar keys = shared('keys');\n\nmodule.exports = function (key) {\n  return keys[key] || (keys[key] = uid(key));\n};\n\n\n/***/ }),\n/* 84 */\n/***/ (function(module, exports) {\n\nmodule.exports = {};\n\n\n/***/ }),\n/* 85 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar DESCRIPTORS = __webpack_require__(38);\nvar call = __webpack_require__(39);\nvar propertyIsEnumerableModule = __webpack_require__(101);\nvar createPropertyDescriptor = __webpack_require__(67);\nvar toIndexedObject = __webpack_require__(58);\nvar toPropertyKey = __webpack_require__(80);\nvar hasOwn = __webpack_require__(33);\nvar IE8_DOM_DEFINE = __webpack_require__(97);\n\n// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\nvar $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n\n// `Object.getOwnPropertyDescriptor` method\n// https://tc39.es/ecma262/#sec-object.getownpropertydescriptor\nexports.f = DESCRIPTORS ? $getOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {\n  O = toIndexedObject(O);\n  P = toPropertyKey(P);\n  if (IE8_DOM_DEFINE) try {\n    return $getOwnPropertyDescriptor(O, P);\n  } catch (error) { /* empty */ }\n  if (hasOwn(O, P)) return createPropertyDescriptor(!call(propertyIsEnumerableModule.f, O, P), O[P]);\n};\n\n\n/***/ }),\n/* 86 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar global = __webpack_require__(10);\nvar isCallable = __webpack_require__(22);\nvar hasOwn = __webpack_require__(33);\nvar createNonEnumerableProperty = __webpack_require__(66);\nvar setGlobal = __webpack_require__(77);\nvar inspectSource = __webpack_require__(79);\nvar InternalStateModule = __webpack_require__(96);\nvar CONFIGURABLE_FUNCTION_NAME = __webpack_require__(102).CONFIGURABLE;\n\nvar getInternalState = InternalStateModule.get;\nvar enforceInternalState = InternalStateModule.enforce;\nvar TEMPLATE = String(String).split('String');\n\n(module.exports = function (O, key, value, options) {\n  var unsafe = options ? !!options.unsafe : false;\n  var simple = options ? !!options.enumerable : false;\n  var noTargetGet = options ? !!options.noTargetGet : false;\n  var name = options && options.name !== undefined ? options.name : key;\n  var state;\n  if (isCallable(value)) {\n    if (String(name).slice(0, 7) === 'Symbol(') {\n      name = '[' + String(name).replace(/^Symbol\\(([^)]*)\\)/, '$1') + ']';\n    }\n    if (!hasOwn(value, 'name') || (CONFIGURABLE_FUNCTION_NAME && value.name !== name)) {\n      createNonEnumerableProperty(value, 'name', name);\n    }\n    state = enforceInternalState(value);\n    if (!state.source) {\n      state.source = TEMPLATE.join(typeof name == 'string' ? name : '');\n    }\n  }\n  if (O === global) {\n    if (simple) O[key] = value;\n    else setGlobal(key, value);\n    return;\n  } else if (!unsafe) {\n    delete O[key];\n  } else if (!noTargetGet && O[key]) {\n    simple = true;\n  }\n  if (simple) O[key] = value;\n  else createNonEnumerableProperty(O, key, value);\n// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n})(Function.prototype, 'toString', function toString() {\n  return isCallable(this) && getInternalState(this).source || inspectSource(this);\n});\n\n\n/***/ }),\n/* 87 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar toLength = __webpack_require__(105);\n\n// `LengthOfArrayLike` abstract operation\n// https://tc39.es/ecma262/#sec-lengthofarraylike\nmodule.exports = function (obj) {\n  return toLength(obj.length);\n};\n\n\n/***/ }),\n/* 88 */\n/***/ (function(module, exports) {\n\n// IE8- don't enum bug keys\nmodule.exports = [\n  'constructor',\n  'hasOwnProperty',\n  'isPrototypeOf',\n  'propertyIsEnumerable',\n  'toLocaleString',\n  'toString',\n  'valueOf'\n];\n\n\n/***/ }),\n/* 89 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* global ActiveXObject -- old IE, WSH */\nvar anObject = __webpack_require__(37);\nvar defineProperties = __webpack_require__(138);\nvar enumBugKeys = __webpack_require__(88);\nvar hiddenKeys = __webpack_require__(84);\nvar html = __webpack_require__(139);\nvar documentCreateElement = __webpack_require__(98);\nvar sharedKey = __webpack_require__(83);\n\nvar GT = '>';\nvar LT = '<';\nvar PROTOTYPE = 'prototype';\nvar SCRIPT = 'script';\nvar IE_PROTO = sharedKey('IE_PROTO');\n\nvar EmptyConstructor = function () { /* empty */ };\n\nvar scriptTag = function (content) {\n  return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;\n};\n\n// Create object with fake `null` prototype: use ActiveX Object with cleared prototype\nvar NullProtoObjectViaActiveX = function (activeXDocument) {\n  activeXDocument.write(scriptTag(''));\n  activeXDocument.close();\n  var temp = activeXDocument.parentWindow.Object;\n  activeXDocument = null; // avoid memory leak\n  return temp;\n};\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar NullProtoObjectViaIFrame = function () {\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = documentCreateElement('iframe');\n  var JS = 'java' + SCRIPT + ':';\n  var iframeDocument;\n  iframe.style.display = 'none';\n  html.appendChild(iframe);\n  // https://github.com/zloirock/core-js/issues/475\n  iframe.src = String(JS);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(scriptTag('document.F=Object'));\n  iframeDocument.close();\n  return iframeDocument.F;\n};\n\n// Check for document.domain and active x support\n// No need to use active x approach when document.domain is not set\n// see https://github.com/es-shims/es5-shim/issues/150\n// variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346\n// avoid IE GC bug\nvar activeXDocument;\nvar NullProtoObject = function () {\n  try {\n    activeXDocument = new ActiveXObject('htmlfile');\n  } catch (error) { /* ignore */ }\n  NullProtoObject = typeof document != 'undefined'\n    ? document.domain && activeXDocument\n      ? NullProtoObjectViaActiveX(activeXDocument) // old IE\n      : NullProtoObjectViaIFrame()\n    : NullProtoObjectViaActiveX(activeXDocument); // WSH\n  var length = enumBugKeys.length;\n  while (length--) delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];\n  return NullProtoObject();\n};\n\nhiddenKeys[IE_PROTO] = true;\n\n// `Object.create` method\n// https://tc39.es/ecma262/#sec-object.create\nmodule.exports = Object.create || function create(O, Properties) {\n  var result;\n  if (O !== null) {\n    EmptyConstructor[PROTOTYPE] = anObject(O);\n    result = new EmptyConstructor();\n    EmptyConstructor[PROTOTYPE] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO] = O;\n  } else result = NullProtoObject();\n  return Properties === undefined ? result : defineProperties(result, Properties);\n};\n\n\n/***/ }),\n/* 90 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Iterator_1 = __importDefault(__webpack_require__(116));\nvar Op;\n(function (Op) {\n    function iterator(ops) {\n        return new Iterator_1.default(ops);\n    }\n    Op.iterator = iterator;\n    function length(op) {\n        if (typeof op.delete === 'number') {\n            return op.delete;\n        }\n        else if (typeof op.retain === 'number') {\n            return op.retain;\n        }\n        else {\n            return typeof op.insert === 'string' ? op.insert.length : 1;\n        }\n    }\n    Op.length = length;\n})(Op || (Op = {}));\nexports.default = Op;\n\n\n/***/ }),\n/* 91 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif (true) {\n  module.exports = EventEmitter;\n}\n\n\n/***/ }),\n/* 92 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar IS_PURE = __webpack_require__(63);\nvar store = __webpack_require__(76);\n\n(module.exports = function (key, value) {\n  return store[key] || (store[key] = value !== undefined ? value : {});\n})('versions', []).push({\n  version: '3.19.1',\n  mode: IS_PURE ? 'pure' : 'global',\n  copyright: '© 2021 Denis Pushkarev (zloirock.ru)'\n});\n\n\n/***/ }),\n/* 93 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar uncurryThis = __webpack_require__(21);\n\nvar id = 0;\nvar postfix = Math.random();\nvar toString = uncurryThis(1.0.toString);\n\nmodule.exports = function (key) {\n  return 'Symbol(' + (key === undefined ? '' : key) + ')_' + toString(++id + postfix, 36);\n};\n\n\n/***/ }),\n/* 94 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* eslint-disable es/no-symbol -- required for testing */\nvar V8_VERSION = __webpack_require__(123);\nvar fails = __webpack_require__(36);\n\n// eslint-disable-next-line es/no-object-getownpropertysymbols -- required for testing\nmodule.exports = !!Object.getOwnPropertySymbols && !fails(function () {\n  var symbol = Symbol();\n  // Chrome 38 Symbol has incorrect toString conversion\n  // `get-own-property-symbols` polyfill symbols converted to object are not Symbol instances\n  return !String(symbol) || !(Object(symbol) instanceof Symbol) ||\n    // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances\n    !Symbol.sham && V8_VERSION && V8_VERSION < 41;\n});\n\n\n/***/ }),\n/* 95 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* eslint-disable es/no-symbol -- required for testing */\nvar NATIVE_SYMBOL = __webpack_require__(94);\n\nmodule.exports = NATIVE_SYMBOL\n  && !Symbol.sham\n  && typeof Symbol.iterator == 'symbol';\n\n\n/***/ }),\n/* 96 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar NATIVE_WEAK_MAP = __webpack_require__(125);\nvar global = __webpack_require__(10);\nvar uncurryThis = __webpack_require__(21);\nvar isObject = __webpack_require__(48);\nvar createNonEnumerableProperty = __webpack_require__(66);\nvar hasOwn = __webpack_require__(33);\nvar shared = __webpack_require__(76);\nvar sharedKey = __webpack_require__(83);\nvar hiddenKeys = __webpack_require__(84);\n\nvar OBJECT_ALREADY_INITIALIZED = 'Object already initialized';\nvar TypeError = global.TypeError;\nvar WeakMap = global.WeakMap;\nvar set, get, has;\n\nvar enforce = function (it) {\n  return has(it) ? get(it) : set(it, {});\n};\n\nvar getterFor = function (TYPE) {\n  return function (it) {\n    var state;\n    if (!isObject(it) || (state = get(it)).type !== TYPE) {\n      throw TypeError('Incompatible receiver, ' + TYPE + ' required');\n    } return state;\n  };\n};\n\nif (NATIVE_WEAK_MAP || shared.state) {\n  var store = shared.state || (shared.state = new WeakMap());\n  var wmget = uncurryThis(store.get);\n  var wmhas = uncurryThis(store.has);\n  var wmset = uncurryThis(store.set);\n  set = function (it, metadata) {\n    if (wmhas(store, it)) throw new TypeError(OBJECT_ALREADY_INITIALIZED);\n    metadata.facade = it;\n    wmset(store, it, metadata);\n    return metadata;\n  };\n  get = function (it) {\n    return wmget(store, it) || {};\n  };\n  has = function (it) {\n    return wmhas(store, it);\n  };\n} else {\n  var STATE = sharedKey('state');\n  hiddenKeys[STATE] = true;\n  set = function (it, metadata) {\n    if (hasOwn(it, STATE)) throw new TypeError(OBJECT_ALREADY_INITIALIZED);\n    metadata.facade = it;\n    createNonEnumerableProperty(it, STATE, metadata);\n    return metadata;\n  };\n  get = function (it) {\n    return hasOwn(it, STATE) ? it[STATE] : {};\n  };\n  has = function (it) {\n    return hasOwn(it, STATE);\n  };\n}\n\nmodule.exports = {\n  set: set,\n  get: get,\n  has: has,\n  enforce: enforce,\n  getterFor: getterFor\n};\n\n\n/***/ }),\n/* 97 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar DESCRIPTORS = __webpack_require__(38);\nvar fails = __webpack_require__(36);\nvar createElement = __webpack_require__(98);\n\n// Thank's IE8 for his funny defineProperty\nmodule.exports = !DESCRIPTORS && !fails(function () {\n  // eslint-disable-next-line es/no-object-defineproperty -- requied for testing\n  return Object.defineProperty(createElement('div'), 'a', {\n    get: function () { return 7; }\n  }).a != 7;\n});\n\n\n/***/ }),\n/* 98 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar global = __webpack_require__(10);\nvar isObject = __webpack_require__(48);\n\nvar document = global.document;\n// typeof document.createElement is 'object' in old IE\nvar EXISTS = isObject(document) && isObject(document.createElement);\n\nmodule.exports = function (it) {\n  return EXISTS ? document.createElement(it) : {};\n};\n\n\n/***/ }),\n/* 99 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar global = __webpack_require__(10);\nvar getBuiltIn = __webpack_require__(56);\nvar isCallable = __webpack_require__(22);\nvar isPrototypeOf = __webpack_require__(127);\nvar USE_SYMBOL_AS_UID = __webpack_require__(95);\n\nvar Object = global.Object;\n\nmodule.exports = USE_SYMBOL_AS_UID ? function (it) {\n  return typeof it == 'symbol';\n} : function (it) {\n  var $Symbol = getBuiltIn('Symbol');\n  return isCallable($Symbol) && isPrototypeOf($Symbol.prototype, Object(it));\n};\n\n\n/***/ }),\n/* 100 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar global = __webpack_require__(10);\n\nvar String = global.String;\n\nmodule.exports = function (argument) {\n  try {\n    return String(argument);\n  } catch (error) {\n    return 'Object';\n  }\n};\n\n\n/***/ }),\n/* 101 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar $propertyIsEnumerable = {}.propertyIsEnumerable;\n// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\nvar getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n\n// Nashorn ~ JDK8 bug\nvar NASHORN_BUG = getOwnPropertyDescriptor && !$propertyIsEnumerable.call({ 1: 2 }, 1);\n\n// `Object.prototype.propertyIsEnumerable` method implementation\n// https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable\nexports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {\n  var descriptor = getOwnPropertyDescriptor(this, V);\n  return !!descriptor && descriptor.enumerable;\n} : $propertyIsEnumerable;\n\n\n/***/ }),\n/* 102 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar DESCRIPTORS = __webpack_require__(38);\nvar hasOwn = __webpack_require__(33);\n\nvar FunctionPrototype = Function.prototype;\n// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\nvar getDescriptor = DESCRIPTORS && Object.getOwnPropertyDescriptor;\n\nvar EXISTS = hasOwn(FunctionPrototype, 'name');\n// additional protection from minified / mangled / dropped function names\nvar PROPER = EXISTS && (function something() { /* empty */ }).name === 'something';\nvar CONFIGURABLE = EXISTS && (!DESCRIPTORS || (DESCRIPTORS && getDescriptor(FunctionPrototype, 'name').configurable));\n\nmodule.exports = {\n  EXISTS: EXISTS,\n  PROPER: PROPER,\n  CONFIGURABLE: CONFIGURABLE\n};\n\n\n/***/ }),\n/* 103 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar uncurryThis = __webpack_require__(21);\nvar hasOwn = __webpack_require__(33);\nvar toIndexedObject = __webpack_require__(58);\nvar indexOf = __webpack_require__(134).indexOf;\nvar hiddenKeys = __webpack_require__(84);\n\nvar push = uncurryThis([].push);\n\nmodule.exports = function (object, names) {\n  var O = toIndexedObject(object);\n  var i = 0;\n  var result = [];\n  var key;\n  for (key in O) !hasOwn(hiddenKeys, key) && hasOwn(O, key) && push(result, key);\n  // Don't enum bug & hidden keys\n  while (names.length > i) if (hasOwn(O, key = names[i++])) {\n    ~indexOf(result, key) || push(result, key);\n  }\n  return result;\n};\n\n\n/***/ }),\n/* 104 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar toIntegerOrInfinity = __webpack_require__(73);\n\nvar max = Math.max;\nvar min = Math.min;\n\n// Helper for a popular repeating case of the spec:\n// Let integer be ? ToInteger(index).\n// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).\nmodule.exports = function (index, length) {\n  var integer = toIntegerOrInfinity(index);\n  return integer < 0 ? max(integer + length, 0) : min(integer, length);\n};\n\n\n/***/ }),\n/* 105 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar toIntegerOrInfinity = __webpack_require__(73);\n\nvar min = Math.min;\n\n// `ToLength` abstract operation\n// https://tc39.es/ecma262/#sec-tolength\nmodule.exports = function (argument) {\n  return argument > 0 ? min(toIntegerOrInfinity(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991\n};\n\n\n/***/ }),\n/* 106 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar fails = __webpack_require__(36);\nvar isCallable = __webpack_require__(22);\nvar create = __webpack_require__(89);\nvar getPrototypeOf = __webpack_require__(108);\nvar redefine = __webpack_require__(86);\nvar wellKnownSymbol = __webpack_require__(27);\nvar IS_PURE = __webpack_require__(63);\n\nvar ITERATOR = wellKnownSymbol('iterator');\nvar BUGGY_SAFARI_ITERATORS = false;\n\n// `%IteratorPrototype%` object\n// https://tc39.es/ecma262/#sec-%iteratorprototype%-object\nvar IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;\n\n/* eslint-disable es/no-array-prototype-keys -- safe */\nif ([].keys) {\n  arrayIterator = [].keys();\n  // Safari 8 has buggy iterators w/o `next`\n  if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;\n  else {\n    PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));\n    if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;\n  }\n}\n\nvar NEW_ITERATOR_PROTOTYPE = IteratorPrototype == undefined || fails(function () {\n  var test = {};\n  // FF44- legacy iterators case\n  return IteratorPrototype[ITERATOR].call(test) !== test;\n});\n\nif (NEW_ITERATOR_PROTOTYPE) IteratorPrototype = {};\nelse if (IS_PURE) IteratorPrototype = create(IteratorPrototype);\n\n// `%IteratorPrototype%[@@iterator]()` method\n// https://tc39.es/ecma262/#sec-%iteratorprototype%-@@iterator\nif (!isCallable(IteratorPrototype[ITERATOR])) {\n  redefine(IteratorPrototype, ITERATOR, function () {\n    return this;\n  });\n}\n\nmodule.exports = {\n  IteratorPrototype: IteratorPrototype,\n  BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS\n};\n\n\n/***/ }),\n/* 107 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar internalObjectKeys = __webpack_require__(103);\nvar enumBugKeys = __webpack_require__(88);\n\n// `Object.keys` method\n// https://tc39.es/ecma262/#sec-object.keys\n// eslint-disable-next-line es/no-object-keys -- safe\nmodule.exports = Object.keys || function keys(O) {\n  return internalObjectKeys(O, enumBugKeys);\n};\n\n\n/***/ }),\n/* 108 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar global = __webpack_require__(10);\nvar hasOwn = __webpack_require__(33);\nvar isCallable = __webpack_require__(22);\nvar toObject = __webpack_require__(64);\nvar sharedKey = __webpack_require__(83);\nvar CORRECT_PROTOTYPE_GETTER = __webpack_require__(140);\n\nvar IE_PROTO = sharedKey('IE_PROTO');\nvar Object = global.Object;\nvar ObjectPrototype = Object.prototype;\n\n// `Object.getPrototypeOf` method\n// https://tc39.es/ecma262/#sec-object.getprototypeof\nmodule.exports = CORRECT_PROTOTYPE_GETTER ? Object.getPrototypeOf : function (O) {\n  var object = toObject(O);\n  if (hasOwn(object, IE_PROTO)) return object[IE_PROTO];\n  var constructor = object.constructor;\n  if (isCallable(constructor) && object instanceof constructor) {\n    return constructor.prototype;\n  } return object instanceof Object ? ObjectPrototype : null;\n};\n\n\n/***/ }),\n/* 109 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar defineProperty = __webpack_require__(49).f;\nvar hasOwn = __webpack_require__(33);\nvar wellKnownSymbol = __webpack_require__(27);\n\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\n\nmodule.exports = function (it, TAG, STATIC) {\n  if (it && !hasOwn(it = STATIC ? it : it.prototype, TO_STRING_TAG)) {\n    defineProperty(it, TO_STRING_TAG, { configurable: true, value: TAG });\n  }\n};\n\n\n/***/ }),\n/* 110 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar classof = __webpack_require__(75);\nvar getMethod = __webpack_require__(81);\nvar Iterators = __webpack_require__(68);\nvar wellKnownSymbol = __webpack_require__(27);\n\nvar ITERATOR = wellKnownSymbol('iterator');\n\nmodule.exports = function (it) {\n  if (it != undefined) return getMethod(it, ITERATOR)\n    || getMethod(it, '@@iterator')\n    || Iterators[classof(it)];\n};\n\n\n/***/ }),\n/* 111 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar global = __webpack_require__(10);\n\nmodule.exports = global;\n\n\n/***/ }),\n/* 112 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar global = __webpack_require__(10);\nvar uncurryThis = __webpack_require__(21);\n\nmodule.exports = function (CONSTRUCTOR, METHOD) {\n  return uncurryThis(global[CONSTRUCTOR].prototype[METHOD]);\n};\n\n\n/***/ }),\n/* 113 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: ./node_modules/core-js/features/array/from.js\nvar from = __webpack_require__(117);\n\n// EXTERNAL MODULE: ./node_modules/core-js/features/array/fill.js\nvar fill = __webpack_require__(153);\n\n// EXTERNAL MODULE: ./node_modules/core-js/features/object/values.js\nvar values = __webpack_require__(159);\n\n// EXTERNAL MODULE: ./node_modules/core-js/features/string/ends-with.js\nvar ends_with = __webpack_require__(164);\n\n// CONCATENATED MODULE: ./polyfills.js\n// IE11 support\r\n\r\n\r\n\r\n\r\n\n// EXTERNAL MODULE: ./core.js\nvar core = __webpack_require__(25);\n\n// EXTERNAL MODULE: ./formats/align.js\nvar align = __webpack_require__(35);\n\n// EXTERNAL MODULE: ./formats/direction.js\nvar direction = __webpack_require__(32);\n\n// EXTERNAL MODULE: ./node_modules/parchment/src/parchment.ts + 17 modules\nvar parchment = __webpack_require__(2);\n\n// CONCATENATED MODULE: ./formats/indent.js\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n\n\nvar IndentAttributor = /*#__PURE__*/function (_ClassAttributor) {\n  _inherits(IndentAttributor, _ClassAttributor);\n\n  var _super = _createSuper(IndentAttributor);\n\n  function IndentAttributor() {\n    _classCallCheck(this, IndentAttributor);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(IndentAttributor, [{\n    key: \"add\",\n    value: function add(node, value) {\n      if (value === '+1' || value === '-1') {\n        var indent = this.value(node) || 0;\n        value = value === '+1' ? indent + 1 : indent - 1;\n      }\n\n      if (value === 0) {\n        this.remove(node);\n        return true;\n      }\n\n      return _get(_getPrototypeOf(IndentAttributor.prototype), \"add\", this).call(this, node, value);\n    }\n  }, {\n    key: \"canAdd\",\n    value: function canAdd(node, value) {\n      return _get(_getPrototypeOf(IndentAttributor.prototype), \"canAdd\", this).call(this, node, value) || _get(_getPrototypeOf(IndentAttributor.prototype), \"canAdd\", this).call(this, node, parseInt(value, 10));\n    }\n  }, {\n    key: \"value\",\n    value: function value(node) {\n      return parseInt(_get(_getPrototypeOf(IndentAttributor.prototype), \"value\", this).call(this, node), 10) || undefined; // Don't return NaN\n    }\n  }]);\n\n  return IndentAttributor;\n}(parchment[\"ClassAttributor\"]);\n\nvar IndentClass = new IndentAttributor('indent', 'ql-indent', {\n  scope: parchment[\"Scope\"].BLOCK,\n  whitelist: [1, 2, 3, 4, 5, 6, 7, 8]\n});\n/* harmony default export */ var indent = (IndentClass);\n// EXTERNAL MODULE: ./blots/block.js\nvar block = __webpack_require__(6);\n\n// CONCATENATED MODULE: ./formats/blockquote.js\nfunction blockquote_typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { blockquote_typeof = function _typeof(obj) { return typeof obj; }; } else { blockquote_typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return blockquote_typeof(obj); }\n\nfunction blockquote_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction blockquote_inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) blockquote_setPrototypeOf(subClass, superClass); }\n\nfunction blockquote_setPrototypeOf(o, p) { blockquote_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return blockquote_setPrototypeOf(o, p); }\n\nfunction blockquote_createSuper(Derived) { var hasNativeReflectConstruct = blockquote_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = blockquote_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = blockquote_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return blockquote_possibleConstructorReturn(this, result); }; }\n\nfunction blockquote_possibleConstructorReturn(self, call) { if (call && (blockquote_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return blockquote_assertThisInitialized(self); }\n\nfunction blockquote_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction blockquote_isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction blockquote_getPrototypeOf(o) { blockquote_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return blockquote_getPrototypeOf(o); }\n\n\n\nvar Blockquote = /*#__PURE__*/function (_Block) {\n  blockquote_inherits(Blockquote, _Block);\n\n  var _super = blockquote_createSuper(Blockquote);\n\n  function Blockquote() {\n    blockquote_classCallCheck(this, Blockquote);\n\n    return _super.apply(this, arguments);\n  }\n\n  return Blockquote;\n}(block[\"d\" /* default */]);\n\nBlockquote.blotName = 'blockquote';\nBlockquote.tagName = 'blockquote';\n/* harmony default export */ var blockquote = (Blockquote);\n// CONCATENATED MODULE: ./formats/header.js\nfunction header_typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { header_typeof = function _typeof(obj) { return typeof obj; }; } else { header_typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return header_typeof(obj); }\n\nfunction header_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction header_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction header_createClass(Constructor, protoProps, staticProps) { if (protoProps) header_defineProperties(Constructor.prototype, protoProps); if (staticProps) header_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction header_inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) header_setPrototypeOf(subClass, superClass); }\n\nfunction header_setPrototypeOf(o, p) { header_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return header_setPrototypeOf(o, p); }\n\nfunction header_createSuper(Derived) { var hasNativeReflectConstruct = header_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = header_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = header_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return header_possibleConstructorReturn(this, result); }; }\n\nfunction header_possibleConstructorReturn(self, call) { if (call && (header_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return header_assertThisInitialized(self); }\n\nfunction header_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction header_isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction header_getPrototypeOf(o) { header_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return header_getPrototypeOf(o); }\n\n\n\nvar Header = /*#__PURE__*/function (_Block) {\n  header_inherits(Header, _Block);\n\n  var _super = header_createSuper(Header);\n\n  function Header() {\n    header_classCallCheck(this, Header);\n\n    return _super.apply(this, arguments);\n  }\n\n  header_createClass(Header, null, [{\n    key: \"formats\",\n    value: function formats(domNode) {\n      return this.tagName.indexOf(domNode.tagName) + 1;\n    }\n  }]);\n\n  return Header;\n}(block[\"d\" /* default */]);\n\nHeader.blotName = 'header';\nHeader.tagName = ['H1', 'H2', 'H3', 'H4', 'H5', 'H6'];\n/* harmony default export */ var header = (Header);\n// EXTERNAL MODULE: ./blots/container.js\nvar container = __webpack_require__(15);\n\n// EXTERNAL MODULE: ./core/quill.js\nvar core_quill = __webpack_require__(0);\n\n// CONCATENATED MODULE: ./formats/list.js\nfunction list_typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { list_typeof = function _typeof(obj) { return typeof obj; }; } else { list_typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return list_typeof(obj); }\n\nfunction list_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction list_createClass(Constructor, protoProps, staticProps) { if (protoProps) list_defineProperties(Constructor.prototype, protoProps); if (staticProps) list_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction list_get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { list_get = Reflect.get; } else { list_get = function _get(target, property, receiver) { var base = list_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return list_get(target, property, receiver || target); }\n\nfunction list_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = list_getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction list_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction list_inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) list_setPrototypeOf(subClass, superClass); }\n\nfunction list_setPrototypeOf(o, p) { list_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return list_setPrototypeOf(o, p); }\n\nfunction list_createSuper(Derived) { var hasNativeReflectConstruct = list_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = list_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = list_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return list_possibleConstructorReturn(this, result); }; }\n\nfunction list_possibleConstructorReturn(self, call) { if (call && (list_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return list_assertThisInitialized(self); }\n\nfunction list_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction list_isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction list_getPrototypeOf(o) { list_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return list_getPrototypeOf(o); }\n\n\n\n\n\nvar ListContainer = /*#__PURE__*/function (_Container) {\n  list_inherits(ListContainer, _Container);\n\n  var _super = list_createSuper(ListContainer);\n\n  function ListContainer() {\n    list_classCallCheck(this, ListContainer);\n\n    return _super.apply(this, arguments);\n  }\n\n  return ListContainer;\n}(container[\"a\" /* default */]);\n\nListContainer.blotName = 'list-container';\nListContainer.tagName = 'OL';\n\nvar list_ListItem = /*#__PURE__*/function (_Block) {\n  list_inherits(ListItem, _Block);\n\n  var _super2 = list_createSuper(ListItem);\n\n  function ListItem(scroll, domNode) {\n    var _this;\n\n    list_classCallCheck(this, ListItem);\n\n    _this = _super2.call(this, scroll, domNode);\n    var ui = domNode.ownerDocument.createElement('span');\n\n    var listEventHandler = function listEventHandler(e) {\n      if (!scroll.isEnabled()) return;\n\n      var format = _this.statics.formats(domNode, scroll);\n\n      if (format === 'checked') {\n        _this.format('list', 'unchecked');\n\n        e.preventDefault();\n      } else if (format === 'unchecked') {\n        _this.format('list', 'checked');\n\n        e.preventDefault();\n      }\n    };\n\n    ui.addEventListener('mousedown', listEventHandler);\n    ui.addEventListener('touchstart', listEventHandler);\n\n    _this.attachUI(ui);\n\n    return _this;\n  }\n\n  list_createClass(ListItem, [{\n    key: \"format\",\n    value: function format(name, value) {\n      if (name === this.statics.blotName && value) {\n        this.domNode.setAttribute('data-list', value);\n      } else {\n        list_get(list_getPrototypeOf(ListItem.prototype), \"format\", this).call(this, name, value);\n      }\n    }\n  }], [{\n    key: \"create\",\n    value: function create(value) {\n      var node = list_get(list_getPrototypeOf(ListItem), \"create\", this).call(this);\n\n      node.setAttribute('data-list', value);\n      return node;\n    }\n  }, {\n    key: \"formats\",\n    value: function formats(domNode) {\n      return domNode.getAttribute('data-list') || undefined;\n    }\n  }, {\n    key: \"register\",\n    value: function register() {\n      core_quill[\"a\" /* default */].register(ListContainer);\n    }\n  }]);\n\n  return ListItem;\n}(block[\"d\" /* default */]);\n\nlist_ListItem.blotName = 'list';\nlist_ListItem.tagName = 'LI';\nListContainer.allowedChildren = [list_ListItem];\nlist_ListItem.requiredContainer = ListContainer;\n\n// EXTERNAL MODULE: ./formats/background.js\nvar background = __webpack_require__(42);\n\n// EXTERNAL MODULE: ./formats/color.js\nvar color = __webpack_require__(31);\n\n// EXTERNAL MODULE: ./formats/font.js\nvar font = __webpack_require__(43);\n\n// EXTERNAL MODULE: ./formats/size.js\nvar size = __webpack_require__(44);\n\n// EXTERNAL MODULE: ./formats/bold.js\nvar bold = __webpack_require__(46);\n\n// CONCATENATED MODULE: ./formats/italic.js\nfunction italic_typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { italic_typeof = function _typeof(obj) { return typeof obj; }; } else { italic_typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return italic_typeof(obj); }\n\nfunction italic_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction italic_inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) italic_setPrototypeOf(subClass, superClass); }\n\nfunction italic_setPrototypeOf(o, p) { italic_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return italic_setPrototypeOf(o, p); }\n\nfunction italic_createSuper(Derived) { var hasNativeReflectConstruct = italic_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = italic_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = italic_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return italic_possibleConstructorReturn(this, result); }; }\n\nfunction italic_possibleConstructorReturn(self, call) { if (call && (italic_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return italic_assertThisInitialized(self); }\n\nfunction italic_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction italic_isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction italic_getPrototypeOf(o) { italic_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return italic_getPrototypeOf(o); }\n\n\n\nvar Italic = /*#__PURE__*/function (_Bold) {\n  italic_inherits(Italic, _Bold);\n\n  var _super = italic_createSuper(Italic);\n\n  function Italic() {\n    italic_classCallCheck(this, Italic);\n\n    return _super.apply(this, arguments);\n  }\n\n  return Italic;\n}(bold[\"a\" /* default */]);\n\nItalic.blotName = 'italic';\nItalic.tagName = ['EM', 'I'];\n/* harmony default export */ var italic = (Italic);\n// EXTERNAL MODULE: ./formats/link.js\nvar formats_link = __webpack_require__(40);\n\n// EXTERNAL MODULE: ./blots/inline.js\nvar inline = __webpack_require__(16);\n\n// CONCATENATED MODULE: ./formats/script.js\nfunction script_typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { script_typeof = function _typeof(obj) { return typeof obj; }; } else { script_typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return script_typeof(obj); }\n\nfunction script_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction script_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction script_createClass(Constructor, protoProps, staticProps) { if (protoProps) script_defineProperties(Constructor.prototype, protoProps); if (staticProps) script_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction script_get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { script_get = Reflect.get; } else { script_get = function _get(target, property, receiver) { var base = script_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return script_get(target, property, receiver || target); }\n\nfunction script_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = script_getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction script_inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) script_setPrototypeOf(subClass, superClass); }\n\nfunction script_setPrototypeOf(o, p) { script_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return script_setPrototypeOf(o, p); }\n\nfunction script_createSuper(Derived) { var hasNativeReflectConstruct = script_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = script_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = script_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return script_possibleConstructorReturn(this, result); }; }\n\nfunction script_possibleConstructorReturn(self, call) { if (call && (script_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return script_assertThisInitialized(self); }\n\nfunction script_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction script_isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction script_getPrototypeOf(o) { script_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return script_getPrototypeOf(o); }\n\n\n\nvar Script = /*#__PURE__*/function (_Inline) {\n  script_inherits(Script, _Inline);\n\n  var _super = script_createSuper(Script);\n\n  function Script() {\n    script_classCallCheck(this, Script);\n\n    return _super.apply(this, arguments);\n  }\n\n  script_createClass(Script, null, [{\n    key: \"create\",\n    value: function create(value) {\n      if (value === 'super') {\n        return document.createElement('sup');\n      }\n\n      if (value === 'sub') {\n        return document.createElement('sub');\n      }\n\n      return script_get(script_getPrototypeOf(Script), \"create\", this).call(this, value);\n    }\n  }, {\n    key: \"formats\",\n    value: function formats(domNode) {\n      if (domNode.tagName === 'SUB') return 'sub';\n      if (domNode.tagName === 'SUP') return 'super';\n      return undefined;\n    }\n  }]);\n\n  return Script;\n}(inline[\"a\" /* default */]);\n\nScript.blotName = 'script';\nScript.tagName = ['SUB', 'SUP'];\n/* harmony default export */ var script = (Script);\n// CONCATENATED MODULE: ./formats/strike.js\nfunction strike_typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { strike_typeof = function _typeof(obj) { return typeof obj; }; } else { strike_typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return strike_typeof(obj); }\n\nfunction strike_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction strike_inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) strike_setPrototypeOf(subClass, superClass); }\n\nfunction strike_setPrototypeOf(o, p) { strike_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return strike_setPrototypeOf(o, p); }\n\nfunction strike_createSuper(Derived) { var hasNativeReflectConstruct = strike_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = strike_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = strike_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return strike_possibleConstructorReturn(this, result); }; }\n\nfunction strike_possibleConstructorReturn(self, call) { if (call && (strike_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return strike_assertThisInitialized(self); }\n\nfunction strike_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction strike_isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction strike_getPrototypeOf(o) { strike_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return strike_getPrototypeOf(o); }\n\n\n\nvar Strike = /*#__PURE__*/function (_Bold) {\n  strike_inherits(Strike, _Bold);\n\n  var _super = strike_createSuper(Strike);\n\n  function Strike() {\n    strike_classCallCheck(this, Strike);\n\n    return _super.apply(this, arguments);\n  }\n\n  return Strike;\n}(bold[\"a\" /* default */]);\n\nStrike.blotName = 'strike';\nStrike.tagName = ['S', 'STRIKE'];\n/* harmony default export */ var strike = (Strike);\n// CONCATENATED MODULE: ./formats/underline.js\nfunction underline_typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { underline_typeof = function _typeof(obj) { return typeof obj; }; } else { underline_typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return underline_typeof(obj); }\n\nfunction underline_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction underline_inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) underline_setPrototypeOf(subClass, superClass); }\n\nfunction underline_setPrototypeOf(o, p) { underline_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return underline_setPrototypeOf(o, p); }\n\nfunction underline_createSuper(Derived) { var hasNativeReflectConstruct = underline_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = underline_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = underline_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return underline_possibleConstructorReturn(this, result); }; }\n\nfunction underline_possibleConstructorReturn(self, call) { if (call && (underline_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return underline_assertThisInitialized(self); }\n\nfunction underline_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction underline_isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction underline_getPrototypeOf(o) { underline_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return underline_getPrototypeOf(o); }\n\n\n\nvar Underline = /*#__PURE__*/function (_Inline) {\n  underline_inherits(Underline, _Inline);\n\n  var _super = underline_createSuper(Underline);\n\n  function Underline() {\n    underline_classCallCheck(this, Underline);\n\n    return _super.apply(this, arguments);\n  }\n\n  return Underline;\n}(inline[\"a\" /* default */]);\n\nUnderline.blotName = 'underline';\nUnderline.tagName = 'U';\n/* harmony default export */ var underline = (Underline);\n// EXTERNAL MODULE: ./blots/embed.js\nvar blots_embed = __webpack_require__(59);\n\n// EXTERNAL MODULE: ./utils/has_window.js\nvar has_window = __webpack_require__(17);\n\n// CONCATENATED MODULE: ./formats/formula.js\nfunction formula_typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { formula_typeof = function _typeof(obj) { return typeof obj; }; } else { formula_typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return formula_typeof(obj); }\n\nfunction formula_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction formula_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction formula_createClass(Constructor, protoProps, staticProps) { if (protoProps) formula_defineProperties(Constructor.prototype, protoProps); if (staticProps) formula_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction formula_get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { formula_get = Reflect.get; } else { formula_get = function _get(target, property, receiver) { var base = formula_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return formula_get(target, property, receiver || target); }\n\nfunction formula_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = formula_getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction formula_inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) formula_setPrototypeOf(subClass, superClass); }\n\nfunction formula_setPrototypeOf(o, p) { formula_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return formula_setPrototypeOf(o, p); }\n\nfunction formula_createSuper(Derived) { var hasNativeReflectConstruct = formula_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = formula_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = formula_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return formula_possibleConstructorReturn(this, result); }; }\n\nfunction formula_possibleConstructorReturn(self, call) { if (call && (formula_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return formula_assertThisInitialized(self); }\n\nfunction formula_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction formula_isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction formula_getPrototypeOf(o) { formula_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return formula_getPrototypeOf(o); }\n\n\n\n\nvar formula_Formula = /*#__PURE__*/function (_Embed) {\n  formula_inherits(Formula, _Embed);\n\n  var _super = formula_createSuper(Formula);\n\n  function Formula() {\n    formula_classCallCheck(this, Formula);\n\n    return _super.apply(this, arguments);\n  }\n\n  formula_createClass(Formula, [{\n    key: \"html\",\n    value: function html() {\n      var _this$value = this.value(),\n          formula = _this$value.formula;\n\n      return \"<span>\".concat(formula, \"</span>\");\n    }\n  }], [{\n    key: \"create\",\n    value: function create(value) {\n      var katex = null;\n\n      if (Object(has_window[\"a\" /* default */])()) {\n        katex = window.katex;\n      }\n\n      if (katex == null) {\n        throw new Error('Formula module requires KaTeX.');\n      }\n\n      var node = formula_get(formula_getPrototypeOf(Formula), \"create\", this).call(this, value);\n\n      if (typeof value === 'string') {\n        katex.render(value, node, {\n          throwOnError: false,\n          errorColor: '#f00'\n        });\n        node.setAttribute('data-value', value);\n      }\n\n      return node;\n    }\n  }, {\n    key: \"value\",\n    value: function value(domNode) {\n      return domNode.getAttribute('data-value');\n    }\n  }]);\n\n  return Formula;\n}(blots_embed[\"a\" /* default */]);\n\nformula_Formula.blotName = 'formula';\nformula_Formula.className = 'ql-formula';\nformula_Formula.tagName = 'SPAN';\n/* harmony default export */ var formula = (formula_Formula);\n// CONCATENATED MODULE: ./formats/image.js\nfunction image_typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { image_typeof = function _typeof(obj) { return typeof obj; }; } else { image_typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return image_typeof(obj); }\n\nfunction image_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction image_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction image_createClass(Constructor, protoProps, staticProps) { if (protoProps) image_defineProperties(Constructor.prototype, protoProps); if (staticProps) image_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction image_get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { image_get = Reflect.get; } else { image_get = function _get(target, property, receiver) { var base = image_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return image_get(target, property, receiver || target); }\n\nfunction image_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = image_getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction image_inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) image_setPrototypeOf(subClass, superClass); }\n\nfunction image_setPrototypeOf(o, p) { image_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return image_setPrototypeOf(o, p); }\n\nfunction image_createSuper(Derived) { var hasNativeReflectConstruct = image_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = image_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = image_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return image_possibleConstructorReturn(this, result); }; }\n\nfunction image_possibleConstructorReturn(self, call) { if (call && (image_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return image_assertThisInitialized(self); }\n\nfunction image_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction image_isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction image_getPrototypeOf(o) { image_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return image_getPrototypeOf(o); }\n\n\n\n\nvar ATTRIBUTES = ['alt', 'height', 'width'];\n\nvar image_Image = /*#__PURE__*/function (_EmbedBlot) {\n  image_inherits(Image, _EmbedBlot);\n\n  var _super = image_createSuper(Image);\n\n  function Image() {\n    image_classCallCheck(this, Image);\n\n    return _super.apply(this, arguments);\n  }\n\n  image_createClass(Image, [{\n    key: \"format\",\n    value: function format(name, value) {\n      if (ATTRIBUTES.indexOf(name) > -1) {\n        if (value) {\n          this.domNode.setAttribute(name, value);\n        } else {\n          this.domNode.removeAttribute(name);\n        }\n      } else {\n        image_get(image_getPrototypeOf(Image.prototype), \"format\", this).call(this, name, value);\n      }\n    }\n  }], [{\n    key: \"create\",\n    value: function create(value) {\n      var node = image_get(image_getPrototypeOf(Image), \"create\", this).call(this, value);\n\n      if (typeof value === 'string') {\n        node.setAttribute('src', this.sanitize(value));\n      }\n\n      return node;\n    }\n  }, {\n    key: \"formats\",\n    value: function formats(domNode) {\n      return ATTRIBUTES.reduce(function (formats, attribute) {\n        if (domNode.hasAttribute(attribute)) {\n          formats[attribute] = domNode.getAttribute(attribute);\n        }\n\n        return formats;\n      }, {});\n    }\n  }, {\n    key: \"match\",\n    value: function match(url) {\n      return /\\.(jpe?g|gif|png)$/.test(url) || /^data:image\\/.+;base64/.test(url);\n    }\n  }, {\n    key: \"register\",\n    value: function register() {\n      if (Object(has_window[\"a\" /* default */])() && /Firefox/i.test(navigator.userAgent)) {\n        setTimeout(function () {\n          // Disable image resizing in Firefox\n          document.execCommand('enableObjectResizing', false, false);\n        }, 1);\n      }\n    }\n  }, {\n    key: \"sanitize\",\n    value: function sanitize(url) {\n      return Object(formats_link[\"b\" /* sanitize */])(url, ['http', 'https', 'data']) ? url : '//:0';\n    }\n  }, {\n    key: \"value\",\n    value: function value(domNode) {\n      return domNode.getAttribute('src');\n    }\n  }]);\n\n  return Image;\n}(parchment[\"EmbedBlot\"]);\n\nimage_Image.blotName = 'image';\nimage_Image.tagName = 'IMG';\n/* harmony default export */ var formats_image = (image_Image);\n// CONCATENATED MODULE: ./formats/video.js\nfunction video_typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { video_typeof = function _typeof(obj) { return typeof obj; }; } else { video_typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return video_typeof(obj); }\n\nfunction video_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction video_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction video_createClass(Constructor, protoProps, staticProps) { if (protoProps) video_defineProperties(Constructor.prototype, protoProps); if (staticProps) video_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction video_get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { video_get = Reflect.get; } else { video_get = function _get(target, property, receiver) { var base = video_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return video_get(target, property, receiver || target); }\n\nfunction video_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = video_getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction video_inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) video_setPrototypeOf(subClass, superClass); }\n\nfunction video_setPrototypeOf(o, p) { video_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return video_setPrototypeOf(o, p); }\n\nfunction video_createSuper(Derived) { var hasNativeReflectConstruct = video_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = video_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = video_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return video_possibleConstructorReturn(this, result); }; }\n\nfunction video_possibleConstructorReturn(self, call) { if (call && (video_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return video_assertThisInitialized(self); }\n\nfunction video_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction video_isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction video_getPrototypeOf(o) { video_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return video_getPrototypeOf(o); }\n\n\n\nvar video_ATTRIBUTES = ['height', 'width'];\n\nvar video_Video = /*#__PURE__*/function (_BlockEmbed) {\n  video_inherits(Video, _BlockEmbed);\n\n  var _super = video_createSuper(Video);\n\n  function Video() {\n    video_classCallCheck(this, Video);\n\n    return _super.apply(this, arguments);\n  }\n\n  video_createClass(Video, [{\n    key: \"format\",\n    value: function format(name, value) {\n      if (video_ATTRIBUTES.indexOf(name) > -1) {\n        if (value) {\n          this.domNode.setAttribute(name, value);\n        } else {\n          this.domNode.removeAttribute(name);\n        }\n      } else {\n        video_get(video_getPrototypeOf(Video.prototype), \"format\", this).call(this, name, value);\n      }\n    }\n  }, {\n    key: \"html\",\n    value: function html() {\n      var _this$value = this.value(),\n          video = _this$value.video;\n\n      return \"<a href=\\\"\".concat(video, \"\\\">\").concat(video, \"</a>\");\n    }\n  }], [{\n    key: \"create\",\n    value: function create(value) {\n      var node = video_get(video_getPrototypeOf(Video), \"create\", this).call(this, value);\n\n      node.setAttribute('frameborder', '0');\n      node.setAttribute('allowfullscreen', true);\n      node.setAttribute('src', this.sanitize(value));\n      return node;\n    }\n  }, {\n    key: \"formats\",\n    value: function formats(domNode) {\n      return video_ATTRIBUTES.reduce(function (formats, attribute) {\n        if (domNode.hasAttribute(attribute)) {\n          formats[attribute] = domNode.getAttribute(attribute);\n        }\n\n        return formats;\n      }, {});\n    }\n  }, {\n    key: \"sanitize\",\n    value: function sanitize(url) {\n      return formats_link[\"a\" /* default */].sanitize(url); // eslint-disable-line import/no-named-as-default-member\n    }\n  }, {\n    key: \"value\",\n    value: function value(domNode) {\n      return domNode.getAttribute('src');\n    }\n  }]);\n\n  return Video;\n}(block[\"a\" /* BlockEmbed */]);\n\nvideo_Video.blotName = 'video';\nvideo_Video.className = 'ql-video';\nvideo_Video.tagName = 'IFRAME';\n/* harmony default export */ var video = (video_Video);\n// EXTERNAL MODULE: ./formats/code.js\nvar code = __webpack_require__(19);\n\n// EXTERNAL MODULE: ./modules/syntax.js\nvar syntax = __webpack_require__(72);\n\n// EXTERNAL MODULE: ./modules/table/index.js + 1 modules\nvar table = __webpack_require__(62);\n\n// EXTERNAL MODULE: ./node_modules/quill-delta/dist/Delta.js\nvar Delta = __webpack_require__(1);\nvar Delta_default = /*#__PURE__*/__webpack_require__.n(Delta);\n\n// CONCATENATED MODULE: ./blots/multiline_break.js\nfunction multiline_break_typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { multiline_break_typeof = function _typeof(obj) { return typeof obj; }; } else { multiline_break_typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return multiline_break_typeof(obj); }\n\nfunction multiline_break_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction multiline_break_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction multiline_break_createClass(Constructor, protoProps, staticProps) { if (protoProps) multiline_break_defineProperties(Constructor.prototype, protoProps); if (staticProps) multiline_break_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction multiline_break_inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) multiline_break_setPrototypeOf(subClass, superClass); }\n\nfunction multiline_break_setPrototypeOf(o, p) { multiline_break_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return multiline_break_setPrototypeOf(o, p); }\n\nfunction multiline_break_createSuper(Derived) { var hasNativeReflectConstruct = multiline_break_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = multiline_break_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = multiline_break_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return multiline_break_possibleConstructorReturn(this, result); }; }\n\nfunction multiline_break_possibleConstructorReturn(self, call) { if (call && (multiline_break_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return multiline_break_assertThisInitialized(self); }\n\nfunction multiline_break_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction multiline_break_isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction multiline_break_getPrototypeOf(o) { multiline_break_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return multiline_break_getPrototypeOf(o); }\n\n\n\nvar MultilineBreak = /*#__PURE__*/function (_EmbedBlot) {\n  multiline_break_inherits(MultilineBreak, _EmbedBlot);\n\n  var _super = multiline_break_createSuper(MultilineBreak);\n\n  function MultilineBreak() {\n    multiline_break_classCallCheck(this, MultilineBreak);\n\n    return _super.apply(this, arguments);\n  }\n\n  multiline_break_createClass(MultilineBreak, [{\n    key: \"length\",\n    value: function length() {\n      return 1;\n    }\n  }, {\n    key: \"value\",\n    value: function value() {\n      return '\\n';\n    }\n  }, {\n    key: \"optimize\",\n    value: function optimize() {\n      if (!this.prev && !this.next) {\n        this.remove();\n      }\n    }\n  }], [{\n    key: \"value\",\n    value: function value() {\n      return '\\n';\n    }\n  }]);\n\n  return MultilineBreak;\n}(parchment[\"EmbedBlot\"]);\n\nMultilineBreak.blotName = 'multilineBreak';\nMultilineBreak.tagName = 'BR';\n/* harmony default export */ var multiline_break = (MultilineBreak);\n// EXTERNAL MODULE: ./core/module.js\nvar core_module = __webpack_require__(14);\n\n// CONCATENATED MODULE: ./modules/multiline.js\nfunction multiline_typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { multiline_typeof = function _typeof(obj) { return typeof obj; }; } else { multiline_typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return multiline_typeof(obj); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction multiline_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction multiline_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction multiline_createClass(Constructor, protoProps, staticProps) { if (protoProps) multiline_defineProperties(Constructor.prototype, protoProps); if (staticProps) multiline_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction multiline_inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) multiline_setPrototypeOf(subClass, superClass); }\n\nfunction multiline_setPrototypeOf(o, p) { multiline_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return multiline_setPrototypeOf(o, p); }\n\nfunction multiline_createSuper(Derived) { var hasNativeReflectConstruct = multiline_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = multiline_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = multiline_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return multiline_possibleConstructorReturn(this, result); }; }\n\nfunction multiline_possibleConstructorReturn(self, call) { if (call && (multiline_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return multiline_assertThisInitialized(self); }\n\nfunction multiline_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction multiline_isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction multiline_getPrototypeOf(o) { multiline_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return multiline_getPrototypeOf(o); }\n\n\n\n\n\n\nfunction breakMatcher(node) {\n  if (!node.nextSibling && !node.previousSibling) {\n    return new Delta_default.a().insert('\\n');\n  }\n\n  return new Delta_default.a().insert({\n    multilineBreak: ''\n  });\n}\n\nvar multiline_Multiline = /*#__PURE__*/function (_Module) {\n  multiline_inherits(Multiline, _Module);\n\n  var _super = multiline_createSuper(Multiline);\n\n  function Multiline(quill, options) {\n    var _this;\n\n    multiline_classCallCheck(this, Multiline);\n\n    var path = 'blots/multilineBreak';\n    _this = _super.call(this, quill, options);\n    core_quill[\"a\" /* default */].register(_defineProperty({}, path, multiline_break), true);\n    quill.keyboard.addBinding({\n      key: 'enter',\n      shiftKey: true\n    }, _this.enterHandler.bind(multiline_assertThisInitialized(_this)));\n    quill.keyboard.bindings.enter.unshift(quill.keyboard.bindings.enter.pop());\n    quill.clipboard.addMatcher('BR', breakMatcher);\n    return _this;\n  }\n\n  multiline_createClass(Multiline, [{\n    key: \"enterHandler\",\n    value: function enterHandler(range) {\n      var currentLeaf = this.quill.getLeaf(range.index)[0];\n      var nextLeaf = this.quill.getLeaf(range.index + 1)[0];\n      this.quill.insertEmbed(range.index, 'multilineBreak', true, 'user');\n\n      if (nextLeaf === null || currentLeaf.parent !== nextLeaf.parent) {\n        this.quill.insertEmbed(range.index, 'multilineBreak', true, 'user');\n      }\n\n      this.quill.setSelection(range.index + 1, core_quill[\"a\" /* default */].sources.SILENT);\n    }\n  }]);\n\n  return Multiline;\n}(core_module[\"a\" /* default */]);\n\n/* harmony default export */ var multiline = (multiline_Multiline);\n// EXTERNAL MODULE: ./modules/table/lite.js + 4 modules\nvar lite = __webpack_require__(71);\n\n// EXTERNAL MODULE: ./formats/table/attributors/cell.js\nvar cell = __webpack_require__(9);\n\n// EXTERNAL MODULE: ./formats/table/attributors/table.js\nvar attributors_table = __webpack_require__(8);\n\n// CONCATENATED MODULE: ./quill.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncore[\"default\"].register({\n  'attributors/attribute/direction': direction[\"a\" /* DirectionAttribute */],\n  'attributors/attribute/tableWidth': attributors_table[\"k\" /* TableWidthAttribute */],\n  'attributors/attribute/tableHeight': attributors_table[\"h\" /* TableHeightAttribute */],\n  'attributors/attribute/cellWidth': cell[\"q\" /* CellWidthAttribute */],\n  'attributors/attribute/cellHeight': cell[\"h\" /* CellHeightAttribute */],\n  'attributors/class/align': align[\"b\" /* AlignClass */],\n  'attributors/class/background': background[\"a\" /* BackgroundClass */],\n  'attributors/class/color': color[\"b\" /* ColorClass */],\n  'attributors/class/direction': direction[\"b\" /* DirectionClass */],\n  'attributors/class/font': font[\"a\" /* FontClass */],\n  'attributors/class/size': size[\"a\" /* SizeClass */],\n  'attributors/style/align': align[\"c\" /* AlignStyle */],\n  'attributors/style/background': background[\"b\" /* BackgroundStyle */],\n  'attributors/style/color': color[\"c\" /* ColorStyle */],\n  'attributors/style/direction': direction[\"c\" /* DirectionStyle */],\n  'attributors/style/font': font[\"b\" /* FontStyle */],\n  'attributors/style/size': size[\"b\" /* SizeStyle */],\n  'attributors/style/tableTextAlign': attributors_table[\"j\" /* TableTextAlignStyle */],\n  'attributors/style/tableBackgroundColor': attributors_table[\"c\" /* TableBackgroundColorStyle */],\n  'attributors/style/tableBorder': attributors_table[\"e\" /* TableBorderStyle */],\n  'attributors/style/tableBorderStyle': attributors_table[\"f\" /* TableBorderStyleStyle */],\n  'attributors/style/tableBorderColor': attributors_table[\"d\" /* TableBorderColorStyle */],\n  'attributors/style/tableBorderWidth': attributors_table[\"g\" /* TableBorderWidthStyle */],\n  'attributors/style/tableWidth': attributors_table[\"l\" /* TableWidthStyle */],\n  'attributors/style/tableHeight': attributors_table[\"i\" /* TableHeightStyle */],\n  'attributors/style/cellBackground': cell[\"c\" /* CellBackgroundColorStyle */],\n  'attributors/style/cellBorder': cell[\"e\" /* CellBorderStyle */],\n  'attributors/style/cellBorderStyle': cell[\"f\" /* CellBorderStyleStyle */],\n  'attributors/style/cellBorderWidth': cell[\"g\" /* CellBorderWidthStyle */],\n  'attributors/style/cellBorderColor': cell[\"d\" /* CellBorderColorStyle */],\n  'attributors/style/cellPadding': cell[\"m\" /* CellPaddingStyle */],\n  'attributors/style/cellPaddingTop': cell[\"n\" /* CellPaddingTopStyle */],\n  'attributors/style/cellPaddingBottom': cell[\"j\" /* CellPaddingBottomStyle */],\n  'attributors/style/cellPaddingLeft': cell[\"k\" /* CellPaddingLeftStyle */],\n  'attributors/style/cellPaddingRight': cell[\"l\" /* CellPaddingRightStyle */],\n  'attributors/style/cellVerticalAlign': cell[\"p\" /* CellVerticalAlignStyle */],\n  'attributors/style/cellTextAlign': cell[\"o\" /* CellTextAlignStyle */],\n  'attributors/style/cellWidth': cell[\"r\" /* CellWidthStyle */],\n  'attributors/style/cellHeight': cell[\"i\" /* CellHeightStyle */]\n}, true);\ncore[\"default\"].register({\n  'formats/align': align[\"b\" /* AlignClass */],\n  'formats/direction': direction[\"b\" /* DirectionClass */],\n  'formats/indent': indent,\n  'formats/background': background[\"b\" /* BackgroundStyle */],\n  'formats/color': color[\"c\" /* ColorStyle */],\n  'formats/font': font[\"a\" /* FontClass */],\n  'formats/size': size[\"a\" /* SizeClass */],\n  'formats/blockquote': blockquote,\n  'formats/code-block': code[\"c\" /* default */],\n  'formats/header': header,\n  'formats/list': list_ListItem,\n  'formats/bold': bold[\"a\" /* default */],\n  'formats/code': code[\"a\" /* Code */],\n  'formats/italic': italic,\n  'formats/link': formats_link[\"a\" /* default */],\n  'formats/script': script,\n  'formats/strike': strike,\n  'formats/underline': underline,\n  'formats/formula': formula,\n  'formats/image': formats_image,\n  'formats/video': video,\n  'tableModules/lite': lite[\"a\" /* default */],\n  'tableModules/main': table[\"a\" /* default */],\n  'modules/syntax': syntax[\"b\" /* default */],\n  'modules/multiline': multiline,\n  'modules/table': table[\"a\" /* default */]\n}, true);\n/* harmony default export */ var quill_0 = __webpack_exports__[\"default\"] = (core[\"default\"]);\n\n/***/ }),\n/* 114 */\n/***/ (function(module, exports) {\n\n/**\n * This library modifies the diff-patch-match library by Neil Fraser\n * by removing the patch and match functionality and certain advanced\n * options in the diff function. The original license is as follows:\n *\n * ===\n *\n * Diff Match and Patch\n *\n * Copyright 2006 Google Inc.\n * http://code.google.com/p/google-diff-match-patch/\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * The data structure representing a diff is an array of tuples:\n * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\n * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\n */\nvar DIFF_DELETE = -1;\nvar DIFF_INSERT = 1;\nvar DIFF_EQUAL = 0;\n\n\n/**\n * Find the differences between two texts.  Simplifies the problem by stripping\n * any common prefix or suffix off the texts before diffing.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {Int|Object} [cursor_pos] Edit position in text1 or object with more info\n * @return {Array} Array of diff tuples.\n */\nfunction diff_main(text1, text2, cursor_pos, _fix_unicode) {\n  // Check for equality\n  if (text1 === text2) {\n    if (text1) {\n      return [[DIFF_EQUAL, text1]];\n    }\n    return [];\n  }\n\n  if (cursor_pos != null) {\n    var editdiff = find_cursor_edit_diff(text1, text2, cursor_pos);\n    if (editdiff) {\n      return editdiff;\n    }\n  }\n\n  // Trim off common prefix (speedup).\n  var commonlength = diff_commonPrefix(text1, text2);\n  var commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength);\n  text2 = text2.substring(commonlength);\n\n  // Trim off common suffix (speedup).\n  commonlength = diff_commonSuffix(text1, text2);\n  var commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength);\n  text2 = text2.substring(0, text2.length - commonlength);\n\n  // Compute the diff on the middle block.\n  var diffs = diff_compute_(text1, text2);\n\n  // Restore the prefix and suffix.\n  if (commonprefix) {\n    diffs.unshift([DIFF_EQUAL, commonprefix]);\n  }\n  if (commonsuffix) {\n    diffs.push([DIFF_EQUAL, commonsuffix]);\n  }\n  diff_cleanupMerge(diffs, _fix_unicode);\n  return diffs;\n};\n\n\n/**\n * Find the differences between two texts.  Assumes that the texts do not\n * have any common prefix or suffix.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @return {Array} Array of diff tuples.\n */\nfunction diff_compute_(text1, text2) {\n  var diffs;\n\n  if (!text1) {\n    // Just add some text (speedup).\n    return [[DIFF_INSERT, text2]];\n  }\n\n  if (!text2) {\n    // Just delete some text (speedup).\n    return [[DIFF_DELETE, text1]];\n  }\n\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  var i = longtext.indexOf(shorttext);\n  if (i !== -1) {\n    // Shorter text is inside the longer text (speedup).\n    diffs = [\n      [DIFF_INSERT, longtext.substring(0, i)],\n      [DIFF_EQUAL, shorttext],\n      [DIFF_INSERT, longtext.substring(i + shorttext.length)]\n    ];\n    // Swap insertions for deletions if diff is reversed.\n    if (text1.length > text2.length) {\n      diffs[0][0] = diffs[2][0] = DIFF_DELETE;\n    }\n    return diffs;\n  }\n\n  if (shorttext.length === 1) {\n    // Single character string.\n    // After the previous speedup, the character can't be an equality.\n    return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n  }\n\n  // Check to see if the problem can be split in two.\n  var hm = diff_halfMatch_(text1, text2);\n  if (hm) {\n    // A half-match was found, sort out the return data.\n    var text1_a = hm[0];\n    var text1_b = hm[1];\n    var text2_a = hm[2];\n    var text2_b = hm[3];\n    var mid_common = hm[4];\n    // Send both pairs off for separate processing.\n    var diffs_a = diff_main(text1_a, text2_a);\n    var diffs_b = diff_main(text1_b, text2_b);\n    // Merge the results.\n    return diffs_a.concat([[DIFF_EQUAL, mid_common]], diffs_b);\n  }\n\n  return diff_bisect_(text1, text2);\n};\n\n\n/**\n * Find the 'middle snake' of a diff, split the problem in two\n * and return the recursively constructed diff.\n * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @return {Array} Array of diff tuples.\n * @private\n */\nfunction diff_bisect_(text1, text2) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  var max_d = Math.ceil((text1_length + text2_length) / 2);\n  var v_offset = max_d;\n  var v_length = 2 * max_d;\n  var v1 = new Array(v_length);\n  var v2 = new Array(v_length);\n  // Setting all elements to -1 is faster in Chrome & Firefox than mixing\n  // integers and undefined.\n  for (var x = 0; x < v_length; x++) {\n    v1[x] = -1;\n    v2[x] = -1;\n  }\n  v1[v_offset + 1] = 0;\n  v2[v_offset + 1] = 0;\n  var delta = text1_length - text2_length;\n  // If the total number of characters is odd, then the front path will collide\n  // with the reverse path.\n  var front = (delta % 2 !== 0);\n  // Offsets for start and end of k loop.\n  // Prevents mapping of space beyond the grid.\n  var k1start = 0;\n  var k1end = 0;\n  var k2start = 0;\n  var k2end = 0;\n  for (var d = 0; d < max_d; d++) {\n    // Walk the front path one step.\n    for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      var k1_offset = v_offset + k1;\n      var x1;\n      if (k1 === -d || (k1 !== d && v1[k1_offset - 1] < v1[k1_offset + 1])) {\n        x1 = v1[k1_offset + 1];\n      } else {\n        x1 = v1[k1_offset - 1] + 1;\n      }\n      var y1 = x1 - k1;\n      while (\n        x1 < text1_length && y1 < text2_length &&\n        text1.charAt(x1) === text2.charAt(y1)\n      ) {\n        x1++;\n        y1++;\n      }\n      v1[k1_offset] = x1;\n      if (x1 > text1_length) {\n        // Ran off the right of the graph.\n        k1end += 2;\n      } else if (y1 > text2_length) {\n        // Ran off the bottom of the graph.\n        k1start += 2;\n      } else if (front) {\n        var k2_offset = v_offset + delta - k1;\n        if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] !== -1) {\n          // Mirror x2 onto top-left coordinate system.\n          var x2 = text1_length - v2[k2_offset];\n          if (x1 >= x2) {\n            // Overlap detected.\n            return diff_bisectSplit_(text1, text2, x1, y1);\n          }\n        }\n      }\n    }\n\n    // Walk the reverse path one step.\n    for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      var k2_offset = v_offset + k2;\n      var x2;\n      if (k2 === -d || (k2 !== d && v2[k2_offset - 1] < v2[k2_offset + 1])) {\n        x2 = v2[k2_offset + 1];\n      } else {\n        x2 = v2[k2_offset - 1] + 1;\n      }\n      var y2 = x2 - k2;\n      while (\n        x2 < text1_length && y2 < text2_length &&\n        text1.charAt(text1_length - x2 - 1) === text2.charAt(text2_length - y2 - 1)\n      ) {\n        x2++;\n        y2++;\n      }\n      v2[k2_offset] = x2;\n      if (x2 > text1_length) {\n        // Ran off the left of the graph.\n        k2end += 2;\n      } else if (y2 > text2_length) {\n        // Ran off the top of the graph.\n        k2start += 2;\n      } else if (!front) {\n        var k1_offset = v_offset + delta - k2;\n        if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] !== -1) {\n          var x1 = v1[k1_offset];\n          var y1 = v_offset + x1 - k1_offset;\n          // Mirror x2 onto top-left coordinate system.\n          x2 = text1_length - x2;\n          if (x1 >= x2) {\n            // Overlap detected.\n            return diff_bisectSplit_(text1, text2, x1, y1);\n          }\n        }\n      }\n    }\n  }\n  // Diff took too long and hit the deadline or\n  // number of diffs equals number of characters, no commonality at all.\n  return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n};\n\n\n/**\n * Given the location of the 'middle snake', split the diff in two parts\n * and recurse.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} x Index of split point in text1.\n * @param {number} y Index of split point in text2.\n * @return {Array} Array of diff tuples.\n */\nfunction diff_bisectSplit_(text1, text2, x, y) {\n  var text1a = text1.substring(0, x);\n  var text2a = text2.substring(0, y);\n  var text1b = text1.substring(x);\n  var text2b = text2.substring(y);\n\n  // Compute both diffs serially.\n  var diffs = diff_main(text1a, text2a);\n  var diffsb = diff_main(text1b, text2b);\n\n  return diffs.concat(diffsb);\n};\n\n\n/**\n * Determine the common prefix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the start of each\n *     string.\n */\nfunction diff_commonPrefix(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 || text1.charAt(0) !== text2.charAt(0)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerstart = 0;\n  while (pointermin < pointermid) {\n    if (\n      text1.substring(pointerstart, pointermid) ==\n      text2.substring(pointerstart, pointermid)\n    ) {\n      pointermin = pointermid;\n      pointerstart = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n\n  if (is_surrogate_pair_start(text1.charCodeAt(pointermid - 1))) {\n    pointermid--;\n  }\n\n  return pointermid;\n};\n\n\n/**\n * Determine the common suffix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of each string.\n */\nfunction diff_commonSuffix(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 || text1.slice(-1) !== text2.slice(-1)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerend = 0;\n  while (pointermin < pointermid) {\n    if (\n      text1.substring(text1.length - pointermid, text1.length - pointerend) ==\n      text2.substring(text2.length - pointermid, text2.length - pointerend)\n    ) {\n      pointermin = pointermid;\n      pointerend = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n\n  if (is_surrogate_pair_end(text1.charCodeAt(text1.length - pointermid))) {\n    pointermid--;\n  }\n\n  return pointermid;\n};\n\n\n/**\n * Do the two texts share a substring which is at least half the length of the\n * longer text?\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {Array.<string>} Five element Array, containing the prefix of\n *     text1, the suffix of text1, the prefix of text2, the suffix of\n *     text2 and the common middle.  Or null if there was no match.\n */\nfunction diff_halfMatch_(text1, text2) {\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {\n    return null;  // Pointless.\n  }\n\n  /**\n   * Does a substring of shorttext exist within longtext such that the substring\n   * is at least half the length of longtext?\n   * Closure, but does not reference any external variables.\n   * @param {string} longtext Longer string.\n   * @param {string} shorttext Shorter string.\n   * @param {number} i Start index of quarter length substring within longtext.\n   * @return {Array.<string>} Five element Array, containing the prefix of\n   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\n   *     of shorttext and the common middle.  Or null if there was no match.\n   * @private\n   */\n  function diff_halfMatchI_(longtext, shorttext, i) {\n    // Start with a 1/4 length substring at position i as a seed.\n    var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));\n    var j = -1;\n    var best_common = '';\n    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;\n    while ((j = shorttext.indexOf(seed, j + 1)) !== -1) {\n      var prefixLength = diff_commonPrefix(\n        longtext.substring(i), shorttext.substring(j));\n      var suffixLength = diff_commonSuffix(\n        longtext.substring(0, i), shorttext.substring(0, j));\n      if (best_common.length < suffixLength + prefixLength) {\n        best_common = shorttext.substring(\n          j - suffixLength, j) + shorttext.substring(j, j + prefixLength);\n        best_longtext_a = longtext.substring(0, i - suffixLength);\n        best_longtext_b = longtext.substring(i + prefixLength);\n        best_shorttext_a = shorttext.substring(0, j - suffixLength);\n        best_shorttext_b = shorttext.substring(j + prefixLength);\n      }\n    }\n    if (best_common.length * 2 >= longtext.length) {\n      return [\n        best_longtext_a, best_longtext_b,\n        best_shorttext_a, best_shorttext_b, best_common\n      ];\n    } else {\n      return null;\n    }\n  }\n\n  // First check if the second quarter is the seed for a half-match.\n  var hm1 = diff_halfMatchI_(longtext, shorttext, Math.ceil(longtext.length / 4));\n  // Check again based on the third quarter.\n  var hm2 = diff_halfMatchI_(longtext, shorttext, Math.ceil(longtext.length / 2));\n  var hm;\n  if (!hm1 && !hm2) {\n    return null;\n  } else if (!hm2) {\n    hm = hm1;\n  } else if (!hm1) {\n    hm = hm2;\n  } else {\n    // Both matched.  Select the longest.\n    hm = hm1[4].length > hm2[4].length ? hm1 : hm2;\n  }\n\n  // A half-match was found, sort out the return data.\n  var text1_a, text1_b, text2_a, text2_b;\n  if (text1.length > text2.length) {\n    text1_a = hm[0];\n    text1_b = hm[1];\n    text2_a = hm[2];\n    text2_b = hm[3];\n  } else {\n    text2_a = hm[0];\n    text2_b = hm[1];\n    text1_a = hm[2];\n    text1_b = hm[3];\n  }\n  var mid_common = hm[4];\n  return [text1_a, text1_b, text2_a, text2_b, mid_common];\n};\n\n\n/**\n * Reorder and merge like edit sections.  Merge equalities.\n * Any edit section can move as long as it doesn't cross an equality.\n * @param {Array} diffs Array of diff tuples.\n * @param {boolean} fix_unicode Whether to normalize to a unicode-correct diff\n */\nfunction diff_cleanupMerge(diffs, fix_unicode) {\n  diffs.push([DIFF_EQUAL, '']);  // Add a dummy entry at the end.\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  var commonlength;\n  while (pointer < diffs.length) {\n    if (pointer < diffs.length - 1 && !diffs[pointer][1]) {\n      diffs.splice(pointer, 1);\n      continue;\n    }\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_EQUAL:\n        var previous_equality = pointer - count_insert - count_delete - 1;\n        if (fix_unicode) {\n          // prevent splitting of unicode surrogate pairs.  when fix_unicode is true,\n          // we assume that the old and new text in the diff are complete and correct\n          // unicode-encoded JS strings, but the tuple boundaries may fall between\n          // surrogate pairs.  we fix this by shaving off stray surrogates from the end\n          // of the previous equality and the beginning of this equality.  this may create\n          // empty equalities or a common prefix or suffix.  for example, if AB and AC are\n          // emojis, `[[0, 'A'], [-1, 'BA'], [0, 'C']]` would turn into deleting 'ABAC' and\n          // inserting 'AC', and then the common suffix 'AC' will be eliminated.  in this\n          // particular case, both equalities go away, we absorb any previous inequalities,\n          // and we keep scanning for the next equality before rewriting the tuples.\n          if (previous_equality >= 0 && ends_with_pair_start(diffs[previous_equality][1])) {\n            var stray = diffs[previous_equality][1].slice(-1);\n            diffs[previous_equality][1] = diffs[previous_equality][1].slice(0, -1);\n            text_delete = stray + text_delete;\n            text_insert = stray + text_insert;\n            if (!diffs[previous_equality][1]) {\n              // emptied out previous equality, so delete it and include previous delete/insert\n              diffs.splice(previous_equality, 1);\n              pointer--;\n              var k = previous_equality - 1;\n              if (diffs[k] && diffs[k][0] === DIFF_INSERT) {\n                count_insert++;\n                text_insert = diffs[k][1] + text_insert;\n                k--;\n              }\n              if (diffs[k] && diffs[k][0] === DIFF_DELETE) {\n                count_delete++;\n                text_delete = diffs[k][1] + text_delete;\n                k--;\n              }\n              previous_equality = k;\n            }\n          }\n          if (starts_with_pair_end(diffs[pointer][1])) {\n            var stray = diffs[pointer][1].charAt(0);\n            diffs[pointer][1] = diffs[pointer][1].slice(1);\n            text_delete += stray;\n            text_insert += stray;\n          }\n        }\n        if (pointer < diffs.length - 1 && !diffs[pointer][1]) {\n          // for empty equality not at end, wait for next equality\n          diffs.splice(pointer, 1);\n          break;\n        }\n        if (text_delete.length > 0 || text_insert.length > 0) {\n          // note that diff_commonPrefix and diff_commonSuffix are unicode-aware\n          if (text_delete.length > 0 && text_insert.length > 0) {\n            // Factor out any common prefixes.\n            commonlength = diff_commonPrefix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              if (previous_equality >= 0) {\n                diffs[previous_equality][1] += text_insert.substring(0, commonlength);\n              } else {\n                diffs.splice(0, 0, [DIFF_EQUAL, text_insert.substring(0, commonlength)]);\n                pointer++;\n              }\n              text_insert = text_insert.substring(commonlength);\n              text_delete = text_delete.substring(commonlength);\n            }\n            // Factor out any common suffixes.\n            commonlength = diff_commonSuffix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              diffs[pointer][1] =\n                text_insert.substring(text_insert.length - commonlength) + diffs[pointer][1];\n              text_insert = text_insert.substring(0, text_insert.length - commonlength);\n              text_delete = text_delete.substring(0, text_delete.length - commonlength);\n            }\n          }\n          // Delete the offending records and add the merged ones.\n          var n = count_insert + count_delete;\n          if (text_delete.length === 0 && text_insert.length === 0) {\n            diffs.splice(pointer - n, n);\n            pointer = pointer - n;\n          } else if (text_delete.length === 0) {\n            diffs.splice(pointer - n, n, [DIFF_INSERT, text_insert]);\n            pointer = pointer - n + 1;\n          } else if (text_insert.length === 0) {\n            diffs.splice(pointer - n, n, [DIFF_DELETE, text_delete]);\n            pointer = pointer - n + 1;\n          } else {\n            diffs.splice(pointer - n, n, [DIFF_DELETE, text_delete], [DIFF_INSERT, text_insert]);\n            pointer = pointer - n + 2;\n          }\n        }\n        if (pointer !== 0 && diffs[pointer - 1][0] === DIFF_EQUAL) {\n          // Merge this equality with the previous one.\n          diffs[pointer - 1][1] += diffs[pointer][1];\n          diffs.splice(pointer, 1);\n        } else {\n          pointer++;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n  }\n  if (diffs[diffs.length - 1][1] === '') {\n    diffs.pop();  // Remove the dummy entry at the end.\n  }\n\n  // Second pass: look for single edits surrounded on both sides by equalities\n  // which can be shifted sideways to eliminate an equality.\n  // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\n  var changes = false;\n  pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] === DIFF_EQUAL &&\n      diffs[pointer + 1][0] === DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      if (diffs[pointer][1].substring(diffs[pointer][1].length -\n        diffs[pointer - 1][1].length) === diffs[pointer - 1][1]) {\n        // Shift the edit over the previous equality.\n        diffs[pointer][1] = diffs[pointer - 1][1] +\n          diffs[pointer][1].substring(0, diffs[pointer][1].length -\n            diffs[pointer - 1][1].length);\n        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\n        diffs.splice(pointer - 1, 1);\n        changes = true;\n      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==\n        diffs[pointer + 1][1]) {\n        // Shift the edit over the next equality.\n        diffs[pointer - 1][1] += diffs[pointer + 1][1];\n        diffs[pointer][1] =\n          diffs[pointer][1].substring(diffs[pointer + 1][1].length) +\n          diffs[pointer + 1][1];\n        diffs.splice(pointer + 1, 1);\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n  // If shifts were made, the diff needs reordering and another shift sweep.\n  if (changes) {\n    diff_cleanupMerge(diffs, fix_unicode);\n  }\n};\n\nfunction is_surrogate_pair_start(charCode) {\n  return charCode >= 0xD800 && charCode <= 0xDBFF;\n}\n\nfunction is_surrogate_pair_end(charCode) {\n  return charCode >= 0xDC00 && charCode <= 0xDFFF;\n}\n\nfunction starts_with_pair_end(str) {\n  return is_surrogate_pair_end(str.charCodeAt(0));\n}\n\nfunction ends_with_pair_start(str) {\n  return is_surrogate_pair_start(str.charCodeAt(str.length - 1));\n}\n\nfunction remove_empty_tuples(tuples) {\n  var ret = [];\n  for (var i = 0; i < tuples.length; i++) {\n    if (tuples[i][1].length > 0) {\n      ret.push(tuples[i]);\n    }\n  }\n  return ret;\n}\n\nfunction make_edit_splice(before, oldMiddle, newMiddle, after) {\n  if (ends_with_pair_start(before) || starts_with_pair_end(after)) {\n    return null;\n  }\n  return remove_empty_tuples([\n    [DIFF_EQUAL, before],\n    [DIFF_DELETE, oldMiddle],\n    [DIFF_INSERT, newMiddle],\n    [DIFF_EQUAL, after]\n  ]);\n}\n\nfunction find_cursor_edit_diff(oldText, newText, cursor_pos) {\n  // note: this runs after equality check has ruled out exact equality\n  var oldRange = typeof cursor_pos === 'number' ?\n    { index: cursor_pos, length: 0 } : cursor_pos.oldRange;\n  var newRange = typeof cursor_pos === 'number' ?\n    null : cursor_pos.newRange;\n  // take into account the old and new selection to generate the best diff\n  // possible for a text edit.  for example, a text change from \"xxx\" to \"xx\"\n  // could be a delete or forwards-delete of any one of the x's, or the\n  // result of selecting two of the x's and typing \"x\".\n  var oldLength = oldText.length;\n  var newLength = newText.length;\n  if (oldRange.length === 0 && (newRange === null || newRange.length === 0)) {\n    // see if we have an insert or delete before or after cursor\n    var oldCursor = oldRange.index;\n    var oldBefore = oldText.slice(0, oldCursor);\n    var oldAfter = oldText.slice(oldCursor);\n    var maybeNewCursor = newRange ? newRange.index : null;\n    editBefore: {\n      // is this an insert or delete right before oldCursor?\n      var newCursor = oldCursor + newLength - oldLength;\n      if (maybeNewCursor !== null && maybeNewCursor !== newCursor) {\n        break editBefore;\n      }\n      if (newCursor < 0 || newCursor > newLength) {\n        break editBefore;\n      }\n      var newBefore = newText.slice(0, newCursor);\n      var newAfter = newText.slice(newCursor);\n      if (newAfter !== oldAfter) {\n        break editBefore;\n      }\n      var prefixLength = Math.min(oldCursor, newCursor);\n      var oldPrefix = oldBefore.slice(0, prefixLength);\n      var newPrefix = newBefore.slice(0, prefixLength);\n      if (oldPrefix !== newPrefix) {\n        break editBefore;\n      }\n      var oldMiddle = oldBefore.slice(prefixLength);\n      var newMiddle = newBefore.slice(prefixLength);\n      return make_edit_splice(oldPrefix, oldMiddle, newMiddle, oldAfter);\n    }\n    editAfter: {\n      // is this an insert or delete right after oldCursor?\n      if (maybeNewCursor !== null && maybeNewCursor !== oldCursor) {\n        break editAfter;\n      }\n      var cursor = oldCursor;\n      var newBefore = newText.slice(0, cursor);\n      var newAfter = newText.slice(cursor);\n      if (newBefore !== oldBefore) {\n        break editAfter;\n      }\n      var suffixLength = Math.min(oldLength - cursor, newLength - cursor);\n      var oldSuffix = oldAfter.slice(oldAfter.length - suffixLength);\n      var newSuffix = newAfter.slice(newAfter.length - suffixLength);\n      if (oldSuffix !== newSuffix) {\n        break editAfter;\n      }\n      var oldMiddle = oldAfter.slice(0, oldAfter.length - suffixLength);\n      var newMiddle = newAfter.slice(0, newAfter.length - suffixLength);\n      return make_edit_splice(oldBefore, oldMiddle, newMiddle, oldSuffix);\n    }\n  }\n  if (oldRange.length > 0 && newRange && newRange.length === 0) {\n    replaceRange: {\n      // see if diff could be a splice of the old selection range\n      var oldPrefix = oldText.slice(0, oldRange.index);\n      var oldSuffix = oldText.slice(oldRange.index + oldRange.length);\n      var prefixLength = oldPrefix.length;\n      var suffixLength = oldSuffix.length;\n      if (newLength < prefixLength + suffixLength) {\n        break replaceRange;\n      }\n      var newPrefix = newText.slice(0, prefixLength);\n      var newSuffix = newText.slice(newLength - suffixLength);\n      if (oldPrefix !== newPrefix || oldSuffix !== newSuffix) {\n        break replaceRange;\n      }\n      var oldMiddle = oldText.slice(prefixLength, oldLength - suffixLength);\n      var newMiddle = newText.slice(prefixLength, newLength - suffixLength);\n      return make_edit_splice(oldPrefix, oldMiddle, newMiddle, oldSuffix);\n    }\n  }\n\n  return null;\n}\n\nfunction diff(text1, text2, cursor_pos) {\n  // only pass fix_unicode=true at the top level, not when diff_main is\n  // recursively invoked\n  return diff_main(text1, text2, cursor_pos, true);\n}\n\ndiff.INSERT = DIFF_INSERT;\ndiff.DELETE = DIFF_DELETE;\ndiff.EQUAL = DIFF_EQUAL;\n\nmodule.exports = diff;\n\n\n/***/ }),\n/* 115 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar lodash_clonedeep_1 = __importDefault(__webpack_require__(18));\nvar lodash_isequal_1 = __importDefault(__webpack_require__(29));\nvar AttributeMap;\n(function (AttributeMap) {\n    function compose(a, b, keepNull) {\n        if (a === void 0) { a = {}; }\n        if (b === void 0) { b = {}; }\n        if (typeof a !== 'object') {\n            a = {};\n        }\n        if (typeof b !== 'object') {\n            b = {};\n        }\n        var attributes = lodash_clonedeep_1.default(b);\n        if (!keepNull) {\n            attributes = Object.keys(attributes).reduce(function (copy, key) {\n                if (attributes[key] != null) {\n                    copy[key] = attributes[key];\n                }\n                return copy;\n            }, {});\n        }\n        for (var key in a) {\n            if (a[key] !== undefined && b[key] === undefined) {\n                attributes[key] = a[key];\n            }\n        }\n        return Object.keys(attributes).length > 0 ? attributes : undefined;\n    }\n    AttributeMap.compose = compose;\n    function diff(a, b) {\n        if (a === void 0) { a = {}; }\n        if (b === void 0) { b = {}; }\n        if (typeof a !== 'object') {\n            a = {};\n        }\n        if (typeof b !== 'object') {\n            b = {};\n        }\n        var attributes = Object.keys(a)\n            .concat(Object.keys(b))\n            .reduce(function (attrs, key) {\n            if (!lodash_isequal_1.default(a[key], b[key])) {\n                attrs[key] = b[key] === undefined ? null : b[key];\n            }\n            return attrs;\n        }, {});\n        return Object.keys(attributes).length > 0 ? attributes : undefined;\n    }\n    AttributeMap.diff = diff;\n    function invert(attr, base) {\n        if (attr === void 0) { attr = {}; }\n        if (base === void 0) { base = {}; }\n        attr = attr || {};\n        var baseInverted = Object.keys(base).reduce(function (memo, key) {\n            if (base[key] !== attr[key] && attr[key] !== undefined) {\n                memo[key] = base[key];\n            }\n            return memo;\n        }, {});\n        return Object.keys(attr).reduce(function (memo, key) {\n            if (attr[key] !== base[key] && base[key] === undefined) {\n                memo[key] = null;\n            }\n            return memo;\n        }, baseInverted);\n    }\n    AttributeMap.invert = invert;\n    function transform(a, b, priority) {\n        if (priority === void 0) { priority = false; }\n        if (typeof a !== 'object') {\n            return b;\n        }\n        if (typeof b !== 'object') {\n            return undefined;\n        }\n        if (!priority) {\n            return b; // b simply overwrites us without priority\n        }\n        var attributes = Object.keys(b).reduce(function (attrs, key) {\n            if (a[key] === undefined) {\n                attrs[key] = b[key]; // null is a valid value\n            }\n            return attrs;\n        }, {});\n        return Object.keys(attributes).length > 0 ? attributes : undefined;\n    }\n    AttributeMap.transform = transform;\n})(AttributeMap || (AttributeMap = {}));\nexports.default = AttributeMap;\n\n\n/***/ }),\n/* 116 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Op_1 = __importDefault(__webpack_require__(90));\nvar Iterator = /** @class */ (function () {\n    function Iterator(ops) {\n        this.ops = ops;\n        this.index = 0;\n        this.offset = 0;\n    }\n    Iterator.prototype.hasNext = function () {\n        return this.peekLength() < Infinity;\n    };\n    Iterator.prototype.next = function (length) {\n        if (!length) {\n            length = Infinity;\n        }\n        var nextOp = this.ops[this.index];\n        if (nextOp) {\n            var offset = this.offset;\n            var opLength = Op_1.default.length(nextOp);\n            if (length >= opLength - offset) {\n                length = opLength - offset;\n                this.index += 1;\n                this.offset = 0;\n            }\n            else {\n                this.offset += length;\n            }\n            if (typeof nextOp.delete === 'number') {\n                return { delete: length };\n            }\n            else {\n                var retOp = {};\n                if (nextOp.attributes) {\n                    retOp.attributes = nextOp.attributes;\n                }\n                if (typeof nextOp.retain === 'number') {\n                    retOp.retain = length;\n                }\n                else if (typeof nextOp.insert === 'string') {\n                    retOp.insert = nextOp.insert.substr(offset, length);\n                }\n                else {\n                    // offset should === 0, length should === 1\n                    retOp.insert = nextOp.insert;\n                }\n                return retOp;\n            }\n        }\n        else {\n            return { retain: Infinity };\n        }\n    };\n    Iterator.prototype.peek = function () {\n        return this.ops[this.index];\n    };\n    Iterator.prototype.peekLength = function () {\n        if (this.ops[this.index]) {\n            // Should never return 0 if our index is being managed correctly\n            return Op_1.default.length(this.ops[this.index]) - this.offset;\n        }\n        else {\n            return Infinity;\n        }\n    };\n    Iterator.prototype.peekType = function () {\n        if (this.ops[this.index]) {\n            if (typeof this.ops[this.index].delete === 'number') {\n                return 'delete';\n            }\n            else if (typeof this.ops[this.index].retain === 'number') {\n                return 'retain';\n            }\n            else {\n                return 'insert';\n            }\n        }\n        return 'retain';\n    };\n    Iterator.prototype.rest = function () {\n        if (!this.hasNext()) {\n            return [];\n        }\n        else if (this.offset === 0) {\n            return this.ops.slice(this.index);\n        }\n        else {\n            var offset = this.offset;\n            var index = this.index;\n            var next = this.next();\n            var rest = this.ops.slice(this.index);\n            this.offset = offset;\n            this.index = index;\n            return [next].concat(rest);\n        }\n    };\n    return Iterator;\n}());\nexports.default = Iterator;\n\n\n/***/ }),\n/* 117 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar parent = __webpack_require__(118);\n\nmodule.exports = parent;\n\n\n/***/ }),\n/* 118 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar parent = __webpack_require__(119);\n\nmodule.exports = parent;\n\n\n/***/ }),\n/* 119 */\n/***/ (function(module, exports, __webpack_require__) {\n\n__webpack_require__(120);\n__webpack_require__(143);\nvar path = __webpack_require__(111);\n\nmodule.exports = path.Array.from;\n\n\n/***/ }),\n/* 120 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar charAt = __webpack_require__(121).charAt;\nvar toString = __webpack_require__(74);\nvar InternalStateModule = __webpack_require__(96);\nvar defineIterator = __webpack_require__(129);\n\nvar STRING_ITERATOR = 'String Iterator';\nvar setInternalState = InternalStateModule.set;\nvar getInternalState = InternalStateModule.getterFor(STRING_ITERATOR);\n\n// `String.prototype[@@iterator]` method\n// https://tc39.es/ecma262/#sec-string.prototype-@@iterator\ndefineIterator(String, 'String', function (iterated) {\n  setInternalState(this, {\n    type: STRING_ITERATOR,\n    string: toString(iterated),\n    index: 0\n  });\n// `%StringIteratorPrototype%.next` method\n// https://tc39.es/ecma262/#sec-%stringiteratorprototype%.next\n}, function next() {\n  var state = getInternalState(this);\n  var string = state.string;\n  var index = state.index;\n  var point;\n  if (index >= string.length) return { value: undefined, done: true };\n  point = charAt(string, index);\n  state.index += point.length;\n  return { value: point, done: false };\n});\n\n\n/***/ }),\n/* 121 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar uncurryThis = __webpack_require__(21);\nvar toIntegerOrInfinity = __webpack_require__(73);\nvar toString = __webpack_require__(74);\nvar requireObjectCoercible = __webpack_require__(65);\n\nvar charAt = uncurryThis(''.charAt);\nvar charCodeAt = uncurryThis(''.charCodeAt);\nvar stringSlice = uncurryThis(''.slice);\n\nvar createMethod = function (CONVERT_TO_STRING) {\n  return function ($this, pos) {\n    var S = toString(requireObjectCoercible($this));\n    var position = toIntegerOrInfinity(pos);\n    var size = S.length;\n    var first, second;\n    if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;\n    first = charCodeAt(S, position);\n    return first < 0xD800 || first > 0xDBFF || position + 1 === size\n      || (second = charCodeAt(S, position + 1)) < 0xDC00 || second > 0xDFFF\n        ? CONVERT_TO_STRING\n          ? charAt(S, position)\n          : first\n        : CONVERT_TO_STRING\n          ? stringSlice(S, position, position + 2)\n          : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;\n  };\n};\n\nmodule.exports = {\n  // `String.prototype.codePointAt` method\n  // https://tc39.es/ecma262/#sec-string.prototype.codepointat\n  codeAt: createMethod(false),\n  // `String.prototype.at` method\n  // https://github.com/mathiasbynens/String.prototype.at\n  charAt: createMethod(true)\n};\n\n\n/***/ }),\n/* 122 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar wellKnownSymbol = __webpack_require__(27);\n\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\nvar test = {};\n\ntest[TO_STRING_TAG] = 'z';\n\nmodule.exports = String(test) === '[object z]';\n\n\n/***/ }),\n/* 123 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar global = __webpack_require__(10);\nvar userAgent = __webpack_require__(124);\n\nvar process = global.process;\nvar Deno = global.Deno;\nvar versions = process && process.versions || Deno && Deno.version;\nvar v8 = versions && versions.v8;\nvar match, version;\n\nif (v8) {\n  match = v8.split('.');\n  // in old Chrome, versions of V8 isn't V8 = Chrome / 10\n  // but their correct versions are not interesting for us\n  version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);\n}\n\n// BrowserFS NodeJS `process` polyfill incorrectly set `.v8` to `0.0`\n// so check `userAgent` even if `.v8` exists, but 0\nif (!version && userAgent) {\n  match = userAgent.match(/Edge\\/(\\d+)/);\n  if (!match || match[1] >= 74) {\n    match = userAgent.match(/Chrome\\/(\\d+)/);\n    if (match) version = +match[1];\n  }\n}\n\nmodule.exports = version;\n\n\n/***/ }),\n/* 124 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar getBuiltIn = __webpack_require__(56);\n\nmodule.exports = getBuiltIn('navigator', 'userAgent') || '';\n\n\n/***/ }),\n/* 125 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar global = __webpack_require__(10);\nvar isCallable = __webpack_require__(22);\nvar inspectSource = __webpack_require__(79);\n\nvar WeakMap = global.WeakMap;\n\nmodule.exports = isCallable(WeakMap) && /native code/.test(inspectSource(WeakMap));\n\n\n/***/ }),\n/* 126 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar global = __webpack_require__(10);\nvar call = __webpack_require__(39);\nvar isObject = __webpack_require__(48);\nvar isSymbol = __webpack_require__(99);\nvar getMethod = __webpack_require__(81);\nvar ordinaryToPrimitive = __webpack_require__(128);\nvar wellKnownSymbol = __webpack_require__(27);\n\nvar TypeError = global.TypeError;\nvar TO_PRIMITIVE = wellKnownSymbol('toPrimitive');\n\n// `ToPrimitive` abstract operation\n// https://tc39.es/ecma262/#sec-toprimitive\nmodule.exports = function (input, pref) {\n  if (!isObject(input) || isSymbol(input)) return input;\n  var exoticToPrim = getMethod(input, TO_PRIMITIVE);\n  var result;\n  if (exoticToPrim) {\n    if (pref === undefined) pref = 'default';\n    result = call(exoticToPrim, input, pref);\n    if (!isObject(result) || isSymbol(result)) return result;\n    throw TypeError(\"Can't convert object to primitive value\");\n  }\n  if (pref === undefined) pref = 'number';\n  return ordinaryToPrimitive(input, pref);\n};\n\n\n/***/ }),\n/* 127 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar uncurryThis = __webpack_require__(21);\n\nmodule.exports = uncurryThis({}.isPrototypeOf);\n\n\n/***/ }),\n/* 128 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar global = __webpack_require__(10);\nvar call = __webpack_require__(39);\nvar isCallable = __webpack_require__(22);\nvar isObject = __webpack_require__(48);\n\nvar TypeError = global.TypeError;\n\n// `OrdinaryToPrimitive` abstract operation\n// https://tc39.es/ecma262/#sec-ordinarytoprimitive\nmodule.exports = function (input, pref) {\n  var fn, val;\n  if (pref === 'string' && isCallable(fn = input.toString) && !isObject(val = call(fn, input))) return val;\n  if (isCallable(fn = input.valueOf) && !isObject(val = call(fn, input))) return val;\n  if (pref !== 'string' && isCallable(fn = input.toString) && !isObject(val = call(fn, input))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n\n\n/***/ }),\n/* 129 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar $ = __webpack_require__(57);\nvar call = __webpack_require__(39);\nvar IS_PURE = __webpack_require__(63);\nvar FunctionName = __webpack_require__(102);\nvar isCallable = __webpack_require__(22);\nvar createIteratorConstructor = __webpack_require__(137);\nvar getPrototypeOf = __webpack_require__(108);\nvar setPrototypeOf = __webpack_require__(141);\nvar setToStringTag = __webpack_require__(109);\nvar createNonEnumerableProperty = __webpack_require__(66);\nvar redefine = __webpack_require__(86);\nvar wellKnownSymbol = __webpack_require__(27);\nvar Iterators = __webpack_require__(68);\nvar IteratorsCore = __webpack_require__(106);\n\nvar PROPER_FUNCTION_NAME = FunctionName.PROPER;\nvar CONFIGURABLE_FUNCTION_NAME = FunctionName.CONFIGURABLE;\nvar IteratorPrototype = IteratorsCore.IteratorPrototype;\nvar BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;\nvar ITERATOR = wellKnownSymbol('iterator');\nvar KEYS = 'keys';\nvar VALUES = 'values';\nvar ENTRIES = 'entries';\n\nvar returnThis = function () { return this; };\n\nmodule.exports = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {\n  createIteratorConstructor(IteratorConstructor, NAME, next);\n\n  var getIterationMethod = function (KIND) {\n    if (KIND === DEFAULT && defaultIterator) return defaultIterator;\n    if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype) return IterablePrototype[KIND];\n    switch (KIND) {\n      case KEYS: return function keys() { return new IteratorConstructor(this, KIND); };\n      case VALUES: return function values() { return new IteratorConstructor(this, KIND); };\n      case ENTRIES: return function entries() { return new IteratorConstructor(this, KIND); };\n    } return function () { return new IteratorConstructor(this); };\n  };\n\n  var TO_STRING_TAG = NAME + ' Iterator';\n  var INCORRECT_VALUES_NAME = false;\n  var IterablePrototype = Iterable.prototype;\n  var nativeIterator = IterablePrototype[ITERATOR]\n    || IterablePrototype['@@iterator']\n    || DEFAULT && IterablePrototype[DEFAULT];\n  var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);\n  var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;\n  var CurrentIteratorPrototype, methods, KEY;\n\n  // fix native\n  if (anyNativeIterator) {\n    CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable()));\n    if (CurrentIteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {\n      if (!IS_PURE && getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {\n        if (setPrototypeOf) {\n          setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);\n        } else if (!isCallable(CurrentIteratorPrototype[ITERATOR])) {\n          redefine(CurrentIteratorPrototype, ITERATOR, returnThis);\n        }\n      }\n      // Set @@toStringTag to native iterators\n      setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);\n      if (IS_PURE) Iterators[TO_STRING_TAG] = returnThis;\n    }\n  }\n\n  // fix Array.prototype.{ values, @@iterator }.name in V8 / FF\n  if (PROPER_FUNCTION_NAME && DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {\n    if (!IS_PURE && CONFIGURABLE_FUNCTION_NAME) {\n      createNonEnumerableProperty(IterablePrototype, 'name', VALUES);\n    } else {\n      INCORRECT_VALUES_NAME = true;\n      defaultIterator = function values() { return call(nativeIterator, this); };\n    }\n  }\n\n  // export additional methods\n  if (DEFAULT) {\n    methods = {\n      values: getIterationMethod(VALUES),\n      keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),\n      entries: getIterationMethod(ENTRIES)\n    };\n    if (FORCED) for (KEY in methods) {\n      if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {\n        redefine(IterablePrototype, KEY, methods[KEY]);\n      }\n    } else $({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME }, methods);\n  }\n\n  // define iterator\n  if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) {\n    redefine(IterablePrototype, ITERATOR, defaultIterator, { name: DEFAULT });\n  }\n  Iterators[NAME] = defaultIterator;\n\n  return methods;\n};\n\n\n/***/ }),\n/* 130 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar global = __webpack_require__(10);\nvar uncurryThis = __webpack_require__(21);\nvar fails = __webpack_require__(36);\nvar classof = __webpack_require__(78);\n\nvar Object = global.Object;\nvar split = uncurryThis(''.split);\n\n// fallback for non-array-like ES3 and non-enumerable old V8 strings\nmodule.exports = fails(function () {\n  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346\n  // eslint-disable-next-line no-prototype-builtins -- safe\n  return !Object('z').propertyIsEnumerable(0);\n}) ? function (it) {\n  return classof(it) == 'String' ? split(it, '') : Object(it);\n} : Object;\n\n\n/***/ }),\n/* 131 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar hasOwn = __webpack_require__(33);\nvar ownKeys = __webpack_require__(132);\nvar getOwnPropertyDescriptorModule = __webpack_require__(85);\nvar definePropertyModule = __webpack_require__(49);\n\nmodule.exports = function (target, source) {\n  var keys = ownKeys(source);\n  var defineProperty = definePropertyModule.f;\n  var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    if (!hasOwn(target, key)) defineProperty(target, key, getOwnPropertyDescriptor(source, key));\n  }\n};\n\n\n/***/ }),\n/* 132 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar getBuiltIn = __webpack_require__(56);\nvar uncurryThis = __webpack_require__(21);\nvar getOwnPropertyNamesModule = __webpack_require__(133);\nvar getOwnPropertySymbolsModule = __webpack_require__(135);\nvar anObject = __webpack_require__(37);\n\nvar concat = uncurryThis([].concat);\n\n// all object keys, includes non-enumerable and symbols\nmodule.exports = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {\n  var keys = getOwnPropertyNamesModule.f(anObject(it));\n  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;\n  return getOwnPropertySymbols ? concat(keys, getOwnPropertySymbols(it)) : keys;\n};\n\n\n/***/ }),\n/* 133 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar internalObjectKeys = __webpack_require__(103);\nvar enumBugKeys = __webpack_require__(88);\n\nvar hiddenKeys = enumBugKeys.concat('length', 'prototype');\n\n// `Object.getOwnPropertyNames` method\n// https://tc39.es/ecma262/#sec-object.getownpropertynames\n// eslint-disable-next-line es/no-object-getownpropertynames -- safe\nexports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n  return internalObjectKeys(O, hiddenKeys);\n};\n\n\n/***/ }),\n/* 134 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar toIndexedObject = __webpack_require__(58);\nvar toAbsoluteIndex = __webpack_require__(104);\nvar lengthOfArrayLike = __webpack_require__(87);\n\n// `Array.prototype.{ indexOf, includes }` methods implementation\nvar createMethod = function (IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = toIndexedObject($this);\n    var length = lengthOfArrayLike(O);\n    var index = toAbsoluteIndex(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare -- NaN check\n    if (IS_INCLUDES && el != el) while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare -- NaN check\n      if (value != value) return true;\n    // Array#indexOf ignores holes, Array#includes - not\n    } else for (;length > index; index++) {\n      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n\nmodule.exports = {\n  // `Array.prototype.includes` method\n  // https://tc39.es/ecma262/#sec-array.prototype.includes\n  includes: createMethod(true),\n  // `Array.prototype.indexOf` method\n  // https://tc39.es/ecma262/#sec-array.prototype.indexof\n  indexOf: createMethod(false)\n};\n\n\n/***/ }),\n/* 135 */\n/***/ (function(module, exports) {\n\n// eslint-disable-next-line es/no-object-getownpropertysymbols -- safe\nexports.f = Object.getOwnPropertySymbols;\n\n\n/***/ }),\n/* 136 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar fails = __webpack_require__(36);\nvar isCallable = __webpack_require__(22);\n\nvar replacement = /#|\\.prototype\\./;\n\nvar isForced = function (feature, detection) {\n  var value = data[normalize(feature)];\n  return value == POLYFILL ? true\n    : value == NATIVE ? false\n    : isCallable(detection) ? fails(detection)\n    : !!detection;\n};\n\nvar normalize = isForced.normalize = function (string) {\n  return String(string).replace(replacement, '.').toLowerCase();\n};\n\nvar data = isForced.data = {};\nvar NATIVE = isForced.NATIVE = 'N';\nvar POLYFILL = isForced.POLYFILL = 'P';\n\nmodule.exports = isForced;\n\n\n/***/ }),\n/* 137 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar IteratorPrototype = __webpack_require__(106).IteratorPrototype;\nvar create = __webpack_require__(89);\nvar createPropertyDescriptor = __webpack_require__(67);\nvar setToStringTag = __webpack_require__(109);\nvar Iterators = __webpack_require__(68);\n\nvar returnThis = function () { return this; };\n\nmodule.exports = function (IteratorConstructor, NAME, next) {\n  var TO_STRING_TAG = NAME + ' Iterator';\n  IteratorConstructor.prototype = create(IteratorPrototype, { next: createPropertyDescriptor(1, next) });\n  setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);\n  Iterators[TO_STRING_TAG] = returnThis;\n  return IteratorConstructor;\n};\n\n\n/***/ }),\n/* 138 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar DESCRIPTORS = __webpack_require__(38);\nvar definePropertyModule = __webpack_require__(49);\nvar anObject = __webpack_require__(37);\nvar toIndexedObject = __webpack_require__(58);\nvar objectKeys = __webpack_require__(107);\n\n// `Object.defineProperties` method\n// https://tc39.es/ecma262/#sec-object.defineproperties\n// eslint-disable-next-line es/no-object-defineproperties -- safe\nmodule.exports = DESCRIPTORS ? Object.defineProperties : function defineProperties(O, Properties) {\n  anObject(O);\n  var props = toIndexedObject(Properties);\n  var keys = objectKeys(Properties);\n  var length = keys.length;\n  var index = 0;\n  var key;\n  while (length > index) definePropertyModule.f(O, key = keys[index++], props[key]);\n  return O;\n};\n\n\n/***/ }),\n/* 139 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar getBuiltIn = __webpack_require__(56);\n\nmodule.exports = getBuiltIn('document', 'documentElement');\n\n\n/***/ }),\n/* 140 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar fails = __webpack_require__(36);\n\nmodule.exports = !fails(function () {\n  function F() { /* empty */ }\n  F.prototype.constructor = null;\n  // eslint-disable-next-line es/no-object-getprototypeof -- required for testing\n  return Object.getPrototypeOf(new F()) !== F.prototype;\n});\n\n\n/***/ }),\n/* 141 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* eslint-disable no-proto -- safe */\nvar uncurryThis = __webpack_require__(21);\nvar anObject = __webpack_require__(37);\nvar aPossiblePrototype = __webpack_require__(142);\n\n// `Object.setPrototypeOf` method\n// https://tc39.es/ecma262/#sec-object.setprototypeof\n// Works with __proto__ only. Old v8 can't work with null proto objects.\n// eslint-disable-next-line es/no-object-setprototypeof -- safe\nmodule.exports = Object.setPrototypeOf || ('__proto__' in {} ? function () {\n  var CORRECT_SETTER = false;\n  var test = {};\n  var setter;\n  try {\n    // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\n    setter = uncurryThis(Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set);\n    setter(test, []);\n    CORRECT_SETTER = test instanceof Array;\n  } catch (error) { /* empty */ }\n  return function setPrototypeOf(O, proto) {\n    anObject(O);\n    aPossiblePrototype(proto);\n    if (CORRECT_SETTER) setter(O, proto);\n    else O.__proto__ = proto;\n    return O;\n  };\n}() : undefined);\n\n\n/***/ }),\n/* 142 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar global = __webpack_require__(10);\nvar isCallable = __webpack_require__(22);\n\nvar String = global.String;\nvar TypeError = global.TypeError;\n\nmodule.exports = function (argument) {\n  if (typeof argument == 'object' || isCallable(argument)) return argument;\n  throw TypeError(\"Can't set \" + String(argument) + ' as a prototype');\n};\n\n\n/***/ }),\n/* 143 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar $ = __webpack_require__(57);\nvar from = __webpack_require__(144);\nvar checkCorrectnessOfIteration = __webpack_require__(152);\n\nvar INCORRECT_ITERATION = !checkCorrectnessOfIteration(function (iterable) {\n  // eslint-disable-next-line es/no-array-from -- required for testing\n  Array.from(iterable);\n});\n\n// `Array.from` method\n// https://tc39.es/ecma262/#sec-array.from\n$({ target: 'Array', stat: true, forced: INCORRECT_ITERATION }, {\n  from: from\n});\n\n\n/***/ }),\n/* 144 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar global = __webpack_require__(10);\nvar bind = __webpack_require__(145);\nvar call = __webpack_require__(39);\nvar toObject = __webpack_require__(64);\nvar callWithSafeIterationClosing = __webpack_require__(146);\nvar isArrayIteratorMethod = __webpack_require__(148);\nvar isConstructor = __webpack_require__(149);\nvar lengthOfArrayLike = __webpack_require__(87);\nvar createProperty = __webpack_require__(150);\nvar getIterator = __webpack_require__(151);\nvar getIteratorMethod = __webpack_require__(110);\n\nvar Array = global.Array;\n\n// `Array.from` method implementation\n// https://tc39.es/ecma262/#sec-array.from\nmodule.exports = function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {\n  var O = toObject(arrayLike);\n  var IS_CONSTRUCTOR = isConstructor(this);\n  var argumentsLength = arguments.length;\n  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;\n  var mapping = mapfn !== undefined;\n  if (mapping) mapfn = bind(mapfn, argumentsLength > 2 ? arguments[2] : undefined);\n  var iteratorMethod = getIteratorMethod(O);\n  var index = 0;\n  var length, result, step, iterator, next, value;\n  // if the target is not iterable or it's an array with the default iterator - use a simple case\n  if (iteratorMethod && !(this == Array && isArrayIteratorMethod(iteratorMethod))) {\n    iterator = getIterator(O, iteratorMethod);\n    next = iterator.next;\n    result = IS_CONSTRUCTOR ? new this() : [];\n    for (;!(step = call(next, iterator)).done; index++) {\n      value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true) : step.value;\n      createProperty(result, index, value);\n    }\n  } else {\n    length = lengthOfArrayLike(O);\n    result = IS_CONSTRUCTOR ? new this(length) : Array(length);\n    for (;length > index; index++) {\n      value = mapping ? mapfn(O[index], index) : O[index];\n      createProperty(result, index, value);\n    }\n  }\n  result.length = index;\n  return result;\n};\n\n\n/***/ }),\n/* 145 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar uncurryThis = __webpack_require__(21);\nvar aCallable = __webpack_require__(82);\n\nvar bind = uncurryThis(uncurryThis.bind);\n\n// optional / simple context binding\nmodule.exports = function (fn, that) {\n  aCallable(fn);\n  return that === undefined ? fn : bind ? bind(fn, that) : function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n\n\n/***/ }),\n/* 146 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar anObject = __webpack_require__(37);\nvar iteratorClose = __webpack_require__(147);\n\n// call something on iterator step with safe closing on error\nmodule.exports = function (iterator, fn, value, ENTRIES) {\n  try {\n    return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);\n  } catch (error) {\n    iteratorClose(iterator, 'throw', error);\n  }\n};\n\n\n/***/ }),\n/* 147 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar call = __webpack_require__(39);\nvar anObject = __webpack_require__(37);\nvar getMethod = __webpack_require__(81);\n\nmodule.exports = function (iterator, kind, value) {\n  var innerResult, innerError;\n  anObject(iterator);\n  try {\n    innerResult = getMethod(iterator, 'return');\n    if (!innerResult) {\n      if (kind === 'throw') throw value;\n      return value;\n    }\n    innerResult = call(innerResult, iterator);\n  } catch (error) {\n    innerError = true;\n    innerResult = error;\n  }\n  if (kind === 'throw') throw value;\n  if (innerError) throw innerResult;\n  anObject(innerResult);\n  return value;\n};\n\n\n/***/ }),\n/* 148 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar wellKnownSymbol = __webpack_require__(27);\nvar Iterators = __webpack_require__(68);\n\nvar ITERATOR = wellKnownSymbol('iterator');\nvar ArrayPrototype = Array.prototype;\n\n// check on default Array iterator\nmodule.exports = function (it) {\n  return it !== undefined && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);\n};\n\n\n/***/ }),\n/* 149 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar uncurryThis = __webpack_require__(21);\nvar fails = __webpack_require__(36);\nvar isCallable = __webpack_require__(22);\nvar classof = __webpack_require__(75);\nvar getBuiltIn = __webpack_require__(56);\nvar inspectSource = __webpack_require__(79);\n\nvar noop = function () { /* empty */ };\nvar empty = [];\nvar construct = getBuiltIn('Reflect', 'construct');\nvar constructorRegExp = /^\\s*(?:class|function)\\b/;\nvar exec = uncurryThis(constructorRegExp.exec);\nvar INCORRECT_TO_STRING = !constructorRegExp.exec(noop);\n\nvar isConstructorModern = function (argument) {\n  if (!isCallable(argument)) return false;\n  try {\n    construct(noop, empty, argument);\n    return true;\n  } catch (error) {\n    return false;\n  }\n};\n\nvar isConstructorLegacy = function (argument) {\n  if (!isCallable(argument)) return false;\n  switch (classof(argument)) {\n    case 'AsyncFunction':\n    case 'GeneratorFunction':\n    case 'AsyncGeneratorFunction': return false;\n    // we can't check .prototype since constructors produced by .bind haven't it\n  } return INCORRECT_TO_STRING || !!exec(constructorRegExp, inspectSource(argument));\n};\n\n// `IsConstructor` abstract operation\n// https://tc39.es/ecma262/#sec-isconstructor\nmodule.exports = !construct || fails(function () {\n  var called;\n  return isConstructorModern(isConstructorModern.call)\n    || !isConstructorModern(Object)\n    || !isConstructorModern(function () { called = true; })\n    || called;\n}) ? isConstructorLegacy : isConstructorModern;\n\n\n/***/ }),\n/* 150 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar toPropertyKey = __webpack_require__(80);\nvar definePropertyModule = __webpack_require__(49);\nvar createPropertyDescriptor = __webpack_require__(67);\n\nmodule.exports = function (object, key, value) {\n  var propertyKey = toPropertyKey(key);\n  if (propertyKey in object) definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0, value));\n  else object[propertyKey] = value;\n};\n\n\n/***/ }),\n/* 151 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar global = __webpack_require__(10);\nvar call = __webpack_require__(39);\nvar aCallable = __webpack_require__(82);\nvar anObject = __webpack_require__(37);\nvar tryToString = __webpack_require__(100);\nvar getIteratorMethod = __webpack_require__(110);\n\nvar TypeError = global.TypeError;\n\nmodule.exports = function (argument, usingIterator) {\n  var iteratorMethod = arguments.length < 2 ? getIteratorMethod(argument) : usingIterator;\n  if (aCallable(iteratorMethod)) return anObject(call(iteratorMethod, argument));\n  throw TypeError(tryToString(argument) + ' is not iterable');\n};\n\n\n/***/ }),\n/* 152 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar wellKnownSymbol = __webpack_require__(27);\n\nvar ITERATOR = wellKnownSymbol('iterator');\nvar SAFE_CLOSING = false;\n\ntry {\n  var called = 0;\n  var iteratorWithReturn = {\n    next: function () {\n      return { done: !!called++ };\n    },\n    'return': function () {\n      SAFE_CLOSING = true;\n    }\n  };\n  iteratorWithReturn[ITERATOR] = function () {\n    return this;\n  };\n  // eslint-disable-next-line es/no-array-from, no-throw-literal -- required for testing\n  Array.from(iteratorWithReturn, function () { throw 2; });\n} catch (error) { /* empty */ }\n\nmodule.exports = function (exec, SKIP_CLOSING) {\n  if (!SKIP_CLOSING && !SAFE_CLOSING) return false;\n  var ITERATION_SUPPORT = false;\n  try {\n    var object = {};\n    object[ITERATOR] = function () {\n      return {\n        next: function () {\n          return { done: ITERATION_SUPPORT = true };\n        }\n      };\n    };\n    exec(object);\n  } catch (error) { /* empty */ }\n  return ITERATION_SUPPORT;\n};\n\n\n/***/ }),\n/* 153 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar parent = __webpack_require__(154);\n\nmodule.exports = parent;\n\n\n/***/ }),\n/* 154 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar parent = __webpack_require__(155);\n\nmodule.exports = parent;\n\n\n/***/ }),\n/* 155 */\n/***/ (function(module, exports, __webpack_require__) {\n\n__webpack_require__(156);\nvar entryUnbind = __webpack_require__(112);\n\nmodule.exports = entryUnbind('Array', 'fill');\n\n\n/***/ }),\n/* 156 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar $ = __webpack_require__(57);\nvar fill = __webpack_require__(157);\nvar addToUnscopables = __webpack_require__(158);\n\n// `Array.prototype.fill` method\n// https://tc39.es/ecma262/#sec-array.prototype.fill\n$({ target: 'Array', proto: true }, {\n  fill: fill\n});\n\n// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables\naddToUnscopables('fill');\n\n\n/***/ }),\n/* 157 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar toObject = __webpack_require__(64);\nvar toAbsoluteIndex = __webpack_require__(104);\nvar lengthOfArrayLike = __webpack_require__(87);\n\n// `Array.prototype.fill` method implementation\n// https://tc39.es/ecma262/#sec-array.prototype.fill\nmodule.exports = function fill(value /* , start = 0, end = @length */) {\n  var O = toObject(this);\n  var length = lengthOfArrayLike(O);\n  var argumentsLength = arguments.length;\n  var index = toAbsoluteIndex(argumentsLength > 1 ? arguments[1] : undefined, length);\n  var end = argumentsLength > 2 ? arguments[2] : undefined;\n  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);\n  while (endPos > index) O[index++] = value;\n  return O;\n};\n\n\n/***/ }),\n/* 158 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar wellKnownSymbol = __webpack_require__(27);\nvar create = __webpack_require__(89);\nvar definePropertyModule = __webpack_require__(49);\n\nvar UNSCOPABLES = wellKnownSymbol('unscopables');\nvar ArrayPrototype = Array.prototype;\n\n// Array.prototype[@@unscopables]\n// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables\nif (ArrayPrototype[UNSCOPABLES] == undefined) {\n  definePropertyModule.f(ArrayPrototype, UNSCOPABLES, {\n    configurable: true,\n    value: create(null)\n  });\n}\n\n// add a key to Array.prototype[@@unscopables]\nmodule.exports = function (key) {\n  ArrayPrototype[UNSCOPABLES][key] = true;\n};\n\n\n/***/ }),\n/* 159 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar parent = __webpack_require__(160);\n\nmodule.exports = parent;\n\n\n/***/ }),\n/* 160 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar parent = __webpack_require__(161);\n\nmodule.exports = parent;\n\n\n/***/ }),\n/* 161 */\n/***/ (function(module, exports, __webpack_require__) {\n\n__webpack_require__(162);\nvar path = __webpack_require__(111);\n\nmodule.exports = path.Object.values;\n\n\n/***/ }),\n/* 162 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar $ = __webpack_require__(57);\nvar $values = __webpack_require__(163).values;\n\n// `Object.values` method\n// https://tc39.es/ecma262/#sec-object.values\n$({ target: 'Object', stat: true }, {\n  values: function values(O) {\n    return $values(O);\n  }\n});\n\n\n/***/ }),\n/* 163 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar DESCRIPTORS = __webpack_require__(38);\nvar uncurryThis = __webpack_require__(21);\nvar objectKeys = __webpack_require__(107);\nvar toIndexedObject = __webpack_require__(58);\nvar $propertyIsEnumerable = __webpack_require__(101).f;\n\nvar propertyIsEnumerable = uncurryThis($propertyIsEnumerable);\nvar push = uncurryThis([].push);\n\n// `Object.{ entries, values }` methods implementation\nvar createMethod = function (TO_ENTRIES) {\n  return function (it) {\n    var O = toIndexedObject(it);\n    var keys = objectKeys(O);\n    var length = keys.length;\n    var i = 0;\n    var result = [];\n    var key;\n    while (length > i) {\n      key = keys[i++];\n      if (!DESCRIPTORS || propertyIsEnumerable(O, key)) {\n        push(result, TO_ENTRIES ? [key, O[key]] : O[key]);\n      }\n    }\n    return result;\n  };\n};\n\nmodule.exports = {\n  // `Object.entries` method\n  // https://tc39.es/ecma262/#sec-object.entries\n  entries: createMethod(true),\n  // `Object.values` method\n  // https://tc39.es/ecma262/#sec-object.values\n  values: createMethod(false)\n};\n\n\n/***/ }),\n/* 164 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar parent = __webpack_require__(165);\n\nmodule.exports = parent;\n\n\n/***/ }),\n/* 165 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar parent = __webpack_require__(166);\n\nmodule.exports = parent;\n\n\n/***/ }),\n/* 166 */\n/***/ (function(module, exports, __webpack_require__) {\n\n__webpack_require__(167);\nvar entryUnbind = __webpack_require__(112);\n\nmodule.exports = entryUnbind('String', 'endsWith');\n\n\n/***/ }),\n/* 167 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar $ = __webpack_require__(57);\nvar uncurryThis = __webpack_require__(21);\nvar getOwnPropertyDescriptor = __webpack_require__(85).f;\nvar toLength = __webpack_require__(105);\nvar toString = __webpack_require__(74);\nvar notARegExp = __webpack_require__(168);\nvar requireObjectCoercible = __webpack_require__(65);\nvar correctIsRegExpLogic = __webpack_require__(170);\nvar IS_PURE = __webpack_require__(63);\n\n// eslint-disable-next-line es/no-string-prototype-endswith -- safe\nvar un$EndsWith = uncurryThis(''.endsWith);\nvar slice = uncurryThis(''.slice);\nvar min = Math.min;\n\nvar CORRECT_IS_REGEXP_LOGIC = correctIsRegExpLogic('endsWith');\n// https://github.com/zloirock/core-js/pull/702\nvar MDN_POLYFILL_BUG = !IS_PURE && !CORRECT_IS_REGEXP_LOGIC && !!function () {\n  var descriptor = getOwnPropertyDescriptor(String.prototype, 'endsWith');\n  return descriptor && !descriptor.writable;\n}();\n\n// `String.prototype.endsWith` method\n// https://tc39.es/ecma262/#sec-string.prototype.endswith\n$({ target: 'String', proto: true, forced: !MDN_POLYFILL_BUG && !CORRECT_IS_REGEXP_LOGIC }, {\n  endsWith: function endsWith(searchString /* , endPosition = @length */) {\n    var that = toString(requireObjectCoercible(this));\n    notARegExp(searchString);\n    var endPosition = arguments.length > 1 ? arguments[1] : undefined;\n    var len = that.length;\n    var end = endPosition === undefined ? len : min(toLength(endPosition), len);\n    var search = toString(searchString);\n    return un$EndsWith\n      ? un$EndsWith(that, search, end)\n      : slice(that, end - search.length, end) === search;\n  }\n});\n\n\n/***/ }),\n/* 168 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar global = __webpack_require__(10);\nvar isRegExp = __webpack_require__(169);\n\nvar TypeError = global.TypeError;\n\nmodule.exports = function (it) {\n  if (isRegExp(it)) {\n    throw TypeError(\"The method doesn't accept regular expressions\");\n  } return it;\n};\n\n\n/***/ }),\n/* 169 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar isObject = __webpack_require__(48);\nvar classof = __webpack_require__(78);\nvar wellKnownSymbol = __webpack_require__(27);\n\nvar MATCH = wellKnownSymbol('match');\n\n// `IsRegExp` abstract operation\n// https://tc39.es/ecma262/#sec-isregexp\nmodule.exports = function (it) {\n  var isRegExp;\n  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : classof(it) == 'RegExp');\n};\n\n\n/***/ }),\n/* 170 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar wellKnownSymbol = __webpack_require__(27);\n\nvar MATCH = wellKnownSymbol('match');\n\nmodule.exports = function (METHOD_NAME) {\n  var regexp = /./;\n  try {\n    '/./'[METHOD_NAME](regexp);\n  } catch (error1) {\n    try {\n      regexp[MATCH] = false;\n      return '/./'[METHOD_NAME](regexp);\n    } catch (error2) { /* empty */ }\n  } return false;\n};\n\n\n/***/ }),\n/* 171 */,\n/* 172 */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(113);\n\n\n/***/ })\n/******/ ])[\"default\"];\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/devextreme-quill/dist/dx-quill.js\n");

/***/ }),

/***/ "./node_modules/devextreme-vue/html-editor.js":
/*!****************************************************!*\
  !*** ./node_modules/devextreme-vue/html-editor.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*!\n * devextreme-vue\n * Version: 21.2.7\n * Build date: Mon Apr 11 2022\n *\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\n *\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file in the root of the project for details.\n *\n * https://github.com/DevExpress/devextreme-vue\n */\n\n\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DxVariables = exports.DxToolbarItem = exports.DxToolbar = exports.DxTableResizing = exports.DxTableContextMenuItem = exports.DxTableContextMenu = exports.DxMention = exports.DxMediaResizing = exports.DxItem = exports.DxHtmlEditor = void 0;\nvar html_editor_1 = __importDefault(__webpack_require__(/*! devextreme/ui/html_editor */ \"./node_modules/devextreme/esm/ui/html_editor.js\"));\nvar index_1 = __webpack_require__(/*! ./core/index */ \"./node_modules/devextreme-vue/core/index.js\");\nvar index_2 = __webpack_require__(/*! ./core/index */ \"./node_modules/devextreme-vue/core/index.js\");\nvar DxHtmlEditor = index_1.createComponent({\n    props: {\n        accessKey: String,\n        activeStateEnabled: Boolean,\n        allowSoftLineBreak: Boolean,\n        customizeModules: Function,\n        disabled: Boolean,\n        elementAttr: Object,\n        focusStateEnabled: Boolean,\n        height: [Function, Number, String],\n        hint: String,\n        hoverStateEnabled: Boolean,\n        isValid: Boolean,\n        mediaResizing: Object,\n        mentions: Array,\n        name: String,\n        onContentReady: Function,\n        onDisposing: Function,\n        onFocusIn: Function,\n        onFocusOut: Function,\n        onInitialized: Function,\n        onOptionChanged: Function,\n        onValueChanged: Function,\n        placeholder: String,\n        readOnly: Boolean,\n        rtlEnabled: Boolean,\n        stylingMode: String,\n        tabIndex: Number,\n        tableContextMenu: Object,\n        tableResizing: Object,\n        toolbar: Object,\n        validationError: {},\n        validationErrors: Array,\n        validationMessageMode: String,\n        validationStatus: String,\n        value: {},\n        valueType: String,\n        variables: Object,\n        visible: Boolean,\n        width: [Function, Number, String]\n    },\n    emits: {\n        \"update:isActive\": null,\n        \"update:hoveredElement\": null,\n        \"update:accessKey\": null,\n        \"update:activeStateEnabled\": null,\n        \"update:allowSoftLineBreak\": null,\n        \"update:customizeModules\": null,\n        \"update:disabled\": null,\n        \"update:elementAttr\": null,\n        \"update:focusStateEnabled\": null,\n        \"update:height\": null,\n        \"update:hint\": null,\n        \"update:hoverStateEnabled\": null,\n        \"update:isValid\": null,\n        \"update:mediaResizing\": null,\n        \"update:mentions\": null,\n        \"update:name\": null,\n        \"update:onContentReady\": null,\n        \"update:onDisposing\": null,\n        \"update:onFocusIn\": null,\n        \"update:onFocusOut\": null,\n        \"update:onInitialized\": null,\n        \"update:onOptionChanged\": null,\n        \"update:onValueChanged\": null,\n        \"update:placeholder\": null,\n        \"update:readOnly\": null,\n        \"update:rtlEnabled\": null,\n        \"update:stylingMode\": null,\n        \"update:tabIndex\": null,\n        \"update:tableContextMenu\": null,\n        \"update:tableResizing\": null,\n        \"update:toolbar\": null,\n        \"update:validationError\": null,\n        \"update:validationErrors\": null,\n        \"update:validationMessageMode\": null,\n        \"update:validationStatus\": null,\n        \"update:value\": null,\n        \"update:valueType\": null,\n        \"update:variables\": null,\n        \"update:visible\": null,\n        \"update:width\": null,\n    },\n    model: { prop: \"value\", event: \"update:value\" },\n    computed: {\n        instance: function () {\n            return this.$_instance;\n        }\n    },\n    beforeCreate: function () {\n        this.$_WidgetClass = html_editor_1.default;\n        this.$_hasAsyncTemplate = true;\n        this.$_expectedChildren = {\n            mediaResizing: { isCollectionItem: false, optionName: \"mediaResizing\" },\n            mention: { isCollectionItem: true, optionName: \"mentions\" },\n            tableContextMenu: { isCollectionItem: false, optionName: \"tableContextMenu\" },\n            tableResizing: { isCollectionItem: false, optionName: \"tableResizing\" },\n            toolbar: { isCollectionItem: false, optionName: \"toolbar\" },\n            variables: { isCollectionItem: false, optionName: \"variables\" }\n        };\n    }\n});\nexports.DxHtmlEditor = DxHtmlEditor;\nvar DxItem = index_2.createConfigurationComponent({\n    emits: {\n        \"update:isActive\": null,\n        \"update:hoveredElement\": null,\n        \"update:acceptedValues\": null,\n        \"update:beginGroup\": null,\n        \"update:closeMenuOnClick\": null,\n        \"update:cssClass\": null,\n        \"update:disabled\": null,\n        \"update:formatName\": null,\n        \"update:formatValues\": null,\n        \"update:html\": null,\n        \"update:icon\": null,\n        \"update:items\": null,\n        \"update:locateInMenu\": null,\n        \"update:location\": null,\n        \"update:menuItemTemplate\": null,\n        \"update:name\": null,\n        \"update:options\": null,\n        \"update:selectable\": null,\n        \"update:selected\": null,\n        \"update:showText\": null,\n        \"update:template\": null,\n        \"update:text\": null,\n        \"update:visible\": null,\n        \"update:widget\": null,\n    },\n    props: {\n        acceptedValues: Array,\n        beginGroup: Boolean,\n        closeMenuOnClick: Boolean,\n        cssClass: String,\n        disabled: Boolean,\n        formatName: String,\n        formatValues: Array,\n        html: String,\n        icon: String,\n        items: Array,\n        locateInMenu: String,\n        location: String,\n        menuItemTemplate: {},\n        name: String,\n        options: {},\n        selectable: Boolean,\n        selected: Boolean,\n        showText: String,\n        template: {},\n        text: String,\n        visible: Boolean,\n        widget: String\n    }\n});\nexports.DxItem = DxItem;\nDxItem.$_optionName = \"items\";\nDxItem.$_isCollectionItem = true;\nvar DxMediaResizing = index_2.createConfigurationComponent({\n    emits: {\n        \"update:isActive\": null,\n        \"update:hoveredElement\": null,\n        \"update:allowedTargets\": null,\n        \"update:enabled\": null,\n    },\n    props: {\n        allowedTargets: Array,\n        enabled: Boolean\n    }\n});\nexports.DxMediaResizing = DxMediaResizing;\nDxMediaResizing.$_optionName = \"mediaResizing\";\nvar DxMention = index_2.createConfigurationComponent({\n    emits: {\n        \"update:isActive\": null,\n        \"update:hoveredElement\": null,\n        \"update:dataSource\": null,\n        \"update:displayExpr\": null,\n        \"update:itemTemplate\": null,\n        \"update:marker\": null,\n        \"update:minSearchLength\": null,\n        \"update:searchExpr\": null,\n        \"update:searchTimeout\": null,\n        \"update:template\": null,\n        \"update:valueExpr\": null,\n    },\n    props: {\n        dataSource: [Array, Object, String],\n        displayExpr: [Function, String],\n        itemTemplate: {},\n        marker: String,\n        minSearchLength: Number,\n        searchExpr: [Array, Function, String],\n        searchTimeout: Number,\n        template: {},\n        valueExpr: [Function, String]\n    }\n});\nexports.DxMention = DxMention;\nDxMention.$_optionName = \"mentions\";\nDxMention.$_isCollectionItem = true;\nvar DxTableContextMenu = index_2.createConfigurationComponent({\n    emits: {\n        \"update:isActive\": null,\n        \"update:hoveredElement\": null,\n        \"update:enabled\": null,\n        \"update:items\": null,\n    },\n    props: {\n        enabled: Boolean,\n        items: Array\n    }\n});\nexports.DxTableContextMenu = DxTableContextMenu;\nDxTableContextMenu.$_optionName = \"tableContextMenu\";\nDxTableContextMenu.$_expectedChildren = {\n    item: { isCollectionItem: true, optionName: \"items\" },\n    tableContextMenuItem: { isCollectionItem: true, optionName: \"items\" }\n};\nvar DxTableContextMenuItem = index_2.createConfigurationComponent({\n    emits: {\n        \"update:isActive\": null,\n        \"update:hoveredElement\": null,\n        \"update:beginGroup\": null,\n        \"update:closeMenuOnClick\": null,\n        \"update:disabled\": null,\n        \"update:html\": null,\n        \"update:icon\": null,\n        \"update:items\": null,\n        \"update:name\": null,\n        \"update:selectable\": null,\n        \"update:selected\": null,\n        \"update:template\": null,\n        \"update:text\": null,\n        \"update:visible\": null,\n    },\n    props: {\n        beginGroup: Boolean,\n        closeMenuOnClick: Boolean,\n        disabled: Boolean,\n        html: String,\n        icon: String,\n        items: Array,\n        name: String,\n        selectable: Boolean,\n        selected: Boolean,\n        template: {},\n        text: String,\n        visible: Boolean\n    }\n});\nexports.DxTableContextMenuItem = DxTableContextMenuItem;\nDxTableContextMenuItem.$_optionName = \"items\";\nDxTableContextMenuItem.$_isCollectionItem = true;\nvar DxTableResizing = index_2.createConfigurationComponent({\n    emits: {\n        \"update:isActive\": null,\n        \"update:hoveredElement\": null,\n        \"update:enabled\": null,\n        \"update:minColumnWidth\": null,\n        \"update:minRowHeight\": null,\n    },\n    props: {\n        enabled: Boolean,\n        minColumnWidth: Number,\n        minRowHeight: Number\n    }\n});\nexports.DxTableResizing = DxTableResizing;\nDxTableResizing.$_optionName = \"tableResizing\";\nvar DxToolbar = index_2.createConfigurationComponent({\n    emits: {\n        \"update:isActive\": null,\n        \"update:hoveredElement\": null,\n        \"update:container\": null,\n        \"update:items\": null,\n        \"update:multiline\": null,\n    },\n    props: {\n        container: {},\n        items: Array,\n        multiline: Boolean\n    }\n});\nexports.DxToolbar = DxToolbar;\nDxToolbar.$_optionName = \"toolbar\";\nDxToolbar.$_expectedChildren = {\n    item: { isCollectionItem: true, optionName: \"items\" },\n    toolbarItem: { isCollectionItem: true, optionName: \"items\" }\n};\nvar DxToolbarItem = index_2.createConfigurationComponent({\n    emits: {\n        \"update:isActive\": null,\n        \"update:hoveredElement\": null,\n        \"update:acceptedValues\": null,\n        \"update:cssClass\": null,\n        \"update:disabled\": null,\n        \"update:formatName\": null,\n        \"update:formatValues\": null,\n        \"update:html\": null,\n        \"update:locateInMenu\": null,\n        \"update:location\": null,\n        \"update:menuItemTemplate\": null,\n        \"update:name\": null,\n        \"update:options\": null,\n        \"update:showText\": null,\n        \"update:template\": null,\n        \"update:text\": null,\n        \"update:visible\": null,\n        \"update:widget\": null,\n    },\n    props: {\n        acceptedValues: Array,\n        cssClass: String,\n        disabled: Boolean,\n        formatName: String,\n        formatValues: Array,\n        html: String,\n        locateInMenu: String,\n        location: String,\n        menuItemTemplate: {},\n        name: String,\n        options: {},\n        showText: String,\n        template: {},\n        text: String,\n        visible: Boolean,\n        widget: String\n    }\n});\nexports.DxToolbarItem = DxToolbarItem;\nDxToolbarItem.$_optionName = \"items\";\nDxToolbarItem.$_isCollectionItem = true;\nvar DxVariables = index_2.createConfigurationComponent({\n    emits: {\n        \"update:isActive\": null,\n        \"update:hoveredElement\": null,\n        \"update:dataSource\": null,\n        \"update:escapeChar\": null,\n    },\n    props: {\n        dataSource: [Array, Object, String],\n        escapeChar: [Array, String]\n    }\n});\nexports.DxVariables = DxVariables;\nDxVariables.$_optionName = \"variables\";\nexports.default = DxHtmlEditor;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/devextreme-vue/html-editor.js\n");

/***/ }),

/***/ "./node_modules/devextreme/esm/ui/color_box.js":
/*!*****************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/color_box.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _color_box_color_box__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./color_box/color_box */ \"./node_modules/devextreme/esm/ui/color_box/color_box.js\");\n/**\r\n * DevExtreme (esm/ui/color_box.js)\r\n * Version: 21.2.7\r\n * Build date: Mon Apr 11 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (_color_box_color_box__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGV2ZXh0cmVtZS9lc20vdWkvY29sb3JfYm94LmpzPzVjODYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDNkM7QUFDOUIsMkhBQVEsRUFBQyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9kZXZleHRyZW1lL2VzbS91aS9jb2xvcl9ib3guanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogRGV2RXh0cmVtZSAoZXNtL3VpL2NvbG9yX2JveC5qcylcclxuICogVmVyc2lvbjogMjEuMi43XHJcbiAqIEJ1aWxkIGRhdGU6IE1vbiBBcHIgMTEgMjAyMlxyXG4gKlxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTIgLSAyMDIyIERldmVsb3BlciBFeHByZXNzIEluYy4gQUxMIFJJR0hUUyBSRVNFUlZFRFxyXG4gKiBSZWFkIGFib3V0IERldkV4dHJlbWUgbGljZW5zaW5nIGhlcmU6IGh0dHBzOi8vanMuZGV2ZXhwcmVzcy5jb20vTGljZW5zaW5nL1xyXG4gKi9cclxuaW1wb3J0IENvbG9yQm94IGZyb20gXCIuL2NvbG9yX2JveC9jb2xvcl9ib3hcIjtcclxuZXhwb3J0IGRlZmF1bHQgQ29sb3JCb3g7XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/devextreme/esm/ui/color_box.js\n");

/***/ }),

/***/ "./node_modules/devextreme/esm/ui/color_box/color_box.js":
/*!***************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/color_box/color_box.js ***!
  \***************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/renderer */ \"./node_modules/devextreme/esm/core/renderer.js\");\n/* harmony import */ var _events_core_events_engine__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../events/core/events_engine */ \"./node_modules/devextreme/esm/events/core/events_engine.js\");\n/* harmony import */ var _color__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../color */ \"./node_modules/devextreme/esm/color.js\");\n/* harmony import */ var _color_view__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./color_view */ \"./node_modules/devextreme/esm/ui/color_box/color_view.js\");\n/* harmony import */ var _core_utils_extend__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/utils/extend */ \"./node_modules/devextreme/esm/core/utils/extend.js\");\n/* harmony import */ var _core_component_registrator__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core/component_registrator */ \"./node_modules/devextreme/esm/core/component_registrator.js\");\n/* harmony import */ var _drop_down_editor_ui_drop_down_editor__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../drop_down_editor/ui.drop_down_editor */ \"./node_modules/devextreme/esm/ui/drop_down_editor/ui.drop_down_editor.js\");\n/**\r\n * DevExtreme (esm/ui/color_box/color_box.js)\r\n * Version: 21.2.7\r\n * Build date: Mon Apr 11 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nvar COLOR_BOX_CLASS = \"dx-colorbox\";\r\nvar COLOR_BOX_INPUT_CLASS = COLOR_BOX_CLASS + \"-input\";\r\nvar COLOR_BOX_INPUT_CONTAINER_CLASS = COLOR_BOX_INPUT_CLASS + \"-container\";\r\nvar COLOR_BOX_COLOR_RESULT_PREVIEW_CLASS = COLOR_BOX_CLASS + \"-color-result-preview\";\r\nvar COLOR_BOX_COLOR_IS_NOT_DEFINED = COLOR_BOX_CLASS + \"-color-is-not-defined\";\r\nvar COLOR_BOX_OVERLAY_CLASS = COLOR_BOX_CLASS + \"-overlay\";\r\nvar COLOR_BOX_CONTAINER_CELL_CLASS = \"dx-colorview-container-cell\";\r\nvar COLOR_BOX_BUTTON_CELL_CLASS = \"dx-colorview-button-cell\";\r\nvar COLOR_BOX_BUTTONS_CONTAINER_CLASS = \"dx-colorview-buttons-container\";\r\nvar COLOR_BOX_APPLY_BUTTON_CLASS = \"dx-colorview-apply-button\";\r\nvar COLOR_BOX_CANCEL_BUTTON_CLASS = \"dx-colorview-cancel-button\";\r\nvar colorEditorPrototype = _color_view__WEBPACK_IMPORTED_MODULE_3__[\"default\"].prototype;\r\nvar colorUtils = {\r\n    makeTransparentBackground: colorEditorPrototype._makeTransparentBackground.bind(colorEditorPrototype),\r\n    makeRgba: colorEditorPrototype._makeRgba.bind(colorEditorPrototype)\r\n};\r\nvar ColorBox = _drop_down_editor_ui_drop_down_editor__WEBPACK_IMPORTED_MODULE_6__[\"default\"].inherit({\r\n    _supportedKeys: function() {\r\n        var arrowHandler = function(e) {\r\n            e.stopPropagation();\r\n            if (this.option(\"opened\")) {\r\n                e.preventDefault();\r\n                return true\r\n            }\r\n        };\r\n        return Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_4__[\"extend\"])(this.callBase(), {\r\n            tab: function(e) {\r\n                if (this.option(\"opened\")) {\r\n                    e.preventDefault();\r\n                    this._colorView._rgbInputs[0].focus()\r\n                }\r\n            },\r\n            enter: this._enterKeyHandler,\r\n            leftArrow: arrowHandler,\r\n            rightArrow: arrowHandler,\r\n            upArrow: function(e) {\r\n                if (!this.option(\"opened\")) {\r\n                    e.preventDefault();\r\n                    return false\r\n                }\r\n                if (e.altKey) {\r\n                    this.close();\r\n                    return false\r\n                }\r\n                return true\r\n            },\r\n            downArrow: function(e) {\r\n                if (!this.option(\"opened\") && !e.altKey) {\r\n                    e.preventDefault();\r\n                    return false\r\n                }\r\n                if (!this.option(\"opened\") && e.altKey) {\r\n                    this._validatedOpening();\r\n                    return false\r\n                }\r\n                return true\r\n            }\r\n        })\r\n    },\r\n    _getDefaultOptions: function() {\r\n        return Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_4__[\"extend\"])(this.callBase(), {\r\n            editAlphaChannel: false,\r\n            applyValueMode: \"useButtons\",\r\n            keyStep: 1,\r\n            fieldTemplate: null,\r\n            buttonsLocation: \"bottom after\"\r\n        })\r\n    },\r\n    _popupHidingHandler: function() {\r\n        this.callBase();\r\n        if (\"useButtons\" === this.option(\"applyValueMode\")) {\r\n            this._updateColorViewValue(this.option(\"value\"))\r\n        }\r\n    },\r\n    _popupConfig: function() {\r\n        return Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_4__[\"extend\"])(this.callBase(), {\r\n            width: \"\"\r\n        })\r\n    },\r\n    _contentReadyHandler: function() {\r\n        this._createColorView();\r\n        this._addPopupBottomClasses()\r\n    },\r\n    _addPopupBottomClasses: function() {\r\n        var $popupBottom = this._popup.bottomToolbar();\r\n        if ($popupBottom) {\r\n            $popupBottom.addClass(COLOR_BOX_CONTAINER_CELL_CLASS).addClass(COLOR_BOX_BUTTON_CELL_CLASS).find(\".dx-toolbar-items-container\").addClass(COLOR_BOX_BUTTONS_CONTAINER_CLASS);\r\n            $popupBottom.find(\".dx-popup-done\").addClass(COLOR_BOX_APPLY_BUTTON_CLASS);\r\n            $popupBottom.find(\".dx-popup-cancel\").addClass(COLOR_BOX_CANCEL_BUTTON_CLASS)\r\n        }\r\n    },\r\n    _createColorView: function() {\r\n        this._popup.$overlayContent().addClass(COLOR_BOX_OVERLAY_CLASS);\r\n        var $colorView = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"<div>\").appendTo(this._popup.$content());\r\n        this._colorView = this._createComponent($colorView, _color_view__WEBPACK_IMPORTED_MODULE_3__[\"default\"], this._colorViewConfig());\r\n        this._colorView.registerKeyHandler(\"escape\", this._escapeHandler.bind(this));\r\n        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_1__[\"default\"].on($colorView, \"focus\", function() {\r\n            this.focus()\r\n        }.bind(this))\r\n    },\r\n    _escapeHandler: function() {\r\n        this.close();\r\n        this.focus()\r\n    },\r\n    _applyNewColor: function(value) {\r\n        this.option(\"value\", value);\r\n        if (value) {\r\n            colorUtils.makeTransparentBackground(this._$colorResultPreview, value)\r\n        }\r\n        if (this._colorViewEnterKeyPressed) {\r\n            this.close();\r\n            this._colorViewEnterKeyPressed = false\r\n        }\r\n    },\r\n    _colorViewConfig: function() {\r\n        var that = this;\r\n        return {\r\n            value: that.option(\"value\"),\r\n            matchValue: that.option(\"value\"),\r\n            editAlphaChannel: that.option(\"editAlphaChannel\"),\r\n            applyValueMode: that.option(\"applyValueMode\"),\r\n            focusStateEnabled: that.option(\"focusStateEnabled\"),\r\n            stylingMode: this.option(\"stylingMode\"),\r\n            onEnterKeyPressed: function(_ref) {\r\n                var {\r\n                    event: event\r\n                } = _ref;\r\n                that._colorViewEnterKeyPressed = true;\r\n                if (that._colorView.option(\"value\") !== that.option(\"value\")) {\r\n                    that._saveValueChangeEvent(event);\r\n                    that._applyNewColor(that._colorView.option(\"value\"));\r\n                    that.close()\r\n                }\r\n            },\r\n            onValueChanged: function(_ref2) {\r\n                var {\r\n                    event: event,\r\n                    value: value,\r\n                    previousValue: previousValue\r\n                } = _ref2;\r\n                var instantlyMode = \"instantly\" === that.option(\"applyValueMode\");\r\n                var isOldValue = colorUtils.makeRgba(value) === previousValue;\r\n                var changesApplied = instantlyMode || that._colorViewEnterKeyPressed;\r\n                var valueCleared = that._shouldSaveEmptyValue;\r\n                if (isOldValue || !changesApplied || valueCleared) {\r\n                    return\r\n                }\r\n                if (event) {\r\n                    that._saveValueChangeEvent(event)\r\n                }\r\n                that._applyNewColor(value)\r\n            }\r\n        }\r\n    },\r\n    _enterKeyHandler: function(e) {\r\n        var newValue = this._input().val();\r\n        var value = this.option(\"value\");\r\n        var oldValue = this.option(\"editAlphaChannel\") ? colorUtils.makeRgba(value) : value;\r\n        if (!newValue) {\r\n            return false\r\n        }\r\n        var color = new _color__WEBPACK_IMPORTED_MODULE_2__[\"default\"](newValue);\r\n        if (color.colorIsInvalid) {\r\n            this._input().val(oldValue);\r\n            return\r\n        }\r\n        if (newValue !== oldValue) {\r\n            this._applyColorFromInput(newValue);\r\n            this._saveValueChangeEvent(e);\r\n            this.option(\"value\", this.option(\"editAlphaChannel\") ? colorUtils.makeRgba(newValue) : newValue)\r\n        }\r\n        if (this._colorView) {\r\n            var colorViewValue = this._colorView.option(\"value\");\r\n            if (value !== colorViewValue) {\r\n                this._saveValueChangeEvent(e);\r\n                this.option(\"value\", colorViewValue)\r\n            }\r\n        }\r\n        this.close();\r\n        return false\r\n    },\r\n    _applyButtonHandler: function(e) {\r\n        this._saveValueChangeEvent(e.event);\r\n        this._applyNewColor(this._colorView.option(\"value\"));\r\n        this.callBase()\r\n    },\r\n    _cancelButtonHandler: function() {\r\n        this._resetInputValue();\r\n        this.callBase()\r\n    },\r\n    _getKeyboardListeners() {\r\n        return this.callBase().concat([this._colorView])\r\n    },\r\n    _init: function() {\r\n        this.callBase()\r\n    },\r\n    _initMarkup: function() {\r\n        this.$element().addClass(COLOR_BOX_CLASS);\r\n        this.callBase()\r\n    },\r\n    _renderInput: function() {\r\n        this.callBase();\r\n        this._input().addClass(COLOR_BOX_INPUT_CLASS);\r\n        this._renderColorPreview()\r\n    },\r\n    _renderColorPreview: function() {\r\n        this.$element().wrapInner(Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"<div>\").addClass(COLOR_BOX_INPUT_CONTAINER_CLASS));\r\n        this._$colorBoxInputContainer = this.$element().children().eq(0);\r\n        this._$colorResultPreview = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"<div>\").addClass(COLOR_BOX_COLOR_RESULT_PREVIEW_CLASS).appendTo(this._$textEditorInputContainer);\r\n        if (!this.option(\"value\")) {\r\n            this._$colorBoxInputContainer.addClass(COLOR_BOX_COLOR_IS_NOT_DEFINED)\r\n        } else {\r\n            colorUtils.makeTransparentBackground(this._$colorResultPreview, this.option(\"value\"))\r\n        }\r\n    },\r\n    _renderValue: function() {\r\n        var value = this.option(\"value\");\r\n        var convertToColor = null !== value && this.option(\"editAlphaChannel\");\r\n        var text = convertToColor ? colorUtils.makeRgba(value) : value;\r\n        this.option(\"text\", text);\r\n        return this.callBase()\r\n    },\r\n    _resetInputValue: function() {\r\n        var $input = this._input();\r\n        var value = this.option(\"value\");\r\n        $input.val(value);\r\n        this._updateColorViewValue(value)\r\n    },\r\n    _updateColorViewValue: function(value) {\r\n        if (this._colorView) {\r\n            this._colorView.option({\r\n                value: value,\r\n                matchValue: value\r\n            })\r\n        }\r\n    },\r\n    _valueChangeEventHandler: function(e) {\r\n        var value = this._input().val();\r\n        if (value) {\r\n            value = this._applyColorFromInput(value);\r\n            this._updateColorViewValue(value)\r\n        }\r\n        this.callBase(e, value)\r\n    },\r\n    _applyColorFromInput: function(value) {\r\n        var newColor = new _color__WEBPACK_IMPORTED_MODULE_2__[\"default\"](value);\r\n        if (newColor.colorIsInvalid) {\r\n            this._resetInputValue();\r\n            value = this.option(\"value\")\r\n        }\r\n        return value\r\n    },\r\n    _clean: function() {\r\n        this.callBase();\r\n        delete this._shouldSaveEmptyValue\r\n    },\r\n    _optionChanged: function(args) {\r\n        var value = args.value;\r\n        var name = args.name;\r\n        switch (name) {\r\n            case \"value\":\r\n                this._$colorBoxInputContainer.toggleClass(COLOR_BOX_COLOR_IS_NOT_DEFINED, !value);\r\n                if (value) {\r\n                    colorUtils.makeTransparentBackground(this._$colorResultPreview, value)\r\n                } else {\r\n                    this._$colorResultPreview.removeAttr(\"style\")\r\n                }\r\n                if (null === value) {\r\n                    this._shouldSaveEmptyValue = true\r\n                }\r\n                this._updateColorViewValue(value);\r\n                this._shouldSaveEmptyValue = false;\r\n                this.callBase(args);\r\n                break;\r\n            case \"applyButtonText\":\r\n            case \"cancelButtonText\":\r\n                this.callBase(args);\r\n                this._popup && this._addPopupBottomClasses();\r\n                break;\r\n            case \"editAlphaChannel\":\r\n            case \"keyStep\":\r\n                if (this._colorView) {\r\n                    this._colorView.option(name, value)\r\n                }\r\n                break;\r\n            default:\r\n                this.callBase(args)\r\n        }\r\n    }\r\n});\r\nObject(_core_component_registrator__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(\"dxColorBox\", ColorBox);\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (ColorBox);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/devextreme/esm/ui/color_box/color_box.js\n");

/***/ }),

/***/ "./node_modules/devextreme/esm/ui/color_box/color_view.js":
/*!****************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/color_box/color_view.js ***!
  \****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_utils_size__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/utils/size */ \"./node_modules/devextreme/esm/core/utils/size.js\");\n/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/renderer */ \"./node_modules/devextreme/esm/core/renderer.js\");\n/* harmony import */ var _events_core_events_engine__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../events/core/events_engine */ \"./node_modules/devextreme/esm/events/core/events_engine.js\");\n/* harmony import */ var _animation_translator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../animation/translator */ \"./node_modules/devextreme/esm/animation/translator.js\");\n/* harmony import */ var _core_utils_extend__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/utils/extend */ \"./node_modules/devextreme/esm/core/utils/extend.js\");\n/* harmony import */ var _color__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../color */ \"./node_modules/devextreme/esm/color.js\");\n/* harmony import */ var _localization_message__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../localization/message */ \"./node_modules/devextreme/esm/localization/message.js\");\n/* harmony import */ var _core_devices__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../core/devices */ \"./node_modules/devextreme/esm/core/devices.js\");\n/* harmony import */ var _core_component_registrator__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../core/component_registrator */ \"./node_modules/devextreme/esm/core/component_registrator.js\");\n/* harmony import */ var _editor_editor__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../editor/editor */ \"./node_modules/devextreme/esm/ui/editor/editor.js\");\n/* harmony import */ var _number_box__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../number_box */ \"./node_modules/devextreme/esm/ui/number_box.js\");\n/* harmony import */ var _text_box__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../text_box */ \"./node_modules/devextreme/esm/ui/text_box.js\");\n/* harmony import */ var _draggable__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../draggable */ \"./node_modules/devextreme/esm/ui/draggable.js\");\n/* harmony import */ var _events_utils_index__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../events/utils/index */ \"./node_modules/devextreme/esm/events/utils/index.js\");\n/* harmony import */ var _events_click__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../events/click */ \"./node_modules/devextreme/esm/events/click.js\");\n/**\r\n * DevExtreme (esm/ui/color_box/color_view.js)\r\n * Version: 21.2.7\r\n * Build date: Mon Apr 11 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nvar COLOR_VIEW_CLASS = \"dx-colorview\";\r\nvar COLOR_VIEW_CONTAINER_CLASS = \"dx-colorview-container\";\r\nvar COLOR_VIEW_ROW_CLASS = \"dx-colorview-container-row\";\r\nvar COLOR_VIEW_CELL_CLASS = \"dx-colorview-container-cell\";\r\nvar COLOR_VIEW_PALETTE_CLASS = \"dx-colorview-palette\";\r\nvar COLOR_VIEW_PALETTE_CELL_CLASS = \"dx-colorview-palette-cell\";\r\nvar COLOR_VIEW_PALETTE_HANDLE_CLASS = \"dx-colorview-palette-handle\";\r\nvar COLOR_VIEW_PALETTE_GRADIENT_CLASS = \"dx-colorview-palette-gradient\";\r\nvar COLOR_VIEW_PALETTE_GRADIENT_WHITE_CLASS = \"dx-colorview-palette-gradient-white\";\r\nvar COLOR_VIEW_PALETTE_GRADIENT_BLACK_CLASS = \"dx-colorview-palette-gradient-black\";\r\nvar COLOR_VIEW_HUE_SCALE_CLASS = \"dx-colorview-hue-scale\";\r\nvar COLOR_VIEW_HUE_SCALE_CELL_CLASS = \"dx-colorview-hue-scale-cell\";\r\nvar COLOR_VIEW_HUE_SCALE_HANDLE_CLASS = \"dx-colorview-hue-scale-handle\";\r\nvar COLOR_VIEW_HUE_SCALE_WRAPPER_CLASS = \"dx-colorview-hue-scale-wrapper\";\r\nvar COLOR_VIEW_CONTROLS_CONTAINER_CLASS = \"dx-colorview-controls-container\";\r\nvar COLOR_VIEW_RED_LABEL_CLASS = \"dx-colorview-label-red\";\r\nvar COLOR_VIEW_GREEN_LABEL_CLASS = \"dx-colorview-label-green\";\r\nvar COLOR_VIEW_BLUE_LABEL_CLASS = \"dx-colorview-label-blue\";\r\nvar COLOR_VIEW_HEX_LABEL_CLASS = \"dx-colorview-label-hex\";\r\nvar COLOR_VIEW_ALPHA_CHANNEL_SCALE_CLASS = \"dx-colorview-alpha-channel-scale\";\r\nvar COLOR_VIEW_APLHA_CHANNEL_ROW_CLASS = \"dx-colorview-alpha-channel-row\";\r\nvar COLOR_VIEW_ALPHA_CHANNEL_SCALE_WRAPPER_CLASS = \"dx-colorview-alpha-channel-wrapper\";\r\nvar COLOR_VIEW_ALPHA_CHANNEL_LABEL_CLASS = \"dx-colorview-alpha-channel-label\";\r\nvar COLOR_VIEW_ALPHA_CHANNEL_HANDLE_CLASS = \"dx-colorview-alpha-channel-handle\";\r\nvar COLOR_VIEW_ALPHA_CHANNEL_CELL_CLASS = \"dx-colorview-alpha-channel-cell\";\r\nvar COLOR_VIEW_ALPHA_CHANNEL_BORDER_CLASS = \"dx-colorview-alpha-channel-border\";\r\nvar COLOR_VIEW_COLOR_PREVIEW = \"dx-colorview-color-preview\";\r\nvar COLOR_VIEW_COLOR_PREVIEW_CONTAINER_CLASS = \"dx-colorview-color-preview-container\";\r\nvar COLOR_VIEW_COLOR_PREVIEW_CONTAINER_INNER_CLASS = \"dx-colorview-color-preview-container-inner\";\r\nvar COLOR_VIEW_COLOR_PREVIEW_COLOR_CURRENT = \"dx-colorview-color-preview-color-current\";\r\nvar COLOR_VIEW_COLOR_PREVIEW_COLOR_NEW = \"dx-colorview-color-preview-color-new\";\r\nvar ColorView = _editor_editor__WEBPACK_IMPORTED_MODULE_9__[\"default\"].inherit({\r\n    _supportedKeys: function() {\r\n        var isRTL = this.option(\"rtlEnabled\");\r\n        var that = this;\r\n        var getHorizontalPaletteStep = function(e) {\r\n            var step = 100 / that._paletteWidth;\r\n            if (e.shiftKey) {\r\n                step *= that.option(\"keyStep\")\r\n            }\r\n            step = step > 1 ? step : 1;\r\n            return Math.round(step)\r\n        };\r\n        var updateHorizontalPaletteValue = function(step) {\r\n            var value = that._currentColor.hsv.s + step;\r\n            if (value > 100) {\r\n                value = 100\r\n            } else if (value < 0) {\r\n                value = 0\r\n            }\r\n            that._currentColor.hsv.s = value;\r\n            updatePaletteValue()\r\n        };\r\n        var getVerticalPaletteStep = function(e) {\r\n            var step = 100 / that._paletteHeight;\r\n            if (e.shiftKey) {\r\n                step *= that.option(\"keyStep\")\r\n            }\r\n            step = step > 1 ? step : 1;\r\n            return Math.round(step)\r\n        };\r\n        var updateVerticalPaletteValue = function(step) {\r\n            var value = that._currentColor.hsv.v + step;\r\n            if (value > 100) {\r\n                value = 100\r\n            } else if (value < 0) {\r\n                value = 0\r\n            }\r\n            that._currentColor.hsv.v = value;\r\n            updatePaletteValue()\r\n        };\r\n\r\n        function updatePaletteValue() {\r\n            that._placePaletteHandle();\r\n            that._updateColorFromHsv(that._currentColor.hsv.h, that._currentColor.hsv.s, that._currentColor.hsv.v)\r\n        }\r\n        var getHueScaleStep = function(e) {\r\n            var step = 360 / (that._hueScaleWrapperHeight - that._hueScaleHandleHeight);\r\n            if (e.shiftKey) {\r\n                step *= that.option(\"keyStep\")\r\n            }\r\n            step = step > 1 ? step : 1;\r\n            return step\r\n        };\r\n        var updateHueScaleValue = function(step) {\r\n            that._currentColor.hsv.h += step;\r\n            that._placeHueScaleHandle();\r\n            var handleLocation = Object(_animation_translator__WEBPACK_IMPORTED_MODULE_3__[\"locate\"])(that._$hueScaleHandle);\r\n            that._updateColorHue(handleLocation.top + that._hueScaleHandleHeight / 2)\r\n        };\r\n        var getAlphaScaleStep = function(e) {\r\n            var step = 1 / that._alphaChannelScaleWorkWidth;\r\n            if (e.shiftKey) {\r\n                step *= that.option(\"keyStep\")\r\n            }\r\n            step = step > .01 ? step : .01;\r\n            step = isRTL ? -step : step;\r\n            return step\r\n        };\r\n        var updateAlphaScaleValue = function(step) {\r\n            that._currentColor.a += step;\r\n            that._placeAlphaChannelHandle();\r\n            var handleLocation = Object(_animation_translator__WEBPACK_IMPORTED_MODULE_3__[\"locate\"])(that._$alphaChannelHandle);\r\n            that._calculateColorTransparencyByScaleWidth(handleLocation.left + that._alphaChannelHandleWidth / 2)\r\n        };\r\n        return Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_4__[\"extend\"])(this.callBase(), {\r\n            upArrow: function(e) {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                if (Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_13__[\"isCommandKeyPressed\"])(e)) {\r\n                    if (this._currentColor.hsv.h <= 360 && !this._isTopColorHue) {\r\n                        this._saveValueChangeEvent(e);\r\n                        updateHueScaleValue(getHueScaleStep(e))\r\n                    }\r\n                } else if (this._currentColor.hsv.v < 100) {\r\n                    this._saveValueChangeEvent(e);\r\n                    updateVerticalPaletteValue(getVerticalPaletteStep(e))\r\n                }\r\n            },\r\n            downArrow: function(e) {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                if (Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_13__[\"isCommandKeyPressed\"])(e)) {\r\n                    if (this._currentColor.hsv.h >= 0) {\r\n                        if (this._isTopColorHue) {\r\n                            this._currentColor.hsv.h = 360\r\n                        }\r\n                        this._saveValueChangeEvent(e);\r\n                        updateHueScaleValue(-getHueScaleStep(e))\r\n                    }\r\n                } else if (this._currentColor.hsv.v > 0) {\r\n                    this._saveValueChangeEvent(e);\r\n                    updateVerticalPaletteValue(-getVerticalPaletteStep(e))\r\n                }\r\n            },\r\n            rightArrow: function(e) {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                if (Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_13__[\"isCommandKeyPressed\"])(e)) {\r\n                    if (isRTL ? this._currentColor.a < 1 : this._currentColor.a > 0 && this.option(\"editAlphaChannel\")) {\r\n                        this._saveValueChangeEvent(e);\r\n                        updateAlphaScaleValue(-getAlphaScaleStep(e))\r\n                    }\r\n                } else if (this._currentColor.hsv.s < 100) {\r\n                    this._saveValueChangeEvent(e);\r\n                    updateHorizontalPaletteValue(getHorizontalPaletteStep(e))\r\n                }\r\n            },\r\n            leftArrow: function(e) {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                if (Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_13__[\"isCommandKeyPressed\"])(e)) {\r\n                    if (isRTL ? this._currentColor.a > 0 : this._currentColor.a < 1 && this.option(\"editAlphaChannel\")) {\r\n                        this._saveValueChangeEvent(e);\r\n                        updateAlphaScaleValue(getAlphaScaleStep(e))\r\n                    }\r\n                } else if (this._currentColor.hsv.s > 0) {\r\n                    this._saveValueChangeEvent(e);\r\n                    updateHorizontalPaletteValue(-getHorizontalPaletteStep(e))\r\n                }\r\n            },\r\n            enter: function(e) {\r\n                this._fireEnterKeyPressed(e)\r\n            }\r\n        })\r\n    },\r\n    _getDefaultOptions: function() {\r\n        return Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_4__[\"extend\"])(this.callBase(), {\r\n            value: null,\r\n            matchValue: null,\r\n            onEnterKeyPressed: void 0,\r\n            editAlphaChannel: false,\r\n            keyStep: 1,\r\n            stylingMode: void 0\r\n        })\r\n    },\r\n    _defaultOptionsRules: function() {\r\n        return this.callBase().concat([{\r\n            device: function() {\r\n                return \"desktop\" === _core_devices__WEBPACK_IMPORTED_MODULE_7__[\"default\"].real().deviceType && !_core_devices__WEBPACK_IMPORTED_MODULE_7__[\"default\"].isSimulator()\r\n            },\r\n            options: {\r\n                focusStateEnabled: true\r\n            }\r\n        }])\r\n    },\r\n    _init: function() {\r\n        this.callBase();\r\n        this._initColorAndOpacity();\r\n        this._initEnterKeyPressedAction()\r\n    },\r\n    _initEnterKeyPressedAction: function() {\r\n        this._onEnterKeyPressedAction = this._createActionByOption(\"onEnterKeyPressed\")\r\n    },\r\n    _fireEnterKeyPressed: function(e) {\r\n        if (!this._onEnterKeyPressedAction) {\r\n            return\r\n        }\r\n        this._onEnterKeyPressedAction({\r\n            event: e\r\n        })\r\n    },\r\n    _initColorAndOpacity: function() {\r\n        this._setCurrentColor(this.option(\"value\"))\r\n    },\r\n    _setCurrentColor: function(value) {\r\n        value = value || \"#000000\";\r\n        var newColor = new _color__WEBPACK_IMPORTED_MODULE_5__[\"default\"](value);\r\n        if (!newColor.colorIsInvalid) {\r\n            if (!this._currentColor || this._makeRgba(this._currentColor) !== this._makeRgba(newColor)) {\r\n                this._currentColor = newColor;\r\n                if (this._$currentColor) {\r\n                    this._makeTransparentBackground(this._$currentColor, newColor)\r\n                }\r\n            }\r\n        } else {\r\n            this.option(\"value\", this._currentColor.baseColor)\r\n        }\r\n    },\r\n    _setBaseColor: function(value) {\r\n        var color = value || \"#000000\";\r\n        var newColor = new _color__WEBPACK_IMPORTED_MODULE_5__[\"default\"](color);\r\n        if (!newColor.colorIsInvalid) {\r\n            var isBaseColorChanged = this._makeRgba(this.option(\"matchValue\") !== this._makeRgba(newColor));\r\n            if (isBaseColorChanged) {\r\n                if (this._$baseColor) {\r\n                    this._makeTransparentBackground(this._$baseColor, newColor)\r\n                }\r\n            }\r\n        }\r\n    },\r\n    _initMarkup: function() {\r\n        this.callBase();\r\n        this.$element().addClass(COLOR_VIEW_CLASS);\r\n        this._renderColorPickerContainer()\r\n    },\r\n    _render: function() {\r\n        this.callBase();\r\n        this._renderPalette();\r\n        this._renderHueScale();\r\n        this._renderControlsContainer();\r\n        this._renderControls();\r\n        this._renderAlphaChannelElements()\r\n    },\r\n    _makeTransparentBackground: function($el, color) {\r\n        if (!(color instanceof _color__WEBPACK_IMPORTED_MODULE_5__[\"default\"])) {\r\n            color = new _color__WEBPACK_IMPORTED_MODULE_5__[\"default\"](color)\r\n        }\r\n        $el.css(\"backgroundColor\", this._makeRgba(color))\r\n    },\r\n    _makeRgba: function(color) {\r\n        if (!(color instanceof _color__WEBPACK_IMPORTED_MODULE_5__[\"default\"])) {\r\n            color = new _color__WEBPACK_IMPORTED_MODULE_5__[\"default\"](color)\r\n        }\r\n        return \"rgba(\" + [color.r, color.g, color.b, color.a].join(\", \") + \")\"\r\n    },\r\n    _renderValue: function() {\r\n        this.callBase(this.option(\"editAlphaChannel\") ? this._makeRgba(this._currentColor) : this.option(\"value\"))\r\n    },\r\n    _renderColorPickerContainer: function() {\r\n        var $parent = this.$element();\r\n        this._$colorPickerContainer = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\"<div>\").addClass(COLOR_VIEW_CONTAINER_CLASS).appendTo($parent);\r\n        this._renderHtmlRows()\r\n    },\r\n    _renderHtmlRows: function(updatedOption) {\r\n        var $renderedRows = this._$colorPickerContainer.find(\".\" + COLOR_VIEW_ROW_CLASS);\r\n        var renderedRowsCount = $renderedRows.length;\r\n        var rowCount = this.option(\"editAlphaChannel\") ? 2 : 1;\r\n        var delta = renderedRowsCount - rowCount;\r\n        if (delta > 0) {\r\n            $renderedRows.eq(-1).remove()\r\n        }\r\n        if (delta < 0) {\r\n            delta = Math.abs(delta);\r\n            var rows = [];\r\n            var i;\r\n            for (i = 0; i < delta; i++) {\r\n                rows.push(Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\"<div>\").addClass(COLOR_VIEW_ROW_CLASS))\r\n            }\r\n            if (renderedRowsCount) {\r\n                for (i = 0; i < rows.length; i++) {\r\n                    $renderedRows.eq(0).after(rows[i])\r\n                }\r\n            } else {\r\n                this._$colorPickerContainer.append(rows)\r\n            }\r\n        }\r\n    },\r\n    _renderHtmlCellInsideRow: function(index, $rowParent, additionalClass) {\r\n        return Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\"<div>\").addClass(COLOR_VIEW_CELL_CLASS).addClass(additionalClass).appendTo($rowParent.find(\".\" + COLOR_VIEW_ROW_CLASS).eq(index))\r\n    },\r\n    _renderPalette: function() {\r\n        var $paletteCell = this._renderHtmlCellInsideRow(0, this._$colorPickerContainer, COLOR_VIEW_PALETTE_CELL_CLASS);\r\n        var $paletteGradientWhite = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\"<div>\").addClass([COLOR_VIEW_PALETTE_GRADIENT_CLASS, COLOR_VIEW_PALETTE_GRADIENT_WHITE_CLASS].join(\" \"));\r\n        var $paletteGradientBlack = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\"<div>\").addClass([COLOR_VIEW_PALETTE_GRADIENT_CLASS, COLOR_VIEW_PALETTE_GRADIENT_BLACK_CLASS].join(\" \"));\r\n        this._$palette = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\"<div>\").addClass(COLOR_VIEW_PALETTE_CLASS).css(\"backgroundColor\", this._currentColor.getPureColor().toHex()).appendTo($paletteCell);\r\n        this._paletteHeight = Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__[\"getHeight\"])(this._$palette);\r\n        this._paletteWidth = Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__[\"getWidth\"])(this._$palette);\r\n        this._renderPaletteHandle();\r\n        this._$palette.append([$paletteGradientWhite, $paletteGradientBlack])\r\n    },\r\n    _renderPaletteHandle: function() {\r\n        this._$paletteHandle = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\"<div>\").addClass(COLOR_VIEW_PALETTE_HANDLE_CLASS).appendTo(this._$palette);\r\n        this._createComponent(this._$paletteHandle, _draggable__WEBPACK_IMPORTED_MODULE_12__[\"default\"], {\r\n            contentTemplate: null,\r\n            boundary: this._$palette,\r\n            allowMoveByClick: true,\r\n            boundOffset: function() {\r\n                return -this._paletteHandleHeight / 2\r\n            }.bind(this),\r\n            onDragMove: _ref => {\r\n                var {\r\n                    event: event\r\n                } = _ref;\r\n                var paletteHandlePosition = Object(_animation_translator__WEBPACK_IMPORTED_MODULE_3__[\"locate\"])(this._$paletteHandle);\r\n                this._updateByDrag = true;\r\n                this._saveValueChangeEvent(event);\r\n                this._updateColorFromHsv(this._currentColor.hsv.h, this._calculateColorSaturation(paletteHandlePosition), this._calculateColorValue(paletteHandlePosition))\r\n            }\r\n        });\r\n        this._paletteHandleWidth = Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__[\"getWidth\"])(this._$paletteHandle);\r\n        this._paletteHandleHeight = Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__[\"getHeight\"])(this._$paletteHandle);\r\n        this._placePaletteHandle()\r\n    },\r\n    _placePaletteHandle: function() {\r\n        Object(_animation_translator__WEBPACK_IMPORTED_MODULE_3__[\"move\"])(this._$paletteHandle, {\r\n            left: Math.round(this._paletteWidth * this._currentColor.hsv.s / 100 - this._paletteHandleWidth / 2),\r\n            top: Math.round(this._paletteHeight - this._paletteHeight * this._currentColor.hsv.v / 100 - this._paletteHandleHeight / 2)\r\n        })\r\n    },\r\n    _calculateColorValue: function(paletteHandlePosition) {\r\n        var value = Math.floor(paletteHandlePosition.top + this._paletteHandleHeight / 2);\r\n        return 100 - Math.round(100 * value / this._paletteHeight)\r\n    },\r\n    _calculateColorSaturation: function(paletteHandlePosition) {\r\n        var saturation = Math.floor(paletteHandlePosition.left + this._paletteHandleWidth / 2);\r\n        return Math.round(100 * saturation / this._paletteWidth)\r\n    },\r\n    _updateColorFromHsv: function(hue, saturation, value) {\r\n        var a = this._currentColor.a;\r\n        this._currentColor = new _color__WEBPACK_IMPORTED_MODULE_5__[\"default\"](\"hsv(\" + [hue, saturation, value].join(\",\") + \")\");\r\n        this._currentColor.a = a;\r\n        this._updateColorParamsAndColorPreview();\r\n        this.applyColor()\r\n    },\r\n    _renderHueScale: function() {\r\n        var $hueScaleCell = this._renderHtmlCellInsideRow(0, this._$colorPickerContainer, COLOR_VIEW_HUE_SCALE_CELL_CLASS);\r\n        this._$hueScaleWrapper = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\"<div>\").addClass(COLOR_VIEW_HUE_SCALE_WRAPPER_CLASS).appendTo($hueScaleCell);\r\n        this._$hueScale = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\"<div>\").addClass(COLOR_VIEW_HUE_SCALE_CLASS).appendTo(this._$hueScaleWrapper);\r\n        this._hueScaleHeight = Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__[\"getHeight\"])(this._$hueScale);\r\n        this._hueScaleWrapperHeight = Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__[\"getOuterHeight\"])(this._$hueScaleWrapper);\r\n        this._renderHueScaleHandle()\r\n    },\r\n    _renderHueScaleHandle: function() {\r\n        this._$hueScaleHandle = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\"<div>\").addClass(COLOR_VIEW_HUE_SCALE_HANDLE_CLASS).appendTo(this._$hueScaleWrapper);\r\n        this._createComponent(this._$hueScaleHandle, _draggable__WEBPACK_IMPORTED_MODULE_12__[\"default\"], {\r\n            contentTemplate: null,\r\n            boundary: this._$hueScaleWrapper,\r\n            allowMoveByClick: true,\r\n            dragDirection: \"vertical\",\r\n            onDragMove: _ref2 => {\r\n                var {\r\n                    event: event\r\n                } = _ref2;\r\n                this._updateByDrag = true;\r\n                this._saveValueChangeEvent(event);\r\n                this._updateColorHue(Object(_animation_translator__WEBPACK_IMPORTED_MODULE_3__[\"locate\"])(this._$hueScaleHandle).top + this._hueScaleHandleHeight / 2)\r\n            }\r\n        });\r\n        this._hueScaleHandleHeight = Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__[\"getHeight\"])(this._$hueScaleHandle);\r\n        this._placeHueScaleHandle()\r\n    },\r\n    _placeHueScaleHandle: function() {\r\n        var hueScaleHeight = this._hueScaleWrapperHeight;\r\n        var handleHeight = this._hueScaleHandleHeight;\r\n        var top = (hueScaleHeight - handleHeight) * (360 - this._currentColor.hsv.h) / 360;\r\n        if (hueScaleHeight < top + handleHeight) {\r\n            top = hueScaleHeight - handleHeight\r\n        }\r\n        if (top < 0) {\r\n            top = 0\r\n        }\r\n        Object(_animation_translator__WEBPACK_IMPORTED_MODULE_3__[\"move\"])(this._$hueScaleHandle, {\r\n            top: Math.round(top)\r\n        })\r\n    },\r\n    _updateColorHue: function(handlePosition) {\r\n        var hue = 360 - Math.round(360 * (handlePosition - this._hueScaleHandleHeight / 2) / (this._hueScaleWrapperHeight - this._hueScaleHandleHeight));\r\n        var saturation = this._currentColor.hsv.s;\r\n        var value = this._currentColor.hsv.v;\r\n        this._isTopColorHue = false;\r\n        hue = hue < 0 ? 0 : hue;\r\n        if (hue >= 360) {\r\n            this._isTopColorHue = true;\r\n            hue = 0\r\n        }\r\n        this._updateColorFromHsv(hue, saturation, value);\r\n        this._$palette.css(\"backgroundColor\", this._currentColor.getPureColor().toHex())\r\n    },\r\n    _renderControlsContainer: function() {\r\n        var $controlsContainerCell = this._renderHtmlCellInsideRow(0, this._$colorPickerContainer);\r\n        this._$controlsContainer = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\"<div>\").addClass(COLOR_VIEW_CONTROLS_CONTAINER_CLASS).appendTo($controlsContainerCell)\r\n    },\r\n    _renderControls: function() {\r\n        this._renderColorsPreview();\r\n        this._renderRgbInputs();\r\n        this._renderHexInput()\r\n    },\r\n    _renderColorsPreview: function() {\r\n        var $colorsPreviewContainer = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\"<div>\").addClass(COLOR_VIEW_COLOR_PREVIEW_CONTAINER_CLASS).appendTo(this._$controlsContainer);\r\n        var $colorsPreviewContainerInner = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\"<div>\").addClass(COLOR_VIEW_COLOR_PREVIEW_CONTAINER_INNER_CLASS).appendTo($colorsPreviewContainer);\r\n        this._$currentColor = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\"<div>\").addClass([COLOR_VIEW_COLOR_PREVIEW, COLOR_VIEW_COLOR_PREVIEW_COLOR_NEW].join(\" \"));\r\n        this._$baseColor = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\"<div>\").addClass([COLOR_VIEW_COLOR_PREVIEW, COLOR_VIEW_COLOR_PREVIEW_COLOR_CURRENT].join(\" \"));\r\n        this._makeTransparentBackground(this._$baseColor, this.option(\"matchValue\"));\r\n        this._makeTransparentBackground(this._$currentColor, this._currentColor);\r\n        $colorsPreviewContainerInner.append([this._$baseColor, this._$currentColor])\r\n    },\r\n    _renderAlphaChannelElements: function() {\r\n        if (this.option(\"editAlphaChannel\")) {\r\n            this._$colorPickerContainer.find(\".\" + COLOR_VIEW_ROW_CLASS).eq(1).addClass(COLOR_VIEW_APLHA_CHANNEL_ROW_CLASS);\r\n            this._renderAlphaChannelScale();\r\n            this._renderAlphaChannelInput()\r\n        }\r\n    },\r\n    _renderRgbInputs: function() {\r\n        this._rgbInputsWithLabels = [this._renderEditorWithLabel({\r\n            editorType: _number_box__WEBPACK_IMPORTED_MODULE_10__[\"default\"],\r\n            value: this._currentColor.r,\r\n            onValueChanged: this._updateColor.bind(this, false),\r\n            labelText: \"R\",\r\n            labelAriaText: _localization_message__WEBPACK_IMPORTED_MODULE_6__[\"default\"].format(\"dxColorView-ariaRed\"),\r\n            labelClass: COLOR_VIEW_RED_LABEL_CLASS\r\n        }), this._renderEditorWithLabel({\r\n            editorType: _number_box__WEBPACK_IMPORTED_MODULE_10__[\"default\"],\r\n            value: this._currentColor.g,\r\n            onValueChanged: this._updateColor.bind(this, false),\r\n            labelText: \"G\",\r\n            labelAriaText: _localization_message__WEBPACK_IMPORTED_MODULE_6__[\"default\"].format(\"dxColorView-ariaGreen\"),\r\n            labelClass: COLOR_VIEW_GREEN_LABEL_CLASS\r\n        }), this._renderEditorWithLabel({\r\n            editorType: _number_box__WEBPACK_IMPORTED_MODULE_10__[\"default\"],\r\n            value: this._currentColor.b,\r\n            onValueChanged: this._updateColor.bind(this, false),\r\n            labelText: \"B\",\r\n            labelAriaText: _localization_message__WEBPACK_IMPORTED_MODULE_6__[\"default\"].format(\"dxColorView-ariaBlue\"),\r\n            labelClass: COLOR_VIEW_BLUE_LABEL_CLASS\r\n        })];\r\n        this._$controlsContainer.append(this._rgbInputsWithLabels);\r\n        this._rgbInputs = [this._rgbInputsWithLabels[0].find(\".dx-numberbox\").dxNumberBox(\"instance\"), this._rgbInputsWithLabels[1].find(\".dx-numberbox\").dxNumberBox(\"instance\"), this._rgbInputsWithLabels[2].find(\".dx-numberbox\").dxNumberBox(\"instance\")]\r\n    },\r\n    _renderEditorWithLabel: function(options) {\r\n        var $editor = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\"<div>\");\r\n        var $label = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\"<label>\").addClass(options.labelClass).text(options.labelText + \":\").append($editor);\r\n        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_2__[\"default\"].off($label, _events_click__WEBPACK_IMPORTED_MODULE_14__[\"name\"]);\r\n        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_2__[\"default\"].on($label, _events_click__WEBPACK_IMPORTED_MODULE_14__[\"name\"], (function(e) {\r\n            e.preventDefault()\r\n        }));\r\n        var editorType = options.editorType;\r\n        var editorOptions = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_4__[\"extend\"])({\r\n            value: options.value,\r\n            onValueChanged: options.onValueChanged,\r\n            onKeyboardHandled: opts => this._keyboardHandler(opts)\r\n        }, {\r\n            stylingMode: this.option(\"stylingMode\")\r\n        });\r\n        if (editorType === _number_box__WEBPACK_IMPORTED_MODULE_10__[\"default\"]) {\r\n            editorOptions.min = options.min || 0;\r\n            editorOptions.max = options.max || 255;\r\n            editorOptions.step = options.step || 1\r\n        }\r\n        var editor = new editorType($editor, editorOptions);\r\n        editor.registerKeyHandler(\"enter\", function(e) {\r\n            this._fireEnterKeyPressed(e)\r\n        }.bind(this));\r\n        this.setAria(\"label\", options.labelAriaText, $editor);\r\n        return $label\r\n    },\r\n    hexInputOptions: function() {\r\n        return {\r\n            editorType: _text_box__WEBPACK_IMPORTED_MODULE_11__[\"default\"],\r\n            value: this._currentColor.toHex().replace(\"#\", \"\"),\r\n            onValueChanged: this._updateColor.bind(this, true),\r\n            labelClass: COLOR_VIEW_HEX_LABEL_CLASS,\r\n            labelText: \"#\",\r\n            labelAriaText: _localization_message__WEBPACK_IMPORTED_MODULE_6__[\"default\"].format(\"dxColorView-ariaHex\")\r\n        }\r\n    },\r\n    _renderHexInput: function() {\r\n        this._hexInput = _text_box__WEBPACK_IMPORTED_MODULE_11__[\"default\"].getInstance(this._renderEditorWithLabel(this.hexInputOptions()).appendTo(this._$controlsContainer).find(\".dx-textbox\"))\r\n    },\r\n    _renderAlphaChannelScale: function() {\r\n        var $alphaChannelScaleCell = this._renderHtmlCellInsideRow(1, this._$colorPickerContainer, COLOR_VIEW_ALPHA_CHANNEL_CELL_CLASS);\r\n        var $alphaChannelBorder = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\"<div>\").addClass(COLOR_VIEW_ALPHA_CHANNEL_BORDER_CLASS).appendTo($alphaChannelScaleCell);\r\n        var $alphaChannelScaleWrapper = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\"<div>\").addClass(COLOR_VIEW_ALPHA_CHANNEL_SCALE_WRAPPER_CLASS).appendTo($alphaChannelBorder);\r\n        this._$alphaChannelScale = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\"<div>\").addClass(COLOR_VIEW_ALPHA_CHANNEL_SCALE_CLASS).appendTo($alphaChannelScaleWrapper);\r\n        this._makeCSSLinearGradient(this._$alphaChannelScale);\r\n        this._renderAlphaChannelHandle($alphaChannelScaleCell)\r\n    },\r\n    _makeCSSLinearGradient: function($el) {\r\n        var color = this._currentColor;\r\n        var colorAsRgb = [color.r, color.g, color.b].join(\",\");\r\n        var colorAsHex = color.toHex().replace(\"#\", \"\");\r\n        $el.attr(\"style\", function(colorAsRgb, colorAsHex) {\r\n            var rtlEnabled = this.option(\"rtlEnabled\");\r\n            var startColor = \"rgba(\" + colorAsRgb + \", \" + (rtlEnabled ? \"1\" : \"0\") + \")\";\r\n            var finishColor = \"rgba(\" + colorAsRgb + \", \" + (rtlEnabled ? \"0\" : \"1\") + \")\";\r\n            return [\"background-image: -webkit-linear-gradient(180deg, \" + startColor + \", \" + finishColor + \")\", \"background-image: -moz-linear-gradient(-90deg, \" + startColor + \", \" + finishColor + \")\", \"background-image: -o-linear-gradient(-90deg, \" + startColor + \", \" + finishColor + \")\", \"background-image: linear-gradient(-90deg, \" + startColor + \", \" + finishColor + \")\"].join(\";\")\r\n        }.call(this, colorAsRgb, colorAsHex))\r\n    },\r\n    _renderAlphaChannelInput: function() {\r\n        var that = this;\r\n        var $alphaChannelInputCell = this._renderHtmlCellInsideRow(1, this._$colorPickerContainer);\r\n        that._alphaChannelInput = this._renderEditorWithLabel({\r\n            editorType: _number_box__WEBPACK_IMPORTED_MODULE_10__[\"default\"],\r\n            value: this._currentColor.a,\r\n            max: 1,\r\n            step: .1,\r\n            onValueChanged: function(args) {\r\n                var value = args.value;\r\n                value = that._currentColor.isValidAlpha(value) ? value : that._currentColor.a;\r\n                args.event && that._saveValueChangeEvent(args.event);\r\n                that._updateColorTransparency(value);\r\n                that._placeAlphaChannelHandle()\r\n            },\r\n            labelClass: COLOR_VIEW_ALPHA_CHANNEL_LABEL_CLASS,\r\n            labelText: \"Alpha\",\r\n            labelAriaText: _localization_message__WEBPACK_IMPORTED_MODULE_6__[\"default\"].format(\"dxColorView-ariaAlpha\")\r\n        }).appendTo($alphaChannelInputCell).find(\".dx-numberbox\").dxNumberBox(\"instance\")\r\n    },\r\n    _updateColorTransparency: function(transparency) {\r\n        this._currentColor.a = transparency;\r\n        this.applyColor()\r\n    },\r\n    _renderAlphaChannelHandle: function($parent) {\r\n        this._$alphaChannelHandle = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\"<div>\").addClass(COLOR_VIEW_ALPHA_CHANNEL_HANDLE_CLASS).appendTo($parent);\r\n        this._createComponent(this._$alphaChannelHandle, _draggable__WEBPACK_IMPORTED_MODULE_12__[\"default\"], {\r\n            contentTemplate: null,\r\n            boundary: $parent,\r\n            allowMoveByClick: true,\r\n            dragDirection: \"horizontal\",\r\n            onDragMove: _ref3 => {\r\n                var {\r\n                    event: event\r\n                } = _ref3;\r\n                this._updateByDrag = true;\r\n                var $alphaChannelHandle = this._$alphaChannelHandle;\r\n                var alphaChannelHandlePosition = Object(_animation_translator__WEBPACK_IMPORTED_MODULE_3__[\"locate\"])($alphaChannelHandle).left + this._alphaChannelHandleWidth / 2;\r\n                this._saveValueChangeEvent(event);\r\n                this._calculateColorTransparencyByScaleWidth(alphaChannelHandlePosition)\r\n            }\r\n        });\r\n        this._alphaChannelHandleWidth = Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__[\"getWidth\"])(this._$alphaChannelHandle);\r\n        this._alphaChannelScaleWorkWidth = Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__[\"getWidth\"])($parent) - this._alphaChannelHandleWidth;\r\n        this._placeAlphaChannelHandle()\r\n    },\r\n    _calculateColorTransparencyByScaleWidth: function(handlePosition) {\r\n        var transparency = (handlePosition - this._alphaChannelHandleWidth / 2) / this._alphaChannelScaleWorkWidth;\r\n        var rtlEnabled = this.option(\"rtlEnabled\");\r\n        transparency = rtlEnabled ? transparency : 1 - transparency;\r\n        if (handlePosition >= this._alphaChannelScaleWorkWidth + this._alphaChannelHandleWidth / 2) {\r\n            transparency = rtlEnabled ? 1 : 0\r\n        } else if (transparency < 1) {\r\n            transparency = transparency.toFixed(2)\r\n        }\r\n        transparency = Math.max(transparency, 0);\r\n        transparency = Math.min(transparency, 1);\r\n        this._alphaChannelInput.option(\"value\", transparency)\r\n    },\r\n    _placeAlphaChannelHandle: function() {\r\n        var left = this._alphaChannelScaleWorkWidth * (1 - this._currentColor.a);\r\n        if (left < 0) {\r\n            left = 0\r\n        }\r\n        if (this._alphaChannelScaleWorkWidth < left) {\r\n            left = this._alphaChannelScaleWorkWidth\r\n        }\r\n        Object(_animation_translator__WEBPACK_IMPORTED_MODULE_3__[\"move\"])(this._$alphaChannelHandle, {\r\n            left: this.option(\"rtlEnabled\") ? this._alphaChannelScaleWorkWidth - left : left\r\n        })\r\n    },\r\n    applyColor: function() {\r\n        var colorValue = this.option(\"editAlphaChannel\") ? this._makeRgba(this._currentColor) : this._currentColor.toHex();\r\n        this._makeTransparentBackground(this._$currentColor, this._currentColor);\r\n        this.option(\"value\", colorValue)\r\n    },\r\n    cancelColor: function() {\r\n        this._initColorAndOpacity();\r\n        this._refreshMarkup()\r\n    },\r\n    _updateColor: function(isHex, args) {\r\n        var rgba;\r\n        var newColor;\r\n        if (isHex) {\r\n            newColor = this._validateHex(\"#\" + this._hexInput.option(\"value\"))\r\n        } else {\r\n            rgba = this._validateRgb();\r\n            if (this._alphaChannelInput) {\r\n                rgba.push(this._alphaChannelInput.option(\"value\"));\r\n                newColor = \"rgba(\" + rgba.join(\", \") + \")\"\r\n            } else {\r\n                newColor = \"rgb(\" + rgba.join(\", \") + \")\"\r\n            }\r\n        }\r\n        if (!this._suppressEditorsValueUpdating) {\r\n            this._currentColor = new _color__WEBPACK_IMPORTED_MODULE_5__[\"default\"](newColor);\r\n            this._saveValueChangeEvent(args.event);\r\n            this.applyColor();\r\n            this._refreshMarkup()\r\n        }\r\n    },\r\n    _validateHex: function(hex) {\r\n        return this._currentColor.isValidHex(hex) ? hex : this._currentColor.toHex()\r\n    },\r\n    _validateRgb: function() {\r\n        var r = this._rgbInputs[0].option(\"value\");\r\n        var g = this._rgbInputs[1].option(\"value\");\r\n        var b = this._rgbInputs[2].option(\"value\");\r\n        if (!this._currentColor.isValidRGB(r, g, b)) {\r\n            r = this._currentColor.r;\r\n            g = this._currentColor.g;\r\n            b = this._currentColor.b\r\n        }\r\n        return [r, g, b]\r\n    },\r\n    _refreshMarkup: function() {\r\n        this._placeHueScaleHandle();\r\n        this._placePaletteHandle();\r\n        this._updateColorParamsAndColorPreview();\r\n        this._$palette.css(\"backgroundColor\", this._currentColor.getPureColor().toHex());\r\n        if (this._$alphaChannelHandle) {\r\n            this._updateColorTransparency(this._currentColor.a);\r\n            this._placeAlphaChannelHandle()\r\n        }\r\n    },\r\n    _updateColorParamsAndColorPreview: function() {\r\n        this._suppressEditorsValueUpdating = true;\r\n        this._hexInput.option(\"value\", this._currentColor.toHex().replace(\"#\", \"\"));\r\n        this._rgbInputs[0].option(\"value\", this._currentColor.r);\r\n        this._rgbInputs[1].option(\"value\", this._currentColor.g);\r\n        this._rgbInputs[2].option(\"value\", this._currentColor.b);\r\n        this._suppressEditorsValueUpdating = false;\r\n        if (this.option(\"editAlphaChannel\")) {\r\n            this._makeCSSLinearGradient.call(this, this._$alphaChannelScale);\r\n            this._alphaChannelInput.option(\"value\", this._currentColor.a)\r\n        }\r\n    },\r\n    _optionChanged: function(args) {\r\n        var value = args.value;\r\n        switch (args.name) {\r\n            case \"value\":\r\n                this._setCurrentColor(value);\r\n                if (!this._updateByDrag) {\r\n                    this._refreshMarkup()\r\n                }\r\n                this._updateByDrag = false;\r\n                this.callBase(args);\r\n                break;\r\n            case \"matchValue\":\r\n                this._setBaseColor(value);\r\n                break;\r\n            case \"onEnterKeyPressed\":\r\n                this._initEnterKeyPressedAction();\r\n                break;\r\n            case \"editAlphaChannel\":\r\n                if (this._$colorPickerContainer) {\r\n                    this._renderHtmlRows(\"editAlphaChannel\");\r\n                    this._renderAlphaChannelElements()\r\n                }\r\n                break;\r\n            case \"keyStep\":\r\n                break;\r\n            case \"stylingMode\":\r\n                this._renderControls();\r\n                break;\r\n            default:\r\n                this.callBase(args)\r\n        }\r\n    }\r\n});\r\nObject(_core_component_registrator__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(\"dxColorView\", ColorView);\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (ColorView);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/devextreme/esm/ui/color_box/color_view.js\n");

/***/ }),

/***/ "./node_modules/devextreme/esm/ui/html_editor.js":
/*!*******************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/html_editor.js ***!
  \*******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _html_editor_ui_html_editor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./html_editor/ui.html_editor */ \"./node_modules/devextreme/esm/ui/html_editor/ui.html_editor.js\");\n/**\r\n * DevExtreme (esm/ui/html_editor.js)\r\n * Version: 21.2.7\r\n * Build date: Mon Apr 11 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (_html_editor_ui_html_editor__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGV2ZXh0cmVtZS9lc20vdWkvaHRtbF9lZGl0b3IuanM/ODUwMCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNzRDtBQUN2QyxrSUFBVSxFQUFDIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2RldmV4dHJlbWUvZXNtL3VpL2h0bWxfZWRpdG9yLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIERldkV4dHJlbWUgKGVzbS91aS9odG1sX2VkaXRvci5qcylcclxuICogVmVyc2lvbjogMjEuMi43XHJcbiAqIEJ1aWxkIGRhdGU6IE1vbiBBcHIgMTEgMjAyMlxyXG4gKlxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTIgLSAyMDIyIERldmVsb3BlciBFeHByZXNzIEluYy4gQUxMIFJJR0hUUyBSRVNFUlZFRFxyXG4gKiBSZWFkIGFib3V0IERldkV4dHJlbWUgbGljZW5zaW5nIGhlcmU6IGh0dHBzOi8vanMuZGV2ZXhwcmVzcy5jb20vTGljZW5zaW5nL1xyXG4gKi9cclxuaW1wb3J0IEh0bWxFZGl0b3IgZnJvbSBcIi4vaHRtbF9lZGl0b3IvdWkuaHRtbF9lZGl0b3JcIjtcclxuZXhwb3J0IGRlZmF1bHQgSHRtbEVkaXRvcjtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/devextreme/esm/ui/html_editor.js\n");

/***/ }),

/***/ "./node_modules/devextreme/esm/ui/html_editor/converterController.js":
/*!***************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/html_editor/converterController.js ***!
  \***************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/**\r\n * DevExtreme (esm/ui/html_editor/converterController.js)\r\n * Version: 21.2.7\r\n * Build date: Mon Apr 11 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nclass ConverterController {\r\n    constructor() {\r\n        this._converters = {}\r\n    }\r\n    addConverter(name, converter) {\r\n        this._converters[name] = converter\r\n    }\r\n    getConverter(name) {\r\n        return this._converters[name]\r\n    }\r\n}\r\nvar controller = new ConverterController;\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (controller);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGV2ZXh0cmVtZS9lc20vdWkvaHRtbF9lZGl0b3IvY29udmVydGVyQ29udHJvbGxlci5qcz8zNmFlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNlLHlFQUFVLEVBQUMiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZGV2ZXh0cmVtZS9lc20vdWkvaHRtbF9lZGl0b3IvY29udmVydGVyQ29udHJvbGxlci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBEZXZFeHRyZW1lIChlc20vdWkvaHRtbF9lZGl0b3IvY29udmVydGVyQ29udHJvbGxlci5qcylcclxuICogVmVyc2lvbjogMjEuMi43XHJcbiAqIEJ1aWxkIGRhdGU6IE1vbiBBcHIgMTEgMjAyMlxyXG4gKlxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTIgLSAyMDIyIERldmVsb3BlciBFeHByZXNzIEluYy4gQUxMIFJJR0hUUyBSRVNFUlZFRFxyXG4gKiBSZWFkIGFib3V0IERldkV4dHJlbWUgbGljZW5zaW5nIGhlcmU6IGh0dHBzOi8vanMuZGV2ZXhwcmVzcy5jb20vTGljZW5zaW5nL1xyXG4gKi9cclxuY2xhc3MgQ29udmVydGVyQ29udHJvbGxlciB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLl9jb252ZXJ0ZXJzID0ge31cclxuICAgIH1cclxuICAgIGFkZENvbnZlcnRlcihuYW1lLCBjb252ZXJ0ZXIpIHtcclxuICAgICAgICB0aGlzLl9jb252ZXJ0ZXJzW25hbWVdID0gY29udmVydGVyXHJcbiAgICB9XHJcbiAgICBnZXRDb252ZXJ0ZXIobmFtZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9jb252ZXJ0ZXJzW25hbWVdXHJcbiAgICB9XHJcbn1cclxudmFyIGNvbnRyb2xsZXIgPSBuZXcgQ29udmVydGVyQ29udHJvbGxlcjtcclxuZXhwb3J0IGRlZmF1bHQgY29udHJvbGxlcjtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/devextreme/esm/ui/html_editor/converterController.js\n");

/***/ }),

/***/ "./node_modules/devextreme/esm/ui/html_editor/converters/delta.js":
/*!************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/html_editor/converters/delta.js ***!
  \************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _converterController__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../converterController */ \"./node_modules/devextreme/esm/ui/html_editor/converterController.js\");\n/**\r\n * DevExtreme (esm/ui/html_editor/converters/delta.js)\r\n * Version: 21.2.7\r\n * Build date: Mon Apr 11 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\r\nclass DeltaConverter {\r\n    setQuillInstance(quillInstance) {\r\n        this.quillInstance = quillInstance\r\n    }\r\n    toHtml() {\r\n        if (!this.quillInstance) {\r\n            return\r\n        }\r\n        return this._isQuillEmpty() ? \"\" : this.quillInstance.getSemanticHTML(0, this.quillInstance.getLength() + 1)\r\n    }\r\n    _isQuillEmpty() {\r\n        var delta = this.quillInstance.getContents();\r\n        return 1 === delta.length() && this._isDeltaEmpty(delta)\r\n    }\r\n    _isDeltaEmpty(delta) {\r\n        return delta.reduce((__, _ref) => {\r\n            var {\r\n                insert: insert\r\n            } = _ref;\r\n            return -1 !== insert.indexOf(\"\\n\")\r\n        })\r\n    }\r\n}\r\n_converterController__WEBPACK_IMPORTED_MODULE_0__[\"default\"].addConverter(\"delta\", DeltaConverter);\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (DeltaConverter);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGV2ZXh0cmVtZS9lc20vdWkvaHRtbF9lZGl0b3IvY29udmVydGVycy9kZWx0YS5qcz82MDgwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ3lEO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsNERBQW1CO0FBQ0osNkVBQWMsRUFBQyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9kZXZleHRyZW1lL2VzbS91aS9odG1sX2VkaXRvci9jb252ZXJ0ZXJzL2RlbHRhLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIERldkV4dHJlbWUgKGVzbS91aS9odG1sX2VkaXRvci9jb252ZXJ0ZXJzL2RlbHRhLmpzKVxyXG4gKiBWZXJzaW9uOiAyMS4yLjdcclxuICogQnVpbGQgZGF0ZTogTW9uIEFwciAxMSAyMDIyXHJcbiAqXHJcbiAqIENvcHlyaWdodCAoYykgMjAxMiAtIDIwMjIgRGV2ZWxvcGVyIEV4cHJlc3MgSW5jLiBBTEwgUklHSFRTIFJFU0VSVkVEXHJcbiAqIFJlYWQgYWJvdXQgRGV2RXh0cmVtZSBsaWNlbnNpbmcgaGVyZTogaHR0cHM6Ly9qcy5kZXZleHByZXNzLmNvbS9MaWNlbnNpbmcvXHJcbiAqL1xyXG5pbXBvcnQgQ29udmVydGVyQ29udHJvbGxlciBmcm9tIFwiLi4vY29udmVydGVyQ29udHJvbGxlclwiO1xyXG5jbGFzcyBEZWx0YUNvbnZlcnRlciB7XHJcbiAgICBzZXRRdWlsbEluc3RhbmNlKHF1aWxsSW5zdGFuY2UpIHtcclxuICAgICAgICB0aGlzLnF1aWxsSW5zdGFuY2UgPSBxdWlsbEluc3RhbmNlXHJcbiAgICB9XHJcbiAgICB0b0h0bWwoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnF1aWxsSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLl9pc1F1aWxsRW1wdHkoKSA/IFwiXCIgOiB0aGlzLnF1aWxsSW5zdGFuY2UuZ2V0U2VtYW50aWNIVE1MKDAsIHRoaXMucXVpbGxJbnN0YW5jZS5nZXRMZW5ndGgoKSArIDEpXHJcbiAgICB9XHJcbiAgICBfaXNRdWlsbEVtcHR5KCkge1xyXG4gICAgICAgIHZhciBkZWx0YSA9IHRoaXMucXVpbGxJbnN0YW5jZS5nZXRDb250ZW50cygpO1xyXG4gICAgICAgIHJldHVybiAxID09PSBkZWx0YS5sZW5ndGgoKSAmJiB0aGlzLl9pc0RlbHRhRW1wdHkoZGVsdGEpXHJcbiAgICB9XHJcbiAgICBfaXNEZWx0YUVtcHR5KGRlbHRhKSB7XHJcbiAgICAgICAgcmV0dXJuIGRlbHRhLnJlZHVjZSgoX18sIF9yZWYpID0+IHtcclxuICAgICAgICAgICAgdmFyIHtcclxuICAgICAgICAgICAgICAgIGluc2VydDogaW5zZXJ0XHJcbiAgICAgICAgICAgIH0gPSBfcmVmO1xyXG4gICAgICAgICAgICByZXR1cm4gLTEgIT09IGluc2VydC5pbmRleE9mKFwiXFxuXCIpXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxufVxyXG5Db252ZXJ0ZXJDb250cm9sbGVyLmFkZENvbnZlcnRlcihcImRlbHRhXCIsIERlbHRhQ29udmVydGVyKTtcclxuZXhwb3J0IGRlZmF1bHQgRGVsdGFDb252ZXJ0ZXI7XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/devextreme/esm/ui/html_editor/converters/delta.js\n");

/***/ }),

/***/ "./node_modules/devextreme/esm/ui/html_editor/formats/align.js":
/*!*********************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/html_editor/formats/align.js ***!
  \*********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var devextreme_quill__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devextreme-quill */ \"./node_modules/devextreme-quill/dist/dx-quill.js\");\n/* harmony import */ var devextreme_quill__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(devextreme_quill__WEBPACK_IMPORTED_MODULE_0__);\n/**\r\n * DevExtreme (esm/ui/html_editor/formats/align.js)\r\n * Version: 21.2.7\r\n * Build date: Mon Apr 11 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\r\nvar AlignStyle = {};\r\nif (devextreme_quill__WEBPACK_IMPORTED_MODULE_0___default.a) {\r\n    AlignStyle = devextreme_quill__WEBPACK_IMPORTED_MODULE_0___default.a.import(\"attributors/style/align\");\r\n    AlignStyle.whitelist.push(\"left\")\r\n}\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (AlignStyle);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGV2ZXh0cmVtZS9lc20vdWkvaHRtbF9lZGl0b3IvZm9ybWF0cy9hbGlnbi5qcz9lZDc2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDcUM7QUFDckM7QUFDQSxJQUFJLHVEQUFLO0FBQ1QsaUJBQWlCLHVEQUFLO0FBQ3RCO0FBQ0E7QUFDZSx5RUFBVSxFQUFDIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2RldmV4dHJlbWUvZXNtL3VpL2h0bWxfZWRpdG9yL2Zvcm1hdHMvYWxpZ24uanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogRGV2RXh0cmVtZSAoZXNtL3VpL2h0bWxfZWRpdG9yL2Zvcm1hdHMvYWxpZ24uanMpXHJcbiAqIFZlcnNpb246IDIxLjIuN1xyXG4gKiBCdWlsZCBkYXRlOiBNb24gQXByIDExIDIwMjJcclxuICpcclxuICogQ29weXJpZ2h0IChjKSAyMDEyIC0gMjAyMiBEZXZlbG9wZXIgRXhwcmVzcyBJbmMuIEFMTCBSSUdIVFMgUkVTRVJWRURcclxuICogUmVhZCBhYm91dCBEZXZFeHRyZW1lIGxpY2Vuc2luZyBoZXJlOiBodHRwczovL2pzLmRldmV4cHJlc3MuY29tL0xpY2Vuc2luZy9cclxuICovXHJcbmltcG9ydCBRdWlsbCBmcm9tIFwiZGV2ZXh0cmVtZS1xdWlsbFwiO1xyXG52YXIgQWxpZ25TdHlsZSA9IHt9O1xyXG5pZiAoUXVpbGwpIHtcclxuICAgIEFsaWduU3R5bGUgPSBRdWlsbC5pbXBvcnQoXCJhdHRyaWJ1dG9ycy9zdHlsZS9hbGlnblwiKTtcclxuICAgIEFsaWduU3R5bGUud2hpdGVsaXN0LnB1c2goXCJsZWZ0XCIpXHJcbn1cclxuZXhwb3J0IGRlZmF1bHQgQWxpZ25TdHlsZTtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/devextreme/esm/ui/html_editor/formats/align.js\n");

/***/ }),

/***/ "./node_modules/devextreme/esm/ui/html_editor/formats/font.js":
/*!********************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/html_editor/formats/font.js ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var devextreme_quill__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devextreme-quill */ \"./node_modules/devextreme-quill/dist/dx-quill.js\");\n/* harmony import */ var devextreme_quill__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(devextreme_quill__WEBPACK_IMPORTED_MODULE_0__);\n/**\r\n * DevExtreme (esm/ui/html_editor/formats/font.js)\r\n * Version: 21.2.7\r\n * Build date: Mon Apr 11 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\r\nvar FontStyle = {};\r\nif (devextreme_quill__WEBPACK_IMPORTED_MODULE_0___default.a) {\r\n    FontStyle = devextreme_quill__WEBPACK_IMPORTED_MODULE_0___default.a.import(\"attributors/style/font\");\r\n    FontStyle.whitelist = null\r\n}\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (FontStyle);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGV2ZXh0cmVtZS9lc20vdWkvaHRtbF9lZGl0b3IvZm9ybWF0cy9mb250LmpzP2JhYWYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNxQztBQUNyQztBQUNBLElBQUksdURBQUs7QUFDVCxnQkFBZ0IsdURBQUs7QUFDckI7QUFDQTtBQUNlLHdFQUFTLEVBQUMiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZGV2ZXh0cmVtZS9lc20vdWkvaHRtbF9lZGl0b3IvZm9ybWF0cy9mb250LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIERldkV4dHJlbWUgKGVzbS91aS9odG1sX2VkaXRvci9mb3JtYXRzL2ZvbnQuanMpXHJcbiAqIFZlcnNpb246IDIxLjIuN1xyXG4gKiBCdWlsZCBkYXRlOiBNb24gQXByIDExIDIwMjJcclxuICpcclxuICogQ29weXJpZ2h0IChjKSAyMDEyIC0gMjAyMiBEZXZlbG9wZXIgRXhwcmVzcyBJbmMuIEFMTCBSSUdIVFMgUkVTRVJWRURcclxuICogUmVhZCBhYm91dCBEZXZFeHRyZW1lIGxpY2Vuc2luZyBoZXJlOiBodHRwczovL2pzLmRldmV4cHJlc3MuY29tL0xpY2Vuc2luZy9cclxuICovXHJcbmltcG9ydCBRdWlsbCBmcm9tIFwiZGV2ZXh0cmVtZS1xdWlsbFwiO1xyXG52YXIgRm9udFN0eWxlID0ge307XHJcbmlmIChRdWlsbCkge1xyXG4gICAgRm9udFN0eWxlID0gUXVpbGwuaW1wb3J0KFwiYXR0cmlidXRvcnMvc3R5bGUvZm9udFwiKTtcclxuICAgIEZvbnRTdHlsZS53aGl0ZWxpc3QgPSBudWxsXHJcbn1cclxuZXhwb3J0IGRlZmF1bHQgRm9udFN0eWxlO1xyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/devextreme/esm/ui/html_editor/formats/font.js\n");

/***/ }),

/***/ "./node_modules/devextreme/esm/ui/html_editor/formats/image.js":
/*!*********************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/html_editor/formats/image.js ***!
  \*********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var devextreme_quill__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devextreme-quill */ \"./node_modules/devextreme-quill/dist/dx-quill.js\");\n/* harmony import */ var devextreme_quill__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(devextreme_quill__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _core_utils_type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core/utils/type */ \"./node_modules/devextreme/esm/core/utils/type.js\");\n/**\r\n * DevExtreme (esm/ui/html_editor/formats/image.js)\r\n * Version: 21.2.7\r\n * Build date: Mon Apr 11 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\r\n\r\nvar ExtImage = {};\r\nif (devextreme_quill__WEBPACK_IMPORTED_MODULE_0___default.a) {\r\n    var Image = devextreme_quill__WEBPACK_IMPORTED_MODULE_0___default.a.import(\"formats/image\");\r\n    ExtImage = class extends Image {\r\n        static create(data) {\r\n            var SRC = data && data.src || data;\r\n            var node = super.create(SRC);\r\n            if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_1__[\"isObject\"])(data)) {\r\n                var setAttribute = (attr, value) => {\r\n                    data[attr] && node.setAttribute(attr, value)\r\n                };\r\n                setAttribute(\"alt\", data.alt);\r\n                setAttribute(\"width\", data.width);\r\n                setAttribute(\"height\", data.height)\r\n            }\r\n            return node\r\n        }\r\n        static formats(domNode) {\r\n            var formats = super.formats(domNode);\r\n            formats.imageSrc = domNode.getAttribute(\"src\");\r\n            return formats\r\n        }\r\n        formats() {\r\n            var formats = super.formats();\r\n            var floatValue = this.domNode.style.float;\r\n            if (floatValue) {\r\n                formats.float = floatValue\r\n            }\r\n            return formats\r\n        }\r\n        format(name, value) {\r\n            if (\"float\" === name) {\r\n                this.domNode.style[name] = value\r\n            } else {\r\n                super.format(name, value)\r\n            }\r\n        }\r\n        static value(domNode) {\r\n            return {\r\n                src: domNode.getAttribute(\"src\"),\r\n                width: domNode.getAttribute(\"width\"),\r\n                height: domNode.getAttribute(\"height\"),\r\n                alt: domNode.getAttribute(\"alt\")\r\n            }\r\n        }\r\n    };\r\n    ExtImage.blotName = \"extendedImage\"\r\n}\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (ExtImage);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGV2ZXh0cmVtZS9lc20vdWkvaHRtbF9lZGl0b3IvZm9ybWF0cy9pbWFnZS5qcz81ZGI5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNxQztBQUdIO0FBQ2xDO0FBQ0EsSUFBSSx1REFBSztBQUNULGdCQUFnQix1REFBSztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixpRUFBUTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ2UsdUVBQVEsRUFBQyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9kZXZleHRyZW1lL2VzbS91aS9odG1sX2VkaXRvci9mb3JtYXRzL2ltYWdlLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIERldkV4dHJlbWUgKGVzbS91aS9odG1sX2VkaXRvci9mb3JtYXRzL2ltYWdlLmpzKVxyXG4gKiBWZXJzaW9uOiAyMS4yLjdcclxuICogQnVpbGQgZGF0ZTogTW9uIEFwciAxMSAyMDIyXHJcbiAqXHJcbiAqIENvcHlyaWdodCAoYykgMjAxMiAtIDIwMjIgRGV2ZWxvcGVyIEV4cHJlc3MgSW5jLiBBTEwgUklHSFRTIFJFU0VSVkVEXHJcbiAqIFJlYWQgYWJvdXQgRGV2RXh0cmVtZSBsaWNlbnNpbmcgaGVyZTogaHR0cHM6Ly9qcy5kZXZleHByZXNzLmNvbS9MaWNlbnNpbmcvXHJcbiAqL1xyXG5pbXBvcnQgUXVpbGwgZnJvbSBcImRldmV4dHJlbWUtcXVpbGxcIjtcclxuaW1wb3J0IHtcclxuICAgIGlzT2JqZWN0XHJcbn0gZnJvbSBcIi4uLy4uLy4uL2NvcmUvdXRpbHMvdHlwZVwiO1xyXG52YXIgRXh0SW1hZ2UgPSB7fTtcclxuaWYgKFF1aWxsKSB7XHJcbiAgICB2YXIgSW1hZ2UgPSBRdWlsbC5pbXBvcnQoXCJmb3JtYXRzL2ltYWdlXCIpO1xyXG4gICAgRXh0SW1hZ2UgPSBjbGFzcyBleHRlbmRzIEltYWdlIHtcclxuICAgICAgICBzdGF0aWMgY3JlYXRlKGRhdGEpIHtcclxuICAgICAgICAgICAgdmFyIFNSQyA9IGRhdGEgJiYgZGF0YS5zcmMgfHwgZGF0YTtcclxuICAgICAgICAgICAgdmFyIG5vZGUgPSBzdXBlci5jcmVhdGUoU1JDKTtcclxuICAgICAgICAgICAgaWYgKGlzT2JqZWN0KGRhdGEpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgc2V0QXR0cmlidXRlID0gKGF0dHIsIHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YVthdHRyXSAmJiBub2RlLnNldEF0dHJpYnV0ZShhdHRyLCB2YWx1ZSlcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICBzZXRBdHRyaWJ1dGUoXCJhbHRcIiwgZGF0YS5hbHQpO1xyXG4gICAgICAgICAgICAgICAgc2V0QXR0cmlidXRlKFwid2lkdGhcIiwgZGF0YS53aWR0aCk7XHJcbiAgICAgICAgICAgICAgICBzZXRBdHRyaWJ1dGUoXCJoZWlnaHRcIiwgZGF0YS5oZWlnaHQpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG5vZGVcclxuICAgICAgICB9XHJcbiAgICAgICAgc3RhdGljIGZvcm1hdHMoZG9tTm9kZSkge1xyXG4gICAgICAgICAgICB2YXIgZm9ybWF0cyA9IHN1cGVyLmZvcm1hdHMoZG9tTm9kZSk7XHJcbiAgICAgICAgICAgIGZvcm1hdHMuaW1hZ2VTcmMgPSBkb21Ob2RlLmdldEF0dHJpYnV0ZShcInNyY1wiKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZvcm1hdHNcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9ybWF0cygpIHtcclxuICAgICAgICAgICAgdmFyIGZvcm1hdHMgPSBzdXBlci5mb3JtYXRzKCk7XHJcbiAgICAgICAgICAgIHZhciBmbG9hdFZhbHVlID0gdGhpcy5kb21Ob2RlLnN0eWxlLmZsb2F0O1xyXG4gICAgICAgICAgICBpZiAoZmxvYXRWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgZm9ybWF0cy5mbG9hdCA9IGZsb2F0VmFsdWVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZm9ybWF0c1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3JtYXQobmFtZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKFwiZmxvYXRcIiA9PT0gbmFtZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kb21Ob2RlLnN0eWxlW25hbWVdID0gdmFsdWVcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHN1cGVyLmZvcm1hdChuYW1lLCB2YWx1ZSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBzdGF0aWMgdmFsdWUoZG9tTm9kZSkge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgc3JjOiBkb21Ob2RlLmdldEF0dHJpYnV0ZShcInNyY1wiKSxcclxuICAgICAgICAgICAgICAgIHdpZHRoOiBkb21Ob2RlLmdldEF0dHJpYnV0ZShcIndpZHRoXCIpLFxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBkb21Ob2RlLmdldEF0dHJpYnV0ZShcImhlaWdodFwiKSxcclxuICAgICAgICAgICAgICAgIGFsdDogZG9tTm9kZS5nZXRBdHRyaWJ1dGUoXCJhbHRcIilcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBFeHRJbWFnZS5ibG90TmFtZSA9IFwiZXh0ZW5kZWRJbWFnZVwiXHJcbn1cclxuZXhwb3J0IGRlZmF1bHQgRXh0SW1hZ2U7XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/devextreme/esm/ui/html_editor/formats/image.js\n");

/***/ }),

/***/ "./node_modules/devextreme/esm/ui/html_editor/formats/link.js":
/*!********************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/html_editor/formats/link.js ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var devextreme_quill__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devextreme-quill */ \"./node_modules/devextreme-quill/dist/dx-quill.js\");\n/* harmony import */ var devextreme_quill__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(devextreme_quill__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _core_utils_type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core/utils/type */ \"./node_modules/devextreme/esm/core/utils/type.js\");\n/**\r\n * DevExtreme (esm/ui/html_editor/formats/link.js)\r\n * Version: 21.2.7\r\n * Build date: Mon Apr 11 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\r\n\r\nvar ExtLink = {};\r\nif (devextreme_quill__WEBPACK_IMPORTED_MODULE_0___default.a) {\r\n    var Link = devextreme_quill__WEBPACK_IMPORTED_MODULE_0___default.a.import(\"formats/link\");\r\n    ExtLink = class ExtLink extends Link {\r\n        static create(data) {\r\n            var HREF = data && data.href || data;\r\n            var node = super.create(HREF);\r\n            if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_1__[\"isObject\"])(data)) {\r\n                if (data.text) {\r\n                    node.innerText = data.text\r\n                }\r\n                if (!data.target) {\r\n                    node.removeAttribute(\"target\")\r\n                }\r\n            }\r\n            return node\r\n        }\r\n        static formats(domNode) {\r\n            return {\r\n                href: domNode.getAttribute(\"href\"),\r\n                target: domNode.getAttribute(\"target\")\r\n            }\r\n        }\r\n        formats() {\r\n            var formats = super.formats();\r\n            var {\r\n                href: href,\r\n                target: target\r\n            } = ExtLink.formats(this.domNode);\r\n            formats.link = href;\r\n            formats.target = target;\r\n            return formats\r\n        }\r\n        format(name, value) {\r\n            if (\"link\" === name && Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_1__[\"isObject\"])(value)) {\r\n                if (value.text) {\r\n                    this.domNode.innerText = value.text\r\n                }\r\n                if (value.target) {\r\n                    this.domNode.setAttribute(\"target\", \"_blank\")\r\n                } else {\r\n                    this.domNode.removeAttribute(\"target\")\r\n                }\r\n                this.domNode.setAttribute(\"href\", value.href)\r\n            } else {\r\n                super.format(name, value)\r\n            }\r\n        }\r\n        static value(domNode) {\r\n            return {\r\n                href: domNode.getAttribute(\"href\"),\r\n                text: domNode.innerText,\r\n                target: !!domNode.getAttribute(\"target\")\r\n            }\r\n        }\r\n    }\r\n}\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (ExtLink);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGV2ZXh0cmVtZS9lc20vdWkvaHRtbF9lZGl0b3IvZm9ybWF0cy9saW5rLmpzPzg0YjciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ3FDO0FBR0g7QUFDbEM7QUFDQSxJQUFJLHVEQUFLO0FBQ1QsZUFBZSx1REFBSztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixpRUFBUTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsaUVBQVE7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ2Usc0VBQU8sRUFBQyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9kZXZleHRyZW1lL2VzbS91aS9odG1sX2VkaXRvci9mb3JtYXRzL2xpbmsuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogRGV2RXh0cmVtZSAoZXNtL3VpL2h0bWxfZWRpdG9yL2Zvcm1hdHMvbGluay5qcylcclxuICogVmVyc2lvbjogMjEuMi43XHJcbiAqIEJ1aWxkIGRhdGU6IE1vbiBBcHIgMTEgMjAyMlxyXG4gKlxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTIgLSAyMDIyIERldmVsb3BlciBFeHByZXNzIEluYy4gQUxMIFJJR0hUUyBSRVNFUlZFRFxyXG4gKiBSZWFkIGFib3V0IERldkV4dHJlbWUgbGljZW5zaW5nIGhlcmU6IGh0dHBzOi8vanMuZGV2ZXhwcmVzcy5jb20vTGljZW5zaW5nL1xyXG4gKi9cclxuaW1wb3J0IFF1aWxsIGZyb20gXCJkZXZleHRyZW1lLXF1aWxsXCI7XHJcbmltcG9ydCB7XHJcbiAgICBpc09iamVjdFxyXG59IGZyb20gXCIuLi8uLi8uLi9jb3JlL3V0aWxzL3R5cGVcIjtcclxudmFyIEV4dExpbmsgPSB7fTtcclxuaWYgKFF1aWxsKSB7XHJcbiAgICB2YXIgTGluayA9IFF1aWxsLmltcG9ydChcImZvcm1hdHMvbGlua1wiKTtcclxuICAgIEV4dExpbmsgPSBjbGFzcyBFeHRMaW5rIGV4dGVuZHMgTGluayB7XHJcbiAgICAgICAgc3RhdGljIGNyZWF0ZShkYXRhKSB7XHJcbiAgICAgICAgICAgIHZhciBIUkVGID0gZGF0YSAmJiBkYXRhLmhyZWYgfHwgZGF0YTtcclxuICAgICAgICAgICAgdmFyIG5vZGUgPSBzdXBlci5jcmVhdGUoSFJFRik7XHJcbiAgICAgICAgICAgIGlmIChpc09iamVjdChkYXRhKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGRhdGEudGV4dCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5vZGUuaW5uZXJUZXh0ID0gZGF0YS50ZXh0XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoIWRhdGEudGFyZ2V0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoXCJ0YXJnZXRcIilcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gbm9kZVxyXG4gICAgICAgIH1cclxuICAgICAgICBzdGF0aWMgZm9ybWF0cyhkb21Ob2RlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBocmVmOiBkb21Ob2RlLmdldEF0dHJpYnV0ZShcImhyZWZcIiksXHJcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IGRvbU5vZGUuZ2V0QXR0cmlidXRlKFwidGFyZ2V0XCIpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZm9ybWF0cygpIHtcclxuICAgICAgICAgICAgdmFyIGZvcm1hdHMgPSBzdXBlci5mb3JtYXRzKCk7XHJcbiAgICAgICAgICAgIHZhciB7XHJcbiAgICAgICAgICAgICAgICBocmVmOiBocmVmLFxyXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiB0YXJnZXRcclxuICAgICAgICAgICAgfSA9IEV4dExpbmsuZm9ybWF0cyh0aGlzLmRvbU5vZGUpO1xyXG4gICAgICAgICAgICBmb3JtYXRzLmxpbmsgPSBocmVmO1xyXG4gICAgICAgICAgICBmb3JtYXRzLnRhcmdldCA9IHRhcmdldDtcclxuICAgICAgICAgICAgcmV0dXJuIGZvcm1hdHNcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9ybWF0KG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmIChcImxpbmtcIiA9PT0gbmFtZSAmJiBpc09iamVjdCh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZS50ZXh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kb21Ob2RlLmlubmVyVGV4dCA9IHZhbHVlLnRleHRcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZS50YXJnZXQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRvbU5vZGUuc2V0QXR0cmlidXRlKFwidGFyZ2V0XCIsIFwiX2JsYW5rXCIpXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZG9tTm9kZS5yZW1vdmVBdHRyaWJ1dGUoXCJ0YXJnZXRcIilcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuZG9tTm9kZS5zZXRBdHRyaWJ1dGUoXCJocmVmXCIsIHZhbHVlLmhyZWYpXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzdXBlci5mb3JtYXQobmFtZSwgdmFsdWUpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgc3RhdGljIHZhbHVlKGRvbU5vZGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIGhyZWY6IGRvbU5vZGUuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSxcclxuICAgICAgICAgICAgICAgIHRleHQ6IGRvbU5vZGUuaW5uZXJUZXh0LFxyXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiAhIWRvbU5vZGUuZ2V0QXR0cmlidXRlKFwidGFyZ2V0XCIpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0IGRlZmF1bHQgRXh0TGluaztcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/devextreme/esm/ui/html_editor/formats/link.js\n");

/***/ }),

/***/ "./node_modules/devextreme/esm/ui/html_editor/formats/mention.js":
/*!***********************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/html_editor/formats/mention.js ***!
  \***********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var devextreme_quill__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devextreme-quill */ \"./node_modules/devextreme-quill/dist/dx-quill.js\");\n/* harmony import */ var devextreme_quill__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(devextreme_quill__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core/renderer */ \"./node_modules/devextreme/esm/core/renderer.js\");\n/**\r\n * DevExtreme (esm/ui/html_editor/formats/mention.js)\r\n * Version: 21.2.7\r\n * Build date: Mon Apr 11 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\r\n\r\nvar Mention = {};\r\nif (devextreme_quill__WEBPACK_IMPORTED_MODULE_0___default.a) {\r\n    var Embed = devextreme_quill__WEBPACK_IMPORTED_MODULE_0___default.a.import(\"blots/embed\");\r\n    var MENTION_CLASS = \"dx-mention\";\r\n    Mention = class extends Embed {\r\n        static create(data) {\r\n            var node = super.create();\r\n            node.setAttribute(\"spellcheck\", false);\r\n            node.dataset.marker = data.marker;\r\n            node.dataset.mentionValue = data.value;\r\n            node.dataset.id = data.id;\r\n            this.renderContent(node, data);\r\n            return node\r\n        }\r\n        static value(node) {\r\n            return {\r\n                marker: node.dataset.marker,\r\n                id: node.dataset.id,\r\n                value: node.dataset.mentionValue\r\n            }\r\n        }\r\n        static renderContent(node, data) {\r\n            var template = this._templates.get(data.marker);\r\n            if (template) {\r\n                template.render({\r\n                    model: data,\r\n                    container: node\r\n                })\r\n            } else {\r\n                this.baseContentRender(node, data)\r\n            }\r\n        }\r\n        static baseContentRender(node, data) {\r\n            var $marker = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\"<span>\").text(data.marker);\r\n            Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(node).append($marker).append(data.value)\r\n        }\r\n        static addTemplate(marker, template) {\r\n            this._templates.set(marker, template)\r\n        }\r\n        static removeTemplate(marker) {\r\n            this._templates.delete(marker)\r\n        }\r\n    };\r\n    Mention.blotName = \"mention\";\r\n    Mention.tagName = \"span\";\r\n    Mention.className = MENTION_CLASS;\r\n    Mention._templates = new Map\r\n}\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (Mention);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGV2ZXh0cmVtZS9lc20vdWkvaHRtbF9lZGl0b3IvZm9ybWF0cy9tZW50aW9uLmpzPzliMjciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ3FDO0FBQ0U7QUFDdkM7QUFDQSxJQUFJLHVEQUFLO0FBQ1QsZ0JBQWdCLHVEQUFLO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsOERBQUM7QUFDM0IsWUFBWSw4REFBQztBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ2Usc0VBQU8sRUFBQyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9kZXZleHRyZW1lL2VzbS91aS9odG1sX2VkaXRvci9mb3JtYXRzL21lbnRpb24uanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogRGV2RXh0cmVtZSAoZXNtL3VpL2h0bWxfZWRpdG9yL2Zvcm1hdHMvbWVudGlvbi5qcylcclxuICogVmVyc2lvbjogMjEuMi43XHJcbiAqIEJ1aWxkIGRhdGU6IE1vbiBBcHIgMTEgMjAyMlxyXG4gKlxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTIgLSAyMDIyIERldmVsb3BlciBFeHByZXNzIEluYy4gQUxMIFJJR0hUUyBSRVNFUlZFRFxyXG4gKiBSZWFkIGFib3V0IERldkV4dHJlbWUgbGljZW5zaW5nIGhlcmU6IGh0dHBzOi8vanMuZGV2ZXhwcmVzcy5jb20vTGljZW5zaW5nL1xyXG4gKi9cclxuaW1wb3J0IFF1aWxsIGZyb20gXCJkZXZleHRyZW1lLXF1aWxsXCI7XHJcbmltcG9ydCAkIGZyb20gXCIuLi8uLi8uLi9jb3JlL3JlbmRlcmVyXCI7XHJcbnZhciBNZW50aW9uID0ge307XHJcbmlmIChRdWlsbCkge1xyXG4gICAgdmFyIEVtYmVkID0gUXVpbGwuaW1wb3J0KFwiYmxvdHMvZW1iZWRcIik7XHJcbiAgICB2YXIgTUVOVElPTl9DTEFTUyA9IFwiZHgtbWVudGlvblwiO1xyXG4gICAgTWVudGlvbiA9IGNsYXNzIGV4dGVuZHMgRW1iZWQge1xyXG4gICAgICAgIHN0YXRpYyBjcmVhdGUoZGF0YSkge1xyXG4gICAgICAgICAgICB2YXIgbm9kZSA9IHN1cGVyLmNyZWF0ZSgpO1xyXG4gICAgICAgICAgICBub2RlLnNldEF0dHJpYnV0ZShcInNwZWxsY2hlY2tcIiwgZmFsc2UpO1xyXG4gICAgICAgICAgICBub2RlLmRhdGFzZXQubWFya2VyID0gZGF0YS5tYXJrZXI7XHJcbiAgICAgICAgICAgIG5vZGUuZGF0YXNldC5tZW50aW9uVmFsdWUgPSBkYXRhLnZhbHVlO1xyXG4gICAgICAgICAgICBub2RlLmRhdGFzZXQuaWQgPSBkYXRhLmlkO1xyXG4gICAgICAgICAgICB0aGlzLnJlbmRlckNvbnRlbnQobm9kZSwgZGF0YSk7XHJcbiAgICAgICAgICAgIHJldHVybiBub2RlXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHN0YXRpYyB2YWx1ZShub2RlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBtYXJrZXI6IG5vZGUuZGF0YXNldC5tYXJrZXIsXHJcbiAgICAgICAgICAgICAgICBpZDogbm9kZS5kYXRhc2V0LmlkLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IG5vZGUuZGF0YXNldC5tZW50aW9uVmFsdWVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBzdGF0aWMgcmVuZGVyQ29udGVudChub2RlLCBkYXRhKSB7XHJcbiAgICAgICAgICAgIHZhciB0ZW1wbGF0ZSA9IHRoaXMuX3RlbXBsYXRlcy5nZXQoZGF0YS5tYXJrZXIpO1xyXG4gICAgICAgICAgICBpZiAodGVtcGxhdGUpIHtcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlLnJlbmRlcih7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kZWw6IGRhdGEsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyOiBub2RlXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5iYXNlQ29udGVudFJlbmRlcihub2RlLCBkYXRhKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHN0YXRpYyBiYXNlQ29udGVudFJlbmRlcihub2RlLCBkYXRhKSB7XHJcbiAgICAgICAgICAgIHZhciAkbWFya2VyID0gJChcIjxzcGFuPlwiKS50ZXh0KGRhdGEubWFya2VyKTtcclxuICAgICAgICAgICAgJChub2RlKS5hcHBlbmQoJG1hcmtlcikuYXBwZW5kKGRhdGEudmFsdWUpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHN0YXRpYyBhZGRUZW1wbGF0ZShtYXJrZXIsIHRlbXBsYXRlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3RlbXBsYXRlcy5zZXQobWFya2VyLCB0ZW1wbGF0ZSlcclxuICAgICAgICB9XHJcbiAgICAgICAgc3RhdGljIHJlbW92ZVRlbXBsYXRlKG1hcmtlcikge1xyXG4gICAgICAgICAgICB0aGlzLl90ZW1wbGF0ZXMuZGVsZXRlKG1hcmtlcilcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgTWVudGlvbi5ibG90TmFtZSA9IFwibWVudGlvblwiO1xyXG4gICAgTWVudGlvbi50YWdOYW1lID0gXCJzcGFuXCI7XHJcbiAgICBNZW50aW9uLmNsYXNzTmFtZSA9IE1FTlRJT05fQ0xBU1M7XHJcbiAgICBNZW50aW9uLl90ZW1wbGF0ZXMgPSBuZXcgTWFwXHJcbn1cclxuZXhwb3J0IGRlZmF1bHQgTWVudGlvbjtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/devextreme/esm/ui/html_editor/formats/mention.js\n");

/***/ }),

/***/ "./node_modules/devextreme/esm/ui/html_editor/formats/size.js":
/*!********************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/html_editor/formats/size.js ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var devextreme_quill__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devextreme-quill */ \"./node_modules/devextreme-quill/dist/dx-quill.js\");\n/* harmony import */ var devextreme_quill__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(devextreme_quill__WEBPACK_IMPORTED_MODULE_0__);\n/**\r\n * DevExtreme (esm/ui/html_editor/formats/size.js)\r\n * Version: 21.2.7\r\n * Build date: Mon Apr 11 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\r\nvar SizeStyle = {};\r\nif (devextreme_quill__WEBPACK_IMPORTED_MODULE_0___default.a) {\r\n    SizeStyle = devextreme_quill__WEBPACK_IMPORTED_MODULE_0___default.a.import(\"attributors/style/size\");\r\n    SizeStyle.whitelist = null\r\n}\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (SizeStyle);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGV2ZXh0cmVtZS9lc20vdWkvaHRtbF9lZGl0b3IvZm9ybWF0cy9zaXplLmpzP2E3OTciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNxQztBQUNyQztBQUNBLElBQUksdURBQUs7QUFDVCxnQkFBZ0IsdURBQUs7QUFDckI7QUFDQTtBQUNlLHdFQUFTLEVBQUMiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZGV2ZXh0cmVtZS9lc20vdWkvaHRtbF9lZGl0b3IvZm9ybWF0cy9zaXplLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIERldkV4dHJlbWUgKGVzbS91aS9odG1sX2VkaXRvci9mb3JtYXRzL3NpemUuanMpXHJcbiAqIFZlcnNpb246IDIxLjIuN1xyXG4gKiBCdWlsZCBkYXRlOiBNb24gQXByIDExIDIwMjJcclxuICpcclxuICogQ29weXJpZ2h0IChjKSAyMDEyIC0gMjAyMiBEZXZlbG9wZXIgRXhwcmVzcyBJbmMuIEFMTCBSSUdIVFMgUkVTRVJWRURcclxuICogUmVhZCBhYm91dCBEZXZFeHRyZW1lIGxpY2Vuc2luZyBoZXJlOiBodHRwczovL2pzLmRldmV4cHJlc3MuY29tL0xpY2Vuc2luZy9cclxuICovXHJcbmltcG9ydCBRdWlsbCBmcm9tIFwiZGV2ZXh0cmVtZS1xdWlsbFwiO1xyXG52YXIgU2l6ZVN0eWxlID0ge307XHJcbmlmIChRdWlsbCkge1xyXG4gICAgU2l6ZVN0eWxlID0gUXVpbGwuaW1wb3J0KFwiYXR0cmlidXRvcnMvc3R5bGUvc2l6ZVwiKTtcclxuICAgIFNpemVTdHlsZS53aGl0ZWxpc3QgPSBudWxsXHJcbn1cclxuZXhwb3J0IGRlZmF1bHQgU2l6ZVN0eWxlO1xyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/devextreme/esm/ui/html_editor/formats/size.js\n");

/***/ }),

/***/ "./node_modules/devextreme/esm/ui/html_editor/formats/variable.js":
/*!************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/html_editor/formats/variable.js ***!
  \************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var devextreme_quill__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devextreme-quill */ \"./node_modules/devextreme-quill/dist/dx-quill.js\");\n/* harmony import */ var devextreme_quill__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(devextreme_quill__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _core_utils_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core/utils/common */ \"./node_modules/devextreme/esm/core/utils/common.js\");\n/* harmony import */ var _core_utils_extend__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../core/utils/extend */ \"./node_modules/devextreme/esm/core/utils/extend.js\");\n/**\r\n * DevExtreme (esm/ui/html_editor/formats/variable.js)\r\n * Version: 21.2.7\r\n * Build date: Mon Apr 11 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\r\n\r\n\r\nvar Variable = {};\r\nif (devextreme_quill__WEBPACK_IMPORTED_MODULE_0___default.a) {\r\n    var Embed = devextreme_quill__WEBPACK_IMPORTED_MODULE_0___default.a.import(\"blots/embed\");\r\n    var VARIABLE_CLASS = \"dx-variable\";\r\n    Variable = class extends Embed {\r\n        static create(data) {\r\n            var node = super.create();\r\n            var startEscapeChar;\r\n            var endEscapeChar;\r\n            var text = data.value;\r\n            if (Array.isArray(data.escapeChar)) {\r\n                startEscapeChar = Object(_core_utils_common__WEBPACK_IMPORTED_MODULE_1__[\"ensureDefined\"])(data.escapeChar[0], \"\");\r\n                endEscapeChar = Object(_core_utils_common__WEBPACK_IMPORTED_MODULE_1__[\"ensureDefined\"])(data.escapeChar[1], \"\")\r\n            } else {\r\n                startEscapeChar = endEscapeChar = data.escapeChar\r\n            }\r\n            node.innerText = startEscapeChar + text + endEscapeChar;\r\n            node.dataset.varStartEscChar = startEscapeChar;\r\n            node.dataset.varEndEscChar = endEscapeChar;\r\n            node.dataset.varValue = data.value;\r\n            return node\r\n        }\r\n        static value(node) {\r\n            return Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_2__[\"extend\"])({}, {\r\n                value: node.dataset.varValue,\r\n                escapeChar: [node.dataset.varStartEscChar || \"\", node.dataset.varEndEscChar || \"\"]\r\n            })\r\n        }\r\n    };\r\n    Variable.blotName = \"variable\";\r\n    Variable.tagName = \"span\";\r\n    Variable.className = VARIABLE_CLASS\r\n}\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (Variable);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGV2ZXh0cmVtZS9lc20vdWkvaHRtbF9lZGl0b3IvZm9ybWF0cy92YXJpYWJsZS5qcz8yZWRmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ3FDO0FBR0Q7QUFHQTtBQUNwQztBQUNBLElBQUksdURBQUs7QUFDVCxnQkFBZ0IsdURBQUs7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyx3RUFBYTtBQUMvQyxnQ0FBZ0Msd0VBQWE7QUFDN0MsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixpRUFBTSxHQUFHO0FBQzVCO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ2UsdUVBQVEsRUFBQyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9kZXZleHRyZW1lL2VzbS91aS9odG1sX2VkaXRvci9mb3JtYXRzL3ZhcmlhYmxlLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIERldkV4dHJlbWUgKGVzbS91aS9odG1sX2VkaXRvci9mb3JtYXRzL3ZhcmlhYmxlLmpzKVxyXG4gKiBWZXJzaW9uOiAyMS4yLjdcclxuICogQnVpbGQgZGF0ZTogTW9uIEFwciAxMSAyMDIyXHJcbiAqXHJcbiAqIENvcHlyaWdodCAoYykgMjAxMiAtIDIwMjIgRGV2ZWxvcGVyIEV4cHJlc3MgSW5jLiBBTEwgUklHSFRTIFJFU0VSVkVEXHJcbiAqIFJlYWQgYWJvdXQgRGV2RXh0cmVtZSBsaWNlbnNpbmcgaGVyZTogaHR0cHM6Ly9qcy5kZXZleHByZXNzLmNvbS9MaWNlbnNpbmcvXHJcbiAqL1xyXG5pbXBvcnQgUXVpbGwgZnJvbSBcImRldmV4dHJlbWUtcXVpbGxcIjtcclxuaW1wb3J0IHtcclxuICAgIGVuc3VyZURlZmluZWRcclxufSBmcm9tIFwiLi4vLi4vLi4vY29yZS91dGlscy9jb21tb25cIjtcclxuaW1wb3J0IHtcclxuICAgIGV4dGVuZFxyXG59IGZyb20gXCIuLi8uLi8uLi9jb3JlL3V0aWxzL2V4dGVuZFwiO1xyXG52YXIgVmFyaWFibGUgPSB7fTtcclxuaWYgKFF1aWxsKSB7XHJcbiAgICB2YXIgRW1iZWQgPSBRdWlsbC5pbXBvcnQoXCJibG90cy9lbWJlZFwiKTtcclxuICAgIHZhciBWQVJJQUJMRV9DTEFTUyA9IFwiZHgtdmFyaWFibGVcIjtcclxuICAgIFZhcmlhYmxlID0gY2xhc3MgZXh0ZW5kcyBFbWJlZCB7XHJcbiAgICAgICAgc3RhdGljIGNyZWF0ZShkYXRhKSB7XHJcbiAgICAgICAgICAgIHZhciBub2RlID0gc3VwZXIuY3JlYXRlKCk7XHJcbiAgICAgICAgICAgIHZhciBzdGFydEVzY2FwZUNoYXI7XHJcbiAgICAgICAgICAgIHZhciBlbmRFc2NhcGVDaGFyO1xyXG4gICAgICAgICAgICB2YXIgdGV4dCA9IGRhdGEudmFsdWU7XHJcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGRhdGEuZXNjYXBlQ2hhcikpIHtcclxuICAgICAgICAgICAgICAgIHN0YXJ0RXNjYXBlQ2hhciA9IGVuc3VyZURlZmluZWQoZGF0YS5lc2NhcGVDaGFyWzBdLCBcIlwiKTtcclxuICAgICAgICAgICAgICAgIGVuZEVzY2FwZUNoYXIgPSBlbnN1cmVEZWZpbmVkKGRhdGEuZXNjYXBlQ2hhclsxXSwgXCJcIilcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHN0YXJ0RXNjYXBlQ2hhciA9IGVuZEVzY2FwZUNoYXIgPSBkYXRhLmVzY2FwZUNoYXJcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBub2RlLmlubmVyVGV4dCA9IHN0YXJ0RXNjYXBlQ2hhciArIHRleHQgKyBlbmRFc2NhcGVDaGFyO1xyXG4gICAgICAgICAgICBub2RlLmRhdGFzZXQudmFyU3RhcnRFc2NDaGFyID0gc3RhcnRFc2NhcGVDaGFyO1xyXG4gICAgICAgICAgICBub2RlLmRhdGFzZXQudmFyRW5kRXNjQ2hhciA9IGVuZEVzY2FwZUNoYXI7XHJcbiAgICAgICAgICAgIG5vZGUuZGF0YXNldC52YXJWYWx1ZSA9IGRhdGEudmFsdWU7XHJcbiAgICAgICAgICAgIHJldHVybiBub2RlXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHN0YXRpYyB2YWx1ZShub2RlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBleHRlbmQoe30sIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlOiBub2RlLmRhdGFzZXQudmFyVmFsdWUsXHJcbiAgICAgICAgICAgICAgICBlc2NhcGVDaGFyOiBbbm9kZS5kYXRhc2V0LnZhclN0YXJ0RXNjQ2hhciB8fCBcIlwiLCBub2RlLmRhdGFzZXQudmFyRW5kRXNjQ2hhciB8fCBcIlwiXVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBWYXJpYWJsZS5ibG90TmFtZSA9IFwidmFyaWFibGVcIjtcclxuICAgIFZhcmlhYmxlLnRhZ05hbWUgPSBcInNwYW5cIjtcclxuICAgIFZhcmlhYmxlLmNsYXNzTmFtZSA9IFZBUklBQkxFX0NMQVNTXHJcbn1cclxuZXhwb3J0IGRlZmF1bHQgVmFyaWFibGU7XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/devextreme/esm/ui/html_editor/formats/variable.js\n");

/***/ }),

/***/ "./node_modules/devextreme/esm/ui/html_editor/matchers/wordLists.js":
/*!**************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/html_editor/matchers/wordLists.js ***!
  \**************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/**\r\n * DevExtreme (esm/ui/html_editor/matchers/wordLists.js)\r\n * Version: 21.2.7\r\n * Build date: Mon Apr 11 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nfunction getListType(matches) {\r\n    var prefix = matches[1];\r\n    return prefix.match(/\\S+\\./) ? \"ordered\" : \"bullet\"\r\n}\r\n\r\nfunction getIndent(node) {\r\n    var style = node.getAttribute(\"style\");\r\n    if (style) {\r\n        var level = style.replace(/\\n+/g, \"\").match(/level(\\d+)/);\r\n        return level ? level[1] - 1 : 0\r\n    } else {\r\n        return false\r\n    }\r\n}\r\n\r\nfunction removeNewLineChar(operations) {\r\n    var newLineOperation = operations[operations.length - 1];\r\n    newLineOperation.insert = newLineOperation.insert.trim()\r\n}\r\nvar getMatcher = quill => {\r\n    var Delta = quill.import(\"delta\");\r\n    return (node, delta) => {\r\n        var ops = delta.ops.slice();\r\n        var insertOperation = ops[0];\r\n        insertOperation.insert = insertOperation.insert.replace(/^\\s+/, \"\");\r\n        var listDecoratorMatches = insertOperation.insert.match(/^(\\S+)\\s+/);\r\n        var indent = listDecoratorMatches && getIndent(node);\r\n        if (!listDecoratorMatches || false === indent) {\r\n            return delta\r\n        }\r\n        insertOperation.insert = insertOperation.insert.substring(listDecoratorMatches[0].length, insertOperation.insert.length);\r\n        removeNewLineChar(ops);\r\n        ops.push({\r\n            insert: \"\\n\",\r\n            attributes: {\r\n                list: getListType(listDecoratorMatches),\r\n                indent: indent\r\n            }\r\n        });\r\n        return new Delta(ops)\r\n    }\r\n};\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (getMatcher);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGV2ZXh0cmVtZS9lc20vdWkvaHRtbF9lZGl0b3IvbWF0Y2hlcnMvd29yZExpc3RzLmpzPzhjOTYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDZSx5RUFBVSxFQUFDIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2RldmV4dHJlbWUvZXNtL3VpL2h0bWxfZWRpdG9yL21hdGNoZXJzL3dvcmRMaXN0cy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBEZXZFeHRyZW1lIChlc20vdWkvaHRtbF9lZGl0b3IvbWF0Y2hlcnMvd29yZExpc3RzLmpzKVxyXG4gKiBWZXJzaW9uOiAyMS4yLjdcclxuICogQnVpbGQgZGF0ZTogTW9uIEFwciAxMSAyMDIyXHJcbiAqXHJcbiAqIENvcHlyaWdodCAoYykgMjAxMiAtIDIwMjIgRGV2ZWxvcGVyIEV4cHJlc3MgSW5jLiBBTEwgUklHSFRTIFJFU0VSVkVEXHJcbiAqIFJlYWQgYWJvdXQgRGV2RXh0cmVtZSBsaWNlbnNpbmcgaGVyZTogaHR0cHM6Ly9qcy5kZXZleHByZXNzLmNvbS9MaWNlbnNpbmcvXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRMaXN0VHlwZShtYXRjaGVzKSB7XHJcbiAgICB2YXIgcHJlZml4ID0gbWF0Y2hlc1sxXTtcclxuICAgIHJldHVybiBwcmVmaXgubWF0Y2goL1xcUytcXC4vKSA/IFwib3JkZXJlZFwiIDogXCJidWxsZXRcIlxyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRJbmRlbnQobm9kZSkge1xyXG4gICAgdmFyIHN0eWxlID0gbm9kZS5nZXRBdHRyaWJ1dGUoXCJzdHlsZVwiKTtcclxuICAgIGlmIChzdHlsZSkge1xyXG4gICAgICAgIHZhciBsZXZlbCA9IHN0eWxlLnJlcGxhY2UoL1xcbisvZywgXCJcIikubWF0Y2goL2xldmVsKFxcZCspLyk7XHJcbiAgICAgICAgcmV0dXJuIGxldmVsID8gbGV2ZWxbMV0gLSAxIDogMFxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gcmVtb3ZlTmV3TGluZUNoYXIob3BlcmF0aW9ucykge1xyXG4gICAgdmFyIG5ld0xpbmVPcGVyYXRpb24gPSBvcGVyYXRpb25zW29wZXJhdGlvbnMubGVuZ3RoIC0gMV07XHJcbiAgICBuZXdMaW5lT3BlcmF0aW9uLmluc2VydCA9IG5ld0xpbmVPcGVyYXRpb24uaW5zZXJ0LnRyaW0oKVxyXG59XHJcbnZhciBnZXRNYXRjaGVyID0gcXVpbGwgPT4ge1xyXG4gICAgdmFyIERlbHRhID0gcXVpbGwuaW1wb3J0KFwiZGVsdGFcIik7XHJcbiAgICByZXR1cm4gKG5vZGUsIGRlbHRhKSA9PiB7XHJcbiAgICAgICAgdmFyIG9wcyA9IGRlbHRhLm9wcy5zbGljZSgpO1xyXG4gICAgICAgIHZhciBpbnNlcnRPcGVyYXRpb24gPSBvcHNbMF07XHJcbiAgICAgICAgaW5zZXJ0T3BlcmF0aW9uLmluc2VydCA9IGluc2VydE9wZXJhdGlvbi5pbnNlcnQucmVwbGFjZSgvXlxccysvLCBcIlwiKTtcclxuICAgICAgICB2YXIgbGlzdERlY29yYXRvck1hdGNoZXMgPSBpbnNlcnRPcGVyYXRpb24uaW5zZXJ0Lm1hdGNoKC9eKFxcUyspXFxzKy8pO1xyXG4gICAgICAgIHZhciBpbmRlbnQgPSBsaXN0RGVjb3JhdG9yTWF0Y2hlcyAmJiBnZXRJbmRlbnQobm9kZSk7XHJcbiAgICAgICAgaWYgKCFsaXN0RGVjb3JhdG9yTWF0Y2hlcyB8fCBmYWxzZSA9PT0gaW5kZW50KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBkZWx0YVxyXG4gICAgICAgIH1cclxuICAgICAgICBpbnNlcnRPcGVyYXRpb24uaW5zZXJ0ID0gaW5zZXJ0T3BlcmF0aW9uLmluc2VydC5zdWJzdHJpbmcobGlzdERlY29yYXRvck1hdGNoZXNbMF0ubGVuZ3RoLCBpbnNlcnRPcGVyYXRpb24uaW5zZXJ0Lmxlbmd0aCk7XHJcbiAgICAgICAgcmVtb3ZlTmV3TGluZUNoYXIob3BzKTtcclxuICAgICAgICBvcHMucHVzaCh7XHJcbiAgICAgICAgICAgIGluc2VydDogXCJcXG5cIixcclxuICAgICAgICAgICAgYXR0cmlidXRlczoge1xyXG4gICAgICAgICAgICAgICAgbGlzdDogZ2V0TGlzdFR5cGUobGlzdERlY29yYXRvck1hdGNoZXMpLFxyXG4gICAgICAgICAgICAgICAgaW5kZW50OiBpbmRlbnRcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBuZXcgRGVsdGEob3BzKVxyXG4gICAgfVxyXG59O1xyXG5leHBvcnQgZGVmYXVsdCBnZXRNYXRjaGVyO1xyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/devextreme/esm/ui/html_editor/matchers/wordLists.js\n");

/***/ }),

/***/ "./node_modules/devextreme/esm/ui/html_editor/modules/base.js":
/*!********************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/html_editor/modules/base.js ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var devextreme_quill__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devextreme-quill */ \"./node_modules/devextreme-quill/dist/dx-quill.js\");\n/* harmony import */ var devextreme_quill__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(devextreme_quill__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _empty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./empty */ \"./node_modules/devextreme/esm/ui/html_editor/modules/empty.js\");\n/* harmony import */ var _core_utils_type__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../core/utils/type */ \"./node_modules/devextreme/esm/core/utils/type.js\");\n/**\r\n * DevExtreme (esm/ui/html_editor/modules/base.js)\r\n * Version: 21.2.7\r\n * Build date: Mon Apr 11 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\r\n\r\n\r\nvar BaseModule = _empty__WEBPACK_IMPORTED_MODULE_1__[\"default\"];\r\nif (devextreme_quill__WEBPACK_IMPORTED_MODULE_0___default.a) {\r\n    var BaseQuillModule = devextreme_quill__WEBPACK_IMPORTED_MODULE_0___default.a.import(\"core/module\");\r\n    BaseModule = class extends BaseQuillModule {\r\n        constructor(quill, options) {\r\n            super(quill, options);\r\n            this.editorInstance = options.editorInstance\r\n        }\r\n        saveValueChangeEvent(event) {\r\n            this.editorInstance._saveValueChangeEvent(event)\r\n        }\r\n        addCleanCallback(callback) {\r\n            this.editorInstance.addCleanCallback(callback)\r\n        }\r\n        handleOptionChangeValue(changes) {\r\n            if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_2__[\"isObject\"])(changes)) {\r\n                Object.entries(changes).forEach(_ref => {\r\n                    var [name, value] = _ref;\r\n                    return this.option(name, value)\r\n                })\r\n            } else if (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_2__[\"isDefined\"])(changes)) {\r\n                null === this || void 0 === this ? void 0 : this.clean()\r\n            }\r\n        }\r\n    }\r\n}\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (BaseModule);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGV2ZXh0cmVtZS9lc20vdWkvaHRtbF9lZGl0b3IvbW9kdWxlcy9iYXNlLmpzPzIwZGUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDcUM7QUFDSDtBQUlBO0FBQ2xDLGlCQUFpQiw4Q0FBVztBQUM1QixJQUFJLHVEQUFLO0FBQ1QsMEJBQTBCLHVEQUFLO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixpRUFBUTtBQUN4QjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYSxXQUFXLGtFQUFTO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDZSx5RUFBVSxFQUFDIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2RldmV4dHJlbWUvZXNtL3VpL2h0bWxfZWRpdG9yL21vZHVsZXMvYmFzZS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBEZXZFeHRyZW1lIChlc20vdWkvaHRtbF9lZGl0b3IvbW9kdWxlcy9iYXNlLmpzKVxyXG4gKiBWZXJzaW9uOiAyMS4yLjdcclxuICogQnVpbGQgZGF0ZTogTW9uIEFwciAxMSAyMDIyXHJcbiAqXHJcbiAqIENvcHlyaWdodCAoYykgMjAxMiAtIDIwMjIgRGV2ZWxvcGVyIEV4cHJlc3MgSW5jLiBBTEwgUklHSFRTIFJFU0VSVkVEXHJcbiAqIFJlYWQgYWJvdXQgRGV2RXh0cmVtZSBsaWNlbnNpbmcgaGVyZTogaHR0cHM6Ly9qcy5kZXZleHByZXNzLmNvbS9MaWNlbnNpbmcvXHJcbiAqL1xyXG5pbXBvcnQgUXVpbGwgZnJvbSBcImRldmV4dHJlbWUtcXVpbGxcIjtcclxuaW1wb3J0IEVtcHR5TW9kdWxlIGZyb20gXCIuL2VtcHR5XCI7XHJcbmltcG9ydCB7XHJcbiAgICBpc09iamVjdCxcclxuICAgIGlzRGVmaW5lZFxyXG59IGZyb20gXCIuLi8uLi8uLi9jb3JlL3V0aWxzL3R5cGVcIjtcclxudmFyIEJhc2VNb2R1bGUgPSBFbXB0eU1vZHVsZTtcclxuaWYgKFF1aWxsKSB7XHJcbiAgICB2YXIgQmFzZVF1aWxsTW9kdWxlID0gUXVpbGwuaW1wb3J0KFwiY29yZS9tb2R1bGVcIik7XHJcbiAgICBCYXNlTW9kdWxlID0gY2xhc3MgZXh0ZW5kcyBCYXNlUXVpbGxNb2R1bGUge1xyXG4gICAgICAgIGNvbnN0cnVjdG9yKHF1aWxsLCBvcHRpb25zKSB7XHJcbiAgICAgICAgICAgIHN1cGVyKHF1aWxsLCBvcHRpb25zKTtcclxuICAgICAgICAgICAgdGhpcy5lZGl0b3JJbnN0YW5jZSA9IG9wdGlvbnMuZWRpdG9ySW5zdGFuY2VcclxuICAgICAgICB9XHJcbiAgICAgICAgc2F2ZVZhbHVlQ2hhbmdlRXZlbnQoZXZlbnQpIHtcclxuICAgICAgICAgICAgdGhpcy5lZGl0b3JJbnN0YW5jZS5fc2F2ZVZhbHVlQ2hhbmdlRXZlbnQoZXZlbnQpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGFkZENsZWFuQ2FsbGJhY2soY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgdGhpcy5lZGl0b3JJbnN0YW5jZS5hZGRDbGVhbkNhbGxiYWNrKGNhbGxiYWNrKVxyXG4gICAgICAgIH1cclxuICAgICAgICBoYW5kbGVPcHRpb25DaGFuZ2VWYWx1ZShjaGFuZ2VzKSB7XHJcbiAgICAgICAgICAgIGlmIChpc09iamVjdChjaGFuZ2VzKSkge1xyXG4gICAgICAgICAgICAgICAgT2JqZWN0LmVudHJpZXMoY2hhbmdlcykuZm9yRWFjaChfcmVmID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgW25hbWUsIHZhbHVlXSA9IF9yZWY7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9uKG5hbWUsIHZhbHVlKVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfSBlbHNlIGlmICghaXNEZWZpbmVkKGNoYW5nZXMpKSB7XHJcbiAgICAgICAgICAgICAgICBudWxsID09PSB0aGlzIHx8IHZvaWQgMCA9PT0gdGhpcyA/IHZvaWQgMCA6IHRoaXMuY2xlYW4oKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBkZWZhdWx0IEJhc2VNb2R1bGU7XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/devextreme/esm/ui/html_editor/modules/base.js\n");

/***/ }),

/***/ "./node_modules/devextreme/esm/ui/html_editor/modules/dropImage.js":
/*!*************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/html_editor/modules/dropImage.js ***!
  \*************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var devextreme_quill__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devextreme-quill */ \"./node_modules/devextreme-quill/dist/dx-quill.js\");\n/* harmony import */ var devextreme_quill__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(devextreme_quill__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _events_core_events_engine__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../events/core/events_engine */ \"./node_modules/devextreme/esm/events/core/events_engine.js\");\n/* harmony import */ var _events_utils_index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../events/utils/index */ \"./node_modules/devextreme/esm/events/utils/index.js\");\n/* harmony import */ var _core_utils_iterator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../core/utils/iterator */ \"./node_modules/devextreme/esm/core/utils/iterator.js\");\n/* harmony import */ var _core_utils_browser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../core/utils/browser */ \"./node_modules/devextreme/esm/core/utils/browser.js\");\n/* harmony import */ var _core_utils_window__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../core/utils/window */ \"./node_modules/devextreme/esm/core/utils/window.js\");\n/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./base */ \"./node_modules/devextreme/esm/ui/html_editor/modules/base.js\");\n/**\r\n * DevExtreme (esm/ui/html_editor/modules/dropImage.js)\r\n * Version: 21.2.7\r\n * Build date: Mon Apr 11 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nvar DropImageModule = _base__WEBPACK_IMPORTED_MODULE_6__[\"default\"];\r\nif (devextreme_quill__WEBPACK_IMPORTED_MODULE_0___default.a) {\r\n    DropImageModule = class extends _base__WEBPACK_IMPORTED_MODULE_6__[\"default\"] {\r\n        constructor(quill, options) {\r\n            super(quill, options);\r\n            var widgetName = this.editorInstance.NAME;\r\n            _events_core_events_engine__WEBPACK_IMPORTED_MODULE_1__[\"default\"].on(this.quill.root, Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_2__[\"addNamespace\"])(\"drop\", widgetName), this._dropHandler.bind(this));\r\n            _events_core_events_engine__WEBPACK_IMPORTED_MODULE_1__[\"default\"].on(this.quill.root, Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_2__[\"addNamespace\"])(\"paste\", widgetName), this._pasteHandler.bind(this))\r\n        }\r\n        _dropHandler(e) {\r\n            var _dataTransfer$files;\r\n            var dataTransfer = e.originalEvent.dataTransfer;\r\n            var hasFiles = null === dataTransfer || void 0 === dataTransfer ? void 0 : null === (_dataTransfer$files = dataTransfer.files) || void 0 === _dataTransfer$files ? void 0 : _dataTransfer$files.length;\r\n            this.saveValueChangeEvent(e);\r\n            e.preventDefault();\r\n            if (hasFiles) {\r\n                this._getImage(dataTransfer.files, this._addImage.bind(this))\r\n            }\r\n        }\r\n        _pasteHandler(e) {\r\n            var _clipboardData$items;\r\n            var {\r\n                clipboardData: clipboardData\r\n            } = e.originalEvent;\r\n            this.saveValueChangeEvent(e);\r\n            if (!clipboardData) {\r\n                return\r\n            }\r\n            var hasDataItems = null === (_clipboardData$items = clipboardData.items) || void 0 === _clipboardData$items ? void 0 : _clipboardData$items.length;\r\n            var isHtmlData = clipboardData.getData(\"text/html\");\r\n            if (!isHtmlData && hasDataItems) {\r\n                this._getImage(clipboardData.items, imageData => {\r\n                    if (this._isBrowserSupportImagePaste(_core_utils_browser__WEBPACK_IMPORTED_MODULE_4__[\"default\"])) {\r\n                        return\r\n                    }\r\n                    this._addImage(imageData)\r\n                })\r\n            }\r\n        }\r\n        _isBrowserSupportImagePaste(_ref) {\r\n            var {\r\n                mozilla: mozilla,\r\n                chrome: chrome,\r\n                version: version\r\n            } = _ref;\r\n            return mozilla || chrome && version > 82\r\n        }\r\n        _isImage(file) {\r\n            return !!file.type.match(/^image\\/(a?png|bmp|gif|p?jpe?g|svg|vnd\\.microsoft\\.icon|webp)/i)\r\n        }\r\n        _getImage(files, callback) {\r\n            var window = Object(_core_utils_window__WEBPACK_IMPORTED_MODULE_5__[\"getWindow\"])();\r\n            Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_3__[\"each\"])(files, (index, file) => {\r\n                if (!this._isImage(file)) {\r\n                    return\r\n                }\r\n                var reader = new window.FileReader;\r\n                reader.onload = _ref2 => {\r\n                    var {\r\n                        target: target\r\n                    } = _ref2;\r\n                    callback(target.result)\r\n                };\r\n                var readableFile = file.getAsFile ? file.getAsFile() : file;\r\n                if (readableFile instanceof window.Blob) {\r\n                    reader.readAsDataURL(readableFile)\r\n                }\r\n            })\r\n        }\r\n        _addImage(data) {\r\n            var selection = this.quill.getSelection();\r\n            var pasteIndex = selection ? selection.index : this.quill.getLength();\r\n            this.quill.insertEmbed(pasteIndex, \"extendedImage\", data, \"user\")\r\n        }\r\n    }\r\n}\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (DropImageModule);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGV2ZXh0cmVtZS9lc20vdWkvaHRtbF9lZGl0b3IvbW9kdWxlcy9kcm9wSW1hZ2UuanM/ZjZkMiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ3FDO0FBQ3lCO0FBR3pCO0FBR0M7QUFDWTtBQUdkO0FBQ0o7QUFDaEMsc0JBQXNCLDZDQUFVO0FBQ2hDLElBQUksdURBQUs7QUFDVCxvQ0FBb0MsNkNBQVU7QUFDOUM7QUFDQTtBQUNBO0FBQ0EsWUFBWSxrRUFBWSxxQkFBcUIsd0VBQVk7QUFDekQsWUFBWSxrRUFBWSxxQkFBcUIsd0VBQVk7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5REFBeUQsMkRBQU87QUFDaEU7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixvRUFBUztBQUNsQyxZQUFZLGlFQUFJO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ2UsOEVBQWUsRUFBQyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9kZXZleHRyZW1lL2VzbS91aS9odG1sX2VkaXRvci9tb2R1bGVzL2Ryb3BJbWFnZS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBEZXZFeHRyZW1lIChlc20vdWkvaHRtbF9lZGl0b3IvbW9kdWxlcy9kcm9wSW1hZ2UuanMpXHJcbiAqIFZlcnNpb246IDIxLjIuN1xyXG4gKiBCdWlsZCBkYXRlOiBNb24gQXByIDExIDIwMjJcclxuICpcclxuICogQ29weXJpZ2h0IChjKSAyMDEyIC0gMjAyMiBEZXZlbG9wZXIgRXhwcmVzcyBJbmMuIEFMTCBSSUdIVFMgUkVTRVJWRURcclxuICogUmVhZCBhYm91dCBEZXZFeHRyZW1lIGxpY2Vuc2luZyBoZXJlOiBodHRwczovL2pzLmRldmV4cHJlc3MuY29tL0xpY2Vuc2luZy9cclxuICovXHJcbmltcG9ydCBRdWlsbCBmcm9tIFwiZGV2ZXh0cmVtZS1xdWlsbFwiO1xyXG5pbXBvcnQgZXZlbnRzRW5naW5lIGZyb20gXCIuLi8uLi8uLi9ldmVudHMvY29yZS9ldmVudHNfZW5naW5lXCI7XHJcbmltcG9ydCB7XHJcbiAgICBhZGROYW1lc3BhY2VcclxufSBmcm9tIFwiLi4vLi4vLi4vZXZlbnRzL3V0aWxzL2luZGV4XCI7XHJcbmltcG9ydCB7XHJcbiAgICBlYWNoXHJcbn0gZnJvbSBcIi4uLy4uLy4uL2NvcmUvdXRpbHMvaXRlcmF0b3JcIjtcclxuaW1wb3J0IGJyb3dzZXIgZnJvbSBcIi4uLy4uLy4uL2NvcmUvdXRpbHMvYnJvd3NlclwiO1xyXG5pbXBvcnQge1xyXG4gICAgZ2V0V2luZG93XHJcbn0gZnJvbSBcIi4uLy4uLy4uL2NvcmUvdXRpbHMvd2luZG93XCI7XHJcbmltcG9ydCBCYXNlTW9kdWxlIGZyb20gXCIuL2Jhc2VcIjtcclxudmFyIERyb3BJbWFnZU1vZHVsZSA9IEJhc2VNb2R1bGU7XHJcbmlmIChRdWlsbCkge1xyXG4gICAgRHJvcEltYWdlTW9kdWxlID0gY2xhc3MgZXh0ZW5kcyBCYXNlTW9kdWxlIHtcclxuICAgICAgICBjb25zdHJ1Y3RvcihxdWlsbCwgb3B0aW9ucykge1xyXG4gICAgICAgICAgICBzdXBlcihxdWlsbCwgb3B0aW9ucyk7XHJcbiAgICAgICAgICAgIHZhciB3aWRnZXROYW1lID0gdGhpcy5lZGl0b3JJbnN0YW5jZS5OQU1FO1xyXG4gICAgICAgICAgICBldmVudHNFbmdpbmUub24odGhpcy5xdWlsbC5yb290LCBhZGROYW1lc3BhY2UoXCJkcm9wXCIsIHdpZGdldE5hbWUpLCB0aGlzLl9kcm9wSGFuZGxlci5iaW5kKHRoaXMpKTtcclxuICAgICAgICAgICAgZXZlbnRzRW5naW5lLm9uKHRoaXMucXVpbGwucm9vdCwgYWRkTmFtZXNwYWNlKFwicGFzdGVcIiwgd2lkZ2V0TmFtZSksIHRoaXMuX3Bhc3RlSGFuZGxlci5iaW5kKHRoaXMpKVxyXG4gICAgICAgIH1cclxuICAgICAgICBfZHJvcEhhbmRsZXIoZSkge1xyXG4gICAgICAgICAgICB2YXIgX2RhdGFUcmFuc2ZlciRmaWxlcztcclxuICAgICAgICAgICAgdmFyIGRhdGFUcmFuc2ZlciA9IGUub3JpZ2luYWxFdmVudC5kYXRhVHJhbnNmZXI7XHJcbiAgICAgICAgICAgIHZhciBoYXNGaWxlcyA9IG51bGwgPT09IGRhdGFUcmFuc2ZlciB8fCB2b2lkIDAgPT09IGRhdGFUcmFuc2ZlciA/IHZvaWQgMCA6IG51bGwgPT09IChfZGF0YVRyYW5zZmVyJGZpbGVzID0gZGF0YVRyYW5zZmVyLmZpbGVzKSB8fCB2b2lkIDAgPT09IF9kYXRhVHJhbnNmZXIkZmlsZXMgPyB2b2lkIDAgOiBfZGF0YVRyYW5zZmVyJGZpbGVzLmxlbmd0aDtcclxuICAgICAgICAgICAgdGhpcy5zYXZlVmFsdWVDaGFuZ2VFdmVudChlKTtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICBpZiAoaGFzRmlsZXMpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2dldEltYWdlKGRhdGFUcmFuc2Zlci5maWxlcywgdGhpcy5fYWRkSW1hZ2UuYmluZCh0aGlzKSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBfcGFzdGVIYW5kbGVyKGUpIHtcclxuICAgICAgICAgICAgdmFyIF9jbGlwYm9hcmREYXRhJGl0ZW1zO1xyXG4gICAgICAgICAgICB2YXIge1xyXG4gICAgICAgICAgICAgICAgY2xpcGJvYXJkRGF0YTogY2xpcGJvYXJkRGF0YVxyXG4gICAgICAgICAgICB9ID0gZS5vcmlnaW5hbEV2ZW50O1xyXG4gICAgICAgICAgICB0aGlzLnNhdmVWYWx1ZUNoYW5nZUV2ZW50KGUpO1xyXG4gICAgICAgICAgICBpZiAoIWNsaXBib2FyZERhdGEpIHtcclxuICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBoYXNEYXRhSXRlbXMgPSBudWxsID09PSAoX2NsaXBib2FyZERhdGEkaXRlbXMgPSBjbGlwYm9hcmREYXRhLml0ZW1zKSB8fCB2b2lkIDAgPT09IF9jbGlwYm9hcmREYXRhJGl0ZW1zID8gdm9pZCAwIDogX2NsaXBib2FyZERhdGEkaXRlbXMubGVuZ3RoO1xyXG4gICAgICAgICAgICB2YXIgaXNIdG1sRGF0YSA9IGNsaXBib2FyZERhdGEuZ2V0RGF0YShcInRleHQvaHRtbFwiKTtcclxuICAgICAgICAgICAgaWYgKCFpc0h0bWxEYXRhICYmIGhhc0RhdGFJdGVtcykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZ2V0SW1hZ2UoY2xpcGJvYXJkRGF0YS5pdGVtcywgaW1hZ2VEYXRhID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5faXNCcm93c2VyU3VwcG9ydEltYWdlUGFzdGUoYnJvd3NlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2FkZEltYWdlKGltYWdlRGF0YSlcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgX2lzQnJvd3NlclN1cHBvcnRJbWFnZVBhc3RlKF9yZWYpIHtcclxuICAgICAgICAgICAgdmFyIHtcclxuICAgICAgICAgICAgICAgIG1vemlsbGE6IG1vemlsbGEsXHJcbiAgICAgICAgICAgICAgICBjaHJvbWU6IGNocm9tZSxcclxuICAgICAgICAgICAgICAgIHZlcnNpb246IHZlcnNpb25cclxuICAgICAgICAgICAgfSA9IF9yZWY7XHJcbiAgICAgICAgICAgIHJldHVybiBtb3ppbGxhIHx8IGNocm9tZSAmJiB2ZXJzaW9uID4gODJcclxuICAgICAgICB9XHJcbiAgICAgICAgX2lzSW1hZ2UoZmlsZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gISFmaWxlLnR5cGUubWF0Y2goL15pbWFnZVxcLyhhP3BuZ3xibXB8Z2lmfHA/anBlP2d8c3ZnfHZuZFxcLm1pY3Jvc29mdFxcLmljb258d2VicCkvaSlcclxuICAgICAgICB9XHJcbiAgICAgICAgX2dldEltYWdlKGZpbGVzLCBjYWxsYmFjaykge1xyXG4gICAgICAgICAgICB2YXIgd2luZG93ID0gZ2V0V2luZG93KCk7XHJcbiAgICAgICAgICAgIGVhY2goZmlsZXMsIChpbmRleCwgZmlsZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9pc0ltYWdlKGZpbGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVhZGVyID0gbmV3IHdpbmRvdy5GaWxlUmVhZGVyO1xyXG4gICAgICAgICAgICAgICAgcmVhZGVyLm9ubG9hZCA9IF9yZWYyID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IHRhcmdldFxyXG4gICAgICAgICAgICAgICAgICAgIH0gPSBfcmVmMjtcclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayh0YXJnZXQucmVzdWx0KVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIHZhciByZWFkYWJsZUZpbGUgPSBmaWxlLmdldEFzRmlsZSA/IGZpbGUuZ2V0QXNGaWxlKCkgOiBmaWxlO1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlYWRhYmxlRmlsZSBpbnN0YW5jZW9mIHdpbmRvdy5CbG9iKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnJlYWRBc0RhdGFVUkwocmVhZGFibGVGaWxlKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgICAgICBfYWRkSW1hZ2UoZGF0YSkge1xyXG4gICAgICAgICAgICB2YXIgc2VsZWN0aW9uID0gdGhpcy5xdWlsbC5nZXRTZWxlY3Rpb24oKTtcclxuICAgICAgICAgICAgdmFyIHBhc3RlSW5kZXggPSBzZWxlY3Rpb24gPyBzZWxlY3Rpb24uaW5kZXggOiB0aGlzLnF1aWxsLmdldExlbmd0aCgpO1xyXG4gICAgICAgICAgICB0aGlzLnF1aWxsLmluc2VydEVtYmVkKHBhc3RlSW5kZXgsIFwiZXh0ZW5kZWRJbWFnZVwiLCBkYXRhLCBcInVzZXJcIilcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0IGRlZmF1bHQgRHJvcEltYWdlTW9kdWxlO1xyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/devextreme/esm/ui/html_editor/modules/dropImage.js\n");

/***/ }),

/***/ "./node_modules/devextreme/esm/ui/html_editor/modules/empty.js":
/*!*********************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/html_editor/modules/empty.js ***!
  \*********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return EmptyModule; });\n/**\r\n * DevExtreme (esm/ui/html_editor/modules/empty.js)\r\n * Version: 21.2.7\r\n * Build date: Mon Apr 11 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nclass EmptyModule {}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGV2ZXh0cmVtZS9lc20vdWkvaHRtbF9lZGl0b3IvbW9kdWxlcy9lbXB0eS5qcz9lNDEwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ2UiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZGV2ZXh0cmVtZS9lc20vdWkvaHRtbF9lZGl0b3IvbW9kdWxlcy9lbXB0eS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBEZXZFeHRyZW1lIChlc20vdWkvaHRtbF9lZGl0b3IvbW9kdWxlcy9lbXB0eS5qcylcclxuICogVmVyc2lvbjogMjEuMi43XHJcbiAqIEJ1aWxkIGRhdGU6IE1vbiBBcHIgMTEgMjAyMlxyXG4gKlxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTIgLSAyMDIyIERldmVsb3BlciBFeHByZXNzIEluYy4gQUxMIFJJR0hUUyBSRVNFUlZFRFxyXG4gKiBSZWFkIGFib3V0IERldkV4dHJlbWUgbGljZW5zaW5nIGhlcmU6IGh0dHBzOi8vanMuZGV2ZXhwcmVzcy5jb20vTGljZW5zaW5nL1xyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRW1wdHlNb2R1bGUge31cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/devextreme/esm/ui/html_editor/modules/empty.js\n");

/***/ }),

/***/ "./node_modules/devextreme/esm/ui/html_editor/modules/mentions.js":
/*!************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/html_editor/modules/mentions.js ***!
  \************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/renderer */ \"./node_modules/devextreme/esm/core/renderer.js\");\n/* harmony import */ var devextreme_quill__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! devextreme-quill */ \"./node_modules/devextreme-quill/dist/dx-quill.js\");\n/* harmony import */ var devextreme_quill__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(devextreme_quill__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _core_utils_data__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../core/utils/data */ \"./node_modules/devextreme/esm/core/utils/data.js\");\n/* harmony import */ var _core_utils_type__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../core/utils/type */ \"./node_modules/devextreme/esm/core/utils/type.js\");\n/* harmony import */ var _core_utils_extend__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../core/utils/extend */ \"./node_modules/devextreme/esm/core/utils/extend.js\");\n/* harmony import */ var _core_element__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../core/element */ \"./node_modules/devextreme/esm/core/element.js\");\n/* harmony import */ var _events_core_events_engine__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../events/core/events_engine */ \"./node_modules/devextreme/esm/events/core/events_engine.js\");\n/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./base */ \"./node_modules/devextreme/esm/ui/html_editor/modules/base.js\");\n/* harmony import */ var _popup__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./popup */ \"./node_modules/devextreme/esm/ui/html_editor/modules/popup.js\");\n/* harmony import */ var _formats_mention__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../formats/mention */ \"./node_modules/devextreme/esm/ui/html_editor/formats/mention.js\");\n/**\r\n * DevExtreme (esm/ui/html_editor/modules/mentions.js)\r\n * Version: 21.2.7\r\n * Build date: Mon Apr 11 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nvar MentionModule = _base__WEBPACK_IMPORTED_MODULE_7__[\"default\"];\r\nif (devextreme_quill__WEBPACK_IMPORTED_MODULE_1___default.a) {\r\n    var USER_ACTION = \"user\";\r\n    var DEFAULT_MARKER = \"@\";\r\n    var KEYS = {\r\n        ARROW_UP: \"upArrow\",\r\n        ARROW_DOWN: \"downArrow\",\r\n        ARROW_LEFT: \"leftArrow\",\r\n        ARROW_RIGHT: \"rightArrow\",\r\n        ENTER: \"enter\",\r\n        ESCAPE: \"escape\",\r\n        SPACE: \"space\",\r\n        PAGE_UP: \"pageUp\",\r\n        PAGE_DOWN: \"pageDown\",\r\n        END: \"end\",\r\n        HOME: \"home\"\r\n    };\r\n    var NAVIGATION_KEYS = [KEYS.ARROW_LEFT, KEYS.ARROW_RIGHT, KEYS.PAGE_UP, KEYS.PAGE_DOWN, KEYS.END, KEYS.HOME];\r\n    var ALLOWED_PREFIX_CHARS = [\" \", \"\\n\"];\r\n    var DISABLED_STATE_CLASS = \"dx-state-disabled\";\r\n    devextreme_quill__WEBPACK_IMPORTED_MODULE_1___default.a.register({\r\n        \"formats/mention\": _formats_mention__WEBPACK_IMPORTED_MODULE_9__[\"default\"]\r\n    }, true);\r\n    MentionModule = class extends _popup__WEBPACK_IMPORTED_MODULE_8__[\"default\"] {\r\n        _getDefaultOptions() {\r\n            var baseConfig = super._getDefaultOptions();\r\n            return Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_4__[\"extend\"])(baseConfig, {\r\n                itemTemplate: \"item\",\r\n                valueExpr: \"this\",\r\n                displayExpr: \"this\",\r\n                template: null,\r\n                searchExpr: null,\r\n                searchTimeout: 500,\r\n                minSearchLength: 0\r\n            })\r\n        }\r\n        constructor(quill, options) {\r\n            super(quill, options);\r\n            this._mentions = {};\r\n            options.mentions.forEach(item => {\r\n                var marker = item.marker;\r\n                if (!marker) {\r\n                    item.marker = marker = DEFAULT_MARKER\r\n                }\r\n                var template = item.template;\r\n                if (template) {\r\n                    var preparedTemplate = this.editorInstance._getTemplate(template);\r\n                    preparedTemplate && _formats_mention__WEBPACK_IMPORTED_MODULE_9__[\"default\"].addTemplate(marker, preparedTemplate)\r\n                }\r\n                this._mentions[marker] = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_4__[\"extend\"])({}, this._getDefaultOptions(), item)\r\n            });\r\n            this._attachKeyboardHandlers();\r\n            this.addCleanCallback(this.clean.bind(this));\r\n            this.quill.on(\"text-change\", this.onTextChange.bind(this))\r\n        }\r\n        _attachKeyboardHandlers() {\r\n            this.quill.keyboard.addBinding({\r\n                key: KEYS.ARROW_UP\r\n            }, this._moveToItem.bind(this, \"prev\"));\r\n            this.quill.keyboard.addBinding({\r\n                key: KEYS.ARROW_DOWN\r\n            }, this._moveToItem.bind(this, \"next\"));\r\n            this.quill.keyboard.addBinding({\r\n                key: [KEYS.ENTER, KEYS.SPACE]\r\n            }, this._selectItemHandler.bind(this));\r\n            var enterBindings = this.quill.keyboard.bindings[KEYS.ENTER];\r\n            enterBindings.unshift(enterBindings.pop());\r\n            this.quill.keyboard.addBinding({\r\n                key: KEYS.ESCAPE\r\n            }, this._escapeKeyHandler.bind(this));\r\n            this.quill.keyboard.addBinding({\r\n                key: [KEYS.ARROW_LEFT, KEYS.ARROW_RIGHT],\r\n                shiftKey: true\r\n            }, this._ignoreKeyHandler.bind(this));\r\n            this.quill.keyboard.addBinding({\r\n                key: NAVIGATION_KEYS\r\n            }, this._ignoreKeyHandler.bind(this))\r\n        }\r\n        _moveToItem(direction) {\r\n            var dataSource = this._list.getDataSource();\r\n            if (this._isMentionActive && !dataSource.isLoading()) {\r\n                var $focusedItem = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this._list.option(\"focusedElement\"));\r\n                var defaultItemPosition = \"next\" === direction ? \"first\" : \"last\";\r\n                var $nextItem = $focusedItem[direction]();\r\n                $nextItem = $nextItem.length ? $nextItem : this._activeListItems[defaultItemPosition]();\r\n                this._list.option(\"focusedElement\", Object(_core_element__WEBPACK_IMPORTED_MODULE_5__[\"getPublicElement\"])($nextItem));\r\n                this._list.scrollToItem($nextItem)\r\n            }\r\n            return !this._isMentionActive\r\n        }\r\n        _ignoreKeyHandler() {\r\n            return !this._isMentionActive\r\n        }\r\n        _fitIntoRange(value, start, end) {\r\n            if (value > end) {\r\n                return start\r\n            }\r\n            if (value < start) {\r\n                return end\r\n            }\r\n            return value\r\n        }\r\n        _selectItemHandler() {\r\n            if (this._isMentionActive) {\r\n                this._list.option(\"items\").length ? this._list.selectItem(this._list.option(\"focusedElement\")) : this._popup.hide()\r\n            }\r\n            return !this._isMentionActive\r\n        }\r\n        _escapeKeyHandler() {\r\n            if (this._isMentionActive) {\r\n                this._popup.hide()\r\n            }\r\n            return !this._isMentionActive\r\n        }\r\n        renderList($container, options) {\r\n            this.compileGetters(this.options);\r\n            super.renderList($container, options)\r\n        }\r\n        compileGetters(_ref) {\r\n            var {\r\n                displayExpr: displayExpr,\r\n                valueExpr: valueExpr\r\n            } = _ref;\r\n            this._valueGetter = Object(_core_utils_data__WEBPACK_IMPORTED_MODULE_2__[\"compileGetter\"])(displayExpr);\r\n            this._idGetter = Object(_core_utils_data__WEBPACK_IMPORTED_MODULE_2__[\"compileGetter\"])(valueExpr)\r\n        }\r\n        _getListConfig(options) {\r\n            var baseConfig = super._getListConfig(options);\r\n            return Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_4__[\"extend\"])(baseConfig, {\r\n                itemTemplate: this.options.itemTemplate,\r\n                onContentReady: () => {\r\n                    if (this._hasSearch) {\r\n                        this._popup.repaint();\r\n                        this._focusFirstElement();\r\n                        this._hasSearch = false\r\n                    }\r\n                }\r\n            })\r\n        }\r\n        insertEmbedContent() {\r\n            var markerLength = this._activeMentionConfig.marker.length;\r\n            var textLength = markerLength + this._searchValue.length;\r\n            var caretPosition = this.getPosition();\r\n            var selectedItem = this._list.option(\"selectedItem\");\r\n            var value = {\r\n                value: this._valueGetter(selectedItem),\r\n                id: this._idGetter(selectedItem),\r\n                marker: this._activeMentionConfig.marker\r\n            };\r\n            var Delta = devextreme_quill__WEBPACK_IMPORTED_MODULE_1___default.a.import(\"delta\");\r\n            var startIndex = Math.max(0, caretPosition - markerLength);\r\n            var retainCorrection = \"\\n\" === this._getCharByIndex(startIndex) ? 1 : 0;\r\n            startIndex += retainCorrection;\r\n            var newDelta = (new Delta).retain(startIndex).delete(textLength).insert({\r\n                mention: value\r\n            }).insert(\" \");\r\n            this.quill.updateContents(newDelta);\r\n            this.quill.setSelection(startIndex + 2)\r\n        }\r\n        _getLastInsertOperation(ops) {\r\n            var lastOperation = ops[ops.length - 1];\r\n            var isLastOperationInsert = \"insert\" in lastOperation;\r\n            if (isLastOperationInsert) {\r\n                return lastOperation\r\n            }\r\n            var isLastOperationDelete = \"delete\" in lastOperation;\r\n            if (isLastOperationDelete && ops.length >= 2) {\r\n                var penultOperation = ops[ops.length - 2];\r\n                var isPenultOperationInsert = \"insert\" in penultOperation;\r\n                var isSelectionReplacing = isLastOperationDelete && isPenultOperationInsert;\r\n                if (isSelectionReplacing) {\r\n                    return penultOperation\r\n                }\r\n            }\r\n            return null\r\n        }\r\n        onTextChange(newDelta, oldDelta, source) {\r\n            if (source === USER_ACTION) {\r\n                var lastOperation = newDelta.ops[newDelta.ops.length - 1];\r\n                if (this._isMentionActive && this._isPopupVisible) {\r\n                    this._processSearchValue(lastOperation) && this._filterList(this._searchValue)\r\n                } else {\r\n                    var {\r\n                        ops: ops\r\n                    } = newDelta;\r\n                    var lastInsertOperation = this._getLastInsertOperation(ops);\r\n                    if (lastInsertOperation) {\r\n                        this.checkMentionRequest(lastInsertOperation, ops)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        get _isPopupVisible() {\r\n            var _this$_popup;\r\n            return null === (_this$_popup = this._popup) || void 0 === _this$_popup ? void 0 : _this$_popup.option(\"visible\")\r\n        }\r\n        _processSearchValue(operation) {\r\n            var isInsertOperation = \"insert\" in operation;\r\n            if (isInsertOperation) {\r\n                this._searchValue += operation.insert\r\n            } else if (!this._searchValue.length || operation.delete > 1) {\r\n                this._popup.hide();\r\n                return false\r\n            } else {\r\n                this._searchValue = this._searchValue.slice(0, -1)\r\n            }\r\n            return true\r\n        }\r\n        checkMentionRequest(_ref2, ops) {\r\n            var {\r\n                insert: insert\r\n            } = _ref2;\r\n            var caret = this.quill.getSelection();\r\n            if (!insert || !Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_3__[\"isString\"])(insert) || !caret || this._isMarkerPartOfText(ops[0].retain)) {\r\n                return\r\n            }\r\n            this._activeMentionConfig = this._mentions[insert];\r\n            if (this._activeMentionConfig) {\r\n                this._updateList(this._activeMentionConfig);\r\n                this.savePosition(caret.index);\r\n                this._popup.option(\"position\", this._popupPosition);\r\n                this._searchValue = \"\";\r\n                this._popup.show()\r\n            }\r\n        }\r\n        _isMarkerPartOfText(retain) {\r\n            if (!retain || -1 !== ALLOWED_PREFIX_CHARS.indexOf(this._getCharByIndex(retain - 1))) {\r\n                return false\r\n            }\r\n            return true\r\n        }\r\n        _getCharByIndex(index) {\r\n            return this.quill.getContents(index, 1).ops[0].insert\r\n        }\r\n        _updateList(_ref3) {\r\n            var {\r\n                dataSource: dataSource,\r\n                displayExpr: displayExpr,\r\n                valueExpr: valueExpr,\r\n                itemTemplate: itemTemplate,\r\n                searchExpr: searchExpr\r\n            } = _ref3;\r\n            this.compileGetters({\r\n                displayExpr: displayExpr,\r\n                valueExpr: valueExpr\r\n            });\r\n            this._list.unselectAll();\r\n            this._list.option({\r\n                dataSource: dataSource,\r\n                displayExpr: displayExpr,\r\n                itemTemplate: itemTemplate,\r\n                searchExpr: searchExpr\r\n            })\r\n        }\r\n        _filterList(searchValue) {\r\n            if (!this._isMinSearchLengthExceeded(searchValue)) {\r\n                this._resetFilter();\r\n                return\r\n            }\r\n            var searchTimeout = this._activeMentionConfig.searchTimeout;\r\n            if (searchTimeout) {\r\n                clearTimeout(this._searchTimer);\r\n                this._searchTimer = setTimeout(() => {\r\n                    this._search(searchValue)\r\n                }, searchTimeout)\r\n            } else {\r\n                this._search(searchValue)\r\n            }\r\n        }\r\n        _isMinSearchLengthExceeded(searchValue) {\r\n            return searchValue.length >= this._activeMentionConfig.minSearchLength\r\n        }\r\n        _resetFilter() {\r\n            clearTimeout(this._searchTimer);\r\n            this._search(null)\r\n        }\r\n        _search(searchValue) {\r\n            this._hasSearch = true;\r\n            this._list.option(\"searchValue\", searchValue)\r\n        }\r\n        _focusFirstElement() {\r\n            if (!this._list) {\r\n                return\r\n            }\r\n            var $firstItem = this._activeListItems.first();\r\n            this._list.option(\"focusedElement\", Object(_core_element__WEBPACK_IMPORTED_MODULE_5__[\"getPublicElement\"])($firstItem));\r\n            this._list.scrollToItem($firstItem)\r\n        }\r\n        get _popupPosition() {\r\n            var position = this.getPosition();\r\n            var {\r\n                left: mentionLeft,\r\n                top: mentionTop,\r\n                height: mentionHeight\r\n            } = this.quill.getBounds(position ? position - 1 : position);\r\n            var {\r\n                left: leftOffset,\r\n                top: topOffset\r\n            } = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this.quill.root).offset();\r\n            var positionEvent = _events_core_events_engine__WEBPACK_IMPORTED_MODULE_6__[\"default\"].Event(\"positionEvent\", {\r\n                pageX: leftOffset + mentionLeft,\r\n                pageY: topOffset + mentionTop\r\n            });\r\n            return {\r\n                of: positionEvent,\r\n                offset: {\r\n                    v: mentionHeight\r\n                },\r\n                my: \"top left\",\r\n                at: \"top left\",\r\n                collision: {\r\n                    y: \"flip\",\r\n                    x: \"flipfit\"\r\n                }\r\n            }\r\n        }\r\n        _getPopupConfig() {\r\n            return Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_4__[\"extend\"])(super._getPopupConfig(), {\r\n                hideOnParentScroll: false,\r\n                onShown: () => {\r\n                    this._isMentionActive = true;\r\n                    this._hasSearch = false;\r\n                    this._focusFirstElement()\r\n                },\r\n                onHidden: () => {\r\n                    this._list.unselectAll();\r\n                    this._list.option(\"focusedElement\", null);\r\n                    this._isMentionActive = false;\r\n                    this._search(null)\r\n                },\r\n                focusStateEnabled: false\r\n            })\r\n        }\r\n        get _activeListItems() {\r\n            return this._list.itemElements().filter(\":not(.\".concat(DISABLED_STATE_CLASS, \")\"))\r\n        }\r\n        clean() {\r\n            Object.keys(this._mentions).forEach(marker => {\r\n                if (this._mentions[marker].template) {\r\n                    _formats_mention__WEBPACK_IMPORTED_MODULE_9__[\"default\"].removeTemplate(marker)\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (MentionModule);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/devextreme/esm/ui/html_editor/modules/mentions.js\n");

/***/ }),

/***/ "./node_modules/devextreme/esm/ui/html_editor/modules/popup.js":
/*!*********************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/html_editor/modules/popup.js ***!
  \*********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_utils_size__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/utils/size */ \"./node_modules/devextreme/esm/core/utils/size.js\");\n/* harmony import */ var devextreme_quill__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! devextreme-quill */ \"./node_modules/devextreme-quill/dist/dx-quill.js\");\n/* harmony import */ var devextreme_quill__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(devextreme_quill__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../core/renderer */ \"./node_modules/devextreme/esm/core/renderer.js\");\n/* harmony import */ var _core_utils_extend__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../core/utils/extend */ \"./node_modules/devextreme/esm/core/utils/extend.js\");\n/* harmony import */ var _core_utils_window__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../core/utils/window */ \"./node_modules/devextreme/esm/core/utils/window.js\");\n/* harmony import */ var _events_core_events_engine__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../events/core/events_engine */ \"./node_modules/devextreme/esm/events/core/events_engine.js\");\n/* harmony import */ var _events_utils_index__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../events/utils/index */ \"./node_modules/devextreme/esm/events/utils/index.js\");\n/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./base */ \"./node_modules/devextreme/esm/ui/html_editor/modules/base.js\");\n/* harmony import */ var _popup__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../popup */ \"./node_modules/devextreme/esm/ui/popup.js\");\n/* harmony import */ var _list_light__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../list_light */ \"./node_modules/devextreme/esm/ui/list_light.js\");\n/**\r\n * DevExtreme (esm/ui/html_editor/modules/popup.js)\r\n * Version: 21.2.7\r\n * Build date: Mon Apr 11 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nvar MODULE_NAMESPACE = \"dxHtmlEditorPopupModule\";\r\nvar ListPopupModule = _base__WEBPACK_IMPORTED_MODULE_7__[\"default\"];\r\nif (devextreme_quill__WEBPACK_IMPORTED_MODULE_1___default.a) {\r\n    var SUGGESTION_LIST_CLASS = \"dx-suggestion-list\";\r\n    var SUGGESTION_LIST_WRAPPER_CLASS = \"dx-suggestion-list-wrapper\";\r\n    var MIN_HEIGHT = 100;\r\n    ListPopupModule = class extends _base__WEBPACK_IMPORTED_MODULE_7__[\"default\"] {\r\n        _getDefaultOptions() {\r\n            return {\r\n                dataSource: null\r\n            }\r\n        }\r\n        constructor(quill, options) {\r\n            super(quill, options);\r\n            this.options = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_3__[\"extend\"])({}, this._getDefaultOptions(), options);\r\n            this._popup = this.renderPopup();\r\n            this._popup.$wrapper().addClass(SUGGESTION_LIST_WRAPPER_CLASS);\r\n            this._renderPreventFocusOut()\r\n        }\r\n        renderList($container, options) {\r\n            var $list = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\"<div>\").addClass(SUGGESTION_LIST_CLASS).appendTo($container);\r\n            this._list = this.options.editorInstance._createComponent($list, _list_light__WEBPACK_IMPORTED_MODULE_9__[\"default\"], options)\r\n        }\r\n        renderPopup() {\r\n            var editorInstance = this.options.editorInstance;\r\n            var $container = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\"<div>\").appendTo(editorInstance.$element());\r\n            var popupConfig = this._getPopupConfig();\r\n            return editorInstance._createComponent($container, _popup__WEBPACK_IMPORTED_MODULE_8__[\"default\"], popupConfig)\r\n        }\r\n        _getPopupConfig() {\r\n            return {\r\n                contentTemplate: contentElem => {\r\n                    var listConfig = this._getListConfig(this.options);\r\n                    this.renderList(Object(_core_renderer__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(contentElem), listConfig)\r\n                },\r\n                deferRendering: false,\r\n                onShown: () => {\r\n                    this._list.focus()\r\n                },\r\n                onHidden: () => {\r\n                    this._list.unselectAll();\r\n                    this._list.option(\"focusedElement\", null)\r\n                },\r\n                showTitle: false,\r\n                width: \"auto\",\r\n                height: \"auto\",\r\n                shading: false,\r\n                hideOnParentScroll: true,\r\n                closeOnOutsideClick: true,\r\n                animation: {\r\n                    show: {\r\n                        type: \"fade\",\r\n                        duration: 0,\r\n                        from: 0,\r\n                        to: 1\r\n                    },\r\n                    hide: {\r\n                        type: \"fade\",\r\n                        duration: 400,\r\n                        from: 1,\r\n                        to: 0\r\n                    }\r\n                },\r\n                fullScreen: false,\r\n                maxHeight: this.maxHeight\r\n            }\r\n        }\r\n        _getListConfig(options) {\r\n            return {\r\n                dataSource: options.dataSource,\r\n                onSelectionChanged: this.selectionChangedHandler.bind(this),\r\n                selectionMode: \"single\",\r\n                pageLoadMode: \"scrollBottom\"\r\n            }\r\n        }\r\n        get maxHeight() {\r\n            var window = Object(_core_utils_window__WEBPACK_IMPORTED_MODULE_4__[\"getWindow\"])();\r\n            var windowHeight = window && Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__[\"getHeight\"])(window) || 0;\r\n            return Math.max(MIN_HEIGHT, .5 * windowHeight)\r\n        }\r\n        selectionChangedHandler(e) {\r\n            if (this._popup.option(\"visible\")) {\r\n                this._popup.hide();\r\n                this.insertEmbedContent(e)\r\n            }\r\n        }\r\n        _renderPreventFocusOut() {\r\n            var eventName = Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_6__[\"addNamespace\"])(\"mousedown\", MODULE_NAMESPACE);\r\n            _events_core_events_engine__WEBPACK_IMPORTED_MODULE_5__[\"default\"].on(this._popup.$wrapper(), eventName, e => {\r\n                e.preventDefault()\r\n            })\r\n        }\r\n        insertEmbedContent(selectionChangedEvent) {}\r\n        showPopup() {\r\n            this._popup && this._popup.show()\r\n        }\r\n        savePosition(position) {\r\n            this.caretPosition = position\r\n        }\r\n        getPosition() {\r\n            return this.caretPosition\r\n        }\r\n    }\r\n}\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (ListPopupModule);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/devextreme/esm/ui/html_editor/modules/popup.js\n");

/***/ }),

/***/ "./node_modules/devextreme/esm/ui/html_editor/modules/resizing.js":
/*!************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/html_editor/modules/resizing.js ***!
  \************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return ResizingModule; });\n/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/renderer */ \"./node_modules/devextreme/esm/core/renderer.js\");\n/* harmony import */ var _events_core_events_engine__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../events/core/events_engine */ \"./node_modules/devextreme/esm/events/core/events_engine.js\");\n/* harmony import */ var _events_click__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../events/click */ \"./node_modules/devextreme/esm/events/click.js\");\n/* harmony import */ var _events_utils_index__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../events/utils/index */ \"./node_modules/devextreme/esm/events/utils/index.js\");\n/* harmony import */ var _animation_translator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../animation/translator */ \"./node_modules/devextreme/esm/animation/translator.js\");\n/* harmony import */ var _core_devices__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../core/devices */ \"./node_modules/devextreme/esm/core/devices.js\");\n/* harmony import */ var _resizable__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../resizable */ \"./node_modules/devextreme/esm/ui/resizable.js\");\n/* harmony import */ var _core_utils_position__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../core/utils/position */ \"./node_modules/devextreme/esm/core/utils/position.js\");\n/* harmony import */ var devextreme_quill__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! devextreme-quill */ \"./node_modules/devextreme-quill/dist/dx-quill.js\");\n/* harmony import */ var devextreme_quill__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(devextreme_quill__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./base */ \"./node_modules/devextreme/esm/ui/html_editor/modules/base.js\");\n/* harmony import */ var _core_utils_size__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../core/utils/size */ \"./node_modules/devextreme/esm/core/utils/size.js\");\n/**\r\n * DevExtreme (esm/ui/html_editor/modules/resizing.js)\r\n * Version: 21.2.7\r\n * Build date: Mon Apr 11 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nvar DX_RESIZE_FRAME_CLASS = \"dx-resize-frame\";\r\nvar DX_TOUCH_DEVICE_CLASS = \"dx-touch-device\";\r\nvar MODULE_NAMESPACE = \"dxHtmlResizingModule\";\r\nvar KEYDOWN_EVENT = Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_3__[\"addNamespace\"])(\"keydown\", MODULE_NAMESPACE);\r\nvar SCROLL_EVENT = Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_3__[\"addNamespace\"])(\"scroll\", MODULE_NAMESPACE);\r\nvar MOUSEDOWN_EVENT = Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_3__[\"addNamespace\"])(\"mousedown\", MODULE_NAMESPACE);\r\nvar FRAME_PADDING = 1;\r\nclass ResizingModule extends _base__WEBPACK_IMPORTED_MODULE_9__[\"default\"] {\r\n    constructor(quill, options) {\r\n        super(quill, options);\r\n        this.allowedTargets = options.allowedTargets || [\"image\"];\r\n        this.enabled = !!options.enabled;\r\n        this._hideFrameWithContext = this.hideFrame.bind(this);\r\n        this._framePositionChangedHandler = this._prepareFramePositionChangedHandler();\r\n        if (this.enabled) {\r\n            this._attachEvents();\r\n            this._createResizeFrame()\r\n        }\r\n    }\r\n    _attachEvents() {\r\n        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_1__[\"default\"].on(this.quill.root, Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_3__[\"addNamespace\"])(_events_click__WEBPACK_IMPORTED_MODULE_2__[\"name\"], MODULE_NAMESPACE), this._clickHandler.bind(this));\r\n        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_1__[\"default\"].on(this.quill.root, SCROLL_EVENT, this._framePositionChangedHandler);\r\n        this.editorInstance.on(\"focusOut\", this._hideFrameWithContext);\r\n        this.quill.on(\"text-change\", this._framePositionChangedHandler)\r\n    }\r\n    _detachEvents() {\r\n        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_1__[\"default\"].off(this.quill.root, MODULE_NAMESPACE);\r\n        this.editorInstance.off(\"focusOut\", this._hideFrameWithContext);\r\n        this.quill.off(\"text-change\", this._framePositionChangedHandler)\r\n    }\r\n    _clickHandler(e) {\r\n        if (this._isAllowedTarget(e.target)) {\r\n            if (this._$target === e.target) {\r\n                return\r\n            }\r\n            this._$target = e.target;\r\n            var $target = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this._$target);\r\n            var minWidth = Math.max(Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_10__[\"getOuterWidth\"])($target) - Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_10__[\"getWidth\"])($target), this.resizable.option(\"minWidth\"));\r\n            var minHeight = Math.max(Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_10__[\"getOuterHeight\"])($target) - Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_10__[\"getHeight\"])($target), this.resizable.option(\"minHeight\"));\r\n            this.resizable.option({\r\n                minWidth: minWidth,\r\n                minHeight: minHeight\r\n            });\r\n            this.updateFramePosition();\r\n            this.showFrame();\r\n            this._adjustSelection()\r\n        } else if (this._$target) {\r\n            this.hideFrame()\r\n        }\r\n    }\r\n    _prepareFramePositionChangedHandler(e) {\r\n        return () => {\r\n            if (this._$target) {\r\n                this.updateFramePosition()\r\n            }\r\n        }\r\n    }\r\n    _adjustSelection() {\r\n        if (!this.quill.getSelection()) {\r\n            this.quill.setSelection(0, 0)\r\n        }\r\n    }\r\n    _isAllowedTarget(targetElement) {\r\n        return this._isImage(targetElement)\r\n    }\r\n    _isImage(targetElement) {\r\n        return -1 !== this.allowedTargets.indexOf(\"image\") && \"IMG\" === targetElement.tagName.toUpperCase()\r\n    }\r\n    showFrame() {\r\n        this._$resizeFrame.show();\r\n        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_1__[\"default\"].on(this.quill.root, KEYDOWN_EVENT, this._handleFrameKeyDown.bind(this))\r\n    }\r\n    _handleFrameKeyDown(e) {\r\n        var keyName = Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_3__[\"normalizeKeyName\"])(e);\r\n        if (\"del\" === keyName || \"backspace\" === keyName) {\r\n            this._deleteImage()\r\n        }\r\n        this.hideFrame()\r\n    }\r\n    hideFrame() {\r\n        this._$target = null;\r\n        this._$resizeFrame.hide();\r\n        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_1__[\"default\"].off(this.quill.root, KEYDOWN_EVENT)\r\n    }\r\n    updateFramePosition() {\r\n        var {\r\n            height: height,\r\n            width: width,\r\n            top: targetTop,\r\n            left: targetLeft\r\n        } = Object(_core_utils_position__WEBPACK_IMPORTED_MODULE_7__[\"getBoundingRect\"])(this._$target);\r\n        var {\r\n            top: containerTop,\r\n            left: containerLeft\r\n        } = Object(_core_utils_position__WEBPACK_IMPORTED_MODULE_7__[\"getBoundingRect\"])(this.quill.root);\r\n        var borderWidth = this._getBorderWidth();\r\n        this._$resizeFrame.css({\r\n            height: height,\r\n            width: width,\r\n            padding: FRAME_PADDING,\r\n            top: targetTop - containerTop - borderWidth - FRAME_PADDING,\r\n            left: targetLeft - containerLeft - borderWidth - FRAME_PADDING\r\n        });\r\n        Object(_animation_translator__WEBPACK_IMPORTED_MODULE_4__[\"move\"])(this._$resizeFrame, {\r\n            left: 0,\r\n            top: 0\r\n        })\r\n    }\r\n    _getBorderWidth() {\r\n        return parseInt(this._$resizeFrame.css(\"borderTopWidth\"))\r\n    }\r\n    _createResizeFrame() {\r\n        if (this._$resizeFrame) {\r\n            return\r\n        }\r\n        var {\r\n            deviceType: deviceType\r\n        } = _core_devices__WEBPACK_IMPORTED_MODULE_5__[\"default\"].current();\r\n        this._$resizeFrame = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"<div>\").addClass(DX_RESIZE_FRAME_CLASS).toggleClass(DX_TOUCH_DEVICE_CLASS, \"desktop\" !== deviceType).appendTo(this.editorInstance._getQuillContainer()).hide();\r\n        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_1__[\"default\"].on(this._$resizeFrame, MOUSEDOWN_EVENT, e => {\r\n            e.preventDefault()\r\n        });\r\n        this.resizable = this.editorInstance._createComponent(this._$resizeFrame, _resizable__WEBPACK_IMPORTED_MODULE_6__[\"default\"], {\r\n            _keepAspectRatio: true,\r\n            onResize: e => {\r\n                if (!this._$target) {\r\n                    return\r\n                }\r\n                Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this._$target).attr({\r\n                    height: e.height,\r\n                    width: e.width\r\n                });\r\n                this.updateFramePosition()\r\n            }\r\n        })\r\n    }\r\n    _deleteImage() {\r\n        if (this._isAllowedTarget(this._$target)) {\r\n            var _Quill$find;\r\n            null === (_Quill$find = devextreme_quill__WEBPACK_IMPORTED_MODULE_8___default.a.find(this._$target)) || void 0 === _Quill$find ? void 0 : _Quill$find.deleteAt(0)\r\n        }\r\n    }\r\n    option(option, value) {\r\n        if (\"mediaResizing\" === option) {\r\n            this.handleOptionChangeValue(value);\r\n            return\r\n        }\r\n        if (\"enabled\" === option) {\r\n            this.enabled = value;\r\n            value ? this._attachEvents() : this._detachEvents()\r\n        } else if (\"allowedTargets\" === option && Array.isArray(value)) {\r\n            this.allowedTargets = value\r\n        }\r\n    }\r\n    clean() {\r\n        this._detachEvents();\r\n        this._$resizeFrame.remove();\r\n        this._$resizeFrame = void 0\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/devextreme/esm/ui/html_editor/modules/resizing.js\n");

/***/ }),

/***/ "./node_modules/devextreme/esm/ui/html_editor/modules/tableContextMenu.js":
/*!********************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/html_editor/modules/tableContextMenu.js ***!
  \********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var devextreme_quill__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devextreme-quill */ \"./node_modules/devextreme-quill/dist/dx-quill.js\");\n/* harmony import */ var devextreme_quill__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(devextreme_quill__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core/renderer */ \"./node_modules/devextreme/esm/core/renderer.js\");\n/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./base */ \"./node_modules/devextreme/esm/ui/html_editor/modules/base.js\");\n/* harmony import */ var _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../events/core/events_engine */ \"./node_modules/devextreme/esm/events/core/events_engine.js\");\n/* harmony import */ var _events_utils_index__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../events/utils/index */ \"./node_modules/devextreme/esm/events/utils/index.js\");\n/* harmony import */ var _context_menu__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../context_menu */ \"./node_modules/devextreme/esm/ui/context_menu.js\");\n/* harmony import */ var _localization_message__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../localization/message */ \"./node_modules/devextreme/esm/localization/message.js\");\n/* harmony import */ var _utils_table_helper__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/table_helper */ \"./node_modules/devextreme/esm/ui/html_editor/utils/table_helper.js\");\n/* harmony import */ var _utils_toolbar_helper__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/toolbar_helper */ \"./node_modules/devextreme/esm/ui/html_editor/utils/toolbar_helper.js\");\n/* harmony import */ var _core_utils_iterator__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../core/utils/iterator */ \"./node_modules/devextreme/esm/core/utils/iterator.js\");\n/* harmony import */ var _core_utils_type__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../core/utils/type */ \"./node_modules/devextreme/esm/core/utils/type.js\");\n/* harmony import */ var _core_utils_inflector__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../core/utils/inflector */ \"./node_modules/devextreme/esm/core/utils/inflector.js\");\n/* harmony import */ var _core_utils_extend__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../core/utils/extend */ \"./node_modules/devextreme/esm/core/utils/extend.js\");\n/**\r\n * DevExtreme (esm/ui/html_editor/modules/tableContextMenu.js)\r\n * Version: 21.2.7\r\n * Build date: Mon Apr 11 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nvar MODULE_NAMESPACE = \"dxHtmlEditorTableContextMenu\";\r\nvar CONTEXT_MENU_EVENT = Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_4__[\"addNamespace\"])(\"dxcontextmenu\", MODULE_NAMESPACE);\r\nvar TableContextMenuModule = _base__WEBPACK_IMPORTED_MODULE_2__[\"default\"];\r\nvar localize = name => _localization_message__WEBPACK_IMPORTED_MODULE_6__[\"default\"].format(\"dxHtmlEditor-\".concat(Object(_core_utils_inflector__WEBPACK_IMPORTED_MODULE_11__[\"camelize\"])(name)));\r\nif (devextreme_quill__WEBPACK_IMPORTED_MODULE_0___default.a) {\r\n    TableContextMenuModule = class extends _base__WEBPACK_IMPORTED_MODULE_2__[\"default\"] {\r\n        constructor(quill, options) {\r\n            super(quill, options);\r\n            this.enabled = !!options.enabled;\r\n            this._quillContainer = this.editorInstance._getQuillContainer();\r\n            this.addCleanCallback(this.prepareCleanCallback());\r\n            this._formatHandlers = Object(_utils_toolbar_helper__WEBPACK_IMPORTED_MODULE_8__[\"getFormatHandlers\"])(this);\r\n            this._tableFormats = Object(_utils_table_helper__WEBPACK_IMPORTED_MODULE_7__[\"getTableFormats\"])(quill);\r\n            if (this.enabled) {\r\n                this._enableContextMenu(options.items)\r\n            }\r\n        }\r\n        _enableContextMenu(items) {\r\n            var _this$_contextMenu;\r\n            null === (_this$_contextMenu = this._contextMenu) || void 0 === _this$_contextMenu ? void 0 : _this$_contextMenu.dispose();\r\n            this._contextMenu = this._createContextMenu(items);\r\n            this._attachEvents()\r\n        }\r\n        _attachEvents() {\r\n            _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__[\"default\"].on(this.editorInstance._getContent(), CONTEXT_MENU_EVENT, this._prepareContextMenuHandler())\r\n        }\r\n        _detachEvents() {\r\n            _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__[\"default\"].off(this.editorInstance._getContent(), CONTEXT_MENU_EVENT)\r\n        }\r\n        _createContextMenu(items) {\r\n            var $container = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\"<div>\").appendTo(this.editorInstance.$element());\r\n            var menuConfig = this._getMenuConfig(items);\r\n            return this.editorInstance._createComponent($container, _context_menu__WEBPACK_IMPORTED_MODULE_5__[\"default\"], menuConfig)\r\n        }\r\n        showPropertiesForm() {\r\n            var type = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : \"cell\";\r\n            var $element = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(this._targetElement).closest(\"cell\" === type ? \"th, td\" : \"table\");\r\n            this._contextMenu.hide();\r\n            this._formatHandlers[\"\".concat(type, \"Properties\")]($element);\r\n            this._targetElement = null\r\n        }\r\n        _isAcceptableItem(widget, acceptableWidgetName) {\r\n            return !widget || widget === acceptableWidgetName\r\n        }\r\n        _handleObjectItem(item) {\r\n            if (item.name && this._isAcceptableItem(item.widget, \"dxButton\")) {\r\n                var defaultButtonItemConfig = this._prepareMenuItemConfig(item.name);\r\n                var buttonItemConfig = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_12__[\"extend\"])(true, defaultButtonItemConfig, item);\r\n                return buttonItemConfig\r\n            } else if (item.items) {\r\n                item.items = this._prepareMenuItems(item.items);\r\n                return item\r\n            } else {\r\n                return item\r\n            }\r\n        }\r\n        _prepareMenuItemConfig(name) {\r\n            var _ICON_MAP$name, _this$_formatHandlers;\r\n            var iconName = null !== (_ICON_MAP$name = _utils_toolbar_helper__WEBPACK_IMPORTED_MODULE_8__[\"ICON_MAP\"][name]) && void 0 !== _ICON_MAP$name ? _ICON_MAP$name : name;\r\n            var buttonText = Object(_core_utils_inflector__WEBPACK_IMPORTED_MODULE_11__[\"titleize\"])(name);\r\n            return {\r\n                text: localize(buttonText),\r\n                icon: iconName.toLowerCase(),\r\n                onClick: null !== (_this$_formatHandlers = this._formatHandlers[name]) && void 0 !== _this$_formatHandlers ? _this$_formatHandlers : Object(_utils_toolbar_helper__WEBPACK_IMPORTED_MODULE_8__[\"getDefaultClickHandler\"])(this, name)\r\n            }\r\n        }\r\n        _prepareMenuItems(items) {\r\n            var resultItems = [];\r\n            Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_9__[\"each\"])(items, (_, item) => {\r\n                var newItem;\r\n                if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_10__[\"isObject\"])(item)) {\r\n                    newItem = this._handleObjectItem(item)\r\n                } else if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_10__[\"isString\"])(item)) {\r\n                    newItem = this._prepareMenuItemConfig(item)\r\n                }\r\n                if (newItem) {\r\n                    resultItems.push(newItem)\r\n                }\r\n            });\r\n            return resultItems\r\n        }\r\n        _getMenuConfig(items) {\r\n            var defaultItems = [{\r\n                text: localize(\"insert\"),\r\n                items: [\"insertHeaderRow\", \"insertRowAbove\", \"insertRowBelow\", Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_12__[\"extend\"])(this._prepareMenuItemConfig(\"insertColumnLeft\"), {\r\n                    beginGroup: true\r\n                }), \"insertColumnRight\"]\r\n            }, {\r\n                text: localize(\"delete\"),\r\n                items: [\"deleteColumn\", \"deleteRow\", \"deleteTable\"]\r\n            }, Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_12__[\"extend\"])(this._prepareMenuItemConfig(\"cellProperties\"), {\r\n                onClick: e => {\r\n                    this.showPropertiesForm(\"cell\")\r\n                }\r\n            }), Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_12__[\"extend\"])(this._prepareMenuItemConfig(\"tableProperties\"), {\r\n                onClick: e => {\r\n                    this.showPropertiesForm(\"table\")\r\n                }\r\n            })];\r\n            var customItems = this._prepareMenuItems(null !== items && void 0 !== items && items.length ? items : defaultItems);\r\n            return {\r\n                target: this._quillContainer,\r\n                showEvent: null,\r\n                hideOnParentScroll: false,\r\n                items: customItems\r\n            }\r\n        }\r\n        _prepareContextMenuHandler() {\r\n            return event => {\r\n                if (this._isTableTarget(event.target)) {\r\n                    this._targetElement = event.target;\r\n                    this._setContextMenuPosition(event);\r\n                    this._contextMenu.show();\r\n                    event.preventDefault()\r\n                }\r\n            }\r\n        }\r\n        _setContextMenuPosition(event) {\r\n            var startPosition = this._quillContainer.get(0).getBoundingClientRect();\r\n            this._contextMenu.option({\r\n                position: {\r\n                    my: \"left top\",\r\n                    at: \"left top\",\r\n                    collision: \"fit fit\",\r\n                    offset: {\r\n                        x: event.clientX - startPosition.left,\r\n                        y: event.clientY - startPosition.top\r\n                    }\r\n                }\r\n            })\r\n        }\r\n        _isTableTarget(targetElement) {\r\n            return !!Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(targetElement).closest(\".dx-htmleditor-content td, .dx-htmleditor-content th\").length\r\n        }\r\n        clean() {\r\n            this._detachEvents()\r\n        }\r\n        option(option, value) {\r\n            if (\"tableContextMenu\" === option) {\r\n                this.handleOptionChangeValue(value);\r\n                return\r\n            }\r\n            if (\"enabled\" === option) {\r\n                this.enabled = value;\r\n                value ? this._enableContextMenu() : this.clean()\r\n            } else if (\"items\" === option) {\r\n                var _this$_contextMenu2;\r\n                null === (_this$_contextMenu2 = this._contextMenu) || void 0 === _this$_contextMenu2 ? void 0 : _this$_contextMenu2.dispose();\r\n                this._contextMenu = this._createContextMenu(value)\r\n            }\r\n        }\r\n        prepareCleanCallback() {\r\n            return () => {\r\n                this.clean()\r\n            }\r\n        }\r\n    }\r\n}\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (TableContextMenuModule);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/devextreme/esm/ui/html_editor/modules/tableContextMenu.js\n");

/***/ }),

/***/ "./node_modules/devextreme/esm/ui/html_editor/modules/tableResizing.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/html_editor/modules/tableResizing.js ***!
  \*****************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return TableResizingModule; });\n/* harmony import */ var _core_utils_size__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/utils/size */ \"./node_modules/devextreme/esm/core/utils/size.js\");\n/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core/renderer */ \"./node_modules/devextreme/esm/core/renderer.js\");\n/* harmony import */ var _events_core_events_engine__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../events/core/events_engine */ \"./node_modules/devextreme/esm/events/core/events_engine.js\");\n/* harmony import */ var _core_utils_type__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../core/utils/type */ \"./node_modules/devextreme/esm/core/utils/type.js\");\n/* harmony import */ var _events_utils_index__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../events/utils/index */ \"./node_modules/devextreme/esm/events/utils/index.js\");\n/* harmony import */ var _core_utils_resize_callbacks__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../core/utils/resize_callbacks */ \"./node_modules/devextreme/esm/core/utils/resize_callbacks.js\");\n/* harmony import */ var _animation_translator__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../animation/translator */ \"./node_modules/devextreme/esm/animation/translator.js\");\n/* harmony import */ var _core_utils_position__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../core/utils/position */ \"./node_modules/devextreme/esm/core/utils/position.js\");\n/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./base */ \"./node_modules/devextreme/esm/ui/html_editor/modules/base.js\");\n/* harmony import */ var _draggable__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../draggable */ \"./node_modules/devextreme/esm/ui/draggable.js\");\n/* harmony import */ var _core_utils_iterator__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../core/utils/iterator */ \"./node_modules/devextreme/esm/core/utils/iterator.js\");\n/* harmony import */ var _core_utils_window__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../core/utils/window */ \"./node_modules/devextreme/esm/core/utils/window.js\");\n/* harmony import */ var _core_utils_extend__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../core/utils/extend */ \"./node_modules/devextreme/esm/core/utils/extend.js\");\n/* harmony import */ var _utils_table_helper__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../utils/table_helper */ \"./node_modules/devextreme/esm/ui/html_editor/utils/table_helper.js\");\n/**\r\n * DevExtreme (esm/ui/html_editor/modules/tableResizing.js)\r\n * Version: 21.2.7\r\n * Build date: Mon Apr 11 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nvar DX_COLUMN_RESIZE_FRAME_CLASS = \"dx-table-resize-frame\";\r\nvar DX_COLUMN_RESIZER_CLASS = \"dx-htmleditor-column-resizer\";\r\nvar DX_ROW_RESIZER_CLASS = \"dx-htmleditor-row-resizer\";\r\nvar DEFAULTS = {\r\n    minColumnWidth: 40,\r\n    minRowHeight: 24\r\n};\r\nvar DRAGGABLE_ELEMENT_OFFSET = 2;\r\nvar ROUGH_OFFSET = 3;\r\nvar MODULE_NAMESPACE = \"dxHtmlTableResizingModule\";\r\nvar POINTERDOWN_EVENT = Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_4__[\"addNamespace\"])(\"dxpointerdown\", MODULE_NAMESPACE);\r\nvar SCROLL_EVENT = Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_4__[\"addNamespace\"])(\"scroll\", MODULE_NAMESPACE);\r\nclass TableResizingModule extends _base__WEBPACK_IMPORTED_MODULE_8__[\"default\"] {\r\n    constructor(quill, options) {\r\n        super(quill, options);\r\n        this.enabled = !!options.enabled;\r\n        this._tableResizeFrames = [];\r\n        this._minColumnWidth = this._minSizeLimit(\"minColumnWidth\", options.minColumnWidth);\r\n        this._minRowHeight = this._minSizeLimit(\"minRowHeight\", options.minRowHeight);\r\n        this._quillContainer = this.editorInstance._getQuillContainer();\r\n        this._tableData = [];\r\n        if (this.enabled) {\r\n            this._applyResizing()\r\n        }\r\n    }\r\n    _applyResizing(forcedStart) {\r\n        if (forcedStart) {\r\n            this._applyResizingImpl()\r\n        } else {\r\n            this.editorInstance.addContentInitializedCallback(this._applyResizingImpl.bind(this))\r\n        }\r\n        this.addCleanCallback(this.clean.bind(this));\r\n        this._resizeHandlerWithContext = _core_utils_resize_callbacks__WEBPACK_IMPORTED_MODULE_5__[\"default\"].add(this._resizeHandler.bind(this))\r\n    }\r\n    _minSizeLimit(propertyName, newValue) {\r\n        return Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_3__[\"isDefined\"])(newValue) ? Math.max(newValue, 0) : DEFAULTS[propertyName]\r\n    }\r\n    _applyResizingImpl() {\r\n        var $tables = this._findTables();\r\n        if ($tables.length) {\r\n            this._fixTablesWidths($tables);\r\n            this._createResizeFrames($tables);\r\n            this._updateFramesPositions();\r\n            this._updateFramesSeparators()\r\n        }\r\n        this._attachEvents()\r\n    }\r\n    _attachEvents() {\r\n        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_2__[\"default\"].on(this.editorInstance._getContent(), SCROLL_EVENT, this._updateFramesPositions.bind(this));\r\n        this.quill.on(\"text-change\", this._getQuillTextChangeHandler())\r\n    }\r\n    _detachEvents() {\r\n        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_2__[\"default\"].off(this.editorInstance._getContent(), MODULE_NAMESPACE);\r\n        this.quill.off(\"text-change\", this._quillTextChangeHandler)\r\n    }\r\n    _getQuillTextChangeHandler(delta, oldContent, source) {\r\n        return (delta, oldContent, source) => {\r\n            if (this._isTableChanging()) {\r\n                var $tables = this._findTables();\r\n                this._removeResizeFrames();\r\n                if (\"api\" === source) {\r\n                    this._fixTablesWidths($tables)\r\n                }\r\n                this._updateTablesColumnsWidth($tables);\r\n                this._createResizeFrames($tables);\r\n                this._updateFramesPositions();\r\n                this._updateFramesSeparators()\r\n            } else {\r\n                this._updateFramesPositions();\r\n                if (!this._isDragging) {\r\n                    this._updateFramesSeparators()\r\n                }\r\n            }\r\n        }\r\n    }\r\n    _getFrameForTable($table) {\r\n        var _this$_framesForTable;\r\n        return null === (_this$_framesForTable = this._framesForTables) || void 0 === _this$_framesForTable ? void 0 : _this$_framesForTable.get($table.get(0))\r\n    }\r\n    _resizeHandler() {\r\n        this._windowResizeTimeout = setTimeout(() => {\r\n            var $tables = this._findTables();\r\n            Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_10__[\"each\"])($tables, (index, table) => {\r\n                var $table = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(table);\r\n                var frame = this._tableResizeFrames[index];\r\n                var actualTableWidth = Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__[\"getOuterWidth\"])($table);\r\n                var lastTableWidth = this._tableLastWidth(frame);\r\n                if (Math.abs(actualTableWidth - lastTableWidth) > 1) {\r\n                    this._tableLastWidth(frame, actualTableWidth);\r\n                    this._updateColumnsWidth($table, index)\r\n                }\r\n            });\r\n            this._updateFramesPositions();\r\n            this._updateFramesSeparators()\r\n        })\r\n    }\r\n    _findTables() {\r\n        return Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(this._quillContainer).find(\"table\")\r\n    }\r\n    _getWidthStyleValue($element) {\r\n        var styleValue = $element[0].style.width;\r\n        return \"\" !== styleValue ? parseInt(styleValue) : void 0\r\n    }\r\n    _tableLastWidth(frame, newValue) {\r\n        if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_3__[\"isDefined\"])(newValue)) {\r\n            frame.lastWidth = newValue\r\n        } else {\r\n            return null === frame || void 0 === frame ? void 0 : frame.lastWidth\r\n        }\r\n    }\r\n    _fixTablesWidths($tables) {\r\n        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_10__[\"each\"])($tables, (index, table) => {\r\n            var $table = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(table);\r\n            var $columnElements = this._getTableDeterminantElements($table, \"horizontal\");\r\n            if (!this._tableResizeFrames[index]) {\r\n                this._tableResizeFrames[index] = {\r\n                    lastWidth: void 0\r\n                }\r\n            }\r\n            var frame = this._getFrameForTable($table);\r\n            if (!frame) {\r\n                this._tableResizeFrames.push({\r\n                    $table: $table\r\n                })\r\n            }\r\n            if (0 === Object(_utils_table_helper__WEBPACK_IMPORTED_MODULE_13__[\"getAutoSizedElements\"])($table).length) {\r\n                var _this$_tableLastWidth;\r\n                var {\r\n                    columnsSum: columnsSum\r\n                } = this._getColumnElementsSum($columnElements);\r\n                Object(_utils_table_helper__WEBPACK_IMPORTED_MODULE_13__[\"unfixTableWidth\"])($table, {\r\n                    quill: this.quill\r\n                });\r\n                var tableWidth = null !== (_this$_tableLastWidth = this._tableLastWidth(frame)) && void 0 !== _this$_tableLastWidth ? _this$_tableLastWidth : Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__[\"getOuterWidth\"])($table);\r\n                if (frame) {\r\n                    this._tableLastWidth(frame, Math.max(columnsSum, tableWidth))\r\n                }\r\n            }\r\n        })\r\n    }\r\n    _createResizeFrames($tables) {\r\n        this._framesForTables = new Map;\r\n        $tables.each((index, table) => {\r\n            var _this$_tableResizeFra;\r\n            var $table = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(table);\r\n            var $lastTable = null === (_this$_tableResizeFra = this._tableResizeFrames[index]) || void 0 === _this$_tableResizeFra ? void 0 : _this$_tableResizeFra.$table;\r\n            var $tableLastWidth = this._tableResizeFrames[index].lastWidth;\r\n            this._tableResizeFrames[index] = {\r\n                $frame: this._createTableResizeFrame(table),\r\n                $table: $table,\r\n                index: index,\r\n                lastWidth: $lastTable && table === $lastTable.get(0) ? $tableLastWidth : void 0,\r\n                columnsCount: this._getTableDeterminantElements($table, \"horizontal\").length,\r\n                rowsCount: this._getTableDeterminantElements($table, \"vertical\").length\r\n            };\r\n            this._framesForTables.set(table, this._tableResizeFrames[index])\r\n        });\r\n        this._tableResizeFrames.length = $tables.length\r\n    }\r\n    _isTableChanging() {\r\n        var $tables = this._findTables();\r\n        var result = false;\r\n        if ($tables.length !== this._tableResizeFrames.length) {\r\n            result = true\r\n        } else {\r\n            Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_10__[\"each\"])($tables, (index, table) => {\r\n                var $table = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(table);\r\n                var frame = this._tableResizeFrames[index];\r\n                var isColumnsCountChanged = (null === frame || void 0 === frame ? void 0 : frame.columnsCount) !== this._getTableDeterminantElements($table, \"horizontal\").length;\r\n                var isRowCountChanged = (null === frame || void 0 === frame ? void 0 : frame.rowsCount) !== this._getTableDeterminantElements($table, \"vertical\").length;\r\n                if (isColumnsCountChanged || isRowCountChanged) {\r\n                    result = true;\r\n                    return false\r\n                }\r\n            })\r\n        }\r\n        return result\r\n    }\r\n    _removeResizeFrames(clearArray) {\r\n        var _this$_framesForTable2;\r\n        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_10__[\"each\"])(this._tableResizeFrames, (index, resizeFrame) => {\r\n            if (resizeFrame.$frame) {\r\n                var _resizeFrame$$frame;\r\n                var resizerElementsSelector = \".\".concat(DX_COLUMN_RESIZER_CLASS, \", .\").concat(DX_ROW_RESIZER_CLASS);\r\n                this._detachSeparatorEvents(null === (_resizeFrame$$frame = resizeFrame.$frame) || void 0 === _resizeFrame$$frame ? void 0 : _resizeFrame$$frame.find(resizerElementsSelector));\r\n                resizeFrame.$frame.remove()\r\n            }\r\n        });\r\n        null === (_this$_framesForTable2 = this._framesForTables) || void 0 === _this$_framesForTable2 ? void 0 : _this$_framesForTable2.clear();\r\n        if (clearArray) {\r\n            this._tableResizeFrames = []\r\n        }\r\n    }\r\n    _detachSeparatorEvents($lineSeparators) {\r\n        $lineSeparators.each((i, $lineSeparator) => {\r\n            _events_core_events_engine__WEBPACK_IMPORTED_MODULE_2__[\"default\"].off($lineSeparator, POINTERDOWN_EVENT)\r\n        })\r\n    }\r\n    _createTableResizeFrame() {\r\n        return Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\"<div>\").addClass(DX_COLUMN_RESIZE_FRAME_CLASS).appendTo(this._quillContainer)\r\n    }\r\n    _updateFramesPositions() {\r\n        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_10__[\"each\"])(this._tableResizeFrames, (index, tableResizeFrame) => {\r\n            this._updateFramePosition(tableResizeFrame.$table, tableResizeFrame.$frame)\r\n        })\r\n    }\r\n    _updateFramePosition($table, $frame) {\r\n        var {\r\n            height: height,\r\n            width: width,\r\n            top: targetTop,\r\n            left: targetLeft\r\n        } = Object(_core_utils_position__WEBPACK_IMPORTED_MODULE_7__[\"getBoundingRect\"])($table.get(0));\r\n        var {\r\n            top: containerTop,\r\n            left: containerLeft\r\n        } = Object(_core_utils_position__WEBPACK_IMPORTED_MODULE_7__[\"getBoundingRect\"])(this.quill.root);\r\n        $frame.css({\r\n            height: height,\r\n            width: width,\r\n            top: targetTop - containerTop,\r\n            left: targetLeft - containerLeft\r\n        });\r\n        Object(_animation_translator__WEBPACK_IMPORTED_MODULE_6__[\"move\"])($frame, {\r\n            left: 0,\r\n            top: 0\r\n        })\r\n    }\r\n    _updateFramesSeparators(direction) {\r\n        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_10__[\"each\"])(this._tableResizeFrames, (index, frame) => {\r\n            if (direction) {\r\n                this._updateFrameSeparators(frame, direction)\r\n            } else {\r\n                this._updateFrameSeparators(frame, \"vertical\");\r\n                this._updateFrameSeparators(frame, \"horizontal\")\r\n            }\r\n        })\r\n    }\r\n    _isDraggable($element) {\r\n        return $element.hasClass(\"dx-draggable\") && $element.is(\":visible\")\r\n    }\r\n    _removeDraggable($currentLineSeparator, lineResizerClass) {\r\n        if (this._isDraggable($currentLineSeparator)) {\r\n            var draggable = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__[\"default\"])($currentLineSeparator).dxDraggable(\"instance\");\r\n            draggable.dispose();\r\n            Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__[\"default\"])($currentLineSeparator).addClass(lineResizerClass)\r\n        }\r\n    }\r\n    _getDirectionInfo(direction) {\r\n        if (\"vertical\" === direction) {\r\n            return {\r\n                lineResizerClass: DX_ROW_RESIZER_CLASS,\r\n                sizeFunction: x => Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__[\"getOuterHeight\"])(x),\r\n                positionCoordinate: \"top\",\r\n                positionStyleProperty: \"height\",\r\n                positionCoordinateName: \"y\"\r\n            }\r\n        } else {\r\n            return {\r\n                lineResizerClass: DX_COLUMN_RESIZER_CLASS,\r\n                sizeFunction: x => Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__[\"getOuterWidth\"])(x),\r\n                positionCoordinate: this.editorInstance.option(\"rtlEnabled\") ? \"right\" : \"left\",\r\n                positionStyleProperty: \"width\",\r\n                positionCoordinateName: \"x\"\r\n            }\r\n        }\r\n    }\r\n    _getSize($element, directionInfo) {\r\n        return directionInfo.sizeFunction($element)\r\n    }\r\n    _updateFrameSeparators(frame, direction) {\r\n        var $determinantElements = this._getTableDeterminantElements(frame.$table, direction);\r\n        var determinantElementsCount = $determinantElements.length;\r\n        var determinantElementsSeparatorsCount = determinantElementsCount - 1;\r\n        var directionInfo = this._getDirectionInfo(direction);\r\n        var lineSeparators = frame.$frame.find(\".\".concat(directionInfo.lineResizerClass));\r\n        var styleOptions = {\r\n            transform: \"none\"\r\n        };\r\n        var currentPosition = 0;\r\n        for (var i = 0; i <= determinantElementsSeparatorsCount; i++) {\r\n            currentPosition += this._getSize($determinantElements.eq(i), directionInfo);\r\n            if (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_3__[\"isDefined\"])(lineSeparators[i])) {\r\n                lineSeparators[i] = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\"<div>\").addClass(directionInfo.lineResizerClass).appendTo(frame.$frame).get(0)\r\n            }\r\n            var $currentLineSeparator = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(lineSeparators[i]);\r\n            this._removeDraggable($currentLineSeparator, directionInfo.lineResizerClass);\r\n            styleOptions[directionInfo.positionCoordinate] = currentPosition - DRAGGABLE_ELEMENT_OFFSET;\r\n            Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__[\"default\"])($currentLineSeparator).css(styleOptions);\r\n            var attachSeparatorData = {\r\n                lineSeparator: lineSeparators[i],\r\n                index: i,\r\n                $determinantElements: $determinantElements,\r\n                frame: frame,\r\n                direction: direction\r\n            };\r\n            this._attachColumnSeparatorEvents(attachSeparatorData)\r\n        }\r\n    }\r\n    _getTableDeterminantElements($table, direction) {\r\n        if (\"vertical\" === direction) {\r\n            return $table.find(\"th:first-child, td:first-child\")\r\n        } else {\r\n            return Object(_utils_table_helper__WEBPACK_IMPORTED_MODULE_13__[\"getColumnElements\"])($table)\r\n        }\r\n    }\r\n    _attachColumnSeparatorEvents(options) {\r\n        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_2__[\"default\"].on(options.lineSeparator, POINTERDOWN_EVENT, () => {\r\n            this._createDraggableElement(options)\r\n        })\r\n    }\r\n    _dragStartHandler(_ref) {\r\n        var {\r\n            $determinantElements: $determinantElements,\r\n            index: index,\r\n            frame: frame,\r\n            direction: direction,\r\n            lineSeparator: lineSeparator\r\n        } = _ref;\r\n        var directionInfo = this._getDirectionInfo(direction);\r\n        this._isDragging = true;\r\n        this._fixColumnsWidth(frame.$table);\r\n        this._startLineSize = parseInt(this._getSize(Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__[\"default\"])($determinantElements[index]), directionInfo));\r\n        this._startTableWidth = Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__[\"getOuterWidth\"])(frame.$table);\r\n        this._startLineSeparatorPosition = parseInt(Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(lineSeparator).css(directionInfo.positionCoordinate));\r\n        this._nextLineSize = 0;\r\n        if ($determinantElements[index + 1]) {\r\n            this._nextLineSize = parseInt(this._getSize(Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__[\"default\"])($determinantElements[index + 1]), directionInfo))\r\n        } else if (\"horizontal\" === direction) {\r\n            Object(_utils_table_helper__WEBPACK_IMPORTED_MODULE_13__[\"unfixTableWidth\"])(frame.$table, {\r\n                quill: this.quill\r\n            })\r\n        }\r\n    }\r\n    _shouldRevertOffset(direction) {\r\n        return \"horizontal\" === direction && this.editorInstance.option(\"rtlEnabled\")\r\n    }\r\n    _isNextColumnWidthEnough(nextColumnNewSize, $nextColumnElement, eventOffset) {\r\n        if (!this._nextLineSize) {\r\n            return true\r\n        } else if (nextColumnNewSize >= this._minColumnWidth) {\r\n            var isWidthIncreased = this._nextColumnOffsetLimit ? eventOffset < this._nextColumnOffsetLimit : eventOffset < 0;\r\n            var isWidthLimited = Math.abs(this._getWidthStyleValue($nextColumnElement) - Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__[\"getOuterWidth\"])($nextColumnElement)) > ROUGH_OFFSET;\r\n            return isWidthIncreased || !isWidthLimited\r\n        }\r\n        return false\r\n    }\r\n    _shouldSetNextColumnWidth(nextColumnNewSize) {\r\n        return this._nextLineSize && nextColumnNewSize > 0\r\n    }\r\n    _horizontalDragHandler(_ref2) {\r\n        var {\r\n            currentLineNewSize: currentLineNewSize,\r\n            directionInfo: directionInfo,\r\n            eventOffset: eventOffset,\r\n            $determinantElements: $determinantElements,\r\n            index: index,\r\n            frame: frame\r\n        } = _ref2;\r\n        var nextColumnNewSize = this._nextLineSize && this._nextLineSize - eventOffset;\r\n        var isCurrentColumnWidthEnough = currentLineNewSize >= this._minColumnWidth;\r\n        var $lineElements = Object(_utils_table_helper__WEBPACK_IMPORTED_MODULE_13__[\"getLineElements\"])(frame.$table, index);\r\n        var $nextLineElements = Object(_utils_table_helper__WEBPACK_IMPORTED_MODULE_13__[\"getLineElements\"])(frame.$table, index + 1);\r\n        var realWidthDiff = Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__[\"getOuterWidth\"])($lineElements.eq(0)) - currentLineNewSize;\r\n        if (isCurrentColumnWidthEnough) {\r\n            if (this._isNextColumnWidthEnough(nextColumnNewSize, $determinantElements.eq(index + 1), eventOffset)) {\r\n                Object(_utils_table_helper__WEBPACK_IMPORTED_MODULE_13__[\"setLineElementsFormat\"])(this, {\r\n                    elements: $lineElements,\r\n                    property: directionInfo.positionStyleProperty,\r\n                    value: currentLineNewSize\r\n                });\r\n                if (this._shouldSetNextColumnWidth(nextColumnNewSize)) {\r\n                    Object(_utils_table_helper__WEBPACK_IMPORTED_MODULE_13__[\"setLineElementsFormat\"])(this, {\r\n                        elements: $nextLineElements,\r\n                        property: directionInfo.positionStyleProperty,\r\n                        value: nextColumnNewSize\r\n                    })\r\n                }\r\n                var isTableWidthChanged = Math.abs(this._startTableWidth - Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__[\"getOuterWidth\"])(frame.$table)) < ROUGH_OFFSET;\r\n                var shouldRevertNewValue = Math.abs(realWidthDiff) > ROUGH_OFFSET || !this._nextLineSize && isTableWidthChanged;\r\n                if (shouldRevertNewValue) {\r\n                    Object(_utils_table_helper__WEBPACK_IMPORTED_MODULE_13__[\"setLineElementsFormat\"])(this, {\r\n                        elements: $lineElements,\r\n                        property: directionInfo.positionStyleProperty,\r\n                        value: Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__[\"getOuterWidth\"])($lineElements.eq(0))\r\n                    });\r\n                    nextColumnNewSize += currentLineNewSize - Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__[\"getOuterWidth\"])($lineElements.eq(0));\r\n                    if (this._shouldSetNextColumnWidth(nextColumnNewSize)) {\r\n                        Object(_utils_table_helper__WEBPACK_IMPORTED_MODULE_13__[\"setLineElementsFormat\"])(this, {\r\n                            elements: $nextLineElements,\r\n                            property: directionInfo.positionStyleProperty,\r\n                            value: nextColumnNewSize\r\n                        })\r\n                    }\r\n                }\r\n            } else {\r\n                this._nextColumnOffsetLimit = this._nextColumnOffsetLimit || eventOffset\r\n            }\r\n        }\r\n        this._$highlightedElement.css(directionInfo.positionCoordinate, this._startLineSeparatorPosition + eventOffset + realWidthDiff + \"px\")\r\n    }\r\n    _verticalDragHandler(_ref3) {\r\n        var {\r\n            currentLineNewSize: currentLineNewSize,\r\n            directionInfo: directionInfo,\r\n            eventOffset: eventOffset,\r\n            $determinantElements: $determinantElements,\r\n            index: index,\r\n            frame: frame\r\n        } = _ref3;\r\n        var newHeight = Math.max(currentLineNewSize, this._minRowHeight);\r\n        var $lineElements = Object(_utils_table_helper__WEBPACK_IMPORTED_MODULE_13__[\"getLineElements\"])(frame.$table, index, \"vertical\");\r\n        Object(_utils_table_helper__WEBPACK_IMPORTED_MODULE_13__[\"setLineElementsFormat\"])(this, {\r\n            elements: $lineElements,\r\n            property: directionInfo.positionStyleProperty,\r\n            value: newHeight\r\n        });\r\n        var rowHeightDiff = Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__[\"getOuterHeight\"])($determinantElements.eq(index)) - currentLineNewSize;\r\n        this._$highlightedElement.css(directionInfo.positionCoordinate, this._startLineSeparatorPosition + eventOffset + rowHeightDiff + \"px\")\r\n    }\r\n    _dragMoveHandler(event, _ref4) {\r\n        var {\r\n            $determinantElements: $determinantElements,\r\n            index: index,\r\n            frame: frame,\r\n            direction: direction\r\n        } = _ref4;\r\n        var directionInfo = this._getDirectionInfo(direction);\r\n        var eventOffset = event.offset[directionInfo.positionCoordinateName];\r\n        this.editorInstance._saveValueChangeEvent(event);\r\n        if (this._shouldRevertOffset(direction)) {\r\n            eventOffset = -eventOffset\r\n        }\r\n        var currentLineNewSize = this._startLineSize + eventOffset;\r\n        if (\"horizontal\" === direction) {\r\n            this._horizontalDragHandler({\r\n                currentLineNewSize: currentLineNewSize,\r\n                directionInfo: directionInfo,\r\n                eventOffset: eventOffset,\r\n                $determinantElements: $determinantElements,\r\n                index: index,\r\n                frame: frame\r\n            })\r\n        } else {\r\n            this._verticalDragHandler({\r\n                currentLineNewSize: currentLineNewSize,\r\n                directionInfo: directionInfo,\r\n                eventOffset: eventOffset,\r\n                $determinantElements: $determinantElements,\r\n                index: index,\r\n                frame: frame\r\n            })\r\n        }\r\n        this._updateFramePosition(frame.$table, frame.$frame)\r\n    }\r\n    _dragEndHandler(options) {\r\n        var _this$_$highlightedEl;\r\n        null === (_this$_$highlightedEl = this._$highlightedElement) || void 0 === _this$_$highlightedEl ? void 0 : _this$_$highlightedEl.remove();\r\n        this._isDragging = void 0;\r\n        this._nextColumnOffsetLimit = void 0;\r\n        this._tableLastWidth(options.frame, Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__[\"getOuterWidth\"])(options.frame.$table));\r\n        this._updateFramesPositions();\r\n        this._updateFramesSeparators()\r\n    }\r\n    _isLastColumnResizing(_ref5) {\r\n        var {\r\n            $determinantElements: $determinantElements,\r\n            index: index\r\n        } = _ref5;\r\n        return !Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_3__[\"isDefined\"])($determinantElements[index + 1])\r\n    }\r\n    _getBoundaryConfig(options) {\r\n        var result = {};\r\n        if (\"vertical\" === options.direction) {\r\n            result.boundary = options.frame.$table;\r\n            result.boundOffset = {\r\n                bottom: Object(_core_utils_window__WEBPACK_IMPORTED_MODULE_11__[\"hasWindow\"])() ? -Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__[\"getHeight\"])(Object(_core_utils_window__WEBPACK_IMPORTED_MODULE_11__[\"getWindow\"])()) : -Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__[\"getOuterHeight\"])(this._quillContainer),\r\n                top: 0,\r\n                left: 0,\r\n                right: 0\r\n            }\r\n        } else if (!this._isLastColumnResizing(options)) {\r\n            result.boundary = options.frame.$table\r\n        } else {\r\n            var $content = this.editorInstance._getContent();\r\n            result.boundary = $content;\r\n            result.boundOffset = {\r\n                bottom: 0,\r\n                top: 0,\r\n                left: $content.css(\"paddingLeft\"),\r\n                right: $content.css(\"paddingRight\")\r\n            }\r\n        }\r\n        return result\r\n    }\r\n    _createDraggableElement(options) {\r\n        var _this$_$highlightedEl2;\r\n        var boundaryConfig = this._getBoundaryConfig(options);\r\n        var directionClass = \"vertical\" === options.direction ? \"dx-htmleditor-highlighted-row\" : \"dx-htmleditor-highlighted-column\";\r\n        null === (_this$_$highlightedEl2 = this._$highlightedElement) || void 0 === _this$_$highlightedEl2 ? void 0 : _this$_$highlightedEl2.remove();\r\n        this._$highlightedElement = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\"<div>\").addClass(\"\".concat(directionClass)).insertAfter(Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(options.lineSeparator));\r\n        var config = {\r\n            contentTemplate: null,\r\n            allowMoveByClick: false,\r\n            dragDirection: options.direction,\r\n            onDragMove: _ref6 => {\r\n                var {\r\n                    component: component,\r\n                    event: event\r\n                } = _ref6;\r\n                this._dragMoveHandler(event, options)\r\n            },\r\n            onDragStart: () => {\r\n                this._dragStartHandler(options)\r\n            },\r\n            onDragEnd: () => {\r\n                this._dragEndHandler(options)\r\n            }\r\n        };\r\n        Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_12__[\"extend\"])(config, boundaryConfig);\r\n        this._currentDraggableElement = this.editorInstance._createComponent(options.lineSeparator, _draggable__WEBPACK_IMPORTED_MODULE_9__[\"default\"], config)\r\n    }\r\n    _fixColumnsWidth($table) {\r\n        var determinantElements = this._getTableDeterminantElements($table);\r\n        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_10__[\"each\"])(determinantElements, (index, element) => {\r\n            var columnWidth = Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__[\"getOuterWidth\"])(element);\r\n            var $lineElements = Object(_utils_table_helper__WEBPACK_IMPORTED_MODULE_13__[\"getLineElements\"])($table, index);\r\n            Object(_utils_table_helper__WEBPACK_IMPORTED_MODULE_13__[\"setLineElementsFormat\"])(this, {\r\n                elements: $lineElements,\r\n                property: \"width\",\r\n                value: Math.max(columnWidth, this._minColumnWidth)\r\n            })\r\n        })\r\n    }\r\n    _getColumnElementsSum(columnElements) {\r\n        var columnsWidths = [];\r\n        var columnsSum = 0;\r\n        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_10__[\"each\"])(columnElements, (index, element) => {\r\n            var $element = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(element);\r\n            var columnWidth = this._getWidthStyleValue($element) || Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__[\"getOuterWidth\"])($element);\r\n            columnsWidths[index] = Math.max(columnWidth, this._minColumnWidth);\r\n            columnsSum += columnsWidths[index]\r\n        });\r\n        return {\r\n            columnsWidths: columnsWidths,\r\n            columnsSum: columnsSum\r\n        }\r\n    }\r\n    _setColumnsRatioWidth(columnElements, ratio, columnsWidths, $table) {\r\n        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_10__[\"each\"])(columnElements, index => {\r\n            var $lineElements = Object(_utils_table_helper__WEBPACK_IMPORTED_MODULE_13__[\"getLineElements\"])($table, index);\r\n            var resultWidth;\r\n            if (ratio > 0) {\r\n                resultWidth = this._minColumnWidth + Math.round((columnsWidths[index] - this._minColumnWidth) * ratio)\r\n            } else {\r\n                resultWidth = this._minColumnWidth\r\n            }\r\n            Object(_utils_table_helper__WEBPACK_IMPORTED_MODULE_13__[\"setLineElementsFormat\"])(this, {\r\n                elements: $lineElements,\r\n                property: \"width\",\r\n                value: resultWidth\r\n            })\r\n        })\r\n    }\r\n    _updateColumnsWidth($table, frameIndex) {\r\n        var determinantElements = this._getTableDeterminantElements($table);\r\n        var frame = this._tableResizeFrames[frameIndex];\r\n        if (!frame) {\r\n            this._tableResizeFrames[frameIndex] = {}\r\n        }\r\n        frame = this._tableResizeFrames[frameIndex];\r\n        var tableWidth = this._tableLastWidth(frame) || Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__[\"getOuterWidth\"])($table);\r\n        var ratio;\r\n        var {\r\n            columnsWidths: columnsWidths,\r\n            columnsSum: columnsSum\r\n        } = this._getColumnElementsSum(determinantElements);\r\n        var minWidthForColumns = determinantElements.length * this._minColumnWidth;\r\n        if (columnsSum > minWidthForColumns) {\r\n            ratio = (tableWidth - minWidthForColumns) / (columnsSum - minWidthForColumns)\r\n        } else {\r\n            ratio = -1\r\n        }\r\n        this._tableLastWidth(frame, ratio > 0 ? tableWidth : minWidthForColumns);\r\n        this._setColumnsRatioWidth(determinantElements, ratio, columnsWidths, $table)\r\n    }\r\n    _updateTablesColumnsWidth($tables) {\r\n        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_10__[\"each\"])($tables, (index, table) => {\r\n            this._updateColumnsWidth(Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(table), index)\r\n        })\r\n    }\r\n    option(option, value) {\r\n        if (\"tableResizing\" === option) {\r\n            this.handleOptionChangeValue(value);\r\n            return\r\n        }\r\n        if (\"enabled\" === option) {\r\n            this.enabled = value;\r\n            value ? this._applyResizing(true) : this.clean()\r\n        } else if ([\"minColumnWidth\", \"minRowHeight\"].includes(option)) {\r\n            this[\"_\".concat(option)] = this._minSizeLimit(option, value)\r\n        }\r\n    }\r\n    clean() {\r\n        this._removeResizeFrames(true);\r\n        this._detachEvents();\r\n        _core_utils_resize_callbacks__WEBPACK_IMPORTED_MODULE_5__[\"default\"].remove(this._resizeHandlerWithContext);\r\n        clearTimeout(this._windowResizeTimeout);\r\n        this._resizeHandlerWithContext = void 0;\r\n        this._isDragging = void 0;\r\n        this._startTableWidth = void 0;\r\n        clearTimeout(this._attachResizerTimeout)\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/devextreme/esm/ui/html_editor/modules/tableResizing.js\n");

/***/ }),

/***/ "./node_modules/devextreme/esm/ui/html_editor/modules/toolbar.js":
/*!***********************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/html_editor/modules/toolbar.js ***!
  \***********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var devextreme_quill__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devextreme-quill */ \"./node_modules/devextreme-quill/dist/dx-quill.js\");\n/* harmony import */ var devextreme_quill__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(devextreme_quill__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core/renderer */ \"./node_modules/devextreme/esm/core/renderer.js\");\n/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./base */ \"./node_modules/devextreme/esm/ui/html_editor/modules/base.js\");\n/* harmony import */ var _toolbar__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../toolbar */ \"./node_modules/devextreme/esm/ui/toolbar.js\");\n/* harmony import */ var _select_box__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../select_box */ \"./node_modules/devextreme/esm/ui/select_box.js\");\n/* harmony import */ var _color_box_color_view__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../color_box/color_view */ \"./node_modules/devextreme/esm/ui/color_box/color_view.js\");\n/* harmony import */ var _number_box__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../number_box */ \"./node_modules/devextreme/esm/ui/number_box.js\");\n/* harmony import */ var _widget_ui_errors__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../widget/ui.errors */ \"./node_modules/devextreme/esm/ui/widget/ui.errors.js\");\n/* harmony import */ var _widget_collector__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./widget_collector */ \"./node_modules/devextreme/esm/ui/html_editor/modules/widget_collector.js\");\n/* harmony import */ var _core_utils_iterator__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../core/utils/iterator */ \"./node_modules/devextreme/esm/core/utils/iterator.js\");\n/* harmony import */ var _core_utils_type__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../core/utils/type */ \"./node_modules/devextreme/esm/core/utils/type.js\");\n/* harmony import */ var _core_utils_extend__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../core/utils/extend */ \"./node_modules/devextreme/esm/core/utils/extend.js\");\n/* harmony import */ var _localization_message__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../localization/message */ \"./node_modules/devextreme/esm/localization/message.js\");\n/* harmony import */ var _core_utils_inflector__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../core/utils/inflector */ \"./node_modules/devextreme/esm/core/utils/inflector.js\");\n/* harmony import */ var _events_core_events_engine__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../events/core/events_engine */ \"./node_modules/devextreme/esm/events/core/events_engine.js\");\n/* harmony import */ var _events_utils_index__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../events/utils/index */ \"./node_modules/devextreme/esm/events/utils/index.js\");\n/* harmony import */ var _utils_table_helper__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../utils/table_helper */ \"./node_modules/devextreme/esm/ui/html_editor/utils/table_helper.js\");\n/* harmony import */ var _utils_toolbar_helper__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../utils/toolbar_helper */ \"./node_modules/devextreme/esm/ui/html_editor/utils/toolbar_helper.js\");\n/**\r\n * DevExtreme (esm/ui/html_editor/modules/toolbar.js)\r\n * Version: 21.2.7\r\n * Build date: Mon Apr 11 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nvar ToolbarModule = _base__WEBPACK_IMPORTED_MODULE_2__[\"default\"];\r\nif (devextreme_quill__WEBPACK_IMPORTED_MODULE_0___default.a) {\r\n    var TOOLBAR_WRAPPER_CLASS = \"dx-htmleditor-toolbar-wrapper\";\r\n    var TOOLBAR_CLASS = \"dx-htmleditor-toolbar\";\r\n    var TOOLBAR_FORMAT_WIDGET_CLASS = \"dx-htmleditor-toolbar-format\";\r\n    var TOOLBAR_SEPARATOR_CLASS = \"dx-htmleditor-toolbar-separator\";\r\n    var TOOLBAR_MENU_SEPARATOR_CLASS = \"dx-htmleditor-toolbar-menu-separator\";\r\n    var ACTIVE_FORMAT_CLASS = \"dx-format-active\";\r\n    var ICON_CLASS = \"dx-icon\";\r\n    var SELECTION_CHANGE_EVENT = \"selection-change\";\r\n    var USER_ACTION = \"user\";\r\n    var SILENT_ACTION = \"silent\";\r\n    var FORMAT_HOTKEYS = {\r\n        66: \"bold\",\r\n        73: \"italic\",\r\n        85: \"underline\"\r\n    };\r\n    var KEY_CODES = {\r\n        b: 66,\r\n        i: 73,\r\n        u: 85\r\n    };\r\n    var localize = name => _localization_message__WEBPACK_IMPORTED_MODULE_12__[\"default\"].format(\"dxHtmlEditor-\".concat(Object(_core_utils_inflector__WEBPACK_IMPORTED_MODULE_13__[\"camelize\"])(name)));\r\n    var localizeValue = (value, name) => {\r\n        if (\"header\" === name) {\r\n            var isHeaderValue = Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_10__[\"isDefined\"])(value) && false !== value;\r\n            return isHeaderValue ? \"\".concat(localize(\"heading\"), \" \").concat(value) : localize(\"normalText\")\r\n        }\r\n        return localize(value) || value\r\n    };\r\n    ToolbarModule = class extends _base__WEBPACK_IMPORTED_MODULE_2__[\"default\"] {\r\n        constructor(quill, options) {\r\n            super(quill, options);\r\n            this._toolbarWidgets = new _widget_collector__WEBPACK_IMPORTED_MODULE_8__[\"default\"];\r\n            this._formatHandlers = Object(_utils_toolbar_helper__WEBPACK_IMPORTED_MODULE_17__[\"getFormatHandlers\"])(this);\r\n            this._tableFormats = Object(_utils_table_helper__WEBPACK_IMPORTED_MODULE_16__[\"getTableFormats\"])(quill);\r\n            if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_10__[\"isDefined\"])(options.items)) {\r\n                this._addCallbacks();\r\n                this._renderToolbar();\r\n                this.quill.on(\"editor-change\", (eventName, newValue, oldValue, eventSource) => {\r\n                    var isSilentMode = eventSource === SILENT_ACTION && Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_10__[\"isEmptyObject\"])(this.quill.getFormat());\r\n                    if (!isSilentMode) {\r\n                        var isSelectionChanged = eventName === SELECTION_CHANGE_EVENT;\r\n                        this._updateToolbar(isSelectionChanged)\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        _addCallbacks() {\r\n            this.addCleanCallback(this.clean.bind(this));\r\n            this.editorInstance.addContentInitializedCallback(this.updateHistoryWidgets.bind(this))\r\n        }\r\n        _updateToolbar(isSelectionChanged) {\r\n            this.updateFormatWidgets(isSelectionChanged);\r\n            this.updateHistoryWidgets();\r\n            this.updateTableWidgets()\r\n        }\r\n        _updateFormatWidget(name, isApplied, formats) {\r\n            var widget = this._toolbarWidgets.getByName(name);\r\n            if (!widget) {\r\n                return\r\n            }\r\n            if (isApplied) {\r\n                this._markActiveFormatWidget(name, widget, formats)\r\n            } else {\r\n                this._resetFormatWidget(name, widget);\r\n                if (Object.prototype.hasOwnProperty.call(name)) {\r\n                    delete formats[name]\r\n                }\r\n            }\r\n            this._toggleClearFormatting(isApplied || !Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_10__[\"isEmptyObject\"])(formats))\r\n        }\r\n        _renderToolbar() {\r\n            var container = this.options.container || this._getContainer();\r\n            this._$toolbar = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\"<div>\").addClass(TOOLBAR_CLASS).appendTo(container);\r\n            this._$toolbarContainer = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(container).addClass(TOOLBAR_WRAPPER_CLASS);\r\n            _events_core_events_engine__WEBPACK_IMPORTED_MODULE_14__[\"default\"].on(this._$toolbarContainer, Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_15__[\"addNamespace\"])(\"mousedown\", this.editorInstance.NAME), e => {\r\n                e.preventDefault()\r\n            });\r\n            this._subscribeFormatHotKeys();\r\n            this.toolbarInstance = this.editorInstance._createComponent(this._$toolbar, _toolbar__WEBPACK_IMPORTED_MODULE_3__[\"default\"], this.toolbarConfig);\r\n            this.editorInstance.on(\"optionChanged\", _ref => {\r\n                var {\r\n                    name: name\r\n                } = _ref;\r\n                if (\"readOnly\" === name || \"disabled\" === name) {\r\n                    this.toolbarInstance.option(\"disabled\", this.isInteractionDisabled)\r\n                }\r\n            })\r\n        }\r\n        get toolbarConfig() {\r\n            return {\r\n                dataSource: this._prepareToolbarItems(),\r\n                disabled: this.isInteractionDisabled,\r\n                menuContainer: this._$toolbarContainer,\r\n                multiline: this.isMultilineMode()\r\n            }\r\n        }\r\n        get isInteractionDisabled() {\r\n            return this.editorInstance.option(\"readOnly\") || this.editorInstance.option(\"disabled\")\r\n        }\r\n        isMultilineMode() {\r\n            var _this$options$multili;\r\n            return null !== (_this$options$multili = this.options.multiline) && void 0 !== _this$options$multili ? _this$options$multili : true\r\n        }\r\n        clean() {\r\n            this._toolbarWidgets.clear();\r\n            if (this._$toolbarContainer) {\r\n                this._$toolbarContainer.empty().removeClass(TOOLBAR_WRAPPER_CLASS)\r\n            }\r\n        }\r\n        repaint() {\r\n            this.toolbarInstance && this.toolbarInstance.repaint()\r\n        }\r\n        _getContainer() {\r\n            var $container = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\"<div>\");\r\n            this.editorInstance.$element().prepend($container);\r\n            return $container\r\n        }\r\n        _detectRenamedOptions(item) {\r\n            if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_10__[\"isObject\"])(item)) {\r\n                Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_9__[\"each\"])([{\r\n                    newName: \"name\",\r\n                    oldName: \"formatName\"\r\n                }, {\r\n                    newName: \"acceptedValues\",\r\n                    oldName: \"formatValues\"\r\n                }], (index, optionName) => {\r\n                    if (Object.prototype.hasOwnProperty.call(item, optionName.oldName)) {\r\n                        _widget_ui_errors__WEBPACK_IMPORTED_MODULE_7__[\"default\"].log(\"W1016\", optionName.oldName, optionName.newName)\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        _subscribeFormatHotKeys() {\r\n            this.quill.keyboard.addBinding({\r\n                which: KEY_CODES.b,\r\n                shortKey: true\r\n            }, this._handleFormatHotKey.bind(this));\r\n            this.quill.keyboard.addBinding({\r\n                which: KEY_CODES.i,\r\n                shortKey: true\r\n            }, this._handleFormatHotKey.bind(this));\r\n            this.quill.keyboard.addBinding({\r\n                which: KEY_CODES.u,\r\n                shortKey: true\r\n            }, this._handleFormatHotKey.bind(this))\r\n        }\r\n        _handleFormatHotKey(range, context, _ref2) {\r\n            var {\r\n                which: which\r\n            } = _ref2;\r\n            var formatName = FORMAT_HOTKEYS[which];\r\n            this._updateButtonState(formatName)\r\n        }\r\n        _updateButtonState(formatName) {\r\n            var formatWidget = this._toolbarWidgets.getByName(formatName);\r\n            var currentFormat = this.quill.getFormat();\r\n            var formatValue = currentFormat[formatName];\r\n            if (formatValue) {\r\n                this._markActiveFormatWidget(formatName, formatWidget, currentFormat)\r\n            } else {\r\n                this._resetFormatWidget(formatName, formatWidget)\r\n            }\r\n        }\r\n        _prepareToolbarItems() {\r\n            var resultItems = [];\r\n            Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_9__[\"each\"])(this.options.items, (index, item) => {\r\n                var newItem;\r\n                this._detectRenamedOptions(item);\r\n                if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_10__[\"isObject\"])(item)) {\r\n                    newItem = this._handleObjectItem(item)\r\n                } else if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_10__[\"isString\"])(item)) {\r\n                    var buttonItemConfig = this._prepareButtonItemConfig(item);\r\n                    newItem = this._getToolbarItem(buttonItemConfig)\r\n                }\r\n                if (newItem) {\r\n                    resultItems.push(newItem)\r\n                }\r\n            });\r\n            return resultItems\r\n        }\r\n        _handleObjectItem(item) {\r\n            if (item.name && item.acceptedValues && this._isAcceptableItem(item.widget, \"dxSelectBox\")) {\r\n                var selectItemConfig = this._prepareSelectItemConfig(item);\r\n                return this._getToolbarItem(selectItemConfig)\r\n            } else if (item.name && this._isAcceptableItem(item.widget, \"dxButton\")) {\r\n                var defaultButtonItemConfig = this._prepareButtonItemConfig(item.name);\r\n                var buttonItemConfig = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_11__[\"extend\"])(true, defaultButtonItemConfig, item);\r\n                return this._getToolbarItem(buttonItemConfig)\r\n            } else {\r\n                return this._getToolbarItem(item)\r\n            }\r\n        }\r\n        _isAcceptableItem(widget, acceptableWidgetName) {\r\n            return !widget || widget === acceptableWidgetName\r\n        }\r\n        _prepareButtonItemConfig(name) {\r\n            var _ICON_MAP$name;\r\n            var iconName = null !== (_ICON_MAP$name = _utils_toolbar_helper__WEBPACK_IMPORTED_MODULE_17__[\"ICON_MAP\"][name]) && void 0 !== _ICON_MAP$name ? _ICON_MAP$name : name;\r\n            var buttonText = Object(_core_utils_inflector__WEBPACK_IMPORTED_MODULE_13__[\"titleize\"])(name);\r\n            return {\r\n                widget: \"dxButton\",\r\n                name: name,\r\n                options: {\r\n                    hint: localize(buttonText),\r\n                    text: localize(buttonText),\r\n                    icon: iconName.toLowerCase(),\r\n                    onClick: this._formatHandlers[name] || Object(_utils_toolbar_helper__WEBPACK_IMPORTED_MODULE_17__[\"getDefaultClickHandler\"])(this, name),\r\n                    stylingMode: \"text\"\r\n                },\r\n                showText: \"inMenu\"\r\n            }\r\n        }\r\n        _prepareSelectItemConfig(item) {\r\n            var {\r\n                name: name,\r\n                acceptedValues: acceptedValues\r\n            } = item;\r\n            return Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_11__[\"extend\"])(true, {\r\n                widget: \"dxSelectBox\",\r\n                name: name,\r\n                options: {\r\n                    stylingMode: \"filled\",\r\n                    dataSource: acceptedValues,\r\n                    displayExpr: value => localizeValue(value, name),\r\n                    placeholder: localize(name),\r\n                    onValueChanged: e => {\r\n                        if (!this._isReset) {\r\n                            this._hideAdaptiveMenu();\r\n                            Object(_utils_toolbar_helper__WEBPACK_IMPORTED_MODULE_17__[\"applyFormat\"])(this, [name, e.value, USER_ACTION], e.event);\r\n                            this._setValueSilent(e.component, e.value)\r\n                        }\r\n                    }\r\n                }\r\n            }, item)\r\n        }\r\n        _hideAdaptiveMenu() {\r\n            if (this.toolbarInstance.option(\"overflowMenuVisible\")) {\r\n                this.toolbarInstance.option(\"overflowMenuVisible\", false)\r\n            }\r\n        }\r\n        _getToolbarItem(item) {\r\n            var baseItem = {\r\n                options: {\r\n                    onInitialized: e => {\r\n                        if (item.name) {\r\n                            e.component.$element().addClass(TOOLBAR_FORMAT_WIDGET_CLASS);\r\n                            e.component.$element().toggleClass(\"dx-\".concat(item.name.toLowerCase(), \"-format\"), !!item.name);\r\n                            this._toolbarWidgets.add(item.name, e.component)\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n            var multilineItem = this.isMultilineMode() ? {\r\n                location: \"before\",\r\n                locateInMenu: \"never\"\r\n            } : {};\r\n            return Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_11__[\"extend\"])(true, {\r\n                location: \"before\",\r\n                locateInMenu: \"auto\"\r\n            }, this._getDefaultConfig(item.name), item, baseItem, multilineItem)\r\n        }\r\n        _getDefaultItemsConfig() {\r\n            return {\r\n                clear: {\r\n                    options: {\r\n                        disabled: true\r\n                    }\r\n                },\r\n                undo: {\r\n                    options: {\r\n                        disabled: true\r\n                    }\r\n                },\r\n                redo: {\r\n                    options: {\r\n                        disabled: true\r\n                    }\r\n                },\r\n                insertRowAbove: {\r\n                    options: {\r\n                        disabled: true\r\n                    }\r\n                },\r\n                insertRowBelow: {\r\n                    options: {\r\n                        disabled: true\r\n                    }\r\n                },\r\n                insertHeaderRow: {\r\n                    options: {\r\n                        disabled: true\r\n                    }\r\n                },\r\n                insertColumnLeft: {\r\n                    options: {\r\n                        disabled: true\r\n                    }\r\n                },\r\n                insertColumnRight: {\r\n                    options: {\r\n                        disabled: true\r\n                    }\r\n                },\r\n                deleteRow: {\r\n                    options: {\r\n                        disabled: true\r\n                    }\r\n                },\r\n                deleteColumn: {\r\n                    options: {\r\n                        disabled: true\r\n                    }\r\n                },\r\n                deleteTable: {\r\n                    options: {\r\n                        disabled: true\r\n                    }\r\n                },\r\n                cellProperties: {\r\n                    options: {\r\n                        disabled: true\r\n                    }\r\n                },\r\n                tableProperties: {\r\n                    options: {\r\n                        disabled: true\r\n                    }\r\n                },\r\n                separator: {\r\n                    template: (data, index, element) => {\r\n                        Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(element).addClass(TOOLBAR_SEPARATOR_CLASS)\r\n                    },\r\n                    menuItemTemplate: (data, index, element) => {\r\n                        Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(element).addClass(TOOLBAR_MENU_SEPARATOR_CLASS)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        _getDefaultConfig(name) {\r\n            return this._getDefaultItemsConfig()[name]\r\n        }\r\n        updateHistoryWidgets() {\r\n            var historyModule = this.quill.history;\r\n            if (!historyModule) {\r\n                return\r\n            }\r\n            var {\r\n                undo: undoOps,\r\n                redo: redoOps\r\n            } = historyModule.stack;\r\n            this._updateManipulationWidget(this._toolbarWidgets.getByName(\"undo\"), Boolean(undoOps.length));\r\n            this._updateManipulationWidget(this._toolbarWidgets.getByName(\"redo\"), Boolean(redoOps.length))\r\n        }\r\n        updateTableWidgets() {\r\n            var table = this.quill.getModule(\"table\");\r\n            if (!table) {\r\n                return\r\n            }\r\n            var selection = this.quill.getSelection();\r\n            var formats = selection && this.quill.getFormat(selection) || {};\r\n            var isTableOperationsEnabled = this._tableFormats.some(format => Boolean(formats[format]));\r\n            _utils_table_helper__WEBPACK_IMPORTED_MODULE_16__[\"TABLE_OPERATIONS\"].forEach(operationName => {\r\n                var isInsertTable = \"insertTable\" === operationName;\r\n                var widget = this._toolbarWidgets.getByName(operationName);\r\n                this._updateManipulationWidget(widget, isInsertTable ? !isTableOperationsEnabled : isTableOperationsEnabled)\r\n            })\r\n        }\r\n        _updateManipulationWidget(widget, isOperationEnabled) {\r\n            if (!widget) {\r\n                return\r\n            }\r\n            widget.option(\"disabled\", !isOperationEnabled)\r\n        }\r\n        updateFormatWidgets(isResetRequired) {\r\n            var selection = this.quill.getSelection();\r\n            if (!selection) {\r\n                return\r\n            }\r\n            var formats = this.quill.getFormat(selection);\r\n            var hasFormats = !Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_10__[\"isEmptyObject\"])(formats);\r\n            if (!hasFormats || isResetRequired) {\r\n                this._resetFormatWidgets()\r\n            }\r\n            for (var formatName in formats) {\r\n                var widgetName = this._getFormatWidgetName(formatName, formats);\r\n                var formatWidget = this._toolbarWidgets.getByName(widgetName) || this._toolbarWidgets.getByName(formatName);\r\n                if (!formatWidget) {\r\n                    continue\r\n                }\r\n                this._markActiveFormatWidget(formatName, formatWidget, formats)\r\n            }\r\n            this._toggleClearFormatting(hasFormats || selection.length > 1)\r\n        }\r\n        _markActiveFormatWidget(name, widget, formats) {\r\n            if (this._isColorFormat(name)) {\r\n                this._updateColorWidget(name, formats[name])\r\n            }\r\n            if (\"value\" in widget.option()) {\r\n                this._setValueSilent(widget, formats[name])\r\n            } else {\r\n                widget.$element().addClass(ACTIVE_FORMAT_CLASS)\r\n            }\r\n        }\r\n        _toggleClearFormatting(hasFormats) {\r\n            var clearWidget = this._toolbarWidgets.getByName(\"clear\");\r\n            if (clearWidget) {\r\n                clearWidget.option(\"disabled\", !hasFormats)\r\n            }\r\n        }\r\n        _isColorFormat(name) {\r\n            return \"color\" === name || \"background\" === name\r\n        }\r\n        _updateColorWidget(name, color) {\r\n            var formatWidget = this._toolbarWidgets.getByName(name);\r\n            if (!formatWidget) {\r\n                return\r\n            }\r\n            formatWidget.$element().find(\".\".concat(ICON_CLASS)).css(\"borderBottomColor\", color || \"transparent\")\r\n        }\r\n        _getFormatWidgetName(name, formats) {\r\n            var widgetName;\r\n            switch (name) {\r\n                case \"align\":\r\n                    widgetName = name + Object(_core_utils_inflector__WEBPACK_IMPORTED_MODULE_13__[\"titleize\"])(formats[name]);\r\n                    break;\r\n                case \"list\":\r\n                    widgetName = formats[name] + Object(_core_utils_inflector__WEBPACK_IMPORTED_MODULE_13__[\"titleize\"])(name);\r\n                    break;\r\n                case \"code-block\":\r\n                    widgetName = \"codeBlock\";\r\n                    break;\r\n                case \"script\":\r\n                    widgetName = formats[name] + name;\r\n                    break;\r\n                case \"imageSrc\":\r\n                    widgetName = \"image\";\r\n                    break;\r\n                default:\r\n                    widgetName = name\r\n            }\r\n            return widgetName\r\n        }\r\n        _setValueSilent(widget, value) {\r\n            this._isReset = true;\r\n            widget.option(\"value\", value);\r\n            this._isReset = false\r\n        }\r\n        _resetFormatWidgets() {\r\n            this._toolbarWidgets.each((name, widget) => {\r\n                this._resetFormatWidget(name, widget)\r\n            })\r\n        }\r\n        _resetFormatWidget(name, widget) {\r\n            widget.$element().removeClass(ACTIVE_FORMAT_CLASS);\r\n            if (this._isColorFormat(name)) {\r\n                this._updateColorWidget(name)\r\n            }\r\n            if (\"clear\" === name) {\r\n                widget.option(\"disabled\", true)\r\n            }\r\n            if (\"dxSelectBox\" === widget.NAME) {\r\n                this._setValueSilent(widget, null)\r\n            }\r\n        }\r\n        addClickHandler(name, handler) {\r\n            this._formatHandlers[name] = handler;\r\n            var formatWidget = this._toolbarWidgets.getByName(name);\r\n            if (formatWidget && \"dxButton\" === formatWidget.NAME) {\r\n                formatWidget.option(\"onClick\", handler)\r\n            }\r\n        }\r\n    }\r\n}\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (ToolbarModule);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/devextreme/esm/ui/html_editor/modules/toolbar.js\n");

/***/ }),

/***/ "./node_modules/devextreme/esm/ui/html_editor/modules/variables.js":
/*!*************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/html_editor/modules/variables.js ***!
  \*************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var devextreme_quill__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devextreme-quill */ \"./node_modules/devextreme-quill/dist/dx-quill.js\");\n/* harmony import */ var devextreme_quill__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(devextreme_quill__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core/renderer */ \"./node_modules/devextreme/esm/core/renderer.js\");\n/* harmony import */ var _core_utils_position__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../core/utils/position */ \"./node_modules/devextreme/esm/core/utils/position.js\");\n/* harmony import */ var _popup__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./popup */ \"./node_modules/devextreme/esm/ui/html_editor/modules/popup.js\");\n/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./base */ \"./node_modules/devextreme/esm/ui/html_editor/modules/base.js\");\n/* harmony import */ var _formats_variable__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../formats/variable */ \"./node_modules/devextreme/esm/ui/html_editor/formats/variable.js\");\n/* harmony import */ var _core_utils_extend__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../core/utils/extend */ \"./node_modules/devextreme/esm/core/utils/extend.js\");\n/**\r\n * DevExtreme (esm/ui/html_editor/modules/variables.js)\r\n * Version: 21.2.7\r\n * Build date: Mon Apr 11 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nvar VariableModule = _base__WEBPACK_IMPORTED_MODULE_4__[\"default\"];\r\nif (devextreme_quill__WEBPACK_IMPORTED_MODULE_0___default.a) {\r\n    var VARIABLE_FORMAT_CLASS = \"dx-variable-format\";\r\n    var ACTIVE_FORMAT_CLASS = \"dx-format-active\";\r\n    devextreme_quill__WEBPACK_IMPORTED_MODULE_0___default.a.register({\r\n        \"formats/variable\": _formats_variable__WEBPACK_IMPORTED_MODULE_5__[\"default\"]\r\n    }, true);\r\n    VariableModule = class extends _popup__WEBPACK_IMPORTED_MODULE_3__[\"default\"] {\r\n        _getDefaultOptions() {\r\n            var baseConfig = super._getDefaultOptions();\r\n            return Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_6__[\"extend\"])(baseConfig, {\r\n                escapeChar: \"\"\r\n            })\r\n        }\r\n        constructor(quill, options) {\r\n            super(quill, options);\r\n            var toolbar = quill.getModule(\"toolbar\");\r\n            if (toolbar) {\r\n                toolbar.addClickHandler(\"variable\", this.showPopup.bind(this))\r\n            }\r\n            quill.keyboard.addBinding({\r\n                key: \"P\",\r\n                altKey: true\r\n            }, this.showPopup.bind(this));\r\n            this._popup.on(\"shown\", e => {\r\n                var $ofElement = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(e.component.option(\"position\").of);\r\n                if ($ofElement.hasClass(VARIABLE_FORMAT_CLASS)) {\r\n                    $ofElement.addClass(ACTIVE_FORMAT_CLASS)\r\n                }\r\n            })\r\n        }\r\n        showPopup(event) {\r\n            var selection = this.quill.getSelection(true);\r\n            var position = selection ? selection.index : this.quill.getLength();\r\n            this.savePosition(position);\r\n            this._resetPopupPosition(event, position);\r\n            super.showPopup()\r\n        }\r\n        _resetPopupPosition(event, position) {\r\n            if (event && event.element) {\r\n                this._popup.option(\"position\", {\r\n                    of: event.element,\r\n                    offset: {\r\n                        h: 0,\r\n                        v: 0\r\n                    },\r\n                    my: \"top center\",\r\n                    at: \"bottom center\",\r\n                    collision: \"fit\"\r\n                })\r\n            } else {\r\n                var mentionBounds = this.quill.getBounds(position);\r\n                var rootRect = Object(_core_utils_position__WEBPACK_IMPORTED_MODULE_2__[\"getBoundingRect\"])(this.quill.root);\r\n                this._popup.option(\"position\", {\r\n                    of: this.quill.root,\r\n                    offset: {\r\n                        h: mentionBounds.left,\r\n                        v: mentionBounds.bottom - rootRect.height\r\n                    },\r\n                    my: \"top center\",\r\n                    at: \"bottom left\",\r\n                    collision: \"fit flip\"\r\n                })\r\n            }\r\n        }\r\n        insertEmbedContent(selectionChangedEvent) {\r\n            var caretPosition = this.getPosition();\r\n            var selectedItem = selectionChangedEvent.component.option(\"selectedItem\");\r\n            var variableData = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_6__[\"extend\"])({}, {\r\n                value: selectedItem,\r\n                escapeChar: this.options.escapeChar\r\n            });\r\n            setTimeout(function() {\r\n                this.quill.insertEmbed(caretPosition, \"variable\", variableData);\r\n                this.quill.setSelection(caretPosition + 1)\r\n            }.bind(this))\r\n        }\r\n    }\r\n}\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (VariableModule);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGV2ZXh0cmVtZS9lc20vdWkvaHRtbF9lZGl0b3IvbW9kdWxlcy92YXJpYWJsZXMuanM/NWFlYiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ3FDO0FBQ0U7QUFHRDtBQUNKO0FBQ0Y7QUFDVztBQUdQO0FBQ3BDLHFCQUFxQiw2Q0FBVTtBQUMvQixJQUFJLHVEQUFLO0FBQ1Q7QUFDQTtBQUNBLElBQUksdURBQUs7QUFDVCw0QkFBNEIseURBQVE7QUFDcEMsS0FBSztBQUNMLG1DQUFtQyw4Q0FBVztBQUM5QztBQUNBO0FBQ0EsbUJBQW1CLGlFQUFNO0FBQ3pCO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsaUNBQWlDLDhEQUFDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBLCtCQUErQiw0RUFBZTtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLGlFQUFNLEdBQUc7QUFDeEM7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ2UsNkVBQWMsRUFBQyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9kZXZleHRyZW1lL2VzbS91aS9odG1sX2VkaXRvci9tb2R1bGVzL3ZhcmlhYmxlcy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBEZXZFeHRyZW1lIChlc20vdWkvaHRtbF9lZGl0b3IvbW9kdWxlcy92YXJpYWJsZXMuanMpXHJcbiAqIFZlcnNpb246IDIxLjIuN1xyXG4gKiBCdWlsZCBkYXRlOiBNb24gQXByIDExIDIwMjJcclxuICpcclxuICogQ29weXJpZ2h0IChjKSAyMDEyIC0gMjAyMiBEZXZlbG9wZXIgRXhwcmVzcyBJbmMuIEFMTCBSSUdIVFMgUkVTRVJWRURcclxuICogUmVhZCBhYm91dCBEZXZFeHRyZW1lIGxpY2Vuc2luZyBoZXJlOiBodHRwczovL2pzLmRldmV4cHJlc3MuY29tL0xpY2Vuc2luZy9cclxuICovXHJcbmltcG9ydCBRdWlsbCBmcm9tIFwiZGV2ZXh0cmVtZS1xdWlsbFwiO1xyXG5pbXBvcnQgJCBmcm9tIFwiLi4vLi4vLi4vY29yZS9yZW5kZXJlclwiO1xyXG5pbXBvcnQge1xyXG4gICAgZ2V0Qm91bmRpbmdSZWN0XHJcbn0gZnJvbSBcIi4uLy4uLy4uL2NvcmUvdXRpbHMvcG9zaXRpb25cIjtcclxuaW1wb3J0IFBvcHVwTW9kdWxlIGZyb20gXCIuL3BvcHVwXCI7XHJcbmltcG9ydCBCYXNlTW9kdWxlIGZyb20gXCIuL2Jhc2VcIjtcclxuaW1wb3J0IFZhcmlhYmxlIGZyb20gXCIuLi9mb3JtYXRzL3ZhcmlhYmxlXCI7XHJcbmltcG9ydCB7XHJcbiAgICBleHRlbmRcclxufSBmcm9tIFwiLi4vLi4vLi4vY29yZS91dGlscy9leHRlbmRcIjtcclxudmFyIFZhcmlhYmxlTW9kdWxlID0gQmFzZU1vZHVsZTtcclxuaWYgKFF1aWxsKSB7XHJcbiAgICB2YXIgVkFSSUFCTEVfRk9STUFUX0NMQVNTID0gXCJkeC12YXJpYWJsZS1mb3JtYXRcIjtcclxuICAgIHZhciBBQ1RJVkVfRk9STUFUX0NMQVNTID0gXCJkeC1mb3JtYXQtYWN0aXZlXCI7XHJcbiAgICBRdWlsbC5yZWdpc3Rlcih7XHJcbiAgICAgICAgXCJmb3JtYXRzL3ZhcmlhYmxlXCI6IFZhcmlhYmxlXHJcbiAgICB9LCB0cnVlKTtcclxuICAgIFZhcmlhYmxlTW9kdWxlID0gY2xhc3MgZXh0ZW5kcyBQb3B1cE1vZHVsZSB7XHJcbiAgICAgICAgX2dldERlZmF1bHRPcHRpb25zKCkge1xyXG4gICAgICAgICAgICB2YXIgYmFzZUNvbmZpZyA9IHN1cGVyLl9nZXREZWZhdWx0T3B0aW9ucygpO1xyXG4gICAgICAgICAgICByZXR1cm4gZXh0ZW5kKGJhc2VDb25maWcsIHtcclxuICAgICAgICAgICAgICAgIGVzY2FwZUNoYXI6IFwiXCJcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3RydWN0b3IocXVpbGwsIG9wdGlvbnMpIHtcclxuICAgICAgICAgICAgc3VwZXIocXVpbGwsIG9wdGlvbnMpO1xyXG4gICAgICAgICAgICB2YXIgdG9vbGJhciA9IHF1aWxsLmdldE1vZHVsZShcInRvb2xiYXJcIik7XHJcbiAgICAgICAgICAgIGlmICh0b29sYmFyKSB7XHJcbiAgICAgICAgICAgICAgICB0b29sYmFyLmFkZENsaWNrSGFuZGxlcihcInZhcmlhYmxlXCIsIHRoaXMuc2hvd1BvcHVwLmJpbmQodGhpcykpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcXVpbGwua2V5Ym9hcmQuYWRkQmluZGluZyh7XHJcbiAgICAgICAgICAgICAgICBrZXk6IFwiUFwiLFxyXG4gICAgICAgICAgICAgICAgYWx0S2V5OiB0cnVlXHJcbiAgICAgICAgICAgIH0sIHRoaXMuc2hvd1BvcHVwLmJpbmQodGhpcykpO1xyXG4gICAgICAgICAgICB0aGlzLl9wb3B1cC5vbihcInNob3duXCIsIGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgdmFyICRvZkVsZW1lbnQgPSAkKGUuY29tcG9uZW50Lm9wdGlvbihcInBvc2l0aW9uXCIpLm9mKTtcclxuICAgICAgICAgICAgICAgIGlmICgkb2ZFbGVtZW50Lmhhc0NsYXNzKFZBUklBQkxFX0ZPUk1BVF9DTEFTUykpIHtcclxuICAgICAgICAgICAgICAgICAgICAkb2ZFbGVtZW50LmFkZENsYXNzKEFDVElWRV9GT1JNQVRfQ0xBU1MpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNob3dQb3B1cChldmVudCkge1xyXG4gICAgICAgICAgICB2YXIgc2VsZWN0aW9uID0gdGhpcy5xdWlsbC5nZXRTZWxlY3Rpb24odHJ1ZSk7XHJcbiAgICAgICAgICAgIHZhciBwb3NpdGlvbiA9IHNlbGVjdGlvbiA/IHNlbGVjdGlvbi5pbmRleCA6IHRoaXMucXVpbGwuZ2V0TGVuZ3RoKCk7XHJcbiAgICAgICAgICAgIHRoaXMuc2F2ZVBvc2l0aW9uKHBvc2l0aW9uKTtcclxuICAgICAgICAgICAgdGhpcy5fcmVzZXRQb3B1cFBvc2l0aW9uKGV2ZW50LCBwb3NpdGlvbik7XHJcbiAgICAgICAgICAgIHN1cGVyLnNob3dQb3B1cCgpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIF9yZXNldFBvcHVwUG9zaXRpb24oZXZlbnQsIHBvc2l0aW9uKSB7XHJcbiAgICAgICAgICAgIGlmIChldmVudCAmJiBldmVudC5lbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9wb3B1cC5vcHRpb24oXCJwb3NpdGlvblwiLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgb2Y6IGV2ZW50LmVsZW1lbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGg6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHY6IDBcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIG15OiBcInRvcCBjZW50ZXJcIixcclxuICAgICAgICAgICAgICAgICAgICBhdDogXCJib3R0b20gY2VudGVyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgY29sbGlzaW9uOiBcImZpdFwiXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdmFyIG1lbnRpb25Cb3VuZHMgPSB0aGlzLnF1aWxsLmdldEJvdW5kcyhwb3NpdGlvbik7XHJcbiAgICAgICAgICAgICAgICB2YXIgcm9vdFJlY3QgPSBnZXRCb3VuZGluZ1JlY3QodGhpcy5xdWlsbC5yb290KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3BvcHVwLm9wdGlvbihcInBvc2l0aW9uXCIsIHtcclxuICAgICAgICAgICAgICAgICAgICBvZjogdGhpcy5xdWlsbC5yb290LFxyXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoOiBtZW50aW9uQm91bmRzLmxlZnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHY6IG1lbnRpb25Cb3VuZHMuYm90dG9tIC0gcm9vdFJlY3QuaGVpZ2h0XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBteTogXCJ0b3AgY2VudGVyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgYXQ6IFwiYm90dG9tIGxlZnRcIixcclxuICAgICAgICAgICAgICAgICAgICBjb2xsaXNpb246IFwiZml0IGZsaXBcIlxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpbnNlcnRFbWJlZENvbnRlbnQoc2VsZWN0aW9uQ2hhbmdlZEV2ZW50KSB7XHJcbiAgICAgICAgICAgIHZhciBjYXJldFBvc2l0aW9uID0gdGhpcy5nZXRQb3NpdGlvbigpO1xyXG4gICAgICAgICAgICB2YXIgc2VsZWN0ZWRJdGVtID0gc2VsZWN0aW9uQ2hhbmdlZEV2ZW50LmNvbXBvbmVudC5vcHRpb24oXCJzZWxlY3RlZEl0ZW1cIik7XHJcbiAgICAgICAgICAgIHZhciB2YXJpYWJsZURhdGEgPSBleHRlbmQoe30sIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlOiBzZWxlY3RlZEl0ZW0sXHJcbiAgICAgICAgICAgICAgICBlc2NhcGVDaGFyOiB0aGlzLm9wdGlvbnMuZXNjYXBlQ2hhclxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucXVpbGwuaW5zZXJ0RW1iZWQoY2FyZXRQb3NpdGlvbiwgXCJ2YXJpYWJsZVwiLCB2YXJpYWJsZURhdGEpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5xdWlsbC5zZXRTZWxlY3Rpb24oY2FyZXRQb3NpdGlvbiArIDEpXHJcbiAgICAgICAgICAgIH0uYmluZCh0aGlzKSlcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0IGRlZmF1bHQgVmFyaWFibGVNb2R1bGU7XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/devextreme/esm/ui/html_editor/modules/variables.js\n");

/***/ }),

/***/ "./node_modules/devextreme/esm/ui/html_editor/modules/widget_collector.js":
/*!********************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/html_editor/modules/widget_collector.js ***!
  \********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return WidgetCollector; });\n/* harmony import */ var _core_utils_iterator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/utils/iterator */ \"./node_modules/devextreme/esm/core/utils/iterator.js\");\n/**\r\n * DevExtreme (esm/ui/html_editor/modules/widget_collector.js)\r\n * Version: 21.2.7\r\n * Build date: Mon Apr 11 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\r\nclass WidgetCollector {\r\n    constructor() {\r\n        this._collection = []\r\n    }\r\n    clear() {\r\n        this._collection = []\r\n    }\r\n    add(name, instance) {\r\n        this._collection.push({\r\n            name: name,\r\n            instance: instance\r\n        })\r\n    }\r\n    getByName(widgetName) {\r\n        var widget = null;\r\n        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_0__[\"each\"])(this._collection, (index, _ref) => {\r\n            var {\r\n                name: name,\r\n                instance: instance\r\n            } = _ref;\r\n            if (name === widgetName) {\r\n                widget = instance;\r\n                return false\r\n            }\r\n        });\r\n        return widget\r\n    }\r\n    each(handler) {\r\n        this._collection.forEach(_ref2 => {\r\n            var {\r\n                name: name,\r\n                instance: instance\r\n            } = _ref2;\r\n            return instance && handler(name, instance)\r\n        })\r\n    }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGV2ZXh0cmVtZS9lc20vdWkvaHRtbF9lZGl0b3IvbW9kdWxlcy93aWRnZXRfY29sbGVjdG9yLmpzP2NkYTAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdzQztBQUN2QjtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFFBQVEsaUVBQUk7QUFDWjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxTQUFTO0FBQ1Q7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9kZXZleHRyZW1lL2VzbS91aS9odG1sX2VkaXRvci9tb2R1bGVzL3dpZGdldF9jb2xsZWN0b3IuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogRGV2RXh0cmVtZSAoZXNtL3VpL2h0bWxfZWRpdG9yL21vZHVsZXMvd2lkZ2V0X2NvbGxlY3Rvci5qcylcclxuICogVmVyc2lvbjogMjEuMi43XHJcbiAqIEJ1aWxkIGRhdGU6IE1vbiBBcHIgMTEgMjAyMlxyXG4gKlxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTIgLSAyMDIyIERldmVsb3BlciBFeHByZXNzIEluYy4gQUxMIFJJR0hUUyBSRVNFUlZFRFxyXG4gKiBSZWFkIGFib3V0IERldkV4dHJlbWUgbGljZW5zaW5nIGhlcmU6IGh0dHBzOi8vanMuZGV2ZXhwcmVzcy5jb20vTGljZW5zaW5nL1xyXG4gKi9cclxuaW1wb3J0IHtcclxuICAgIGVhY2hcclxufSBmcm9tIFwiLi4vLi4vLi4vY29yZS91dGlscy9pdGVyYXRvclwiO1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBXaWRnZXRDb2xsZWN0b3Ige1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5fY29sbGVjdGlvbiA9IFtdXHJcbiAgICB9XHJcbiAgICBjbGVhcigpIHtcclxuICAgICAgICB0aGlzLl9jb2xsZWN0aW9uID0gW11cclxuICAgIH1cclxuICAgIGFkZChuYW1lLCBpbnN0YW5jZSkge1xyXG4gICAgICAgIHRoaXMuX2NvbGxlY3Rpb24ucHVzaCh7XHJcbiAgICAgICAgICAgIG5hbWU6IG5hbWUsXHJcbiAgICAgICAgICAgIGluc3RhbmNlOiBpbnN0YW5jZVxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcbiAgICBnZXRCeU5hbWUod2lkZ2V0TmFtZSkge1xyXG4gICAgICAgIHZhciB3aWRnZXQgPSBudWxsO1xyXG4gICAgICAgIGVhY2godGhpcy5fY29sbGVjdGlvbiwgKGluZGV4LCBfcmVmKSA9PiB7XHJcbiAgICAgICAgICAgIHZhciB7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiBuYW1lLFxyXG4gICAgICAgICAgICAgICAgaW5zdGFuY2U6IGluc3RhbmNlXHJcbiAgICAgICAgICAgIH0gPSBfcmVmO1xyXG4gICAgICAgICAgICBpZiAobmFtZSA9PT0gd2lkZ2V0TmFtZSkge1xyXG4gICAgICAgICAgICAgICAgd2lkZ2V0ID0gaW5zdGFuY2U7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiB3aWRnZXRcclxuICAgIH1cclxuICAgIGVhY2goaGFuZGxlcikge1xyXG4gICAgICAgIHRoaXMuX2NvbGxlY3Rpb24uZm9yRWFjaChfcmVmMiA9PiB7XHJcbiAgICAgICAgICAgIHZhciB7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiBuYW1lLFxyXG4gICAgICAgICAgICAgICAgaW5zdGFuY2U6IGluc3RhbmNlXHJcbiAgICAgICAgICAgIH0gPSBfcmVmMjtcclxuICAgICAgICAgICAgcmV0dXJuIGluc3RhbmNlICYmIGhhbmRsZXIobmFtZSwgaW5zdGFuY2UpXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/devextreme/esm/ui/html_editor/modules/widget_collector.js\n");

/***/ }),

/***/ "./node_modules/devextreme/esm/ui/html_editor/quill_importer.js":
/*!**********************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/html_editor/quill_importer.js ***!
  \**********************************************************************/
/*! exports provided: getQuill */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getQuill\", function() { return getQuill; });\n/* harmony import */ var _widget_ui_errors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../widget/ui.errors */ \"./node_modules/devextreme/esm/ui/widget/ui.errors.js\");\n/* harmony import */ var devextreme_quill__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! devextreme-quill */ \"./node_modules/devextreme-quill/dist/dx-quill.js\");\n/* harmony import */ var devextreme_quill__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(devextreme_quill__WEBPACK_IMPORTED_MODULE_1__);\n/**\r\n * DevExtreme (esm/ui/html_editor/quill_importer.js)\r\n * Version: 21.2.7\r\n * Build date: Mon Apr 11 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\r\n\r\nfunction getQuill() {\r\n    if (!devextreme_quill__WEBPACK_IMPORTED_MODULE_1___default.a) {\r\n        throw _widget_ui_errors__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Error(\"E1041\", \"Quill\")\r\n    }\r\n    return devextreme_quill__WEBPACK_IMPORTED_MODULE_1___default.a\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGV2ZXh0cmVtZS9lc20vdWkvaHRtbF9lZGl0b3IvcXVpbGxfaW1wb3J0ZXIuanM/MTA1MyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUN5QztBQUNKO0FBQzlCO0FBQ1AsU0FBUyx1REFBSztBQUNkLGNBQWMseURBQU07QUFDcEI7QUFDQSxXQUFXLHVEQUFLO0FBQ2hCIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2RldmV4dHJlbWUvZXNtL3VpL2h0bWxfZWRpdG9yL3F1aWxsX2ltcG9ydGVyLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIERldkV4dHJlbWUgKGVzbS91aS9odG1sX2VkaXRvci9xdWlsbF9pbXBvcnRlci5qcylcclxuICogVmVyc2lvbjogMjEuMi43XHJcbiAqIEJ1aWxkIGRhdGU6IE1vbiBBcHIgMTEgMjAyMlxyXG4gKlxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTIgLSAyMDIyIERldmVsb3BlciBFeHByZXNzIEluYy4gQUxMIFJJR0hUUyBSRVNFUlZFRFxyXG4gKiBSZWFkIGFib3V0IERldkV4dHJlbWUgbGljZW5zaW5nIGhlcmU6IGh0dHBzOi8vanMuZGV2ZXhwcmVzcy5jb20vTGljZW5zaW5nL1xyXG4gKi9cclxuaW1wb3J0IEVycm9ycyBmcm9tIFwiLi4vd2lkZ2V0L3VpLmVycm9yc1wiO1xyXG5pbXBvcnQgUXVpbGwgZnJvbSBcImRldmV4dHJlbWUtcXVpbGxcIjtcclxuZXhwb3J0IGZ1bmN0aW9uIGdldFF1aWxsKCkge1xyXG4gICAgaWYgKCFRdWlsbCkge1xyXG4gICAgICAgIHRocm93IEVycm9ycy5FcnJvcihcIkUxMDQxXCIsIFwiUXVpbGxcIilcclxuICAgIH1cclxuICAgIHJldHVybiBRdWlsbFxyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/devextreme/esm/ui/html_editor/quill_importer.js\n");

/***/ }),

/***/ "./node_modules/devextreme/esm/ui/html_editor/quill_registrator.js":
/*!*************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/html_editor/quill_registrator.js ***!
  \*************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _quill_importer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./quill_importer */ \"./node_modules/devextreme/esm/ui/html_editor/quill_importer.js\");\n/* harmony import */ var _themes_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./themes/base */ \"./node_modules/devextreme/esm/ui/html_editor/themes/base.js\");\n/* harmony import */ var _formats_image__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./formats/image */ \"./node_modules/devextreme/esm/ui/html_editor/formats/image.js\");\n/* harmony import */ var _formats_link__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./formats/link */ \"./node_modules/devextreme/esm/ui/html_editor/formats/link.js\");\n/* harmony import */ var _formats_font__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./formats/font */ \"./node_modules/devextreme/esm/ui/html_editor/formats/font.js\");\n/* harmony import */ var _formats_size__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./formats/size */ \"./node_modules/devextreme/esm/ui/html_editor/formats/size.js\");\n/* harmony import */ var _formats_align__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./formats/align */ \"./node_modules/devextreme/esm/ui/html_editor/formats/align.js\");\n/* harmony import */ var _modules_toolbar__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./modules/toolbar */ \"./node_modules/devextreme/esm/ui/html_editor/modules/toolbar.js\");\n/* harmony import */ var _modules_dropImage__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./modules/dropImage */ \"./node_modules/devextreme/esm/ui/html_editor/modules/dropImage.js\");\n/* harmony import */ var _modules_variables__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./modules/variables */ \"./node_modules/devextreme/esm/ui/html_editor/modules/variables.js\");\n/* harmony import */ var _modules_resizing__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./modules/resizing */ \"./node_modules/devextreme/esm/ui/html_editor/modules/resizing.js\");\n/* harmony import */ var _modules_tableResizing__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./modules/tableResizing */ \"./node_modules/devextreme/esm/ui/html_editor/modules/tableResizing.js\");\n/* harmony import */ var _modules_tableContextMenu__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./modules/tableContextMenu */ \"./node_modules/devextreme/esm/ui/html_editor/modules/tableContextMenu.js\");\n/* harmony import */ var _modules_mentions__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./modules/mentions */ \"./node_modules/devextreme/esm/ui/html_editor/modules/mentions.js\");\n/**\r\n * DevExtreme (esm/ui/html_editor/quill_registrator.js)\r\n * Version: 21.2.7\r\n * Build date: Mon Apr 11 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass QuillRegistrator {\r\n    constructor() {\r\n        if (QuillRegistrator.initialized) {\r\n            return\r\n        }\r\n        var quill = this.getQuill();\r\n        var DirectionStyle = quill.import(\"attributors/style/direction\");\r\n        quill.register({\r\n            \"formats/align\": _formats_align__WEBPACK_IMPORTED_MODULE_6__[\"default\"],\r\n            \"formats/direction\": DirectionStyle,\r\n            \"formats/font\": _formats_font__WEBPACK_IMPORTED_MODULE_4__[\"default\"],\r\n            \"formats/size\": _formats_size__WEBPACK_IMPORTED_MODULE_5__[\"default\"],\r\n            \"formats/extendedImage\": _formats_image__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\r\n            \"formats/link\": _formats_link__WEBPACK_IMPORTED_MODULE_3__[\"default\"],\r\n            \"modules/toolbar\": _modules_toolbar__WEBPACK_IMPORTED_MODULE_7__[\"default\"],\r\n            \"modules/dropImage\": _modules_dropImage__WEBPACK_IMPORTED_MODULE_8__[\"default\"],\r\n            \"modules/variables\": _modules_variables__WEBPACK_IMPORTED_MODULE_9__[\"default\"],\r\n            \"modules/resizing\": _modules_resizing__WEBPACK_IMPORTED_MODULE_10__[\"default\"],\r\n            \"modules/tableResizing\": _modules_tableResizing__WEBPACK_IMPORTED_MODULE_11__[\"default\"],\r\n            \"modules/tableContextMenu\": _modules_tableContextMenu__WEBPACK_IMPORTED_MODULE_12__[\"default\"],\r\n            \"modules/mentions\": _modules_mentions__WEBPACK_IMPORTED_MODULE_13__[\"default\"],\r\n            \"themes/basic\": _themes_base__WEBPACK_IMPORTED_MODULE_1__[\"default\"]\r\n        }, true);\r\n        this._customModules = [];\r\n        QuillRegistrator._initialized = true\r\n    }\r\n    createEditor(container, config) {\r\n        var quill = this.getQuill();\r\n        return new quill(container, config)\r\n    }\r\n    registerModules(modulesConfig) {\r\n        var isModule = RegExp(\"modules/*\");\r\n        var quill = this.getQuill();\r\n        var isRegisteredModule = modulePath => !!quill.imports[modulePath];\r\n        for (var modulePath in modulesConfig) {\r\n            if (isModule.test(modulePath) && !isRegisteredModule(modulePath)) {\r\n                this._customModules.push(modulePath.slice(8))\r\n            }\r\n        }\r\n        quill.register(modulesConfig, true)\r\n    }\r\n    getRegisteredModuleNames() {\r\n        return this._customModules\r\n    }\r\n    getQuill() {\r\n        return Object(_quill_importer__WEBPACK_IMPORTED_MODULE_0__[\"getQuill\"])()\r\n    }\r\n}\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (QuillRegistrator);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGV2ZXh0cmVtZS9lc20vdWkvaHRtbF9lZGl0b3IvcXVpbGxfcmVnaXN0cmF0b3IuanM/NmU1YSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRzBCO0FBQ1k7QUFDRjtBQUNGO0FBQ0s7QUFDQTtBQUNFO0FBQ0Q7QUFDSTtBQUNBO0FBQ0Y7QUFDVTtBQUNNO0FBQ1Y7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixzREFBVTtBQUN2QztBQUNBLDRCQUE0QixxREFBUztBQUNyQyw0QkFBNEIscURBQVM7QUFDckMscUNBQXFDLHNEQUFLO0FBQzFDLDRCQUE0QixxREFBSTtBQUNoQywrQkFBK0Isd0RBQU87QUFDdEMsaUNBQWlDLDBEQUFTO0FBQzFDLGlDQUFpQywwREFBUztBQUMxQyxnQ0FBZ0MsMERBQVE7QUFDeEMscUNBQXFDLCtEQUFhO0FBQ2xELHdDQUF3QyxrRUFBZ0I7QUFDeEQsZ0NBQWdDLDBEQUFjO0FBQzlDLDRCQUE0QixvREFBUztBQUNyQyxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGdFQUFRO0FBQ3ZCO0FBQ0E7QUFDZSwrRUFBZ0IsRUFBQyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9kZXZleHRyZW1lL2VzbS91aS9odG1sX2VkaXRvci9xdWlsbF9yZWdpc3RyYXRvci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBEZXZFeHRyZW1lIChlc20vdWkvaHRtbF9lZGl0b3IvcXVpbGxfcmVnaXN0cmF0b3IuanMpXHJcbiAqIFZlcnNpb246IDIxLjIuN1xyXG4gKiBCdWlsZCBkYXRlOiBNb24gQXByIDExIDIwMjJcclxuICpcclxuICogQ29weXJpZ2h0IChjKSAyMDEyIC0gMjAyMiBEZXZlbG9wZXIgRXhwcmVzcyBJbmMuIEFMTCBSSUdIVFMgUkVTRVJWRURcclxuICogUmVhZCBhYm91dCBEZXZFeHRyZW1lIGxpY2Vuc2luZyBoZXJlOiBodHRwczovL2pzLmRldmV4cHJlc3MuY29tL0xpY2Vuc2luZy9cclxuICovXHJcbmltcG9ydCB7XHJcbiAgICBnZXRRdWlsbFxyXG59IGZyb20gXCIuL3F1aWxsX2ltcG9ydGVyXCI7XHJcbmltcG9ydCBCYXNlVGhlbWUgZnJvbSBcIi4vdGhlbWVzL2Jhc2VcIjtcclxuaW1wb3J0IEltYWdlIGZyb20gXCIuL2Zvcm1hdHMvaW1hZ2VcIjtcclxuaW1wb3J0IExpbmsgZnJvbSBcIi4vZm9ybWF0cy9saW5rXCI7XHJcbmltcG9ydCBGb250U3R5bGUgZnJvbSBcIi4vZm9ybWF0cy9mb250XCI7XHJcbmltcG9ydCBTaXplU3R5bGUgZnJvbSBcIi4vZm9ybWF0cy9zaXplXCI7XHJcbmltcG9ydCBBbGlnblN0eWxlIGZyb20gXCIuL2Zvcm1hdHMvYWxpZ25cIjtcclxuaW1wb3J0IFRvb2xiYXIgZnJvbSBcIi4vbW9kdWxlcy90b29sYmFyXCI7XHJcbmltcG9ydCBEcm9wSW1hZ2UgZnJvbSBcIi4vbW9kdWxlcy9kcm9wSW1hZ2VcIjtcclxuaW1wb3J0IFZhcmlhYmxlcyBmcm9tIFwiLi9tb2R1bGVzL3ZhcmlhYmxlc1wiO1xyXG5pbXBvcnQgUmVzaXppbmcgZnJvbSBcIi4vbW9kdWxlcy9yZXNpemluZ1wiO1xyXG5pbXBvcnQgVGFibGVSZXNpemluZyBmcm9tIFwiLi9tb2R1bGVzL3RhYmxlUmVzaXppbmdcIjtcclxuaW1wb3J0IFRhYmxlQ29udGV4dE1lbnUgZnJvbSBcIi4vbW9kdWxlcy90YWJsZUNvbnRleHRNZW51XCI7XHJcbmltcG9ydCBNZW50aW9uc01vZHVsZSBmcm9tIFwiLi9tb2R1bGVzL21lbnRpb25zXCI7XHJcbmNsYXNzIFF1aWxsUmVnaXN0cmF0b3Ige1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgaWYgKFF1aWxsUmVnaXN0cmF0b3IuaW5pdGlhbGl6ZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBxdWlsbCA9IHRoaXMuZ2V0UXVpbGwoKTtcclxuICAgICAgICB2YXIgRGlyZWN0aW9uU3R5bGUgPSBxdWlsbC5pbXBvcnQoXCJhdHRyaWJ1dG9ycy9zdHlsZS9kaXJlY3Rpb25cIik7XHJcbiAgICAgICAgcXVpbGwucmVnaXN0ZXIoe1xyXG4gICAgICAgICAgICBcImZvcm1hdHMvYWxpZ25cIjogQWxpZ25TdHlsZSxcclxuICAgICAgICAgICAgXCJmb3JtYXRzL2RpcmVjdGlvblwiOiBEaXJlY3Rpb25TdHlsZSxcclxuICAgICAgICAgICAgXCJmb3JtYXRzL2ZvbnRcIjogRm9udFN0eWxlLFxyXG4gICAgICAgICAgICBcImZvcm1hdHMvc2l6ZVwiOiBTaXplU3R5bGUsXHJcbiAgICAgICAgICAgIFwiZm9ybWF0cy9leHRlbmRlZEltYWdlXCI6IEltYWdlLFxyXG4gICAgICAgICAgICBcImZvcm1hdHMvbGlua1wiOiBMaW5rLFxyXG4gICAgICAgICAgICBcIm1vZHVsZXMvdG9vbGJhclwiOiBUb29sYmFyLFxyXG4gICAgICAgICAgICBcIm1vZHVsZXMvZHJvcEltYWdlXCI6IERyb3BJbWFnZSxcclxuICAgICAgICAgICAgXCJtb2R1bGVzL3ZhcmlhYmxlc1wiOiBWYXJpYWJsZXMsXHJcbiAgICAgICAgICAgIFwibW9kdWxlcy9yZXNpemluZ1wiOiBSZXNpemluZyxcclxuICAgICAgICAgICAgXCJtb2R1bGVzL3RhYmxlUmVzaXppbmdcIjogVGFibGVSZXNpemluZyxcclxuICAgICAgICAgICAgXCJtb2R1bGVzL3RhYmxlQ29udGV4dE1lbnVcIjogVGFibGVDb250ZXh0TWVudSxcclxuICAgICAgICAgICAgXCJtb2R1bGVzL21lbnRpb25zXCI6IE1lbnRpb25zTW9kdWxlLFxyXG4gICAgICAgICAgICBcInRoZW1lcy9iYXNpY1wiOiBCYXNlVGhlbWVcclxuICAgICAgICB9LCB0cnVlKTtcclxuICAgICAgICB0aGlzLl9jdXN0b21Nb2R1bGVzID0gW107XHJcbiAgICAgICAgUXVpbGxSZWdpc3RyYXRvci5faW5pdGlhbGl6ZWQgPSB0cnVlXHJcbiAgICB9XHJcbiAgICBjcmVhdGVFZGl0b3IoY29udGFpbmVyLCBjb25maWcpIHtcclxuICAgICAgICB2YXIgcXVpbGwgPSB0aGlzLmdldFF1aWxsKCk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBxdWlsbChjb250YWluZXIsIGNvbmZpZylcclxuICAgIH1cclxuICAgIHJlZ2lzdGVyTW9kdWxlcyhtb2R1bGVzQ29uZmlnKSB7XHJcbiAgICAgICAgdmFyIGlzTW9kdWxlID0gUmVnRXhwKFwibW9kdWxlcy8qXCIpO1xyXG4gICAgICAgIHZhciBxdWlsbCA9IHRoaXMuZ2V0UXVpbGwoKTtcclxuICAgICAgICB2YXIgaXNSZWdpc3RlcmVkTW9kdWxlID0gbW9kdWxlUGF0aCA9PiAhIXF1aWxsLmltcG9ydHNbbW9kdWxlUGF0aF07XHJcbiAgICAgICAgZm9yICh2YXIgbW9kdWxlUGF0aCBpbiBtb2R1bGVzQ29uZmlnKSB7XHJcbiAgICAgICAgICAgIGlmIChpc01vZHVsZS50ZXN0KG1vZHVsZVBhdGgpICYmICFpc1JlZ2lzdGVyZWRNb2R1bGUobW9kdWxlUGF0aCkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2N1c3RvbU1vZHVsZXMucHVzaChtb2R1bGVQYXRoLnNsaWNlKDgpKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHF1aWxsLnJlZ2lzdGVyKG1vZHVsZXNDb25maWcsIHRydWUpXHJcbiAgICB9XHJcbiAgICBnZXRSZWdpc3RlcmVkTW9kdWxlTmFtZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2N1c3RvbU1vZHVsZXNcclxuICAgIH1cclxuICAgIGdldFF1aWxsKCkge1xyXG4gICAgICAgIHJldHVybiBnZXRRdWlsbCgpXHJcbiAgICB9XHJcbn1cclxuZXhwb3J0IGRlZmF1bHQgUXVpbGxSZWdpc3RyYXRvcjtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/devextreme/esm/ui/html_editor/quill_registrator.js\n");

/***/ }),

/***/ "./node_modules/devextreme/esm/ui/html_editor/themes/base.js":
/*!*******************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/html_editor/themes/base.js ***!
  \*******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var devextreme_quill__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devextreme-quill */ \"./node_modules/devextreme-quill/dist/dx-quill.js\");\n/* harmony import */ var devextreme_quill__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(devextreme_quill__WEBPACK_IMPORTED_MODULE_0__);\n/**\r\n * DevExtreme (esm/ui/html_editor/themes/base.js)\r\n * Version: 21.2.7\r\n * Build date: Mon Apr 11 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\r\nvar BaseTheme;\r\nif (devextreme_quill__WEBPACK_IMPORTED_MODULE_0___default.a) {\r\n    var Theme = devextreme_quill__WEBPACK_IMPORTED_MODULE_0___default.a.import(\"core/theme\");\r\n    BaseTheme = class extends Theme {\r\n        constructor(quill, options) {\r\n            super(quill, options);\r\n            this.quill.root.classList.add(\"dx-htmleditor-content\");\r\n            this.quill.root.setAttribute(\"role\", \"textbox\")\r\n        }\r\n    }\r\n} else {\r\n    BaseTheme = {}\r\n}\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (BaseTheme);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGV2ZXh0cmVtZS9lc20vdWkvaHRtbF9lZGl0b3IvdGhlbWVzL2Jhc2UuanM/M2JjNyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ3FDO0FBQ3JDO0FBQ0EsSUFBSSx1REFBSztBQUNULGdCQUFnQix1REFBSztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ2Usd0VBQVMsRUFBQyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9kZXZleHRyZW1lL2VzbS91aS9odG1sX2VkaXRvci90aGVtZXMvYmFzZS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBEZXZFeHRyZW1lIChlc20vdWkvaHRtbF9lZGl0b3IvdGhlbWVzL2Jhc2UuanMpXHJcbiAqIFZlcnNpb246IDIxLjIuN1xyXG4gKiBCdWlsZCBkYXRlOiBNb24gQXByIDExIDIwMjJcclxuICpcclxuICogQ29weXJpZ2h0IChjKSAyMDEyIC0gMjAyMiBEZXZlbG9wZXIgRXhwcmVzcyBJbmMuIEFMTCBSSUdIVFMgUkVTRVJWRURcclxuICogUmVhZCBhYm91dCBEZXZFeHRyZW1lIGxpY2Vuc2luZyBoZXJlOiBodHRwczovL2pzLmRldmV4cHJlc3MuY29tL0xpY2Vuc2luZy9cclxuICovXHJcbmltcG9ydCBRdWlsbCBmcm9tIFwiZGV2ZXh0cmVtZS1xdWlsbFwiO1xyXG52YXIgQmFzZVRoZW1lO1xyXG5pZiAoUXVpbGwpIHtcclxuICAgIHZhciBUaGVtZSA9IFF1aWxsLmltcG9ydChcImNvcmUvdGhlbWVcIik7XHJcbiAgICBCYXNlVGhlbWUgPSBjbGFzcyBleHRlbmRzIFRoZW1lIHtcclxuICAgICAgICBjb25zdHJ1Y3RvcihxdWlsbCwgb3B0aW9ucykge1xyXG4gICAgICAgICAgICBzdXBlcihxdWlsbCwgb3B0aW9ucyk7XHJcbiAgICAgICAgICAgIHRoaXMucXVpbGwucm9vdC5jbGFzc0xpc3QuYWRkKFwiZHgtaHRtbGVkaXRvci1jb250ZW50XCIpO1xyXG4gICAgICAgICAgICB0aGlzLnF1aWxsLnJvb3Quc2V0QXR0cmlidXRlKFwicm9sZVwiLCBcInRleHRib3hcIilcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0gZWxzZSB7XHJcbiAgICBCYXNlVGhlbWUgPSB7fVxyXG59XHJcbmV4cG9ydCBkZWZhdWx0IEJhc2VUaGVtZTtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/devextreme/esm/ui/html_editor/themes/base.js\n");

/***/ }),

/***/ "./node_modules/devextreme/esm/ui/html_editor/ui.html_editor.js":
/*!**********************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/html_editor/ui.html_editor.js ***!
  \**********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/renderer */ \"./node_modules/devextreme/esm/core/renderer.js\");\n/* harmony import */ var _core_utils_extend__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/utils/extend */ \"./node_modules/devextreme/esm/core/utils/extend.js\");\n/* harmony import */ var _core_utils_type__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/utils/type */ \"./node_modules/devextreme/esm/core/utils/type.js\");\n/* harmony import */ var _core_element__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/element */ \"./node_modules/devextreme/esm/core/element.js\");\n/* harmony import */ var _core_utils_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/utils/common */ \"./node_modules/devextreme/esm/core/utils/common.js\");\n/* harmony import */ var _core_component_registrator__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core/component_registrator */ \"./node_modules/devextreme/esm/core/component_registrator.js\");\n/* harmony import */ var _core_templates_empty_template__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../core/templates/empty_template */ \"./node_modules/devextreme/esm/core/templates/empty_template.js\");\n/* harmony import */ var _editor_editor__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../editor/editor */ \"./node_modules/devextreme/esm/ui/editor/editor.js\");\n/* harmony import */ var _widget_ui_errors__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../widget/ui.errors */ \"./node_modules/devextreme/esm/ui/widget/ui.errors.js\");\n/* harmony import */ var _core_utils_callbacks__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../core/utils/callbacks */ \"./node_modules/devextreme/esm/core/utils/callbacks.js\");\n/* harmony import */ var _core_utils_deferred__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../core/utils/deferred */ \"./node_modules/devextreme/esm/core/utils/deferred.js\");\n/* harmony import */ var _events_core_events_engine__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../events/core/events_engine */ \"./node_modules/devextreme/esm/events/core/events_engine.js\");\n/* harmony import */ var _events_utils_index__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../events/utils/index */ \"./node_modules/devextreme/esm/events/utils/index.js\");\n/* harmony import */ var _events_index__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../events/index */ \"./node_modules/devextreme/esm/events/index.js\");\n/* harmony import */ var _events_gesture_emitter_gesture_scroll__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../events/gesture/emitter.gesture.scroll */ \"./node_modules/devextreme/esm/events/gesture/emitter.gesture.scroll.js\");\n/* harmony import */ var _text_box_utils_scroll__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../text_box/utils.scroll */ \"./node_modules/devextreme/esm/ui/text_box/utils.scroll.js\");\n/* harmony import */ var _events_pointer__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../events/pointer */ \"./node_modules/devextreme/esm/events/pointer.js\");\n/* harmony import */ var _core_devices__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../core/devices */ \"./node_modules/devextreme/esm/core/devices.js\");\n/* harmony import */ var _quill_registrator__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./quill_registrator */ \"./node_modules/devextreme/esm/ui/html_editor/quill_registrator.js\");\n/* harmony import */ var _converters_delta__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./converters/delta */ \"./node_modules/devextreme/esm/ui/html_editor/converters/delta.js\");\n/* harmony import */ var _converterController__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./converterController */ \"./node_modules/devextreme/esm/ui/html_editor/converterController.js\");\n/* harmony import */ var _matchers_wordLists__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./matchers/wordLists */ \"./node_modules/devextreme/esm/ui/html_editor/matchers/wordLists.js\");\n/* harmony import */ var _ui_formDialog__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./ui/formDialog */ \"./node_modules/devextreme/esm/ui/html_editor/ui/formDialog.js\");\n/**\r\n * DevExtreme (esm/ui/html_editor/ui.html_editor.js)\r\n * Version: 21.2.7\r\n * Build date: Mon Apr 11 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nvar HTML_EDITOR_CLASS = \"dx-htmleditor\";\r\nvar QUILL_CONTAINER_CLASS = \"dx-quill-container\";\r\nvar QUILL_CLIPBOARD_CLASS = \"ql-clipboard\";\r\nvar HTML_EDITOR_SUBMIT_ELEMENT_CLASS = \"dx-htmleditor-submit-element\";\r\nvar HTML_EDITOR_CONTENT_CLASS = \"dx-htmleditor-content\";\r\nvar MARKDOWN_VALUE_TYPE = \"markdown\";\r\nvar ANONYMOUS_TEMPLATE_NAME = \"htmlContent\";\r\nvar isIos = \"ios\" === _core_devices__WEBPACK_IMPORTED_MODULE_17__[\"default\"].current().platform;\r\nvar HtmlEditor = _editor_editor__WEBPACK_IMPORTED_MODULE_7__[\"default\"].inherit({\r\n    _getDefaultOptions: function() {\r\n        return Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_1__[\"extend\"])(this.callBase(), {\r\n            focusStateEnabled: true,\r\n            valueType: \"html\",\r\n            placeholder: \"\",\r\n            toolbar: null,\r\n            variables: null,\r\n            mediaResizing: null,\r\n            tableResizing: null,\r\n            mentions: null,\r\n            customizeModules: null,\r\n            tableContextMenu: null,\r\n            allowSoftLineBreak: false,\r\n            formDialogOptions: null,\r\n            stylingMode: \"outlined\"\r\n        })\r\n    },\r\n    _init: function() {\r\n        this.callBase();\r\n        this._cleanCallback = Object(_core_utils_callbacks__WEBPACK_IMPORTED_MODULE_9__[\"default\"])();\r\n        this._contentInitializedCallback = Object(_core_utils_callbacks__WEBPACK_IMPORTED_MODULE_9__[\"default\"])()\r\n    },\r\n    _getAnonymousTemplateName: function() {\r\n        return ANONYMOUS_TEMPLATE_NAME\r\n    },\r\n    _initTemplates: function() {\r\n        this._templateManager.addDefaultTemplates({\r\n            [ANONYMOUS_TEMPLATE_NAME]: new _core_templates_empty_template__WEBPACK_IMPORTED_MODULE_6__[\"EmptyTemplate\"]\r\n        });\r\n        this.callBase()\r\n    },\r\n    _focusTarget: function() {\r\n        return this._getContent()\r\n    },\r\n    _getContent: function() {\r\n        return this.$element().find(\".\".concat(HTML_EDITOR_CONTENT_CLASS))\r\n    },\r\n    _focusInHandler: function(_ref) {\r\n        var {\r\n            relatedTarget: relatedTarget\r\n        } = _ref;\r\n        if (this._shouldSkipFocusEvent(relatedTarget)) {\r\n            return\r\n        }\r\n        this._toggleFocusClass(true, this.$element());\r\n        this.callBase.apply(this, arguments)\r\n    },\r\n    _focusOutHandler: function(_ref2) {\r\n        var {\r\n            relatedTarget: relatedTarget\r\n        } = _ref2;\r\n        if (this._shouldSkipFocusEvent(relatedTarget)) {\r\n            return\r\n        }\r\n        this._toggleFocusClass(false, this.$element());\r\n        this.callBase.apply(this, arguments)\r\n    },\r\n    _shouldSkipFocusEvent: function(relatedTarget) {\r\n        return Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(relatedTarget).hasClass(QUILL_CLIPBOARD_CLASS)\r\n    },\r\n    _initMarkup: function() {\r\n        this._$htmlContainer = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"<div>\").addClass(QUILL_CONTAINER_CLASS);\r\n        this.$element().attr(\"role\", \"application\").addClass(HTML_EDITOR_CLASS).wrapInner(this._$htmlContainer);\r\n        this._renderStylingMode();\r\n        var template = this._getTemplate(ANONYMOUS_TEMPLATE_NAME);\r\n        this._$templateResult = template && template.render({\r\n            container: Object(_core_element__WEBPACK_IMPORTED_MODULE_3__[\"getPublicElement\"])(this._$htmlContainer),\r\n            noModel: true,\r\n            transclude: true\r\n        });\r\n        this._renderSubmitElement();\r\n        this.callBase();\r\n        this._updateContainerMarkup()\r\n    },\r\n    _renderSubmitElement: function() {\r\n        this._$submitElement = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"<textarea>\").addClass(HTML_EDITOR_SUBMIT_ELEMENT_CLASS).attr(\"hidden\", true).appendTo(this.$element());\r\n        this._setSubmitValue(this.option(\"value\"))\r\n    },\r\n    _setSubmitValue: function(value) {\r\n        this._getSubmitElement().val(value)\r\n    },\r\n    _getSubmitElement: function() {\r\n        return this._$submitElement\r\n    },\r\n    _updateContainerMarkup: function() {\r\n        var markup = this.option(\"value\");\r\n        if (this._isMarkdownValue()) {\r\n            this._prepareMarkdownConverter();\r\n            markup = this._markdownConverter.toHtml(markup)\r\n        }\r\n        if (markup) {\r\n            this._$htmlContainer.html(markup)\r\n        }\r\n    },\r\n    _prepareMarkdownConverter: function() {\r\n        var MarkdownConverter = _converterController__WEBPACK_IMPORTED_MODULE_20__[\"default\"].getConverter(\"markdown\");\r\n        if (MarkdownConverter) {\r\n            this._markdownConverter = new MarkdownConverter\r\n        } else {\r\n            throw _widget_ui_errors__WEBPACK_IMPORTED_MODULE_8__[\"default\"].Error(\"E1051\", \"markdown\")\r\n        }\r\n    },\r\n    _render: function() {\r\n        this._prepareConverters();\r\n        this.callBase()\r\n    },\r\n    _prepareQuillRegistrator: function() {\r\n        if (!this._quillRegistrator) {\r\n            this._quillRegistrator = new _quill_registrator__WEBPACK_IMPORTED_MODULE_18__[\"default\"]\r\n        }\r\n    },\r\n    _getRegistrator: function() {\r\n        this._prepareQuillRegistrator();\r\n        return this._quillRegistrator\r\n    },\r\n    _prepareConverters: function() {\r\n        if (!this._deltaConverter) {\r\n            var DeltaConverter = _converterController__WEBPACK_IMPORTED_MODULE_20__[\"default\"].getConverter(\"delta\");\r\n            if (DeltaConverter) {\r\n                this._deltaConverter = new DeltaConverter\r\n            }\r\n        }\r\n        if (this.option(\"valueType\") === MARKDOWN_VALUE_TYPE && !this._markdownConverter) {\r\n            this._prepareMarkdownConverter()\r\n        }\r\n    },\r\n    _renderContentImpl: function() {\r\n        this._contentRenderedDeferred = new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_10__[\"Deferred\"];\r\n        var renderContentPromise = this._contentRenderedDeferred.promise();\r\n        this.callBase();\r\n        this._renderHtmlEditor();\r\n        this._renderFormDialog();\r\n        this._addKeyPressHandler();\r\n        return renderContentPromise\r\n    },\r\n    _pointerMoveHandler: function(e) {\r\n        if (isIos) {\r\n            e.stopPropagation()\r\n        }\r\n    },\r\n    _attachFocusEvents: function() {\r\n        Object(_core_utils_common__WEBPACK_IMPORTED_MODULE_4__[\"deferRender\"])(this.callBase.bind(this))\r\n    },\r\n    _addKeyPressHandler: function() {\r\n        var keyDownEvent = Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_12__[\"addNamespace\"])(\"keydown\", \"\".concat(this.NAME, \"TextChange\"));\r\n        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_11__[\"default\"].on(this._$htmlContainer, keyDownEvent, this._keyDownHandler.bind(this))\r\n    },\r\n    _keyDownHandler: function(e) {\r\n        this._saveValueChangeEvent(e)\r\n    },\r\n    _renderHtmlEditor: function() {\r\n        var customizeModules = this.option(\"customizeModules\");\r\n        var modulesConfig = this._getModulesConfig();\r\n        if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_2__[\"isFunction\"])(customizeModules)) {\r\n            customizeModules(modulesConfig)\r\n        }\r\n        this._quillInstance = this._getRegistrator().createEditor(this._$htmlContainer[0], {\r\n            placeholder: this.option(\"placeholder\"),\r\n            readOnly: this.option(\"readOnly\") || this.option(\"disabled\"),\r\n            modules: modulesConfig,\r\n            theme: \"basic\"\r\n        });\r\n        this._deltaConverter.setQuillInstance(this._quillInstance);\r\n        this._textChangeHandlerWithContext = this._textChangeHandler.bind(this);\r\n        this._quillInstance.on(\"text-change\", this._textChangeHandlerWithContext);\r\n        this._renderScrollHandler();\r\n        if (this._hasTranscludedContent()) {\r\n            this._updateContentTask = Object(_core_utils_common__WEBPACK_IMPORTED_MODULE_4__[\"executeAsync\"])(() => {\r\n                this._applyTranscludedContent()\r\n            })\r\n        } else {\r\n            this._finalizeContentRendering()\r\n        }\r\n    },\r\n    _renderScrollHandler: function() {\r\n        var $scrollContainer = this._getContent();\r\n        var initScrollData = Object(_text_box_utils_scroll__WEBPACK_IMPORTED_MODULE_15__[\"prepareScrollData\"])($scrollContainer);\r\n        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_11__[\"default\"].on($scrollContainer, Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_12__[\"addNamespace\"])(_events_gesture_emitter_gesture_scroll__WEBPACK_IMPORTED_MODULE_14__[\"default\"].init, this.NAME), initScrollData, _core_utils_common__WEBPACK_IMPORTED_MODULE_4__[\"noop\"]);\r\n        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_11__[\"default\"].on($scrollContainer, Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_12__[\"addNamespace\"])(_events_pointer__WEBPACK_IMPORTED_MODULE_16__[\"default\"].move, this.NAME), this._pointerMoveHandler.bind(this))\r\n    },\r\n    _applyTranscludedContent: function() {\r\n        var valueOption = this.option(\"value\");\r\n        if (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_2__[\"isDefined\"])(valueOption)) {\r\n            var html = this._deltaConverter.toHtml();\r\n            var newDelta = this._quillInstance.clipboard.convert({\r\n                html: html\r\n            });\r\n            if (newDelta.ops.length) {\r\n                this._quillInstance.setContents(newDelta);\r\n                return\r\n            }\r\n        }\r\n        this._finalizeContentRendering()\r\n    },\r\n    _hasTranscludedContent: function() {\r\n        return this._$templateResult && this._$templateResult.length\r\n    },\r\n    _getModulesConfig: function() {\r\n        var quill = this._getRegistrator().getQuill();\r\n        var wordListMatcher = Object(_matchers_wordLists__WEBPACK_IMPORTED_MODULE_21__[\"default\"])(quill);\r\n        var modulesConfig = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_1__[\"extend\"])({}, {\r\n            table: true,\r\n            toolbar: this._getModuleConfigByOption(\"toolbar\"),\r\n            variables: this._getModuleConfigByOption(\"variables\"),\r\n            resizing: this._getModuleConfigByOption(\"mediaResizing\"),\r\n            tableResizing: this._getModuleConfigByOption(\"tableResizing\"),\r\n            tableContextMenu: this._getModuleConfigByOption(\"tableContextMenu\"),\r\n            mentions: this._getModuleConfigByOption(\"mentions\"),\r\n            uploader: {\r\n                onDrop: e => this._saveValueChangeEvent(Object(_events_index__WEBPACK_IMPORTED_MODULE_13__[\"Event\"])(e)),\r\n                imageBlot: \"extendedImage\"\r\n            },\r\n            keyboard: {\r\n                onKeydown: e => this._saveValueChangeEvent(Object(_events_index__WEBPACK_IMPORTED_MODULE_13__[\"Event\"])(e))\r\n            },\r\n            clipboard: {\r\n                onPaste: e => this._saveValueChangeEvent(Object(_events_index__WEBPACK_IMPORTED_MODULE_13__[\"Event\"])(e)),\r\n                onCut: e => this._saveValueChangeEvent(Object(_events_index__WEBPACK_IMPORTED_MODULE_13__[\"Event\"])(e)),\r\n                matchers: [\r\n                    [\"p.MsoListParagraphCxSpFirst\", wordListMatcher],\r\n                    [\"p.MsoListParagraphCxSpMiddle\", wordListMatcher],\r\n                    [\"p.MsoListParagraphCxSpLast\", wordListMatcher]\r\n                ]\r\n            },\r\n            multiline: Boolean(this.option(\"allowSoftLineBreak\"))\r\n        }, this._getCustomModules());\r\n        return modulesConfig\r\n    },\r\n    _getModuleConfigByOption: function(userOptionName) {\r\n        var optionValue = this.option(userOptionName);\r\n        var config = {};\r\n        if (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_2__[\"isDefined\"])(optionValue)) {\r\n            return\r\n        }\r\n        if (Array.isArray(optionValue)) {\r\n            config[userOptionName] = optionValue\r\n        } else {\r\n            config = optionValue\r\n        }\r\n        return Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_1__[\"extend\"])(this._getBaseModuleConfig(), config)\r\n    },\r\n    _getBaseModuleConfig: function() {\r\n        return {\r\n            editorInstance: this\r\n        }\r\n    },\r\n    _getCustomModules: function() {\r\n        var modules = {};\r\n        var moduleNames = this._getRegistrator().getRegisteredModuleNames();\r\n        moduleNames.forEach(modulePath => {\r\n            modules[modulePath] = this._getBaseModuleConfig()\r\n        });\r\n        return modules\r\n    },\r\n    _textChangeHandler: function(newDelta, oldDelta, source) {\r\n        var htmlMarkup = this._deltaConverter.toHtml();\r\n        var convertedValue = this._isMarkdownValue() ? this._updateValueByType(MARKDOWN_VALUE_TYPE, htmlMarkup) : htmlMarkup;\r\n        var currentValue = this.option(\"value\");\r\n        if (currentValue !== convertedValue && !this._isNullValueConverted(currentValue, convertedValue)) {\r\n            this._isEditorUpdating = true;\r\n            this.option(\"value\", convertedValue)\r\n        }\r\n        this._finalizeContentRendering()\r\n    },\r\n    _isNullValueConverted: function(currentValue, convertedValue) {\r\n        return null === currentValue && \"\" === convertedValue\r\n    },\r\n    _finalizeContentRendering: function() {\r\n        if (this._contentRenderedDeferred) {\r\n            this.clearHistory();\r\n            this._contentInitializedCallback.fire();\r\n            this._contentRenderedDeferred.resolve();\r\n            this._contentRenderedDeferred = void 0\r\n        }\r\n    },\r\n    _updateValueByType: function(valueType, value) {\r\n        var converter = this._markdownConverter;\r\n        if (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_2__[\"isDefined\"])(converter)) {\r\n            return\r\n        }\r\n        var currentValue = Object(_core_utils_common__WEBPACK_IMPORTED_MODULE_4__[\"ensureDefined\"])(value, this.option(\"value\"));\r\n        return valueType === MARKDOWN_VALUE_TYPE ? converter.toMarkdown(currentValue) : converter.toHtml(currentValue)\r\n    },\r\n    _isMarkdownValue: function() {\r\n        return this.option(\"valueType\") === MARKDOWN_VALUE_TYPE\r\n    },\r\n    _resetEnabledState: function() {\r\n        if (this._quillInstance) {\r\n            var isEnabled = !(this.option(\"readOnly\") || this.option(\"disabled\"));\r\n            this._quillInstance.enable(isEnabled)\r\n        }\r\n    },\r\n    _renderFormDialog: function() {\r\n        var userOptions = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_1__[\"extend\"])(true, {\r\n            width: \"auto\",\r\n            height: \"auto\",\r\n            closeOnOutsideClick: true\r\n        }, this.option(\"formDialogOptions\"));\r\n        this._formDialog = new _ui_formDialog__WEBPACK_IMPORTED_MODULE_22__[\"default\"](this, userOptions)\r\n    },\r\n    _getStylingModePrefix: function() {\r\n        return \"dx-htmleditor-\"\r\n    },\r\n    _getQuillContainer: function() {\r\n        return this._$htmlContainer\r\n    },\r\n    _moduleOptionChanged: function(moduleName, args) {\r\n        var _this$_quillInstance;\r\n        var moduleInstance = null === (_this$_quillInstance = this._quillInstance) || void 0 === _this$_quillInstance ? void 0 : _this$_quillInstance.getModule(moduleName);\r\n        var shouldPassOptionsToModule = Boolean(moduleInstance);\r\n        if (shouldPassOptionsToModule) {\r\n            var _args$fullName;\r\n            var optionData = null === (_args$fullName = args.fullName) || void 0 === _args$fullName ? void 0 : _args$fullName.split(\".\");\r\n            var optionName = 2 === optionData.length ? optionData[1] : args.name;\r\n            moduleInstance.option(optionName, args.value)\r\n        } else {\r\n            this._invalidate()\r\n        }\r\n    },\r\n    _optionChanged: function(args) {\r\n        switch (args.name) {\r\n            case \"value\":\r\n                if (this._quillInstance) {\r\n                    if (this._isEditorUpdating) {\r\n                        this._isEditorUpdating = false\r\n                    } else {\r\n                        var updatedValue = this._isMarkdownValue() ? this._updateValueByType(\"HTML\", args.value) : args.value;\r\n                        this._updateHtmlContent(updatedValue)\r\n                    }\r\n                } else {\r\n                    this._$htmlContainer.html(args.value)\r\n                }\r\n                this._setSubmitValue(args.value);\r\n                this.callBase(args);\r\n                break;\r\n            case \"placeholder\":\r\n            case \"variables\":\r\n            case \"toolbar\":\r\n            case \"mentions\":\r\n            case \"customizeModules\":\r\n            case \"allowSoftLineBreak\":\r\n                this._invalidate();\r\n                break;\r\n            case \"tableResizing\":\r\n                this._moduleOptionChanged(\"tableResizing\", args);\r\n                break;\r\n            case \"valueType\":\r\n                this._prepareConverters();\r\n                var newValue = this._updateValueByType(args.value);\r\n                if (\"html\" === args.value && this._quillInstance) {\r\n                    this._updateHtmlContent(newValue)\r\n                } else {\r\n                    this.option(\"value\", newValue)\r\n                }\r\n                break;\r\n            case \"stylingMode\":\r\n                this._renderStylingMode();\r\n                break;\r\n            case \"readOnly\":\r\n            case \"disabled\":\r\n                this.callBase(args);\r\n                this._resetEnabledState();\r\n                break;\r\n            case \"formDialogOptions\":\r\n                this._renderFormDialog();\r\n                break;\r\n            case \"tableContextMenu\":\r\n                this._moduleOptionChanged(\"tableContextMenu\", args);\r\n                break;\r\n            case \"mediaResizing\":\r\n                if (!args.previousValue || !args.value) {\r\n                    this._invalidate()\r\n                } else {\r\n                    this._quillInstance.getModule(\"resizing\").option(args.name, args.value)\r\n                }\r\n                break;\r\n            case \"width\":\r\n                this.callBase(args);\r\n                this._repaintToolbar();\r\n                break;\r\n            default:\r\n                this.callBase(args)\r\n        }\r\n    },\r\n    _repaintToolbar: function() {\r\n        var toolbar = this._quillInstance.getModule(\"toolbar\");\r\n        toolbar && toolbar.repaint()\r\n    },\r\n    _updateHtmlContent: function(html) {\r\n        var newDelta = this._quillInstance.clipboard.convert({\r\n            html: html\r\n        });\r\n        this._quillInstance.setContents(newDelta)\r\n    },\r\n    _clean: function() {\r\n        if (this._quillInstance) {\r\n            _events_core_events_engine__WEBPACK_IMPORTED_MODULE_11__[\"default\"].off(this._getContent(), \".\".concat(this.NAME));\r\n            this._quillInstance.off(\"text-change\", this._textChangeHandlerWithContext);\r\n            this._cleanCallback.fire()\r\n        }\r\n        this._abortUpdateContentTask();\r\n        this._cleanCallback.empty();\r\n        this._contentInitializedCallback.empty();\r\n        this.callBase()\r\n    },\r\n    _abortUpdateContentTask: function() {\r\n        if (this._updateContentTask) {\r\n            this._updateContentTask.abort();\r\n            this._updateContentTask = void 0\r\n        }\r\n    },\r\n    _applyQuillMethod(methodName, args) {\r\n        if (this._quillInstance) {\r\n            return this._quillInstance[methodName].apply(this._quillInstance, args)\r\n        }\r\n    },\r\n    _applyQuillHistoryMethod(methodName) {\r\n        if (this._quillInstance && this._quillInstance.history) {\r\n            this._quillInstance.history[methodName]()\r\n        }\r\n    },\r\n    addCleanCallback(callback) {\r\n        this._cleanCallback.add(callback)\r\n    },\r\n    addContentInitializedCallback(callback) {\r\n        this._contentInitializedCallback.add(callback)\r\n    },\r\n    register: function(components) {\r\n        this._getRegistrator().registerModules(components);\r\n        if (this._quillInstance) {\r\n            this.repaint()\r\n        }\r\n    },\r\n    get: function(modulePath) {\r\n        return this._getRegistrator().getQuill().import(modulePath)\r\n    },\r\n    getModule: function(moduleName) {\r\n        return this._applyQuillMethod(\"getModule\", arguments)\r\n    },\r\n    getQuillInstance: function() {\r\n        return this._quillInstance\r\n    },\r\n    getSelection: function(focus) {\r\n        return this._applyQuillMethod(\"getSelection\", arguments)\r\n    },\r\n    setSelection: function(index, length) {\r\n        this._applyQuillMethod(\"setSelection\", arguments)\r\n    },\r\n    getText: function(index, length) {\r\n        return this._applyQuillMethod(\"getText\", arguments)\r\n    },\r\n    format: function(formatName, formatValue) {\r\n        this._applyQuillMethod(\"format\", arguments)\r\n    },\r\n    formatText: function(index, length, formatName, formatValue) {\r\n        this._applyQuillMethod(\"formatText\", arguments)\r\n    },\r\n    formatLine: function(index, length, formatName, formatValue) {\r\n        this._applyQuillMethod(\"formatLine\", arguments)\r\n    },\r\n    getFormat: function(index, length) {\r\n        return this._applyQuillMethod(\"getFormat\", arguments)\r\n    },\r\n    removeFormat: function(index, length) {\r\n        return this._applyQuillMethod(\"removeFormat\", arguments)\r\n    },\r\n    clearHistory: function() {\r\n        this._applyQuillHistoryMethod(\"clear\")\r\n    },\r\n    undo: function() {\r\n        this._applyQuillHistoryMethod(\"undo\")\r\n    },\r\n    redo: function() {\r\n        this._applyQuillHistoryMethod(\"redo\")\r\n    },\r\n    getLength: function() {\r\n        return this._applyQuillMethod(\"getLength\")\r\n    },\r\n    getBounds: function(index, length) {\r\n        return this._applyQuillMethod(\"getBounds\", arguments)\r\n    },\r\n    delete: function(index, length) {\r\n        this._applyQuillMethod(\"deleteText\", arguments)\r\n    },\r\n    insertText: function(index, text, formats) {\r\n        this._applyQuillMethod(\"insertText\", arguments)\r\n    },\r\n    insertEmbed: function(index, type, config) {\r\n        this._applyQuillMethod(\"insertEmbed\", arguments)\r\n    },\r\n    showFormDialog: function(formConfig) {\r\n        return this._formDialog.show(formConfig)\r\n    },\r\n    formDialogOption: function(optionName, optionValue) {\r\n        return this._formDialog.popupOption.apply(this._formDialog, arguments)\r\n    },\r\n    focus: function() {\r\n        this.callBase();\r\n        this._applyQuillMethod(\"focus\")\r\n    },\r\n    blur: function() {\r\n        this._applyQuillMethod(\"blur\")\r\n    }\r\n});\r\nObject(_core_component_registrator__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(\"dxHtmlEditor\", HtmlEditor);\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (HtmlEditor);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/devextreme/esm/ui/html_editor/ui.html_editor.js\n");

/***/ }),

/***/ "./node_modules/devextreme/esm/ui/html_editor/ui/formDialog.js":
/*!*********************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/html_editor/ui/formDialog.js ***!
  \*********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/renderer */ \"./node_modules/devextreme/esm/core/renderer.js\");\n/* harmony import */ var _core_utils_extend__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core/utils/extend */ \"./node_modules/devextreme/esm/core/utils/extend.js\");\n/* harmony import */ var _popup__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../popup */ \"./node_modules/devextreme/esm/ui/popup.js\");\n/* harmony import */ var _form__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../form */ \"./node_modules/devextreme/esm/ui/form.js\");\n/* harmony import */ var _core_utils_deferred__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../core/utils/deferred */ \"./node_modules/devextreme/esm/core/utils/deferred.js\");\n/* harmony import */ var _localization_message__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../localization/message */ \"./node_modules/devextreme/esm/localization/message.js\");\n/* harmony import */ var _core_utils_window__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../core/utils/window */ \"./node_modules/devextreme/esm/core/utils/window.js\");\n/* harmony import */ var _core_devices__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../core/devices */ \"./node_modules/devextreme/esm/core/devices.js\");\n/**\r\n * DevExtreme (esm/ui/html_editor/ui/formDialog.js)\r\n * Version: 21.2.7\r\n * Build date: Mon Apr 11 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nvar DIALOG_CLASS = \"dx-formdialog\";\r\nvar FORM_CLASS = \"dx-formdialog-form\";\r\nclass FormDialog {\r\n    constructor(editorInstance, popupConfig) {\r\n        this._editorInstance = editorInstance;\r\n        this._popupUserConfig = popupConfig;\r\n        this._renderPopup();\r\n        this._attachOptionChangedHandler()\r\n    }\r\n    _renderPopup() {\r\n        var editorInstance = this._editorInstance;\r\n        var $container = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"<div>\").addClass(DIALOG_CLASS).appendTo(editorInstance.$element());\r\n        var popupConfig = this._getPopupConfig();\r\n        return editorInstance._createComponent($container, _popup__WEBPACK_IMPORTED_MODULE_2__[\"default\"], popupConfig)\r\n    }\r\n    _attachOptionChangedHandler() {\r\n        var _this$_popup;\r\n        null === (_this$_popup = this._popup) || void 0 === _this$_popup ? void 0 : _this$_popup.on(\"optionChanged\", _ref => {\r\n            var {\r\n                name: name,\r\n                value: value\r\n            } = _ref;\r\n            if (\"title\" === name) {\r\n                this._updateFormLabel(value)\r\n            }\r\n        })\r\n    }\r\n    _escKeyHandler() {\r\n        this._popup.hide()\r\n    }\r\n    _addEscapeHandler(e) {\r\n        e.component.registerKeyHandler(\"escape\", this._escKeyHandler.bind(this))\r\n    }\r\n    _isSmallScreen() {\r\n        var screenFactor = Object(_core_utils_window__WEBPACK_IMPORTED_MODULE_6__[\"hasWindow\"])() ? Object(_core_utils_window__WEBPACK_IMPORTED_MODULE_6__[\"getCurrentScreenFactor\"])() : null;\r\n        return \"phone\" === _core_devices__WEBPACK_IMPORTED_MODULE_7__[\"default\"].real().deviceType || \"xs\" === screenFactor\r\n    }\r\n    _getPopupConfig() {\r\n        return Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_1__[\"extend\"])({\r\n            onInitialized: e => {\r\n                this._popup = e.component;\r\n                this._popup.on(\"hiding\", () => {\r\n                    this.deferred.reject()\r\n                });\r\n                this._popup.on(\"shown\", () => {\r\n                    this._form.focus()\r\n                })\r\n            },\r\n            deferRendering: false,\r\n            focusStateEnabled: false,\r\n            showCloseButton: false,\r\n            wrapperAttr: {\r\n                class: \"dx-formdialog\"\r\n            },\r\n            fullScreen: this._isSmallScreen(),\r\n            contentTemplate: contentElem => {\r\n                var $formContainer = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"<div>\").appendTo(contentElem);\r\n                this._renderForm($formContainer, {\r\n                    onEditorEnterKey: _ref2 => {\r\n                        var {\r\n                            component: component,\r\n                            dataField: dataField,\r\n                            event: event\r\n                        } = _ref2;\r\n                        this.hide(component.option(\"formData\"), event)\r\n                    },\r\n                    customizeItem: item => {\r\n                        if (\"simple\" === item.itemType) {\r\n                            item.editorOptions = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_1__[\"extend\"])(true, {}, item.editorOptions, {\r\n                                onInitialized: this._addEscapeHandler.bind(this)\r\n                            })\r\n                        }\r\n                    }\r\n                })\r\n            },\r\n            toolbarItems: [{\r\n                toolbar: \"bottom\",\r\n                location: \"after\",\r\n                widget: \"dxButton\",\r\n                options: {\r\n                    onInitialized: this._addEscapeHandler.bind(this),\r\n                    text: _localization_message__WEBPACK_IMPORTED_MODULE_5__[\"default\"].format(\"OK\"),\r\n                    onClick: _ref3 => {\r\n                        var {\r\n                            event: event\r\n                        } = _ref3;\r\n                        this.hide(this._form.option(\"formData\"), event)\r\n                    }\r\n                }\r\n            }, {\r\n                toolbar: \"bottom\",\r\n                location: \"after\",\r\n                widget: \"dxButton\",\r\n                options: {\r\n                    onInitialized: this._addEscapeHandler.bind(this),\r\n                    text: _localization_message__WEBPACK_IMPORTED_MODULE_5__[\"default\"].format(\"Cancel\"),\r\n                    onClick: () => {\r\n                        this._popup.hide()\r\n                    }\r\n                }\r\n            }]\r\n        }, this._popupUserConfig)\r\n    }\r\n    _renderForm($container, options) {\r\n        $container.addClass(FORM_CLASS);\r\n        this._form = this._editorInstance._createComponent($container, _form__WEBPACK_IMPORTED_MODULE_3__[\"default\"], options);\r\n        this._updateFormLabel()\r\n    }\r\n    _updateFormLabel(text) {\r\n        var _this$_form;\r\n        var label = null !== text && void 0 !== text ? text : this.popupOption(\"title\");\r\n        null === (_this$_form = this._form) || void 0 === _this$_form ? void 0 : _this$_form.$element().attr(\"aria-label\", label)\r\n    }\r\n    show(formUserConfig) {\r\n        if (this._popup.option(\"visible\")) {\r\n            return\r\n        }\r\n        this.deferred = new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_4__[\"Deferred\"];\r\n        var formConfig = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_1__[\"extend\"])({}, formUserConfig);\r\n        this._form.option(formConfig);\r\n        this._popup.show();\r\n        return this.deferred.promise()\r\n    }\r\n    hide(formData, event) {\r\n        this.deferred.resolve(formData, event);\r\n        this._popup.hide()\r\n    }\r\n    popupOption(optionName, optionValue) {\r\n        return this._popup.option.apply(this._popup, arguments)\r\n    }\r\n}\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (FormDialog);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/devextreme/esm/ui/html_editor/ui/formDialog.js\n");

/***/ }),

/***/ "./node_modules/devextreme/esm/ui/html_editor/utils/table_helper.js":
/*!**************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/html_editor/utils/table_helper.js ***!
  \**************************************************************************/
/*! exports provided: TABLE_OPERATIONS, getTableFormats, getTableOperationHandler, unfixTableWidth, getColumnElements, getAutoSizedElements, setLineElementsFormat, getLineElements, getRowElements, hasEmbedContent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TABLE_OPERATIONS\", function() { return TABLE_OPERATIONS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getTableFormats\", function() { return getTableFormats; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getTableOperationHandler\", function() { return getTableOperationHandler; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"unfixTableWidth\", function() { return unfixTableWidth; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getColumnElements\", function() { return getColumnElements; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getAutoSizedElements\", function() { return getAutoSizedElements; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setLineElementsFormat\", function() { return setLineElementsFormat; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getLineElements\", function() { return getLineElements; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getRowElements\", function() { return getRowElements; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"hasEmbedContent\", function() { return hasEmbedContent; });\n/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/renderer */ \"./node_modules/devextreme/esm/core/renderer.js\");\n/* harmony import */ var _core_utils_iterator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core/utils/iterator */ \"./node_modules/devextreme/esm/core/utils/iterator.js\");\n/* harmony import */ var _core_utils_inflector__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../core/utils/inflector */ \"./node_modules/devextreme/esm/core/utils/inflector.js\");\n/**\r\n * DevExtreme (esm/ui/html_editor/utils/table_helper.js)\r\n * Version: 21.2.7\r\n * Build date: Mon Apr 11 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\r\n\r\n\r\nvar TABLE_FORMATS = [\"table\", \"tableHeaderCell\"];\r\nvar TABLE_OPERATIONS = [\"insertTable\", \"insertHeaderRow\", \"insertRowAbove\", \"insertRowBelow\", \"insertColumnLeft\", \"insertColumnRight\", \"deleteColumn\", \"deleteRow\", \"deleteTable\", \"cellProperties\", \"tableProperties\"];\r\n\r\nfunction getTableFormats(quill) {\r\n    var tableModule = quill.getModule(\"table\");\r\n    return null !== tableModule && void 0 !== tableModule && tableModule.tableFormats ? tableModule.tableFormats() : TABLE_FORMATS\r\n}\r\n\r\nfunction hasEmbedContent(module, selection) {\r\n    return !!selection && module.quill.getText(selection).trim().length < selection.length\r\n}\r\n\r\nfunction unfixTableWidth($table, _ref) {\r\n    var {\r\n        tableBlot: tableBlot,\r\n        quill: quill\r\n    } = _ref;\r\n    var formatBlot = null !== tableBlot && void 0 !== tableBlot ? tableBlot : quill.scroll.find($table.get(0));\r\n    formatBlot.format(\"tableWidth\", \"initial\")\r\n}\r\n\r\nfunction getColumnElements($table) {\r\n    var index = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;\r\n    return $table.find(\"tr\").eq(index).find(\"th, td\")\r\n}\r\n\r\nfunction getAutoSizedElements($table) {\r\n    var direction = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : \"horizontal\";\r\n    var result = [];\r\n    var isHorizontal = \"horizontal\" === direction;\r\n    var $lineElements = isHorizontal ? getColumnElements($table) : getRowElements($table);\r\n    $lineElements.each((index, element) => {\r\n        var $element = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(element);\r\n        if (\"\" === $element.get(0).style[isHorizontal ? \"width\" : \"height\"]) {\r\n            result.push($element)\r\n        }\r\n    });\r\n    return result\r\n}\r\n\r\nfunction setLineElementsFormat(module, _ref2) {\r\n    var {\r\n        elements: elements,\r\n        property: property,\r\n        value: value\r\n    } = _ref2;\r\n    var tableBlotNames = module.quill.getModule(\"table\").tableBlots;\r\n    var fullPropertyName = \"cell\".concat(Object(_core_utils_inflector__WEBPACK_IMPORTED_MODULE_2__[\"camelize\"])(property, true));\r\n    Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_1__[\"each\"])(elements, (i, element) => {\r\n        var _formatBlot;\r\n        var formatBlot = module.quill.scroll.find(element);\r\n        if (!tableBlotNames.includes(formatBlot.statics.blotName)) {\r\n            var descendBlot = formatBlot.descendant(blot => tableBlotNames.includes(blot.statics.blotName));\r\n            formatBlot = descendBlot ? descendBlot[0] : null\r\n        }\r\n        null === (_formatBlot = formatBlot) || void 0 === _formatBlot ? void 0 : _formatBlot.format(fullPropertyName, value + \"px\")\r\n    })\r\n}\r\n\r\nfunction getLineElements($table, index) {\r\n    var direction = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : \"horizontal\";\r\n    return \"horizontal\" === direction ? getRowElements($table, index) : getColumnElements($table, index)\r\n}\r\n\r\nfunction getRowElements($table) {\r\n    var index = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;\r\n    return $table.find(\"th:nth-child(\".concat(1 + index, \"), td:nth-child(\").concat(1 + index, \")\"))\r\n}\r\n\r\nfunction getTableOperationHandler(quill, operationName) {\r\n    for (var _len = arguments.length, rest = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\r\n        rest[_key - 2] = arguments[_key]\r\n    }\r\n    return () => {\r\n        var table = quill.getModule(\"table\");\r\n        if (!table) {\r\n            return\r\n        }\r\n        quill.focus();\r\n        return table[operationName](...rest)\r\n    }\r\n}\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGV2ZXh0cmVtZS9lc20vdWkvaHRtbF9lZGl0b3IvdXRpbHMvdGFibGVfaGVscGVyLmpzP2FhZjIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDdUM7QUFHRDtBQUdDO0FBQ3ZDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsOERBQUM7QUFDeEI7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLHlDQUF5QyxzRUFBUTtBQUNqRCxJQUFJLGlFQUFJO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwwRkFBMEYsYUFBYTtBQUN2RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBWUUiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZGV2ZXh0cmVtZS9lc20vdWkvaHRtbF9lZGl0b3IvdXRpbHMvdGFibGVfaGVscGVyLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIERldkV4dHJlbWUgKGVzbS91aS9odG1sX2VkaXRvci91dGlscy90YWJsZV9oZWxwZXIuanMpXHJcbiAqIFZlcnNpb246IDIxLjIuN1xyXG4gKiBCdWlsZCBkYXRlOiBNb24gQXByIDExIDIwMjJcclxuICpcclxuICogQ29weXJpZ2h0IChjKSAyMDEyIC0gMjAyMiBEZXZlbG9wZXIgRXhwcmVzcyBJbmMuIEFMTCBSSUdIVFMgUkVTRVJWRURcclxuICogUmVhZCBhYm91dCBEZXZFeHRyZW1lIGxpY2Vuc2luZyBoZXJlOiBodHRwczovL2pzLmRldmV4cHJlc3MuY29tL0xpY2Vuc2luZy9cclxuICovXHJcbmltcG9ydCAkIGZyb20gXCIuLi8uLi8uLi9jb3JlL3JlbmRlcmVyXCI7XHJcbmltcG9ydCB7XHJcbiAgICBlYWNoXHJcbn0gZnJvbSBcIi4uLy4uLy4uL2NvcmUvdXRpbHMvaXRlcmF0b3JcIjtcclxuaW1wb3J0IHtcclxuICAgIGNhbWVsaXplXHJcbn0gZnJvbSBcIi4uLy4uLy4uL2NvcmUvdXRpbHMvaW5mbGVjdG9yXCI7XHJcbnZhciBUQUJMRV9GT1JNQVRTID0gW1widGFibGVcIiwgXCJ0YWJsZUhlYWRlckNlbGxcIl07XHJcbnZhciBUQUJMRV9PUEVSQVRJT05TID0gW1wiaW5zZXJ0VGFibGVcIiwgXCJpbnNlcnRIZWFkZXJSb3dcIiwgXCJpbnNlcnRSb3dBYm92ZVwiLCBcImluc2VydFJvd0JlbG93XCIsIFwiaW5zZXJ0Q29sdW1uTGVmdFwiLCBcImluc2VydENvbHVtblJpZ2h0XCIsIFwiZGVsZXRlQ29sdW1uXCIsIFwiZGVsZXRlUm93XCIsIFwiZGVsZXRlVGFibGVcIiwgXCJjZWxsUHJvcGVydGllc1wiLCBcInRhYmxlUHJvcGVydGllc1wiXTtcclxuXHJcbmZ1bmN0aW9uIGdldFRhYmxlRm9ybWF0cyhxdWlsbCkge1xyXG4gICAgdmFyIHRhYmxlTW9kdWxlID0gcXVpbGwuZ2V0TW9kdWxlKFwidGFibGVcIik7XHJcbiAgICByZXR1cm4gbnVsbCAhPT0gdGFibGVNb2R1bGUgJiYgdm9pZCAwICE9PSB0YWJsZU1vZHVsZSAmJiB0YWJsZU1vZHVsZS50YWJsZUZvcm1hdHMgPyB0YWJsZU1vZHVsZS50YWJsZUZvcm1hdHMoKSA6IFRBQkxFX0ZPUk1BVFNcclxufVxyXG5cclxuZnVuY3Rpb24gaGFzRW1iZWRDb250ZW50KG1vZHVsZSwgc2VsZWN0aW9uKSB7XHJcbiAgICByZXR1cm4gISFzZWxlY3Rpb24gJiYgbW9kdWxlLnF1aWxsLmdldFRleHQoc2VsZWN0aW9uKS50cmltKCkubGVuZ3RoIDwgc2VsZWN0aW9uLmxlbmd0aFxyXG59XHJcblxyXG5mdW5jdGlvbiB1bmZpeFRhYmxlV2lkdGgoJHRhYmxlLCBfcmVmKSB7XHJcbiAgICB2YXIge1xyXG4gICAgICAgIHRhYmxlQmxvdDogdGFibGVCbG90LFxyXG4gICAgICAgIHF1aWxsOiBxdWlsbFxyXG4gICAgfSA9IF9yZWY7XHJcbiAgICB2YXIgZm9ybWF0QmxvdCA9IG51bGwgIT09IHRhYmxlQmxvdCAmJiB2b2lkIDAgIT09IHRhYmxlQmxvdCA/IHRhYmxlQmxvdCA6IHF1aWxsLnNjcm9sbC5maW5kKCR0YWJsZS5nZXQoMCkpO1xyXG4gICAgZm9ybWF0QmxvdC5mb3JtYXQoXCJ0YWJsZVdpZHRoXCIsIFwiaW5pdGlhbFwiKVxyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRDb2x1bW5FbGVtZW50cygkdGFibGUpIHtcclxuICAgIHZhciBpbmRleCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIHZvaWQgMCAhPT0gYXJndW1lbnRzWzFdID8gYXJndW1lbnRzWzFdIDogMDtcclxuICAgIHJldHVybiAkdGFibGUuZmluZChcInRyXCIpLmVxKGluZGV4KS5maW5kKFwidGgsIHRkXCIpXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldEF1dG9TaXplZEVsZW1lbnRzKCR0YWJsZSkge1xyXG4gICAgdmFyIGRpcmVjdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIHZvaWQgMCAhPT0gYXJndW1lbnRzWzFdID8gYXJndW1lbnRzWzFdIDogXCJob3Jpem9udGFsXCI7XHJcbiAgICB2YXIgcmVzdWx0ID0gW107XHJcbiAgICB2YXIgaXNIb3Jpem9udGFsID0gXCJob3Jpem9udGFsXCIgPT09IGRpcmVjdGlvbjtcclxuICAgIHZhciAkbGluZUVsZW1lbnRzID0gaXNIb3Jpem9udGFsID8gZ2V0Q29sdW1uRWxlbWVudHMoJHRhYmxlKSA6IGdldFJvd0VsZW1lbnRzKCR0YWJsZSk7XHJcbiAgICAkbGluZUVsZW1lbnRzLmVhY2goKGluZGV4LCBlbGVtZW50KSA9PiB7XHJcbiAgICAgICAgdmFyICRlbGVtZW50ID0gJChlbGVtZW50KTtcclxuICAgICAgICBpZiAoXCJcIiA9PT0gJGVsZW1lbnQuZ2V0KDApLnN0eWxlW2lzSG9yaXpvbnRhbCA/IFwid2lkdGhcIiA6IFwiaGVpZ2h0XCJdKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKCRlbGVtZW50KVxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHJlc3VsdFxyXG59XHJcblxyXG5mdW5jdGlvbiBzZXRMaW5lRWxlbWVudHNGb3JtYXQobW9kdWxlLCBfcmVmMikge1xyXG4gICAgdmFyIHtcclxuICAgICAgICBlbGVtZW50czogZWxlbWVudHMsXHJcbiAgICAgICAgcHJvcGVydHk6IHByb3BlcnR5LFxyXG4gICAgICAgIHZhbHVlOiB2YWx1ZVxyXG4gICAgfSA9IF9yZWYyO1xyXG4gICAgdmFyIHRhYmxlQmxvdE5hbWVzID0gbW9kdWxlLnF1aWxsLmdldE1vZHVsZShcInRhYmxlXCIpLnRhYmxlQmxvdHM7XHJcbiAgICB2YXIgZnVsbFByb3BlcnR5TmFtZSA9IFwiY2VsbFwiLmNvbmNhdChjYW1lbGl6ZShwcm9wZXJ0eSwgdHJ1ZSkpO1xyXG4gICAgZWFjaChlbGVtZW50cywgKGksIGVsZW1lbnQpID0+IHtcclxuICAgICAgICB2YXIgX2Zvcm1hdEJsb3Q7XHJcbiAgICAgICAgdmFyIGZvcm1hdEJsb3QgPSBtb2R1bGUucXVpbGwuc2Nyb2xsLmZpbmQoZWxlbWVudCk7XHJcbiAgICAgICAgaWYgKCF0YWJsZUJsb3ROYW1lcy5pbmNsdWRlcyhmb3JtYXRCbG90LnN0YXRpY3MuYmxvdE5hbWUpKSB7XHJcbiAgICAgICAgICAgIHZhciBkZXNjZW5kQmxvdCA9IGZvcm1hdEJsb3QuZGVzY2VuZGFudChibG90ID0+IHRhYmxlQmxvdE5hbWVzLmluY2x1ZGVzKGJsb3Quc3RhdGljcy5ibG90TmFtZSkpO1xyXG4gICAgICAgICAgICBmb3JtYXRCbG90ID0gZGVzY2VuZEJsb3QgPyBkZXNjZW5kQmxvdFswXSA6IG51bGxcclxuICAgICAgICB9XHJcbiAgICAgICAgbnVsbCA9PT0gKF9mb3JtYXRCbG90ID0gZm9ybWF0QmxvdCkgfHwgdm9pZCAwID09PSBfZm9ybWF0QmxvdCA/IHZvaWQgMCA6IF9mb3JtYXRCbG90LmZvcm1hdChmdWxsUHJvcGVydHlOYW1lLCB2YWx1ZSArIFwicHhcIilcclxuICAgIH0pXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldExpbmVFbGVtZW50cygkdGFibGUsIGluZGV4KSB7XHJcbiAgICB2YXIgZGlyZWN0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgdm9pZCAwICE9PSBhcmd1bWVudHNbMl0gPyBhcmd1bWVudHNbMl0gOiBcImhvcml6b250YWxcIjtcclxuICAgIHJldHVybiBcImhvcml6b250YWxcIiA9PT0gZGlyZWN0aW9uID8gZ2V0Um93RWxlbWVudHMoJHRhYmxlLCBpbmRleCkgOiBnZXRDb2x1bW5FbGVtZW50cygkdGFibGUsIGluZGV4KVxyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRSb3dFbGVtZW50cygkdGFibGUpIHtcclxuICAgIHZhciBpbmRleCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIHZvaWQgMCAhPT0gYXJndW1lbnRzWzFdID8gYXJndW1lbnRzWzFdIDogMDtcclxuICAgIHJldHVybiAkdGFibGUuZmluZChcInRoOm50aC1jaGlsZChcIi5jb25jYXQoMSArIGluZGV4LCBcIiksIHRkOm50aC1jaGlsZChcIikuY29uY2F0KDEgKyBpbmRleCwgXCIpXCIpKVxyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRUYWJsZU9wZXJhdGlvbkhhbmRsZXIocXVpbGwsIG9wZXJhdGlvbk5hbWUpIHtcclxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCByZXN0ID0gbmV3IEFycmF5KF9sZW4gPiAyID8gX2xlbiAtIDIgOiAwKSwgX2tleSA9IDI7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcclxuICAgICAgICByZXN0W19rZXkgLSAyXSA9IGFyZ3VtZW50c1tfa2V5XVxyXG4gICAgfVxyXG4gICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgICB2YXIgdGFibGUgPSBxdWlsbC5nZXRNb2R1bGUoXCJ0YWJsZVwiKTtcclxuICAgICAgICBpZiAoIXRhYmxlKSB7XHJcbiAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgIH1cclxuICAgICAgICBxdWlsbC5mb2N1cygpO1xyXG4gICAgICAgIHJldHVybiB0YWJsZVtvcGVyYXRpb25OYW1lXSguLi5yZXN0KVxyXG4gICAgfVxyXG59XHJcbmV4cG9ydCB7XHJcbiAgICBUQUJMRV9PUEVSQVRJT05TLFxyXG4gICAgZ2V0VGFibGVGb3JtYXRzLFxyXG4gICAgZ2V0VGFibGVPcGVyYXRpb25IYW5kbGVyLFxyXG4gICAgdW5maXhUYWJsZVdpZHRoLFxyXG4gICAgZ2V0Q29sdW1uRWxlbWVudHMsXHJcbiAgICBnZXRBdXRvU2l6ZWRFbGVtZW50cyxcclxuICAgIHNldExpbmVFbGVtZW50c0Zvcm1hdCxcclxuICAgIGdldExpbmVFbGVtZW50cyxcclxuICAgIGdldFJvd0VsZW1lbnRzLFxyXG4gICAgaGFzRW1iZWRDb250ZW50XHJcbn07XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/devextreme/esm/ui/html_editor/utils/table_helper.js\n");

/***/ }),

/***/ "./node_modules/devextreme/esm/ui/html_editor/utils/toolbar_helper.js":
/*!****************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/html_editor/utils/toolbar_helper.js ***!
  \****************************************************************************/
/*! exports provided: getFormatHandlers, getDefaultClickHandler, ICON_MAP, applyFormat */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getFormatHandlers\", function() { return getFormatHandlers; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getDefaultClickHandler\", function() { return getDefaultClickHandler; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ICON_MAP\", function() { return ICON_MAP; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"applyFormat\", function() { return applyFormat; });\n/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/renderer */ \"./node_modules/devextreme/esm/core/renderer.js\");\n/* harmony import */ var _localization_message__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../localization/message */ \"./node_modules/devextreme/esm/localization/message.js\");\n/* harmony import */ var _table_helper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./table_helper */ \"./node_modules/devextreme/esm/ui/html_editor/utils/table_helper.js\");\n/* harmony import */ var _core_utils_type__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../core/utils/type */ \"./node_modules/devextreme/esm/core/utils/type.js\");\n/* harmony import */ var _core_utils_iterator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../core/utils/iterator */ \"./node_modules/devextreme/esm/core/utils/iterator.js\");\n/* harmony import */ var _form__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../form */ \"./node_modules/devextreme/esm/ui/form.js\");\n/* harmony import */ var _button_group__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../button_group */ \"./node_modules/devextreme/esm/ui/button_group.js\");\n/* harmony import */ var _color_box__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../color_box */ \"./node_modules/devextreme/esm/ui/color_box.js\");\n/* harmony import */ var _scroll_view__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../scroll_view */ \"./node_modules/devextreme/esm/ui/scroll_view.js\");\n/* harmony import */ var _core_utils_size__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../core/utils/size */ \"./node_modules/devextreme/esm/core/utils/size.js\");\n/* harmony import */ var _core_utils_window__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../core/utils/window */ \"./node_modules/devextreme/esm/core/utils/window.js\");\n/**\r\n * DevExtreme (esm/ui/html_editor/utils/toolbar_helper.js)\r\n * Version: 21.2.7\r\n * Build date: Mon Apr 11 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nvar MIN_HEIGHT = 400;\r\nvar BORDER_STYLES = [\"none\", \"hidden\", \"dotted\", \"dashed\", \"solid\", \"double\", \"groove\", \"ridge\", \"inset\", \"outset\"];\r\nvar USER_ACTION = \"user\";\r\nvar SILENT_ACTION = \"silent\";\r\nvar DIALOG_COLOR_CAPTION = \"dxHtmlEditor-dialogColorCaption\";\r\nvar DIALOG_BACKGROUND_CAPTION = \"dxHtmlEditor-dialogBackgroundCaption\";\r\nvar DIALOG_LINK_CAPTION = \"dxHtmlEditor-dialogLinkCaption\";\r\nvar DIALOG_IMAGE_CAPTION = \"dxHtmlEditor-dialogImageCaption\";\r\nvar DIALOG_TABLE_CAPTION = \"dxHtmlEditor-dialogInsertTableCaption\";\r\nvar DIALOG_LINK_FIELD_URL = \"dxHtmlEditor-dialogLinkUrlField\";\r\nvar DIALOG_LINK_FIELD_TEXT = \"dxHtmlEditor-dialogLinkTextField\";\r\nvar DIALOG_LINK_FIELD_TARGET = \"dxHtmlEditor-dialogLinkTargetField\";\r\nvar DIALOG_LINK_FIELD_TARGET_CLASS = \"dx-formdialog-field-target\";\r\nvar DIALOG_IMAGE_FIELD_URL = \"dxHtmlEditor-dialogImageUrlField\";\r\nvar DIALOG_IMAGE_FIELD_ALT = \"dxHtmlEditor-dialogImageAltField\";\r\nvar DIALOG_IMAGE_FIELD_WIDTH = \"dxHtmlEditor-dialogImageWidthField\";\r\nvar DIALOG_IMAGE_FIELD_HEIGHT = \"dxHtmlEditor-dialogImageHeightField\";\r\nvar DIALOG_TABLE_FIELD_COLUMNS = \"dxHtmlEditor-dialogInsertTableRowsField\";\r\nvar DIALOG_TABLE_FIELD_ROWS = \"dxHtmlEditor-dialogInsertTableColumnsField\";\r\nvar ICON_MAP = {\r\n    insertHeaderRow: \"header\",\r\n    clear: \"clearformat\"\r\n};\r\n\r\nfunction getFormatHandlers(module) {\r\n    return {\r\n        clear: _ref => {\r\n            var {\r\n                event: event\r\n            } = _ref;\r\n            var range = module.quill.getSelection();\r\n            if (range) {\r\n                var _getToolbarModule;\r\n                module.saveValueChangeEvent(event);\r\n                module.quill.removeFormat(range);\r\n                null === (_getToolbarModule = getToolbarModule(module)) || void 0 === _getToolbarModule ? void 0 : _getToolbarModule.updateFormatWidgets()\r\n            }\r\n        },\r\n        link: prepareLinkHandler(module),\r\n        image: prepareImageHandler(module),\r\n        color: prepareColorClickHandler(module, \"color\"),\r\n        background: prepareColorClickHandler(module, \"background\"),\r\n        orderedList: prepareShortcutHandler(module, \"list\", \"ordered\"),\r\n        bulletList: prepareShortcutHandler(module, \"list\", \"bullet\"),\r\n        alignLeft: prepareShortcutHandler(module, \"align\", \"left\"),\r\n        alignCenter: prepareShortcutHandler(module, \"align\", \"center\"),\r\n        alignRight: prepareShortcutHandler(module, \"align\", \"right\"),\r\n        alignJustify: prepareShortcutHandler(module, \"align\", \"justify\"),\r\n        codeBlock: getDefaultClickHandler(module, \"code-block\"),\r\n        undo: _ref2 => {\r\n            var {\r\n                event: event\r\n            } = _ref2;\r\n            module.saveValueChangeEvent(event);\r\n            module.quill.history.undo()\r\n        },\r\n        redo: _ref3 => {\r\n            var {\r\n                event: event\r\n            } = _ref3;\r\n            module.saveValueChangeEvent(event);\r\n            module.quill.history.redo()\r\n        },\r\n        increaseIndent: _ref4 => {\r\n            var {\r\n                event: event\r\n            } = _ref4;\r\n            applyFormat(module, [\"indent\", \"+1\", USER_ACTION], event)\r\n        },\r\n        decreaseIndent: _ref5 => {\r\n            var {\r\n                event: event\r\n            } = _ref5;\r\n            applyFormat(module, [\"indent\", \"-1\", USER_ACTION], event)\r\n        },\r\n        superscript: prepareShortcutHandler(module, \"script\", \"super\"),\r\n        subscript: prepareShortcutHandler(module, \"script\", \"sub\"),\r\n        insertTable: prepareInsertTableHandler(module),\r\n        insertHeaderRow: Object(_table_helper__WEBPACK_IMPORTED_MODULE_2__[\"getTableOperationHandler\"])(module.quill, \"insertHeaderRow\"),\r\n        insertRowAbove: Object(_table_helper__WEBPACK_IMPORTED_MODULE_2__[\"getTableOperationHandler\"])(module.quill, \"insertRowAbove\"),\r\n        insertRowBelow: Object(_table_helper__WEBPACK_IMPORTED_MODULE_2__[\"getTableOperationHandler\"])(module.quill, \"insertRowBelow\"),\r\n        insertColumnLeft: Object(_table_helper__WEBPACK_IMPORTED_MODULE_2__[\"getTableOperationHandler\"])(module.quill, \"insertColumnLeft\"),\r\n        insertColumnRight: Object(_table_helper__WEBPACK_IMPORTED_MODULE_2__[\"getTableOperationHandler\"])(module.quill, \"insertColumnRight\"),\r\n        deleteColumn: Object(_table_helper__WEBPACK_IMPORTED_MODULE_2__[\"getTableOperationHandler\"])(module.quill, \"deleteColumn\"),\r\n        deleteRow: Object(_table_helper__WEBPACK_IMPORTED_MODULE_2__[\"getTableOperationHandler\"])(module.quill, \"deleteRow\"),\r\n        deleteTable: Object(_table_helper__WEBPACK_IMPORTED_MODULE_2__[\"getTableOperationHandler\"])(module.quill, \"deleteTable\"),\r\n        cellProperties: prepareShowFormProperties(module, \"cell\"),\r\n        tableProperties: prepareShowFormProperties(module, \"table\")\r\n    }\r\n}\r\n\r\nfunction resetFormDialogOptions(editorInstance, _ref6) {\r\n    var {\r\n        contentTemplate: contentTemplate,\r\n        title: title,\r\n        minHeight: minHeight,\r\n        minWidth: minWidth,\r\n        maxWidth: maxWidth\r\n    } = _ref6;\r\n    editorInstance.formDialogOption({\r\n        contentTemplate: contentTemplate,\r\n        title: title,\r\n        minHeight: null !== minHeight && void 0 !== minHeight ? minHeight : 0,\r\n        minWidth: null !== minWidth && void 0 !== minWidth ? minWidth : 0,\r\n        maxWidth: null !== maxWidth && void 0 !== maxWidth ? maxWidth : \"none\"\r\n    })\r\n}\r\n\r\nfunction prepareShowFormProperties(module, type) {\r\n    return $element => {\r\n        var _$element, _module$quill$getModu;\r\n        if (!(null !== (_$element = $element) && void 0 !== _$element && _$element.length)) {\r\n            $element = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(getTargetTableNode(module, type))\r\n        }\r\n        var [tableBlot, rowBlot] = null !== (_module$quill$getModu = module.quill.getModule(\"table\").getTable()) && void 0 !== _module$quill$getModu ? _module$quill$getModu : [];\r\n        var formats = module.quill.getFormat(module.editorInstance.getSelection(true));\r\n        var tablePropertiesFormConfig = getFormConfigConstructor(type)(module, {\r\n            $element: $element,\r\n            formats: formats,\r\n            tableBlot: tableBlot,\r\n            rowBlot: rowBlot\r\n        });\r\n        var {\r\n            contentTemplate: contentTemplate,\r\n            title: title,\r\n            minHeight: minHeight,\r\n            minWidth: minWidth,\r\n            maxWidth: maxWidth\r\n        } = module.editorInstance._formDialog._popup.option();\r\n        var savedOptions = {\r\n            contentTemplate: contentTemplate,\r\n            title: title,\r\n            minHeight: minHeight,\r\n            minWidth: minWidth,\r\n            maxWidth: maxWidth\r\n        };\r\n        var formInstance;\r\n        module.editorInstance.formDialogOption({\r\n            contentTemplate: container => {\r\n                var $content = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"<div>\").appendTo(container);\r\n                var $form = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"<div>\").appendTo($content);\r\n                module.editorInstance._createComponent($form, _form__WEBPACK_IMPORTED_MODULE_5__[\"default\"], tablePropertiesFormConfig.formOptions);\r\n                module.editorInstance._createComponent($content, _scroll_view__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {});\r\n                formInstance = $form.dxForm(\"instance\");\r\n                return $content\r\n            },\r\n            title: _localization_message__WEBPACK_IMPORTED_MODULE_1__[\"default\"].format(\"dxHtmlEditor-\".concat(type, \"Properties\")),\r\n            minHeight: MIN_HEIGHT,\r\n            minWidth: Math.min(800, .9 * Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_9__[\"getWidth\"])(Object(_core_utils_window__WEBPACK_IMPORTED_MODULE_10__[\"getWindow\"])()) - 1),\r\n            maxWidth: .9 * Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_9__[\"getWidth\"])(Object(_core_utils_window__WEBPACK_IMPORTED_MODULE_10__[\"getWindow\"])())\r\n        });\r\n        var promise = module.editorInstance.showFormDialog();\r\n        promise.done((formData, event) => {\r\n            module.saveValueChangeEvent(event);\r\n            tablePropertiesFormConfig.applyHandler(formInstance);\r\n            resetFormDialogOptions(module.editorInstance, savedOptions)\r\n        });\r\n        promise.fail(() => {\r\n            module.quill.focus();\r\n            resetFormDialogOptions(module.editorInstance, savedOptions)\r\n        })\r\n    }\r\n}\r\n\r\nfunction applyFormat(module, formatArgs, event) {\r\n    module.editorInstance._saveValueChangeEvent(event);\r\n    module.quill.format(...formatArgs)\r\n}\r\n\r\nfunction getTargetTableNode(module, partName) {\r\n    var currentSelectionParts = module.quill.getModule(\"table\").getTable();\r\n    return \"table\" === partName ? currentSelectionParts[0].domNode : currentSelectionParts[2].domNode\r\n}\r\n\r\nfunction prepareLinkHandler(module) {\r\n    return () => {\r\n        module.quill.focus();\r\n        var selection = module.quill.getSelection();\r\n        var selectionHasEmbedContent = Object(_table_helper__WEBPACK_IMPORTED_MODULE_2__[\"hasEmbedContent\"])(module, selection);\r\n        var formats = selection ? module.quill.getFormat() : {};\r\n        var formData = {\r\n            href: formats.link || \"\",\r\n            text: selection && !selectionHasEmbedContent ? module.quill.getText(selection) : \"\",\r\n            target: Object.prototype.hasOwnProperty.call(formats, \"target\") ? !!formats.target : true\r\n        };\r\n        module.editorInstance.formDialogOption(\"title\", _localization_message__WEBPACK_IMPORTED_MODULE_1__[\"default\"].format(DIALOG_LINK_CAPTION));\r\n        var promise = module.editorInstance.showFormDialog({\r\n            formData: formData,\r\n            items: getLinkFormItems(module, selection)\r\n        });\r\n        promise.done((formData, event) => {\r\n            if (selection && !selectionHasEmbedContent) {\r\n                var text = formData.text || formData.href;\r\n                var {\r\n                    index: index,\r\n                    length: length\r\n                } = selection;\r\n                formData.text = void 0;\r\n                module.saveValueChangeEvent(event);\r\n                length && module.quill.deleteText(index, length, SILENT_ACTION);\r\n                module.quill.insertText(index, text, \"link\", formData, USER_ACTION);\r\n                module.quill.setSelection(index + text.length, 0, USER_ACTION)\r\n            } else {\r\n                formData.text = !selection && !formData.text ? formData.href : formData.text;\r\n                applyFormat(module, [\"link\", formData, USER_ACTION], event)\r\n            }\r\n        });\r\n        promise.fail(() => {\r\n            module.quill.focus()\r\n        })\r\n    }\r\n}\r\n\r\nfunction prepareImageHandler(module) {\r\n    return () => {\r\n        var formData = module.quill.getFormat();\r\n        var isUpdateDialog = Object.prototype.hasOwnProperty.call(formData, \"imageSrc\");\r\n        var defaultIndex = defaultPasteIndex(module);\r\n        if (isUpdateDialog) {\r\n            var {\r\n                imageSrc: imageSrc\r\n            } = module.quill.getFormat(defaultIndex - 1, 1);\r\n            formData.src = formData.imageSrc;\r\n            delete formData.imageSrc;\r\n            if (!imageSrc || 0 === defaultIndex) {\r\n                module.quill.setSelection(defaultIndex + 1, 0, SILENT_ACTION)\r\n            }\r\n        }\r\n        var formatIndex = embedFormatIndex(module);\r\n        module.editorInstance.formDialogOption(\"title\", _localization_message__WEBPACK_IMPORTED_MODULE_1__[\"default\"].format(DIALOG_IMAGE_CAPTION));\r\n        var promise = module.editorInstance.showFormDialog({\r\n            formData: formData,\r\n            items: imageFormItems()\r\n        });\r\n        promise.done((formData, event) => {\r\n            var index = defaultIndex;\r\n            module.saveValueChangeEvent(event);\r\n            if (isUpdateDialog) {\r\n                index = formatIndex;\r\n                module.quill.deleteText(index, 1, SILENT_ACTION)\r\n            }\r\n            module.quill.insertEmbed(index, \"extendedImage\", formData, USER_ACTION);\r\n            module.quill.setSelection(index + 1, 0, USER_ACTION)\r\n        }).always(() => {\r\n            module.quill.focus()\r\n        })\r\n    }\r\n}\r\n\r\nfunction getLinkFormItems(module, selection) {\r\n    return [{\r\n        dataField: \"href\",\r\n        label: {\r\n            text: _localization_message__WEBPACK_IMPORTED_MODULE_1__[\"default\"].format(DIALOG_LINK_FIELD_URL)\r\n        }\r\n    }, {\r\n        dataField: \"text\",\r\n        label: {\r\n            text: _localization_message__WEBPACK_IMPORTED_MODULE_1__[\"default\"].format(DIALOG_LINK_FIELD_TEXT)\r\n        },\r\n        visible: !Object(_table_helper__WEBPACK_IMPORTED_MODULE_2__[\"hasEmbedContent\"])(module, selection)\r\n    }, {\r\n        dataField: \"target\",\r\n        editorType: \"dxCheckBox\",\r\n        editorOptions: {\r\n            text: _localization_message__WEBPACK_IMPORTED_MODULE_1__[\"default\"].format(DIALOG_LINK_FIELD_TARGET)\r\n        },\r\n        cssClass: DIALOG_LINK_FIELD_TARGET_CLASS,\r\n        label: {\r\n            visible: false\r\n        }\r\n    }]\r\n}\r\n\r\nfunction embedFormatIndex(module) {\r\n    var selection = module.quill.getSelection();\r\n    if (selection) {\r\n        if (selection.length) {\r\n            return selection.index\r\n        } else {\r\n            return selection.index - 1\r\n        }\r\n    } else {\r\n        return module.quill.getLength()\r\n    }\r\n}\r\n\r\nfunction defaultPasteIndex(module) {\r\n    var _selection$index;\r\n    var selection = module.quill.getSelection();\r\n    return null !== (_selection$index = null === selection || void 0 === selection ? void 0 : selection.index) && void 0 !== _selection$index ? _selection$index : module.quill.getLength()\r\n}\r\n\r\nfunction imageFormItems() {\r\n    return [{\r\n        dataField: \"src\",\r\n        label: {\r\n            text: _localization_message__WEBPACK_IMPORTED_MODULE_1__[\"default\"].format(DIALOG_IMAGE_FIELD_URL)\r\n        }\r\n    }, {\r\n        dataField: \"width\",\r\n        label: {\r\n            text: _localization_message__WEBPACK_IMPORTED_MODULE_1__[\"default\"].format(DIALOG_IMAGE_FIELD_WIDTH)\r\n        }\r\n    }, {\r\n        dataField: \"height\",\r\n        label: {\r\n            text: _localization_message__WEBPACK_IMPORTED_MODULE_1__[\"default\"].format(DIALOG_IMAGE_FIELD_HEIGHT)\r\n        }\r\n    }, {\r\n        dataField: \"alt\",\r\n        label: {\r\n            text: _localization_message__WEBPACK_IMPORTED_MODULE_1__[\"default\"].format(DIALOG_IMAGE_FIELD_ALT)\r\n        }\r\n    }]\r\n}\r\n\r\nfunction prepareColorClickHandler(module, name) {\r\n    return () => {\r\n        var formData = module.quill.getFormat();\r\n        var caption = \"color\" === name ? DIALOG_COLOR_CAPTION : DIALOG_BACKGROUND_CAPTION;\r\n        module.editorInstance.formDialogOption(\"title\", _localization_message__WEBPACK_IMPORTED_MODULE_1__[\"default\"].format(caption));\r\n        var promise = module.editorInstance.showFormDialog({\r\n            formData: formData,\r\n            items: [{\r\n                dataField: name,\r\n                editorType: \"dxColorView\",\r\n                editorOptions: {\r\n                    focusStateEnabled: false\r\n                },\r\n                label: {\r\n                    visible: false\r\n                }\r\n            }]\r\n        });\r\n        promise.done((formData, event) => {\r\n            applyFormat(module, [name, formData[name], USER_ACTION], event)\r\n        });\r\n        promise.fail(() => {\r\n            module.quill.focus()\r\n        })\r\n    }\r\n}\r\n\r\nfunction prepareShortcutHandler(module, name, shortcutValue) {\r\n    return _ref7 => {\r\n        var _getToolbarModule2;\r\n        var {\r\n            event: event\r\n        } = _ref7;\r\n        var formats = module.quill.getFormat();\r\n        var value = formats[name] === shortcutValue ? false : shortcutValue;\r\n        applyFormat(module, [name, value, USER_ACTION], event);\r\n        null === (_getToolbarModule2 = getToolbarModule(module)) || void 0 === _getToolbarModule2 ? void 0 : _getToolbarModule2.updateFormatWidgets(true)\r\n    }\r\n}\r\n\r\nfunction getToolbarModule(module) {\r\n    return module._updateFormatWidget ? module : module.quill.getModule(\"toolbar\")\r\n}\r\n\r\nfunction getDefaultClickHandler(module, name) {\r\n    return _ref8 => {\r\n        var _getToolbarModule3;\r\n        var {\r\n            event: event\r\n        } = _ref8;\r\n        var formats = module.quill.getFormat();\r\n        var value = formats[name];\r\n        var newValue = !(Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_3__[\"isBoolean\"])(value) ? value : Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_3__[\"isDefined\"])(value));\r\n        applyFormat(module, [name, newValue, USER_ACTION], event);\r\n        null === (_getToolbarModule3 = getToolbarModule(module)) || void 0 === _getToolbarModule3 ? void 0 : _getToolbarModule3._updateFormatWidget(name, newValue, formats)\r\n    }\r\n}\r\n\r\nfunction insertTableFormItems() {\r\n    return [{\r\n        dataField: \"columns\",\r\n        editorType: \"dxNumberBox\",\r\n        editorOptions: {\r\n            min: 1\r\n        },\r\n        label: {\r\n            text: _localization_message__WEBPACK_IMPORTED_MODULE_1__[\"default\"].format(DIALOG_TABLE_FIELD_COLUMNS)\r\n        }\r\n    }, {\r\n        dataField: \"rows\",\r\n        editorType: \"dxNumberBox\",\r\n        editorOptions: {\r\n            min: 1\r\n        },\r\n        label: {\r\n            text: _localization_message__WEBPACK_IMPORTED_MODULE_1__[\"default\"].format(DIALOG_TABLE_FIELD_ROWS)\r\n        }\r\n    }]\r\n}\r\n\r\nfunction prepareInsertTableHandler(module) {\r\n    return () => {\r\n        var formats = module.quill.getFormat();\r\n        var isTableFocused = module._tableFormats.some(format => Object.prototype.hasOwnProperty.call(formats, format));\r\n        if (isTableFocused) {\r\n            module.quill.focus();\r\n            return\r\n        }\r\n        module.editorInstance.formDialogOption(\"title\", _localization_message__WEBPACK_IMPORTED_MODULE_1__[\"default\"].format(DIALOG_TABLE_CAPTION));\r\n        var promise = module.editorInstance.showFormDialog({\r\n            formData: {\r\n                rows: 1,\r\n                columns: 1\r\n            },\r\n            items: insertTableFormItems()\r\n        });\r\n        promise.done((formData, event) => {\r\n            module.quill.focus();\r\n            var table = module.quill.getModule(\"table\");\r\n            if (table) {\r\n                module.saveValueChangeEvent(event);\r\n                var {\r\n                    columns: columns,\r\n                    rows: rows\r\n                } = formData;\r\n                table.insertTable(columns, rows)\r\n            }\r\n        }).always(() => {\r\n            module.quill.focus()\r\n        })\r\n    }\r\n}\r\n\r\nfunction getTablePropertiesFormConfig(module, _ref9) {\r\n    var {\r\n        $element: $element,\r\n        formats: formats,\r\n        tableBlot: tableBlot\r\n    } = _ref9;\r\n    var window = Object(_core_utils_window__WEBPACK_IMPORTED_MODULE_10__[\"getWindow\"])();\r\n    var alignmentEditorInstance;\r\n    var borderColorEditorInstance;\r\n    var backgroundColorEditorInstance;\r\n    var $table = $element;\r\n    var editorInstance = module.editorInstance;\r\n    var startTableWidth = Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_3__[\"isDefined\"])(formats.tableWidth) ? parseInt(formats.tableWidth) : Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_9__[\"getOuterWidth\"])($table);\r\n    var tableStyles = window.getComputedStyle($table.get(0));\r\n    var startTextAlign = \"start\" === tableStyles.textAlign ? \"left\" : tableStyles.textAlign;\r\n    var formOptions = {\r\n        colCount: 2,\r\n        formData: {\r\n            width: startTableWidth,\r\n            height: Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_3__[\"isDefined\"])(formats.tableHeight) ? parseInt(formats.tableHeight) : Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_9__[\"getOuterHeight\"])($table),\r\n            backgroundColor: formats.tableBackgroundColor || tableStyles.backgroundColor,\r\n            borderStyle: formats.tableBorderStyle || tableStyles.borderTopStyle,\r\n            borderColor: formats.tableBorderColor || tableStyles.borderTopColor,\r\n            borderWidth: parseInt(Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_3__[\"isDefined\"])(formats.tableBorderWidth) ? formats.tableBorderWidth : tableStyles.borderTopWidth),\r\n            alignment: formats.tableAlign || startTextAlign\r\n        },\r\n        items: [{\r\n            itemType: \"group\",\r\n            caption: _localization_message__WEBPACK_IMPORTED_MODULE_1__[\"default\"].format(\"dxHtmlEditor-border\"),\r\n            colCountByScreen: {\r\n                xs: 2\r\n            },\r\n            colCount: 2,\r\n            items: [{\r\n                dataField: \"borderStyle\",\r\n                label: {\r\n                    text: _localization_message__WEBPACK_IMPORTED_MODULE_1__[\"default\"].format(\"dxHtmlEditor-style\")\r\n                },\r\n                editorType: \"dxSelectBox\",\r\n                editorOptions: {\r\n                    items: BORDER_STYLES,\r\n                    placeholder: \"Select style\"\r\n                }\r\n            }, {\r\n                dataField: \"borderWidth\",\r\n                label: {\r\n                    text: _localization_message__WEBPACK_IMPORTED_MODULE_1__[\"default\"].format(\"dxHtmlEditor-borderWidth\")\r\n                },\r\n                editorOptions: {\r\n                    placeholder: _localization_message__WEBPACK_IMPORTED_MODULE_1__[\"default\"].format(\"dxHtmlEditor-pixels\")\r\n                }\r\n            }, {\r\n                itemType: \"simple\",\r\n                dataField: \"borderColor\",\r\n                label: {\r\n                    text: _localization_message__WEBPACK_IMPORTED_MODULE_1__[\"default\"].format(\"dxHtmlEditor-borderColor\")\r\n                },\r\n                colSpan: 2,\r\n                template: e => {\r\n                    var $content = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"<div>\");\r\n                    editorInstance._createComponent($content, _color_box__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\r\n                        editAlphaChannel: true,\r\n                        value: e.component.option(\"formData\").borderColor,\r\n                        onInitialized: e => {\r\n                            borderColorEditorInstance = e.component\r\n                        }\r\n                    });\r\n                    return $content\r\n                }\r\n            }]\r\n        }, {\r\n            itemType: \"group\",\r\n            caption: _localization_message__WEBPACK_IMPORTED_MODULE_1__[\"default\"].format(\"dxHtmlEditor-dimensions\"),\r\n            colCountByScreen: {\r\n                xs: 2\r\n            },\r\n            colCount: 2,\r\n            items: [{\r\n                dataField: \"width\",\r\n                label: {\r\n                    text: _localization_message__WEBPACK_IMPORTED_MODULE_1__[\"default\"].format(\"dxHtmlEditor-width\")\r\n                },\r\n                editorOptions: {\r\n                    min: 0,\r\n                    placeholder: _localization_message__WEBPACK_IMPORTED_MODULE_1__[\"default\"].format(\"dxHtmlEditor-pixels\")\r\n                }\r\n            }, {\r\n                dataField: \"height\",\r\n                label: {\r\n                    text: _localization_message__WEBPACK_IMPORTED_MODULE_1__[\"default\"].format(\"dxHtmlEditor-height\")\r\n                },\r\n                editorOptions: {\r\n                    min: 0,\r\n                    placeholder: _localization_message__WEBPACK_IMPORTED_MODULE_1__[\"default\"].format(\"dxHtmlEditor-pixels\")\r\n                }\r\n            }]\r\n        }, {\r\n            itemType: \"group\",\r\n            caption: _localization_message__WEBPACK_IMPORTED_MODULE_1__[\"default\"].format(\"dxHtmlEditor-tableBackground\"),\r\n            items: [{\r\n                itemType: \"simple\",\r\n                dataField: \"backgroundColor\",\r\n                label: {\r\n                    text: _localization_message__WEBPACK_IMPORTED_MODULE_1__[\"default\"].format(\"dxHtmlEditor-borderColor\")\r\n                },\r\n                template: e => {\r\n                    var $content = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"<div>\");\r\n                    editorInstance._createComponent($content, _color_box__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\r\n                        editAlphaChannel: true,\r\n                        value: e.component.option(\"formData\").backgroundColor,\r\n                        onInitialized: e => {\r\n                            backgroundColorEditorInstance = e.component\r\n                        }\r\n                    });\r\n                    return $content\r\n                }\r\n            }]\r\n        }, {\r\n            itemType: \"group\",\r\n            caption: _localization_message__WEBPACK_IMPORTED_MODULE_1__[\"default\"].format(\"dxHtmlEditor-alignment\"),\r\n            items: [{\r\n                itemType: \"simple\",\r\n                label: {\r\n                    text: _localization_message__WEBPACK_IMPORTED_MODULE_1__[\"default\"].format(\"dxHtmlEditor-horizontal\")\r\n                },\r\n                template: () => {\r\n                    var $content = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"<div>\");\r\n                    editorInstance._createComponent($content, _button_group__WEBPACK_IMPORTED_MODULE_6__[\"default\"], {\r\n                        items: [{\r\n                            value: \"left\",\r\n                            icon: \"alignleft\"\r\n                        }, {\r\n                            value: \"center\",\r\n                            icon: \"aligncenter\"\r\n                        }, {\r\n                            value: \"right\",\r\n                            icon: \"alignright\"\r\n                        }, {\r\n                            value: \"justify\",\r\n                            icon: \"alignjustify\"\r\n                        }],\r\n                        keyExpr: \"value\",\r\n                        selectedItemKeys: [startTextAlign],\r\n                        onInitialized: e => {\r\n                            alignmentEditorInstance = e.component\r\n                        }\r\n                    });\r\n                    return $content\r\n                }\r\n            }]\r\n        }],\r\n        showColonAfterLabel: true,\r\n        labelLocation: \"top\",\r\n        minColWidth: 400\r\n    };\r\n    return {\r\n        formOptions: formOptions,\r\n        applyHandler: formInstance => {\r\n            var formData = formInstance.option(\"formData\");\r\n            var newWidth = formData.width === startTableWidth ? void 0 : formData.width;\r\n            var newHeight = formData.height;\r\n            applyTableDimensionChanges(module, {\r\n                $table: $table,\r\n                newHeight: newHeight,\r\n                newWidth: newWidth,\r\n                tableBlot: tableBlot\r\n            });\r\n            module.editorInstance.format(\"tableBorderStyle\", formData.borderStyle);\r\n            module.editorInstance.format(\"tableBorderWidth\", formData.borderWidth + \"px\");\r\n            module.editorInstance.format(\"tableBorderColor\", borderColorEditorInstance.option(\"value\"));\r\n            module.editorInstance.format(\"tableBackgroundColor\", backgroundColorEditorInstance.option(\"value\"));\r\n            module.editorInstance.format(\"tableTextAlign\", alignmentEditorInstance.option(\"selectedItemKeys\")[0])\r\n        }\r\n    }\r\n}\r\n\r\nfunction getCellPropertiesFormConfig(module, _ref10) {\r\n    var {\r\n        $element: $element,\r\n        formats: formats,\r\n        tableBlot: tableBlot,\r\n        rowBlot: rowBlot\r\n    } = _ref10;\r\n    var window = Object(_core_utils_window__WEBPACK_IMPORTED_MODULE_10__[\"getWindow\"])();\r\n    var alignmentEditorInstance;\r\n    var verticalAlignmentEditorInstance;\r\n    var borderColorEditorInstance;\r\n    var backgroundColorEditorInstance;\r\n    var $cell = $element;\r\n    var startCellWidth = Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_3__[\"isDefined\"])(formats.cellWidth) ? parseInt(formats.cellWidth) : Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_9__[\"getOuterWidth\"])($cell);\r\n    var editorInstance = module.editorInstance;\r\n    var cellStyles = window.getComputedStyle($cell.get(0));\r\n    var startTextAlign = \"start\" === cellStyles.textAlign ? \"left\" : cellStyles.textAlign;\r\n    var formOptions = {\r\n        colCount: 2,\r\n        formData: {\r\n            width: startCellWidth,\r\n            height: Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_3__[\"isDefined\"])(formats.cellHeight) ? parseInt(formats.cellHeight) : Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_9__[\"getOuterHeight\"])($cell),\r\n            backgroundColor: formats.cellBackgroundColor || cellStyles.backgroundColor,\r\n            borderStyle: formats.cellBorderStyle || cellStyles.borderTopStyle,\r\n            borderColor: formats.cellBorderColor || cellStyles.borderTopColor,\r\n            borderWidth: parseInt(Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_3__[\"isDefined\"])(formats.cellBorderWidth) ? formats.cellBorderWidth : cellStyles.borderTopWidth),\r\n            alignment: formats.cellTextAlign || startTextAlign,\r\n            verticalAlignment: formats.cellVerticalAlign || cellStyles.verticalAlign,\r\n            verticalPadding: parseInt(Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_3__[\"isDefined\"])(formats.cellPaddingTop) ? formats.cellPaddingTop : cellStyles.paddingTop),\r\n            horizontalPadding: parseInt(Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_3__[\"isDefined\"])(formats.cellPaddingLeft) ? formats.cellPaddingLeft : cellStyles.paddingLeft)\r\n        },\r\n        items: [{\r\n            itemType: \"group\",\r\n            caption: _localization_message__WEBPACK_IMPORTED_MODULE_1__[\"default\"].format(\"dxHtmlEditor-border\"),\r\n            colCountByScreen: {\r\n                xs: 2\r\n            },\r\n            colCount: 2,\r\n            items: [{\r\n                dataField: \"borderStyle\",\r\n                label: {\r\n                    text: _localization_message__WEBPACK_IMPORTED_MODULE_1__[\"default\"].format(\"dxHtmlEditor-style\")\r\n                },\r\n                editorType: \"dxSelectBox\",\r\n                editorOptions: {\r\n                    items: BORDER_STYLES\r\n                }\r\n            }, {\r\n                dataField: \"borderWidth\",\r\n                label: {\r\n                    text: _localization_message__WEBPACK_IMPORTED_MODULE_1__[\"default\"].format(\"dxHtmlEditor-borderWidth\")\r\n                },\r\n                editorOptions: {\r\n                    placeholder: _localization_message__WEBPACK_IMPORTED_MODULE_1__[\"default\"].format(\"dxHtmlEditor-pixels\")\r\n                }\r\n            }, {\r\n                itemType: \"simple\",\r\n                dataField: \"borderColor\",\r\n                colSpan: 2,\r\n                label: {\r\n                    text: _localization_message__WEBPACK_IMPORTED_MODULE_1__[\"default\"].format(\"dxHtmlEditor-borderColor\")\r\n                },\r\n                template: e => {\r\n                    var $content = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"<div>\");\r\n                    editorInstance._createComponent($content, _color_box__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\r\n                        editAlphaChannel: true,\r\n                        value: e.component.option(\"formData\").borderColor,\r\n                        onInitialized: e => {\r\n                            borderColorEditorInstance = e.component\r\n                        }\r\n                    });\r\n                    return $content\r\n                }\r\n            }]\r\n        }, {\r\n            itemType: \"group\",\r\n            caption: _localization_message__WEBPACK_IMPORTED_MODULE_1__[\"default\"].format(\"dxHtmlEditor-dimensions\"),\r\n            colCount: 2,\r\n            colCountByScreen: {\r\n                xs: 2\r\n            },\r\n            items: [{\r\n                dataField: \"width\",\r\n                label: {\r\n                    text: _localization_message__WEBPACK_IMPORTED_MODULE_1__[\"default\"].format(\"dxHtmlEditor-width\")\r\n                },\r\n                editorOptions: {\r\n                    min: 0,\r\n                    placeholder: _localization_message__WEBPACK_IMPORTED_MODULE_1__[\"default\"].format(\"dxHtmlEditor-pixels\")\r\n                }\r\n            }, {\r\n                dataField: \"height\",\r\n                label: {\r\n                    text: _localization_message__WEBPACK_IMPORTED_MODULE_1__[\"default\"].format(\"dxHtmlEditor-height\")\r\n                },\r\n                editorOptions: {\r\n                    min: 0,\r\n                    placeholder: _localization_message__WEBPACK_IMPORTED_MODULE_1__[\"default\"].format(\"dxHtmlEditor-pixels\")\r\n                }\r\n            }, {\r\n                dataField: \"verticalPadding\",\r\n                label: {\r\n                    text: _localization_message__WEBPACK_IMPORTED_MODULE_1__[\"default\"].format(\"dxHtmlEditor-paddingVertical\")\r\n                },\r\n                editorOptions: {\r\n                    placeholder: _localization_message__WEBPACK_IMPORTED_MODULE_1__[\"default\"].format(\"dxHtmlEditor-pixels\")\r\n                }\r\n            }, {\r\n                label: {\r\n                    text: _localization_message__WEBPACK_IMPORTED_MODULE_1__[\"default\"].format(\"dxHtmlEditor-paddingHorizontal\")\r\n                },\r\n                dataField: \"horizontalPadding\",\r\n                editorOptions: {\r\n                    placeholder: _localization_message__WEBPACK_IMPORTED_MODULE_1__[\"default\"].format(\"dxHtmlEditor-pixels\")\r\n                }\r\n            }]\r\n        }, {\r\n            itemType: \"group\",\r\n            caption: _localization_message__WEBPACK_IMPORTED_MODULE_1__[\"default\"].format(\"dxHtmlEditor-tableBackground\"),\r\n            items: [{\r\n                itemType: \"simple\",\r\n                dataField: \"backgroundColor\",\r\n                label: {\r\n                    text: _localization_message__WEBPACK_IMPORTED_MODULE_1__[\"default\"].format(\"dxHtmlEditor-borderColor\")\r\n                },\r\n                template: e => {\r\n                    var $content = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"<div>\");\r\n                    editorInstance._createComponent($content, _color_box__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\r\n                        editAlphaChannel: true,\r\n                        value: e.component.option(\"formData\").backgroundColor,\r\n                        onInitialized: e => {\r\n                            backgroundColorEditorInstance = e.component\r\n                        }\r\n                    });\r\n                    return $content\r\n                }\r\n            }]\r\n        }, {\r\n            itemType: \"group\",\r\n            caption: _localization_message__WEBPACK_IMPORTED_MODULE_1__[\"default\"].format(\"dxHtmlEditor-alignment\"),\r\n            colCount: 2,\r\n            items: [{\r\n                itemType: \"simple\",\r\n                label: {\r\n                    text: _localization_message__WEBPACK_IMPORTED_MODULE_1__[\"default\"].format(\"dxHtmlEditor-horizontal\")\r\n                },\r\n                template: () => {\r\n                    var $content = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"<div>\");\r\n                    editorInstance._createComponent($content, _button_group__WEBPACK_IMPORTED_MODULE_6__[\"default\"], {\r\n                        items: [{\r\n                            value: \"left\",\r\n                            icon: \"alignleft\"\r\n                        }, {\r\n                            value: \"center\",\r\n                            icon: \"aligncenter\"\r\n                        }, {\r\n                            value: \"right\",\r\n                            icon: \"alignright\"\r\n                        }, {\r\n                            value: \"justify\",\r\n                            icon: \"alignjustify\"\r\n                        }],\r\n                        keyExpr: \"value\",\r\n                        selectedItemKeys: [startTextAlign],\r\n                        onInitialized: e => {\r\n                            alignmentEditorInstance = e.component\r\n                        }\r\n                    });\r\n                    return $content\r\n                }\r\n            }, {\r\n                itemType: \"simple\",\r\n                label: {\r\n                    text: _localization_message__WEBPACK_IMPORTED_MODULE_1__[\"default\"].format(\"dxHtmlEditor-vertical\")\r\n                },\r\n                template: () => {\r\n                    var $content = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"<div>\");\r\n                    editorInstance._createComponent($content, _button_group__WEBPACK_IMPORTED_MODULE_6__[\"default\"], {\r\n                        items: [{\r\n                            value: \"top\",\r\n                            icon: \"verticalaligntop\"\r\n                        }, {\r\n                            value: \"middle\",\r\n                            icon: \"verticalaligncenter\"\r\n                        }, {\r\n                            value: \"bottom\",\r\n                            icon: \"verticalalignbottom\"\r\n                        }],\r\n                        keyExpr: \"value\",\r\n                        selectedItemKeys: [cellStyles.verticalAlign],\r\n                        onInitialized: e => {\r\n                            verticalAlignmentEditorInstance = e.component\r\n                        }\r\n                    });\r\n                    return $content\r\n                }\r\n            }]\r\n        }],\r\n        showColonAfterLabel: true,\r\n        labelLocation: \"top\",\r\n        minColWidth: 400\r\n    };\r\n    return {\r\n        formOptions: formOptions,\r\n        applyHandler: formInstance => {\r\n            var formData = formInstance.option(\"formData\");\r\n            var newWidth = formData.width === parseInt(startCellWidth) ? void 0 : formData.width;\r\n            var newHeight = formData.height;\r\n            applyCellDimensionChanges(module, {\r\n                $cell: $cell,\r\n                newHeight: newHeight,\r\n                newWidth: newWidth,\r\n                tableBlot: tableBlot,\r\n                rowBlot: rowBlot\r\n            });\r\n            module.editorInstance.format(\"cellBorderWidth\", formData.borderWidth + \"px\");\r\n            module.editorInstance.format(\"cellBorderColor\", borderColorEditorInstance.option(\"value\"));\r\n            module.editorInstance.format(\"cellBorderStyle\", formData.borderStyle);\r\n            module.editorInstance.format(\"cellBackgroundColor\", backgroundColorEditorInstance.option(\"value\"));\r\n            module.editorInstance.format(\"cellTextAlign\", alignmentEditorInstance.option(\"selectedItemKeys\")[0]);\r\n            module.editorInstance.format(\"cellVerticalAlign\", verticalAlignmentEditorInstance.option(\"selectedItemKeys\")[0]);\r\n            module.editorInstance.format(\"cellPaddingLeft\", formData.horizontalPadding + \"px\");\r\n            module.editorInstance.format(\"cellPaddingRight\", formData.horizontalPadding + \"px\");\r\n            module.editorInstance.format(\"cellPaddingTop\", formData.verticalPadding + \"px\");\r\n            module.editorInstance.format(\"cellPaddingBottom\", formData.verticalPadding + \"px\")\r\n        }\r\n    }\r\n}\r\n\r\nfunction getFormConfigConstructor(type) {\r\n    return \"cell\" === type ? getCellPropertiesFormConfig : getTablePropertiesFormConfig\r\n}\r\n\r\nfunction applyTableDimensionChanges(module, _ref11) {\r\n    var {\r\n        $table: $table,\r\n        newHeight: newHeight,\r\n        newWidth: newWidth,\r\n        tableBlot: tableBlot\r\n    } = _ref11;\r\n    if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_3__[\"isDefined\"])(newWidth)) {\r\n        var autoWidthColumns = Object(_table_helper__WEBPACK_IMPORTED_MODULE_2__[\"getAutoSizedElements\"])($table);\r\n        if (autoWidthColumns.length > 0) {\r\n            module.editorInstance.format(\"tableWidth\", newWidth + \"px\")\r\n        } else {\r\n            var $columns = Object(_table_helper__WEBPACK_IMPORTED_MODULE_2__[\"getColumnElements\"])($table);\r\n            var oldTableWidth = Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_9__[\"getOuterWidth\"])($table);\r\n            Object(_table_helper__WEBPACK_IMPORTED_MODULE_2__[\"unfixTableWidth\"])($table, {\r\n                tableBlot: tableBlot\r\n            });\r\n            Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_4__[\"each\"])($columns, (i, element) => {\r\n                var $element = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(element);\r\n                var newElementWidth = newWidth / oldTableWidth * Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_9__[\"getOuterWidth\"])($element);\r\n                var $lineElements = Object(_table_helper__WEBPACK_IMPORTED_MODULE_2__[\"getLineElements\"])($table, $element.index(), \"horizontal\");\r\n                Object(_table_helper__WEBPACK_IMPORTED_MODULE_2__[\"setLineElementsFormat\"])(module, {\r\n                    elements: $lineElements,\r\n                    property: \"width\",\r\n                    value: newElementWidth\r\n                })\r\n            })\r\n        }\r\n    }\r\n    var autoHeightRows = Object(_table_helper__WEBPACK_IMPORTED_MODULE_2__[\"getAutoSizedElements\"])($table, \"vertical\");\r\n    if ((null === autoHeightRows || void 0 === autoHeightRows ? void 0 : autoHeightRows.length) > 0) {\r\n        tableBlot.format(\"tableHeight\", newHeight + \"px\")\r\n    } else {\r\n        var $rows = Object(_table_helper__WEBPACK_IMPORTED_MODULE_2__[\"getRowElements\"])($table);\r\n        var oldTableHeight = Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_9__[\"getOuterHeight\"])($table);\r\n        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_4__[\"each\"])($rows, (i, element) => {\r\n            var $element = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(element);\r\n            var newElementHeight = newHeight / oldTableHeight * Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_9__[\"getOuterHeight\"])($element);\r\n            var $lineElements = Object(_table_helper__WEBPACK_IMPORTED_MODULE_2__[\"getLineElements\"])($table, i, \"vertical\");\r\n            Object(_table_helper__WEBPACK_IMPORTED_MODULE_2__[\"setLineElementsFormat\"])(module, {\r\n                elements: $lineElements,\r\n                property: \"height\",\r\n                value: newElementHeight\r\n            })\r\n        })\r\n    }\r\n}\r\n\r\nfunction applyCellDimensionChanges(module, _ref12) {\r\n    var {\r\n        $cell: $cell,\r\n        newHeight: newHeight,\r\n        newWidth: newWidth,\r\n        tableBlot: tableBlot,\r\n        rowBlot: rowBlot\r\n    } = _ref12;\r\n    var $table = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__[\"default\"])($cell.closest(\"table\"));\r\n    if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_3__[\"isDefined\"])(newWidth)) {\r\n        var index = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__[\"default\"])($cell).index();\r\n        var $verticalCells = Object(_table_helper__WEBPACK_IMPORTED_MODULE_2__[\"getLineElements\"])($table, index);\r\n        var widthDiff = newWidth - Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_9__[\"getOuterWidth\"])($cell);\r\n        var tableWidth = Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_9__[\"getOuterWidth\"])($table);\r\n        if (newWidth > tableWidth) {\r\n            Object(_table_helper__WEBPACK_IMPORTED_MODULE_2__[\"unfixTableWidth\"])($table, {\r\n                tableBlot: tableBlot\r\n            })\r\n        }\r\n        Object(_table_helper__WEBPACK_IMPORTED_MODULE_2__[\"setLineElementsFormat\"])(module, {\r\n            elements: $verticalCells,\r\n            property: \"width\",\r\n            value: newWidth\r\n        });\r\n        var $nextColumnCell = $cell.next();\r\n        var shouldUpdateNearestColumnWidth = 0 === Object(_table_helper__WEBPACK_IMPORTED_MODULE_2__[\"getAutoSizedElements\"])($table).length;\r\n        if (shouldUpdateNearestColumnWidth) {\r\n            Object(_table_helper__WEBPACK_IMPORTED_MODULE_2__[\"unfixTableWidth\"])($table, {\r\n                tableBlot: tableBlot\r\n            });\r\n            if (1 === $nextColumnCell.length) {\r\n                $verticalCells = Object(_table_helper__WEBPACK_IMPORTED_MODULE_2__[\"getLineElements\"])($table, index + 1);\r\n                var nextColumnWidth = Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_9__[\"getOuterWidth\"])($verticalCells.eq(0)) - widthDiff;\r\n                Object(_table_helper__WEBPACK_IMPORTED_MODULE_2__[\"setLineElementsFormat\"])(module, {\r\n                    elements: $verticalCells,\r\n                    property: \"width\",\r\n                    value: Math.max(nextColumnWidth, 0)\r\n                })\r\n            } else {\r\n                var $prevColumnCell = $cell.prev();\r\n                if (1 === $prevColumnCell.length) {\r\n                    $verticalCells = Object(_table_helper__WEBPACK_IMPORTED_MODULE_2__[\"getLineElements\"])($table, index - 1);\r\n                    var prevColumnWidth = Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_9__[\"getOuterWidth\"])($verticalCells.eq(0)) - widthDiff;\r\n                    Object(_table_helper__WEBPACK_IMPORTED_MODULE_2__[\"setLineElementsFormat\"])(module, {\r\n                        elements: $verticalCells,\r\n                        property: \"width\",\r\n                        value: Math.max(prevColumnWidth, 0)\r\n                    })\r\n                }\r\n            }\r\n        }\r\n    }\r\n    rowBlot.children.forEach(rowCell => {\r\n        rowCell.format(\"cellHeight\", newHeight + \"px\")\r\n    });\r\n    var autoHeightRows = Object(_table_helper__WEBPACK_IMPORTED_MODULE_2__[\"getAutoSizedElements\"])($table, \"vertical\");\r\n    if (0 === autoHeightRows.length) {\r\n        $table.css(\"height\", \"auto\")\r\n    }\r\n}\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/devextreme/esm/ui/html_editor/utils/toolbar_helper.js\n");

/***/ })

}]);
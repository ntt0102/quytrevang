(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[2],{

/***/ "./node_modules/devextreme/esm/events/double_click.js":
/*!************************************************************!*\
  !*** ./node_modules/devextreme/esm/events/double_click.js ***!
  \************************************************************/
/*! exports provided: name */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "name", function() { return DBLCLICK_EVENT_NAME; });
/* harmony import */ var _events_core_events_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events/core/events_engine */ "./node_modules/devextreme/esm/events/core/events_engine.js");
/* harmony import */ var _core_utils_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/utils/dom */ "./node_modules/devextreme/esm/core/utils/dom.js");
/* harmony import */ var _core_dom_adapter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/dom_adapter */ "./node_modules/devextreme/esm/core/dom_adapter.js");
/* harmony import */ var _core_class__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../core/class */ "./node_modules/devextreme/esm/core/class.js");
/* harmony import */ var _core_event_registrator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./core/event_registrator */ "./node_modules/devextreme/esm/events/core/event_registrator.js");
/* harmony import */ var _click__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./click */ "./node_modules/devextreme/esm/events/click.js");
/* harmony import */ var _utils_index__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils/index */ "./node_modules/devextreme/esm/events/utils/index.js");
/**
 * DevExtreme (esm/events/double_click.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */







var DBLCLICK_EVENT_NAME = "dxdblclick";
var DBLCLICK_NAMESPACE = "dxDblClick";
var NAMESPACED_CLICK_EVENT = Object(_utils_index__WEBPACK_IMPORTED_MODULE_6__["addNamespace"])(_click__WEBPACK_IMPORTED_MODULE_5__["name"], DBLCLICK_NAMESPACE);
var DBLCLICK_TIMEOUT = 300;
var DblClick = _core_class__WEBPACK_IMPORTED_MODULE_3__["default"].inherit({
    ctor: function() {
        this._handlerCount = 0;
        this._forgetLastClick()
    },
    _forgetLastClick: function() {
        this._firstClickTarget = null;
        this._lastClickTimeStamp = -DBLCLICK_TIMEOUT
    },
    add: function() {
        if (this._handlerCount <= 0) {
            _events_core_events_engine__WEBPACK_IMPORTED_MODULE_0__["default"].on(_core_dom_adapter__WEBPACK_IMPORTED_MODULE_2__["default"].getDocument(), NAMESPACED_CLICK_EVENT, this._clickHandler.bind(this))
        }
        this._handlerCount++
    },
    _clickHandler: function(e) {
        var timeStamp = e.timeStamp || Date.now();
        var timeBetweenClicks = timeStamp - this._lastClickTimeStamp;
        var isSimulated = timeBetweenClicks < 0;
        var isDouble = !isSimulated && timeBetweenClicks < DBLCLICK_TIMEOUT;
        if (isDouble) {
            Object(_utils_index__WEBPACK_IMPORTED_MODULE_6__["fireEvent"])({
                type: DBLCLICK_EVENT_NAME,
                target: Object(_core_utils_dom__WEBPACK_IMPORTED_MODULE_1__["closestCommonParent"])(this._firstClickTarget, e.target),
                originalEvent: e
            });
            this._forgetLastClick()
        } else {
            this._firstClickTarget = e.target;
            this._lastClickTimeStamp = timeStamp
        }
    },
    remove: function() {
        this._handlerCount--;
        if (this._handlerCount <= 0) {
            this._forgetLastClick();
            _events_core_events_engine__WEBPACK_IMPORTED_MODULE_0__["default"].off(_core_dom_adapter__WEBPACK_IMPORTED_MODULE_2__["default"].getDocument(), NAMESPACED_CLICK_EVENT)
        }
    }
});
Object(_core_event_registrator__WEBPACK_IMPORTED_MODULE_4__["default"])(DBLCLICK_EVENT_NAME, new DblClick);



/***/ }),

/***/ "./node_modules/devextreme/esm/renovation/component_wrapper/grid_pager.js":
/*!********************************************************************************!*\
  !*** ./node_modules/devextreme/esm/renovation/component_wrapper/grid_pager.js ***!
  \********************************************************************************/
/*! exports provided: GridPagerWrapper */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GridPagerWrapper", function() { return GridPagerWrapper; });
/* harmony import */ var _common_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common/component */ "./node_modules/devextreme/esm/renovation/component_wrapper/common/component.js");
/**
 * DevExtreme (esm/renovation/component_wrapper/grid_pager.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */

class GridPagerWrapper extends _common_component__WEBPACK_IMPORTED_MODULE_0__["default"] {
    _optionChanged(args) {
        switch (args.name) {
            case "pageIndex":
                var pageIndexChanged = this.option("pageIndexChanged");
                if (pageIndexChanged) {
                    pageIndexChanged(args.value)
                }
                break;
            case "pageSize":
                var pageSizeChanged = this.option("pageSizeChanged");
                if (pageSizeChanged) {
                    pageSizeChanged(args.value)
                }
        }
        super._optionChanged(args)
    }
}


/***/ }),

/***/ "./node_modules/devextreme/esm/renovation/ui/editors/drop_down_editors/select_box.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/devextreme/esm/renovation/ui/editors/drop_down_editors/select_box.js ***!
  \*******************************************************************************************/
/*! exports provided: viewFunction, SelectBoxProps, SelectBox */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "viewFunction", function() { return viewFunction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SelectBoxProps", function() { return SelectBoxProps; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SelectBox", function() { return SelectBox; });
/* harmony import */ var _babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/objectWithoutPropertiesLoose */ "./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js");
/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ "./node_modules/@babel/runtime/helpers/esm/extends.js");
/* harmony import */ var inferno__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! inferno */ "./node_modules/inferno/index.esm.js");
/* harmony import */ var _devextreme_runtime_inferno__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @devextreme/runtime/inferno */ "./node_modules/@devextreme/runtime/esm/inferno/index.js");
/* harmony import */ var _ui_select_box__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../ui/select_box */ "./node_modules/devextreme/esm/ui/select_box.js");
/* harmony import */ var _common_dom_component_wrapper__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../common/dom_component_wrapper */ "./node_modules/devextreme/esm/renovation/ui/common/dom_component_wrapper.js");
/* harmony import */ var _common_base_props__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../common/base_props */ "./node_modules/devextreme/esm/renovation/ui/common/base_props.js");
/**
 * DevExtreme (esm/renovation/ui/editors/drop_down_editors/select_box.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */


var _excluded = ["accessKey", "activeStateEnabled", "className", "dataSource", "defaultValue", "disabled", "displayExpr", "focusStateEnabled", "height", "hint", "hoverStateEnabled", "onClick", "onKeyDown", "rtlEnabled", "tabIndex", "value", "valueChange", "valueExpr", "visible", "width"];





var viewFunction = _ref => {
    var {
        props: props,
        restAttributes: restAttributes
    } = _ref;
    return Object(inferno__WEBPACK_IMPORTED_MODULE_2__["normalizeProps"])(Object(inferno__WEBPACK_IMPORTED_MODULE_2__["createComponentVNode"])(2, _common_dom_component_wrapper__WEBPACK_IMPORTED_MODULE_5__["DomComponentWrapper"], Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__["default"])({
        componentType: _ui_select_box__WEBPACK_IMPORTED_MODULE_4__["default"],
        componentProps: props,
        templateNames: ["dropDownButtonTemplate", "groupTemplate", "itemTemplate"]
    }, restAttributes)))
};
var SelectBoxProps = Object.create(Object.prototype, Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__["default"])(Object.getOwnPropertyDescriptors(_common_base_props__WEBPACK_IMPORTED_MODULE_6__["BaseWidgetProps"]), Object.getOwnPropertyDescriptors({
    focusStateEnabled: true,
    hoverStateEnabled: true,
    defaultValue: null,
    isReactComponentWrapper: true
})));
class SelectBox extends _devextreme_runtime_inferno__WEBPACK_IMPORTED_MODULE_3__["BaseInfernoComponent"] {
    constructor(props) {
        super(props);
        this.state = {
            value: void 0 !== this.props.value ? this.props.value : this.props.defaultValue
        }
    }
    get restAttributes() {
        var _this$props$value = Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__["default"])({}, this.props, {
                value: void 0 !== this.props.value ? this.props.value : this.state.value
            }),
            restProps = Object(_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_0__["default"])(_this$props$value, _excluded);
        return restProps
    }
    render() {
        var props = this.props;
        return viewFunction({
            props: Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__["default"])({}, props, {
                value: void 0 !== this.props.value ? this.props.value : this.state.value
            }),
            restAttributes: this.restAttributes
        })
    }
}
SelectBox.defaultProps = SelectBoxProps;


/***/ }),

/***/ "./node_modules/devextreme/esm/renovation/ui/editors/number_box.js":
/*!*************************************************************************!*\
  !*** ./node_modules/devextreme/esm/renovation/ui/editors/number_box.js ***!
  \*************************************************************************/
/*! exports provided: viewFunction, NumberBoxProps, NumberBox */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "viewFunction", function() { return viewFunction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NumberBoxProps", function() { return NumberBoxProps; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NumberBox", function() { return NumberBox; });
/* harmony import */ var _babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/objectWithoutPropertiesLoose */ "./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js");
/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ "./node_modules/@babel/runtime/helpers/esm/extends.js");
/* harmony import */ var inferno__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! inferno */ "./node_modules/inferno/index.esm.js");
/* harmony import */ var _devextreme_runtime_inferno__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @devextreme/runtime/inferno */ "./node_modules/@devextreme/runtime/esm/inferno/index.js");
/* harmony import */ var _ui_number_box__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../ui/number_box */ "./node_modules/devextreme/esm/ui/number_box.js");
/* harmony import */ var _common_dom_component_wrapper__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../common/dom_component_wrapper */ "./node_modules/devextreme/esm/renovation/ui/common/dom_component_wrapper.js");
/* harmony import */ var _common_base_props__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../common/base_props */ "./node_modules/devextreme/esm/renovation/ui/common/base_props.js");
/**
 * DevExtreme (esm/renovation/ui/editors/number_box.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */


var _excluded = ["accessKey", "activeStateEnabled", "className", "defaultValue", "disabled", "focusStateEnabled", "height", "hint", "hoverStateEnabled", "invalidValueMessage", "max", "min", "mode", "onClick", "onKeyDown", "rtlEnabled", "showSpinButtons", "step", "tabIndex", "useLargeSpinButtons", "value", "valueChange", "visible", "width"];





var DEFAULT_VALUE = 0;
var viewFunction = _ref => {
    var {
        props: props,
        restAttributes: restAttributes
    } = _ref;
    return Object(inferno__WEBPACK_IMPORTED_MODULE_2__["normalizeProps"])(Object(inferno__WEBPACK_IMPORTED_MODULE_2__["createComponentVNode"])(2, _common_dom_component_wrapper__WEBPACK_IMPORTED_MODULE_5__["DomComponentWrapper"], Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__["default"])({
        componentType: _ui_number_box__WEBPACK_IMPORTED_MODULE_4__["default"],
        componentProps: props,
        templateNames: []
    }, restAttributes)))
};
var NumberBoxProps = Object.create(Object.prototype, Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__["default"])(Object.getOwnPropertyDescriptors(_common_base_props__WEBPACK_IMPORTED_MODULE_6__["BaseWidgetProps"]), Object.getOwnPropertyDescriptors({
    focusStateEnabled: true,
    hoverStateEnabled: true,
    defaultValue: DEFAULT_VALUE,
    isReactComponentWrapper: true
})));
class NumberBox extends _devextreme_runtime_inferno__WEBPACK_IMPORTED_MODULE_3__["BaseInfernoComponent"] {
    constructor(props) {
        super(props);
        this.state = {
            value: void 0 !== this.props.value ? this.props.value : this.props.defaultValue
        }
    }
    get restAttributes() {
        var _this$props$value = Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__["default"])({}, this.props, {
                value: void 0 !== this.props.value ? this.props.value : this.state.value
            }),
            restProps = Object(_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_0__["default"])(_this$props$value, _excluded);
        return restProps
    }
    render() {
        var props = this.props;
        return viewFunction({
            props: Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__["default"])({}, props, {
                value: void 0 !== this.props.value ? this.props.value : this.state.value
            }),
            restAttributes: this.restAttributes
        })
    }
}
NumberBox.defaultProps = NumberBoxProps;


/***/ }),

/***/ "./node_modules/devextreme/esm/renovation/ui/pager/common/base_pager_props.js":
/*!************************************************************************************!*\
  !*** ./node_modules/devextreme/esm/renovation/ui/pager/common/base_pager_props.js ***!
  \************************************************************************************/
/*! exports provided: BasePagerProps */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BasePagerProps", function() { return BasePagerProps; });
/**
 * DevExtreme (esm/renovation/ui/pager/common/base_pager_props.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
var BasePagerProps = {
    gridCompatibility: true,
    showInfo: false,
    displayMode: "adaptive",
    maxPagesCount: 10,
    pageCount: 10,
    visible: true,
    hasKnownLastPage: true,
    pagesNavigatorVisible: "auto",
    showPageSizes: true,
    get pageSizes() {
        return [5, 10]
    },
    showNavigationButtons: false,
    totalCount: 0
};


/***/ }),

/***/ "./node_modules/devextreme/esm/renovation/ui/pager/common/consts.js":
/*!**************************************************************************!*\
  !*** ./node_modules/devextreme/esm/renovation/ui/pager/common/consts.js ***!
  \**************************************************************************/
/*! exports provided: PAGER_CLASS, LIGHT_MODE_CLASS, PAGER_PAGES_CLASS, PAGER_PAGE_INDEXES_CLASS, PAGER_PAGE_CLASS, PAGER_SELECTION_CLASS, PAGER_PAGE_SIZE_CLASS, PAGER_PAGE_SIZES_CLASS, PAGER_SELECTED_PAGE_SIZE_CLASS */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PAGER_CLASS", function() { return PAGER_CLASS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LIGHT_MODE_CLASS", function() { return LIGHT_MODE_CLASS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PAGER_PAGES_CLASS", function() { return PAGER_PAGES_CLASS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PAGER_PAGE_INDEXES_CLASS", function() { return PAGER_PAGE_INDEXES_CLASS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PAGER_PAGE_CLASS", function() { return PAGER_PAGE_CLASS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PAGER_SELECTION_CLASS", function() { return PAGER_SELECTION_CLASS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PAGER_PAGE_SIZE_CLASS", function() { return PAGER_PAGE_SIZE_CLASS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PAGER_PAGE_SIZES_CLASS", function() { return PAGER_PAGE_SIZES_CLASS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PAGER_SELECTED_PAGE_SIZE_CLASS", function() { return PAGER_SELECTED_PAGE_SIZE_CLASS; });
/**
 * DevExtreme (esm/renovation/ui/pager/common/consts.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
var PAGER_CLASS = "dx-pager";
var LIGHT_MODE_CLASS = "dx-light-mode";
var PAGER_PAGES_CLASS = "dx-pages";
var PAGER_PAGE_INDEXES_CLASS = "dx-page-indexes";
var PAGER_PAGE_CLASS = "dx-page";
var PAGER_SELECTION_CLASS = "dx-selection";
var PAGER_PAGE_SIZE_CLASS = "dx-page-size";
var PAGER_PAGE_SIZES_CLASS = "dx-page-sizes";
var PAGER_SELECTED_PAGE_SIZE_CLASS = "".concat(PAGER_PAGE_SIZE_CLASS, " ").concat(PAGER_SELECTION_CLASS);


/***/ }),

/***/ "./node_modules/devextreme/esm/renovation/ui/pager/common/keyboard_action_context.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/devextreme/esm/renovation/ui/pager/common/keyboard_action_context.js ***!
  \*******************************************************************************************/
/*! exports provided: KeyboardActionContext */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "KeyboardActionContext", function() { return KeyboardActionContext; });
/* harmony import */ var _devextreme_runtime_inferno__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @devextreme/runtime/inferno */ "./node_modules/@devextreme/runtime/esm/inferno/index.js");
/**
 * DevExtreme (esm/renovation/ui/pager/common/keyboard_action_context.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */

var KeyboardActionContext = Object(_devextreme_runtime_inferno__WEBPACK_IMPORTED_MODULE_0__["createContext"])(void 0);


/***/ }),

/***/ "./node_modules/devextreme/esm/renovation/ui/pager/common/light_button.js":
/*!********************************************************************************!*\
  !*** ./node_modules/devextreme/esm/renovation/ui/pager/common/light_button.js ***!
  \********************************************************************************/
/*! exports provided: viewFunction, LightButtonProps, LightButton */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "viewFunction", function() { return viewFunction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LightButtonProps", function() { return LightButtonProps; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LightButton", function() { return LightButton; });
/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ "./node_modules/@babel/runtime/helpers/esm/extends.js");
/* harmony import */ var _babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/objectWithoutPropertiesLoose */ "./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js");
/* harmony import */ var inferno__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! inferno */ "./node_modules/inferno/index.esm.js");
/* harmony import */ var _devextreme_runtime_inferno__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @devextreme/runtime/inferno */ "./node_modules/@devextreme/runtime/esm/inferno/index.js");
/* harmony import */ var _utils_subscribe_to_event__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../utils/subscribe_to_event */ "./node_modules/devextreme/esm/renovation/utils/subscribe_to_event.js");
/* harmony import */ var _keyboard_action_context__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./keyboard_action_context */ "./node_modules/devextreme/esm/renovation/ui/pager/common/keyboard_action_context.js");
/**
 * DevExtreme (esm/renovation/ui/pager/common/light_button.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */


var _excluded = ["children", "className", "label", "onClick"];




var viewFunction = _ref => {
    var {
        props: {
            children: children,
            className: className,
            label: label
        },
        widgetRef: widgetRef
    } = _ref;
    return Object(inferno__WEBPACK_IMPORTED_MODULE_2__["createVNode"])(1, "div", className, children, 0, {
        tabIndex: 0,
        role: "button",
        "aria-label": label
    }, null, widgetRef)
};
var LightButtonProps = {
    className: "",
    label: ""
};

class LightButton extends _devextreme_runtime_inferno__WEBPACK_IMPORTED_MODULE_3__["InfernoComponent"] {
    constructor(props) {
        super(props);
        this.state = {};
        this.widgetRef = Object(inferno__WEBPACK_IMPORTED_MODULE_2__["createRef"])();
        this.keyboardEffect = this.keyboardEffect.bind(this);
        this.subscribeToClick = this.subscribeToClick.bind(this)
    }
    get keyboardContext() {
        if ("KeyboardActionContext" in this.context) {
            return this.context.KeyboardActionContext
        }
        return _keyboard_action_context__WEBPACK_IMPORTED_MODULE_5__["KeyboardActionContext"]
    }
    createEffects() {
        return [new _devextreme_runtime_inferno__WEBPACK_IMPORTED_MODULE_3__["InfernoEffect"](this.keyboardEffect, [this.keyboardContext, this.props.onClick]), new _devextreme_runtime_inferno__WEBPACK_IMPORTED_MODULE_3__["InfernoEffect"](this.subscribeToClick, [this.props.onClick])]
    }
    updateEffects() {
        var _this$_effects$, _this$_effects$2;
        null === (_this$_effects$ = this._effects[0]) || void 0 === _this$_effects$ ? void 0 : _this$_effects$.update([this.keyboardContext, this.props.onClick]);
        null === (_this$_effects$2 = this._effects[1]) || void 0 === _this$_effects$2 ? void 0 : _this$_effects$2.update([this.props.onClick])
    }
    keyboardEffect() {
        return this.keyboardContext.registerKeyboardAction(this.widgetRef.current, this.props.onClick)
    }
    subscribeToClick() {
        return Object(_utils_subscribe_to_event__WEBPACK_IMPORTED_MODULE_4__["subscribeToClickEvent"])(this.widgetRef.current, this.props.onClick)
    }
    get restAttributes() {
        var _this$props = this.props,
            restProps = Object(_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(_this$props, _excluded);
        return restProps
    }
    render() {
        var props = this.props;
        return viewFunction({
            props: Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__["default"])({}, props),
            widgetRef: this.widgetRef,
            keyboardContext: this.keyboardContext,
            restAttributes: this.restAttributes
        })
    }
}
LightButton.defaultProps = LightButtonProps;


/***/ }),

/***/ "./node_modules/devextreme/esm/renovation/ui/pager/common/pager_props.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/devextreme/esm/renovation/ui/pager/common/pager_props.js ***!
  \*******************************************************************************/
/*! exports provided: PagerProps, InternalPagerProps */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PagerProps", function() { return PagerProps; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InternalPagerProps", function() { return InternalPagerProps; });
/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ "./node_modules/@babel/runtime/helpers/esm/extends.js");
/* harmony import */ var _base_pager_props__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base_pager_props */ "./node_modules/devextreme/esm/renovation/ui/pager/common/base_pager_props.js");
/**
 * DevExtreme (esm/renovation/ui/pager/common/pager_props.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */


var PagerProps = Object.create(Object.prototype, Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__["default"])(Object.getOwnPropertyDescriptors(_base_pager_props__WEBPACK_IMPORTED_MODULE_1__["BasePagerProps"]), Object.getOwnPropertyDescriptors({
    defaultPageSize: 5,
    pageSizeChange: () => {},
    defaultPageIndex: 1,
    pageIndexChange: () => {}
})));
var InternalPagerProps = Object.create(Object.prototype, Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__["default"])(Object.getOwnPropertyDescriptors(_base_pager_props__WEBPACK_IMPORTED_MODULE_1__["BasePagerProps"]), Object.getOwnPropertyDescriptors({
    pageSize: 5,
    pageIndex: 1
})));


/***/ }),

/***/ "./node_modules/devextreme/esm/renovation/ui/pager/content.js":
/*!********************************************************************!*\
  !*** ./node_modules/devextreme/esm/renovation/ui/pager/content.js ***!
  \********************************************************************/
/*! exports provided: viewFunction, PagerContentProps, PagerContent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "viewFunction", function() { return viewFunction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PagerContentProps", function() { return PagerContentProps; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PagerContent", function() { return PagerContent; });
/* harmony import */ var _babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/objectWithoutPropertiesLoose */ "./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js");
/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ "./node_modules/@babel/runtime/helpers/esm/extends.js");
/* harmony import */ var inferno__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! inferno */ "./node_modules/inferno/index.esm.js");
/* harmony import */ var _devextreme_runtime_inferno__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @devextreme/runtime/inferno */ "./node_modules/@devextreme/runtime/esm/inferno/index.js");
/* harmony import */ var _info__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./info */ "./node_modules/devextreme/esm/renovation/ui/pager/info.js");
/* harmony import */ var _pages_page_index_selector__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./pages/page_index_selector */ "./node_modules/devextreme/esm/renovation/ui/pager/pages/page_index_selector.js");
/* harmony import */ var _page_size_selector__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./page_size/selector */ "./node_modules/devextreme/esm/renovation/ui/pager/page_size/selector.js");
/* harmony import */ var _common_consts__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./common/consts */ "./node_modules/devextreme/esm/renovation/ui/pager/common/consts.js");
/* harmony import */ var _common_pager_props__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./common/pager_props */ "./node_modules/devextreme/esm/renovation/ui/pager/common/pager_props.js");
/* harmony import */ var _utils_combine_classes__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../utils/combine_classes */ "./node_modules/devextreme/esm/renovation/utils/combine_classes.js");
/* harmony import */ var _common_widget__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../common/widget */ "./node_modules/devextreme/esm/renovation/ui/common/widget.js");
/* harmony import */ var _ui_shared_accessibility__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../ui/shared/accessibility */ "./node_modules/devextreme/esm/ui/shared/accessibility.js");
/**
 * DevExtreme (esm/renovation/ui/pager/content.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */


var _excluded = ["className", "displayMode", "gridCompatibility", "hasKnownLastPage", "infoText", "infoTextRef", "infoTextVisible", "isLargeDisplayMode", "lightModeEnabled", "maxPagesCount", "onKeyDown", "pageCount", "pageIndex", "pageIndexChange", "pageSize", "pageSizeChange", "pageSizes", "pageSizesRef", "pagesCountText", "pagesNavigatorVisible", "pagesRef", "rootElementRef", "rtlEnabled", "showInfo", "showNavigationButtons", "showPageSizes", "totalCount", "visible"];










var viewFunction = _ref => {
    var {
        classes: classes,
        infoVisible: infoVisible,
        isLargeDisplayMode: isLargeDisplayMode,
        pageIndexSelectorVisible: pageIndexSelectorVisible,
        pagesContainerVisibility: pagesContainerVisibility,
        pagesContainerVisible: pagesContainerVisible,
        props: {
            hasKnownLastPage: hasKnownLastPage,
            infoText: infoText,
            infoTextRef: infoTextRef,
            maxPagesCount: maxPagesCount,
            pageCount: pageCount,
            pageIndex: pageIndex,
            pageIndexChange: pageIndexChange,
            pageSize: pageSize,
            pageSizeChange: pageSizeChange,
            pageSizes: pageSizes,
            pageSizesRef: pageSizesRef,
            pagesCountText: pagesCountText,
            pagesRef: pagesRef,
            rtlEnabled: rtlEnabled,
            showNavigationButtons: showNavigationButtons,
            showPageSizes: showPageSizes,
            totalCount: totalCount,
            visible: visible
        },
        restAttributes: restAttributes,
        widgetRootElementRef: widgetRootElementRef
    } = _ref;
    return Object(inferno__WEBPACK_IMPORTED_MODULE_2__["normalizeProps"])(Object(inferno__WEBPACK_IMPORTED_MODULE_2__["createComponentVNode"])(2, _common_widget__WEBPACK_IMPORTED_MODULE_10__["Widget"], Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__["default"])({
        rootElementRef: widgetRootElementRef,
        rtlEnabled: rtlEnabled,
        classes: classes,
        visible: visible
    }, restAttributes, {
        children: [showPageSizes && Object(inferno__WEBPACK_IMPORTED_MODULE_2__["createComponentVNode"])(2, _page_size_selector__WEBPACK_IMPORTED_MODULE_6__["PageSizeSelector"], {
            rootElementRef: pageSizesRef,
            isLargeDisplayMode: isLargeDisplayMode,
            pageSize: pageSize,
            pageSizeChange: pageSizeChange,
            pageSizes: pageSizes
        }), pagesContainerVisible && Object(inferno__WEBPACK_IMPORTED_MODULE_2__["createVNode"])(1, "div", _common_consts__WEBPACK_IMPORTED_MODULE_7__["PAGER_PAGES_CLASS"], [infoVisible && Object(inferno__WEBPACK_IMPORTED_MODULE_2__["createComponentVNode"])(2, _info__WEBPACK_IMPORTED_MODULE_4__["InfoText"], {
            rootElementRef: infoTextRef,
            infoText: infoText,
            pageCount: pageCount,
            pageIndex: pageIndex,
            totalCount: totalCount
        }), pageIndexSelectorVisible && Object(inferno__WEBPACK_IMPORTED_MODULE_2__["createVNode"])(1, "div", _common_consts__WEBPACK_IMPORTED_MODULE_7__["PAGER_PAGE_INDEXES_CLASS"], Object(inferno__WEBPACK_IMPORTED_MODULE_2__["createComponentVNode"])(2, _pages_page_index_selector__WEBPACK_IMPORTED_MODULE_5__["PageIndexSelector"], {
            hasKnownLastPage: hasKnownLastPage,
            isLargeDisplayMode: isLargeDisplayMode,
            maxPagesCount: maxPagesCount,
            pageCount: pageCount,
            pageIndex: pageIndex,
            pageIndexChange: pageIndexChange,
            pagesCountText: pagesCountText,
            showNavigationButtons: showNavigationButtons,
            totalCount: totalCount
        }), 2, null, null, pagesRef)], 0, {
            style: Object(_devextreme_runtime_inferno__WEBPACK_IMPORTED_MODULE_3__["normalizeStyles"])({
                visibility: pagesContainerVisibility
            })
        })]
    })))
};
var PagerContentProps = Object.create(Object.prototype, Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__["default"])(Object.getOwnPropertyDescriptors(_common_pager_props__WEBPACK_IMPORTED_MODULE_8__["InternalPagerProps"]), Object.getOwnPropertyDescriptors({
    infoTextVisible: true,
    isLargeDisplayMode: true
})));

class PagerContent extends _devextreme_runtime_inferno__WEBPACK_IMPORTED_MODULE_3__["InfernoComponent"] {
    constructor(props) {
        super(props);
        this.state = {};
        this.widgetRootElementRef = Object(inferno__WEBPACK_IMPORTED_MODULE_2__["createRef"])();
        this.__getterCache = {};
        this.setRootElementRef = this.setRootElementRef.bind(this);
        this.createFakeInstance = this.createFakeInstance.bind(this)
    }
    createEffects() {
        return [new _devextreme_runtime_inferno__WEBPACK_IMPORTED_MODULE_3__["InfernoEffect"](this.setRootElementRef, [])]
    }
    getChildContext() {
        return Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__["default"])({}, this.context, {
            KeyboardActionContext: this.keyboardAction
        })
    }
    setRootElementRef() {
        var {
            rootElementRef: rootElementRef
        } = this.props;
        if (rootElementRef) {
            rootElementRef.current = this.widgetRootElementRef.current
        }
    }
    createFakeInstance() {
        return {
            option: () => false,
            element: () => this.widgetRootElementRef.current,
            _createActionByOption: () => e => {
                var _this$props$onKeyDown, _this$props;
                null === (_this$props$onKeyDown = (_this$props = this.props).onKeyDown) || void 0 === _this$props$onKeyDown ? void 0 : _this$props$onKeyDown.call(_this$props, e)
            }
        }
    }
    get keyboardAction() {
        if (void 0 !== this.__getterCache.keyboardAction) {
            return this.__getterCache.keyboardAction
        }
        return this.__getterCache.keyboardAction = (() => ({
            registerKeyboardAction: (element, action) => {
                var fakePagerInstance = this.createFakeInstance();
                return Object(_ui_shared_accessibility__WEBPACK_IMPORTED_MODULE_11__["registerKeyboardAction"])("pager", fakePagerInstance, element, void 0, action)
            }
        }))()
    }
    get infoVisible() {
        var {
            infoTextVisible: infoTextVisible,
            showInfo: showInfo
        } = this.props;
        return showInfo && infoTextVisible && this.isLargeDisplayMode
    }
    get pageIndexSelectorVisible() {
        return 0 !== this.props.pageSize
    }
    get normalizedDisplayMode() {
        var {
            displayMode: displayMode,
            lightModeEnabled: lightModeEnabled
        } = this.props;
        if ("adaptive" === displayMode && void 0 !== lightModeEnabled) {
            return lightModeEnabled ? "compact" : "full"
        }
        return displayMode
    }
    get pagesContainerVisible() {
        return !!this.props.pagesNavigatorVisible && this.props.pageCount > 0
    }
    get pagesContainerVisibility() {
        if ("auto" === this.props.pagesNavigatorVisible && 1 === this.props.pageCount && this.props.hasKnownLastPage) {
            return "hidden"
        }
        return
    }
    get isLargeDisplayMode() {
        var displayMode = this.normalizedDisplayMode;
        var result = false;
        if ("adaptive" === displayMode) {
            result = this.props.isLargeDisplayMode
        } else {
            result = "full" === displayMode
        }
        return result
    }
    get classes() {
        var classesMap = {
            ["".concat(this.props.className)]: !!this.props.className,
            [_common_consts__WEBPACK_IMPORTED_MODULE_7__["PAGER_CLASS"]]: true,
            [_common_consts__WEBPACK_IMPORTED_MODULE_7__["LIGHT_MODE_CLASS"]]: !this.isLargeDisplayMode
        };
        return Object(_utils_combine_classes__WEBPACK_IMPORTED_MODULE_9__["combineClasses"])(classesMap)
    }
    get restAttributes() {
        var _this$props2 = this.props,
            restProps = Object(_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_0__["default"])(_this$props2, _excluded);
        return restProps
    }
    componentWillUpdate(nextProps, nextState, context) {
        super.componentWillUpdate();
        if (this.props.onKeyDown !== nextProps.onKeyDown) {
            this.__getterCache.keyboardAction = void 0
        }
    }
    render() {
        var props = this.props;
        return viewFunction({
            props: Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__["default"])({}, props),
            widgetRootElementRef: this.widgetRootElementRef,
            keyboardAction: this.keyboardAction,
            infoVisible: this.infoVisible,
            pageIndexSelectorVisible: this.pageIndexSelectorVisible,
            pagesContainerVisible: this.pagesContainerVisible,
            pagesContainerVisibility: this.pagesContainerVisibility,
            isLargeDisplayMode: this.isLargeDisplayMode,
            classes: this.classes,
            restAttributes: this.restAttributes
        })
    }
}
PagerContent.defaultProps = PagerContentProps;


/***/ }),

/***/ "./node_modules/devextreme/esm/renovation/ui/pager/info.js":
/*!*****************************************************************!*\
  !*** ./node_modules/devextreme/esm/renovation/ui/pager/info.js ***!
  \*****************************************************************/
/*! exports provided: PAGER_INFO_CLASS, viewFunction, InfoTextProps, InfoText */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PAGER_INFO_CLASS", function() { return PAGER_INFO_CLASS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "viewFunction", function() { return viewFunction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InfoTextProps", function() { return InfoTextProps; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InfoText", function() { return InfoText; });
/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ "./node_modules/@babel/runtime/helpers/esm/extends.js");
/* harmony import */ var _babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/objectWithoutPropertiesLoose */ "./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js");
/* harmony import */ var inferno__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! inferno */ "./node_modules/inferno/index.esm.js");
/* harmony import */ var _devextreme_runtime_inferno__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @devextreme/runtime/inferno */ "./node_modules/@devextreme/runtime/esm/inferno/index.js");
/* harmony import */ var _core_utils_string__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../core/utils/string */ "./node_modules/devextreme/esm/core/utils/string.js");
/* harmony import */ var _localization_message__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../localization/message */ "./node_modules/devextreme/esm/localization/message.js");
/* harmony import */ var _common_pager_props__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./common/pager_props */ "./node_modules/devextreme/esm/renovation/ui/pager/common/pager_props.js");
/**
 * DevExtreme (esm/renovation/ui/pager/info.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */


var _excluded = ["infoText", "pageCount", "pageIndex", "rootElementRef", "totalCount"];





var PAGER_INFO_CLASS = "dx-info";
var viewFunction = _ref => {
    var {
        props: {
            rootElementRef: rootElementRef
        },
        text: text
    } = _ref;
    return Object(inferno__WEBPACK_IMPORTED_MODULE_2__["createVNode"])(1, "div", PAGER_INFO_CLASS, text, 0, null, null, rootElementRef)
};
var InfoTextProps = {};
var InfoTextPropsType = {
    get pageIndex() {
        return _common_pager_props__WEBPACK_IMPORTED_MODULE_6__["InternalPagerProps"].pageIndex
    },
    get pageCount() {
        return _common_pager_props__WEBPACK_IMPORTED_MODULE_6__["InternalPagerProps"].pageCount
    },
    get totalCount() {
        return _common_pager_props__WEBPACK_IMPORTED_MODULE_6__["InternalPagerProps"].totalCount
    }
};
class InfoText extends _devextreme_runtime_inferno__WEBPACK_IMPORTED_MODULE_3__["BaseInfernoComponent"] {
    constructor(props) {
        super(props);
        this.state = {}
    }
    get infoText() {
        var _this$props$infoText;
        return (null !== (_this$props$infoText = this.props.infoText) && void 0 !== _this$props$infoText ? _this$props$infoText : "") || _localization_message__WEBPACK_IMPORTED_MODULE_5__["default"].getFormatter("dxPager-infoText")()
    }
    get text() {
        var {
            pageCount: pageCount,
            pageIndex: pageIndex,
            totalCount: totalCount
        } = this.props;
        return Object(_core_utils_string__WEBPACK_IMPORTED_MODULE_4__["format"])(this.infoText, (pageIndex + 1).toString(), pageCount.toString(), totalCount.toString())
    }
    get restAttributes() {
        var _this$props = this.props,
            restProps = Object(_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(_this$props, _excluded);
        return restProps
    }
    render() {
        var props = this.props;
        return viewFunction({
            props: Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__["default"])({}, props),
            infoText: this.infoText,
            text: this.text,
            restAttributes: this.restAttributes
        })
    }
}
InfoText.defaultProps = InfoTextPropsType;


/***/ }),

/***/ "./node_modules/devextreme/esm/renovation/ui/pager/page_size/large.js":
/*!****************************************************************************!*\
  !*** ./node_modules/devextreme/esm/renovation/ui/pager/page_size/large.js ***!
  \****************************************************************************/
/*! exports provided: viewFunction, PageSizeLargeProps, PageSizeLarge */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "viewFunction", function() { return viewFunction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PageSizeLargeProps", function() { return PageSizeLargeProps; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PageSizeLarge", function() { return PageSizeLarge; });
/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ "./node_modules/@babel/runtime/helpers/esm/extends.js");
/* harmony import */ var _babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/objectWithoutPropertiesLoose */ "./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js");
/* harmony import */ var inferno__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! inferno */ "./node_modules/inferno/index.esm.js");
/* harmony import */ var _devextreme_runtime_inferno__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @devextreme/runtime/inferno */ "./node_modules/@devextreme/runtime/esm/inferno/index.js");
/* harmony import */ var _common_light_button__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../common/light_button */ "./node_modules/devextreme/esm/renovation/ui/pager/common/light_button.js");
/* harmony import */ var _common_pager_props__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../common/pager_props */ "./node_modules/devextreme/esm/renovation/ui/pager/common/pager_props.js");
/* harmony import */ var _common_consts__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../common/consts */ "./node_modules/devextreme/esm/renovation/ui/pager/common/consts.js");
/**
 * DevExtreme (esm/renovation/ui/pager/page_size/large.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */


var _excluded = ["pageSize", "pageSizeChange", "pageSizes"];






var viewFunction = _ref => {
    var {
        pageSizesText: pageSizesText
    } = _ref;
    return Object(inferno__WEBPACK_IMPORTED_MODULE_2__["createFragment"])(pageSizesText.map(_ref2 => {
        var {
            className: className,
            click: click,
            label: label,
            text: text
        } = _ref2;
        return Object(inferno__WEBPACK_IMPORTED_MODULE_2__["createComponentVNode"])(2, _common_light_button__WEBPACK_IMPORTED_MODULE_4__["LightButton"], {
            className: className,
            label: label,
            onClick: click,
            children: text
        }, text)
    }), 0)
};
var PageSizeLargeProps = {};
var PageSizeLargePropsType = {
    get pageSize() {
        return _common_pager_props__WEBPACK_IMPORTED_MODULE_5__["InternalPagerProps"].pageSize
    }
};
class PageSizeLarge extends _devextreme_runtime_inferno__WEBPACK_IMPORTED_MODULE_3__["BaseInfernoComponent"] {
    constructor(props) {
        super(props);
        this.state = {};
        this.__getterCache = {};
        this.onPageSizeChange = this.onPageSizeChange.bind(this)
    }
    get pageSizesText() {
        if (void 0 !== this.__getterCache.pageSizesText) {
            return this.__getterCache.pageSizesText
        }
        return this.__getterCache.pageSizesText = (() => {
            var {
                pageSize: pageSize,
                pageSizes: pageSizes
            } = this.props;
            return pageSizes.map(_ref3 => {
                var {
                    text: text,
                    value: processedPageSize
                } = _ref3;
                var selected = processedPageSize === pageSize;
                var className = selected ? _common_consts__WEBPACK_IMPORTED_MODULE_6__["PAGER_SELECTED_PAGE_SIZE_CLASS"] : _common_consts__WEBPACK_IMPORTED_MODULE_6__["PAGER_PAGE_SIZE_CLASS"];
                return {
                    className: className,
                    click: this.onPageSizeChange(processedPageSize),
                    label: "Display ".concat(processedPageSize, " items on page"),
                    text: text
                }
            })
        })()
    }
    onPageSizeChange(processedPageSize) {
        return () => {
            this.props.pageSizeChange(processedPageSize);
            return this.props.pageSize
        }
    }
    get restAttributes() {
        var _this$props = this.props,
            restProps = Object(_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(_this$props, _excluded);
        return restProps
    }
    componentWillUpdate(nextProps, nextState, context) {
        if (this.props.pageSize !== nextProps.pageSize || this.props.pageSizes !== nextProps.pageSizes || this.props.pageSizeChange !== nextProps.pageSizeChange) {
            this.__getterCache.pageSizesText = void 0
        }
    }
    render() {
        var props = this.props;
        return viewFunction({
            props: Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__["default"])({}, props),
            pageSizesText: this.pageSizesText,
            restAttributes: this.restAttributes
        })
    }
}
PageSizeLarge.defaultProps = PageSizeLargePropsType;


/***/ }),

/***/ "./node_modules/devextreme/esm/renovation/ui/pager/page_size/selector.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/devextreme/esm/renovation/ui/pager/page_size/selector.js ***!
  \*******************************************************************************/
/*! exports provided: viewFunction, PageSizeSelector */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "viewFunction", function() { return viewFunction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PageSizeSelector", function() { return PageSizeSelector; });
/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ "./node_modules/@babel/runtime/helpers/esm/extends.js");
/* harmony import */ var _babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/objectWithoutPropertiesLoose */ "./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js");
/* harmony import */ var inferno__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! inferno */ "./node_modules/inferno/index.esm.js");
/* harmony import */ var _devextreme_runtime_inferno__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @devextreme/runtime/inferno */ "./node_modules/@devextreme/runtime/esm/inferno/index.js");
/* harmony import */ var _small__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./small */ "./node_modules/devextreme/esm/renovation/ui/pager/page_size/small.js");
/* harmony import */ var _large__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./large */ "./node_modules/devextreme/esm/renovation/ui/pager/page_size/large.js");
/* harmony import */ var _common_pager_props__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../common/pager_props */ "./node_modules/devextreme/esm/renovation/ui/pager/common/pager_props.js");
/* harmony import */ var _localization_message__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../localization/message */ "./node_modules/devextreme/esm/localization/message.js");
/* harmony import */ var _common_consts__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../common/consts */ "./node_modules/devextreme/esm/renovation/ui/pager/common/consts.js");
/**
 * DevExtreme (esm/renovation/ui/pager/page_size/selector.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */


var _excluded = ["isLargeDisplayMode", "pageSize", "pageSizeChange", "pageSizes", "rootElementRef"];







var viewFunction = _ref => {
    var {
        htmlRef: htmlRef,
        normalizedPageSizes: normalizedPageSizes,
        props: {
            isLargeDisplayMode: isLargeDisplayMode,
            pageSize: pageSize,
            pageSizeChange: pageSizeChange
        }
    } = _ref;
    return Object(inferno__WEBPACK_IMPORTED_MODULE_2__["createVNode"])(1, "div", _common_consts__WEBPACK_IMPORTED_MODULE_8__["PAGER_PAGE_SIZES_CLASS"], [isLargeDisplayMode && Object(inferno__WEBPACK_IMPORTED_MODULE_2__["createComponentVNode"])(2, _large__WEBPACK_IMPORTED_MODULE_5__["PageSizeLarge"], {
        pageSizes: normalizedPageSizes,
        pageSize: pageSize,
        pageSizeChange: pageSizeChange
    }), !isLargeDisplayMode && Object(inferno__WEBPACK_IMPORTED_MODULE_2__["createComponentVNode"])(2, _small__WEBPACK_IMPORTED_MODULE_4__["PageSizeSmall"], {
        parentRef: htmlRef,
        pageSizes: normalizedPageSizes,
        pageSize: pageSize,
        pageSizeChange: pageSizeChange
    })], 0, null, null, htmlRef)
};

function getAllText() {
    return _localization_message__WEBPACK_IMPORTED_MODULE_7__["default"].getFormatter("dxPager-pageSizesAllText")()
}
var PageSizeSelectorProps = {
    isLargeDisplayMode: true
};
var PageSizeSelectorPropsType = {
    get pageSize() {
        return _common_pager_props__WEBPACK_IMPORTED_MODULE_6__["InternalPagerProps"].pageSize
    },
    get pageSizes() {
        return _common_pager_props__WEBPACK_IMPORTED_MODULE_6__["InternalPagerProps"].pageSizes
    },
    get isLargeDisplayMode() {
        return PageSizeSelectorProps.isLargeDisplayMode
    }
};

class PageSizeSelector extends _devextreme_runtime_inferno__WEBPACK_IMPORTED_MODULE_3__["InfernoComponent"] {
    constructor(props) {
        super(props);
        this.state = {};
        this.htmlRef = Object(inferno__WEBPACK_IMPORTED_MODULE_2__["createRef"])();
        this.__getterCache = {};
        this.setRootElementRef = this.setRootElementRef.bind(this)
    }
    createEffects() {
        return [new _devextreme_runtime_inferno__WEBPACK_IMPORTED_MODULE_3__["InfernoEffect"](this.setRootElementRef, [])]
    }
    setRootElementRef() {
        var {
            rootElementRef: rootElementRef
        } = this.props;
        if (rootElementRef) {
            rootElementRef.current = this.htmlRef.current
        }
    }
    get normalizedPageSizes() {
        if (void 0 !== this.__getterCache.normalizedPageSizes) {
            return this.__getterCache.normalizedPageSizes
        }
        return this.__getterCache.normalizedPageSizes = (() => {
            var {
                pageSizes: pageSizes
            } = this.props;
            return pageSizes.map(p => "all" === p || 0 === p ? {
                text: getAllText(),
                value: 0
            } : {
                text: String(p),
                value: p
            })
        })()
    }
    get restAttributes() {
        var _this$props = this.props,
            restProps = Object(_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(_this$props, _excluded);
        return restProps
    }
    componentWillUpdate(nextProps, nextState, context) {
        super.componentWillUpdate();
        if (this.props.pageSizes !== nextProps.pageSizes) {
            this.__getterCache.normalizedPageSizes = void 0
        }
    }
    render() {
        var props = this.props;
        return viewFunction({
            props: Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__["default"])({}, props),
            htmlRef: this.htmlRef,
            normalizedPageSizes: this.normalizedPageSizes,
            restAttributes: this.restAttributes
        })
    }
}
PageSizeSelector.defaultProps = PageSizeSelectorPropsType;


/***/ }),

/***/ "./node_modules/devextreme/esm/renovation/ui/pager/page_size/small.js":
/*!****************************************************************************!*\
  !*** ./node_modules/devextreme/esm/renovation/ui/pager/page_size/small.js ***!
  \****************************************************************************/
/*! exports provided: viewFunction, PageSizeSmallProps, PageSizeSmall */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "viewFunction", function() { return viewFunction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PageSizeSmallProps", function() { return PageSizeSmallProps; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PageSizeSmall", function() { return PageSizeSmall; });
/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ "./node_modules/@babel/runtime/helpers/esm/extends.js");
/* harmony import */ var _babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/objectWithoutPropertiesLoose */ "./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js");
/* harmony import */ var inferno__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! inferno */ "./node_modules/inferno/index.esm.js");
/* harmony import */ var _devextreme_runtime_inferno__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @devextreme/runtime/inferno */ "./node_modules/@devextreme/runtime/esm/inferno/index.js");
/* harmony import */ var _editors_drop_down_editors_select_box__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../editors/drop_down_editors/select_box */ "./node_modules/devextreme/esm/renovation/ui/editors/drop_down_editors/select_box.js");
/* harmony import */ var _utils_calculate_values_fitted_width__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/calculate_values_fitted_width */ "./node_modules/devextreme/esm/renovation/ui/pager/utils/calculate_values_fitted_width.js");
/* harmony import */ var _utils_get_element_width__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/get_element_width */ "./node_modules/devextreme/esm/renovation/ui/pager/utils/get_element_width.js");
/* harmony import */ var _common_pager_props__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../common/pager_props */ "./node_modules/devextreme/esm/renovation/ui/pager/common/pager_props.js");
/**
 * DevExtreme (esm/renovation/ui/pager/page_size/small.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */


var _excluded = ["pageSize", "pageSizeChange", "pageSizes", "parentRef"];






var viewFunction = _ref => {
    var {
        props: {
            pageSize: pageSize,
            pageSizeChange: pageSizeChange,
            pageSizes: pageSizes
        },
        width: width
    } = _ref;
    return Object(inferno__WEBPACK_IMPORTED_MODULE_2__["createComponentVNode"])(2, _editors_drop_down_editors_select_box__WEBPACK_IMPORTED_MODULE_4__["SelectBox"], {
        displayExpr: "text",
        valueExpr: "value",
        dataSource: pageSizes,
        value: pageSize,
        valueChange: pageSizeChange,
        width: width
    })
};
var PageSizeSmallProps = {};
var PageSizeSmallPropsType = {
    get pageSize() {
        return _common_pager_props__WEBPACK_IMPORTED_MODULE_7__["InternalPagerProps"].pageSize
    }
};
class PageSizeSmall extends _devextreme_runtime_inferno__WEBPACK_IMPORTED_MODULE_3__["InfernoComponent"] {
    constructor(props) {
        super(props);
        this.state = {
            minWidth: 10
        };
        this.updateWidth = this.updateWidth.bind(this)
    }
    createEffects() {
        return [new _devextreme_runtime_inferno__WEBPACK_IMPORTED_MODULE_3__["InfernoEffect"](this.updateWidth, [this.props, this.state.minWidth, this.props.pageSize, this.props.pageSizeChange, this.props.pageSizes])]
    }
    updateEffects() {
        var _this$_effects$;
        null === (_this$_effects$ = this._effects[0]) || void 0 === _this$_effects$ ? void 0 : _this$_effects$.update([this.props, this.state.minWidth, this.props.pageSize, this.props.pageSizeChange, this.props.pageSizes])
    }
    updateWidth() {
        this.setState(__state_argument => ({
            minWidth: Object(_utils_get_element_width__WEBPACK_IMPORTED_MODULE_6__["getElementMinWidth"])(this.props.parentRef.current) || __state_argument.minWidth
        }))
    }
    get width() {
        return Object(_utils_calculate_values_fitted_width__WEBPACK_IMPORTED_MODULE_5__["calculateValuesFittedWidth"])(this.state.minWidth, this.props.pageSizes.map(p => p.value))
    }
    get restAttributes() {
        var _this$props = this.props,
            restProps = Object(_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(_this$props, _excluded);
        return restProps
    }
    render() {
        var props = this.props;
        return viewFunction({
            props: Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__["default"])({}, props),
            width: this.width,
            restAttributes: this.restAttributes
        })
    }
}
PageSizeSmall.defaultProps = PageSizeSmallPropsType;


/***/ }),

/***/ "./node_modules/devextreme/esm/renovation/ui/pager/pager.j.js":
/*!********************************************************************!*\
  !*** ./node_modules/devextreme/esm/renovation/ui/pager/pager.j.js ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Pager; });
/* harmony import */ var _core_component_registrator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/component_registrator */ "./node_modules/devextreme/esm/core/component_registrator.js");
/* harmony import */ var _component_wrapper_grid_pager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../component_wrapper/grid_pager */ "./node_modules/devextreme/esm/renovation/component_wrapper/grid_pager.js");
/* harmony import */ var _pager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./pager */ "./node_modules/devextreme/esm/renovation/ui/pager/pager.js");
/**
 * DevExtreme (esm/renovation/ui/pager/pager.j.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */



class Pager extends _component_wrapper_grid_pager__WEBPACK_IMPORTED_MODULE_1__["GridPagerWrapper"] {
    getProps() {
        var props = super.getProps();
        props.onKeyDown = this._wrapKeyDownHandler(props.onKeyDown);
        return props
    }
    get _propsInfo() {
        return {
            twoWay: [
                ["pageSize", "defaultPageSize", "pageSizeChange"],
                ["pageIndex", "defaultPageIndex", "pageIndexChange"]
            ],
            allowNull: [],
            elements: [],
            templates: [],
            props: ["defaultPageSize", "pageSizeChange", "defaultPageIndex", "pageIndexChange", "gridCompatibility", "className", "showInfo", "infoText", "lightModeEnabled", "displayMode", "maxPagesCount", "pageCount", "pagesCountText", "visible", "hasKnownLastPage", "pagesNavigatorVisible", "showPageSizes", "pageSizes", "rtlEnabled", "showNavigationButtons", "totalCount", "onKeyDown", "pageSize", "pageIndex"]
        }
    }
    get _viewComponent() {
        return _pager__WEBPACK_IMPORTED_MODULE_2__["Pager"]
    }
}
Object(_core_component_registrator__WEBPACK_IMPORTED_MODULE_0__["default"])("dxPager", Pager);


/***/ }),

/***/ "./node_modules/devextreme/esm/renovation/ui/pager/pager.js":
/*!******************************************************************!*\
  !*** ./node_modules/devextreme/esm/renovation/ui/pager/pager.js ***!
  \******************************************************************/
/*! exports provided: viewFunction, Pager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "viewFunction", function() { return viewFunction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Pager", function() { return Pager; });
/* harmony import */ var _babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/objectWithoutPropertiesLoose */ "./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js");
/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ "./node_modules/@babel/runtime/helpers/esm/extends.js");
/* harmony import */ var inferno__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! inferno */ "./node_modules/inferno/index.esm.js");
/* harmony import */ var _devextreme_runtime_inferno__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @devextreme/runtime/inferno */ "./node_modules/@devextreme/runtime/esm/inferno/index.js");
/* harmony import */ var _resizable_container__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./resizable_container */ "./node_modules/devextreme/esm/renovation/ui/pager/resizable_container.js");
/* harmony import */ var _common_pager_props__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./common/pager_props */ "./node_modules/devextreme/esm/renovation/ui/pager/common/pager_props.js");
/* harmony import */ var _content__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./content */ "./node_modules/devextreme/esm/renovation/ui/pager/content.js");
/* harmony import */ var _utils_combine_classes__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../utils/combine_classes */ "./node_modules/devextreme/esm/renovation/utils/combine_classes.js");
/**
 * DevExtreme (esm/renovation/ui/pager/pager.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */


var _excluded = ["className", "defaultPageIndex", "defaultPageSize", "displayMode", "gridCompatibility", "hasKnownLastPage", "infoText", "lightModeEnabled", "maxPagesCount", "onKeyDown", "pageCount", "pageIndex", "pageIndexChange", "pageSize", "pageSizeChange", "pageSizes", "pagesCountText", "pagesNavigatorVisible", "rtlEnabled", "showInfo", "showNavigationButtons", "showPageSizes", "totalCount", "visible"];






var viewFunction = _ref => {
    var {
        pagerProps: pagerProps,
        restAttributes: restAttributes
    } = _ref;
    return Object(inferno__WEBPACK_IMPORTED_MODULE_2__["normalizeProps"])(Object(inferno__WEBPACK_IMPORTED_MODULE_2__["createComponentVNode"])(2, _resizable_container__WEBPACK_IMPORTED_MODULE_4__["ResizableContainer"], Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__["default"])({
        contentTemplate: _content__WEBPACK_IMPORTED_MODULE_6__["PagerContent"],
        pagerProps: pagerProps
    }, restAttributes)))
};

class Pager extends _devextreme_runtime_inferno__WEBPACK_IMPORTED_MODULE_3__["InfernoWrapperComponent"] {
    constructor(props) {
        super(props);
        this.__getterCache = {};
        this.state = {
            pageSize: void 0 !== this.props.pageSize ? this.props.pageSize : this.props.defaultPageSize,
            pageIndex: void 0 !== this.props.pageIndex ? this.props.pageIndex : this.props.defaultPageIndex
        };
        this.pageIndexChange = this.pageIndexChange.bind(this);
        this.pageSizeChange = this.pageSizeChange.bind(this)
    }
    createEffects() {
        return [Object(_devextreme_runtime_inferno__WEBPACK_IMPORTED_MODULE_3__["createReRenderEffect"])()]
    }
    pageIndexChange(newPageIndex) {
        if (this.props.gridCompatibility) {
            var __newValue;
            this.setState(__state_argument => {
                __newValue = newPageIndex + 1;
                return {
                    pageIndex: __newValue
                }
            });
            this.props.pageIndexChange(__newValue)
        } else {
            var _newValue;
            this.setState(__state_argument => {
                _newValue = newPageIndex;
                return {
                    pageIndex: _newValue
                }
            });
            this.props.pageIndexChange(_newValue)
        }
    }
    get pageIndex() {
        if (this.props.gridCompatibility) {
            return (void 0 !== this.props.pageIndex ? this.props.pageIndex : this.state.pageIndex) - 1
        }
        return void 0 !== this.props.pageIndex ? this.props.pageIndex : this.state.pageIndex
    }
    pageSizeChange(newPageSize) {
        var __newValue;
        this.setState(__state_argument => {
            __newValue = newPageSize;
            return {
                pageSize: __newValue
            }
        });
        this.props.pageSizeChange(__newValue)
    }
    get className() {
        if (this.props.gridCompatibility) {
            return Object(_utils_combine_classes__WEBPACK_IMPORTED_MODULE_7__["combineClasses"])({
                "dx-datagrid-pager": true,
                ["".concat(this.props.className)]: !!this.props.className
            })
        }
        return this.props.className
    }
    get pagerProps() {
        if (void 0 !== this.__getterCache.pagerProps) {
            return this.__getterCache.pagerProps
        }
        return this.__getterCache.pagerProps = (() => Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__["default"])({}, Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__["default"])({}, this.props, {
            pageSize: void 0 !== this.props.pageSize ? this.props.pageSize : this.state.pageSize,
            pageIndex: void 0 !== this.props.pageIndex ? this.props.pageIndex : this.state.pageIndex
        }), {
            className: this.className,
            pageIndex: this.pageIndex,
            pageIndexChange: pageIndex => this.pageIndexChange(pageIndex),
            pageSizeChange: pageSize => this.pageSizeChange(pageSize)
        }))()
    }
    get restAttributes() {
        var _this$props$pageSize$ = Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__["default"])({}, this.props, {
                pageSize: void 0 !== this.props.pageSize ? this.props.pageSize : this.state.pageSize,
                pageIndex: void 0 !== this.props.pageIndex ? this.props.pageIndex : this.state.pageIndex
            }),
            restProps = Object(_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_0__["default"])(_this$props$pageSize$, _excluded);
        return restProps
    }
    componentWillUpdate(nextProps, nextState, context) {
        super.componentWillUpdate();
        if (this.props !== nextProps || this.props.gridCompatibility !== nextProps.gridCompatibility || this.props.className !== nextProps.className || this.state.pageIndex !== nextState.pageIndex || this.props.pageIndex !== nextProps.pageIndex || this.props.pageIndexChange !== nextProps.pageIndexChange || this.props.pageSizeChange !== nextProps.pageSizeChange) {
            this.__getterCache.pagerProps = void 0
        }
    }
    render() {
        var props = this.props;
        return viewFunction({
            props: Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__["default"])({}, props, {
                pageSize: void 0 !== this.props.pageSize ? this.props.pageSize : this.state.pageSize,
                pageIndex: void 0 !== this.props.pageIndex ? this.props.pageIndex : this.state.pageIndex
            }),
            pageIndexChange: this.pageIndexChange,
            pageIndex: this.pageIndex,
            pageSizeChange: this.pageSizeChange,
            className: this.className,
            pagerProps: this.pagerProps,
            restAttributes: this.restAttributes
        })
    }
}
Pager.defaultProps = _common_pager_props__WEBPACK_IMPORTED_MODULE_5__["PagerProps"];


/***/ }),

/***/ "./node_modules/devextreme/esm/renovation/ui/pager/pages/large.js":
/*!************************************************************************!*\
  !*** ./node_modules/devextreme/esm/renovation/ui/pager/pages/large.js ***!
  \************************************************************************/
/*! exports provided: viewFunction, PagesLarge */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "viewFunction", function() { return viewFunction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PagesLarge", function() { return PagesLarge; });
/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ "./node_modules/@babel/runtime/helpers/esm/extends.js");
/* harmony import */ var _babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/objectWithoutPropertiesLoose */ "./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js");
/* harmony import */ var inferno__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! inferno */ "./node_modules/inferno/index.esm.js");
/* harmony import */ var _devextreme_runtime_inferno__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @devextreme/runtime/inferno */ "./node_modules/@devextreme/runtime/esm/inferno/index.js");
/* harmony import */ var _page__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./page */ "./node_modules/devextreme/esm/renovation/ui/pager/pages/page.js");
/* harmony import */ var _common_pager_props__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../common/pager_props */ "./node_modules/devextreme/esm/renovation/ui/pager/common/pager_props.js");
/* harmony import */ var _common_config_context__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../common/config_context */ "./node_modules/devextreme/esm/renovation/common/config_context.js");
/**
 * DevExtreme (esm/renovation/ui/pager/pages/large.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */


var _excluded = ["pageIndexes"],
    _excluded2 = ["maxPagesCount", "pageCount", "pageIndex", "pageIndexChange"];






var PAGER_PAGE_SEPARATOR_CLASS = "dx-separator";
var viewFunction = _ref => {
    var {
        pages: pages
    } = _ref;
    var PagesMarkup = pages.map(_ref2 => {
        var {
            key: key,
            pageProps: pageProps
        } = _ref2;
        return pageProps ? Object(inferno__WEBPACK_IMPORTED_MODULE_2__["createComponentVNode"])(2, _page__WEBPACK_IMPORTED_MODULE_4__["Page"], {
            index: pageProps.index,
            selected: pageProps.selected,
            onClick: pageProps.onClick
        }, key) : Object(inferno__WEBPACK_IMPORTED_MODULE_2__["createVNode"])(1, "div", PAGER_PAGE_SEPARATOR_CLASS, ". . .", 16, null, key)
    });
    return Object(inferno__WEBPACK_IMPORTED_MODULE_2__["createFragment"])(PagesMarkup, 0)
};
var PAGES_LIMITER = 4;

function getDelimiterType(startIndex, slidingWindowSize, pageCount) {
    if (1 === startIndex) {
        return "high"
    }
    if (startIndex + slidingWindowSize === pageCount - 1) {
        return "low"
    }
    return "both"
}

function createPageIndexesBySlidingWindowIndexes(slidingWindowIndexes, pageCount, delimiter) {
    var pageIndexes = [];
    var indexesForReuse = [];
    switch (delimiter) {
        case "none":
            pageIndexes = [...slidingWindowIndexes];
            break;
        case "both":
            pageIndexes = [0, "low", ...slidingWindowIndexes, "high", pageCount - 1];
            indexesForReuse = slidingWindowIndexes.slice(1, -1);
            break;
        case "high":
            pageIndexes = [0, ...slidingWindowIndexes, "high", pageCount - 1];
            indexesForReuse = slidingWindowIndexes.slice(0, -1);
            break;
        case "low":
            pageIndexes = [0, "low", ...slidingWindowIndexes, pageCount - 1];
            indexesForReuse = slidingWindowIndexes.slice(1)
    }
    return {
        slidingWindowIndexes: slidingWindowIndexes,
        indexesForReuse: indexesForReuse,
        pageIndexes: pageIndexes
    }
}

function createPageIndexes(startIndex, slidingWindowSize, pageCount, delimiter) {
    var slidingWindowIndexes = [];
    for (var i = 0; i < slidingWindowSize; i += 1) {
        slidingWindowIndexes.push(i + startIndex)
    }
    return createPageIndexesBySlidingWindowIndexes(slidingWindowIndexes, pageCount, delimiter)
}
var PagesLargePropsType = {
    get pageIndex() {
        return _common_pager_props__WEBPACK_IMPORTED_MODULE_5__["InternalPagerProps"].pageIndex
    },
    get maxPagesCount() {
        return _common_pager_props__WEBPACK_IMPORTED_MODULE_5__["InternalPagerProps"].maxPagesCount
    },
    get pageCount() {
        return _common_pager_props__WEBPACK_IMPORTED_MODULE_5__["InternalPagerProps"].pageCount
    }
};
class PagesLarge extends _devextreme_runtime_inferno__WEBPACK_IMPORTED_MODULE_3__["BaseInfernoComponent"] {
    constructor(props) {
        super(props);
        this.state = {};
        this.canReuseSlidingWindow = this.canReuseSlidingWindow.bind(this);
        this.generatePageIndexes = this.generatePageIndexes.bind(this);
        this.isSlidingWindowMode = this.isSlidingWindowMode.bind(this);
        this.onPageClick = this.onPageClick.bind(this)
    }
    get config() {
        if ("ConfigContext" in this.context) {
            return this.context.ConfigContext
        }
        return _common_config_context__WEBPACK_IMPORTED_MODULE_6__["ConfigContext"]
    }
    get slidingWindowState() {
        var slidingWindowState = this.slidingWindowStateHolder;
        if (!slidingWindowState) {
            return {
                indexesForReuse: [],
                slidingWindowIndexes: []
            }
        }
        return slidingWindowState
    }
    canReuseSlidingWindow(currentPageCount, pageIndex) {
        var {
            indexesForReuse: indexesForReuse
        } = this.slidingWindowState;
        var currentPageNotExistInIndexes = !indexesForReuse.includes(currentPageCount);
        var pageIndexExistInIndexes = indexesForReuse.includes(pageIndex);
        return currentPageNotExistInIndexes && pageIndexExistInIndexes
    }
    generatePageIndexes() {
        var {
            pageCount: pageCount,
            pageIndex: pageIndex
        } = this.props;
        var startIndex = 0;
        var {
            slidingWindowIndexes: slidingWindowIndexes
        } = this.slidingWindowState;
        if (pageIndex === slidingWindowIndexes[0]) {
            startIndex = pageIndex - 1
        } else if (pageIndex === slidingWindowIndexes[slidingWindowIndexes.length - 1]) {
            startIndex = pageIndex + 2 - PAGES_LIMITER
        } else if (pageIndex < PAGES_LIMITER) {
            startIndex = 1
        } else if (pageIndex >= pageCount - PAGES_LIMITER) {
            startIndex = pageCount - PAGES_LIMITER - 1
        } else {
            startIndex = pageIndex - 1
        }
        var slidingWindowSize = PAGES_LIMITER;
        var delimiter = getDelimiterType(startIndex, slidingWindowSize, pageCount);
        var _createPageIndexes = createPageIndexes(startIndex, slidingWindowSize, pageCount, delimiter),
            {
                pageIndexes: pageIndexes
            } = _createPageIndexes,
            slidingWindowState = Object(_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(_createPageIndexes, _excluded);
        this.slidingWindowStateHolder = slidingWindowState;
        return pageIndexes
    }
    isSlidingWindowMode() {
        var {
            maxPagesCount: maxPagesCount,
            pageCount: pageCount
        } = this.props;
        return pageCount <= PAGES_LIMITER || pageCount <= maxPagesCount
    }
    onPageClick(pageIndex) {
        this.props.pageIndexChange(pageIndex)
    }
    get pageIndexes() {
        var {
            pageCount: pageCount
        } = this.props;
        if (this.isSlidingWindowMode()) {
            return createPageIndexes(0, pageCount, pageCount, "none").pageIndexes
        }
        if (this.canReuseSlidingWindow(pageCount, this.props.pageIndex)) {
            var {
                slidingWindowIndexes: slidingWindowIndexes
            } = this.slidingWindowState;
            var delimiter = getDelimiterType(slidingWindowIndexes[0], PAGES_LIMITER, pageCount);
            return createPageIndexesBySlidingWindowIndexes(slidingWindowIndexes, pageCount, delimiter).pageIndexes
        }
        return this.generatePageIndexes()
    }
    get pages() {
        var _this$config;
        var {
            pageIndex: pageIndex
        } = this.props;
        var createPage = index => {
            var pagerProps = "low" === index || "high" === index ? null : {
                index: index,
                onClick: () => this.onPageClick(index),
                selected: pageIndex === index
            };
            return {
                key: index.toString(),
                pageProps: pagerProps
            }
        };
        var rtlPageIndexes = null !== (_this$config = this.config) && void 0 !== _this$config && _this$config.rtlEnabled ? [...this.pageIndexes].reverse() : this.pageIndexes;
        return rtlPageIndexes.map(index => createPage(index))
    }
    get restAttributes() {
        var _this$props = this.props,
            restProps = Object(_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(_this$props, _excluded2);
        return restProps
    }
    render() {
        var props = this.props;
        return viewFunction({
            props: Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__["default"])({}, props),
            config: this.config,
            pageIndexes: this.pageIndexes,
            pages: this.pages,
            restAttributes: this.restAttributes
        })
    }
}
PagesLarge.defaultProps = PagesLargePropsType;


/***/ }),

/***/ "./node_modules/devextreme/esm/renovation/ui/pager/pages/page.js":
/*!***********************************************************************!*\
  !*** ./node_modules/devextreme/esm/renovation/ui/pager/pages/page.js ***!
  \***********************************************************************/
/*! exports provided: viewFunction, PageProps, Page */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "viewFunction", function() { return viewFunction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PageProps", function() { return PageProps; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Page", function() { return Page; });
/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ "./node_modules/@babel/runtime/helpers/esm/extends.js");
/* harmony import */ var _babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/objectWithoutPropertiesLoose */ "./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js");
/* harmony import */ var inferno__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! inferno */ "./node_modules/inferno/index.esm.js");
/* harmony import */ var _devextreme_runtime_inferno__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @devextreme/runtime/inferno */ "./node_modules/@devextreme/runtime/esm/inferno/index.js");
/* harmony import */ var _common_light_button__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../common/light_button */ "./node_modules/devextreme/esm/renovation/ui/pager/common/light_button.js");
/* harmony import */ var _common_consts__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../common/consts */ "./node_modules/devextreme/esm/renovation/ui/pager/common/consts.js");
/* harmony import */ var _utils_combine_classes__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../utils/combine_classes */ "./node_modules/devextreme/esm/renovation/utils/combine_classes.js");
/**
 * DevExtreme (esm/renovation/ui/pager/pages/page.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */


var _excluded = ["className", "index", "onClick", "selected"];





var viewFunction = _ref => {
    var {
        className: className,
        label: label,
        props: {
            onClick: onClick
        },
        value: value
    } = _ref;
    return Object(inferno__WEBPACK_IMPORTED_MODULE_2__["createComponentVNode"])(2, _common_light_button__WEBPACK_IMPORTED_MODULE_4__["LightButton"], {
        className: className,
        label: label,
        onClick: onClick,
        children: value
    })
};
var PageProps = {
    index: 0,
    selected: false,
    className: _common_consts__WEBPACK_IMPORTED_MODULE_5__["PAGER_PAGE_CLASS"]
};
class Page extends _devextreme_runtime_inferno__WEBPACK_IMPORTED_MODULE_3__["BaseInfernoComponent"] {
    constructor(props) {
        super(props);
        this.state = {}
    }
    get label() {
        return "Page ".concat(this.value)
    }
    get value() {
        return this.props.index + 1
    }
    get className() {
        var {
            selected: selected
        } = this.props;
        return Object(_utils_combine_classes__WEBPACK_IMPORTED_MODULE_6__["combineClasses"])({
            ["".concat(this.props.className)]: !!this.props.className,
            [_common_consts__WEBPACK_IMPORTED_MODULE_5__["PAGER_SELECTION_CLASS"]]: !!selected
        })
    }
    get restAttributes() {
        var _this$props = this.props,
            restProps = Object(_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(_this$props, _excluded);
        return restProps
    }
    render() {
        var props = this.props;
        return viewFunction({
            props: Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__["default"])({}, props),
            label: this.label,
            value: this.value,
            className: this.className,
            restAttributes: this.restAttributes
        })
    }
}
Page.defaultProps = PageProps;


/***/ }),

/***/ "./node_modules/devextreme/esm/renovation/ui/pager/pages/page_index_selector.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/devextreme/esm/renovation/ui/pager/pages/page_index_selector.js ***!
  \**************************************************************************************/
/*! exports provided: PAGER_BUTTON_DISABLE_CLASS, viewFunction, PageIndexSelectorProps, PageIndexSelector */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PAGER_BUTTON_DISABLE_CLASS", function() { return PAGER_BUTTON_DISABLE_CLASS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "viewFunction", function() { return viewFunction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PageIndexSelectorProps", function() { return PageIndexSelectorProps; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PageIndexSelector", function() { return PageIndexSelector; });
/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ "./node_modules/@babel/runtime/helpers/esm/extends.js");
/* harmony import */ var _babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/objectWithoutPropertiesLoose */ "./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js");
/* harmony import */ var inferno__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! inferno */ "./node_modules/inferno/index.esm.js");
/* harmony import */ var _devextreme_runtime_inferno__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @devextreme/runtime/inferno */ "./node_modules/@devextreme/runtime/esm/inferno/index.js");
/* harmony import */ var _common_light_button__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../common/light_button */ "./node_modules/devextreme/esm/renovation/ui/pager/common/light_button.js");
/* harmony import */ var _large__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./large */ "./node_modules/devextreme/esm/renovation/ui/pager/pages/large.js");
/* harmony import */ var _small__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./small */ "./node_modules/devextreme/esm/renovation/ui/pager/pages/small.js");
/* harmony import */ var _common_pager_props__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../common/pager_props */ "./node_modules/devextreme/esm/renovation/ui/pager/common/pager_props.js");
/* harmony import */ var _common_config_context__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../common/config_context */ "./node_modules/devextreme/esm/renovation/common/config_context.js");
/**
 * DevExtreme (esm/renovation/ui/pager/pages/page_index_selector.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */


var _excluded = ["hasKnownLastPage", "isLargeDisplayMode", "maxPagesCount", "pageCount", "pageIndex", "pageIndexChange", "pagesCountText", "showNavigationButtons", "totalCount"];








var PAGER_NAVIGATE_BUTTON = "dx-navigate-button";
var PAGER_PREV_BUTTON_CLASS = "dx-prev-button";
var PAGER_NEXT_BUTTON_CLASS = "dx-next-button";
var PAGER_BUTTON_DISABLE_CLASS = "dx-button-disable";
var nextButtonClassName = "".concat(PAGER_NAVIGATE_BUTTON, " ").concat(PAGER_NEXT_BUTTON_CLASS);
var prevButtonClassName = "".concat(PAGER_NAVIGATE_BUTTON, " ").concat(PAGER_PREV_BUTTON_CLASS);
var nextButtonDisabledClassName = "".concat(PAGER_BUTTON_DISABLE_CLASS, " ").concat(PAGER_NAVIGATE_BUTTON, " ").concat(PAGER_NEXT_BUTTON_CLASS);
var prevButtonDisabledClassName = "".concat(PAGER_BUTTON_DISABLE_CLASS, " ").concat(PAGER_NAVIGATE_BUTTON, " ").concat(PAGER_PREV_BUTTON_CLASS);
var viewFunction = _ref => {
    var {
        navigateToNextPage: navigateToNextPage,
        navigateToPrevPage: navigateToPrevPage,
        nextClassName: nextClassName,
        pageIndexChange: pageIndexChange,
        prevClassName: prevClassName,
        props: {
            isLargeDisplayMode: isLargeDisplayMode,
            maxPagesCount: maxPagesCount,
            pageCount: pageCount,
            pageIndex: pageIndex,
            pagesCountText: pagesCountText
        },
        renderNextButton: renderNextButton,
        renderPrevButton: renderPrevButton
    } = _ref;
    return Object(inferno__WEBPACK_IMPORTED_MODULE_2__["createFragment"])([renderPrevButton && Object(inferno__WEBPACK_IMPORTED_MODULE_2__["createComponentVNode"])(2, _common_light_button__WEBPACK_IMPORTED_MODULE_4__["LightButton"], {
        className: prevClassName,
        label: "Previous page",
        onClick: navigateToPrevPage
    }), isLargeDisplayMode && Object(inferno__WEBPACK_IMPORTED_MODULE_2__["createComponentVNode"])(2, _large__WEBPACK_IMPORTED_MODULE_5__["PagesLarge"], {
        maxPagesCount: maxPagesCount,
        pageCount: pageCount,
        pageIndex: pageIndex,
        pageIndexChange: pageIndexChange
    }), !isLargeDisplayMode && Object(inferno__WEBPACK_IMPORTED_MODULE_2__["createComponentVNode"])(2, _small__WEBPACK_IMPORTED_MODULE_6__["PagesSmall"], {
        pageCount: pageCount,
        pageIndex: pageIndex,
        pageIndexChange: pageIndexChange,
        pagesCountText: pagesCountText
    }), renderNextButton && Object(inferno__WEBPACK_IMPORTED_MODULE_2__["createComponentVNode"])(2, _common_light_button__WEBPACK_IMPORTED_MODULE_4__["LightButton"], {
        className: nextClassName,
        label: "Next page",
        onClick: navigateToNextPage
    })], 0)
};

function getIncrement(direction) {
    return "next" === direction ? 1 : -1
}
var PageIndexSelectorProps = {
    isLargeDisplayMode: true
};
var PageIndexSelectorPropsType = {
    get pageIndex() {
        return _common_pager_props__WEBPACK_IMPORTED_MODULE_7__["InternalPagerProps"].pageIndex
    },
    get maxPagesCount() {
        return _common_pager_props__WEBPACK_IMPORTED_MODULE_7__["InternalPagerProps"].maxPagesCount
    },
    get pageCount() {
        return _common_pager_props__WEBPACK_IMPORTED_MODULE_7__["InternalPagerProps"].pageCount
    },
    get hasKnownLastPage() {
        return _common_pager_props__WEBPACK_IMPORTED_MODULE_7__["InternalPagerProps"].hasKnownLastPage
    },
    get showNavigationButtons() {
        return _common_pager_props__WEBPACK_IMPORTED_MODULE_7__["InternalPagerProps"].showNavigationButtons
    },
    get totalCount() {
        return _common_pager_props__WEBPACK_IMPORTED_MODULE_7__["InternalPagerProps"].totalCount
    },
    get isLargeDisplayMode() {
        return PageIndexSelectorProps.isLargeDisplayMode
    }
};
class PageIndexSelector extends _devextreme_runtime_inferno__WEBPACK_IMPORTED_MODULE_3__["BaseInfernoComponent"] {
    constructor(props) {
        super(props);
        this.state = {};
        this.pageIndexChange = this.pageIndexChange.bind(this);
        this.navigateToNextPage = this.navigateToNextPage.bind(this);
        this.navigateToPrevPage = this.navigateToPrevPage.bind(this);
        this.getNextDirection = this.getNextDirection.bind(this);
        this.getPrevDirection = this.getPrevDirection.bind(this);
        this.canNavigateToPage = this.canNavigateToPage.bind(this);
        this.getNextPageIndex = this.getNextPageIndex.bind(this);
        this.canNavigateTo = this.canNavigateTo.bind(this);
        this.navigateToPage = this.navigateToPage.bind(this)
    }
    get config() {
        if ("ConfigContext" in this.context) {
            return this.context.ConfigContext
        }
        return _common_config_context__WEBPACK_IMPORTED_MODULE_8__["ConfigContext"]
    }
    pageIndexChange(pageIndex) {
        if (this.canNavigateToPage(pageIndex)) {
            this.props.pageIndexChange(pageIndex)
        }
    }
    navigateToNextPage() {
        this.navigateToPage(this.getNextDirection())
    }
    navigateToPrevPage() {
        this.navigateToPage(this.getPrevDirection())
    }
    getNextDirection() {
        var _this$config;
        return !(null !== (_this$config = this.config) && void 0 !== _this$config && _this$config.rtlEnabled) ? "next" : "prev"
    }
    getPrevDirection() {
        var _this$config2;
        return !(null !== (_this$config2 = this.config) && void 0 !== _this$config2 && _this$config2.rtlEnabled) ? "prev" : "next"
    }
    canNavigateToPage(pageIndex) {
        if (!this.props.hasKnownLastPage) {
            return pageIndex >= 0
        }
        return pageIndex >= 0 && pageIndex <= this.props.pageCount - 1
    }
    getNextPageIndex(direction) {
        return this.props.pageIndex + getIncrement(direction)
    }
    canNavigateTo(direction) {
        return this.canNavigateToPage(this.getNextPageIndex(direction))
    }
    navigateToPage(direction) {
        this.pageIndexChange(this.getNextPageIndex(direction))
    }
    get renderPrevButton() {
        var {
            isLargeDisplayMode: isLargeDisplayMode,
            showNavigationButtons: showNavigationButtons
        } = this.props;
        return !isLargeDisplayMode || showNavigationButtons
    }
    get renderNextButton() {
        return this.renderPrevButton || !this.props.hasKnownLastPage
    }
    get nextClassName() {
        var direction = this.getNextDirection();
        var canNavigate = this.canNavigateTo(direction);
        return canNavigate ? nextButtonClassName : nextButtonDisabledClassName
    }
    get prevClassName() {
        var direction = this.getPrevDirection();
        var canNavigate = this.canNavigateTo(direction);
        return canNavigate ? prevButtonClassName : prevButtonDisabledClassName
    }
    get restAttributes() {
        var _this$props = this.props,
            restProps = Object(_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(_this$props, _excluded);
        return restProps
    }
    render() {
        var props = this.props;
        return viewFunction({
            props: Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__["default"])({}, props),
            config: this.config,
            pageIndexChange: this.pageIndexChange,
            navigateToNextPage: this.navigateToNextPage,
            navigateToPrevPage: this.navigateToPrevPage,
            renderPrevButton: this.renderPrevButton,
            renderNextButton: this.renderNextButton,
            nextClassName: this.nextClassName,
            prevClassName: this.prevClassName,
            restAttributes: this.restAttributes
        })
    }
}
PageIndexSelector.defaultProps = PageIndexSelectorPropsType;


/***/ }),

/***/ "./node_modules/devextreme/esm/renovation/ui/pager/pages/small.js":
/*!************************************************************************!*\
  !*** ./node_modules/devextreme/esm/renovation/ui/pager/pages/small.js ***!
  \************************************************************************/
/*! exports provided: viewFunction, PagesSmall */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "viewFunction", function() { return viewFunction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PagesSmall", function() { return PagesSmall; });
/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ "./node_modules/@babel/runtime/helpers/esm/extends.js");
/* harmony import */ var _babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/objectWithoutPropertiesLoose */ "./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js");
/* harmony import */ var inferno__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! inferno */ "./node_modules/inferno/index.esm.js");
/* harmony import */ var _devextreme_runtime_inferno__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @devextreme/runtime/inferno */ "./node_modules/@devextreme/runtime/esm/inferno/index.js");
/* harmony import */ var _page__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./page */ "./node_modules/devextreme/esm/renovation/ui/pager/pages/page.js");
/* harmony import */ var _info__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../info */ "./node_modules/devextreme/esm/renovation/ui/pager/info.js");
/* harmony import */ var _editors_number_box__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../editors/number_box */ "./node_modules/devextreme/esm/renovation/ui/editors/number_box.js");
/* harmony import */ var _localization_message__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../localization/message */ "./node_modules/devextreme/esm/localization/message.js");
/* harmony import */ var _utils_calculate_values_fitted_width__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/calculate_values_fitted_width */ "./node_modules/devextreme/esm/renovation/ui/pager/utils/calculate_values_fitted_width.js");
/* harmony import */ var _utils_get_element_width__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utils/get_element_width */ "./node_modules/devextreme/esm/renovation/ui/pager/utils/get_element_width.js");
/* harmony import */ var _common_pager_props__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../common/pager_props */ "./node_modules/devextreme/esm/renovation/ui/pager/common/pager_props.js");
/**
 * DevExtreme (esm/renovation/ui/pager/pages/small.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */


var _excluded = ["pageCount", "pageIndex", "pageIndexChange", "pagesCountText"];









var PAGER_INFO_TEXT_CLASS = "".concat(_info__WEBPACK_IMPORTED_MODULE_5__["PAGER_INFO_CLASS"], "  dx-info-text");
var PAGER_PAGE_INDEX_CLASS = "dx-page-index";
var LIGHT_PAGES_CLASS = "dx-light-pages";
var PAGER_PAGES_COUNT_CLASS = "dx-pages-count";
var viewFunction = _ref => {
    var {
        pageIndexRef: pageIndexRef,
        pagesCountText: pagesCountText,
        props: {
            pageCount: pageCount
        },
        selectLastPageIndex: selectLastPageIndex,
        value: value,
        valueChange: valueChange,
        width: width
    } = _ref;
    return Object(inferno__WEBPACK_IMPORTED_MODULE_2__["createVNode"])(1, "div", LIGHT_PAGES_CLASS, [Object(inferno__WEBPACK_IMPORTED_MODULE_2__["createComponentVNode"])(2, _editors_number_box__WEBPACK_IMPORTED_MODULE_6__["NumberBox"], {
        className: PAGER_PAGE_INDEX_CLASS,
        min: 1,
        max: pageCount,
        width: width,
        value: value,
        valueChange: valueChange
    }), Object(inferno__WEBPACK_IMPORTED_MODULE_2__["createVNode"])(1, "span", PAGER_INFO_TEXT_CLASS, pagesCountText, 0), Object(inferno__WEBPACK_IMPORTED_MODULE_2__["createComponentVNode"])(2, _page__WEBPACK_IMPORTED_MODULE_4__["Page"], {
        className: PAGER_PAGES_COUNT_CLASS,
        selected: false,
        index: pageCount - 1,
        onClick: selectLastPageIndex
    })], 4, null, null, pageIndexRef)
};
var PagerSmallProps = {
    get pageIndex() {
        return _common_pager_props__WEBPACK_IMPORTED_MODULE_10__["InternalPagerProps"].pageIndex
    },
    get pageCount() {
        return _common_pager_props__WEBPACK_IMPORTED_MODULE_10__["InternalPagerProps"].pageCount
    }
};

class PagesSmall extends _devextreme_runtime_inferno__WEBPACK_IMPORTED_MODULE_3__["InfernoComponent"] {
    constructor(props) {
        super(props);
        this.pageIndexRef = Object(inferno__WEBPACK_IMPORTED_MODULE_2__["createRef"])();
        this.state = {
            minWidth: 10
        };
        this.updateWidth = this.updateWidth.bind(this);
        this.selectLastPageIndex = this.selectLastPageIndex.bind(this);
        this.valueChange = this.valueChange.bind(this)
    }
    createEffects() {
        return [new _devextreme_runtime_inferno__WEBPACK_IMPORTED_MODULE_3__["InfernoEffect"](this.updateWidth, [this.state.minWidth])]
    }
    updateEffects() {
        var _this$_effects$;
        null === (_this$_effects$ = this._effects[0]) || void 0 === _this$_effects$ ? void 0 : _this$_effects$.update([this.state.minWidth])
    }
    updateWidth() {
        var _this$pageIndexRef$cu;
        var el = null === (_this$pageIndexRef$cu = this.pageIndexRef.current) || void 0 === _this$pageIndexRef$cu ? void 0 : _this$pageIndexRef$cu.querySelector(".".concat(PAGER_PAGE_INDEX_CLASS));
        this.setState(__state_argument => ({
            minWidth: el && Object(_utils_get_element_width__WEBPACK_IMPORTED_MODULE_9__["getElementMinWidth"])(el) || __state_argument.minWidth
        }))
    }
    get value() {
        return this.props.pageIndex + 1
    }
    get width() {
        var {
            pageCount: pageCount
        } = this.props;
        return Object(_utils_calculate_values_fitted_width__WEBPACK_IMPORTED_MODULE_8__["calculateValuesFittedWidth"])(this.state.minWidth, [pageCount])
    }
    get pagesCountText() {
        var _this$props$pagesCoun;
        return (null !== (_this$props$pagesCoun = this.props.pagesCountText) && void 0 !== _this$props$pagesCoun ? _this$props$pagesCoun : "") || _localization_message__WEBPACK_IMPORTED_MODULE_7__["default"].getFormatter("dxPager-pagesCountText")()
    }
    selectLastPageIndex() {
        this.props.pageIndexChange(this.props.pageCount - 1)
    }
    valueChange(value) {
        this.props.pageIndexChange(value - 1)
    }
    get restAttributes() {
        var _this$props = this.props,
            restProps = Object(_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(_this$props, _excluded);
        return restProps
    }
    render() {
        var props = this.props;
        return viewFunction({
            props: Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__["default"])({}, props),
            pageIndexRef: this.pageIndexRef,
            value: this.value,
            width: this.width,
            pagesCountText: this.pagesCountText,
            selectLastPageIndex: this.selectLastPageIndex,
            valueChange: this.valueChange,
            restAttributes: this.restAttributes
        })
    }
}
PagesSmall.defaultProps = PagerSmallProps;


/***/ }),

/***/ "./node_modules/devextreme/esm/renovation/ui/pager/resizable_container.js":
/*!********************************************************************************!*\
  !*** ./node_modules/devextreme/esm/renovation/ui/pager/resizable_container.js ***!
  \********************************************************************************/
/*! exports provided: viewFunction, calculateAdaptivityProps, ResizableContainerProps, ResizableContainer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "viewFunction", function() { return viewFunction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "calculateAdaptivityProps", function() { return calculateAdaptivityProps; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ResizableContainerProps", function() { return ResizableContainerProps; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ResizableContainer", function() { return ResizableContainer; });
/* harmony import */ var _babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/objectWithoutPropertiesLoose */ "./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js");
/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ "./node_modules/@babel/runtime/helpers/esm/extends.js");
/* harmony import */ var inferno__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! inferno */ "./node_modules/inferno/index.esm.js");
/* harmony import */ var _devextreme_runtime_inferno__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @devextreme/runtime/inferno */ "./node_modules/@devextreme/runtime/esm/inferno/index.js");
/* harmony import */ var _core_utils_resize_callbacks__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../core/utils/resize_callbacks */ "./node_modules/devextreme/esm/core/utils/resize_callbacks.js");
/* harmony import */ var _utils_get_element_width__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/get_element_width */ "./node_modules/devextreme/esm/renovation/ui/pager/utils/get_element_width.js");
/* harmony import */ var _core_utils_type__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../core/utils/type */ "./node_modules/devextreme/esm/core/utils/type.js");
/**
 * DevExtreme (esm/renovation/ui/pager/resizable_container.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */


var _excluded = ["contentTemplate", "pagerProps"];





var viewFunction = _ref => {
    var {
        contentAttributes: contentAttributes,
        infoTextRef: infoTextRef,
        infoTextVisible: infoTextVisible,
        isLargeDisplayMode: isLargeDisplayMode,
        pageSizesRef: pageSizesRef,
        pagesRef: pagesRef,
        parentRef: parentRef,
        props: {
            contentTemplate: Content
        }
    } = _ref;
    return Content(Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__["default"])({
        rootElementRef: parentRef,
        pageSizesRef: pageSizesRef,
        infoTextRef: infoTextRef,
        pagesRef: pagesRef,
        infoTextVisible: infoTextVisible,
        isLargeDisplayMode: isLargeDisplayMode
    }, contentAttributes))
};
function calculateAdaptivityProps(_ref2) {
    var {
        info: infoWidth,
        pageSizes: pageSizesWidth,
        pages: pagesWidth,
        parent: parentWidth
    } = _ref2;
    var minimalWidth = pageSizesWidth + pagesWidth + infoWidth;
    var infoTextVisible = parentWidth - minimalWidth > 0;
    var isLargeDisplayMode = parentWidth - (pageSizesWidth + pagesWidth) > 0;
    return {
        infoTextVisible: infoTextVisible,
        isLargeDisplayMode: isLargeDisplayMode
    }
}

function getElementsWidth(_ref3) {
    var {
        info: info,
        pageSizes: pageSizes,
        pages: pages,
        parent: parent
    } = _ref3;
    var parentWidth = Object(_utils_get_element_width__WEBPACK_IMPORTED_MODULE_5__["getElementWidth"])(parent);
    var pageSizesWidth = Object(_utils_get_element_width__WEBPACK_IMPORTED_MODULE_5__["getElementWidth"])(pageSizes);
    var infoWidth = Object(_utils_get_element_width__WEBPACK_IMPORTED_MODULE_5__["getElementWidth"])(info);
    var pagesHtmlWidth = Object(_utils_get_element_width__WEBPACK_IMPORTED_MODULE_5__["getElementWidth"])(pages);
    return {
        parent: parentWidth,
        pageSizes: pageSizesWidth,
        info: infoWidth + Object(_utils_get_element_width__WEBPACK_IMPORTED_MODULE_5__["getElementStyle"])("marginLeft", info) + Object(_utils_get_element_width__WEBPACK_IMPORTED_MODULE_5__["getElementStyle"])("marginRight", info),
        pages: pagesHtmlWidth
    }
}
var ResizableContainerProps = {};

var getTemplate = TemplateProp => TemplateProp && (TemplateProp.defaultProps ? props => Object(inferno__WEBPACK_IMPORTED_MODULE_2__["normalizeProps"])(Object(inferno__WEBPACK_IMPORTED_MODULE_2__["createComponentVNode"])(2, TemplateProp, Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__["default"])({}, props))) : TemplateProp);
class ResizableContainer extends _devextreme_runtime_inferno__WEBPACK_IMPORTED_MODULE_3__["InfernoComponent"] {
    constructor(props) {
        super(props);
        this.parentRef = Object(inferno__WEBPACK_IMPORTED_MODULE_2__["createRef"])();
        this.pageSizesRef = Object(inferno__WEBPACK_IMPORTED_MODULE_2__["createRef"])();
        this.infoTextRef = Object(inferno__WEBPACK_IMPORTED_MODULE_2__["createRef"])();
        this.pagesRef = Object(inferno__WEBPACK_IMPORTED_MODULE_2__["createRef"])();
        this.state = {
            infoTextVisible: true,
            isLargeDisplayMode: true
        };
        this.subscribeToResize = this.subscribeToResize.bind(this);
        this.effectUpdateChildProps = this.effectUpdateChildProps.bind(this);
        this.updateAdaptivityProps = this.updateAdaptivityProps.bind(this)
    }
    createEffects() {
        return [new _devextreme_runtime_inferno__WEBPACK_IMPORTED_MODULE_3__["InfernoEffect"](this.subscribeToResize, [this.state.infoTextVisible, this.state.isLargeDisplayMode]), new _devextreme_runtime_inferno__WEBPACK_IMPORTED_MODULE_3__["InfernoEffect"](this.effectUpdateChildProps, [this.props, this.state.infoTextVisible, this.state.isLargeDisplayMode, this.props.pagerProps, this.props.contentTemplate])]
    }
    updateEffects() {
        var _this$_effects$, _this$_effects$2;
        null === (_this$_effects$ = this._effects[0]) || void 0 === _this$_effects$ ? void 0 : _this$_effects$.update([this.state.infoTextVisible, this.state.isLargeDisplayMode]);
        null === (_this$_effects$2 = this._effects[1]) || void 0 === _this$_effects$2 ? void 0 : _this$_effects$2.update([this.props, this.state.infoTextVisible, this.state.isLargeDisplayMode, this.props.pagerProps, this.props.contentTemplate])
    }
    subscribeToResize() {
        var callback = () => {
            this.parentWidth > 0 && this.updateAdaptivityProps()
        };
        _core_utils_resize_callbacks__WEBPACK_IMPORTED_MODULE_4__["default"].add(callback);
        return () => {
            _core_utils_resize_callbacks__WEBPACK_IMPORTED_MODULE_4__["default"].remove(callback)
        }
    }
    effectUpdateChildProps() {
        if (this.parentWidth > 0) {
            this.updateAdaptivityProps()
        }
    }
    get contentAttributes() {
        var {
            className: className,
            displayMode: displayMode,
            gridCompatibility: gridCompatibility,
            hasKnownLastPage: hasKnownLastPage,
            infoText: infoText,
            lightModeEnabled: lightModeEnabled,
            maxPagesCount: maxPagesCount,
            onKeyDown: onKeyDown,
            pageCount: pageCount,
            pageIndex: pageIndex,
            pageIndexChange: pageIndexChange,
            pageSize: pageSize,
            pageSizeChange: pageSizeChange,
            pageSizes: pageSizes,
            pagesCountText: pagesCountText,
            pagesNavigatorVisible: pagesNavigatorVisible,
            rtlEnabled: rtlEnabled,
            showInfo: showInfo,
            showNavigationButtons: showNavigationButtons,
            showPageSizes: showPageSizes,
            totalCount: totalCount,
            visible: visible
        } = this.props.pagerProps;
        return Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__["default"])({}, this.restAttributes, {
            pageSize: pageSize,
            pageIndex: pageIndex,
            pageIndexChange: pageIndexChange,
            pageSizeChange: pageSizeChange,
            gridCompatibility: gridCompatibility,
            className: className,
            showInfo: showInfo,
            infoText: infoText,
            lightModeEnabled: lightModeEnabled,
            displayMode: displayMode,
            maxPagesCount: maxPagesCount,
            pageCount: pageCount,
            pagesCountText: pagesCountText,
            visible: visible,
            hasKnownLastPage: hasKnownLastPage,
            pagesNavigatorVisible: pagesNavigatorVisible,
            showPageSizes: showPageSizes,
            pageSizes: pageSizes,
            rtlEnabled: rtlEnabled,
            showNavigationButtons: showNavigationButtons,
            totalCount: totalCount,
            onKeyDown: onKeyDown
        })
    }
    get parentWidth() {
        return this.parentRef.current ? Object(_utils_get_element_width__WEBPACK_IMPORTED_MODULE_5__["getElementWidth"])(this.parentRef.current) : 0
    }
    updateAdaptivityProps() {
        var currentElementsWidth = getElementsWidth({
            parent: this.parentRef.current,
            pageSizes: this.pageSizesRef.current,
            info: this.infoTextRef.current,
            pages: this.pagesRef.current
        });
        if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isDefined"])(this.actualAdaptivityProps) && (this.actualAdaptivityProps.infoTextVisible !== this.state.infoTextVisible || this.actualAdaptivityProps.isLargeDisplayMode !== this.state.isLargeDisplayMode)) {
            return
        }
        var isEmpty = !Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isDefined"])(this.elementsWidth);
        if (isEmpty) {
            this.elementsWidth = {}
        }
        if (isEmpty || this.state.isLargeDisplayMode) {
            this.elementsWidth.pageSizes = currentElementsWidth.pageSizes;
            this.elementsWidth.pages = currentElementsWidth.pages
        }
        if (isEmpty || this.state.infoTextVisible) {
            this.elementsWidth.info = currentElementsWidth.info
        }
        this.actualAdaptivityProps = calculateAdaptivityProps(Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__["default"])({
            parent: currentElementsWidth.parent
        }, this.elementsWidth));
        this.setState(__state_argument => ({
            infoTextVisible: this.actualAdaptivityProps.infoTextVisible
        }));
        this.setState(__state_argument => ({
            isLargeDisplayMode: this.actualAdaptivityProps.isLargeDisplayMode
        }))
    }
    get restAttributes() {
        var _this$props = this.props,
            restProps = Object(_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_0__["default"])(_this$props, _excluded);
        return restProps
    }
    render() {
        var props = this.props;
        return viewFunction({
            props: Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__["default"])({}, props, {
                contentTemplate: getTemplate(props.contentTemplate)
            }),
            infoTextVisible: this.state.infoTextVisible,
            isLargeDisplayMode: this.state.isLargeDisplayMode,
            parentRef: this.parentRef,
            pageSizesRef: this.pageSizesRef,
            infoTextRef: this.infoTextRef,
            pagesRef: this.pagesRef,
            contentAttributes: this.contentAttributes,
            parentWidth: this.parentWidth,
            updateAdaptivityProps: this.updateAdaptivityProps,
            restAttributes: this.restAttributes
        })
    }
}
ResizableContainer.defaultProps = ResizableContainerProps;


/***/ }),

/***/ "./node_modules/devextreme/esm/renovation/ui/pager/utils/calculate_values_fitted_width.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/devextreme/esm/renovation/ui/pager/utils/calculate_values_fitted_width.js ***!
  \************************************************************************************************/
/*! exports provided: oneDigitWidth, calculateValuesFittedWidth */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "oneDigitWidth", function() { return oneDigitWidth; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "calculateValuesFittedWidth", function() { return calculateValuesFittedWidth; });
/**
 * DevExtreme (esm/renovation/ui/pager/utils/calculate_values_fitted_width.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
var oneDigitWidth = 10;
function calculateValuesFittedWidth(minWidth, values) {
    return minWidth + oneDigitWidth * Math.max(...values).toString().length
}


/***/ }),

/***/ "./node_modules/devextreme/esm/renovation/ui/pager/utils/get_element_width.js":
/*!************************************************************************************!*\
  !*** ./node_modules/devextreme/esm/renovation/ui/pager/utils/get_element_width.js ***!
  \************************************************************************************/
/*! exports provided: getElementStyle, getElementWidth, getElementMinWidth */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getElementStyle", function() { return getElementStyle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getElementWidth", function() { return getElementWidth; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getElementMinWidth", function() { return getElementMinWidth; });
/* harmony import */ var _utils_get_computed_style__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/get_computed_style */ "./node_modules/devextreme/esm/renovation/utils/get_computed_style.js");
/* harmony import */ var _utils_type_conversion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utils/type_conversion */ "./node_modules/devextreme/esm/renovation/utils/type_conversion.js");
/**
 * DevExtreme (esm/renovation/ui/pager/utils/get_element_width.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */


function getElementStyle(name, element) {
    var _getElementComputedSt;
    var computedStyle = null !== (_getElementComputedSt = Object(_utils_get_computed_style__WEBPACK_IMPORTED_MODULE_0__["default"])(element)) && void 0 !== _getElementComputedSt ? _getElementComputedSt : {};
    return Object(_utils_type_conversion__WEBPACK_IMPORTED_MODULE_1__["toNumber"])(computedStyle[name])
}
function getElementWidth(element) {
    return getElementStyle("width", element)
}
function getElementMinWidth(element) {
    return getElementStyle("minWidth", element)
}


/***/ }),

/***/ "./node_modules/devextreme/esm/renovation/utils/type_conversion.js":
/*!*************************************************************************!*\
  !*** ./node_modules/devextreme/esm/renovation/utils/type_conversion.js ***!
  \*************************************************************************/
/*! exports provided: toNumber */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toNumber", function() { return toNumber; });
/**
 * DevExtreme (esm/renovation/utils/type_conversion.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
function toNumber(attribute) {
    return attribute ? Number(attribute.replace("px", "")) : 0
}


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/context_menu.js":
/*!********************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/context_menu.js ***!
  \********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _context_menu_ui_context_menu__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./context_menu/ui.context_menu */ "./node_modules/devextreme/esm/ui/context_menu/ui.context_menu.js");
/**
 * DevExtreme (esm/ui/context_menu.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */

/* harmony default export */ __webpack_exports__["default"] = (_context_menu_ui_context_menu__WEBPACK_IMPORTED_MODULE_0__["default"]);


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/context_menu/ui.context_menu.js":
/*!************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/context_menu/ui.context_menu.js ***!
  \************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/renderer */ "./node_modules/devextreme/esm/core/renderer.js");
/* harmony import */ var _core_dom_adapter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/dom_adapter */ "./node_modules/devextreme/esm/core/dom_adapter.js");
/* harmony import */ var _events_core_events_engine__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../events/core/events_engine */ "./node_modules/devextreme/esm/events/core/events_engine.js");
/* harmony import */ var _core_guid__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/guid */ "./node_modules/devextreme/esm/core/guid.js");
/* harmony import */ var _core_component_registrator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/component_registrator */ "./node_modules/devextreme/esm/core/component_registrator.js");
/* harmony import */ var _core_utils_common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core/utils/common */ "./node_modules/devextreme/esm/core/utils/common.js");
/* harmony import */ var _core_utils_type__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../core/utils/type */ "./node_modules/devextreme/esm/core/utils/type.js");
/* harmony import */ var _core_utils_dom__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../core/utils/dom */ "./node_modules/devextreme/esm/core/utils/dom.js");
/* harmony import */ var _core_element__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../core/element */ "./node_modules/devextreme/esm/core/element.js");
/* harmony import */ var _core_utils_iterator__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../core/utils/iterator */ "./node_modules/devextreme/esm/core/utils/iterator.js");
/* harmony import */ var _core_utils_array__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../core/utils/array */ "./node_modules/devextreme/esm/core/utils/array.js");
/* harmony import */ var _core_utils_extend__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../core/utils/extend */ "./node_modules/devextreme/esm/core/utils/extend.js");
/* harmony import */ var _core_utils_window__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../core/utils/window */ "./node_modules/devextreme/esm/core/utils/window.js");
/* harmony import */ var _animation_fx__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../animation/fx */ "./node_modules/devextreme/esm/animation/fx.js");
/* harmony import */ var _animation_position__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../animation/position */ "./node_modules/devextreme/esm/animation/position.js");
/* harmony import */ var _core_devices__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../core/devices */ "./node_modules/devextreme/esm/core/devices.js");
/* harmony import */ var _events_utils_index__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../events/utils/index */ "./node_modules/devextreme/esm/events/utils/index.js");
/* harmony import */ var _overlay_ui_overlay__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../overlay/ui.overlay */ "./node_modules/devextreme/esm/ui/overlay/ui.overlay.js");
/* harmony import */ var _ui_menu_base__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./ui.menu_base */ "./node_modules/devextreme/esm/ui/context_menu/ui.menu_base.js");
/* harmony import */ var _core_utils_deferred__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../core/utils/deferred */ "./node_modules/devextreme/esm/core/utils/deferred.js");
/* harmony import */ var _events_contextmenu__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../events/contextmenu */ "./node_modules/devextreme/esm/events/contextmenu.js");
/* harmony import */ var _events_hold__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../../events/hold */ "./node_modules/devextreme/esm/events/hold.js");
/**
 * DevExtreme (esm/ui/context_menu/ui.context_menu.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */






















var DX_MENU_CLASS = "dx-menu";
var DX_MENU_ITEM_CLASS = DX_MENU_CLASS + "-item";
var DX_MENU_ITEM_EXPANDED_CLASS = DX_MENU_ITEM_CLASS + "-expanded";
var DX_MENU_PHONE_CLASS = "dx-menu-phone-overlay";
var DX_MENU_ITEMS_CONTAINER_CLASS = DX_MENU_CLASS + "-items-container";
var DX_MENU_ITEM_WRAPPER_CLASS = DX_MENU_ITEM_CLASS + "-wrapper";
var DX_SUBMENU_CLASS = "dx-submenu";
var DX_CONTEXT_MENU_CLASS = "dx-context-menu";
var DX_HAS_CONTEXT_MENU_CLASS = "dx-has-context-menu";
var DX_STATE_DISABLED_CLASS = "dx-state-disabled";
var DX_STATE_FOCUSED_CLASS = "dx-state-focused";
var DX_STATE_HOVER_CLASS = "dx-state-hover";
var FOCUS_UP = "up";
var FOCUS_DOWN = "down";
var FOCUS_LEFT = "left";
var FOCUS_RIGHT = "right";
var FOCUS_FIRST = "first";
var FOCUS_LAST = "last";
var ACTIONS = ["onShowing", "onShown", "onSubmenuCreated", "onHiding", "onHidden", "onPositioning", "onLeftFirstItem", "onLeftLastItem", "onCloseRootSubmenu", "onExpandLastSubmenu"];
var LOCAL_SUBMENU_DIRECTIONS = [FOCUS_UP, FOCUS_DOWN, FOCUS_FIRST, FOCUS_LAST];
var DEFAULT_SHOW_EVENT = "dxcontextmenu";
class ContextMenu extends _ui_menu_base__WEBPACK_IMPORTED_MODULE_18__["default"] {
    getShowEvent(showEventOption) {
        var result = null;
        if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isObject"])(showEventOption)) {
            if (null !== showEventOption.name) {
                result = showEventOption.name || DEFAULT_SHOW_EVENT
            }
        } else {
            result = showEventOption
        }
        return result
    }
    getShowDelay(showEventOption) {
        return Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isObject"])(showEventOption) && showEventOption.delay
    }
    _getDefaultOptions() {
        return Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_11__["extend"])(super._getDefaultOptions(), {
            showEvent: DEFAULT_SHOW_EVENT,
            closeOnOutsideClick: true,
            position: {
                at: "top left",
                my: "top left"
            },
            onShowing: null,
            onShown: null,
            onSubmenuCreated: null,
            onHiding: null,
            onHidden: null,
            onPositioning: null,
            submenuDirection: "auto",
            visible: false,
            target: void 0,
            onLeftFirstItem: null,
            onLeftLastItem: null,
            onCloseRootSubmenu: null,
            onExpandLastSubmenu: null
        })
    }
    _defaultOptionsRules() {
        return super._defaultOptionsRules().concat([{
            device: () => !Object(_core_utils_window__WEBPACK_IMPORTED_MODULE_12__["hasWindow"])(),
            options: {
                animation: null
            }
        }])
    }
    _initActions() {
        this._actions = {};
        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_9__["each"])(ACTIONS, (index, action) => {
            this._actions[action] = this._createActionByOption(action) || _core_utils_common__WEBPACK_IMPORTED_MODULE_5__["noop"]
        })
    }
    _setOptionsByReference() {
        super._setOptionsByReference();
        Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_11__["extend"])(this._optionsByReference, {
            animation: true,
            selectedItem: true
        })
    }
    _focusInHandler() {}
    _itemContainer() {
        return this._overlay ? this._overlay.$content() : Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])()
    }
    _eventBindingTarget() {
        return this._itemContainer()
    }
    itemsContainer() {
        return this._overlay ? this._overlay.$content() : void 0
    }
    _supportedKeys() {
        return Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_11__["extend"])(super._supportedKeys(), {
            space: () => {
                var $item = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(this.option("focusedElement"));
                this.hide();
                if (!$item.length || !this._isSelectionEnabled()) {
                    return
                }
                this.selectItem($item[0])
            },
            escape: this.hide
        })
    }
    _getActiveItem() {
        var $availableItems = this._getAvailableItems();
        var $focusedItem = $availableItems.filter(".".concat(DX_STATE_FOCUSED_CLASS));
        var $hoveredItem = $availableItems.filter(".".concat(DX_STATE_HOVER_CLASS));
        var $hoveredItemContainer = $hoveredItem.closest(".".concat(DX_MENU_ITEMS_CONTAINER_CLASS));
        if ($hoveredItemContainer.find(".".concat(DX_MENU_ITEM_CLASS)).index($focusedItem) >= 0) {
            return $focusedItem
        }
        if ($hoveredItem.length) {
            return $hoveredItem
        }
        return super._getActiveItem()
    }
    _moveFocus(location) {
        var $items = this._getItemsByLocation(location);
        var $oldTarget = this._getActiveItem(true);
        var $hoveredItem = this.itemsContainer().find(".".concat(DX_STATE_HOVER_CLASS));
        var $focusedItem = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(this.option("focusedElement"));
        var $activeItemHighlighted = !!($focusedItem.length || $hoveredItem.length);
        var $newTarget;
        switch (location) {
            case FOCUS_UP:
                $newTarget = $activeItemHighlighted ? this._prevItem($items) : $oldTarget;
                this._setFocusedElement($newTarget);
                if ($oldTarget.is($items.first())) {
                    this._actions.onLeftFirstItem($oldTarget)
                }
                break;
            case FOCUS_DOWN:
                $newTarget = $activeItemHighlighted ? this._nextItem($items) : $oldTarget;
                this._setFocusedElement($newTarget);
                if ($oldTarget.is($items.last())) {
                    this._actions.onLeftLastItem($oldTarget)
                }
                break;
            case FOCUS_RIGHT:
                $newTarget = this.option("rtlEnabled") ? this._hideSubmenuHandler() : this._expandSubmenuHandler($items, location);
                this._setFocusedElement($newTarget);
                break;
            case FOCUS_LEFT:
                $newTarget = this.option("rtlEnabled") ? this._expandSubmenuHandler($items, location) : this._hideSubmenuHandler();
                this._setFocusedElement($newTarget);
                break;
            case FOCUS_FIRST:
                $newTarget = $items.first();
                this._setFocusedElement($newTarget);
                break;
            case FOCUS_LAST:
                $newTarget = $items.last();
                this._setFocusedElement($newTarget);
                break;
            default:
                return super._moveFocus(location)
        }
    }
    _setFocusedElement($element) {
        if ($element && 0 !== $element.length) {
            this.option("focusedElement", Object(_core_element__WEBPACK_IMPORTED_MODULE_8__["getPublicElement"])($element))
        }
    }
    _getItemsByLocation(location) {
        var $activeItem = this._getActiveItem(true);
        var $items;
        if (Object(_core_utils_array__WEBPACK_IMPORTED_MODULE_10__["inArray"])(location, LOCAL_SUBMENU_DIRECTIONS) >= 0) {
            $items = $activeItem.closest(".".concat(DX_MENU_ITEMS_CONTAINER_CLASS)).children().children()
        }
        $items = this._getAvailableItems($items);
        return $items
    }
    _getAriaTarget() {
        return this.$element()
    }
    _refreshActiveDescendant() {
        if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isDefined"])(this._overlay)) {
            var $target = this._overlay.$content();
            super._refreshActiveDescendant($target)
        }
    }
    _hideSubmenuHandler() {
        var $curItem = this._getActiveItem(true);
        var $parentItem = $curItem.parents(".".concat(DX_MENU_ITEM_EXPANDED_CLASS)).first();
        if ($parentItem.length) {
            this._hideSubmenusOnSameLevel($parentItem);
            this._hideSubmenu($curItem.closest(".".concat(DX_SUBMENU_CLASS)));
            return $parentItem
        }
        this._actions.onCloseRootSubmenu($curItem);
        return $curItem
    }
    _expandSubmenuHandler($items, location) {
        var $curItem = this._getActiveItem(true);
        var itemData = this._getItemData($curItem);
        var node = this._dataAdapter.getNodeByItem(itemData);
        var isItemHasSubmenu = this._hasSubmenu(node);
        var $submenu = $curItem.children(".".concat(DX_SUBMENU_CLASS));
        if (isItemHasSubmenu && !$curItem.hasClass(DX_STATE_DISABLED_CLASS)) {
            if (!$submenu.length || "hidden" === $submenu.css("visibility")) {
                this._showSubmenu($curItem)
            }
            return this._nextItem(this._getItemsByLocation(location))
        }
        this._actions.onExpandLastSubmenu($curItem);
        return
    }
    _clean() {
        if (this._overlay) {
            this._overlay.$element().remove();
            this._overlay = null
        }
        this._detachShowContextMenuEvents(this._getTarget());
        super._clean()
    }
    _initMarkup() {
        this.$element().addClass(DX_HAS_CONTEXT_MENU_CLASS);
        super._initMarkup()
    }
    _render() {
        super._render();
        this._renderVisibility(this.option("visible"));
        this._addWidgetClass()
    }
    _renderContentImpl() {
        this._detachShowContextMenuEvents(this._getTarget());
        this._attachShowContextMenuEvents()
    }
    _attachKeyboardEvents() {
        !this._keyboardListenerId && this._focusTarget().length && super._attachKeyboardEvents()
    }
    _renderContextMenuOverlay() {
        if (this._overlay) {
            return
        }
        var overlayOptions = this._getOverlayOptions();
        this._overlay = this._createComponent(Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>").appendTo(this._$element), _overlay_ui_overlay__WEBPACK_IMPORTED_MODULE_17__["default"], overlayOptions);
        var $overlayContent = this._overlay.$content();
        $overlayContent.addClass(DX_CONTEXT_MENU_CLASS);
        this._addCustomCssClass($overlayContent);
        this._addPlatformDependentClass($overlayContent);
        this._attachContextMenuEvent()
    }
    preventShowingDefaultContextMenuAboveOverlay() {
        var $itemContainer = this._itemContainer();
        var eventName = Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_16__["addNamespace"])(_events_contextmenu__WEBPACK_IMPORTED_MODULE_20__["name"], this.NAME);
        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_2__["default"].off($itemContainer, eventName, ".".concat(DX_SUBMENU_CLASS));
        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_2__["default"].on($itemContainer, eventName, ".".concat(DX_SUBMENU_CLASS), (e => {
            e.stopPropagation();
            e.preventDefault();
            _events_core_events_engine__WEBPACK_IMPORTED_MODULE_2__["default"].off($itemContainer, eventName, ".".concat(DX_SUBMENU_CLASS))
        }).bind(this))
    }
    _itemContextMenuHandler(e) {
        super._itemContextMenuHandler(e);
        e.stopPropagation()
    }
    _addPlatformDependentClass($element) {
        if (_core_devices__WEBPACK_IMPORTED_MODULE_15__["default"].current().phone) {
            $element.addClass(DX_MENU_PHONE_CLASS)
        }
    }
    _detachShowContextMenuEvents(target) {
        var showEvent = this.getShowEvent(this.option("showEvent"));
        if (!showEvent) {
            return
        }
        var eventName = Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_16__["addNamespace"])(showEvent, this.NAME);
        if (this._showContextMenuEventHandler) {
            _events_core_events_engine__WEBPACK_IMPORTED_MODULE_2__["default"].off(_core_dom_adapter__WEBPACK_IMPORTED_MODULE_1__["default"].getDocument(), eventName, target, this._showContextMenuEventHandler)
        } else {
            _events_core_events_engine__WEBPACK_IMPORTED_MODULE_2__["default"].off(Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(target), eventName)
        }
    }
    _attachShowContextMenuEvents() {
        var target = this._getTarget();
        var showEvent = this.getShowEvent(this.option("showEvent"));
        if (!showEvent) {
            return
        }
        var eventName = Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_16__["addNamespace"])(showEvent, this.NAME);
        var contextMenuAction = this._createAction(e => {
            var delay = this.getShowDelay(this.option("showEvent"));
            if (delay) {
                setTimeout(() => this._show(e.event), delay)
            } else {
                this._show(e.event)
            }
        }, {
            validatingTargetName: "target"
        });
        var handler = e => contextMenuAction({
            event: e,
            target: Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(e.currentTarget)
        });
        contextMenuAction = this._createAction(contextMenuAction);
        if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isRenderer"])(target) || target.nodeType || Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isWindow"])(target)) {
            this._showContextMenuEventHandler = void 0;
            _events_core_events_engine__WEBPACK_IMPORTED_MODULE_2__["default"].on(target, eventName, handler)
        } else {
            this._showContextMenuEventHandler = handler;
            _events_core_events_engine__WEBPACK_IMPORTED_MODULE_2__["default"].on(_core_dom_adapter__WEBPACK_IMPORTED_MODULE_1__["default"].getDocument(), eventName, target, this._showContextMenuEventHandler)
        }
    }
    _hoverEndHandler(e) {
        super._hoverEndHandler(e);
        e.stopPropagation()
    }
    _renderDimensions() {}
    _renderContainer($wrapper, submenuContainer) {
        var $holder = submenuContainer || this._itemContainer();
        $wrapper = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>");
        $wrapper.appendTo($holder).addClass(DX_SUBMENU_CLASS).css("visibility", submenuContainer ? "hidden" : "visible");
        var $itemsContainer = super._renderContainer($wrapper);
        if (submenuContainer) {
            return $itemsContainer
        }
        if (this.option("width")) {
            return $itemsContainer.css("minWidth", this.option("width"))
        }
        if (this.option("height")) {
            return $itemsContainer.css("minHeight", this.option("height"))
        }
        return $itemsContainer
    }
    _renderSubmenuItems(node, $itemFrame) {
        this._renderItems(this._getChildNodes(node), $itemFrame);
        this._actions.onSubmenuCreated({
            itemElement: Object(_core_element__WEBPACK_IMPORTED_MODULE_8__["getPublicElement"])($itemFrame),
            itemData: node.internalFields.item,
            submenuElement: Object(_core_element__WEBPACK_IMPORTED_MODULE_8__["getPublicElement"])($itemFrame.children(".".concat(DX_SUBMENU_CLASS)))
        })
    }
    _getOverlayOptions() {
        var position = this.option("position");
        var overlayOptions = {
            focusStateEnabled: this.option("focusStateEnabled"),
            animation: this.option("animation"),
            innerOverlay: true,
            closeOnOutsideClick: this._closeOnOutsideClickHandler.bind(this),
            propagateOutsideClick: true,
            hideOnParentScroll: true,
            deferRendering: false,
            position: {
                at: position.at,
                my: position.my,
                of: this._getTarget(),
                collision: "flipfit"
            },
            shading: false,
            showTitle: false,
            height: "auto",
            width: "auto",
            onShown: this._overlayShownActionHandler.bind(this),
            onHiding: this._overlayHidingActionHandler.bind(this),
            onHidden: this._overlayHiddenActionHandler.bind(this)
        };
        return overlayOptions
    }
    _overlayShownActionHandler(arg) {
        this._actions.onShown(arg)
    }
    _overlayHidingActionHandler(arg) {
        this._actions.onHiding(arg);
        if (!arg.cancel) {
            this._hideAllShownSubmenus();
            this._setOptionWithoutOptionChange("visible", false)
        }
    }
    _overlayHiddenActionHandler(arg) {
        this._actions.onHidden(arg)
    }
    _closeOnOutsideClickHandler(e) {
        var closeOnOutsideClick = this.option("closeOnOutsideClick");
        if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isFunction"])(closeOnOutsideClick)) {
            return closeOnOutsideClick(e)
        }
        if (!closeOnOutsideClick) {
            return false
        }
        if (_core_dom_adapter__WEBPACK_IMPORTED_MODULE_1__["default"].isDocument(e.target)) {
            return true
        }
        var $activeItemContainer = this._getActiveItemsContainer(e.target);
        var $itemContainers = this._getItemsContainers();
        var $clickedItem = this._searchActiveItem(e.target);
        var $rootItem = this.$element().parents(".".concat(DX_MENU_ITEM_CLASS));
        var isRootItemClicked = $clickedItem[0] === $rootItem[0] && $clickedItem.length && $rootItem.length;
        var isInnerOverlayClicked = this._isIncludeOverlay($activeItemContainer, $itemContainers) && $clickedItem.length;
        if (isInnerOverlayClicked || isRootItemClicked) {
            if ("onClick" === this._getShowSubmenuMode()) {
                this._hideAllShownChildSubmenus($clickedItem)
            }
            return false
        }
        return true
    }
    _getActiveItemsContainer(target) {
        return Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(target).closest(".".concat(DX_MENU_ITEMS_CONTAINER_CLASS))
    }
    _getItemsContainers() {
        return this._overlay.$content().find(".".concat(DX_MENU_ITEMS_CONTAINER_CLASS))
    }
    _searchActiveItem(target) {
        return Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(target).closest(".".concat(DX_MENU_ITEM_CLASS)).eq(0)
    }
    _isIncludeOverlay($activeOverlay, $allOverlays) {
        var isSame = false;
        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_9__["each"])($allOverlays, (index, $overlay) => {
            if ($activeOverlay.is($overlay) && !isSame) {
                isSame = true
            }
        });
        return isSame
    }
    _hideAllShownChildSubmenus($clickedItem) {
        var $submenuElements = $clickedItem.find(".".concat(DX_SUBMENU_CLASS));
        var shownSubmenus = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_11__["extend"])([], this._shownSubmenus);
        if ($submenuElements.length > 0) {
            Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_9__["each"])(shownSubmenus, (index, $submenu) => {
                var $context = this._searchActiveItem($submenu.context).parent();
                if ($context.parent().is($clickedItem.parent().parent()) && !$context.is($clickedItem.parent())) {
                    this._hideSubmenu($submenu)
                }
            })
        }
    }
    _showSubmenu($item) {
        var node = this._dataAdapter.getNodeByItem(this._getItemData($item));
        this._hideSubmenusOnSameLevel($item);
        if (!this._hasSubmenu(node)) {
            return
        }
        var $submenu = $item.children(".".concat(DX_SUBMENU_CLASS));
        var isSubmenuRendered = $submenu.length;
        super._showSubmenu($item);
        if (!isSubmenuRendered) {
            this._renderSubmenuItems(node, $item)
        }
        if (!this._isSubmenuVisible($submenu)) {
            this._drawSubmenu($item)
        }
    }
    _hideSubmenusOnSameLevel($item) {
        var $expandedItems = $item.parent(".".concat(DX_MENU_ITEM_WRAPPER_CLASS)).siblings().find(".".concat(DX_MENU_ITEM_EXPANDED_CLASS));
        if ($expandedItems.length) {
            $expandedItems.removeClass(DX_MENU_ITEM_EXPANDED_CLASS);
            this._hideSubmenu($expandedItems.find(".".concat(DX_SUBMENU_CLASS)))
        }
    }
    _hideSubmenuGroup($submenu) {
        if (this._isSubmenuVisible($submenu)) {
            this._hideSubmenuCore($submenu)
        }
    }
    _isSubmenuVisible($submenu) {
        return "visible" === $submenu.css("visibility")
    }
    _drawSubmenu($itemElement) {
        var animation = this.option("animation") ? this.option("animation").show : {};
        var $submenu = $itemElement.children(".".concat(DX_SUBMENU_CLASS));
        var submenuPosition = this._getSubmenuPosition($itemElement);
        if (this._overlay && this._overlay.option("visible")) {
            if (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isDefined"])(this._shownSubmenus)) {
                this._shownSubmenus = []
            }
            if (Object(_core_utils_array__WEBPACK_IMPORTED_MODULE_10__["inArray"])($submenu, this._shownSubmenus)) {
                this._shownSubmenus.push($submenu)
            }
            if (animation) {
                _animation_fx__WEBPACK_IMPORTED_MODULE_13__["default"].stop($submenu)
            }
            _animation_position__WEBPACK_IMPORTED_MODULE_14__["default"].setup($submenu, submenuPosition);
            if (animation) {
                if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isPlainObject"])(animation.to)) {
                    animation.to.position = submenuPosition
                }
                this._animate($submenu, animation)
            }
            $submenu.css("visibility", "visible")
        }
    }
    _animate($container, options) {
        _animation_fx__WEBPACK_IMPORTED_MODULE_13__["default"].animate($container, options)
    }
    _getSubmenuPosition($rootItem) {
        var submenuDirection = this.option("submenuDirection").toLowerCase();
        var $rootItemWrapper = $rootItem.parent(".".concat(DX_MENU_ITEM_WRAPPER_CLASS));
        var position = {
            collision: "flip",
            of: $rootItemWrapper,
            offset: {
                h: 0,
                v: -1
            }
        };
        switch (submenuDirection) {
            case "left":
                position.at = "left top";
                position.my = "right top";
                break;
            case "right":
                position.at = "right top";
                position.my = "left top";
                break;
            default:
                if (this.option("rtlEnabled")) {
                    position.at = "left top";
                    position.my = "right top"
                } else {
                    position.at = "right top";
                    position.my = "left top"
                }
        }
        return position
    }
    _updateSubmenuVisibilityOnClick(actionArgs) {
        if (!actionArgs.args.length) {
            return
        }
        var itemData = actionArgs.args[0].itemData;
        var node = this._dataAdapter.getNodeByItem(itemData);
        if (!node) {
            return
        }
        var $itemElement = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(actionArgs.args[0].itemElement);
        var $submenu = $itemElement.find(".".concat(DX_SUBMENU_CLASS));
        var shouldRenderSubmenu = this._hasSubmenu(node) && !$submenu.length;
        if (shouldRenderSubmenu) {
            this._renderSubmenuItems(node, $itemElement);
            $submenu = $itemElement.find(".".concat(DX_SUBMENU_CLASS))
        }
        if ($itemElement.context === $submenu.context && "visible" === $submenu.css("visibility")) {
            return
        }
        this._updateSelectedItemOnClick(actionArgs);
        var notCloseMenuOnItemClick = itemData && false === itemData.closeMenuOnClick;
        if (!itemData || itemData.disabled || notCloseMenuOnItemClick) {
            return
        }
        if (0 === $submenu.length) {
            var $prevSubmenu = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])($itemElement.parents(".".concat(DX_SUBMENU_CLASS))[0]);
            this._hideSubmenu($prevSubmenu);
            if (!actionArgs.canceled && this._overlay && this._overlay.option("visible")) {
                this.option("visible", false)
            }
        } else {
            if (this._shownSubmenus && this._shownSubmenus.length > 0) {
                if (this._shownSubmenus[0].is($submenu)) {
                    this._hideSubmenu($submenu)
                }
            }
            this._showSubmenu($itemElement)
        }
    }
    _hideSubmenu($curSubmenu) {
        var shownSubmenus = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_11__["extend"])([], this._shownSubmenus);
        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_9__["each"])(shownSubmenus, (index, $submenu) => {
            if ($curSubmenu.is($submenu) || Object(_core_utils_dom__WEBPACK_IMPORTED_MODULE_7__["contains"])($curSubmenu[0], $submenu[0])) {
                $submenu.parent().removeClass(DX_MENU_ITEM_EXPANDED_CLASS);
                this._hideSubmenuCore($submenu)
            }
        })
    }
    _hideSubmenuCore($submenu) {
        var index = Object(_core_utils_array__WEBPACK_IMPORTED_MODULE_10__["inArray"])($submenu, this._shownSubmenus);
        var animation = this.option("animation") ? this.option("animation").hide : null;
        if (index >= 0) {
            this._shownSubmenus.splice(index, 1)
        }
        this._stopAnimate($submenu);
        animation && this._animate($submenu, animation);
        $submenu.css("visibility", "hidden")
    }
    _stopAnimate($container) {
        _animation_fx__WEBPACK_IMPORTED_MODULE_13__["default"].stop($container, true)
    }
    _hideAllShownSubmenus() {
        var shownSubmenus = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_11__["extend"])([], this._shownSubmenus);
        var $expandedItems = this._overlay.$content().find(".".concat(DX_MENU_ITEM_EXPANDED_CLASS));
        $expandedItems.removeClass(DX_MENU_ITEM_EXPANDED_CLASS);
        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_9__["each"])(shownSubmenus, (_, $submenu) => {
            this._hideSubmenu($submenu)
        })
    }
    _visibilityChanged(visible) {
        if (visible) {
            this._renderContentImpl()
        }
    }
    _optionChanged(args) {
        if (Object(_core_utils_array__WEBPACK_IMPORTED_MODULE_10__["inArray"])(args.name, ACTIONS) > -1) {
            this._initActions();
            return
        }
        switch (args.name) {
            case "visible":
                this._renderVisibility(args.value);
                break;
            case "showEvent":
            case "position":
            case "submenuDirection":
                this._invalidate();
                break;
            case "target":
                args.previousValue && this._detachShowContextMenuEvents(args.previousValue);
                this._invalidate();
                break;
            case "closeOnOutsideClick":
                break;
            default:
                super._optionChanged(args)
        }
    }
    _renderVisibility(showing) {
        return showing ? this._show() : this._hide()
    }
    _toggleVisibility() {}
    _show(event) {
        var args = {
            jQEvent: event
        };
        var promise = (new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_19__["Deferred"]).reject().promise();
        this._actions.onShowing(args);
        if (args.cancel) {
            return promise
        }
        var position = this._positionContextMenu(event);
        if (position) {
            var _event$originalEvent;
            if (!this._overlay) {
                this._renderContextMenuOverlay();
                this._overlay.$content().addClass(this._widgetClass());
                this._renderFocusState();
                this._attachHoverEvents();
                this._attachClickEvent();
                this._renderItems(this._dataAdapter.getRootNodes())
            }
            this._setOptionWithoutOptionChange("visible", true);
            this._overlay.option("position", position);
            promise = this._overlay.show();
            event && event.stopPropagation();
            this._setAriaAttributes();
            if ((null === event || void 0 === event ? void 0 : null === (_event$originalEvent = event.originalEvent) || void 0 === _event$originalEvent ? void 0 : _event$originalEvent.type) === _events_hold__WEBPACK_IMPORTED_MODULE_21__["default"].name) {
                this.preventShowingDefaultContextMenuAboveOverlay()
            }
        }
        return promise
    }
    _setAriaAttributes() {
        this._overlayContentId = "dx-".concat(new _core_guid__WEBPACK_IMPORTED_MODULE_3__["default"]);
        this.setAria("owns", this._overlayContentId);
        this.setAria({
            id: this._overlayContentId,
            role: "menu"
        }, this._overlay.$content())
    }
    _cleanAriaAttributes() {
        this._overlay && this.setAria("id", null, this._overlay.$content());
        this.setAria("owns", void 0)
    }
    _getTarget() {
        return this.option("target") || this.option("position").of || Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(_core_dom_adapter__WEBPACK_IMPORTED_MODULE_1__["default"].getDocument())
    }
    _getContextMenuPosition() {
        return Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_11__["extend"])({}, this.option("position"), {
            of: this._getTarget()
        })
    }
    _positionContextMenu(jQEvent) {
        var position = this._getContextMenuPosition();
        var isInitialPosition = this._isInitialOptionValue("position");
        var positioningAction = this._createActionByOption("onPositioning", actionArgs);
        if (jQEvent && jQEvent.preventDefault && isInitialPosition) {
            position.of = jQEvent
        }
        var actionArgs = {
            position: position,
            event: jQEvent
        };
        positioningAction(actionArgs);
        if (actionArgs.cancel) {
            position = null
        } else if (actionArgs.event) {
            actionArgs.event.cancel = true;
            jQEvent.preventDefault()
        }
        return position
    }
    _refresh() {
        if (!Object(_core_utils_window__WEBPACK_IMPORTED_MODULE_12__["hasWindow"])()) {
            super._refresh()
        } else if (this._overlay) {
            var lastPosition = this._overlay.option("position");
            super._refresh();
            this._overlay && this._overlay.option("position", lastPosition)
        } else {
            super._refresh()
        }
    }
    _hide() {
        var promise;
        if (this._overlay) {
            promise = this._overlay.hide();
            this._setOptionWithoutOptionChange("visible", false)
        }
        this._cleanAriaAttributes();
        this.option("focusedElement", null);
        return promise || (new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_19__["Deferred"]).reject().promise()
    }
    toggle(showing) {
        var visible = this.option("visible");
        showing = void 0 === showing ? !visible : showing;
        return this._renderVisibility(showing)
    }
    show() {
        return this.toggle(true)
    }
    hide() {
        return this.toggle(false)
    }
}
Object(_core_component_registrator__WEBPACK_IMPORTED_MODULE_4__["default"])("dxContextMenu", ContextMenu);
/* harmony default export */ __webpack_exports__["default"] = (ContextMenu);


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/context_menu/ui.menu_base.edit.strategy.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/context_menu/ui.menu_base.edit.strategy.js ***!
  \***********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/renderer */ "./node_modules/devextreme/esm/core/renderer.js");
/* harmony import */ var _core_utils_iterator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/utils/iterator */ "./node_modules/devextreme/esm/core/utils/iterator.js");
/* harmony import */ var _collection_ui_collection_widget_edit_strategy_plain__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../collection/ui.collection_widget.edit.strategy.plain */ "./node_modules/devextreme/esm/ui/collection/ui.collection_widget.edit.strategy.plain.js");
/**
 * DevExtreme (esm/ui/context_menu/ui.menu_base.edit.strategy.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */



class MenuBaseEditStrategy extends _collection_ui_collection_widget_edit_strategy_plain__WEBPACK_IMPORTED_MODULE_2__["default"] {
    _getPlainItems() {
        return Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_1__["map"])(this._collectionWidget.option("items"), (function getMenuItems(item) {
            return item.items ? [item].concat(Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_1__["map"])(item.items, getMenuItems)) : item
        }))
    }
    _stringifyItem(item) {
        return JSON.stringify(item, (key, value) => {
            if ("template" === key) {
                return this._getTemplateString(value)
            }
            return value
        })
    }
    _getTemplateString(template) {
        var result;
        if ("object" === typeof template) {
            result = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(template).text()
        } else {
            result = template.toString()
        }
        return result
    }
}
/* harmony default export */ __webpack_exports__["default"] = (MenuBaseEditStrategy);


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/context_menu/ui.menu_base.js":
/*!*********************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/context_menu/ui.menu_base.js ***!
  \*********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/renderer */ "./node_modules/devextreme/esm/core/renderer.js");
/* harmony import */ var _core_utils_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/utils/common */ "./node_modules/devextreme/esm/core/utils/common.js");
/* harmony import */ var _core_utils_type__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/utils/type */ "./node_modules/devextreme/esm/core/utils/type.js");
/* harmony import */ var _core_utils_iterator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/utils/iterator */ "./node_modules/devextreme/esm/core/utils/iterator.js");
/* harmony import */ var _core_utils_extend__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/utils/extend */ "./node_modules/devextreme/esm/core/utils/extend.js");
/* harmony import */ var _widget_utils_ink_ripple__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../widget/utils.ink_ripple */ "./node_modules/devextreme/esm/ui/widget/utils.ink_ripple.js");
/* harmony import */ var _hierarchical_collection_ui_hierarchical_collection_widget__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../hierarchical_collection/ui.hierarchical_collection_widget */ "./node_modules/devextreme/esm/ui/hierarchical_collection/ui.hierarchical_collection_widget.js");
/* harmony import */ var _ui_menu_base_edit_strategy__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ui.menu_base.edit.strategy */ "./node_modules/devextreme/esm/ui/context_menu/ui.menu_base.edit.strategy.js");
/* harmony import */ var _core_devices__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../core/devices */ "./node_modules/devextreme/esm/core/devices.js");
/* harmony import */ var _collection_item__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../collection/item */ "./node_modules/devextreme/esm/ui/collection/item.js");
/**
 * DevExtreme (esm/ui/context_menu/ui.menu_base.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */










var DX_MENU_CLASS = "dx-menu";
var DX_MENU_NO_ICONS_CLASS = DX_MENU_CLASS + "-no-icons";
var DX_MENU_BASE_CLASS = "dx-menu-base";
var ITEM_CLASS = DX_MENU_CLASS + "-item";
var DX_ITEM_CONTENT_CLASS = ITEM_CLASS + "-content";
var DX_MENU_SELECTED_ITEM_CLASS = ITEM_CLASS + "-selected";
var DX_MENU_ITEM_WRAPPER_CLASS = ITEM_CLASS + "-wrapper";
var DX_MENU_ITEMS_CONTAINER_CLASS = DX_MENU_CLASS + "-items-container";
var DX_MENU_ITEM_EXPANDED_CLASS = ITEM_CLASS + "-expanded";
var DX_MENU_SEPARATOR_CLASS = DX_MENU_CLASS + "-separator";
var DX_MENU_ITEM_LAST_GROUP_ITEM = DX_MENU_CLASS + "-last-group-item";
var DX_ITEM_HAS_TEXT = ITEM_CLASS + "-has-text";
var DX_ITEM_HAS_ICON = ITEM_CLASS + "-has-icon";
var DX_ITEM_HAS_SUBMENU = ITEM_CLASS + "-has-submenu";
var DX_MENU_ITEM_POPOUT_CLASS = ITEM_CLASS + "-popout";
var DX_MENU_ITEM_POPOUT_CONTAINER_CLASS = DX_MENU_ITEM_POPOUT_CLASS + "-container";
var DX_MENU_ITEM_CAPTION_CLASS = ITEM_CLASS + "-text";
var SINGLE_SELECTION_MODE = "single";
var DEFAULT_DELAY = {
    show: 50,
    hide: 300
};
class MenuBase extends _hierarchical_collection_ui_hierarchical_collection_widget__WEBPACK_IMPORTED_MODULE_6__["default"] {
    _getDefaultOptions() {
        return Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_4__["extend"])(super._getDefaultOptions(), {
            items: [],
            cssClass: "",
            activeStateEnabled: true,
            showSubmenuMode: {
                name: "onHover",
                delay: {
                    show: 50,
                    hide: 300
                }
            },
            animation: {
                show: {
                    type: "fade",
                    from: 0,
                    to: 1,
                    duration: 100
                },
                hide: {
                    type: "fade",
                    from: 1,
                    to: 0,
                    duration: 100
                }
            },
            selectByClick: false,
            focusOnSelectedItem: false,
            keyExpr: null,
            _itemAttributes: {
                role: "menuitem"
            },
            useInkRipple: false
        })
    }
    _itemDataKey() {
        return "dxMenuItemDataKey"
    }
    _itemClass() {
        return ITEM_CLASS
    }
    _setAriaSelected() {}
    _selectedItemClass() {
        return DX_MENU_SELECTED_ITEM_CLASS
    }
    _widgetClass() {
        return DX_MENU_BASE_CLASS
    }
    _focusTarget() {
        return this._itemContainer()
    }
    _clean() {
        this.option("focusedElement", null);
        super._clean()
    }
    _supportedKeys() {
        return Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_4__["extend"])(super._supportedKeys(), {
            space: () => {
                var $item = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(this.option("focusedElement"));
                if (!$item.length || !this._isSelectionEnabled()) {
                    return
                }
                this.selectItem($item[0])
            },
            pageUp: _core_utils_common__WEBPACK_IMPORTED_MODULE_1__["noop"],
            pageDown: _core_utils_common__WEBPACK_IMPORTED_MODULE_1__["noop"]
        })
    }
    _isSelectionEnabled() {
        return this.option("selectionMode") === SINGLE_SELECTION_MODE
    }
    _init() {
        this._activeStateUnit = ".".concat(ITEM_CLASS);
        super._init();
        this._renderSelectedItem();
        this._initActions()
    }
    _getTextContainer(itemData) {
        var itemText = itemData.text;
        var $itemContainer = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])("<span>").addClass(DX_MENU_ITEM_CAPTION_CLASS);
        var itemContent = Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_2__["isPlainObject"])(itemData) ? itemText : String(itemData);
        return itemText && $itemContainer.text(itemContent)
    }
    _getPopoutContainer(itemData) {
        var items = itemData.items;
        var $popOutContainer;
        if (items && items.length) {
            var $popOutImage = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>").addClass(DX_MENU_ITEM_POPOUT_CLASS);
            $popOutContainer = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])("<span>").addClass(DX_MENU_ITEM_POPOUT_CONTAINER_CLASS).append($popOutImage)
        }
        return $popOutContainer
    }
    _getDataAdapterOptions() {
        return {
            rootValue: 0,
            multipleSelection: false,
            recursiveSelection: false,
            recursiveExpansion: false,
            searchValue: ""
        }
    }
    _selectByItem(selectedItem) {
        if (!selectedItem) {
            return
        }
        var nodeToSelect = this._dataAdapter.getNodeByItem(selectedItem);
        this._dataAdapter.toggleSelection(nodeToSelect.internalFields.key, true)
    }
    _renderSelectedItem() {
        var selectedKeys = this._dataAdapter.getSelectedNodesKeys();
        var selectedKey = selectedKeys.length && selectedKeys[0];
        var selectedItem = this.option("selectedItem");
        if (!selectedKey) {
            this._selectByItem(selectedItem);
            return
        }
        var node = this._dataAdapter.getNodeByKey(selectedKey);
        if (false === node.selectable) {
            return
        }
        if (!selectedItem) {
            this.option("selectedItem", node.internalFields.item);
            return
        }
        if (selectedItem !== node.internalFields.item) {
            this._dataAdapter.toggleSelection(selectedKey, false);
            this._selectByItem(selectedItem)
        }
    }
    _initActions() {}
    _initMarkup() {
        super._initMarkup();
        this._addCustomCssClass(this.$element());
        this.option("useInkRipple") && this._renderInkRipple()
    }
    _renderInkRipple() {
        this._inkRipple = Object(_widget_utils_ink_ripple__WEBPACK_IMPORTED_MODULE_5__["render"])()
    }
    _toggleActiveState($element, value, e) {
        super._toggleActiveState.apply(this, arguments);
        if (!this._inkRipple) {
            return
        }
        var config = {
            element: $element,
            event: e
        };
        if (value) {
            this._inkRipple.showWave(config)
        } else {
            this._inkRipple.hideWave(config)
        }
    }
    _getShowSubmenuMode() {
        var optionValue = this.option("showSubmenuMode");
        optionValue = Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_2__["isObject"])(optionValue) ? optionValue.name : optionValue;
        return this._isDesktopDevice() ? optionValue : "onClick"
    }
    _initSelectedItems() {}
    _isDesktopDevice() {
        return "desktop" === _core_devices__WEBPACK_IMPORTED_MODULE_8__["default"].real().deviceType
    }
    _initEditStrategy() {
        var Strategy = _ui_menu_base_edit_strategy__WEBPACK_IMPORTED_MODULE_7__["default"];
        this._editStrategy = new Strategy(this)
    }
    _addCustomCssClass($element) {
        $element.addClass(this.option("cssClass"))
    }
    _itemWrapperSelector() {
        return ".".concat(DX_MENU_ITEM_WRAPPER_CLASS)
    }
    _hoverStartHandler(e) {
        var $itemElement = this._getItemElementByEventArgs(e);
        if (!$itemElement || this._isItemDisabled($itemElement)) {
            return
        }
        e.stopPropagation();
        if ("onHover" === this._getShowSubmenuMode()) {
            clearTimeout(this._showSubmenusTimeout);
            this._showSubmenusTimeout = setTimeout(this._showSubmenu.bind(this, $itemElement), this._getSubmenuDelay("show"))
        }
    }
    _getAvailableItems($itemElements) {
        return super._getAvailableItems($itemElements).filter((function() {
            return "hidden" !== Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(this).css("visibility")
        }))
    }
    _isItemDisabled($item) {
        return this._disabledGetter($item.data(this._itemDataKey()))
    }
    _showSubmenu($itemElement) {
        this._addExpandedClass($itemElement)
    }
    _addExpandedClass(itemElement) {
        Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(itemElement).addClass(DX_MENU_ITEM_EXPANDED_CLASS)
    }
    _getSubmenuDelay(action) {
        var {
            delay: delay
        } = this.option("showSubmenuMode");
        if (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_2__["isDefined"])(delay)) {
            return DEFAULT_DELAY[action]
        }
        return Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_2__["isObject"])(delay) ? delay[action] : delay
    }
    _getItemElementByEventArgs(eventArgs) {
        var $target = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(eventArgs.target);
        if ($target.hasClass(this._itemClass()) || $target.get(0) === eventArgs.currentTarget) {
            return $target
        }
        while (!$target.hasClass(this._itemClass())) {
            $target = $target.parent();
            if ($target.hasClass("dx-submenu")) {
                return null
            }
        }
        return $target
    }
    _hoverEndHandler() {
        clearTimeout(this._showSubmenusTimeout)
    }
    _hasSubmenu(node) {
        return node && node.internalFields.childrenKeys.length
    }
    _renderContentImpl() {
        this._renderItems(this._dataAdapter.getRootNodes())
    }
    _renderItems(nodes, submenuContainer) {
        if (nodes.length) {
            this.hasIcons = false;
            var $nodeContainer = this._renderContainer(this.$element(), submenuContainer);
            var firstVisibleIndex = -1;
            var nextGroupFirstIndex = -1;
            Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_3__["each"])(nodes, (index, node) => {
                var isVisibleNode = false !== node.visible;
                if (isVisibleNode && firstVisibleIndex < 0) {
                    firstVisibleIndex = index
                }
                var isBeginGroup = firstVisibleIndex < index && (node.beginGroup || index === nextGroupFirstIndex);
                if (isBeginGroup) {
                    nextGroupFirstIndex = isVisibleNode ? index : index + 1
                }
                if (index === nextGroupFirstIndex && firstVisibleIndex < index) {
                    this._renderSeparator($nodeContainer)
                }
                this._renderItem(index, node, $nodeContainer)
            });
            if (!this.hasIcons) {
                $nodeContainer.addClass(DX_MENU_NO_ICONS_CLASS)
            }
        }
    }
    _renderContainer($wrapper) {
        var $container = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])("<ul>");
        this.setAria("role", "none", $container);
        return $container.appendTo($wrapper).addClass(DX_MENU_ITEMS_CONTAINER_CLASS)
    }
    _createDOMElement($nodeContainer) {
        var $node = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])("<li>");
        this.setAria("role", "none", $node);
        return $node.appendTo($nodeContainer).addClass(DX_MENU_ITEM_WRAPPER_CLASS)
    }
    _renderItem(index, node, $nodeContainer, $nodeElement) {
        var items = this.option("items");
        var $node = $nodeElement || this._createDOMElement($nodeContainer);
        if (items[index + 1] && items[index + 1].beginGroup) {
            $node.addClass(DX_MENU_ITEM_LAST_GROUP_ITEM)
        }
        var $itemFrame = super._renderItem(index, node.internalFields.item, $node);
        if (node.internalFields.item === this.option("selectedItem")) {
            $itemFrame.addClass(DX_MENU_SELECTED_ITEM_CLASS)
        }
        $itemFrame.attr("tabIndex", -1);
        if (this._hasSubmenu(node)) {
            this.setAria("haspopup", "true", $itemFrame)
        }
    }
    _renderItemFrame(index, itemData, $itemContainer) {
        var $itemFrame = $itemContainer.children(".".concat(ITEM_CLASS));
        return $itemFrame.length ? $itemFrame : super._renderItemFrame.apply(this, arguments)
    }
    _refreshItem($item, item) {
        var node = this._dataAdapter.getNodeByItem(item);
        var index = $item.data(this._itemIndexKey());
        var $nodeContainer = $item.closest("ul");
        var $nodeElement = $item.closest("li");
        this._renderItem(index, node, $nodeContainer, $nodeElement)
    }
    _addContentClasses(itemData, $itemFrame) {
        var hasText = itemData.text ? !!itemData.text.length : false;
        var hasIcon = !!itemData.icon;
        var hasSubmenu = itemData.items ? !!itemData.items.length : false;
        $itemFrame.toggleClass(DX_ITEM_HAS_TEXT, hasText);
        $itemFrame.toggleClass(DX_ITEM_HAS_ICON, hasIcon);
        if (!this.hasIcons) {
            this.hasIcons = hasIcon
        }
        $itemFrame.toggleClass(DX_ITEM_HAS_SUBMENU, hasSubmenu)
    }
    _getItemContent($itemFrame) {
        var $itemContent = super._getItemContent($itemFrame);
        if (!$itemContent.length) {
            $itemContent = $itemFrame.children(".".concat(DX_ITEM_CONTENT_CLASS))
        }
        return $itemContent
    }
    _postprocessRenderItem(args) {
        var $itemElement = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(args.itemElement);
        var selectedIndex = this._dataAdapter.getSelectedNodesKeys();
        if (!selectedIndex.length || !this._selectedGetter(args.itemData) || !this._isItemSelectable(args.itemData)) {
            this._setAriaSelected($itemElement, "false");
            return
        }
        var node = this._dataAdapter.getNodeByItem(args.itemData);
        if (node.internalFields.key === selectedIndex[0]) {
            $itemElement.addClass(this._selectedItemClass());
            this._setAriaSelected($itemElement, "true")
        } else {
            this._setAriaSelected($itemElement, "false")
        }
    }
    _isItemSelectable(item) {
        return false !== item.selectable
    }
    _renderSeparator($itemsContainer) {
        Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])("<li>").appendTo($itemsContainer).addClass(DX_MENU_SEPARATOR_CLASS)
    }
    _itemClickHandler(e) {
        if (e._skipHandling) {
            return
        }
        var itemClickActionHandler = this._createAction(this._updateSubmenuVisibilityOnClick.bind(this));
        this._itemDXEventHandler(e, "onItemClick", {}, {
            afterExecute: itemClickActionHandler.bind(this)
        });
        e._skipHandling = true
    }
    _updateSubmenuVisibilityOnClick(actionArgs) {
        this._updateSelectedItemOnClick(actionArgs);
        if ("onClick" === this._getShowSubmenuMode()) {
            this._addExpandedClass(actionArgs.args[0].itemElement)
        }
    }
    _updateSelectedItemOnClick(actionArgs) {
        var args = actionArgs.args ? actionArgs.args[0] : actionArgs;
        if (!this._isItemSelectionAllowed(args.itemData)) {
            return
        }
        var selectedItemKey = this._dataAdapter.getSelectedNodesKeys();
        var selectedNode = selectedItemKey.length && this._dataAdapter.getNodeByKey(selectedItemKey[0]);
        if (selectedNode) {
            this._toggleItemSelection(selectedNode, false)
        }
        if (!selectedNode || selectedNode.internalFields.item !== args.itemData) {
            this.selectItem(args.itemData)
        } else {
            this._fireSelectionChangeEvent(null, this.option("selectedItem"));
            this._setOptionWithoutOptionChange("selectedItem", null)
        }
    }
    _isItemSelectionAllowed(item) {
        var isSelectionByClickEnabled = this._isSelectionEnabled() && this.option("selectByClick");
        return !this._isContainerEmpty() && isSelectionByClickEnabled && this._isItemSelectable(item) && !this._itemsGetter(item)
    }
    _isContainerEmpty() {
        return this._itemContainer().is(":empty")
    }
    _syncSelectionOptions() {
        return Object(_core_utils_common__WEBPACK_IMPORTED_MODULE_1__["asyncNoop"])()
    }
    _optionChanged(args) {
        switch (args.name) {
            case "showSubmenuMode":
                break;
            case "selectedItem":
                var node = this._dataAdapter.getNodeByItem(args.value);
                var selectedKey = this._dataAdapter.getSelectedNodesKeys()[0];
                if (node && node.internalFields.key !== selectedKey) {
                    if (false === node.selectable) {
                        break
                    }
                    if (selectedKey) {
                        this._toggleItemSelection(this._dataAdapter.getNodeByKey(selectedKey), false)
                    }
                    this._toggleItemSelection(node, true);
                    this._updateSelectedItems()
                }
                break;
            case "cssClass":
            case "position":
            case "selectByClick":
            case "animation":
            case "useInkRipple":
                this._invalidate();
                break;
            default:
                super._optionChanged(args)
        }
    }
    _toggleItemSelection(node, value) {
        var itemElement = this._getElementByItem(node.internalFields.item);
        itemElement && Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(itemElement).toggleClass(DX_MENU_SELECTED_ITEM_CLASS);
        this._dataAdapter.toggleSelection(node.internalFields.key, value)
    }
    _getElementByItem(itemData) {
        var result;
        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_3__["each"])(this._itemElements(), (_, itemElement) => {
            if (Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(itemElement).data(this._itemDataKey()) !== itemData) {
                return true
            }
            result = itemElement;
            return false
        });
        return result
    }
    _updateSelectedItems(oldSelection, newSelection) {
        if (oldSelection || newSelection) {
            this._fireSelectionChangeEvent(newSelection, oldSelection)
        }
    }
    _fireSelectionChangeEvent(addedSelection, removedSelection) {
        this._createActionByOption("onSelectionChanged", {
            excludeValidators: ["disabled", "readOnly"]
        })({
            addedItems: [addedSelection],
            removedItems: [removedSelection]
        })
    }
    selectItem(itemElement) {
        var itemData = itemElement.nodeType ? this._getItemData(itemElement) : itemElement;
        var selectedKey = this._dataAdapter.getSelectedNodesKeys()[0];
        var selectedItem = this.option("selectedItem");
        var node = this._dataAdapter.getNodeByItem(itemData);
        if (node.internalFields.key !== selectedKey) {
            if (selectedKey) {
                this._toggleItemSelection(this._dataAdapter.getNodeByKey(selectedKey), false)
            }
            this._toggleItemSelection(node, true);
            this._updateSelectedItems(selectedItem, itemData);
            this._setOptionWithoutOptionChange("selectedItem", itemData)
        }
    }
    unselectItem(itemElement) {
        var itemData = itemElement.nodeType ? this._getItemData(itemElement) : itemElement;
        var node = this._dataAdapter.getNodeByItem(itemData);
        var selectedItem = this.option("selectedItem");
        if (node.internalFields.selected) {
            this._toggleItemSelection(node, false);
            this._updateSelectedItems(selectedItem, null);
            this._setOptionWithoutOptionChange("selectedItem", null)
        }
    }
}
MenuBase.ItemClass = _collection_item__WEBPACK_IMPORTED_MODULE_9__["default"];
/* harmony default export */ __webpack_exports__["default"] = (MenuBase);


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/data_grid/aggregate_calculator.js":
/*!**************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/data_grid/aggregate_calculator.js ***!
  \**************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _core_class__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/class */ "./node_modules/devextreme/esm/core/class.js");
/* harmony import */ var _core_utils_data__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/utils/data */ "./node_modules/devextreme/esm/core/utils/data.js");
/* harmony import */ var _core_utils_type__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/utils/type */ "./node_modules/devextreme/esm/core/utils/type.js");
/* harmony import */ var _data_errors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../data/errors */ "./node_modules/devextreme/esm/data/errors.js");
/* harmony import */ var _data_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../data/utils */ "./node_modules/devextreme/esm/data/utils.js");
/**
 * DevExtreme (esm/ui/data_grid/aggregate_calculator.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */






function depthFirstSearch(i, depth, root, callback) {
    var j = 0;
    if (i < depth) {
        for (; j < root.items.length; j++) {
            depthFirstSearch(i + 1, depth, root.items[j], callback)
        }
    }
    if (i === depth) {
        callback(root)
    }
}

function map(array, callback) {
    var i;
    if ("map" in array) {
        return array.map(callback)
    }
    var result = new Array(array.length);
    for (i in array) {
        result[i] = callback(array[i], i)
    }
    return result
}

function isEmpty(x) {
    return x !== x || "" === x || null === x || void 0 === x
}

function isCount(aggregator) {
    return aggregator === _data_utils__WEBPACK_IMPORTED_MODULE_4__["aggregators"].count
}

function normalizeAggregate(aggregate) {
    var selector = Object(_core_utils_data__WEBPACK_IMPORTED_MODULE_1__["compileGetter"])(aggregate.selector);
    var skipEmptyValues = "skipEmptyValues" in aggregate ? aggregate.skipEmptyValues : true;
    var aggregator = aggregate.aggregator;
    if ("string" === typeof aggregator) {
        aggregator = _data_utils__WEBPACK_IMPORTED_MODULE_4__["aggregators"][aggregator];
        if (!aggregator) {
            throw _data_errors__WEBPACK_IMPORTED_MODULE_3__["errors"].Error("E4001", aggregate.aggregator)
        }
    }
    return {
        selector: selector,
        aggregator: aggregator,
        skipEmptyValues: skipEmptyValues
    }
}
/* harmony default export */ __webpack_exports__["default"] = (_core_class__WEBPACK_IMPORTED_MODULE_0__["default"].inherit({
    ctor: function(options) {
        this._data = options.data;
        this._groupLevel = options.groupLevel || 0;
        this._totalAggregates = map(options.totalAggregates || [], normalizeAggregate);
        this._groupAggregates = map(options.groupAggregates || [], normalizeAggregate);
        this._totals = []
    },
    calculate: function() {
        if (this._totalAggregates.length) {
            this._calculateTotals(0, {
                items: this._data
            })
        }
        if (this._groupAggregates.length && this._groupLevel > 0) {
            this._calculateGroups({
                items: this._data
            })
        }
    },
    totalAggregates: function() {
        return this._totals
    },
    _aggregate: function(aggregates, data, container) {
        var length = data.items ? data.items.length : 0;
        for (var i = 0; i < aggregates.length; i++) {
            if (isCount(aggregates[i].aggregator)) {
                container[i] = (container[i] || 0) + length;
                continue
            }
            for (var j = 0; j < length; j++) {
                this._accumulate(i, aggregates[i], container, data.items[j])
            }
        }
    },
    _calculateTotals: function(level, data) {
        if (0 === level) {
            this._totals = this._seed(this._totalAggregates)
        }
        if (level === this._groupLevel) {
            this._aggregate(this._totalAggregates, data, this._totals)
        } else {
            for (var i = 0; i < data.items.length; i++) {
                this._calculateTotals(level + 1, data.items[i])
            }
        }
        if (0 === level) {
            this._totals = this._finalize(this._totalAggregates, this._totals)
        }
    },
    _calculateGroups: function(root) {
        var maxLevel = this._groupLevel;
        var currentLevel = maxLevel + 1;
        var seedFn = this._seed.bind(this, this._groupAggregates);
        var stepFn = this._aggregate.bind(this, this._groupAggregates);
        var finalizeFn = this._finalize.bind(this, this._groupAggregates);

        function aggregator(node) {
            node.aggregates = seedFn(currentLevel - 1);
            if (currentLevel === maxLevel) {
                stepFn(node, node.aggregates)
            } else {
                depthFirstSearch(currentLevel, maxLevel, node, (function(innerNode) {
                    stepFn(innerNode, node.aggregates)
                }))
            }
            node.aggregates = finalizeFn(node.aggregates)
        }
        while (--currentLevel > 0) {
            depthFirstSearch(0, currentLevel, root, aggregator)
        }
    },
    _seed: function(aggregates, groupIndex) {
        return map(aggregates, (function(aggregate) {
            var aggregator = aggregate.aggregator;
            var seed = "seed" in aggregator ? Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_2__["isFunction"])(aggregator.seed) ? aggregator.seed(groupIndex) : aggregator.seed : NaN;
            return seed
        }))
    },
    _accumulate: function(aggregateIndex, aggregate, results, item) {
        var value = aggregate.selector(item);
        var aggregator = aggregate.aggregator;
        var skipEmptyValues = aggregate.skipEmptyValues;
        if (skipEmptyValues && isEmpty(value)) {
            return
        }
        if (results[aggregateIndex] !== results[aggregateIndex]) {
            results[aggregateIndex] = value
        } else {
            results[aggregateIndex] = aggregator.step(results[aggregateIndex], value)
        }
    },
    _finalize: function(aggregates, results) {
        return map(aggregates, (function(aggregate, index) {
            var fin = aggregate.aggregator.finalize;
            return fin ? fin(results[index]) : results[index]
        }))
    }
}));


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.adaptivity.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.adaptivity.js ***!
  \*****************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ui.data_grid.core */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.core.js");
/* harmony import */ var _grid_core_ui_grid_core_adaptivity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../grid_core/ui.grid_core.adaptivity */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.adaptivity.js");
/**
 * DevExtreme (esm/ui/data_grid/ui.data_grid.adaptivity.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */


_ui_data_grid_core__WEBPACK_IMPORTED_MODULE_0__["default"].registerModule("adaptivity", _grid_core_ui_grid_core_adaptivity__WEBPACK_IMPORTED_MODULE_1__["adaptivityModule"]);


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.base.js":
/*!***********************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.base.js ***!
  \***********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/renderer */ "./node_modules/devextreme/esm/core/renderer.js");
/* harmony import */ var _core_component_registrator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/component_registrator */ "./node_modules/devextreme/esm/core/component_registrator.js");
/* harmony import */ var _core_utils_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/utils/common */ "./node_modules/devextreme/esm/core/utils/common.js");
/* harmony import */ var _core_utils_type__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/utils/type */ "./node_modules/devextreme/esm/core/utils/type.js");
/* harmony import */ var _core_utils_iterator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/utils/iterator */ "./node_modules/devextreme/esm/core/utils/iterator.js");
/* harmony import */ var _core_utils_extend__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core/utils/extend */ "./node_modules/devextreme/esm/core/utils/extend.js");
/* harmony import */ var _core_utils_console__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../core/utils/console */ "./node_modules/devextreme/esm/core/utils/console.js");
/* harmony import */ var _core_utils_browser__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../core/utils/browser */ "./node_modules/devextreme/esm/core/utils/browser.js");
/* harmony import */ var _widget_ui_widget__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../widget/ui.widget */ "./node_modules/devextreme/esm/ui/widget/ui.widget.js");
/* harmony import */ var _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./ui.data_grid.core */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.core.js");
/* harmony import */ var _themes__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../themes */ "./node_modules/devextreme/esm/ui/themes.js");
/* harmony import */ var _ui_data_grid_column_headers__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./ui.data_grid.column_headers */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.column_headers.js");
/* harmony import */ var _ui_data_grid_columns_controller__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./ui.data_grid.columns_controller */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.columns_controller.js");
/* harmony import */ var _ui_data_grid_data_controller__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./ui.data_grid.data_controller */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.data_controller.js");
/* harmony import */ var _ui_data_grid_sorting__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./ui.data_grid.sorting */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.sorting.js");
/* harmony import */ var _ui_data_grid_rows__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./ui.data_grid.rows */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.rows.js");
/* harmony import */ var _ui_data_grid_context_menu__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./ui.data_grid.context_menu */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.context_menu.js");
/* harmony import */ var _ui_data_grid_error_handling__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./ui.data_grid.error_handling */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.error_handling.js");
/* harmony import */ var _ui_data_grid_grid_view__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./ui.data_grid.grid_view */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.grid_view.js");
/* harmony import */ var _ui_data_grid_header_panel__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./ui.data_grid.header_panel */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.header_panel.js");
/**
 * DevExtreme (esm/ui/data_grid/ui.data_grid.base.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */











var DATAGRID_ROW_SELECTOR = ".dx-row";
var DATAGRID_DEPRECATED_TEMPLATE_WARNING = "Specifying grid templates with the jQuery selector name is now deprecated. Use the DOM Node or the jQuery object that references this selector instead.";









_ui_data_grid_core__WEBPACK_IMPORTED_MODULE_9__["default"].registerModulesOrder(["stateStoring", "columns", "selection", "editorFactory", "columnChooser", "grouping", "editing", "editingRowBased", "editingFormBased", "editingCellBased", "masterDetail", "validating", "adaptivity", "data", "virtualScrolling", "columnHeaders", "filterRow", "headerPanel", "headerFilter", "sorting", "search", "rows", "pager", "columnsResizingReordering", "contextMenu", "keyboardNavigation", "errorHandling", "summary", "columnFixing", "export", "gridView"]);
var DataGrid = _widget_ui_widget__WEBPACK_IMPORTED_MODULE_8__["default"].inherit({
    _activeStateUnit: DATAGRID_ROW_SELECTOR,
    _getDefaultOptions: function() {
        var result = this.callBase();
        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_4__["each"])(_ui_data_grid_core__WEBPACK_IMPORTED_MODULE_9__["default"].modules, (function() {
            if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_3__["isFunction"])(this.defaultOptions)) {
                Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_5__["extend"])(true, result, this.defaultOptions())
            }
        }));
        return result
    },
    _setDeprecatedOptions: function() {
        this.callBase();
        Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_5__["extend"])(this._deprecatedOptions, {
            useKeyboard: {
                since: "19.2",
                alias: "keyboardNavigation.enabled"
            },
            rowTemplate: {
                since: "21.2",
                message: 'Use the "dataRowTemplate" option instead'
            },
            onToolbarPreparing: {
                since: "21.2",
                message: 'Use the "toolbar" option instead'
            }
        })
    },
    _defaultOptionsRules: function() {
        return this.callBase().concat([{
            device: {
                platform: "ios"
            },
            options: {
                showRowLines: true
            }
        }, {
            device: function() {
                return Object(_themes__WEBPACK_IMPORTED_MODULE_10__["isMaterial"])()
            },
            options: {
                showRowLines: true,
                showColumnLines: false,
                headerFilter: {
                    height: 315
                },
                editing: {
                    useIcons: true
                },
                selection: {
                    showCheckBoxesMode: "always"
                }
            }
        }, {
            device: function() {
                return _core_utils_browser__WEBPACK_IMPORTED_MODULE_7__["default"].webkit
            },
            options: {
                loadingTimeout: 30,
                loadPanel: {
                    animation: {
                        show: {
                            easing: "cubic-bezier(1, 0, 1, 0)",
                            duration: 500,
                            from: {
                                opacity: 0
                            },
                            to: {
                                opacity: 1
                            }
                        }
                    }
                }
            }
        }, {
            device: function(_device) {
                return "desktop" !== _device.deviceType
            },
            options: {
                grouping: {
                    expandMode: "rowClick"
                }
            }
        }])
    },
    _init: function() {
        this.callBase();
        _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_9__["default"].processModules(this, _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_9__["default"]);
        _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_9__["default"].callModuleItemsMethod(this, "init")
    },
    _clean: _core_utils_common__WEBPACK_IMPORTED_MODULE_2__["noop"],
    _optionChanged: function(args) {
        _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_9__["default"].callModuleItemsMethod(this, "optionChanged", [args]);
        if (!args.handled) {
            this.callBase(args)
        }
    },
    _dimensionChanged: function() {
        this.updateDimensions(true)
    },
    _visibilityChanged: function(visible) {
        if (visible) {
            this.updateDimensions()
        }
    },
    _initMarkup: function() {
        this.callBase.apply(this, arguments);
        this.getView("gridView").render(this.$element())
    },
    _renderContentImpl: function() {
        this.getView("gridView").update()
    },
    _renderContent: function() {
        var that = this;
        Object(_core_utils_common__WEBPACK_IMPORTED_MODULE_2__["deferRender"])((function() {
            that._renderContentImpl()
        }))
    },
    _getTemplate: function(templateName) {
        var template = templateName;
        if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_3__["isString"])(template) && "#" === template[0]) {
            template = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(templateName);
            _core_utils_console__WEBPACK_IMPORTED_MODULE_6__["logger"].warn(DATAGRID_DEPRECATED_TEMPLATE_WARNING)
        }
        return this.callBase(template)
    },
    _dispose: function() {
        this.callBase();
        _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_9__["default"].callModuleItemsMethod(this, "dispose")
    },
    isReady: function() {
        return this.getController("data").isReady()
    },
    beginUpdate: function() {
        this.callBase();
        _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_9__["default"].callModuleItemsMethod(this, "beginUpdate")
    },
    endUpdate: function() {
        _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_9__["default"].callModuleItemsMethod(this, "endUpdate");
        this.callBase()
    },
    getController: function(name) {
        return this._controllers[name]
    },
    getView: function(name) {
        return this._views[name]
    },
    focus: function(element) {
        this.getController("keyboardNavigation").focus(element)
    }
});
DataGrid.registerModule = _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_9__["default"].registerModule.bind(_ui_data_grid_core__WEBPACK_IMPORTED_MODULE_9__["default"]);
Object(_core_component_registrator__WEBPACK_IMPORTED_MODULE_1__["default"])("dxDataGrid", DataGrid);
/* harmony default export */ __webpack_exports__["default"] = (DataGrid);


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.column_chooser.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.column_chooser.js ***!
  \*********************************************************************************/
/*! exports provided: ColumnChooserController, ColumnChooserView */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ColumnChooserController", function() { return ColumnChooserController; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ColumnChooserView", function() { return ColumnChooserView; });
/* harmony import */ var _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ui.data_grid.core */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.core.js");
/* harmony import */ var _grid_core_ui_grid_core_column_chooser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../grid_core/ui.grid_core.column_chooser */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.column_chooser.js");
/**
 * DevExtreme (esm/ui/data_grid/ui.data_grid.column_chooser.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */


var ColumnChooserController = _grid_core_ui_grid_core_column_chooser__WEBPACK_IMPORTED_MODULE_1__["columnChooserModule"].controllers.columnChooser;
var ColumnChooserView = _grid_core_ui_grid_core_column_chooser__WEBPACK_IMPORTED_MODULE_1__["columnChooserModule"].views.columnChooserView;
_ui_data_grid_core__WEBPACK_IMPORTED_MODULE_0__["default"].registerModule("columnChooser", _grid_core_ui_grid_core_column_chooser__WEBPACK_IMPORTED_MODULE_1__["columnChooserModule"]);


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.column_fixing.js":
/*!********************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.column_fixing.js ***!
  \********************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ui.data_grid.core */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.core.js");
/* harmony import */ var _grid_core_ui_grid_core_column_fixing__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../grid_core/ui.grid_core.column_fixing */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.column_fixing.js");
/**
 * DevExtreme (esm/ui/data_grid/ui.data_grid.column_fixing.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */


_ui_data_grid_core__WEBPACK_IMPORTED_MODULE_0__["default"].registerModule("columnFixing", _grid_core_ui_grid_core_column_fixing__WEBPACK_IMPORTED_MODULE_1__["columnFixingModule"]);


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.column_headers.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.column_headers.js ***!
  \*********************************************************************************/
/*! exports provided: ColumnHeadersView */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ColumnHeadersView", function() { return ColumnHeadersView; });
/* harmony import */ var _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ui.data_grid.core */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.core.js");
/* harmony import */ var _grid_core_ui_grid_core_column_headers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../grid_core/ui.grid_core.column_headers */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.column_headers.js");
/**
 * DevExtreme (esm/ui/data_grid/ui.data_grid.column_headers.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */


var ColumnHeadersView = _grid_core_ui_grid_core_column_headers__WEBPACK_IMPORTED_MODULE_1__["columnHeadersModule"].views.columnHeadersView;
_ui_data_grid_core__WEBPACK_IMPORTED_MODULE_0__["default"].registerModule("columnHeaders", _grid_core_ui_grid_core_column_headers__WEBPACK_IMPORTED_MODULE_1__["columnHeadersModule"]);


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.columns_controller.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.columns_controller.js ***!
  \*************************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ui.data_grid.core */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.core.js");
/* harmony import */ var _grid_core_ui_grid_core_columns_controller__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../grid_core/ui.grid_core.columns_controller */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.columns_controller.js");
/* harmony import */ var _core_utils_extend__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/utils/extend */ "./node_modules/devextreme/esm/core/utils/extend.js");
/**
 * DevExtreme (esm/ui/data_grid/ui.data_grid.columns_controller.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */



_ui_data_grid_core__WEBPACK_IMPORTED_MODULE_0__["default"].registerModule("columns", {
    defaultOptions: function() {
        return Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_2__["extend"])(true, {}, _grid_core_ui_grid_core_columns_controller__WEBPACK_IMPORTED_MODULE_1__["columnsControllerModule"].defaultOptions(), {
            commonColumnSettings: {
                allowExporting: true
            }
        })
    },
    controllers: _grid_core_ui_grid_core_columns_controller__WEBPACK_IMPORTED_MODULE_1__["columnsControllerModule"].controllers
});


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.columns_resizing_reordering.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.columns_resizing_reordering.js ***!
  \**********************************************************************************************/
/*! exports provided: DraggingHeaderView, DraggingHeaderViewController, ColumnsSeparatorView, TablePositionViewController, ColumnsResizerViewController, TrackerView */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DraggingHeaderView", function() { return DraggingHeaderView; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DraggingHeaderViewController", function() { return DraggingHeaderViewController; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ColumnsSeparatorView", function() { return ColumnsSeparatorView; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TablePositionViewController", function() { return TablePositionViewController; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ColumnsResizerViewController", function() { return ColumnsResizerViewController; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TrackerView", function() { return TrackerView; });
/* harmony import */ var _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ui.data_grid.core */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.core.js");
/* harmony import */ var _grid_core_ui_grid_core_columns_resizing_reordering__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../grid_core/ui.grid_core.columns_resizing_reordering */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.columns_resizing_reordering.js");
/**
 * DevExtreme (esm/ui/data_grid/ui.data_grid.columns_resizing_reordering.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */


var DraggingHeaderView = _grid_core_ui_grid_core_columns_resizing_reordering__WEBPACK_IMPORTED_MODULE_1__["columnsResizingReorderingModule"].views.draggingHeaderView;
var DraggingHeaderViewController = _grid_core_ui_grid_core_columns_resizing_reordering__WEBPACK_IMPORTED_MODULE_1__["columnsResizingReorderingModule"].controllers.draggingHeader;
var ColumnsSeparatorView = _grid_core_ui_grid_core_columns_resizing_reordering__WEBPACK_IMPORTED_MODULE_1__["columnsResizingReorderingModule"].views.columnsSeparatorView;
var TablePositionViewController = _grid_core_ui_grid_core_columns_resizing_reordering__WEBPACK_IMPORTED_MODULE_1__["columnsResizingReorderingModule"].controllers.tablePosition;
var ColumnsResizerViewController = _grid_core_ui_grid_core_columns_resizing_reordering__WEBPACK_IMPORTED_MODULE_1__["columnsResizingReorderingModule"].controllers.columnsResizer;
var TrackerView = _grid_core_ui_grid_core_columns_resizing_reordering__WEBPACK_IMPORTED_MODULE_1__["columnsResizingReorderingModule"].views.trackerView;
_ui_data_grid_core__WEBPACK_IMPORTED_MODULE_0__["default"].registerModule("columnsResizingReordering", _grid_core_ui_grid_core_columns_resizing_reordering__WEBPACK_IMPORTED_MODULE_1__["columnsResizingReorderingModule"]);


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.context_menu.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.context_menu.js ***!
  \*******************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ui.data_grid.core */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.core.js");
/* harmony import */ var _grid_core_ui_grid_core_context_menu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../grid_core/ui.grid_core.context_menu */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.context_menu.js");
/**
 * DevExtreme (esm/ui/data_grid/ui.data_grid.context_menu.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */


_ui_data_grid_core__WEBPACK_IMPORTED_MODULE_0__["default"].registerModule("contextMenu", _grid_core_ui_grid_core_context_menu__WEBPACK_IMPORTED_MODULE_1__["contextMenuModule"]);


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.core.js":
/*!***********************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.core.js ***!
  \***********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ "./node_modules/@babel/runtime/helpers/esm/extends.js");
/* harmony import */ var _grid_core_ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../grid_core/ui.grid_core.utils */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.utils.js");
/* harmony import */ var _grid_core_ui_grid_core_modules__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../grid_core/ui.grid_core.modules */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.modules.js");
/**
 * DevExtreme (esm/ui/data_grid/ui.data_grid.core.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */



/* harmony default export */ __webpack_exports__["default"] = (Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__["default"])({}, _grid_core_ui_grid_core_modules__WEBPACK_IMPORTED_MODULE_2__["default"], _grid_core_ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_1__["default"], {
    modules: []
}));


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.data_controller.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.data_controller.js ***!
  \**********************************************************************************/
/*! exports provided: DataController */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DataController", function() { return DataController; });
/* harmony import */ var _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ui.data_grid.core */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.core.js");
/* harmony import */ var _widget_ui_errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../widget/ui.errors */ "./node_modules/devextreme/esm/ui/widget/ui.errors.js");
/* harmony import */ var _ui_data_grid_data_source_adapter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ui.data_grid.data_source_adapter */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.data_source_adapter.js");
/* harmony import */ var _grid_core_ui_grid_core_data_controller__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../grid_core/ui.grid_core.data_controller */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.data_controller.js");
/**
 * DevExtreme (esm/ui/data_grid/ui.data_grid.data_controller.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */




var DataController = _grid_core_ui_grid_core_data_controller__WEBPACK_IMPORTED_MODULE_3__["dataControllerModule"].controllers.data.inherit({
    _getDataSourceAdapter: function() {
        return _ui_data_grid_data_source_adapter__WEBPACK_IMPORTED_MODULE_2__["default"]
    },
    _getSpecificDataSourceOption: function() {
        var dataSource = this.option("dataSource");
        if (dataSource && !Array.isArray(dataSource) && this.option("keyExpr")) {
            _widget_ui_errors__WEBPACK_IMPORTED_MODULE_1__["default"].log("W1011")
        }
        return this.callBase()
    }
});
_ui_data_grid_core__WEBPACK_IMPORTED_MODULE_0__["default"].registerModule("data", {
    defaultOptions: _grid_core_ui_grid_core_data_controller__WEBPACK_IMPORTED_MODULE_3__["dataControllerModule"].defaultOptions,
    controllers: {
        data: DataController
    }
});


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.data_source_adapter.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.data_source_adapter.js ***!
  \**************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _grid_core_ui_grid_core_data_source_adapter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../grid_core/ui.grid_core.data_source_adapter */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.data_source_adapter.js");
/**
 * DevExtreme (esm/ui/data_grid/ui.data_grid.data_source_adapter.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */

var dataSourceAdapterType = _grid_core_ui_grid_core_data_source_adapter__WEBPACK_IMPORTED_MODULE_0__["default"];
/* harmony default export */ __webpack_exports__["default"] = ({
    extend: function(extender) {
        dataSourceAdapterType = dataSourceAdapterType.inherit(extender)
    },
    create: function(component) {
        return new dataSourceAdapterType(component)
    }
});


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.editing.js":
/*!**************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.editing.js ***!
  \**************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ui_data_grid_editor_factory__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ui.data_grid.editor_factory */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.editor_factory.js");
/* harmony import */ var _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ui.data_grid.core */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.core.js");
/* harmony import */ var _grid_core_ui_grid_core_editing__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../grid_core/ui.grid_core.editing */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.editing.js");
/* harmony import */ var _core_utils_extend__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/utils/extend */ "./node_modules/devextreme/esm/core/utils/extend.js");
/**
 * DevExtreme (esm/ui/data_grid/ui.data_grid.editing.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */




_ui_data_grid_core__WEBPACK_IMPORTED_MODULE_1__["default"].registerModule("editing", Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_3__["extend"])(true, {}, _grid_core_ui_grid_core_editing__WEBPACK_IMPORTED_MODULE_2__["editingModule"], {
    extenders: {
        controllers: {
            data: {
                _changeRowExpandCore: function(key) {
                    var editingController = this._editingController;
                    if (Array.isArray(key)) {
                        editingController && editingController.refresh()
                    }
                    return this.callBase.apply(this, arguments)
                }
            }
        }
    }
}));


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.editing_cell_based.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.editing_cell_based.js ***!
  \*************************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ui.data_grid.core */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.core.js");
/* harmony import */ var _grid_core_ui_grid_core_editing_cell_based__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../grid_core/ui.grid_core.editing_cell_based */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.editing_cell_based.js");
/**
 * DevExtreme (esm/ui/data_grid/ui.data_grid.editing_cell_based.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */


_ui_data_grid_core__WEBPACK_IMPORTED_MODULE_0__["default"].registerModule("editingCellBased", _grid_core_ui_grid_core_editing_cell_based__WEBPACK_IMPORTED_MODULE_1__["default"]);


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.editing_form_based.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.editing_form_based.js ***!
  \*************************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ui.data_grid.core */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.core.js");
/* harmony import */ var _grid_core_ui_grid_core_editing_form_based__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../grid_core/ui.grid_core.editing_form_based */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.editing_form_based.js");
/**
 * DevExtreme (esm/ui/data_grid/ui.data_grid.editing_form_based.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */


_ui_data_grid_core__WEBPACK_IMPORTED_MODULE_0__["default"].registerModule("editingFormBased", _grid_core_ui_grid_core_editing_form_based__WEBPACK_IMPORTED_MODULE_1__["editingFormBasedModule"]);


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.editing_row_based.js":
/*!************************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.editing_row_based.js ***!
  \************************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ui.data_grid.core */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.core.js");
/* harmony import */ var _grid_core_ui_grid_core_editing_row_based__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../grid_core/ui.grid_core.editing_row_based */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.editing_row_based.js");
/**
 * DevExtreme (esm/ui/data_grid/ui.data_grid.editing_row_based.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */


_ui_data_grid_core__WEBPACK_IMPORTED_MODULE_0__["default"].registerModule("editingRowBased", _grid_core_ui_grid_core_editing_row_based__WEBPACK_IMPORTED_MODULE_1__["editingRowBasedModule"]);


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.editor_factory.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.editor_factory.js ***!
  \*********************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ui.data_grid.core */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.core.js");
/* harmony import */ var _grid_core_ui_grid_core_editor_factory__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../grid_core/ui.grid_core.editor_factory */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.editor_factory.js");
/**
 * DevExtreme (esm/ui/data_grid/ui.data_grid.editor_factory.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */


_ui_data_grid_core__WEBPACK_IMPORTED_MODULE_0__["default"].registerModule("editorFactory", _grid_core_ui_grid_core_editor_factory__WEBPACK_IMPORTED_MODULE_1__["editorFactoryModule"]);


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.error_handling.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.error_handling.js ***!
  \*********************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ui.data_grid.core */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.core.js");
/* harmony import */ var _grid_core_ui_grid_core_error_handling__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../grid_core/ui.grid_core.error_handling */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.error_handling.js");
/**
 * DevExtreme (esm/ui/data_grid/ui.data_grid.error_handling.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */


_ui_data_grid_core__WEBPACK_IMPORTED_MODULE_0__["default"].registerModule("errorHandling", _grid_core_ui_grid_core_error_handling__WEBPACK_IMPORTED_MODULE_1__["errorHandlingModule"]);


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.export.js":
/*!*************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.export.js ***!
  \*************************************************************************/
/*! exports provided: DataProvider, ExportController */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DataProvider", function() { return DataProvider; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExportController", function() { return ExportController; });
/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ "./node_modules/@babel/runtime/helpers/esm/extends.js");
/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/renderer */ "./node_modules/devextreme/esm/core/renderer.js");
/* harmony import */ var _core_class__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/class */ "./node_modules/devextreme/esm/core/class.js");
/* harmony import */ var _core_utils_type__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/utils/type */ "./node_modules/devextreme/esm/core/utils/type.js");
/* harmony import */ var _core_utils_extend__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/utils/extend */ "./node_modules/devextreme/esm/core/utils/extend.js");
/* harmony import */ var _core_utils_position__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core/utils/position */ "./node_modules/devextreme/esm/core/utils/position.js");
/* harmony import */ var _core_utils_array__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../core/utils/array */ "./node_modules/devextreme/esm/core/utils/array.js");
/* harmony import */ var _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ui.data_grid.core */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.core.js");
/* harmony import */ var _grid_core_ui_grid_core_export_mixin__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../grid_core/ui.grid_core.export_mixin */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.export_mixin.js");
/* harmony import */ var _exporter__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../exporter */ "./node_modules/devextreme/esm/exporter.js");
/* harmony import */ var _localization_message__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../localization/message */ "./node_modules/devextreme/esm/localization/message.js");
/* harmony import */ var _button__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../button */ "./node_modules/devextreme/esm/ui/button.js");
/* harmony import */ var _drop_down_button__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../drop_down_button */ "./node_modules/devextreme/esm/ui/drop_down_button.js");
/* harmony import */ var _list_light__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../list_light */ "./node_modules/devextreme/esm/ui/list_light.js");
/* harmony import */ var _core_utils_deferred__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../core/utils/deferred */ "./node_modules/devextreme/esm/core/utils/deferred.js");
/**
 * DevExtreme (esm/ui/data_grid/ui.data_grid.export.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */















var DATAGRID_EXPORT_MENU_CLASS = "dx-datagrid-export-menu";
var DATAGRID_EXPORT_BUTTON_CLASS = "dx-datagrid-export-button";
var DATAGRID_EXPORT_TOOLBAR_BUTTON_NAME = "exportButton";
var DATAGRID_EXPORT_ICON = "export-to";
var DATAGRID_EXPORT_EXCEL_ICON = "xlsxfile";
var DATAGRID_EXPORT_SELECTED_ICON = "exportselected";
var DATAGRID_EXPORT_EXCEL_BUTTON_ICON = "export-excel-button";
var DataProvider = _core_class__WEBPACK_IMPORTED_MODULE_2__["default"].inherit({
    ctor: function(exportController, initialColumnWidthsByColumnIndex, selectedRowsOnly) {
        this._exportController = exportController;
        this._initialColumnWidthsByColumnIndex = initialColumnWidthsByColumnIndex;
        this._selectedRowsOnly = selectedRowsOnly
    },
    _getGroupValue: function(item) {
        var {
            key: key,
            data: data,
            rowType: rowType,
            groupIndex: groupIndex,
            summaryCells: summaryCells
        } = item;
        var groupColumn = this._options.groupColumns[groupIndex];
        var value = _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_7__["default"].getDisplayValue(groupColumn, groupColumn.deserializeValue ? groupColumn.deserializeValue(key[groupIndex]) : key[groupIndex], data, rowType);
        var result = groupColumn.caption + ": " + _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_7__["default"].formatValue(value, groupColumn);
        if (summaryCells && summaryCells[0] && summaryCells[0].length) {
            result += " " + _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_7__["default"].getGroupRowSummaryText(summaryCells[0], this._options.summaryTexts)
        }
        return result
    },
    _correctCellIndex: function(cellIndex) {
        return cellIndex
    },
    _initOptions: function() {
        var exportController = this._exportController;
        var groupColumns = exportController._columnsController.getGroupColumns();
        var excelWrapTextEnabled = exportController.option("export.excelWrapTextEnabled");
        this._options = {
            columns: exportController._getColumns(this._initialColumnWidthsByColumnIndex),
            groupColumns: groupColumns,
            items: this._selectedRowsOnly || exportController._selectionOnly ? exportController._getSelectedItems() : exportController._getAllItems(),
            getVisibleIndex: exportController._columnsController.getVisibleIndex.bind(exportController._columnsController),
            isHeadersVisible: exportController.option("showColumnHeaders"),
            summaryTexts: exportController.option("summary.texts"),
            customizeExportData: exportController.option("customizeExportData"),
            rtlEnabled: exportController.option("rtlEnabled"),
            wrapTextEnabled: Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_3__["isDefined"])(excelWrapTextEnabled) ? excelWrapTextEnabled : !!exportController.option("wordWrapEnabled"),
            customizeExcelCell: exportController.option("export.customizeExcelCell")
        }
    },
    hasCustomizeExcelCell: function() {
        return Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_3__["isDefined"])(this._options.customizeExcelCell)
    },
    customizeExcelCell: function(e, cellSourceData) {
        if (this._options.customizeExcelCell) {
            e.gridCell = cellSourceData;
            if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_3__["isDefined"])(this._exportController) && Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_3__["isDefined"])(this._exportController.component)) {
                e.component = this._exportController.component
            }
            this._options.customizeExcelCell(e)
        }
    },
    getHeaderStyles: () => [{
        bold: true,
        alignment: "center",
        wrapText: true
    }, {
        bold: true,
        alignment: "left",
        wrapText: true
    }, {
        bold: true,
        alignment: "right",
        wrapText: true
    }],
    getGroupRowStyle() {
        return {
            bold: true,
            wrapText: false,
            alignment: Object(_core_utils_position__WEBPACK_IMPORTED_MODULE_5__["getDefaultAlignment"])(this._options.rtlEnabled)
        }
    },
    getColumnStyles() {
        var wrapTextEnabled = this._options.wrapTextEnabled;
        var columnStyles = [];
        this.getColumns().forEach(column => {
            columnStyles.push({
                alignment: column.alignment || "left",
                format: column.format,
                wrapText: wrapTextEnabled,
                dataType: column.dataType
            })
        });
        return columnStyles
    },
    getStyles: function() {
        return [...this.getHeaderStyles(), ...this.getColumnStyles(), this.getGroupRowStyle()]
    },
    _getTotalCellStyleId: function(cellIndex) {
        var _this$getColumns$cell;
        var alignment = (null === (_this$getColumns$cell = this.getColumns()[cellIndex]) || void 0 === _this$getColumns$cell ? void 0 : _this$getColumns$cell.alignment) || "right";
        return this.getHeaderStyles().map(style => style.alignment).indexOf(alignment)
    },
    getStyleId: function(rowIndex, cellIndex) {
        if (rowIndex < this.getHeaderRowCount()) {
            return 0
        } else if (this.isTotalCell(rowIndex - this.getHeaderRowCount(), cellIndex)) {
            return this._getTotalCellStyleId(cellIndex)
        } else if (this.isGroupRow(rowIndex - this.getHeaderRowCount())) {
            return this.getHeaderStyles().length + this.getColumns().length
        } else {
            return cellIndex + this.getHeaderStyles().length
        }
    },
    getColumns: function(getColumnsByAllRows) {
        var {
            columns: columns
        } = this._options;
        return getColumnsByAllRows ? columns : columns[columns.length - 1]
    },
    getColumnsWidths: function() {
        var columns = this.getColumns();
        return Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_3__["isDefined"])(columns) ? columns.map(c => c.width) : void 0
    },
    getRowsCount: function() {
        return this._options.items.length + this.getHeaderRowCount()
    },
    getHeaderRowCount: function() {
        if (this.isHeadersVisible()) {
            return this._options.columns.length - 1
        }
        return 0
    },
    isGroupRow: function(rowIndex) {
        return rowIndex < this._options.items.length && "group" === this._options.items[rowIndex].rowType
    },
    getGroupLevel: function(rowIndex) {
        var item = this._options.items[rowIndex - this.getHeaderRowCount()];
        var groupIndex = item && item.groupIndex;
        if (item && "totalFooter" === item.rowType) {
            return 0
        }
        return Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_3__["isDefined"])(groupIndex) ? groupIndex : this._options.groupColumns.length
    },
    getCellType: function(rowIndex, cellIndex) {
        var columns = this.getColumns();
        if (rowIndex < this.getHeaderRowCount()) {
            return "string"
        } else {
            rowIndex -= this.getHeaderRowCount()
        }
        if (cellIndex < columns.length) {
            var item = this._options.items.length && this._options.items[rowIndex];
            var column = columns[cellIndex];
            if (item && "data" === item.rowType) {
                if (isFinite(item.values[this._correctCellIndex(cellIndex)]) && !Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_3__["isDefined"])(column.customizeText)) {
                    return Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_3__["isDefined"])(column.lookup) ? column.lookup.dataType : column.dataType
                }
            }
            return "string"
        }
    },
    ready: function() {
        var that = this;
        that._initOptions();
        var options = that._options;
        return Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_14__["when"])(options.items).done((function(items) {
            options.customizeExportData && options.customizeExportData(that.getColumns(that.getHeaderRowCount() > 1), items);
            options.items = items
        })).fail((function() {
            options.items = []
        }))
    },
    _convertFromGridGroupSummaryItems: function(gridGroupSummaryItems) {
        if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_3__["isDefined"])(gridGroupSummaryItems) && gridGroupSummaryItems.length > 0) {
            return gridGroupSummaryItems.map((function(item) {
                return {
                    value: item.value,
                    name: item.name
                }
            }))
        }
    },
    getCellData: function(rowIndex, cellIndex, isExcelJS) {
        var value;
        var column;
        var result = {
            cellSourceData: {},
            value: value
        };
        var columns = this.getColumns();
        var correctedCellIndex = this._correctCellIndex(cellIndex);
        if (rowIndex < this.getHeaderRowCount()) {
            var columnsRow = this.getColumns(true)[rowIndex];
            column = columnsRow[cellIndex];
            result.cellSourceData.rowType = "header";
            result.cellSourceData.column = column && column.gridColumn;
            result.value = column && column.caption
        } else {
            rowIndex -= this.getHeaderRowCount();
            var item = this._options.items.length && this._options.items[rowIndex];
            if (item) {
                var itemValues = item.values;
                result.cellSourceData.rowType = item.rowType;
                result.cellSourceData.column = columns[cellIndex] && columns[cellIndex].gridColumn;
                switch (item.rowType) {
                    case "groupFooter":
                    case "totalFooter":
                        if (correctedCellIndex < itemValues.length) {
                            value = itemValues[correctedCellIndex];
                            if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_3__["isDefined"])(value)) {
                                result.cellSourceData.value = value.value;
                                result.cellSourceData.totalSummaryItemName = value.name;
                                result.value = _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_7__["default"].getSummaryText(value, this._options.summaryTexts)
                            } else {
                                result.cellSourceData.value = void 0
                            }
                        }
                        break;
                    case "group":
                        result.cellSourceData.groupIndex = item.groupIndex;
                        if (cellIndex < 1) {
                            result.cellSourceData.column = this._options.groupColumns[item.groupIndex];
                            result.cellSourceData.value = item.key[item.groupIndex];
                            result.cellSourceData.groupSummaryItems = this._convertFromGridGroupSummaryItems(item.summaryCells[0]);
                            result.value = this._getGroupValue(item)
                        } else {
                            var summaryItems = item.values[correctedCellIndex];
                            if (Array.isArray(summaryItems)) {
                                result.cellSourceData.groupSummaryItems = this._convertFromGridGroupSummaryItems(summaryItems);
                                value = "";
                                for (var i = 0; i < summaryItems.length; i++) {
                                    value += (i > 0 ? isExcelJS ? "\n" : " \n " : "") + _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_7__["default"].getSummaryText(summaryItems[i], this._options.summaryTexts)
                                }
                                result.value = value
                            } else {
                                result.cellSourceData.value = void 0
                            }
                        }
                        break;
                    default:
                        column = columns[cellIndex];
                        if (column) {
                            var _value = itemValues[correctedCellIndex];
                            var displayValue = _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_7__["default"].getDisplayValue(column, _value, item.data, item.rowType);
                            if (!isFinite(displayValue) || Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_3__["isDefined"])(column.customizeText)) {
                                if (isExcelJS && Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_3__["isDefined"])(column.customizeText) && column.customizeText === this._exportController._columnsController.getCustomizeTextByDataType("boolean")) {
                                    result.value = displayValue
                                } else {
                                    result.value = _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_7__["default"].formatValue(displayValue, column)
                                }
                            } else {
                                result.value = displayValue
                            }
                            result.cellSourceData.value = _value
                        }
                        result.cellSourceData.data = item.data
                }
            }
        }
        return result
    },
    isHeadersVisible: function() {
        return this._options.isHeadersVisible
    },
    isTotalCell: function(rowIndex, cellIndex) {
        var items = this._options.items;
        var item = items[rowIndex];
        var correctCellIndex = this._correctCellIndex(cellIndex);
        var isSummaryAlignByColumn = item.summaryCells && item.summaryCells[correctCellIndex] && item.summaryCells[correctCellIndex].length > 0 && item.summaryCells[correctCellIndex][0].alignByColumn;
        return item && "groupFooter" === item.rowType || "totalFooter" === item.rowType || isSummaryAlignByColumn
    },
    getCellMerging: function(rowIndex, cellIndex) {
        var columns = this._options.columns;
        var column = columns[rowIndex] && columns[rowIndex][cellIndex];
        return column ? {
            colspan: (column.exportColspan || 1) - 1,
            rowspan: (column.rowspan || 1) - 1
        } : {
            colspan: 0,
            rowspan: 0
        }
    },
    getFrozenArea: function() {
        return {
            x: 0,
            y: this.getHeaderRowCount()
        }
    }
});
var ExportController = _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_7__["default"].ViewController.inherit({}).include(_grid_core_ui_grid_core_export_mixin__WEBPACK_IMPORTED_MODULE_8__["default"]).inherit({
    _getEmptyCell: function() {
        return {
            caption: "",
            colspan: 1,
            rowspan: 1
        }
    },
    _updateColumnWidth: function(column, width) {
        column.width = width
    },
    _getColumns: function(initialColumnWidthsByColumnIndex) {
        var result = [];
        var i;
        var columns;
        var columnsController = this._columnsController;
        var rowCount = columnsController.getRowCount();
        for (i = 0; i <= rowCount; i++) {
            var currentHeaderRow = [];
            columns = columnsController.getVisibleColumns(i, true);
            var columnWidthsByColumnIndex = void 0;
            if (i === rowCount) {
                if (this._updateLockCount) {
                    columnWidthsByColumnIndex = initialColumnWidthsByColumnIndex
                } else {
                    var columnWidths = this._getColumnWidths(this._headersView, this._rowsView);
                    if (columnWidths && columnWidths.length) {
                        columnWidthsByColumnIndex = {};
                        for (var _i = 0; _i < columns.length; _i++) {
                            columnWidthsByColumnIndex[columns[_i].index] = columnWidths[_i]
                        }
                    }
                }
            }
            for (var j = 0; j < columns.length; j++) {
                var column = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_4__["extend"])({}, columns[j], {
                    dataType: "datetime" === columns[j].dataType ? "date" : columns[j].dataType,
                    gridColumn: columns[j]
                });
                if (this._needColumnExporting(column)) {
                    var currentColspan = this._calculateExportColspan(column);
                    if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_3__["isDefined"])(currentColspan)) {
                        column.exportColspan = currentColspan
                    }
                    if (columnWidthsByColumnIndex) {
                        this._updateColumnWidth(column, columnWidthsByColumnIndex[column.index])
                    }
                    currentHeaderRow.push(column)
                }
            }
            result.push(currentHeaderRow)
        }
        columns = result[rowCount];
        result = this._prepareItems(result.slice(0, -1));
        result.push(columns);
        return result
    },
    _calculateExportColspan: function(column) {
        if (!column.isBand) {
            return
        }
        var childColumns = this._columnsController.getChildrenByBandColumn(column.index, true);
        if (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_3__["isDefined"])(childColumns)) {
            return
        }
        return childColumns.reduce((result, childColumn) => {
            if (this._needColumnExporting(childColumn)) {
                return result + (this._calculateExportColspan(childColumn) || 1)
            } else {
                return result
            }
        }, 0)
    },
    _needColumnExporting: function(column) {
        return !column.command && (column.allowExporting || void 0 === column.allowExporting)
    },
    _getFooterSummaryItems: function(summaryCells, isTotal) {
        var result = [];
        var estimatedItemsCount = 1;
        var i = 0;
        do {
            var values = [];
            for (var j = 0; j < summaryCells.length; j++) {
                var summaryCell = summaryCells[j];
                var itemsLength = summaryCell.length;
                if (estimatedItemsCount < itemsLength) {
                    estimatedItemsCount = itemsLength
                }
                values.push(summaryCell[i])
            }
            result.push({
                values: values,
                rowType: isTotal ? "totalFooter" : "groupFooter"
            })
        } while (i++ < estimatedItemsCount - 1);
        return result
    },
    _hasSummaryGroupFooters: function() {
        var groupItems = this.option("summary.groupItems");
        if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_3__["isDefined"])(groupItems)) {
            for (var i = 0; i < groupItems.length; i++) {
                if (groupItems[i].showInGroupFooter) {
                    return true
                }
            }
        }
        return false
    },
    _getItemsWithSummaryGroupFooters: function(sourceItems) {
        var result = [];
        var beforeGroupFooterItems = [];
        var groupFooterItems = [];
        for (var i = 0; i < sourceItems.length; i++) {
            var item = sourceItems[i];
            if ("groupFooter" === item.rowType) {
                groupFooterItems = this._getFooterSummaryItems(item.summaryCells);
                result = result.concat(beforeGroupFooterItems, groupFooterItems);
                beforeGroupFooterItems = []
            } else {
                beforeGroupFooterItems.push(item)
            }
        }
        return result.length ? result : beforeGroupFooterItems
    },
    _updateGroupValuesWithSummaryByColumn: function(sourceItems) {
        var summaryValues = [];
        for (var i = 0; i < sourceItems.length; i++) {
            var item = sourceItems[i];
            var summaryCells = item.summaryCells;
            if ("group" === item.rowType && summaryCells && summaryCells.length > 1) {
                var groupColumnCount = item.values.length;
                for (var j = 1; j < summaryCells.length; j++) {
                    for (var k = 0; k < summaryCells[j].length; k++) {
                        var summaryItem = summaryCells[j][k];
                        if (summaryItem && summaryItem.alignByColumn) {
                            if (!Array.isArray(summaryValues[j - groupColumnCount])) {
                                summaryValues[j - groupColumnCount] = []
                            }
                            summaryValues[j - groupColumnCount].push(summaryItem)
                        }
                    }
                }
                if (summaryValues.length > 0) {
                    Object(_core_utils_array__WEBPACK_IMPORTED_MODULE_6__["merge"])(item.values, summaryValues);
                    summaryValues = []
                }
            }
        }
    },
    _processUnExportedItems: function(items) {
        var columns = this._columnsController.getVisibleColumns(null, true);
        var groupColumns = this._columnsController.getGroupColumns();
        var values;
        var summaryCells;
        for (var i = 0; i < items.length; i++) {
            var item = items[i];
            var isDetailExpandColumn = false;
            values = [];
            summaryCells = [];
            for (var j = 0; j < columns.length; j++) {
                var column = columns[j];
                isDetailExpandColumn = isDetailExpandColumn || "detailExpand" === column.type;
                if (this._needColumnExporting(column)) {
                    if (item.values) {
                        if ("group" === item.rowType && !values.length) {
                            values.push(item.key[item.groupIndex])
                        } else {
                            values.push(item.values[j])
                        }
                    }
                    if (item.summaryCells) {
                        if ("group" === item.rowType && !summaryCells.length) {
                            var index = j - groupColumns.length + item.groupIndex;
                            summaryCells.push(item.summaryCells[isDetailExpandColumn ? index : index + 1])
                        } else {
                            summaryCells.push(item.summaryCells[j])
                        }
                    }
                }
            }
            if (values.length) {
                item.values = values
            }
            if (summaryCells.length) {
                item.summaryCells = summaryCells
            }
        }
    },
    _getAllItems: function(data) {
        var that = this;
        var d = new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_14__["Deferred"];
        var dataController = this.getController("data");
        var footerItems = dataController.footerItems();
        var totalItem = footerItems.length && footerItems[0];
        var summaryTotalItems = that.option("summary.totalItems");
        var summaryCells;
        Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_14__["when"])(data).done((function(data) {
            dataController.loadAll(data).done((function(sourceItems, totalAggregates) {
                that._updateGroupValuesWithSummaryByColumn(sourceItems);
                if (that._hasSummaryGroupFooters()) {
                    sourceItems = that._getItemsWithSummaryGroupFooters(sourceItems)
                }
                summaryCells = totalItem && totalItem.summaryCells;
                if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_3__["isDefined"])(totalAggregates) && summaryTotalItems) {
                    summaryCells = that._getSummaryCells(summaryTotalItems, totalAggregates)
                }
                var summaryItems = totalItem && that._getFooterSummaryItems(summaryCells, true);
                if (summaryItems) {
                    sourceItems = sourceItems.concat(summaryItems)
                }
                that._processUnExportedItems(sourceItems);
                d.resolve(sourceItems)
            })).fail(d.reject)
        })).fail(d.reject);
        return d
    },
    _getSummaryCells: function(summaryTotalItems, totalAggregates) {
        var dataController = this.getController("data");
        var columnsController = dataController._columnsController;
        return dataController._calculateSummaryCells(summaryTotalItems, totalAggregates, columnsController.getVisibleColumns(null, true), (function(summaryItem, column) {
            return dataController._isDataColumn(column) ? column.index : -1
        }))
    },
    _getSelectedItems: function() {
        var selectionController = this.getController("selection");
        var selectedRowData = selectionController.getSelectedRowsData();
        return this._getAllItems(selectedRowData)
    },
    _getColumnWidths: function(headersView, rowsView) {
        return headersView && headersView.isVisible() ? headersView.getColumnWidths() : rowsView.getColumnWidths()
    },
    init: function() {
        this._columnsController = this.getController("columns");
        this._rowsView = this.getView("rowsView");
        this._headersView = this.getView("columnHeadersView");
        this.createAction("onExporting", {
            excludeValidators: ["disabled", "readOnly"]
        });
        this.createAction("onExported", {
            excludeValidators: ["disabled", "readOnly"]
        });
        this.createAction("onFileSaving", {
            excludeValidators: ["disabled", "readOnly"]
        })
    },
    callbackNames: function() {
        return ["selectionOnlyChanged"]
    },
    getExportFormat: function() {
        return ["EXCEL"]
    },
    getDataProvider: function(selectedRowsOnly) {
        var columnWidths = this._getColumnWidths(this._headersView, this._rowsView);
        var initialColumnWidthsByColumnIndex;
        if (columnWidths && columnWidths.length) {
            initialColumnWidthsByColumnIndex = {};
            var columnsLastRowVisibleColumns = this._columnsController.getVisibleColumns(this._columnsController.getRowCount(), true);
            for (var i = 0; i < columnsLastRowVisibleColumns.length; i++) {
                initialColumnWidthsByColumnIndex[columnsLastRowVisibleColumns[i].index] = columnWidths[i]
            }
        }
        return new DataProvider(this, initialColumnWidthsByColumnIndex, selectedRowsOnly)
    },
    exportToExcel: function(selectionOnly) {
        this._selectionOnly = selectionOnly;
        Object(_exporter__WEBPACK_IMPORTED_MODULE_9__["export"])(this.component.getDataProvider(), {
            fileName: this.option("export.fileName"),
            proxyUrl: this.option("export.proxyUrl"),
            format: "EXCEL",
            autoFilterEnabled: !!this.option("export.excelFilterEnabled"),
            rtlEnabled: this.option("rtlEnabled"),
            ignoreErrors: this.option("export.ignoreExcelErrors"),
            exportingAction: this.getAction("onExporting"),
            exportedAction: this.getAction("onExported"),
            fileSavingAction: this.getAction("onFileSaving")
        }, _exporter__WEBPACK_IMPORTED_MODULE_9__["excel"].getData)
    },
    publicMethods: function() {
        return ["getDataProvider", "getExportFormat", "exportToExcel"]
    },
    selectionOnly: function(value) {
        if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_3__["isDefined"])(value)) {
            this._isSelectedRows = value;
            this.selectionOnlyChanged.fire()
        } else {
            return this._isSelectedRows
        }
    }
});
_ui_data_grid_core__WEBPACK_IMPORTED_MODULE_7__["default"].registerModule("export", {
    defaultOptions: function() {
        return {
            export: {
                enabled: false,
                fileName: "DataGrid",
                excelFilterEnabled: false,
                excelWrapTextEnabled: void 0,
                proxyUrl: void 0,
                allowExportSelectedData: false,
                ignoreExcelErrors: true,
                texts: {
                    exportTo: _localization_message__WEBPACK_IMPORTED_MODULE_10__["default"].format("dxDataGrid-exportTo"),
                    exportAll: _localization_message__WEBPACK_IMPORTED_MODULE_10__["default"].format("dxDataGrid-exportAll"),
                    exportSelectedRows: _localization_message__WEBPACK_IMPORTED_MODULE_10__["default"].format("dxDataGrid-exportSelectedRows")
                }
            }
        }
    },
    controllers: {
        export: ExportController
    },
    extenders: {
        controllers: {
            editing: {
                callbackNames: function() {
                    var callbackList = this.callBase();
                    return Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_3__["isDefined"])(callbackList) ? callbackList.push("editingChanged") : ["editingChanged"]
                },
                _updateEditButtons: function() {
                    this.callBase();
                    this.editingChanged.fire(this.hasChanges())
                }
            }
        },
        views: {
            headerPanel: {
                _getToolbarItems: function() {
                    var items = this.callBase();
                    var exportButton = this._getExportToolbarButton();
                    if (exportButton) {
                        items.push(exportButton);
                        this._correctItemsPosition(items)
                    }
                    return items
                },
                _getExportToolbarButton: function() {
                    var items = this._getExportToolbarItems();
                    if (0 === items.length) {
                        return null
                    }
                    var toolbarButtonOptions = {
                        name: DATAGRID_EXPORT_TOOLBAR_BUTTON_NAME,
                        location: "after",
                        locateInMenu: "auto",
                        sortIndex: 30,
                        options: {
                            items: items
                        }
                    };
                    if (1 === items.length) {
                        var widgetOptions = Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__["default"])({}, items[0], {
                            hint: items[0].text,
                            elementAttr: {
                                class: DATAGRID_EXPORT_BUTTON_CLASS
                            }
                        });
                        toolbarButtonOptions.widget = "dxButton";
                        toolbarButtonOptions.showText = "inMenu";
                        toolbarButtonOptions.options = widgetOptions
                    } else {
                        var _widgetOptions = {
                            icon: DATAGRID_EXPORT_ICON,
                            displayExpr: "text",
                            items: items,
                            hint: this.option("export.texts.exportTo"),
                            elementAttr: {
                                class: DATAGRID_EXPORT_BUTTON_CLASS
                            },
                            dropDownOptions: {
                                wrapperAttr: {
                                    class: DATAGRID_EXPORT_MENU_CLASS
                                },
                                width: "auto"
                            }
                        };
                        toolbarButtonOptions.options = _widgetOptions;
                        toolbarButtonOptions.widget = "dxDropDownButton";
                        toolbarButtonOptions.menuItemTemplate = (_data, _index, container) => {
                            this._createComponent(Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(container), _list_light__WEBPACK_IMPORTED_MODULE_13__["default"], {
                                items: items
                            })
                        }
                    }
                    return toolbarButtonOptions
                },
                _getExportToolbarItems: function() {
                    var exportOptions = this.option("export");
                    var texts = this.option("export.texts");
                    var items = [];
                    if (exportOptions.enabled) {
                        items.push({
                            text: texts.exportAll,
                            icon: DATAGRID_EXPORT_EXCEL_ICON,
                            onClick: () => {
                                this._exportController.exportToExcel()
                            }
                        });
                        if (exportOptions.allowExportSelectedData) {
                            items.push({
                                text: texts.exportSelectedRows,
                                icon: DATAGRID_EXPORT_SELECTED_ICON,
                                onClick: () => {
                                    this._exportController.exportToExcel(true)
                                }
                            })
                        }
                    }
                    return items
                },
                _correctItemsPosition: function(items) {
                    items.sort((function(itemA, itemB) {
                        return itemA.sortIndex - itemB.sortIndex
                    }))
                },
                _isExportButtonVisible: function() {
                    return this.option("export.enabled")
                },
                _getButtonOptions: function(allowExportSelected) {
                    var that = this;
                    var texts = that.option("export.texts");
                    var options;
                    if (allowExportSelected) {
                        options = {
                            hint: texts.exportTo,
                            icon: DATAGRID_EXPORT_ICON
                        }
                    } else {
                        options = {
                            hint: texts.exportAll,
                            icon: DATAGRID_EXPORT_EXCEL_BUTTON_ICON,
                            onClick: function() {
                                that._exportController.exportToExcel()
                            }
                        }
                    }
                    return options
                },
                optionChanged: function(args) {
                    this.callBase(args);
                    if ("export" === args.name) {
                        args.handled = true;
                        this._invalidate()
                    }
                },
                init: function() {
                    var that = this;
                    this.callBase();
                    this._exportController = this.getController("export");
                    this._editingController = this.getController("editing");
                    this._editingController.editingChanged.add((function(hasChanges) {
                        that.setToolbarItemDisabled("exportButton", hasChanges)
                    }))
                },
                isVisible: function() {
                    return this.callBase() || this._isExportButtonVisible()
                }
            }
        }
    }
});


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.filter_builder.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.filter_builder.js ***!
  \*********************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ui.data_grid.core */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.core.js");
/* harmony import */ var _grid_core_ui_grid_core_filter_builder__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../grid_core/ui.grid_core.filter_builder */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.filter_builder.js");
/**
 * DevExtreme (esm/ui/data_grid/ui.data_grid.filter_builder.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */


_ui_data_grid_core__WEBPACK_IMPORTED_MODULE_0__["default"].registerModule("filterBuilder", _grid_core_ui_grid_core_filter_builder__WEBPACK_IMPORTED_MODULE_1__["filterBuilderModule"]);


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.filter_panel.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.filter_panel.js ***!
  \*******************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ui.data_grid.core */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.core.js");
/* harmony import */ var _grid_core_ui_grid_core_filter_panel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../grid_core/ui.grid_core.filter_panel */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.filter_panel.js");
/**
 * DevExtreme (esm/ui/data_grid/ui.data_grid.filter_panel.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */


_ui_data_grid_core__WEBPACK_IMPORTED_MODULE_0__["default"].registerModule("filterPanel", _grid_core_ui_grid_core_filter_panel__WEBPACK_IMPORTED_MODULE_1__["filterPanelModule"]);


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.filter_row.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.filter_row.js ***!
  \*****************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ui.data_grid.core */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.core.js");
/* harmony import */ var _grid_core_ui_grid_core_filter_row__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../grid_core/ui.grid_core.filter_row */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.filter_row.js");
/**
 * DevExtreme (esm/ui/data_grid/ui.data_grid.filter_row.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */


_ui_data_grid_core__WEBPACK_IMPORTED_MODULE_0__["default"].registerModule("filterRow", _grid_core_ui_grid_core_filter_row__WEBPACK_IMPORTED_MODULE_1__["filterRowModule"]);


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.filter_sync.js":
/*!******************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.filter_sync.js ***!
  \******************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ui.data_grid.core */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.core.js");
/* harmony import */ var _grid_core_ui_grid_core_filter_sync__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../grid_core/ui.grid_core.filter_sync */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.filter_sync.js");
/**
 * DevExtreme (esm/ui/data_grid/ui.data_grid.filter_sync.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */


_ui_data_grid_core__WEBPACK_IMPORTED_MODULE_0__["default"].registerModule("filterSync", _grid_core_ui_grid_core_filter_sync__WEBPACK_IMPORTED_MODULE_1__["filterSyncModule"]);


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.focus.js":
/*!************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.focus.js ***!
  \************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ui.data_grid.core */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.core.js");
/* harmony import */ var _grid_core_ui_grid_core_focus__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../grid_core/ui.grid_core.focus */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.focus.js");
/* harmony import */ var _core_utils_deferred__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/utils/deferred */ "./node_modules/devextreme/esm/core/utils/deferred.js");
/* harmony import */ var _core_utils_type__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/utils/type */ "./node_modules/devextreme/esm/core/utils/type.js");
/* harmony import */ var _core_utils_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/utils/common */ "./node_modules/devextreme/esm/core/utils/common.js");
/* harmony import */ var _ui_data_grid_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ui.data_grid.utils */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.utils.js");
/* harmony import */ var _core_utils_data__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../core/utils/data */ "./node_modules/devextreme/esm/core/utils/data.js");
/* harmony import */ var _core_utils_extend__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../core/utils/extend */ "./node_modules/devextreme/esm/core/utils/extend.js");
/**
 * DevExtreme (esm/ui/data_grid/ui.data_grid.focus.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */








var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;
_ui_data_grid_core__WEBPACK_IMPORTED_MODULE_0__["default"].registerModule("focus", Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_7__["extend"])(true, {}, _grid_core_ui_grid_core_focus__WEBPACK_IMPORTED_MODULE_1__["focusModule"], {
    extenders: {
        controllers: {
            data: {
                changeRowExpand: function(path, isRowClick) {
                    if (this.option("focusedRowEnabled") && Array.isArray(path) && this.isRowExpanded(path)) {
                        var keyboardNavigation = this.getController("keyboardNavigation");
                        if ((!isRowClick || !keyboardNavigation.isKeyboardEnabled()) && this._isFocusedRowInsideGroup(path)) {
                            this.option("focusedRowKey", path)
                        }
                    }
                    return this.callBase.apply(this, arguments)
                },
                _isFocusedRowInsideGroup: function(path) {
                    var columnsController = this.getController("columns");
                    var focusedRowKey = this.option("focusedRowKey");
                    var rowIndex = this.getRowIndexByKey(focusedRowKey);
                    var focusedRow = rowIndex >= 0 && this.getVisibleRows()[rowIndex];
                    var groups = columnsController.getGroupDataSourceParameters(true);
                    if (focusedRow) {
                        for (var i = 0; i < path.length; ++i) {
                            var getter = Object(_core_utils_data__WEBPACK_IMPORTED_MODULE_6__["compileGetter"])(groups[i] && groups[i].selector);
                            if (getter(focusedRow.data) !== path[i]) {
                                return false
                            }
                        }
                    }
                    return true
                },
                _getGroupPath: function(groupItem, groupCount) {
                    var groupPath = [];
                    var items = [groupItem];
                    while (items && items[0] && groupCount) {
                        var item = items[0];
                        if (void 0 !== item.key) {
                            groupPath.push(item.key)
                        }
                        items = item.items;
                        groupCount--
                    }
                    return groupPath
                },
                _expandGroupByPath: function(that, groupPath, level) {
                    var d = new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_2__["Deferred"];
                    level++;
                    that.expandRow(groupPath.slice(0, level)).done((function() {
                        if (level === groupPath.length) {
                            d.resolve()
                        } else {
                            that._expandGroupByPath(that, groupPath, level).done(d.resolve).fail(d.reject)
                        }
                    })).fail(d.reject);
                    return d.promise()
                },
                _calculateGlobalRowIndexByGroupedData: function(key) {
                    var that = this;
                    var dataSource = that._dataSource;
                    var filter = that._generateFilterByKey(key);
                    var deferred = new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_2__["Deferred"];
                    var isGroupKey = Array.isArray(key);
                    var group = dataSource.group();
                    if (isGroupKey) {
                        return deferred.resolve(-1).promise()
                    }
                    if (!dataSource._grouping._updatePagingOptions) {
                        that._calculateGlobalRowIndexByFlatData(key, null, true).done(deferred.resolve).fail(deferred.reject);
                        return deferred
                    }
                    dataSource.load({
                        filter: that._concatWithCombinedFilter(filter),
                        group: group
                    }).done((function(data) {
                        if (!data || 0 === data.length || !Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_3__["isDefined"])(data[0].key) || -1 === data[0].key) {
                            return deferred.resolve(-1).promise()
                        }
                        var groupPath = that._getGroupPath(data[0], group.length);
                        that._expandGroupByPath(that, groupPath, 0).done((function() {
                            that._calculateExpandedRowGlobalIndex(deferred, key, groupPath, group)
                        })).fail(deferred.reject)
                    })).fail(deferred.reject);
                    return deferred.promise()
                },
                _calculateExpandedRowGlobalIndex: function(deferred, key, groupPath, group) {
                    var groupFilter = Object(_ui_data_grid_utils__WEBPACK_IMPORTED_MODULE_5__["createGroupFilter"])(groupPath, {
                        group: group
                    });
                    var dataSource = this._dataSource;
                    var scrollingMode = this.option("scrolling.mode");
                    var isVirtualScrolling = "virtual" === scrollingMode || "infinite" === scrollingMode;
                    var pageSize = dataSource.pageSize();
                    var groupOffset;
                    dataSource._grouping._updatePagingOptions({
                        skip: 0,
                        take: MAX_SAFE_INTEGER
                    }, (function(groupInfo, totalOffset) {
                        if (Object(_core_utils_common__WEBPACK_IMPORTED_MODULE_4__["equalByValue"])(groupInfo.path, groupPath)) {
                            groupOffset = totalOffset
                        }
                    }));
                    this._calculateGlobalRowIndexByFlatData(key, groupFilter).done((function(dataOffset) {
                        var count;
                        var groupContinuationCount;
                        if (dataOffset < 0) {
                            deferred.resolve(-1);
                            return
                        }
                        var currentPageOffset = groupOffset % pageSize || pageSize;
                        count = currentPageOffset + dataOffset - groupPath.length;
                        if (isVirtualScrolling) {
                            groupContinuationCount = 0
                        } else {
                            groupContinuationCount = Math.floor(count / (pageSize - groupPath.length)) * groupPath.length
                        }
                        count = groupOffset + dataOffset + groupContinuationCount;
                        deferred.resolve(count)
                    })).fail(deferred.reject)
                }
            }
        }
    }
}));


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.grid_view.js":
/*!****************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.grid_view.js ***!
  \****************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ui.data_grid.core */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.core.js");
/* harmony import */ var _grid_core_ui_grid_core_grid_view__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../grid_core/ui.grid_core.grid_view */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.grid_view.js");
/**
 * DevExtreme (esm/ui/data_grid/ui.data_grid.grid_view.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */


_ui_data_grid_core__WEBPACK_IMPORTED_MODULE_0__["default"].registerModule("gridView", _grid_core_ui_grid_core_grid_view__WEBPACK_IMPORTED_MODULE_1__["gridViewModule"]);


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.grouping.collapsed.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.grouping.collapsed.js ***!
  \*************************************************************************************/
/*! exports provided: GroupingHelper */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GroupingHelper", function() { return GroupingHelper; });
/* harmony import */ var _core_utils_extend__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/utils/extend */ "./node_modules/devextreme/esm/core/utils/extend.js");
/* harmony import */ var _core_utils_iterator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/utils/iterator */ "./node_modules/devextreme/esm/core/utils/iterator.js");
/* harmony import */ var _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ui.data_grid.core */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.core.js");
/* harmony import */ var _ui_data_grid_grouping_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ui.data_grid.grouping.core */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.grouping.core.js");
/* harmony import */ var _ui_data_grid_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ui.data_grid.utils */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.utils.js");
/* harmony import */ var _widget_ui_errors__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../widget/ui.errors */ "./node_modules/devextreme/esm/ui/widget/ui.errors.js");
/* harmony import */ var _data_errors__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../data/errors */ "./node_modules/devextreme/esm/data/errors.js");
/* harmony import */ var _core_utils_deferred__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../core/utils/deferred */ "./node_modules/devextreme/esm/core/utils/deferred.js");
/**
 * DevExtreme (esm/ui/data_grid/ui.data_grid.grouping.collapsed.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */









function getContinuationGroupCount(groupOffset, pageSize, groupSize, groupIndex) {
    groupIndex = groupIndex || 0;
    if (pageSize > 1 && groupSize > 0) {
        var pageOffset = groupOffset - Math.floor(groupOffset / pageSize) * pageSize || pageSize;
        pageOffset += groupSize - groupIndex - 2;
        if (pageOffset < 0) {
            pageOffset += pageSize
        }
        return Math.floor(pageOffset / (pageSize - groupIndex - 1))
    }
    return 0
}
var GroupingHelper = _ui_data_grid_grouping_core__WEBPACK_IMPORTED_MODULE_3__["GroupingHelper"].inherit(function() {
    var foreachExpandedGroups = function(that, callback, updateGroups) {
        return that.foreachGroups((function(groupInfo, parents) {
            if (groupInfo.isExpanded) {
                return callback(groupInfo, parents)
            }
        }), true, false, updateGroups, updateGroups)
    };
    var processGroupItems = function processGroupItems(that, items, groupsCount, expandedInfo, path, isCustomLoading, isLastGroupExpanded) {
        var isExpanded;
        expandedInfo.items = expandedInfo.items || [];
        expandedInfo.paths = expandedInfo.paths || [];
        expandedInfo.count = expandedInfo.count || 0;
        expandedInfo.lastCount = expandedInfo.lastCount || 0;
        if (!groupsCount) {
            return
        }
        for (var i = 0; i < items.length; i++) {
            var item = items[i];
            if (void 0 !== item.items) {
                path.push(item.key);
                if (isCustomLoading) {
                    isExpanded = true
                } else {
                    var groupInfo = that.findGroupInfo(path);
                    isExpanded = groupInfo && groupInfo.isExpanded
                }
                if (!isExpanded) {
                    item.collapsedItems = item.items;
                    item.items = null
                } else if (item.items) {
                    processGroupItems(that, item.items, groupsCount - 1, expandedInfo, path, isCustomLoading, isLastGroupExpanded)
                } else if (1 === groupsCount && item.count && (!isCustomLoading || isLastGroupExpanded)) {
                    expandedInfo.items.push(item);
                    expandedInfo.paths.push(path.slice(0));
                    expandedInfo.count += expandedInfo.lastCount;
                    expandedInfo.lastCount = item.count
                }
                path.pop()
            }
        }
    };
    var updateGroupInfoItem = function(that, item, isLastGroupLevel, path, offset) {
        var groupInfo = that.findGroupInfo(path);
        var count;
        if (!groupInfo) {
            if (isLastGroupLevel) {
                count = item.count > 0 ? item.count : item.items.length
            }
            that.addGroupInfo({
                isExpanded: that._isGroupExpanded(path.length - 1),
                path: path.slice(0),
                offset: offset,
                count: count || 0
            })
        } else {
            if (isLastGroupLevel) {
                groupInfo.count = item.count > 0 ? item.count : item.items && item.items.length || 0
            } else {
                item.count = groupInfo.count || item.count
            }
            groupInfo.offset = offset
        }
    };
    var updateGroupInfos = function updateGroupInfos(that, options, items, loadedGroupCount, groupIndex, path, parentIndex) {
        var groupCount = options.group ? options.group.length : 0;
        var isLastGroupLevel = groupCount === loadedGroupCount;
        var remotePaging = options.remoteOperations.paging;
        var offset = 0;
        var totalCount = 0;
        var count;
        groupIndex = groupIndex || 0;
        path = path || [];
        if (remotePaging && !parentIndex) {
            offset = 0 === groupIndex ? options.skip || 0 : options.skips[groupIndex - 1] || 0
        }
        if (groupIndex >= loadedGroupCount) {
            return items.length
        }
        for (var i = 0; i < items.length; i++) {
            var item = items[i];
            if (item) {
                path.push(item.key);
                if (!item.count && !item.items || void 0 === item.items) {
                    return -1
                }
                updateGroupInfoItem(that, item, isLastGroupLevel, path, offset + i);
                count = item.items ? updateGroupInfos(that, options, item.items, loadedGroupCount, groupIndex + 1, path, i) : item.count || -1;
                if (count < 0) {
                    return -1
                }
                totalCount += count;
                path.pop()
            }
        }
        return totalCount
    };
    var isGroupExpanded = function(groups, groupIndex) {
        return groups && groups.length && groups[groupIndex] && !!groups[groupIndex].isExpanded
    };
    var getTotalOffset = function(groupInfos, pageSize, offset) {
        var groupSize;
        var totalOffset = offset;
        for (var groupIndex = 0; groupIndex < groupInfos.length; groupIndex++) {
            groupSize = groupInfos[groupIndex].offset + 1;
            if (groupIndex > 0) {
                groupSize += groupInfos[groupIndex - 1].childrenTotalCount;
                if (pageSize) {
                    groupSize += getContinuationGroupCount(totalOffset, pageSize, groupSize, groupIndex - 1) * groupIndex
                }
            }
            totalOffset += groupSize
        }
        return totalOffset
    };

    function applyContinuationToGroupItem(options, expandedInfo, groupLevel, expandedItemIndex) {
        var item = expandedInfo.items[expandedItemIndex];
        var skip = options.skips && options.skips[groupLevel];
        var take = options.takes && options.takes[groupLevel];
        var isLastExpandedItem = expandedItemIndex === expandedInfo.items.length - 1;
        var isFirstExpandedItem = 0 === expandedItemIndex;
        var lastExpandedItemSkip = isFirstExpandedItem && skip || 0;
        var isItemsTruncatedByTake = item.count > take + lastExpandedItemSkip;
        if (isFirstExpandedItem && void 0 !== skip) {
            item.isContinuation = true
        }
        if (isLastExpandedItem && void 0 !== take && isItemsTruncatedByTake) {
            item.isContinuationOnNextPage = true
        }
    }

    function isDataDeferred(data) {
        return !Array.isArray(data)
    }

    function makeDataDeferred(options) {
        if (!isDataDeferred(options.data)) {
            options.data = new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_7__["Deferred"]
        }
    }

    function loadGroupItems(that, options, loadedGroupCount, expandedInfo, groupLevel, data) {
        if (!options.isCustomLoading) {
            expandedInfo = {};
            processGroupItems(that, data, loadedGroupCount, expandedInfo, []);
            ! function(options, expandedInfo, currentGroupCount) {
                var currentGroupIndex = currentGroupCount - 1;
                var groupCount = options.group ? options.group.length : 0;
                expandedInfo.skip = options.skips && options.skips[currentGroupIndex];
                if (options.takes && void 0 !== options.takes[currentGroupIndex]) {
                    if (groupCount === currentGroupCount) {
                        expandedInfo.take = expandedInfo.count ? expandedInfo.count - (expandedInfo.skip || 0) : 0
                    } else {
                        expandedInfo.take = 0
                    }
                    expandedInfo.take += options.takes[currentGroupIndex]
                }
            }(options, expandedInfo, loadedGroupCount)
        }
        var groupCount = options.group ? options.group.length : 0;
        if (expandedInfo.paths.length && groupCount - loadedGroupCount > 0) {
            makeDataDeferred(options);
            ! function(that, options, expandedInfo, loadedGroupCount, groupLevel, data) {
                var groups = options.group || [];
                var currentGroup = groups[groupLevel + 1];
                var deferreds = [];
                Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_1__["each"])(expandedInfo.paths, (function(expandedItemIndex) {
                    var loadOptions = {
                        requireTotalCount: false,
                        requireGroupCount: true,
                        group: [currentGroup],
                        groupSummary: options.storeLoadOptions.groupSummary,
                        filter: Object(_ui_data_grid_utils__WEBPACK_IMPORTED_MODULE_4__["createGroupFilter"])(expandedInfo.paths[expandedItemIndex], {
                            filter: options.storeLoadOptions.filter,
                            group: groups
                        }),
                        select: options.storeLoadOptions.select
                    };
                    if (0 === expandedItemIndex) {
                        loadOptions.skip = expandedInfo.skip || 0
                    }
                    if (expandedItemIndex === expandedInfo.paths.length - 1) {
                        loadOptions.take = expandedInfo.take
                    }
                    var loadResult = 0 === loadOptions.take ? [] : that._dataSource.loadFromStore(loadOptions);
                    Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_7__["when"])(loadResult).done((function(data) {
                        var item = expandedInfo.items[expandedItemIndex];
                        applyContinuationToGroupItem(options, expandedInfo, groupLevel, expandedItemIndex);
                        item.items = data
                    }));
                    deferreds.push(loadResult)
                }));
                _core_utils_deferred__WEBPACK_IMPORTED_MODULE_7__["when"].apply(null, deferreds).done((function() {
                    updateGroupInfos(that, options, data, loadedGroupCount + 1);
                    loadGroupItems(that, options, loadedGroupCount + 1, expandedInfo, groupLevel + 1, data)
                }))
            }(that, options, expandedInfo, loadedGroupCount, groupLevel, data)
        } else if (expandedInfo.paths.length && options.storeLoadOptions.group) {
            makeDataDeferred(options);
            ! function(that, options, expandedInfo, data) {
                var expandedFilters = [];
                var groups = options.group || [];
                Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_1__["each"])(expandedInfo.paths, (function(_, expandedPath) {
                    expandedFilters.push(Object(_ui_data_grid_utils__WEBPACK_IMPORTED_MODULE_4__["createGroupFilter"])(expandedPath, {
                        group: options.isCustomLoading ? options.storeLoadOptions.group : groups
                    }))
                }));
                var filter = options.storeLoadOptions.filter;
                if (!options.storeLoadOptions.isLoadingAll) {
                    filter = _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_2__["default"].combineFilters([filter, _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_2__["default"].combineFilters(expandedFilters, "or")])
                }
                var loadOptions = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, options.storeLoadOptions, {
                    requireTotalCount: false,
                    requireGroupCount: false,
                    group: null,
                    sort: groups.concat(_ui_data_grid_core__WEBPACK_IMPORTED_MODULE_2__["default"].normalizeSortingInfo(options.storeLoadOptions.sort || [])),
                    filter: filter
                });
                var isPagingLocal = that._dataSource.isLastLevelGroupItemsPagingLocal();
                if (!isPagingLocal) {
                    loadOptions.skip = expandedInfo.skip;
                    loadOptions.take = expandedInfo.take
                }
                Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_7__["when"])(0 === expandedInfo.take ? [] : that._dataSource.loadFromStore(loadOptions)).done((function(items, extra) {
                    if (isPagingLocal) {
                        items = that._dataSource.sortLastLevelGroupItems(items, groups, expandedInfo.paths);
                        items = expandedInfo.skip ? items.slice(expandedInfo.skip) : items;
                        items = expandedInfo.take ? items.slice(0, expandedInfo.take) : items
                    }
                    Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_1__["each"])(expandedInfo.items, (function(index, item) {
                        var itemCount = item.count - (0 === index && expandedInfo.skip || 0);
                        var expandedItems = items.splice(0, itemCount);
                        applyContinuationToGroupItem(options, expandedInfo, groups.length - 1, index);
                        item.items = expandedItems
                    }));
                    options.data.resolve(data)
                })).fail(options.data.reject)
            }(that, options, expandedInfo, data)
        } else if (isDataDeferred(options.data)) {
            options.data.resolve(data)
        }
    }
    var loadGroupTotalCount = function(dataSource, options) {
        var d = new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_7__["Deferred"];
        var isGrouping = !!(options.group && options.group.length);
        var loadOptions = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_0__["extend"])({
            skip: 0,
            take: 1,
            requireGroupCount: isGrouping,
            requireTotalCount: !isGrouping
        }, options, {
            group: isGrouping ? options.group : null
        });
        dataSource.load(loadOptions).done((function(data, extra) {
            var count = extra && (isGrouping ? extra.groupCount : extra.totalCount);
            if (!isFinite(count)) {
                d.reject(_data_errors__WEBPACK_IMPORTED_MODULE_6__["errors"].Error(isGrouping ? "E4022" : "E4021"));
                return
            }
            d.resolve(count)
        })).fail(d.reject.bind(d));
        return d
    };
    return {
        updateTotalItemsCount: function(options) {
            var totalItemsCount = 0;
            var totalCount = options.extra && options.extra.totalCount || 0;
            var groupCount = options.extra && options.extra.groupCount || 0;
            var pageSize = this._dataSource.pageSize();
            var isVirtualPaging = this._isVirtualPaging();
            foreachExpandedGroups(this, (function(groupInfo) {
                groupInfo.childrenTotalCount = 0
            }));
            foreachExpandedGroups(this, (function(groupInfo, parents) {
                var totalOffset = getTotalOffset(parents, isVirtualPaging ? 0 : pageSize, totalItemsCount);
                var count = groupInfo.count + groupInfo.childrenTotalCount;
                if (!isVirtualPaging) {
                    count += getContinuationGroupCount(totalOffset, pageSize, count, parents.length - 1)
                }
                if (parents[parents.length - 2]) {
                    parents[parents.length - 2].childrenTotalCount += count
                } else {
                    totalItemsCount += count
                }
            }));
            this.callBase(totalItemsCount - totalCount + groupCount)
        },
        _isGroupExpanded: function(groupIndex) {
            var groups = this._dataSource.group();
            return isGroupExpanded(groups, groupIndex)
        },
        _updatePagingOptions: function(options, callback) {
            var isVirtualPaging = this._isVirtualPaging();
            var pageSize = this._dataSource.pageSize();
            var skips = [];
            var takes = [];
            var skipChildrenTotalCount = 0;
            var childrenTotalCount = 0;
            if (options.take) {
                foreachExpandedGroups(this, (function(groupInfo) {
                    groupInfo.childrenTotalCount = 0;
                    groupInfo.skipChildrenTotalCount = 0
                }));
                foreachExpandedGroups(this, (function(groupInfo, parents) {
                    var take;
                    var takeCorrection = 0;
                    var parentTakeCorrection = 0;
                    var totalOffset = getTotalOffset(parents, isVirtualPaging ? 0 : pageSize, childrenTotalCount);
                    var continuationGroupCount = 0;
                    var skipContinuationGroupCount = 0;
                    var groupInfoCount = groupInfo.count + groupInfo.childrenTotalCount;
                    var childrenGroupInfoCount = groupInfoCount;
                    callback && callback(groupInfo, totalOffset);
                    var skip = options.skip - totalOffset;
                    if (totalOffset <= options.skip + options.take && groupInfoCount) {
                        take = options.take;
                        if (!isVirtualPaging) {
                            continuationGroupCount = getContinuationGroupCount(totalOffset, pageSize, groupInfoCount, parents.length - 1);
                            groupInfoCount += continuationGroupCount * parents.length;
                            childrenGroupInfoCount += continuationGroupCount;
                            if (pageSize && skip >= 0) {
                                takeCorrection = parents.length;
                                parentTakeCorrection = parents.length - 1;
                                skipContinuationGroupCount = Math.floor(skip / pageSize)
                            }
                        }
                        if (skip >= 0) {
                            if (totalOffset + groupInfoCount > options.skip) {
                                skips.unshift(skip - skipContinuationGroupCount * takeCorrection - groupInfo.skipChildrenTotalCount)
                            }
                            if (totalOffset + groupInfoCount >= options.skip + take) {
                                takes.unshift(take - takeCorrection - groupInfo.childrenTotalCount + groupInfo.skipChildrenTotalCount)
                            }
                        } else if (totalOffset + groupInfoCount >= options.skip + take) {
                            takes.unshift(take + skip - groupInfo.childrenTotalCount)
                        }
                    }
                    if (totalOffset <= options.skip) {
                        if (parents[parents.length - 2]) {
                            parents[parents.length - 2].skipChildrenTotalCount += Math.min(childrenGroupInfoCount, skip + 1 - skipContinuationGroupCount * parentTakeCorrection)
                        } else {
                            skipChildrenTotalCount += Math.min(childrenGroupInfoCount, skip + 1)
                        }
                    }
                    if (totalOffset <= options.skip + take) {
                        groupInfoCount = Math.min(childrenGroupInfoCount, skip + take - (skipContinuationGroupCount + 1) * parentTakeCorrection);
                        if (parents[parents.length - 2]) {
                            parents[parents.length - 2].childrenTotalCount += groupInfoCount
                        } else {
                            childrenTotalCount += groupInfoCount
                        }
                    }
                }));
                options.skip -= skipChildrenTotalCount;
                options.take -= childrenTotalCount - skipChildrenTotalCount
            }
            options.skips = skips;
            options.takes = takes
        },
        changeRowExpand: function(path) {
            var groupInfo = this.findGroupInfo(path);
            var dataSource = this._dataSource;
            var remoteGroupPaging = dataSource.remoteOperations().groupPaging;
            var groups = _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_2__["default"].normalizeSortingInfo(dataSource.group());
            if (groupInfo) {
                groupInfo.isExpanded = !groupInfo.isExpanded;
                if (remoteGroupPaging && groupInfo.isExpanded && path.length < groups.length) {
                    return loadGroupTotalCount(dataSource, {
                        filter: Object(_ui_data_grid_utils__WEBPACK_IMPORTED_MODULE_4__["createGroupFilter"])(path, {
                            filter: dataSource.lastLoadOptions().filter,
                            group: dataSource.group()
                        }),
                        group: [groups[path.length]],
                        select: dataSource.select()
                    }).done((function(groupCount) {
                        groupInfo.count = groupCount
                    }))
                }
                return (new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_7__["Deferred"]).resolve()
            }
            return (new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_7__["Deferred"]).reject()
        },
        handleDataLoading: function(options) {
            var storeLoadOptions = options.storeLoadOptions;
            var groups = _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_2__["default"].normalizeSortingInfo(storeLoadOptions.group || options.loadOptions.group);
            if (options.isCustomLoading || !groups.length) {
                return
            }
            if (options.remoteOperations.grouping) {
                var remotePaging = this._dataSource.remoteOperations().paging;
                storeLoadOptions.group = _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_2__["default"].normalizeSortingInfo(storeLoadOptions.group);
                storeLoadOptions.group.forEach((function(group, index) {
                    var isLastGroup = index === storeLoadOptions.group.length - 1;
                    group.isExpanded = !remotePaging || !isLastGroup
                }))
            }
            options.group = options.group || groups;
            if (options.remoteOperations.paging) {
                options.skip = storeLoadOptions.skip;
                options.take = storeLoadOptions.take;
                storeLoadOptions.requireGroupCount = true;
                storeLoadOptions.group = groups.slice(0, 1);
                this._updatePagingOptions(options);
                storeLoadOptions.skip = options.skip;
                storeLoadOptions.take = options.take
            } else {
                options.skip = options.loadOptions.skip;
                options.take = options.loadOptions.take;
                this._updatePagingOptions(options)
            }
        },
        handleDataLoadedCore: function(options, callBase) {
            var loadedGroupCount = _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_2__["default"].normalizeSortingInfo(options.storeLoadOptions.group || options.loadOptions.group).length;
            var groupCount = options.group ? options.group.length : 0;
            var totalCount;
            var expandedInfo = {};
            if (options.isCustomLoading) {
                callBase(options);
                processGroupItems(this, options.data, loadedGroupCount, expandedInfo, [], options.isCustomLoading, options.storeLoadOptions.isLoadingAll)
            } else {
                if (!options.remoteOperations.paging) {
                    this.foreachGroups((function(groupInfo) {
                        groupInfo.count = 0
                    }))
                }
                totalCount = updateGroupInfos(this, options, options.data, loadedGroupCount);
                if (totalCount < 0) {
                    options.data = (new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_7__["Deferred"]).reject(_widget_ui_errors__WEBPACK_IMPORTED_MODULE_5__["default"].Error("E1037"));
                    return
                }
                if (!options.remoteOperations.paging) {
                    if (loadedGroupCount && options.extra && options.loadOptions.requireTotalCount) {
                        options.extra.totalCount = totalCount;
                        options.extra.groupCount = options.data.length
                    }
                }
                if (groupCount && options.storeLoadOptions.requireGroupCount && !isFinite(options.extra.groupCount)) {
                    options.data = (new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_7__["Deferred"]).reject(_data_errors__WEBPACK_IMPORTED_MODULE_6__["errors"].Error("E4022"));
                    return
                }
                this.updateTotalItemsCount(options);
                if (!options.remoteOperations.paging) {
                    this._updatePagingOptions(options)
                }
                callBase(options);
                if (!options.remoteOperations.paging) {
                    this._processPaging(options, loadedGroupCount)
                }
            }
            loadGroupItems(this, options, loadedGroupCount, expandedInfo, 0, options.data)
        },
        _processSkips: function(items, skips, groupCount) {
            if (!groupCount) {
                return
            }
            var firstItem = items[0];
            var skip = skips[0];
            var children = firstItem && firstItem.items;
            if (void 0 !== skip) {
                firstItem.isContinuation = true;
                if (children) {
                    firstItem.items = children.slice(skip);
                    this._processSkips(firstItem.items, skips.slice(1), groupCount - 1)
                }
            }
        },
        _processTakes: function(items, skips, takes, groupCount, parents) {
            if (!groupCount || !items) {
                return
            }
            parents = parents || [];
            var lastItem = items[items.length - 1];
            var children = lastItem && lastItem.items;
            var take = takes[0];
            var skip = skips[0];
            if (lastItem) {
                var maxTakeCount = lastItem.count - (lastItem.isContinuation && skip || 0) || children.length;
                if (void 0 !== take && maxTakeCount > take) {
                    lastItem.isContinuationOnNextPage = true;
                    parents.forEach((function(parent) {
                        parent.isContinuationOnNextPage = true
                    }));
                    if (children) {
                        children = children.slice(0, take);
                        lastItem.items = children
                    }
                }
                parents.push(lastItem);
                this._processTakes(children, skips.slice(1), takes.slice(1), groupCount - 1, parents)
            }
        },
        _processPaging: function(options, groupCount) {
            this._processSkips(options.data, options.skips, groupCount);
            this._processTakes(options.data, options.skips, options.takes, groupCount)
        },
        isLastLevelGroupItemsPagingLocal: function() {
            return false
        },
        sortLastLevelGroupItems: function(items) {
            return items
        },
        refresh: function(options, operationTypes) {
            var that = this;
            var dataSource = that._dataSource;
            var storeLoadOptions = options.storeLoadOptions;
            var group = options.group || options.storeLoadOptions.group;
            var oldGroups = _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_2__["default"].normalizeSortingInfo(that._group);
            var isExpanded;
            var groupIndex;

            function handleGroup(groupInfo, parents) {
                if (parents.length === groupIndex + 1) {
                    groupInfo.isExpanded = isExpanded
                }
            }
            for (groupIndex = 0; groupIndex < oldGroups.length; groupIndex++) {
                isExpanded = isGroupExpanded(group, groupIndex);
                if (isGroupExpanded(that._group, groupIndex) !== isExpanded) {
                    that.foreachGroups(handleGroup)
                }
            }
            that.callBase.apply(this, arguments);
            if (group && options.remoteOperations.paging && operationTypes.reload) {
                return foreachExpandedGroups(that, (function(groupInfo) {
                    var groupCountQuery = loadGroupTotalCount(dataSource, {
                        filter: Object(_ui_data_grid_utils__WEBPACK_IMPORTED_MODULE_4__["createGroupFilter"])(groupInfo.path, {
                            filter: storeLoadOptions.filter,
                            group: group
                        }),
                        group: group.slice(groupInfo.path.length),
                        select: storeLoadOptions.select
                    });
                    var groupOffsetQuery = loadGroupTotalCount(dataSource, {
                        filter: Object(_ui_data_grid_grouping_core__WEBPACK_IMPORTED_MODULE_3__["createOffsetFilter"])(groupInfo.path, {
                            filter: storeLoadOptions.filter,
                            group: group
                        }, true),
                        group: group.slice(groupInfo.path.length - 1, groupInfo.path.length),
                        select: storeLoadOptions.select
                    });
                    return Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_7__["when"])(groupOffsetQuery, groupCountQuery).done((function(offset, count) {
                        offset = parseInt(offset.length ? offset[0] : offset);
                        count = parseInt(count.length ? count[0] : count);
                        groupInfo.offset = offset;
                        if (groupInfo.count !== count) {
                            groupInfo.count = count;
                            that.updateTotalItemsCount(options)
                        }
                    }))
                }), true)
            }
        }
    }
}());


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.grouping.core.js":
/*!********************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.grouping.core.js ***!
  \********************************************************************************/
/*! exports provided: createOffsetFilter, GroupingHelper */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createOffsetFilter", function() { return createOffsetFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GroupingHelper", function() { return GroupingHelper; });
/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/renderer */ "./node_modules/devextreme/esm/core/renderer.js");
/* harmony import */ var _core_class__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/class */ "./node_modules/devextreme/esm/core/class.js");
/* harmony import */ var _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ui.data_grid.core */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.core.js");
/* harmony import */ var _data_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../data/utils */ "./node_modules/devextreme/esm/data/utils.js");
/* harmony import */ var _core_utils_deferred__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/utils/deferred */ "./node_modules/devextreme/esm/core/utils/deferred.js");
/**
 * DevExtreme (esm/ui/data_grid/ui.data_grid.grouping.core.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */





function createOffsetFilter(path, storeLoadOptions, lastLevelOnly) {
    var groups = Object(_data_utils__WEBPACK_IMPORTED_MODULE_3__["normalizeSortingInfo"])(storeLoadOptions.group);
    var filter = [];
    for (var i = lastLevelOnly ? path.length - 1 : 0; i < path.length; i++) {
        var filterElement = [];
        for (var j = 0; j <= i; j++) {
            var selector = groups[j].selector;
            if (i === j && (null === path[j] || false === path[j] || true === path[j])) {
                if (false === path[j]) {
                    filterElement.push([selector, "=", groups[j].desc ? true : null])
                } else if (path[j] ? !groups[j].desc : groups[j].desc) {
                    filterElement.push([selector, "<>", path[j]])
                } else {
                    filterElement.push([selector, "<>", null]);
                    filterElement.push([selector, "=", null])
                }
            } else {
                var currentFilter = [selector, i === j ? groups[j].desc ? ">" : "<" : "=", path[j]];
                if ("<" === currentFilter[1]) {
                    filterElement.push([currentFilter, "or", [selector, "=", null]])
                } else {
                    filterElement.push(currentFilter)
                }
            }
        }
        filter.push(_ui_data_grid_core__WEBPACK_IMPORTED_MODULE_2__["default"].combineFilters(filterElement))
    }
    filter = _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_2__["default"].combineFilters(filter, "or");
    return _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_2__["default"].combineFilters([filter, storeLoadOptions.filter])
}
var GroupingHelper = _core_class__WEBPACK_IMPORTED_MODULE_1__["default"].inherit(function() {
    var findGroupInfoByKey = function(groupsInfo, key) {
        var hash = groupsInfo.hash;
        return hash && hash[JSON.stringify(key)]
    };
    var getGroupInfoIndexByOffset = function(groupsInfo, offset) {
        var leftIndex = 0;
        var rightIndex = groupsInfo.length - 1;
        if (!groupsInfo.length) {
            return 0
        }
        do {
            var middleIndex = rightIndex + leftIndex >> 1;
            if (groupsInfo[middleIndex].offset > offset) {
                rightIndex = middleIndex
            } else {
                leftIndex = middleIndex
            }
        } while (rightIndex - leftIndex > 1);
        var index;
        for (index = leftIndex; index <= rightIndex; index++) {
            if (groupsInfo[index].offset > offset) {
                break
            }
        }
        return index
    };
    return {
        ctor: function(dataSourceAdapter) {
            this._dataSource = dataSourceAdapter;
            this.reset()
        },
        reset: function() {
            this._groupsInfo = [];
            this._totalCountCorrection = 0
        },
        totalCountCorrection: function() {
            return this._totalCountCorrection
        },
        updateTotalItemsCount: function(totalCountCorrection) {
            this._totalCountCorrection = totalCountCorrection || 0
        },
        isGroupItemCountable: function(item) {
            return !this._isVirtualPaging() || !item.isContinuation
        },
        _isVirtualPaging: function() {
            var scrollingMode = this._dataSource.option("scrolling.mode");
            return "virtual" === scrollingMode || "infinite" === scrollingMode
        },
        itemsCount: function() {
            var dataSourceAdapter = this._dataSource;
            var dataSource = dataSourceAdapter._dataSource;
            var groupCount = _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_2__["default"].normalizeSortingInfo(dataSource.group() || []).length;
            var itemsCount = function calculateItemsCount(that, items, groupsCount) {
                var result = 0;
                if (items) {
                    if (!groupsCount) {
                        result = items.length
                    } else {
                        for (var i = 0; i < items.length; i++) {
                            if (that.isGroupItemCountable(items[i])) {
                                result++
                            }
                            result += calculateItemsCount(that, items[i].items, groupsCount - 1)
                        }
                    }
                }
                return result
            }(this, dataSource.items(), groupCount);
            return itemsCount
        },
        foreachGroups: function(callback, childrenAtFirst, foreachCollapsedGroups, updateOffsets, updateParentOffsets) {
            var that = this;
            return function foreachGroupsCore(groupsInfo, callback, childrenAtFirst, parents) {
                var callbackResults = [];

                function executeCallback(callback, data, parents, callbackResults) {
                    var callbackResult = data && callback(data, parents);
                    callbackResult && callbackResults.push(callbackResult);
                    return callbackResult
                }
                for (var i = 0; i < groupsInfo.length; i++) {
                    parents.push(groupsInfo[i].data);
                    if (!childrenAtFirst && false === executeCallback(callback, groupsInfo[i].data, parents, callbackResults)) {
                        return false
                    }
                    if (!groupsInfo[i].data || groupsInfo[i].data.isExpanded || foreachCollapsedGroups) {
                        var children = groupsInfo[i].children;
                        var callbackResult = children.length && foreachGroupsCore(children, callback, childrenAtFirst, parents);
                        callbackResult && callbackResults.push(callbackResult);
                        if (false === callbackResult) {
                            return false
                        }
                    }
                    if (childrenAtFirst && false === executeCallback(callback, groupsInfo[i].data, parents, callbackResults)) {
                        return false
                    }
                    if (!groupsInfo[i].data || groupsInfo[i].data.offset !== groupsInfo[i].offset) {
                        updateOffsets = true
                    }
                    parents.pop()
                }
                var currentParents = updateParentOffsets && parents.slice(0);
                return updateOffsets && _core_utils_deferred__WEBPACK_IMPORTED_MODULE_4__["when"].apply(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"], callbackResults).always((function() {
                    that._updateGroupInfoOffsets(groupsInfo, currentParents)
                }))
            }(that._groupsInfo, callback, childrenAtFirst, [])
        },
        _updateGroupInfoOffsets: function(groupsInfo, parents) {
            parents = parents || [];
            for (var index = 0; index < groupsInfo.length; index++) {
                var groupInfo = groupsInfo[index];
                if (groupInfo.data && groupInfo.data.offset !== groupInfo.offset) {
                    groupInfo.offset = groupInfo.data.offset;
                    for (var parentIndex = 0; parentIndex < parents.length; parentIndex++) {
                        parents[parentIndex].offset = groupInfo.offset
                    }
                }
            }
            groupsInfo.sort((function(a, b) {
                return a.offset - b.offset
            }))
        },
        findGroupInfo: function(path) {
            var groupInfo;
            var groupsInfo = this._groupsInfo;
            for (var pathIndex = 0; groupsInfo && pathIndex < path.length; pathIndex++) {
                groupInfo = findGroupInfoByKey(groupsInfo, path[pathIndex]);
                groupsInfo = groupInfo && groupInfo.children
            }
            return groupInfo && groupInfo.data
        },
        addGroupInfo: function(groupInfoData) {
            var groupInfo;
            var path = groupInfoData.path;
            var groupsInfo = this._groupsInfo;
            for (var pathIndex = 0; pathIndex < path.length; pathIndex++) {
                groupInfo = findGroupInfoByKey(groupsInfo, path[pathIndex]);
                if (!groupInfo) {
                    groupInfo = {
                        key: path[pathIndex],
                        offset: groupInfoData.offset,
                        data: {
                            offset: groupInfoData.offset,
                            isExpanded: true,
                            path: path.slice(0, pathIndex + 1)
                        },
                        children: []
                    };
                    var index = getGroupInfoIndexByOffset(groupsInfo, groupInfoData.offset);
                    groupsInfo.splice(index, 0, groupInfo);
                    groupsInfo.hash = groupsInfo.hash || {};
                    groupsInfo.hash[JSON.stringify(groupInfo.key)] = groupInfo
                }
                if (pathIndex === path.length - 1) {
                    groupInfo.data = groupInfoData;
                    if (groupInfo.offset !== groupInfoData.offset) {
                        this._updateGroupInfoOffsets(groupsInfo)
                    }
                }
                groupsInfo = groupInfo.children
            }
        },
        allowCollapseAll: function() {
            return true
        },
        refresh: function(options) {
            var storeLoadOptions = options.storeLoadOptions;
            var groups = Object(_data_utils__WEBPACK_IMPORTED_MODULE_3__["normalizeSortingInfo"])(storeLoadOptions.group || []);
            var oldGroups = "_group" in this ? Object(_data_utils__WEBPACK_IMPORTED_MODULE_3__["normalizeSortingInfo"])(this._group || []) : groups;
            var groupsCount = Math.min(oldGroups.length, groups.length);
            this._group = storeLoadOptions.group;
            for (var groupIndex = 0; groupIndex < groupsCount; groupIndex++) {
                if (oldGroups[groupIndex].selector !== groups[groupIndex].selector) {
                    groupsCount = groupIndex;
                    break
                }
            }
            if (!groupsCount) {
                this.reset()
            } else {
                ! function cleanGroupsInfo(groupsInfo, groupIndex, groupsCount) {
                    for (var i = 0; i < groupsInfo.length; i++) {
                        if (groupIndex + 1 >= groupsCount) {
                            groupsInfo[i].children = []
                        } else {
                            cleanGroupsInfo(groupsInfo[i].children, groupIndex + 1, groupsCount)
                        }
                    }
                }(this._groupsInfo, 0, groupsCount)
            }
        },
        handleDataLoading: function() {},
        handleDataLoaded: function(options, callBase) {
            callBase(options)
        },
        handleDataLoadedCore: function(options, callBase) {
            callBase(options)
        }
    }
}());


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.grouping.expanded.js":
/*!************************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.grouping.expanded.js ***!
  \************************************************************************************/
/*! exports provided: GroupingHelper */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GroupingHelper", function() { return GroupingHelper; });
/* harmony import */ var _core_utils_data__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/utils/data */ "./node_modules/devextreme/esm/core/utils/data.js");
/* harmony import */ var _data_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../data/utils */ "./node_modules/devextreme/esm/data/utils.js");
/* harmony import */ var _core_utils_iterator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/utils/iterator */ "./node_modules/devextreme/esm/core/utils/iterator.js");
/* harmony import */ var _core_utils_extend__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/utils/extend */ "./node_modules/devextreme/esm/core/utils/extend.js");
/* harmony import */ var _data_store_helper__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../data/store_helper */ "./node_modules/devextreme/esm/data/store_helper.js");
/* harmony import */ var _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ui.data_grid.core */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.core.js");
/* harmony import */ var _ui_data_grid_grouping_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ui.data_grid.grouping.core */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.grouping.core.js");
/* harmony import */ var _ui_data_grid_utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ui.data_grid.utils */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.utils.js");
/* harmony import */ var _data_query__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../data/query */ "./node_modules/devextreme/esm/data/query.js");
/* harmony import */ var _core_utils_deferred__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../core/utils/deferred */ "./node_modules/devextreme/esm/core/utils/deferred.js");
/**
 * DevExtreme (esm/ui/data_grid/ui.data_grid.grouping.expanded.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */










var loadTotalCount = function(dataSource, options) {
    var d = new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_9__["Deferred"];
    var loadOptions = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_3__["extend"])({
        skip: 0,
        take: 1,
        requireTotalCount: true
    }, options);
    dataSource.load(loadOptions).done((function(data, extra) {
        d.resolve(extra && extra.totalCount)
    })).fail(d.reject.bind(d));
    return d
};
var GroupingHelper = _ui_data_grid_grouping_core__WEBPACK_IMPORTED_MODULE_6__["GroupingHelper"].inherit(function() {
    var foreachCollapsedGroups = function(that, callback, updateOffsets) {
        return that.foreachGroups((function(groupInfo) {
            if (!groupInfo.isExpanded) {
                return callback(groupInfo)
            }
        }), false, false, updateOffsets, true)
    };
    var correctSkipLoadOption = function(that, skip) {
        var skipCorrection = 0;
        var resultSkip = skip || 0;
        if (skip) {
            foreachCollapsedGroups(that, (function(groupInfo) {
                if (groupInfo.offset - skipCorrection >= skip) {
                    return false
                }
                skipCorrection += groupInfo.count - 1
            }));
            resultSkip += skipCorrection
        }
        return resultSkip
    };
    var pathEquals = function(path1, path2) {
        if (path1.length !== path2.length) {
            return false
        }
        for (var i = 0; i < path1.length; i++) {
            if (!Object(_data_utils__WEBPACK_IMPORTED_MODULE_1__["keysEqual"])(null, path1[i], path2[i])) {
                return false
            }
        }
        return true
    };
    var updateGroupOffsets = function updateGroupOffsets(that, items, path, offset, additionalGroupInfo) {
        if (!items) {
            return
        }
        for (var i = 0; i < items.length; i++) {
            var item = items[i];
            if ("key" in item && void 0 !== item.items) {
                path.push(item.key);
                if (additionalGroupInfo && pathEquals(additionalGroupInfo.path, path) && !item.isContinuation) {
                    additionalGroupInfo.offset = offset
                }
                var groupInfo = that.findGroupInfo(path);
                if (groupInfo && !item.isContinuation) {
                    groupInfo.offset = offset
                }
                if (groupInfo && !groupInfo.isExpanded) {
                    offset += groupInfo.count
                } else {
                    offset = updateGroupOffsets(that, item.items, path, offset, additionalGroupInfo)
                }
                path.pop()
            } else {
                offset++
            }
        }
        return offset
    };
    var getGroupCount = function getGroupCount(item, groupCount) {
        var count = item.count || item.items.length;
        if (!item.count && groupCount > 1) {
            count = 0;
            for (var i = 0; i < item.items.length; i++) {
                count += getGroupCount(item.items[i], groupCount - 1)
            }
        }
        return count
    };
    return {
        handleDataLoading: function(options) {
            var storeLoadOptions = options.storeLoadOptions;
            var collapsedGroups = [];
            var collapsedItemsCount = 0;
            var skipFirstItem = false;
            var take;
            var group = options.loadOptions.group;
            var skipCorrection = 0;
            ! function(storeLoadOptions, loadOptions) {
                if (loadOptions.group) {
                    var groups = _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_5__["default"].normalizeSortingInfo(loadOptions.group);
                    var sorts = _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_5__["default"].normalizeSortingInfo(storeLoadOptions.sort);
                    storeLoadOptions.sort = _data_store_helper__WEBPACK_IMPORTED_MODULE_4__["default"].arrangeSortingInfo(groups, sorts);
                    delete loadOptions.group
                }
            }(storeLoadOptions, options.loadOptions);
            options.group = options.group || group;
            if (options.isCustomLoading) {
                return
            }
            var loadOptions = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_3__["extend"])({}, storeLoadOptions);
            loadOptions.skip = correctSkipLoadOption(this, storeLoadOptions.skip);
            if (loadOptions.skip && loadOptions.take && group) {
                loadOptions.skip--;
                loadOptions.take++;
                skipFirstItem = true
            }
            if (loadOptions.take && group) {
                take = loadOptions.take;
                loadOptions.take++
            }
            foreachCollapsedGroups(this, (function(groupInfo) {
                if (groupInfo.offset >= loadOptions.skip + loadOptions.take + skipCorrection) {
                    return false
                } else if (groupInfo.offset >= loadOptions.skip + skipCorrection && groupInfo.count) {
                    skipCorrection += groupInfo.count - 1;
                    collapsedGroups.push(groupInfo);
                    collapsedItemsCount += groupInfo.count
                }
            }));
            Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_2__["each"])(collapsedGroups, (function() {
                loadOptions.filter = function(path, storeLoadOptions, group) {
                    var groups = _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_5__["default"].normalizeSortingInfo(group || storeLoadOptions.group);
                    var filter = [];
                    for (var i = 0; i < path.length; i++) {
                        var filterElement = [];
                        for (var j = 0; j <= i; j++) {
                            filterElement.push([groups[j].selector, i === j ? "<>" : "=", path[j]])
                        }
                        filter.push(_ui_data_grid_core__WEBPACK_IMPORTED_MODULE_5__["default"].combineFilters(filterElement))
                    }
                    filter = _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_5__["default"].combineFilters(filter, "or");
                    return _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_5__["default"].combineFilters([filter, storeLoadOptions.filter])
                }(this.path, loadOptions, group)
            }));
            options.storeLoadOptions = loadOptions;
            options.collapsedGroups = collapsedGroups;
            options.collapsedItemsCount = collapsedItemsCount;
            options.skip = loadOptions.skip || 0;
            options.skipFirstItem = skipFirstItem;
            options.take = take
        },
        handleDataLoaded: function(options, callBase) {
            var collapsedGroups = options.collapsedGroups;
            var groups = _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_5__["default"].normalizeSortingInfo(options.group);
            var groupCount = groups.length;

            function appendCollapsedPath(data, path, groups, collapsedGroup, offset) {
                if (!data || !path.length || !groups.length) {
                    return
                }
                var keyValue;
                var i;
                var pathValue = Object(_core_utils_data__WEBPACK_IMPORTED_MODULE_0__["toComparable"])(path[0], true);
                for (i = 0; i < data.length; i++) {
                    keyValue = Object(_core_utils_data__WEBPACK_IMPORTED_MODULE_0__["toComparable"])(data[i].key, true);
                    if (offset >= collapsedGroup.offset || pathValue === keyValue) {
                        break
                    } else {
                        offset += getGroupCount(data[i], groups.length)
                    }
                }
                if (!data.length || pathValue !== keyValue) {
                    data.splice(i, 0, {
                        key: path[0],
                        items: [],
                        count: 1 === path.length ? collapsedGroup.count : void 0
                    })
                }
                appendCollapsedPath(data[i].items, path.slice(1), groups.slice(1), collapsedGroup, offset)
            }
            if (options.collapsedItemsCount && options.extra && options.extra.totalCount >= 0) {
                options.extra.totalCount += options.collapsedItemsCount
            }
            callBase(options);
            if (groupCount) {
                var data = options.data;
                var query = Object(_data_query__WEBPACK_IMPORTED_MODULE_8__["default"])(data);
                _data_store_helper__WEBPACK_IMPORTED_MODULE_4__["default"].multiLevelGroup(query, groups).enumerate().done((function(groupedData) {
                    data = groupedData
                }));
                if (collapsedGroups) {
                    for (var pathIndex = 0; pathIndex < collapsedGroups.length; pathIndex++) {
                        appendCollapsedPath(data, collapsedGroups[pathIndex].path, groups, collapsedGroups[pathIndex], options.skip)
                    }
                }
                if (!options.isCustomLoading) {
                    ! function processGroupItems(that, items, path, offset, skipFirstItem, take) {
                        var removeLastItemsCount = 0;
                        var needRemoveFirstItem = false;
                        for (var i = 0; i < items.length; i++) {
                            var item = items[i];
                            if (void 0 !== item.items) {
                                path.push(item.key);
                                var groupInfo = that.findGroupInfo(path);
                                if (groupInfo && !groupInfo.isExpanded) {
                                    item.collapsedItems = item.items;
                                    item.items = null;
                                    offset += groupInfo.count;
                                    take--;
                                    if (take < 0) {
                                        removeLastItemsCount++
                                    }
                                    if (skipFirstItem) {
                                        needRemoveFirstItem = true
                                    }
                                } else if (item.items) {
                                    var offsetInfo = processGroupItems(that, item.items, path, offset, skipFirstItem, take);
                                    if (skipFirstItem) {
                                        if (offsetInfo.offset - offset > 1) {
                                            item.isContinuation = true
                                        } else {
                                            needRemoveFirstItem = true
                                        }
                                    }
                                    offset = offsetInfo.offset;
                                    take = offsetInfo.take;
                                    if (take < 0) {
                                        if (item.items.length) {
                                            item.isContinuationOnNextPage = true
                                        } else {
                                            removeLastItemsCount++
                                        }
                                    }
                                }
                                path.pop()
                            } else {
                                if (skipFirstItem) {
                                    needRemoveFirstItem = true
                                }
                                offset++;
                                take--;
                                if (take < 0) {
                                    removeLastItemsCount++
                                }
                            }
                            skipFirstItem = false
                        }
                        if (needRemoveFirstItem) {
                            items.splice(0, 1)
                        }
                        if (removeLastItemsCount) {
                            items.splice(-removeLastItemsCount, removeLastItemsCount)
                        }
                        return {
                            offset: offset,
                            take: take
                        }
                    }(this, data, [], options.skip, options.skipFirstItem, options.take)
                }
                options.data = data
            }
        },
        isGroupItemCountable: function(item) {
            return null === item.items
        },
        updateTotalItemsCount: function() {
            var itemsCountCorrection = 0;
            foreachCollapsedGroups(this, (function(groupInfo) {
                if (groupInfo.count) {
                    itemsCountCorrection -= groupInfo.count - 1
                }
            }));
            this.callBase(itemsCountCorrection)
        },
        changeRowExpand: function(path) {
            var that = this;
            var dataSource = that._dataSource;
            var beginPageIndex = dataSource.beginPageIndex ? dataSource.beginPageIndex() : dataSource.pageIndex();
            var dataSourceItems = dataSource.items();
            var offset = correctSkipLoadOption(that, beginPageIndex * dataSource.pageSize());
            var groupInfo = that.findGroupInfo(path);
            var groupCountQuery;
            if (groupInfo && !groupInfo.isExpanded) {
                groupCountQuery = (new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_9__["Deferred"]).resolve(groupInfo.count)
            } else {
                groupCountQuery = loadTotalCount(dataSource, {
                    filter: Object(_ui_data_grid_utils__WEBPACK_IMPORTED_MODULE_7__["createGroupFilter"])(path, {
                        filter: dataSource.filter(),
                        group: dataSource.group()
                    })
                })
            }
            return Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_9__["when"])(groupCountQuery).done((function(count) {
                count = parseInt(count.length ? count[0] : count);
                if (groupInfo) {
                    updateGroupOffsets(that, dataSourceItems, [], offset);
                    groupInfo.isExpanded = !groupInfo.isExpanded;
                    groupInfo.count = count
                } else {
                    groupInfo = {
                        offset: -1,
                        count: count,
                        path: path,
                        isExpanded: false
                    };
                    updateGroupOffsets(that, dataSourceItems, [], offset, groupInfo);
                    if (groupInfo.offset >= 0) {
                        that.addGroupInfo(groupInfo)
                    }
                }
                that.updateTotalItemsCount()
            })).fail((function() {
                dataSource._eventsStrategy.fireEvent("loadError", arguments)
            }))
        },
        allowCollapseAll: function() {
            return false
        },
        refresh: function(options, operationTypes) {
            var that = this;
            var storeLoadOptions = options.storeLoadOptions;
            var dataSource = that._dataSource;
            this.callBase.apply(this, arguments);
            if (operationTypes.reload) {
                return foreachCollapsedGroups(that, (function(groupInfo) {
                    var groupCountQuery = loadTotalCount(dataSource, {
                        filter: Object(_ui_data_grid_utils__WEBPACK_IMPORTED_MODULE_7__["createGroupFilter"])(groupInfo.path, storeLoadOptions)
                    });
                    var groupOffsetQuery = loadTotalCount(dataSource, {
                        filter: Object(_ui_data_grid_grouping_core__WEBPACK_IMPORTED_MODULE_6__["createOffsetFilter"])(groupInfo.path, storeLoadOptions)
                    });
                    return Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_9__["when"])(groupOffsetQuery, groupCountQuery).done((function(offset, count) {
                        offset = parseInt(offset.length ? offset[0] : offset);
                        count = parseInt(count.length ? count[0] : count);
                        groupInfo.offset = offset;
                        if (groupInfo.count !== count) {
                            groupInfo.count = count;
                            that.updateTotalItemsCount()
                        }
                    }))
                }), true)
            }
        }
    }
}());


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.grouping.js":
/*!***************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.grouping.js ***!
  \***************************************************************************/
/*! exports provided: GroupingHeaderPanelExtender */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GroupingHeaderPanelExtender", function() { return GroupingHeaderPanelExtender; });
/* harmony import */ var _core_utils_size__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/utils/size */ "./node_modules/devextreme/esm/core/utils/size.js");
/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/renderer */ "./node_modules/devextreme/esm/core/renderer.js");
/* harmony import */ var _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ui.data_grid.core */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.core.js");
/* harmony import */ var _ui_data_grid_grouping_expanded__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ui.data_grid.grouping.expanded */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.grouping.expanded.js");
/* harmony import */ var _ui_data_grid_grouping_collapsed__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ui.data_grid.grouping.collapsed */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.grouping.collapsed.js");
/* harmony import */ var _localization_message__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../localization/message */ "./node_modules/devextreme/esm/localization/message.js");
/* harmony import */ var _ui_data_grid_data_source_adapter__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ui.data_grid.data_source_adapter */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.data_source_adapter.js");
/* harmony import */ var _core_utils_type__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../core/utils/type */ "./node_modules/devextreme/esm/core/utils/type.js");
/* harmony import */ var _core_utils_iterator__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../core/utils/iterator */ "./node_modules/devextreme/esm/core/utils/iterator.js");
/* harmony import */ var _core_devices__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../core/devices */ "./node_modules/devextreme/esm/core/devices.js");
/* harmony import */ var _core_utils_deferred__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../core/utils/deferred */ "./node_modules/devextreme/esm/core/utils/deferred.js");
/* harmony import */ var _grid_core_ui_grid_core_accessibility__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../grid_core/ui.grid_core.accessibility */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.accessibility.js");
/* harmony import */ var _shared_accessibility__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../shared/accessibility */ "./node_modules/devextreme/esm/ui/shared/accessibility.js");
/**
 * DevExtreme (esm/ui/data_grid/ui.data_grid.grouping.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */













var DATAGRID_GROUP_PANEL_CLASS = "dx-datagrid-group-panel";
var DATAGRID_GROUP_PANEL_MESSAGE_CLASS = "dx-group-panel-message";
var DATAGRID_GROUP_PANEL_ITEM_CLASS = "dx-group-panel-item";
var DATAGRID_GROUP_PANEL_LABEL_CLASS = "dx-toolbar-label";
var DATAGRID_EXPAND_CLASS = "dx-datagrid-expand";
var DATAGRID_GROUP_ROW_CLASS = "dx-group-row";
var HEADER_FILTER_CLASS_SELECTOR = ".dx-header-filter";
var GroupingDataSourceAdapterExtender = {
    init: function() {
        this.callBase.apply(this, arguments);
        this._initGroupingHelper()
    },
    _initGroupingHelper: function(options) {
        var grouping = this._grouping;
        var isAutoExpandAll = this.option("grouping.autoExpandAll");
        var isFocusedRowEnabled = this.option("focusedRowEnabled");
        var remoteOperations = options ? options.remoteOperations : this.remoteOperations();
        var isODataRemoteOperations = remoteOperations.filtering && remoteOperations.sorting && remoteOperations.paging;
        if (isODataRemoteOperations && !remoteOperations.grouping && (isAutoExpandAll || !isFocusedRowEnabled)) {
            if (!grouping || grouping instanceof _ui_data_grid_grouping_collapsed__WEBPACK_IMPORTED_MODULE_4__["GroupingHelper"]) {
                this._grouping = new _ui_data_grid_grouping_expanded__WEBPACK_IMPORTED_MODULE_3__["GroupingHelper"](this)
            }
        } else if (!grouping || grouping instanceof _ui_data_grid_grouping_expanded__WEBPACK_IMPORTED_MODULE_3__["GroupingHelper"]) {
            this._grouping = new _ui_data_grid_grouping_collapsed__WEBPACK_IMPORTED_MODULE_4__["GroupingHelper"](this)
        }
    },
    totalItemsCount: function() {
        var totalCount = this.callBase();
        return totalCount > 0 && this._dataSource.group() && this._dataSource.requireTotalCount() ? totalCount + this._grouping.totalCountCorrection() : totalCount
    },
    itemsCount: function() {
        return this._dataSource.group() ? this._grouping.itemsCount() || 0 : this.callBase.apply(this, arguments)
    },
    allowCollapseAll: function() {
        return this._grouping.allowCollapseAll()
    },
    isGroupItemCountable: function(item) {
        return this._grouping.isGroupItemCountable(item)
    },
    isRowExpanded: function(key) {
        var groupInfo = this._grouping.findGroupInfo(key);
        return groupInfo ? groupInfo.isExpanded : !this._grouping.allowCollapseAll()
    },
    collapseAll: function(groupIndex) {
        return this._collapseExpandAll(groupIndex, false)
    },
    expandAll: function(groupIndex) {
        return this._collapseExpandAll(groupIndex, true)
    },
    _collapseExpandAll: function(groupIndex, isExpand) {
        var dataSource = this._dataSource;
        var group = dataSource.group();
        var groups = _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_2__["default"].normalizeSortingInfo(group || []);
        if (groups.length) {
            for (var i = 0; i < groups.length; i++) {
                if (void 0 === groupIndex || groupIndex === i) {
                    groups[i].isExpanded = isExpand
                } else if (group && group[i]) {
                    groups[i].isExpanded = group[i].isExpanded
                }
            }
            dataSource.group(groups);
            this._grouping.foreachGroups((function(groupInfo, parents) {
                if (void 0 === groupIndex || groupIndex === parents.length - 1) {
                    groupInfo.isExpanded = isExpand
                }
            }), false, true);
            this.resetPagesCache()
        }
        return true
    },
    refresh: function() {
        this.callBase.apply(this, arguments);
        return this._grouping.refresh.apply(this._grouping, arguments)
    },
    changeRowExpand: function(path) {
        var dataSource = this._dataSource;
        if (dataSource.group()) {
            dataSource.beginLoading();
            if (this._lastLoadOptions) {
                this._lastLoadOptions.groupExpand = true
            }
            return this._changeRowExpandCore(path).always((function() {
                dataSource.endLoading()
            }))
        }
    },
    _changeRowExpandCore: function(path) {
        return this._grouping.changeRowExpand(path)
    },
    _hasGroupLevelsExpandState: function(group, isExpanded) {
        if (group && Array.isArray(group)) {
            for (var i = 0; i < group.length; i++) {
                if (group[i].isExpanded === isExpanded) {
                    return true
                }
            }
        }
    },
    _customizeRemoteOperations: function(options, operationTypes) {
        var remoteOperations = options.remoteOperations;
        if (options.storeLoadOptions.group) {
            if (remoteOperations.grouping && !options.isCustomLoading) {
                if (!remoteOperations.groupPaging || this._hasGroupLevelsExpandState(options.storeLoadOptions.group, true)) {
                    remoteOperations.paging = false
                }
            }
            if (!remoteOperations.grouping && (!remoteOperations.sorting || !remoteOperations.filtering || options.isCustomLoading || this._hasGroupLevelsExpandState(options.storeLoadOptions.group, false))) {
                remoteOperations.paging = false
            }
        } else if (!options.isCustomLoading && remoteOperations.paging && operationTypes.grouping) {
            this.resetCache()
        }
        this.callBase.apply(this, arguments)
    },
    _handleDataLoading: function(options) {
        this.callBase(options);
        this._initGroupingHelper(options);
        return this._grouping.handleDataLoading(options)
    },
    _handleDataLoaded: function(options) {
        return this._grouping.handleDataLoaded(options, this.callBase.bind(this))
    },
    _handleDataLoadedCore: function(options) {
        return this._grouping.handleDataLoadedCore(options, this.callBase.bind(this))
    }
};
_ui_data_grid_data_source_adapter__WEBPACK_IMPORTED_MODULE_6__["default"].extend(GroupingDataSourceAdapterExtender);
var GroupingDataControllerExtender = {
    init: function() {
        this.callBase();
        this.createAction("onRowExpanding");
        this.createAction("onRowExpanded");
        this.createAction("onRowCollapsing");
        this.createAction("onRowCollapsed")
    },
    _beforeProcessItems: function(items) {
        var groupColumns = this._columnsController.getGroupColumns();
        items = this.callBase(items);
        if (items.length && groupColumns.length) {
            items = this._processGroupItems(items, groupColumns.length)
        }
        return items
    },
    _processItem: function(item, options) {
        if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_7__["isDefined"])(item.groupIndex) && Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_7__["isString"])(item.rowType) && 0 === item.rowType.indexOf("group")) {
            item = this._processGroupItem(item, options);
            options.dataIndex = 0
        } else {
            item = this.callBase.apply(this, arguments)
        }
        return item
    },
    _processGroupItem: function(item) {
        return item
    },
    _processGroupItems: function(items, groupsCount, options) {
        var groupedColumns = this._columnsController.getGroupColumns();
        var column = groupedColumns[groupedColumns.length - groupsCount];
        if (!options) {
            var scrollingMode = this.option("scrolling.mode");
            options = {
                collectContinuationItems: "virtual" !== scrollingMode && "infinite" !== scrollingMode,
                resultItems: [],
                path: [],
                values: []
            }
        }
        var resultItems = options.resultItems;
        if (options.data) {
            if (options.collectContinuationItems || !options.data.isContinuation) {
                resultItems.push({
                    rowType: "group",
                    data: options.data,
                    groupIndex: options.path.length - 1,
                    isExpanded: !!options.data.items,
                    key: options.path.slice(0),
                    values: options.values.slice(0)
                })
            }
        }
        if (items) {
            if (0 === groupsCount) {
                resultItems.push.apply(resultItems, items)
            } else {
                for (var i = 0; i < items.length; i++) {
                    var item = items[i];
                    if (item && "items" in item) {
                        options.data = item;
                        options.path.push(item.key);
                        options.values.push(column && column.deserializeValue && !column.calculateDisplayValue ? column.deserializeValue(item.key) : item.key);
                        this._processGroupItems(item.items, groupsCount - 1, options);
                        options.data = void 0;
                        options.path.pop();
                        options.values.pop()
                    } else {
                        resultItems.push(item)
                    }
                }
            }
        }
        return resultItems
    },
    publicMethods: function() {
        return this.callBase().concat(["collapseAll", "expandAll", "isRowExpanded", "expandRow", "collapseRow"])
    },
    collapseAll: function(groupIndex) {
        var dataSource = this._dataSource;
        if (dataSource && dataSource.collapseAll(groupIndex)) {
            dataSource.pageIndex(0);
            dataSource.reload()
        }
    },
    expandAll: function(groupIndex) {
        var dataSource = this._dataSource;
        if (dataSource && dataSource.expandAll(groupIndex)) {
            dataSource.pageIndex(0);
            dataSource.reload()
        }
    },
    changeRowExpand: function(key) {
        var that = this;
        var expanded = that.isRowExpanded(key);
        var args = {
            key: key,
            expanded: expanded
        };
        that.executeAction(expanded ? "onRowCollapsing" : "onRowExpanding", args);
        if (!args.cancel) {
            return Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_10__["when"])(that._changeRowExpandCore(key)).done((function() {
                args.expanded = !expanded;
                that.executeAction(expanded ? "onRowCollapsed" : "onRowExpanded", args)
            }))
        }
        return (new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_10__["Deferred"]).resolve()
    },
    _changeRowExpandCore: function(key) {
        var that = this;
        var dataSource = this._dataSource;
        var d = new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_10__["Deferred"];
        if (!dataSource) {
            d.resolve()
        } else {
            Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_10__["when"])(dataSource.changeRowExpand(key)).done((function() {
                that.load().done(d.resolve).fail(d.reject)
            })).fail(d.reject)
        }
        return d
    },
    isRowExpanded: function(key) {
        var dataSource = this._dataSource;
        return dataSource && dataSource.isRowExpanded(key)
    },
    expandRow: function(key) {
        if (!this.isRowExpanded(key)) {
            return this.changeRowExpand(key)
        }
        return (new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_10__["Deferred"]).resolve()
    },
    collapseRow: function(key) {
        if (this.isRowExpanded(key)) {
            return this.changeRowExpand(key)
        }
        return (new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_10__["Deferred"]).resolve()
    },
    optionChanged: function(args) {
        if ("grouping" === args.name) {
            args.name = "dataSource"
        }
        this.callBase(args)
    }
};
var onGroupingMenuItemClick = function(column, params) {
    var columnsController = this._columnsController;
    switch (params.itemData.value) {
        case "group":
            var groups = columnsController._dataSource.group() || [];
            columnsController.columnOption(column.dataField, "groupIndex", groups.length);
            break;
        case "ungroup":
            columnsController.columnOption(column.dataField, "groupIndex", -1);
            break;
        case "ungroupAll":
            this.component.clearGrouping()
    }
};
var GroupingHeaderPanelExtender = {
    _getToolbarItems: function() {
        var items = this.callBase();
        return this._appendGroupingItem(items)
    },
    _appendGroupingItem: function(items) {
        if (this._isGroupPanelVisible()) {
            var isRendered = false;
            var toolbarItem = {
                template: () => {
                    var $groupPanel = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])("<div>").addClass(DATAGRID_GROUP_PANEL_CLASS);
                    this._updateGroupPanelContent($groupPanel);
                    Object(_grid_core_ui_grid_core_accessibility__WEBPACK_IMPORTED_MODULE_11__["registerKeyboardAction"])("groupPanel", this, $groupPanel, void 0, this._handleActionKeyDown.bind(this));
                    return $groupPanel
                },
                name: "groupPanel",
                onItemRendered: () => {
                    isRendered && this.renderCompleted.fire();
                    isRendered = true
                },
                location: "before",
                locateInMenu: "never",
                sortIndex: 1
            };
            items.push(toolbarItem)
        }
        return items
    },
    _handleActionKeyDown: function(args) {
        var event = args.event;
        var $target = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(event.target);
        var groupColumnIndex = $target.closest(".".concat(DATAGRID_GROUP_PANEL_ITEM_CLASS)).index();
        var column = this._columnsController.getGroupColumns()[groupColumnIndex];
        var columnIndex = column && column.index;
        if ($target.is(HEADER_FILTER_CLASS_SELECTOR)) {
            this.getController("headerFilter").showHeaderFilterMenu(columnIndex, true)
        } else {
            this._processGroupItemAction(columnIndex)
        }
        event.preventDefault()
    },
    _isGroupPanelVisible: function() {
        var groupPanelOptions = this.option("groupPanel");
        var isVisible;
        if (groupPanelOptions) {
            isVisible = groupPanelOptions.visible;
            if ("auto" === isVisible) {
                isVisible = "desktop" === _core_devices__WEBPACK_IMPORTED_MODULE_9__["default"].current().deviceType ? true : false
            }
        }
        return isVisible
    },
    _renderGroupPanelItems: function($groupPanel, groupColumns) {
        var that = this;
        $groupPanel.empty();
        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_8__["each"])(groupColumns, (function(index, groupColumn) {
            that._createGroupPanelItem($groupPanel, groupColumn)
        }));
        Object(_shared_accessibility__WEBPACK_IMPORTED_MODULE_12__["restoreFocus"])(this)
    },
    _createGroupPanelItem: function($rootElement, groupColumn) {
        var $groupPanelItem = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])("<div>").addClass(groupColumn.cssClass).addClass(DATAGRID_GROUP_PANEL_ITEM_CLASS).data("columnData", groupColumn).appendTo($rootElement).text(groupColumn.caption);
        Object(_shared_accessibility__WEBPACK_IMPORTED_MODULE_12__["setTabIndex"])(this, $groupPanelItem);
        return $groupPanelItem
    },
    _columnOptionChanged: function(e) {
        if (!this._requireReady && !_ui_data_grid_core__WEBPACK_IMPORTED_MODULE_2__["default"].checkChanges(e.optionNames, ["width", "visibleWidth"])) {
            var $toolbarElement = this.element();
            var $groupPanel = $toolbarElement && $toolbarElement.find("." + DATAGRID_GROUP_PANEL_CLASS);
            if ($groupPanel && $groupPanel.length) {
                this._updateGroupPanelContent($groupPanel);
                this.renderCompleted.fire()
            }
        }
        this.callBase()
    },
    _updateGroupPanelContent: function($groupPanel) {
        var groupColumns = this.getController("columns").getGroupColumns();
        var groupPanelOptions = this.option("groupPanel");
        this._renderGroupPanelItems($groupPanel, groupColumns);
        if (groupPanelOptions.allowColumnDragging && !groupColumns.length) {
            Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])("<div>").addClass(DATAGRID_GROUP_PANEL_MESSAGE_CLASS).text(groupPanelOptions.emptyPanelText).appendTo($groupPanel);
            $groupPanel.closest("." + DATAGRID_GROUP_PANEL_LABEL_CLASS).css("maxWidth", "none");
            this.updateToolbarDimensions()
        }
    },
    allowDragging: function(column) {
        var groupPanelOptions = this.option("groupPanel");
        return this._isGroupPanelVisible() && groupPanelOptions.allowColumnDragging && column && column.allowGrouping
    },
    getColumnElements: function() {
        var $element = this.element();
        return $element && $element.find("." + DATAGRID_GROUP_PANEL_ITEM_CLASS)
    },
    getColumns: function() {
        return this.getController("columns").getGroupColumns()
    },
    getBoundingRect: function() {
        var $element = this.element();
        if ($element && $element.find("." + DATAGRID_GROUP_PANEL_CLASS).length) {
            var offset = $element.offset();
            return {
                top: offset.top,
                bottom: offset.top + Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getHeight"])($element)
            }
        }
        return null
    },
    getName: function() {
        return "group"
    },
    getContextMenuItems: function(options) {
        var contextMenuEnabled = this.option("grouping.contextMenuEnabled");
        var $groupedColumnElement = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(options.targetElement).closest("." + DATAGRID_GROUP_PANEL_ITEM_CLASS);
        var items;
        if ($groupedColumnElement.length) {
            options.column = $groupedColumnElement.data("columnData")
        }
        if (contextMenuEnabled && options.column) {
            var column = options.column;
            var isGroupingAllowed = Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_7__["isDefined"])(column.allowGrouping) ? column.allowGrouping : true;
            if (isGroupingAllowed) {
                var isColumnGrouped = Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_7__["isDefined"])(column.groupIndex) && column.groupIndex > -1;
                var groupingTexts = this.option("grouping.texts");
                var onItemClick = onGroupingMenuItemClick.bind(this, column);
                items = [{
                    text: groupingTexts.ungroup,
                    value: "ungroup",
                    disabled: !isColumnGrouped,
                    onItemClick: onItemClick
                }, {
                    text: groupingTexts.ungroupAll,
                    value: "ungroupAll",
                    onItemClick: onItemClick
                }]
            }
        }
        return items
    },
    isVisible: function() {
        return this.callBase() || this._isGroupPanelVisible()
    },
    optionChanged: function(args) {
        if ("groupPanel" === args.name) {
            this._invalidate();
            args.handled = true
        } else {
            this.callBase(args)
        }
    }
};
var GroupingRowsViewExtender = {
    getContextMenuItems: function(options) {
        var contextMenuEnabled = this.option("grouping.contextMenuEnabled");
        var items;
        if (contextMenuEnabled && options.row && "group" === options.row.rowType) {
            var columnsController = this._columnsController;
            var column = columnsController.columnOption("groupIndex:" + options.row.groupIndex);
            if (column && column.allowGrouping) {
                var groupingTexts = this.option("grouping.texts");
                var onItemClick = onGroupingMenuItemClick.bind(this, column);
                items = [];
                items.push({
                    text: groupingTexts.ungroup,
                    value: "ungroup",
                    onItemClick: onItemClick
                }, {
                    text: groupingTexts.ungroupAll,
                    value: "ungroupAll",
                    onItemClick: onItemClick
                })
            }
        }
        return items
    },
    _rowClick: function(e) {
        var expandMode = this.option("grouping.expandMode");
        var scrollingMode = this.option("scrolling.mode");
        var isGroupRowStateChanged = "infinite" !== scrollingMode && "rowClick" === expandMode && Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(e.event.target).closest("." + DATAGRID_GROUP_ROW_CLASS).length;
        var isExpandButtonClicked = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(e.event.target).closest("." + DATAGRID_EXPAND_CLASS).length;
        if (isGroupRowStateChanged || isExpandButtonClicked) {
            this._changeGroupRowState(e)
        }
        this.callBase(e)
    },
    _changeGroupRowState: function(e) {
        var dataController = this.getController("data");
        var row = dataController.items()[e.rowIndex];
        var allowCollapsing = this._columnsController.columnOption("groupIndex:" + row.groupIndex, "allowCollapsing");
        if ("data" === row.rowType || "group" === row.rowType && false !== allowCollapsing) {
            dataController.changeRowExpand(row.key, true);
            e.event.preventDefault();
            e.handled = true
        }
    }
};
var columnHeadersViewExtender = {
    getContextMenuItems: function(options) {
        var contextMenuEnabled = this.option("grouping.contextMenuEnabled");
        var items = this.callBase(options);
        if (contextMenuEnabled && options.row && ("header" === options.row.rowType || "detailAdaptive" === options.row.rowType)) {
            var column = options.column;
            if (!column.command && (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_7__["isDefined"])(column.allowGrouping) || column.allowGrouping)) {
                var groupingTexts = this.option("grouping.texts");
                var isColumnGrouped = Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_7__["isDefined"])(column.groupIndex) && column.groupIndex > -1;
                var onItemClick = onGroupingMenuItemClick.bind(this, column);
                items = items || [];
                items.push({
                    text: groupingTexts.groupByThisColumn,
                    value: "group",
                    beginGroup: true,
                    disabled: isColumnGrouped,
                    onItemClick: onItemClick
                });
                if (column.showWhenGrouped) {
                    items.push({
                        text: groupingTexts.ungroup,
                        value: "ungroup",
                        disabled: !isColumnGrouped,
                        onItemClick: onItemClick
                    })
                }
                items.push({
                    text: groupingTexts.ungroupAll,
                    value: "ungroupAll",
                    onItemClick: onItemClick
                })
            }
        }
        return items
    }
};
_ui_data_grid_core__WEBPACK_IMPORTED_MODULE_2__["default"].registerModule("grouping", {
    defaultOptions: function() {
        return {
            grouping: {
                autoExpandAll: true,
                allowCollapsing: true,
                contextMenuEnabled: false,
                expandMode: "buttonClick",
                texts: {
                    groupContinuesMessage: _localization_message__WEBPACK_IMPORTED_MODULE_5__["default"].format("dxDataGrid-groupContinuesMessage"),
                    groupContinuedMessage: _localization_message__WEBPACK_IMPORTED_MODULE_5__["default"].format("dxDataGrid-groupContinuedMessage"),
                    groupByThisColumn: _localization_message__WEBPACK_IMPORTED_MODULE_5__["default"].format("dxDataGrid-groupHeaderText"),
                    ungroup: _localization_message__WEBPACK_IMPORTED_MODULE_5__["default"].format("dxDataGrid-ungroupHeaderText"),
                    ungroupAll: _localization_message__WEBPACK_IMPORTED_MODULE_5__["default"].format("dxDataGrid-ungroupAllText")
                }
            },
            groupPanel: {
                visible: false,
                emptyPanelText: _localization_message__WEBPACK_IMPORTED_MODULE_5__["default"].format("dxDataGrid-groupPanelEmptyText"),
                allowColumnDragging: true
            }
        }
    },
    extenders: {
        controllers: {
            data: GroupingDataControllerExtender,
            columns: {
                _getExpandColumnOptions: function() {
                    var options = this.callBase.apply(this, arguments);
                    options.cellTemplate = _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_2__["default"].getExpandCellTemplate();
                    return options
                }
            },
            editing: {
                _isProcessedItem: function(item) {
                    return Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_7__["isDefined"])(item.groupIndex) && Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_7__["isString"])(item.rowType) && 0 === item.rowType.indexOf("group")
                }
            }
        },
        views: {
            headerPanel: GroupingHeaderPanelExtender,
            rowsView: GroupingRowsViewExtender,
            columnHeadersView: columnHeadersViewExtender
        }
    }
});


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.header_filter.js":
/*!********************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.header_filter.js ***!
  \********************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ui.data_grid.core */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.core.js");
/* harmony import */ var _grid_core_ui_grid_core_header_filter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../grid_core/ui.grid_core.header_filter */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.header_filter.js");
/**
 * DevExtreme (esm/ui/data_grid/ui.data_grid.header_filter.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */


_ui_data_grid_core__WEBPACK_IMPORTED_MODULE_0__["default"].registerModule("headerFilter", _grid_core_ui_grid_core_header_filter__WEBPACK_IMPORTED_MODULE_1__["headerFilterModule"]);


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.header_panel.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.header_panel.js ***!
  \*******************************************************************************/
/*! exports provided: HeaderPanel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HeaderPanel", function() { return HeaderPanel; });
/* harmony import */ var _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ui.data_grid.core */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.core.js");
/* harmony import */ var _grid_core_ui_grid_core_header_panel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../grid_core/ui.grid_core.header_panel */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.header_panel.js");
/**
 * DevExtreme (esm/ui/data_grid/ui.data_grid.header_panel.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */


var HeaderPanel = _grid_core_ui_grid_core_header_panel__WEBPACK_IMPORTED_MODULE_1__["headerPanelModule"].views.headerPanel;
_ui_data_grid_core__WEBPACK_IMPORTED_MODULE_0__["default"].registerModule("headerPanel", _grid_core_ui_grid_core_header_panel__WEBPACK_IMPORTED_MODULE_1__["headerPanelModule"]);


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.js":
/*!******************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.js ***!
  \******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ui_data_grid_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ui.data_grid.base */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.base.js");
/* harmony import */ var _ui_data_grid_state_storing__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ui.data_grid.state_storing */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.state_storing.js");
/* harmony import */ var _ui_data_grid_selection__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ui.data_grid.selection */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.selection.js");
/* harmony import */ var _ui_data_grid_column_chooser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ui.data_grid.column_chooser */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.column_chooser.js");
/* harmony import */ var _ui_data_grid_grouping__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ui.data_grid.grouping */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.grouping.js");
/* harmony import */ var _ui_data_grid_master_detail__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ui.data_grid.master_detail */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.master_detail.js");
/* harmony import */ var _ui_data_grid_editing__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ui.data_grid.editing */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.editing.js");
/* harmony import */ var _ui_data_grid_editing_row_based__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ui.data_grid.editing_row_based */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.editing_row_based.js");
/* harmony import */ var _ui_data_grid_editing_form_based__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./ui.data_grid.editing_form_based */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.editing_form_based.js");
/* harmony import */ var _ui_data_grid_editing_cell_based__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./ui.data_grid.editing_cell_based */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.editing_cell_based.js");
/* harmony import */ var _ui_data_grid_validating__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./ui.data_grid.validating */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.validating.js");
/* harmony import */ var _ui_data_grid_virtual_scrolling__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./ui.data_grid.virtual_scrolling */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.virtual_scrolling.js");
/* harmony import */ var _ui_data_grid_filter_row__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./ui.data_grid.filter_row */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.filter_row.js");
/* harmony import */ var _ui_data_grid_header_filter__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./ui.data_grid.header_filter */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.header_filter.js");
/* harmony import */ var _ui_data_grid_filter_sync__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./ui.data_grid.filter_sync */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.filter_sync.js");
/* harmony import */ var _ui_data_grid_filter_builder__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./ui.data_grid.filter_builder */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.filter_builder.js");
/* harmony import */ var _ui_data_grid_filter_panel__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./ui.data_grid.filter_panel */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.filter_panel.js");
/* harmony import */ var _ui_data_grid_search__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./ui.data_grid.search */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.search.js");
/* harmony import */ var _ui_data_grid_pager__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./ui.data_grid.pager */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.pager.js");
/* harmony import */ var _ui_data_grid_columns_resizing_reordering__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./ui.data_grid.columns_resizing_reordering */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.columns_resizing_reordering.js");
/* harmony import */ var _ui_data_grid_keyboard_navigation__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./ui.data_grid.keyboard_navigation */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.keyboard_navigation.js");
/* harmony import */ var _ui_data_grid_summary__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./ui.data_grid.summary */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.summary.js");
/* harmony import */ var _ui_data_grid_column_fixing__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./ui.data_grid.column_fixing */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.column_fixing.js");
/* harmony import */ var _ui_data_grid_adaptivity__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./ui.data_grid.adaptivity */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.adaptivity.js");
/* harmony import */ var _ui_data_grid_virtual_columns__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./ui.data_grid.virtual_columns */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.virtual_columns.js");
/* harmony import */ var _ui_data_grid_export__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./ui.data_grid.export */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.export.js");
/* harmony import */ var _ui_data_grid_focus__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./ui.data_grid.focus */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.focus.js");
/* harmony import */ var _ui_data_grid_row_dragging__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./ui.data_grid.row_dragging */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.row_dragging.js");
/**
 * DevExtreme (esm/ui/data_grid/ui.data_grid.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */

/* harmony default export */ __webpack_exports__["default"] = (_ui_data_grid_base__WEBPACK_IMPORTED_MODULE_0__["default"]);





























/***/ }),

/***/ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.keyboard_navigation.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.keyboard_navigation.js ***!
  \**************************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ui.data_grid.core */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.core.js");
/* harmony import */ var _grid_core_ui_grid_core_keyboard_navigation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../grid_core/ui.grid_core.keyboard_navigation */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.keyboard_navigation.js");
/**
 * DevExtreme (esm/ui/data_grid/ui.data_grid.keyboard_navigation.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */


_ui_data_grid_core__WEBPACK_IMPORTED_MODULE_0__["default"].registerModule("keyboardNavigation", _grid_core_ui_grid_core_keyboard_navigation__WEBPACK_IMPORTED_MODULE_1__["keyboardNavigationModule"]);


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.master_detail.js":
/*!********************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.master_detail.js ***!
  \********************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ui.data_grid.core */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.core.js");
/* harmony import */ var _grid_core_ui_grid_core_master_detail__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../grid_core/ui.grid_core.master_detail */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.master_detail.js");
/**
 * DevExtreme (esm/ui/data_grid/ui.data_grid.master_detail.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */


_ui_data_grid_core__WEBPACK_IMPORTED_MODULE_0__["default"].registerModule("masterDetail", _grid_core_ui_grid_core_master_detail__WEBPACK_IMPORTED_MODULE_1__["masterDetailModule"]);


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.pager.js":
/*!************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.pager.js ***!
  \************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ui.data_grid.core */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.core.js");
/* harmony import */ var _grid_core_ui_grid_core_pager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../grid_core/ui.grid_core.pager */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.pager.js");
/**
 * DevExtreme (esm/ui/data_grid/ui.data_grid.pager.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */


_ui_data_grid_core__WEBPACK_IMPORTED_MODULE_0__["default"].registerModule("pager", _grid_core_ui_grid_core_pager__WEBPACK_IMPORTED_MODULE_1__["pagerModule"]);


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.row_dragging.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.row_dragging.js ***!
  \*******************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ui.data_grid.core */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.core.js");
/* harmony import */ var _grid_core_ui_grid_core_row_dragging__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../grid_core/ui.grid_core.row_dragging */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.row_dragging.js");
/**
 * DevExtreme (esm/ui/data_grid/ui.data_grid.row_dragging.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */


_ui_data_grid_core__WEBPACK_IMPORTED_MODULE_0__["default"].registerModule("rowDragging", _grid_core_ui_grid_core_row_dragging__WEBPACK_IMPORTED_MODULE_1__["rowDraggingModule"]);


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.rows.js":
/*!***********************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.rows.js ***!
  \***********************************************************************/
/*! exports provided: RowsView */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RowsView", function() { return RowsView; });
/* harmony import */ var _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ui.data_grid.core */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.core.js");
/* harmony import */ var _grid_core_ui_grid_core_rows__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../grid_core/ui.grid_core.rows */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.rows.js");
/**
 * DevExtreme (esm/ui/data_grid/ui.data_grid.rows.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */


var RowsView = _grid_core_ui_grid_core_rows__WEBPACK_IMPORTED_MODULE_1__["rowsModule"].views.rowsView;
_ui_data_grid_core__WEBPACK_IMPORTED_MODULE_0__["default"].registerModule("rows", _grid_core_ui_grid_core_rows__WEBPACK_IMPORTED_MODULE_1__["rowsModule"]);


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.search.js":
/*!*************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.search.js ***!
  \*************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ui.data_grid.core */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.core.js");
/* harmony import */ var _grid_core_ui_grid_core_search__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../grid_core/ui.grid_core.search */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.search.js");
/**
 * DevExtreme (esm/ui/data_grid/ui.data_grid.search.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */


_ui_data_grid_core__WEBPACK_IMPORTED_MODULE_0__["default"].registerModule("search", _grid_core_ui_grid_core_search__WEBPACK_IMPORTED_MODULE_1__["searchModule"]);


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.selection.js":
/*!****************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.selection.js ***!
  \****************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ui.data_grid.core */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.core.js");
/* harmony import */ var _grid_core_ui_grid_core_selection__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../grid_core/ui.grid_core.selection */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.selection.js");
/**
 * DevExtreme (esm/ui/data_grid/ui.data_grid.selection.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */


_ui_data_grid_core__WEBPACK_IMPORTED_MODULE_0__["default"].registerModule("selection", _grid_core_ui_grid_core_selection__WEBPACK_IMPORTED_MODULE_1__["selectionModule"]);


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.sorting.js":
/*!**************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.sorting.js ***!
  \**************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ui.data_grid.core */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.core.js");
/* harmony import */ var _grid_core_ui_grid_core_sorting__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../grid_core/ui.grid_core.sorting */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.sorting.js");
/**
 * DevExtreme (esm/ui/data_grid/ui.data_grid.sorting.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */


_ui_data_grid_core__WEBPACK_IMPORTED_MODULE_0__["default"].registerModule("sorting", _grid_core_ui_grid_core_sorting__WEBPACK_IMPORTED_MODULE_1__["sortingModule"]);


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.state_storing.js":
/*!********************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.state_storing.js ***!
  \********************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ui.data_grid.core */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.core.js");
/* harmony import */ var _grid_core_ui_grid_core_state_storing__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../grid_core/ui.grid_core.state_storing */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.state_storing.js");
/**
 * DevExtreme (esm/ui/data_grid/ui.data_grid.state_storing.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */


_ui_data_grid_core__WEBPACK_IMPORTED_MODULE_0__["default"].registerModule("stateStoring", _grid_core_ui_grid_core_state_storing__WEBPACK_IMPORTED_MODULE_1__["stateStoringModule"]);


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.summary.js":
/*!**************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.summary.js ***!
  \**************************************************************************/
/*! exports provided: renderSummaryCell, FooterView */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "renderSummaryCell", function() { return renderSummaryCell; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FooterView", function() { return FooterView; });
/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/renderer */ "./node_modules/devextreme/esm/core/renderer.js");
/* harmony import */ var _core_utils_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/utils/common */ "./node_modules/devextreme/esm/core/utils/common.js");
/* harmony import */ var _core_utils_type__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/utils/type */ "./node_modules/devextreme/esm/core/utils/type.js");
/* harmony import */ var _core_utils_iterator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/utils/iterator */ "./node_modules/devextreme/esm/core/utils/iterator.js");
/* harmony import */ var _core_utils_extend__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/utils/extend */ "./node_modules/devextreme/esm/core/utils/extend.js");
/* harmony import */ var _core_utils_data__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core/utils/data */ "./node_modules/devextreme/esm/core/utils/data.js");
/* harmony import */ var _widget_ui_errors__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../widget/ui.errors */ "./node_modules/devextreme/esm/ui/widget/ui.errors.js");
/* harmony import */ var _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ui.data_grid.core */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.core.js");
/* harmony import */ var _localization_message__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../localization/message */ "./node_modules/devextreme/esm/localization/message.js");
/* harmony import */ var _ui_data_grid_data_source_adapter__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./ui.data_grid.data_source_adapter */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.data_source_adapter.js");
/* harmony import */ var _grid_core_ui_grid_core_columns_view__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../grid_core/ui.grid_core.columns_view */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.columns_view.js");
/* harmony import */ var _aggregate_calculator__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./aggregate_calculator */ "./node_modules/devextreme/esm/ui/data_grid/aggregate_calculator.js");
/* harmony import */ var _data_query__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../data/query */ "./node_modules/devextreme/esm/data/query.js");
/* harmony import */ var _data_store_helper__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../data/store_helper */ "./node_modules/devextreme/esm/data/store_helper.js");
/* harmony import */ var _data_utils__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../data/utils */ "./node_modules/devextreme/esm/data/utils.js");
/**
 * DevExtreme (esm/ui/data_grid/ui.data_grid.summary.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */















var DATAGRID_TOTAL_FOOTER_CLASS = "dx-datagrid-total-footer";
var DATAGRID_SUMMARY_ITEM_CLASS = "dx-datagrid-summary-item";
var DATAGRID_TEXT_CONTENT_CLASS = "dx-datagrid-text-content";
var DATAGRID_GROUP_FOOTER_CLASS = "dx-datagrid-group-footer";
var DATAGRID_GROUP_TEXT_CONTENT_CLASS = "dx-datagrid-group-text-content";
var DATAGRID_NOWRAP_CLASS = "dx-datagrid-nowrap";
var DATAGRID_FOOTER_ROW_CLASS = "dx-footer-row";
var DATAGRID_GROUP_FOOTER_ROW_TYPE = "groupFooter";
var DATAGRID_TOTAL_FOOTER_ROW_TYPE = "totalFooter";
var renderSummaryCell = function(cell, options) {
    var $cell = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(cell);
    var column = options.column;
    var summaryItems = options.summaryItems;
    var $summaryItems = [];
    if (!column.command && summaryItems) {
        for (var i = 0; i < summaryItems.length; i++) {
            var summaryItem = summaryItems[i];
            $summaryItems.push(Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>").css("textAlign", summaryItem.alignment || column.alignment).addClass(DATAGRID_SUMMARY_ITEM_CLASS).addClass(DATAGRID_TEXT_CONTENT_CLASS).addClass(summaryItem.cssClass).toggleClass(DATAGRID_GROUP_TEXT_CONTENT_CLASS, "group" === options.rowType).text(_ui_data_grid_core__WEBPACK_IMPORTED_MODULE_7__["default"].getSummaryText(summaryItem, options.summaryTexts)))
        }
        $cell.append($summaryItems)
    }
};
var getSummaryCellOptions = function(that, options) {
    var summaryTexts = that.option("summary.texts") || {};
    return {
        totalItem: options.row,
        summaryItems: options.row.summaryCells[options.columnIndex],
        summaryTexts: summaryTexts
    }
};
var getGroupAggregates = function(data) {
    return data.summary || data.aggregates || []
};
var recalculateWhileEditing = function(that) {
    return that.option("summary.recalculateWhileEditing")
};
var FooterView = _grid_core_ui_grid_core_columns_view__WEBPACK_IMPORTED_MODULE_10__["ColumnsView"].inherit({
    _getRows: function() {
        return this._dataController.footerItems()
    },
    _getCellOptions: function(options) {
        return Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_4__["extend"])(this.callBase(options), getSummaryCellOptions(this, options))
    },
    _renderCellContent: function($cell, options) {
        renderSummaryCell($cell, options);
        this.callBase($cell, options)
    },
    _renderCore: function(change) {
        var needUpdateScrollLeft = false;
        var totalItem = this._dataController.footerItems()[0];
        if (!change || !change.columnIndices) {
            this.element().empty().addClass(DATAGRID_TOTAL_FOOTER_CLASS).toggleClass(DATAGRID_NOWRAP_CLASS, !this.option("wordWrapEnabled"));
            needUpdateScrollLeft = true
        }
        if (totalItem && totalItem.summaryCells && totalItem.summaryCells.length) {
            this._updateContent(this._renderTable({
                change: change
            }), change);
            needUpdateScrollLeft && this._updateScrollLeftPosition()
        }
    },
    _updateContent: function($newTable, change) {
        if (change && "update" === change.changeType && change.columnIndices) {
            var $row = this.getTableElement().find(".dx-row");
            var $newRow = $newTable.find(".dx-row");
            this._updateCells($row, $newRow, change.columnIndices[0])
        } else {
            return this.callBase.apply(this, arguments)
        }
    },
    _rowClick: function(e) {
        var item = this._dataController.footerItems()[e.rowIndex] || {};
        this.executeAction("onRowClick", Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_4__["extend"])({}, e, item))
    },
    _columnOptionChanged: function(e) {
        var optionNames = e.optionNames;
        if (e.changeTypes.grouping) {
            return
        }
        if (optionNames.width || optionNames.visibleWidth) {
            this.callBase(e)
        }
    },
    _handleDataChanged: function(e) {
        var changeType = e.changeType;
        if ("update" === e.changeType && e.repaintChangesOnly) {
            if (!e.totalColumnIndices) {
                this.render()
            } else if (e.totalColumnIndices.length) {
                this.render(null, {
                    changeType: "update",
                    columnIndices: [e.totalColumnIndices]
                })
            }
        } else if ("refresh" === changeType || "append" === changeType || "prepend" === changeType) {
            this.render()
        }
    },
    _createRow: function(row) {
        var $row = this.callBase.apply(this, arguments);
        if (row.rowType === DATAGRID_TOTAL_FOOTER_ROW_TYPE) {
            $row.addClass(DATAGRID_FOOTER_ROW_CLASS)
        }
        return $row
    },
    getHeight: function() {
        return this.getElementHeight()
    },
    isVisible: function() {
        return !!this._dataController.footerItems().length
    }
});
var SummaryDataSourceAdapterExtender = {
    init: function() {
        this.callBase.apply(this, arguments);
        this._totalAggregates = [];
        this._summaryGetter = _core_utils_common__WEBPACK_IMPORTED_MODULE_1__["noop"]
    },
    summaryGetter: function(_summaryGetter) {
        if (!arguments.length) {
            return this._summaryGetter
        }
        if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_2__["isFunction"])(_summaryGetter)) {
            this._summaryGetter = _summaryGetter
        }
    },
    summary: function(_summary) {
        if (!arguments.length) {
            return this._summaryGetter()
        }
        this._summaryGetter = function() {
            return _summary
        }
    },
    totalAggregates: function() {
        return this._totalAggregates
    },
    isLastLevelGroupItemsPagingLocal: function() {
        var summary = this.summary();
        var sortByGroupsInfo = summary && summary.sortByGroups();
        return sortByGroupsInfo && sortByGroupsInfo.length
    },
    sortLastLevelGroupItems: function(items, groups, paths) {
        var groupedItems = _data_store_helper__WEBPACK_IMPORTED_MODULE_13__["default"].multiLevelGroup(Object(_data_query__WEBPACK_IMPORTED_MODULE_12__["default"])(items), groups).toArray();
        var result = [];
        paths.forEach((function(path) {
            ! function forEachGroup(groups, groupCount, callback, path) {
                path = path || [];
                for (var i = 0; i < groups.length; i++) {
                    path.push(groups[i].key);
                    if (1 === groupCount) {
                        callback(path, groups[i].items)
                    } else {
                        forEachGroup(groups[i].items, groupCount - 1, callback, path)
                    }
                    path.pop()
                }
            }(groupedItems, groups.length, (function(itemsPath, items) {
                if (path.toString() === itemsPath.toString()) {
                    result = result.concat(items)
                }
            }))
        }));
        return result
    }
};
var SummaryDataSourceAdapterClientExtender = function() {
    var calculateAggregates = function(that, summary, data, groupLevel) {
        var calculator;
        if (recalculateWhileEditing(that)) {
            var editingController = that.getController("editing");
            if (editingController) {
                var insertedData = editingController.getInsertedData();
                if (insertedData.length) {
                    data = function applyAddedData(data, insertedData, groupLevel) {
                        if (groupLevel) {
                            return applyAddedData(data, insertedData.map(item => ({
                                items: [item]
                            }), groupLevel - 1))
                        }
                        return data.concat(insertedData)
                    }(data, insertedData, groupLevel)
                }
                var removedData = editingController.getRemovedData();
                if (removedData.length) {
                    data = function applyRemovedData(data, removedData, groupLevel) {
                        if (groupLevel) {
                            return data.map(data => {
                                var updatedData = {};
                                var updatedItems = applyRemovedData(data.items || [], removedData, groupLevel - 1);
                                Object.defineProperty(updatedData, "aggregates", {
                                    get: () => data.aggregates,
                                    set: value => {
                                        data.aggregates = value
                                    }
                                });
                                return Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_4__["extend"])(updatedData, data, {
                                    items: updatedItems
                                })
                            })
                        }
                        return data.filter(data => removedData.indexOf(data) < 0)
                    }(data, removedData, groupLevel)
                }
            }
        }
        if (summary) {
            calculator = new _aggregate_calculator__WEBPACK_IMPORTED_MODULE_11__["default"]({
                totalAggregates: summary.totalAggregates,
                groupAggregates: summary.groupAggregates,
                data: data,
                groupLevel: groupLevel
            });
            calculator.calculate()
        }
        return calculator ? calculator.totalAggregates() : []
    };
    var sortGroupsBySummary = function(data, group, summary) {
        var sortByGroups = summary && summary.sortByGroups && summary.sortByGroups();
        if (sortByGroups && sortByGroups.length) {
            return function sortGroupsBySummaryCore(items, groups, sortByGroups) {
                if (!items || !groups.length) {
                    return items
                }
                var group = groups[0];
                var sorts = sortByGroups[0];
                var query;
                if (group && sorts && sorts.length) {
                    query = Object(_data_query__WEBPACK_IMPORTED_MODULE_12__["default"])(items);
                    Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_3__["each"])(sorts, (function(index) {
                        if (0 === index) {
                            query = query.sortBy(this.selector, this.desc)
                        } else {
                            query = query.thenBy(this.selector, this.desc)
                        }
                    }));
                    query.enumerate().done((function(sortedItems) {
                        items = sortedItems
                    }))
                }
                groups = groups.slice(1);
                sortByGroups = sortByGroups.slice(1);
                if (groups.length && sortByGroups.length) {
                    Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_3__["each"])(items, (function() {
                        this.items = sortGroupsBySummaryCore(this.items, groups, sortByGroups)
                    }))
                }
                return items
            }(data, group, sortByGroups)
        }
        return data
    };
    return {
        _customizeRemoteOperations: function(options) {
            var summary = this.summary();
            if (summary) {
                if (options.remoteOperations.summary) {
                    if (!options.isCustomLoading || options.storeLoadOptions.isLoadingAll) {
                        if (options.storeLoadOptions.group) {
                            if (options.remoteOperations.grouping) {
                                options.storeLoadOptions.groupSummary = summary.groupAggregates
                            } else if (summary.groupAggregates.length) {
                                options.remoteOperations.paging = false
                            }
                        }
                        options.storeLoadOptions.totalSummary = summary.totalAggregates
                    }
                } else if (summary.totalAggregates.length || summary.groupAggregates.length && options.storeLoadOptions.group) {
                    options.remoteOperations.paging = false
                }
            }
            this.callBase.apply(this, arguments);
            var cachedExtra = options.cachedData.extra;
            if (cachedExtra && cachedExtra.summary && !options.isCustomLoading) {
                options.storeLoadOptions.totalSummary = void 0
            }
        },
        _handleDataLoadedCore: function(options) {
            var groups = Object(_data_utils__WEBPACK_IMPORTED_MODULE_14__["normalizeSortingInfo"])(options.storeLoadOptions.group || options.loadOptions.group || []);
            var remoteOperations = options.remoteOperations || {};
            var summary = this.summaryGetter()(remoteOperations);
            if (!options.isCustomLoading || options.storeLoadOptions.isLoadingAll) {
                if (remoteOperations.summary) {
                    if (!remoteOperations.paging && groups.length && summary) {
                        if (!remoteOperations.grouping) {
                            calculateAggregates(this, {
                                groupAggregates: summary.groupAggregates
                            }, options.data, groups.length)
                        }
                        options.data = sortGroupsBySummary(options.data, groups, summary)
                    }
                } else if (!remoteOperations.paging && summary) {
                    var _options$cachedData, _options$cachedData$e;
                    var operationTypes = options.operationTypes || {};
                    var hasOperations = Object.keys(operationTypes).some(type => operationTypes[type]);
                    if (!hasOperations || !(null !== (_options$cachedData = options.cachedData) && void 0 !== _options$cachedData && null !== (_options$cachedData$e = _options$cachedData.extra) && void 0 !== _options$cachedData$e && _options$cachedData$e.summary) || groups.length && summary.groupAggregates.length) {
                        var totalAggregates = calculateAggregates(this, summary, options.data, groups.length);
                        options.extra = Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_2__["isPlainObject"])(options.extra) ? options.extra : {};
                        options.extra.summary = totalAggregates;
                        if (options.cachedData) {
                            options.cachedData.extra = options.extra
                        }
                    }
                    options.data = sortGroupsBySummary(options.data, groups, summary)
                }
            }
            if (!options.isCustomLoading) {
                this._totalAggregates = options.extra && options.extra.summary || this._totalAggregates
            }
            this.callBase(options)
        }
    }
}();
_ui_data_grid_data_source_adapter__WEBPACK_IMPORTED_MODULE_9__["default"].extend(SummaryDataSourceAdapterExtender);
_ui_data_grid_data_source_adapter__WEBPACK_IMPORTED_MODULE_9__["default"].extend(SummaryDataSourceAdapterClientExtender);
_ui_data_grid_core__WEBPACK_IMPORTED_MODULE_7__["default"].registerModule("summary", {
    defaultOptions: function() {
        return {
            summary: {
                groupItems: void 0,
                totalItems: void 0,
                calculateCustomSummary: void 0,
                skipEmptyValues: true,
                recalculateWhileEditing: false,
                texts: {
                    sum: _localization_message__WEBPACK_IMPORTED_MODULE_8__["default"].format("dxDataGrid-summarySum"),
                    sumOtherColumn: _localization_message__WEBPACK_IMPORTED_MODULE_8__["default"].format("dxDataGrid-summarySumOtherColumn"),
                    min: _localization_message__WEBPACK_IMPORTED_MODULE_8__["default"].format("dxDataGrid-summaryMin"),
                    minOtherColumn: _localization_message__WEBPACK_IMPORTED_MODULE_8__["default"].format("dxDataGrid-summaryMinOtherColumn"),
                    max: _localization_message__WEBPACK_IMPORTED_MODULE_8__["default"].format("dxDataGrid-summaryMax"),
                    maxOtherColumn: _localization_message__WEBPACK_IMPORTED_MODULE_8__["default"].format("dxDataGrid-summaryMaxOtherColumn"),
                    avg: _localization_message__WEBPACK_IMPORTED_MODULE_8__["default"].format("dxDataGrid-summaryAvg"),
                    avgOtherColumn: _localization_message__WEBPACK_IMPORTED_MODULE_8__["default"].format("dxDataGrid-summaryAvgOtherColumn"),
                    count: _localization_message__WEBPACK_IMPORTED_MODULE_8__["default"].format("dxDataGrid-summaryCount")
                }
            },
            sortByGroupSummaryInfo: void 0
        }
    },
    views: {
        footerView: FooterView
    },
    extenders: {
        controllers: {
            data: {
                _isDataColumn: function(column) {
                    return column && (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_2__["isDefined"])(column.groupIndex) || column.showWhenGrouped)
                },
                _isGroupFooterVisible: function() {
                    var groupItems = this.option("summary.groupItems") || [];
                    for (var i = 0; i < groupItems.length; i++) {
                        var groupItem = groupItems[i];
                        var column = this._columnsController.columnOption(groupItem.showInColumn || groupItem.column);
                        if (groupItem.showInGroupFooter && this._isDataColumn(column)) {
                            return true
                        }
                    }
                    return false
                },
                _processGroupItems: function(items, groupCount, options) {
                    var data = options && options.data;
                    var result = this.callBase.apply(this, arguments);
                    if (options) {
                        if (void 0 === options.isGroupFooterVisible) {
                            options.isGroupFooterVisible = this._isGroupFooterVisible()
                        }
                        if (data && data.items && options.isGroupFooterVisible && (options.collectContinuationItems || !data.isContinuationOnNextPage)) {
                            result.push({
                                rowType: DATAGRID_GROUP_FOOTER_ROW_TYPE,
                                key: options.path.slice(),
                                data: data,
                                groupIndex: options.path.length - 1,
                                values: []
                            })
                        }
                    }
                    return result
                },
                _processGroupItem: function(groupItem, options) {
                    var that = this;
                    if (!options.summaryGroupItems) {
                        options.summaryGroupItems = that.option("summary.groupItems") || []
                    }
                    if ("group" === groupItem.rowType) {
                        var groupColumnIndex = -1;
                        var afterGroupColumnIndex = -1;
                        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_3__["each"])(options.visibleColumns, (function(visibleIndex) {
                            var prevColumn = options.visibleColumns[visibleIndex - 1];
                            if (groupItem.groupIndex === this.groupIndex) {
                                groupColumnIndex = this.index
                            }
                            if (visibleIndex > 0 && "expand" === prevColumn.command && "expand" !== this.command) {
                                afterGroupColumnIndex = this.index
                            }
                        }));
                        groupItem.summaryCells = this._calculateSummaryCells(options.summaryGroupItems, getGroupAggregates(groupItem.data), options.visibleColumns, (function(summaryItem, column) {
                            if (summaryItem.showInGroupFooter) {
                                return -1
                            }
                            if (summaryItem.alignByColumn && column && !Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_2__["isDefined"])(column.groupIndex) && column.index !== afterGroupColumnIndex) {
                                return column.index
                            } else {
                                return groupColumnIndex
                            }
                        }), true)
                    }
                    if (groupItem.rowType === DATAGRID_GROUP_FOOTER_ROW_TYPE) {
                        groupItem.summaryCells = this._calculateSummaryCells(options.summaryGroupItems, getGroupAggregates(groupItem.data), options.visibleColumns, (function(summaryItem, column) {
                            return summaryItem.showInGroupFooter && that._isDataColumn(column) ? column.index : -1
                        }))
                    }
                    return groupItem
                },
                _calculateSummaryCells: function(summaryItems, aggregates, visibleColumns, calculateTargetColumnIndex, isGroupRow) {
                    var that = this;
                    var summaryCells = [];
                    var summaryCellsByColumns = {};
                    Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_3__["each"])(summaryItems, (function(summaryIndex, summaryItem) {
                        var column = that._columnsController.columnOption(summaryItem.column);
                        var showInColumn = summaryItem.showInColumn && that._columnsController.columnOption(summaryItem.showInColumn) || column;
                        var columnIndex = calculateTargetColumnIndex(summaryItem, showInColumn);
                        if (columnIndex >= 0) {
                            if (!summaryCellsByColumns[columnIndex]) {
                                summaryCellsByColumns[columnIndex] = []
                            }
                            var aggregate = aggregates[summaryIndex];
                            if (aggregate === aggregate) {
                                var valueFormat;
                                if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_2__["isDefined"])(summaryItem.valueFormat)) {
                                    valueFormat = summaryItem.valueFormat
                                } else if ("count" !== summaryItem.summaryType) {
                                    valueFormat = _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_7__["default"].getFormatByDataType(column && column.dataType)
                                }
                                summaryCellsByColumns[columnIndex].push(Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_4__["extend"])({}, summaryItem, {
                                    value: Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_2__["isString"])(aggregate) && column && column.deserializeValue ? column.deserializeValue(aggregate) : aggregate,
                                    valueFormat: valueFormat,
                                    columnCaption: column && column.index !== columnIndex ? column.caption : void 0
                                }))
                            }
                        }
                    }));
                    if (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_2__["isEmptyObject"])(summaryCellsByColumns)) {
                        visibleColumns.forEach((column, visibleIndex) => {
                            var prevColumn = visibleColumns[visibleIndex - 1];
                            var columnIndex = isGroupRow && ("expand" === (null === prevColumn || void 0 === prevColumn ? void 0 : prevColumn.command) || "expand" === column.command) ? null === prevColumn || void 0 === prevColumn ? void 0 : prevColumn.index : column.index;
                            summaryCells.push(summaryCellsByColumns[columnIndex] || [])
                        })
                    }
                    return summaryCells
                },
                _getSummaryCells: function(summaryTotalItems, totalAggregates) {
                    var that = this;
                    var columnsController = that._columnsController;
                    return that._calculateSummaryCells(summaryTotalItems, totalAggregates, columnsController.getVisibleColumns(), (function(summaryItem, column) {
                        return that._isDataColumn(column) ? column.index : -1
                    }))
                },
                _updateItemsCore: function(change) {
                    var summaryCells;
                    var dataSource = this._dataSource;
                    var footerItems = this._footerItems;
                    var oldSummaryCells = footerItems && footerItems[0] && footerItems[0].summaryCells;
                    var summaryTotalItems = this.option("summary.totalItems");
                    this._footerItems = [];
                    if (dataSource && summaryTotalItems && summaryTotalItems.length) {
                        var totalAggregates = dataSource.totalAggregates();
                        summaryCells = this._getSummaryCells(summaryTotalItems, totalAggregates);
                        if (change && change.repaintChangesOnly && oldSummaryCells) {
                            change.totalColumnIndices = summaryCells.map((function(summaryCell, index) {
                                if (JSON.stringify(summaryCell) !== JSON.stringify(oldSummaryCells[index])) {
                                    return index
                                }
                                return -1
                            })).filter(index => index >= 0)
                        }
                        if (summaryCells.length) {
                            this._footerItems.push({
                                rowType: DATAGRID_TOTAL_FOOTER_ROW_TYPE,
                                summaryCells: summaryCells
                            })
                        }
                    }
                    this.callBase(change)
                },
                _prepareUnsavedDataSelector: function(selector) {
                    if (recalculateWhileEditing(this)) {
                        var editingController = this.getController("editing");
                        if (editingController) {
                            return function(data) {
                                data = editingController.getUpdatedData(data);
                                return selector(data)
                            }
                        }
                    }
                    return selector
                },
                _prepareAggregateSelector: function(selector, aggregator) {
                    selector = this._prepareUnsavedDataSelector(selector);
                    if ("avg" === aggregator || "sum" === aggregator) {
                        return function(data) {
                            var value = selector(data);
                            return Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_2__["isDefined"])(value) ? Number(value) : value
                        }
                    }
                    return selector
                },
                _getAggregates: function(summaryItems, remoteOperations) {
                    var that = this;
                    var columnsController = that.getController("columns");
                    var calculateCustomSummary = that.option("summary.calculateCustomSummary");
                    var commonSkipEmptyValues = that.option("summary.skipEmptyValues");
                    return Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_3__["map"])(summaryItems || [], (function(summaryItem) {
                        var column = columnsController.columnOption(summaryItem.column);
                        var calculateCellValue = column && column.calculateCellValue ? column.calculateCellValue.bind(column) : Object(_core_utils_data__WEBPACK_IMPORTED_MODULE_5__["compileGetter"])(column ? column.dataField : summaryItem.column);
                        var aggregator = summaryItem.summaryType || "count";
                        var selector = summaryItem.column;
                        var skipEmptyValues = Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_2__["isDefined"])(summaryItem.skipEmptyValues) ? summaryItem.skipEmptyValues : commonSkipEmptyValues;
                        if (remoteOperations) {
                            return {
                                selector: summaryItem.column,
                                summaryType: aggregator
                            }
                        } else {
                            selector = that._prepareAggregateSelector(calculateCellValue, aggregator);
                            if ("custom" === aggregator) {
                                if (!calculateCustomSummary) {
                                    _widget_ui_errors__WEBPACK_IMPORTED_MODULE_6__["default"].log("E1026");
                                    calculateCustomSummary = function() {}
                                }
                                var options = {
                                    component: that.component,
                                    name: summaryItem.name
                                };
                                calculateCustomSummary(options);
                                options.summaryProcess = "calculate";
                                aggregator = {
                                    seed: function(groupIndex) {
                                        options.summaryProcess = "start";
                                        options.totalValue = void 0;
                                        options.groupIndex = groupIndex;
                                        delete options.value;
                                        calculateCustomSummary(options);
                                        return options.totalValue
                                    },
                                    step: function(totalValue, value) {
                                        options.summaryProcess = "calculate";
                                        options.totalValue = totalValue;
                                        options.value = value;
                                        calculateCustomSummary(options);
                                        return options.totalValue
                                    },
                                    finalize: function(totalValue) {
                                        options.summaryProcess = "finalize";
                                        options.totalValue = totalValue;
                                        delete options.value;
                                        calculateCustomSummary(options);
                                        return options.totalValue
                                    }
                                }
                            }
                            return {
                                selector: selector,
                                aggregator: aggregator,
                                skipEmptyValues: skipEmptyValues
                            }
                        }
                    }))
                },
                _addSortInfo: function(sortByGroups, groupColumn, selector, sortOrder) {
                    if (groupColumn) {
                        var groupIndex = groupColumn.groupIndex;
                        sortOrder = sortOrder || groupColumn.sortOrder;
                        if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_2__["isDefined"])(groupIndex)) {
                            sortByGroups[groupIndex] = sortByGroups[groupIndex] || [];
                            sortByGroups[groupIndex].push({
                                selector: selector,
                                desc: "desc" === sortOrder
                            })
                        }
                    }
                },
                _findSummaryItem: function(summaryItems, name) {
                    var summaryItemIndex = -1;
                    if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_2__["isDefined"])(name)) {
                        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_3__["each"])(summaryItems || [], (function(index) {
                            if (this.name === name || index === name || this.summaryType === name || this.column === name || (summaryItem = this, summaryType = summaryItem.summaryType, column = summaryItem.column, summaryType && column && summaryType + "_" + column) === name) {
                                summaryItemIndex = index;
                                return false
                            }
                            var summaryItem, summaryType, column
                        }))
                    }
                    return summaryItemIndex
                },
                _getSummarySortByGroups: function(sortByGroupSummaryInfo, groupSummaryItems) {
                    var that = this;
                    var columnsController = that._columnsController;
                    var groupColumns = columnsController.getGroupColumns();
                    var sortByGroups = [];
                    if (!groupSummaryItems || !groupSummaryItems.length) {
                        return
                    }
                    Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_3__["each"])(sortByGroupSummaryInfo || [], (function() {
                        var sortOrder = this.sortOrder;
                        var groupColumn = this.groupColumn;
                        var summaryItemIndex = that._findSummaryItem(groupSummaryItems, this.summaryItem);
                        if (summaryItemIndex < 0) {
                            return
                        }
                        var selector = function(data) {
                            return getGroupAggregates(data)[summaryItemIndex]
                        };
                        if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_2__["isDefined"])(groupColumn)) {
                            groupColumn = columnsController.columnOption(groupColumn);
                            that._addSortInfo(sortByGroups, groupColumn, selector, sortOrder)
                        } else {
                            Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_3__["each"])(groupColumns, (function(groupIndex, groupColumn) {
                                that._addSortInfo(sortByGroups, groupColumn, selector, sortOrder)
                            }))
                        }
                    }));
                    return sortByGroups
                },
                _createDataSourceAdapterCore: function(dataSource, remoteOperations) {
                    var that = this;
                    var dataSourceAdapter = this.callBase(dataSource, remoteOperations);
                    dataSourceAdapter.summaryGetter((function(currentRemoteOperations) {
                        return that._getSummaryOptions(currentRemoteOperations || remoteOperations)
                    }));
                    return dataSourceAdapter
                },
                _getSummaryOptions: function(remoteOperations) {
                    var that = this;
                    var groupSummaryItems = that.option("summary.groupItems");
                    var totalSummaryItems = that.option("summary.totalItems");
                    var sortByGroupSummaryInfo = that.option("sortByGroupSummaryInfo");
                    var groupAggregates = that._getAggregates(groupSummaryItems, remoteOperations && remoteOperations.grouping && remoteOperations.summary);
                    var totalAggregates = that._getAggregates(totalSummaryItems, remoteOperations && remoteOperations.summary);
                    if (groupAggregates.length || totalAggregates.length) {
                        return {
                            groupAggregates: groupAggregates,
                            totalAggregates: totalAggregates,
                            sortByGroups: function() {
                                return that._getSummarySortByGroups(sortByGroupSummaryInfo, groupSummaryItems)
                            }
                        }
                    }
                },
                publicMethods: function() {
                    var methods = this.callBase();
                    methods.push("getTotalSummaryValue");
                    return methods
                },
                getTotalSummaryValue: function(summaryItemName) {
                    var summaryItemIndex = this._findSummaryItem(this.option("summary.totalItems"), summaryItemName);
                    var aggregates = this._dataSource.totalAggregates();
                    if (aggregates.length && summaryItemIndex > -1) {
                        return aggregates[summaryItemIndex]
                    }
                },
                optionChanged: function(args) {
                    if ("summary" === args.name || "sortByGroupSummaryInfo" === args.name) {
                        args.name = "dataSource"
                    }
                    this.callBase(args)
                },
                init: function() {
                    this._footerItems = [];
                    this.callBase()
                },
                footerItems: function() {
                    return this._footerItems
                }
            },
            editing: {
                _refreshSummary: function() {
                    if (recalculateWhileEditing(this) && !this.isSaving()) {
                        this._dataController.refresh({
                            load: true,
                            changesOnly: true
                        })
                    }
                },
                _addChange: function(params) {
                    var result = this.callBase.apply(this, arguments);
                    if (params.type) {
                        this._refreshSummary()
                    }
                    return result
                },
                _removeChange: function() {
                    var result = this.callBase.apply(this, arguments);
                    this._refreshSummary();
                    return result
                },
                cancelEditData: function() {
                    var result = this.callBase.apply(this, arguments);
                    this._refreshSummary();
                    return result
                }
            }
        },
        views: {
            rowsView: {
                _createRow: function(row) {
                    var $row = this.callBase.apply(this, arguments);
                    row && $row.addClass(row.rowType === DATAGRID_GROUP_FOOTER_ROW_TYPE ? DATAGRID_GROUP_FOOTER_CLASS : "");
                    return $row
                },
                _renderCells: function($row, options) {
                    this.callBase.apply(this, arguments);
                    if ("group" === options.row.rowType && options.row.summaryCells && options.row.summaryCells.length) {
                        this._renderGroupSummaryCells($row, options)
                    }
                },
                _hasAlignByColumnSummaryItems: function(columnIndex, options) {
                    return !Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_2__["isDefined"])(options.columns[columnIndex].groupIndex) && options.row.summaryCells[columnIndex].length
                },
                _getAlignByColumnCellCount: function(groupCellColSpan, options) {
                    var alignByColumnCellCount = 0;
                    for (var i = 1; i < groupCellColSpan; i++) {
                        var columnIndex = options.row.summaryCells.length - i;
                        alignByColumnCellCount = this._hasAlignByColumnSummaryItems(columnIndex, options) ? i : alignByColumnCellCount
                    }
                    return alignByColumnCellCount
                },
                _renderGroupSummaryCells: function($row, options) {
                    var $groupCell = $row.children().last();
                    var groupCellColSpan = Number($groupCell.attr("colSpan")) || 1;
                    var alignByColumnCellCount = this._getAlignByColumnCellCount(groupCellColSpan, options);
                    this._renderGroupSummaryCellsCore($groupCell, options, groupCellColSpan, alignByColumnCellCount)
                },
                _renderGroupSummaryCellsCore: function($groupCell, options, groupCellColSpan, alignByColumnCellCount) {
                    if (alignByColumnCellCount > 0) {
                        $groupCell.attr("colSpan", groupCellColSpan - alignByColumnCellCount);
                        for (var i = 0; i < alignByColumnCellCount; i++) {
                            var columnIndex = options.columns.length - alignByColumnCellCount + i;
                            this._renderCell($groupCell.parent(), Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_4__["extend"])({
                                column: options.columns[columnIndex],
                                columnIndex: this._getSummaryCellIndex(columnIndex, options.columns)
                            }, options))
                        }
                    }
                },
                _getSummaryCellIndex: function(columnIndex) {
                    return columnIndex
                },
                _getCellTemplate: function(options) {
                    if (!options.column.command && !Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_2__["isDefined"])(options.column.groupIndex) && options.summaryItems && options.summaryItems.length) {
                        return renderSummaryCell
                    } else {
                        return this.callBase(options)
                    }
                },
                _getCellOptions: function(options) {
                    var parameters = this.callBase(options);
                    if (options.row.summaryCells) {
                        return Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_4__["extend"])(parameters, getSummaryCellOptions(this, options))
                    } else {
                        return parameters
                    }
                }
            }
        }
    }
});


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.utils.js":
/*!************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.utils.js ***!
  \************************************************************************/
/*! exports provided: createGroupFilter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createGroupFilter", function() { return createGroupFilter; });
/* harmony import */ var _grid_core_ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../grid_core/ui.grid_core.utils */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.utils.js");
/* harmony import */ var _data_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../data/utils */ "./node_modules/devextreme/esm/data/utils.js");
/**
 * DevExtreme (esm/ui/data_grid/ui.data_grid.utils.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */


function createGroupFilter(path, storeLoadOptions) {
    var groups = Object(_data_utils__WEBPACK_IMPORTED_MODULE_1__["normalizeSortingInfo"])(storeLoadOptions.group);
    var filter = [];
    for (var i = 0; i < path.length; i++) {
        filter.push([groups[i].selector, "=", path[i]])
    }
    if (storeLoadOptions.filter) {
        filter.push(storeLoadOptions.filter)
    }
    return _grid_core_ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_0__["default"].combineFilters(filter)
}


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.validating.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.validating.js ***!
  \*****************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ui.data_grid.core */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.core.js");
/* harmony import */ var _grid_core_ui_grid_core_validating__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../grid_core/ui.grid_core.validating */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.validating.js");
/**
 * DevExtreme (esm/ui/data_grid/ui.data_grid.validating.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */


_ui_data_grid_core__WEBPACK_IMPORTED_MODULE_0__["default"].registerModule("validating", _grid_core_ui_grid_core_validating__WEBPACK_IMPORTED_MODULE_1__["validatingModule"]);


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.virtual_columns.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.virtual_columns.js ***!
  \**********************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ui.data_grid.core */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.core.js");
/* harmony import */ var _grid_core_ui_grid_core_virtual_columns__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../grid_core/ui.grid_core.virtual_columns */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.virtual_columns.js");
/**
 * DevExtreme (esm/ui/data_grid/ui.data_grid.virtual_columns.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */


_ui_data_grid_core__WEBPACK_IMPORTED_MODULE_0__["default"].registerModule("virtualColumns", _grid_core_ui_grid_core_virtual_columns__WEBPACK_IMPORTED_MODULE_1__["virtualColumnsModule"]);


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.virtual_scrolling.js":
/*!************************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.virtual_scrolling.js ***!
  \************************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ui_data_grid_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ui.data_grid.core */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.core.js");
/* harmony import */ var _ui_data_grid_data_source_adapter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ui.data_grid.data_source_adapter */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.data_source_adapter.js");
/* harmony import */ var _grid_core_ui_grid_core_virtual_scrolling__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../grid_core/ui.grid_core.virtual_scrolling */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.virtual_scrolling.js");
/**
 * DevExtreme (esm/ui/data_grid/ui.data_grid.virtual_scrolling.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */



_ui_data_grid_core__WEBPACK_IMPORTED_MODULE_0__["default"].registerModule("virtualScrolling", _grid_core_ui_grid_core_virtual_scrolling__WEBPACK_IMPORTED_MODULE_2__["virtualScrollingModule"]);
_ui_data_grid_data_source_adapter__WEBPACK_IMPORTED_MODULE_1__["default"].extend(_grid_core_ui_grid_core_virtual_scrolling__WEBPACK_IMPORTED_MODULE_2__["virtualScrollingModule"].extenders.dataSourceAdapter);


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/dialog.js":
/*!**************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/dialog.js ***!
  \**************************************************/
/*! exports provided: FakeDialogComponent, custom, alert, confirm */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FakeDialogComponent", function() { return FakeDialogComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "custom", function() { return custom; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "alert", function() { return alert; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "confirm", function() { return confirm; });
/* harmony import */ var _core_utils_size__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/utils/size */ "./node_modules/devextreme/esm/core/utils/size.js");
/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/renderer */ "./node_modules/devextreme/esm/core/renderer.js");
/* harmony import */ var _core_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/component */ "./node_modules/devextreme/esm/core/component.js");
/* harmony import */ var _core_action__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../core/action */ "./node_modules/devextreme/esm/core/action.js");
/* harmony import */ var _core_devices__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../core/devices */ "./node_modules/devextreme/esm/core/devices.js");
/* harmony import */ var _core_config__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../core/config */ "./node_modules/devextreme/esm/core/config.js");
/* harmony import */ var _core_utils_dom__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../core/utils/dom */ "./node_modules/devextreme/esm/core/utils/dom.js");
/* harmony import */ var _core_utils_deferred__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../core/utils/deferred */ "./node_modules/devextreme/esm/core/utils/deferred.js");
/* harmony import */ var _core_utils_type__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../core/utils/type */ "./node_modules/devextreme/esm/core/utils/type.js");
/* harmony import */ var _core_utils_iterator__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../core/utils/iterator */ "./node_modules/devextreme/esm/core/utils/iterator.js");
/* harmony import */ var _core_utils_extend__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../core/utils/extend */ "./node_modules/devextreme/esm/core/utils/extend.js");
/* harmony import */ var _core_utils_window__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../core/utils/window */ "./node_modules/devextreme/esm/core/utils/window.js");
/* harmony import */ var _events_core_events_engine__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../events/core/events_engine */ "./node_modules/devextreme/esm/events/core/events_engine.js");
/* harmony import */ var _core_utils_view_port__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../core/utils/view_port */ "./node_modules/devextreme/esm/core/utils/view_port.js");
/* harmony import */ var _localization_message__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../localization/message */ "./node_modules/devextreme/esm/localization/message.js");
/* harmony import */ var _widget_ui_errors__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./widget/ui.errors */ "./node_modules/devextreme/esm/ui/widget/ui.errors.js");
/* harmony import */ var _popup__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./popup */ "./node_modules/devextreme/esm/ui/popup.js");
/* harmony import */ var _core_utils_common__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../core/utils/common */ "./node_modules/devextreme/esm/core/utils/common.js");
/**
 * DevExtreme (esm/ui/dialog.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */


















var window = Object(_core_utils_window__WEBPACK_IMPORTED_MODULE_11__["getWindow"])();
var DEFAULT_BUTTON = {
    text: "OK",
    onClick: function() {
        return true
    }
};
var DX_DIALOG_CLASSNAME = "dx-dialog";
var DX_DIALOG_WRAPPER_CLASSNAME = "".concat(DX_DIALOG_CLASSNAME, "-wrapper");
var DX_DIALOG_ROOT_CLASSNAME = "".concat(DX_DIALOG_CLASSNAME, "-root");
var DX_DIALOG_CONTENT_CLASSNAME = "".concat(DX_DIALOG_CLASSNAME, "-content");
var DX_DIALOG_MESSAGE_CLASSNAME = "".concat(DX_DIALOG_CLASSNAME, "-message");
var DX_DIALOG_BUTTONS_CLASSNAME = "".concat(DX_DIALOG_CLASSNAME, "-buttons");
var DX_DIALOG_BUTTON_CLASSNAME = "".concat(DX_DIALOG_CLASSNAME, "-button");
var DX_BUTTON_CLASSNAME = "dx-button";
var FakeDialogComponent = _core_component__WEBPACK_IMPORTED_MODULE_2__["Component"].inherit({
    ctor: function(element, options) {
        this.callBase(options)
    },
    _defaultOptionsRules: function() {
        return this.callBase().concat([{
            device: {
                platform: "ios"
            },
            options: {
                width: 276
            }
        }])
    }
});
var custom = function(options) {
    var _options$title;
    var deferred = new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_7__["Deferred"];
    var defaultOptions = (new FakeDialogComponent).option();
    options = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_10__["extend"])(defaultOptions, options);
    var $element = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])("<div>").addClass(DX_DIALOG_CLASSNAME).appendTo(Object(_core_utils_view_port__WEBPACK_IMPORTED_MODULE_13__["value"])());
    var isMessageDefined = "message" in options;
    var isMessageHtmlDefined = "messageHtml" in options;
    if (isMessageDefined) {
        _widget_ui_errors__WEBPACK_IMPORTED_MODULE_15__["default"].log("W1013")
    }
    var messageHtml = String(isMessageHtmlDefined ? options.messageHtml : options.message);
    var $message = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])("<div>").addClass(DX_DIALOG_MESSAGE_CLASSNAME).html(messageHtml);
    var popupToolbarItems = [];
    Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_9__["each"])(options.buttons || [DEFAULT_BUTTON], (function() {
        var action = new _core_action__WEBPACK_IMPORTED_MODULE_3__["default"](this.onClick, {
            context: popupInstance
        });
        popupToolbarItems.push({
            toolbar: "bottom",
            location: _core_devices__WEBPACK_IMPORTED_MODULE_4__["default"].current().android ? "after" : "center",
            widget: "dxButton",
            options: Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_10__["extend"])({}, this, {
                onClick: function() {
                    var result = action.execute(...arguments);
                    hide(result)
                }
            })
        })
    }));
    var popupInstance = new _popup__WEBPACK_IMPORTED_MODULE_16__["default"]($element, Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_10__["extend"])({
        title: null !== (_options$title = options.title) && void 0 !== _options$title ? _options$title : "",
        showTitle: Object(_core_utils_common__WEBPACK_IMPORTED_MODULE_17__["ensureDefined"])(options.showTitle, true),
        dragEnabled: Object(_core_utils_common__WEBPACK_IMPORTED_MODULE_17__["ensureDefined"])(options.dragEnabled, true),
        height: "auto",
        width: options.width,
        showCloseButton: options.showCloseButton || false,
        ignoreChildEvents: false,
        onContentReady: function(args) {
            args.component.$content().addClass(DX_DIALOG_CONTENT_CLASSNAME).append($message)
        },
        onShowing: function(e) {
            e.component.bottomToolbar().addClass(DX_DIALOG_BUTTONS_CLASSNAME).find(".".concat(DX_BUTTON_CLASSNAME)).addClass(DX_DIALOG_BUTTON_CLASSNAME);
            Object(_core_utils_dom__WEBPACK_IMPORTED_MODULE_6__["resetActiveElement"])()
        },
        onShown: function(e) {
            var $firstButton = e.component.bottomToolbar().find(".".concat(DX_BUTTON_CLASSNAME)).first();
            _events_core_events_engine__WEBPACK_IMPORTED_MODULE_12__["default"].trigger($firstButton, "focus")
        },
        onHiding: function() {
            deferred.reject()
        },
        toolbarItems: popupToolbarItems,
        animation: {
            show: {
                type: "pop",
                duration: 400
            },
            hide: {
                type: "pop",
                duration: 400,
                to: {
                    opacity: 0,
                    scale: 0
                },
                from: {
                    opacity: 1,
                    scale: 1
                }
            }
        },
        rtlEnabled: Object(_core_config__WEBPACK_IMPORTED_MODULE_5__["default"])().rtlEnabled,
        position: {
            boundaryOffset: {
                h: 10,
                v: 0
            }
        }
    }, options.popupOptions));
    popupInstance.$wrapper().addClass(DX_DIALOG_WRAPPER_CLASSNAME);
    if (options.position) {
        popupInstance.option("position", options.position)
    }
    popupInstance.$wrapper().addClass(DX_DIALOG_ROOT_CLASSNAME);

    function hide(value) {
        deferred.resolve(value);
        popupInstance.hide().done((function() {
            popupInstance.$element().remove()
        }))
    }
    return {
        show: function() {
            if ("android" === _core_devices__WEBPACK_IMPORTED_MODULE_4__["default"].real().platform) {
                var isPortrait = Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getHeight"])(window) > Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getWidth"])(window);
                var width = isPortrait ? "80%" : "60%";
                popupInstance.option({
                    width: width
                })
            }
            popupInstance.show();
            return deferred.promise()
        },
        hide: hide
    }
};
var alert = function(messageHtml) {
    var title = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "";
    var showTitle = arguments.length > 2 ? arguments[2] : void 0;
    var options = Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_8__["isPlainObject"])(messageHtml) ? messageHtml : {
        title: title,
        messageHtml: messageHtml,
        showTitle: showTitle,
        dragEnabled: showTitle
    };
    return custom(options).show()
};
var confirm = function(messageHtml) {
    var title = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "";
    var showTitle = arguments.length > 2 ? arguments[2] : void 0;
    var options = Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_8__["isPlainObject"])(messageHtml) ? messageHtml : {
        title: title,
        messageHtml: messageHtml,
        showTitle: showTitle,
        buttons: [{
            text: _localization_message__WEBPACK_IMPORTED_MODULE_14__["default"].format("Yes"),
            onClick: function() {
                return true
            }
        }, {
            text: _localization_message__WEBPACK_IMPORTED_MODULE_14__["default"].format("No"),
            onClick: function() {
                return false
            }
        }],
        dragEnabled: showTitle
    };
    return custom(options).show()
};


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/draggable.js":
/*!*****************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/draggable.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _core_utils_size__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/utils/size */ "./node_modules/devextreme/esm/core/utils/size.js");
/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/renderer */ "./node_modules/devextreme/esm/core/renderer.js");
/* harmony import */ var _core_dom_adapter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/dom_adapter */ "./node_modules/devextreme/esm/core/dom_adapter.js");
/* harmony import */ var _core_utils_window__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../core/utils/window */ "./node_modules/devextreme/esm/core/utils/window.js");
/* harmony import */ var _core_utils_position__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../core/utils/position */ "./node_modules/devextreme/esm/core/utils/position.js");
/* harmony import */ var _events_core_events_engine__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../events/core/events_engine */ "./node_modules/devextreme/esm/events/core/events_engine.js");
/* harmony import */ var _core_utils_string__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../core/utils/string */ "./node_modules/devextreme/esm/core/utils/string.js");
/* harmony import */ var _core_component_registrator__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../core/component_registrator */ "./node_modules/devextreme/esm/core/component_registrator.js");
/* harmony import */ var _animation_translator__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../animation/translator */ "./node_modules/devextreme/esm/animation/translator.js");
/* harmony import */ var _scroll_view_animator__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./scroll_view/animator */ "./node_modules/devextreme/esm/ui/scroll_view/animator.js");
/* harmony import */ var _core_utils_inflector__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../core/utils/inflector */ "./node_modules/devextreme/esm/core/utils/inflector.js");
/* harmony import */ var _core_utils_extend__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../core/utils/extend */ "./node_modules/devextreme/esm/core/utils/extend.js");
/* harmony import */ var _core_dom_component__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../core/dom_component */ "./node_modules/devextreme/esm/core/dom_component.js");
/* harmony import */ var _core_element__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../core/element */ "./node_modules/devextreme/esm/core/element.js");
/* harmony import */ var _events_utils_index__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../events/utils/index */ "./node_modules/devextreme/esm/events/utils/index.js");
/* harmony import */ var _events_pointer__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../events/pointer */ "./node_modules/devextreme/esm/events/pointer.js");
/* harmony import */ var _events_drag__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../events/drag */ "./node_modules/devextreme/esm/events/drag.js");
/* harmony import */ var _animation_position__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../animation/position */ "./node_modules/devextreme/esm/animation/position.js");
/* harmony import */ var _core_utils_type__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../core/utils/type */ "./node_modules/devextreme/esm/core/utils/type.js");
/* harmony import */ var _core_utils_common__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../core/utils/common */ "./node_modules/devextreme/esm/core/utils/common.js");
/* harmony import */ var _core_utils_view_port__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../core/utils/view_port */ "./node_modules/devextreme/esm/core/utils/view_port.js");
/* harmony import */ var _core_templates_empty_template__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../core/templates/empty_template */ "./node_modules/devextreme/esm/core/templates/empty_template.js");
/* harmony import */ var _core_utils_deferred__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../core/utils/deferred */ "./node_modules/devextreme/esm/core/utils/deferred.js");
/**
 * DevExtreme (esm/ui/draggable.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */























var window = Object(_core_utils_window__WEBPACK_IMPORTED_MODULE_3__["getWindow"])();
var DRAGGABLE = "dxDraggable";
var DRAGSTART_EVENT_NAME = Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_14__["addNamespace"])(_events_drag__WEBPACK_IMPORTED_MODULE_16__["start"], DRAGGABLE);
var DRAG_EVENT_NAME = Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_14__["addNamespace"])(_events_drag__WEBPACK_IMPORTED_MODULE_16__["move"], DRAGGABLE);
var DRAGEND_EVENT_NAME = Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_14__["addNamespace"])(_events_drag__WEBPACK_IMPORTED_MODULE_16__["end"], DRAGGABLE);
var DRAG_ENTER_EVENT_NAME = Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_14__["addNamespace"])(_events_drag__WEBPACK_IMPORTED_MODULE_16__["enter"], DRAGGABLE);
var DRAGEND_LEAVE_EVENT_NAME = Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_14__["addNamespace"])(_events_drag__WEBPACK_IMPORTED_MODULE_16__["leave"], DRAGGABLE);
var POINTERDOWN_EVENT_NAME = Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_14__["addNamespace"])(_events_pointer__WEBPACK_IMPORTED_MODULE_15__["default"].down, DRAGGABLE);
var CLONE_CLASS = "clone";
var targetDraggable;
var sourceDraggable;
var ANONYMOUS_TEMPLATE_NAME = "content";
var getMousePosition = event => ({
    x: event.pageX - Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(window).scrollLeft(),
    y: event.pageY - Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(window).scrollTop()
});
var GESTURE_COVER_CLASS = "dx-gesture-cover";
var OVERLAY_WRAPPER_CLASS = "dx-overlay-wrapper";
var OVERLAY_CONTENT_CLASS = "dx-overlay-content";
class ScrollHelper {
    constructor(orientation, component) {
        this._preventScroll = true;
        this._component = component;
        if ("vertical" === orientation) {
            this._scrollValue = "scrollTop";
            this._overFlowAttr = "overflowY";
            this._sizeAttr = "height";
            this._scrollSizeProp = "scrollHeight";
            this._clientSizeProp = "clientHeight";
            this._limitProps = {
                start: "top",
                end: "bottom"
            }
        } else {
            this._scrollValue = "scrollLeft";
            this._overFlowAttr = "overflowX";
            this._sizeAttr = "width";
            this._scrollSizeProp = "scrollWidth";
            this._clientSizeProp = "clientWidth";
            this._limitProps = {
                start: "left",
                end: "right"
            }
        }
    }
    updateScrollable(elements, mousePosition) {
        var isScrollableFound = false;
        elements.some(element => {
            var $element = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(element);
            var isTargetOverOverlayWrapper = $element.hasClass(OVERLAY_WRAPPER_CLASS);
            var isTargetOverOverlayContent = $element.hasClass(OVERLAY_CONTENT_CLASS);
            if (isTargetOverOverlayWrapper || isTargetOverOverlayContent) {
                return true
            }
            isScrollableFound = this._trySetScrollable(element, mousePosition);
            return isScrollableFound
        });
        if (!isScrollableFound) {
            this._$scrollableAtPointer = null;
            this._scrollSpeed = 0
        }
    }
    isScrolling() {
        return !!this._scrollSpeed
    }
    isScrollable($element) {
        return ("auto" === $element.css(this._overFlowAttr) || $element.hasClass("dx-scrollable-container")) && $element.prop(this._scrollSizeProp) > Math.ceil("width" === this._sizeAttr ? Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getWidth"])($element) : Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getHeight"])($element))
    }
    _trySetScrollable(element, mousePosition) {
        var $element = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(element);
        var distanceToBorders;
        var sensitivity = this._component.option("scrollSensitivity");
        var isScrollable = this.isScrollable($element);
        if (isScrollable) {
            distanceToBorders = this._calculateDistanceToBorders($element, mousePosition);
            if (sensitivity > distanceToBorders[this._limitProps.start]) {
                if (!this._preventScroll) {
                    this._scrollSpeed = -this._calculateScrollSpeed(distanceToBorders[this._limitProps.start]);
                    this._$scrollableAtPointer = $element
                }
            } else if (sensitivity > distanceToBorders[this._limitProps.end]) {
                if (!this._preventScroll) {
                    this._scrollSpeed = this._calculateScrollSpeed(distanceToBorders[this._limitProps.end]);
                    this._$scrollableAtPointer = $element
                }
            } else {
                isScrollable = false;
                this._preventScroll = false
            }
        }
        return isScrollable
    }
    _calculateDistanceToBorders($area, mousePosition) {
        var area = $area.get(0);
        var areaBoundingRect;
        if (area) {
            areaBoundingRect = Object(_core_utils_position__WEBPACK_IMPORTED_MODULE_4__["getBoundingRect"])(area);
            return {
                left: mousePosition.x - areaBoundingRect.left,
                top: mousePosition.y - areaBoundingRect.top,
                right: areaBoundingRect.right - mousePosition.x,
                bottom: areaBoundingRect.bottom - mousePosition.y
            }
        } else {
            return {}
        }
    }
    _calculateScrollSpeed(distance) {
        var component = this._component;
        var sensitivity = component.option("scrollSensitivity");
        var maxSpeed = component.option("scrollSpeed");
        return Math.ceil(Math.pow((sensitivity - distance) / sensitivity, 2) * maxSpeed)
    }
    scrollByStep() {
        if (this._$scrollableAtPointer && this._scrollSpeed) {
            if (this._$scrollableAtPointer.hasClass("dx-scrollable-container")) {
                var $scrollable = this._$scrollableAtPointer.closest(".dx-scrollable");
                var scrollableInstance = $scrollable.data("dxScrollable") || $scrollable.data("dxScrollView");
                if (scrollableInstance) {
                    var nextScrollPosition = scrollableInstance.scrollOffset()[this._limitProps.start] + this._scrollSpeed;
                    scrollableInstance.scrollTo({
                        [this._limitProps.start]: nextScrollPosition
                    })
                }
            } else {
                var _nextScrollPosition = this._$scrollableAtPointer[this._scrollValue]() + this._scrollSpeed;
                this._$scrollableAtPointer[this._scrollValue](_nextScrollPosition)
            }
            var dragMoveArgs = this._component._dragMoveArgs;
            if (dragMoveArgs) {
                this._component._dragMoveHandler(dragMoveArgs)
            }
        }
    }
    reset() {
        this._$scrollableAtPointer = null;
        this._scrollSpeed = 0;
        this._preventScroll = true
    }
    isOutsideScrollable($scrollable, event) {
        if (!$scrollable) {
            return false
        }
        var scrollableSize = Object(_core_utils_position__WEBPACK_IMPORTED_MODULE_4__["getBoundingRect"])($scrollable.get(0));
        var start = scrollableSize[this._limitProps.start];
        var size = scrollableSize[this._sizeAttr];
        var mousePosition = getMousePosition(event);
        var location = "width" === this._sizeAttr ? mousePosition.x : mousePosition.y;
        return location < start || location > start + size
    }
}
var ScrollAnimator = _scroll_view_animator__WEBPACK_IMPORTED_MODULE_9__["default"].inherit({
    ctor: function(strategy) {
        this.callBase();
        this._strategy = strategy
    },
    _step: function() {
        var horizontalScrollHelper = this._strategy._horizontalScrollHelper;
        var verticalScrollHelper = this._strategy._verticalScrollHelper;
        horizontalScrollHelper && horizontalScrollHelper.scrollByStep();
        verticalScrollHelper && verticalScrollHelper.scrollByStep()
    }
});
var Draggable = _core_dom_component__WEBPACK_IMPORTED_MODULE_12__["default"].inherit({
    reset: _core_utils_common__WEBPACK_IMPORTED_MODULE_19__["noop"],
    dragMove: _core_utils_common__WEBPACK_IMPORTED_MODULE_19__["noop"],
    dragEnter: _core_utils_common__WEBPACK_IMPORTED_MODULE_19__["noop"],
    dragLeave: _core_utils_common__WEBPACK_IMPORTED_MODULE_19__["noop"],
    dragEnd: function(sourceEvent) {
        var sourceDraggable = this._getSourceDraggable();
        sourceDraggable._fireRemoveEvent(sourceEvent);
        return (new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_22__["Deferred"]).resolve()
    },
    _fireRemoveEvent: _core_utils_common__WEBPACK_IMPORTED_MODULE_19__["noop"],
    _getDefaultOptions: function() {
        return Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_11__["extend"])(this.callBase(), {
            onDragStart: null,
            onDragMove: null,
            onDragEnd: null,
            onDragEnter: null,
            onDragLeave: null,
            onDrop: null,
            immediate: true,
            dragDirection: "both",
            boundary: void 0,
            boundOffset: 0,
            allowMoveByClick: false,
            itemData: null,
            container: void 0,
            dragTemplate: void 0,
            contentTemplate: "content",
            handle: "",
            filter: "",
            clone: false,
            autoScroll: true,
            scrollSpeed: 30,
            scrollSensitivity: 60,
            group: void 0,
            data: void 0
        })
    },
    _setOptionsByReference: function() {
        this.callBase.apply(this, arguments);
        Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_11__["extend"])(this._optionsByReference, {
            component: true,
            group: true,
            itemData: true,
            data: true
        })
    },
    _init: function() {
        this.callBase();
        this._attachEventHandlers();
        this._scrollAnimator = new ScrollAnimator(this);
        this._horizontalScrollHelper = new ScrollHelper("horizontal", this);
        this._verticalScrollHelper = new ScrollHelper("vertical", this)
    },
    _normalizeCursorOffset: function(offset) {
        if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_18__["isObject"])(offset)) {
            offset = {
                h: offset.x,
                v: offset.y
            }
        }
        offset = Object(_core_utils_common__WEBPACK_IMPORTED_MODULE_19__["splitPair"])(offset).map(value => parseFloat(value));
        return {
            left: offset[0],
            top: 1 === offset.length ? offset[0] : offset[1]
        }
    },
    _getNormalizedCursorOffset: function(offset, options) {
        if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_18__["isFunction"])(offset)) {
            offset = offset.call(this, options)
        }
        return this._normalizeCursorOffset(offset)
    },
    _calculateElementOffset: function(options) {
        var elementOffset;
        var dragElementOffset;
        var event = options.event;
        var $element = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(options.itemElement);
        var $dragElement = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(options.dragElement);
        var isCloned = this._dragElementIsCloned();
        var cursorOffset = this.option("cursorOffset");
        var normalizedCursorOffset = {
            left: 0,
            top: 0
        };
        var currentLocate = this._initialLocate = Object(_animation_translator__WEBPACK_IMPORTED_MODULE_8__["locate"])($dragElement);
        if (isCloned || options.initialOffset || cursorOffset) {
            elementOffset = options.initialOffset || $element.offset();
            if (cursorOffset) {
                normalizedCursorOffset = this._getNormalizedCursorOffset(cursorOffset, options);
                if (isFinite(normalizedCursorOffset.left)) {
                    elementOffset.left = event.pageX
                }
                if (isFinite(normalizedCursorOffset.top)) {
                    elementOffset.top = event.pageY
                }
            }
            dragElementOffset = $dragElement.offset();
            elementOffset.top -= dragElementOffset.top + (normalizedCursorOffset.top || 0) - currentLocate.top;
            elementOffset.left -= dragElementOffset.left + (normalizedCursorOffset.left || 0) - currentLocate.left
        }
        return elementOffset
    },
    _initPosition: function(options) {
        var $dragElement = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(options.dragElement);
        var elementOffset = this._calculateElementOffset(options);
        if (elementOffset) {
            this._move(elementOffset, $dragElement)
        }
        this._startPosition = Object(_animation_translator__WEBPACK_IMPORTED_MODULE_8__["locate"])($dragElement)
    },
    _startAnimator: function() {
        if (!this._scrollAnimator.inProgress()) {
            this._scrollAnimator.start()
        }
    },
    _stopAnimator: function() {
        this._scrollAnimator.stop()
    },
    _addWidgetPrefix: function(className) {
        var componentName = this.NAME;
        return Object(_core_utils_inflector__WEBPACK_IMPORTED_MODULE_10__["dasherize"])(componentName) + (className ? "-" + className : "")
    },
    _getItemsSelector: function() {
        return this.option("filter") || ""
    },
    _$content: function() {
        var $element = this.$element();
        var $wrapper = $element.children(".dx-template-wrapper");
        return $wrapper.length ? $wrapper : $element
    },
    _attachEventHandlers: function() {
        if (this.option("disabled")) {
            return
        }
        var $element = this._$content();
        var itemsSelector = this._getItemsSelector();
        var allowMoveByClick = this.option("allowMoveByClick");
        var data = {
            direction: this.option("dragDirection"),
            immediate: this.option("immediate"),
            checkDropTarget: ($target, event) => {
                var targetGroup = this.option("group");
                var sourceGroup = this._getSourceDraggable().option("group");
                var $scrollable = this._getScrollable($target);
                if (this._verticalScrollHelper.isOutsideScrollable($scrollable, event) || this._horizontalScrollHelper.isOutsideScrollable($scrollable, event)) {
                    return false
                }
                return sourceGroup && sourceGroup === targetGroup
            }
        };
        if (allowMoveByClick) {
            $element = this._getArea();
            _events_core_events_engine__WEBPACK_IMPORTED_MODULE_5__["default"].on($element, POINTERDOWN_EVENT_NAME, data, this._pointerDownHandler.bind(this))
        }
        if (">" === itemsSelector[0]) {
            itemsSelector = itemsSelector.slice(1)
        }
        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_5__["default"].on($element, DRAGSTART_EVENT_NAME, itemsSelector, data, this._dragStartHandler.bind(this));
        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_5__["default"].on($element, DRAG_EVENT_NAME, data, this._dragMoveHandler.bind(this));
        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_5__["default"].on($element, DRAGEND_EVENT_NAME, data, this._dragEndHandler.bind(this));
        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_5__["default"].on($element, DRAG_ENTER_EVENT_NAME, data, this._dragEnterHandler.bind(this));
        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_5__["default"].on($element, DRAGEND_LEAVE_EVENT_NAME, data, this._dragLeaveHandler.bind(this))
    },
    _dragElementIsCloned: function() {
        return this._$dragElement && this._$dragElement.hasClass(this._addWidgetPrefix(CLONE_CLASS))
    },
    _getDragTemplateArgs: function($element, $container) {
        return {
            container: Object(_core_element__WEBPACK_IMPORTED_MODULE_13__["getPublicElement"])($container),
            model: {
                itemData: this.option("itemData"),
                itemElement: Object(_core_element__WEBPACK_IMPORTED_MODULE_13__["getPublicElement"])($element)
            }
        }
    },
    _createDragElement: function($element) {
        var result = $element;
        var clone = this.option("clone");
        var $container = this._getContainer();
        var template = this.option("dragTemplate");
        if (template) {
            template = this._getTemplate(template);
            result = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])("<div>").appendTo($container);
            template.render(this._getDragTemplateArgs($element, result))
        } else if (clone) {
            result = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])("<div>").appendTo($container);
            $element.clone().css({
                width: $element.css("width"),
                height: $element.css("height")
            }).appendTo(result)
        }
        return result.toggleClass(this._addWidgetPrefix(CLONE_CLASS), result.get(0) !== $element.get(0)).toggleClass("dx-rtl", this.option("rtlEnabled"))
    },
    _resetDragElement: function() {
        if (this._dragElementIsCloned()) {
            this._$dragElement.remove()
        } else {
            this._toggleDraggingClass(false)
        }
        this._$dragElement = null
    },
    _resetSourceElement: function() {
        this._toggleDragSourceClass(false);
        this._$sourceElement = null
    },
    _detachEventHandlers: function() {
        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_5__["default"].off(this._$content(), "." + DRAGGABLE);
        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_5__["default"].off(this._getArea(), "." + DRAGGABLE)
    },
    _move: function(position, $element) {
        Object(_animation_translator__WEBPACK_IMPORTED_MODULE_8__["move"])($element || this._$dragElement, position)
    },
    _getDraggableElement: function(e) {
        var $sourceElement = this._getSourceElement();
        if ($sourceElement) {
            return $sourceElement
        }
        var allowMoveByClick = this.option("allowMoveByClick");
        if (allowMoveByClick) {
            return this.$element()
        }
        var $target = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(e && e.target);
        var itemsSelector = this._getItemsSelector();
        if (">" === itemsSelector[0]) {
            var $items = this._$content().find(itemsSelector);
            if (!$items.is($target)) {
                $target = $target.closest($items)
            }
        }
        return $target
    },
    _getSourceElement: function() {
        var draggable = this._getSourceDraggable();
        return draggable._$sourceElement
    },
    _pointerDownHandler: function(e) {
        if (Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_14__["needSkipEvent"])(e)) {
            return
        }
        var position = {};
        var $element = this.$element();
        var dragDirection = this.option("dragDirection");
        if ("horizontal" === dragDirection || "both" === dragDirection) {
            position.left = e.pageX - $element.offset().left + Object(_animation_translator__WEBPACK_IMPORTED_MODULE_8__["locate"])($element).left - Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getWidth"])($element) / 2
        }
        if ("vertical" === dragDirection || "both" === dragDirection) {
            position.top = e.pageY - $element.offset().top + Object(_animation_translator__WEBPACK_IMPORTED_MODULE_8__["locate"])($element).top - Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getHeight"])($element) / 2
        }
        this._move(position, $element);
        this._getAction("onDragMove")(this._getEventArgs(e))
    },
    _isValidElement: function(event, $element) {
        var handle = this.option("handle");
        var $target = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(event.originalEvent && event.originalEvent.target);
        if (handle && !$target.closest(handle).length) {
            return false
        }
        if (!$element.length) {
            return false
        }
        return !$element.is(".dx-state-disabled, .dx-state-disabled *")
    },
    _dragStartHandler: function(e) {
        var $element = this._getDraggableElement(e);
        if (!this._isValidElement(e, $element)) {
            e.cancel = true;
            return
        }
        if (this._$sourceElement) {
            return
        }
        var dragStartArgs = this._getDragStartArgs(e, $element);
        this._getAction("onDragStart")(dragStartArgs);
        if (dragStartArgs.cancel) {
            e.cancel = true;
            return
        }
        this.option("itemData", dragStartArgs.itemData);
        this._setSourceDraggable();
        this._$sourceElement = $element;
        var initialOffset = $element.offset();
        var $dragElement = this._$dragElement = this._createDragElement($element);
        this._toggleDraggingClass(true);
        this._toggleDragSourceClass(true);
        this._setGestureCoverCursor($dragElement.children());
        var isFixedPosition = "fixed" === $dragElement.css("position");
        this._initPosition(Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_11__["extend"])({}, dragStartArgs, {
            dragElement: $dragElement.get(0),
            initialOffset: isFixedPosition && initialOffset
        }));
        var $area = this._getArea();
        var areaOffset = this._getAreaOffset($area);
        var boundOffset = this._getBoundOffset();
        var areaWidth = Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getOuterWidth"])($area);
        var areaHeight = Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getOuterHeight"])($area);
        var elementWidth = Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getWidth"])($dragElement);
        var elementHeight = Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getHeight"])($dragElement);
        var startOffset_left = $dragElement.offset().left - areaOffset.left,
            startOffset_top = $dragElement.offset().top - areaOffset.top;
        if ($area.length) {
            e.maxLeftOffset = startOffset_left - boundOffset.left;
            e.maxRightOffset = areaWidth - startOffset_left - elementWidth - boundOffset.right;
            e.maxTopOffset = startOffset_top - boundOffset.top;
            e.maxBottomOffset = areaHeight - startOffset_top - elementHeight - boundOffset.bottom
        }
        if (this.option("autoScroll")) {
            this._startAnimator()
        }
    },
    _getAreaOffset: function($area) {
        var offset = $area && _animation_position__WEBPACK_IMPORTED_MODULE_17__["default"].offset($area);
        return offset ? offset : {
            left: 0,
            top: 0
        }
    },
    _toggleDraggingClass: function(value) {
        this._$dragElement && this._$dragElement.toggleClass(this._addWidgetPrefix("dragging"), value)
    },
    _toggleDragSourceClass: function(value, $element) {
        var $sourceElement = $element || this._$sourceElement;
        $sourceElement && $sourceElement.toggleClass(this._addWidgetPrefix("source"), value)
    },
    _setGestureCoverCursor: function($element) {
        Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(".".concat(GESTURE_COVER_CLASS)).css("cursor", $element.css("cursor"))
    },
    _getBoundOffset: function() {
        var boundOffset = this.option("boundOffset");
        if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_18__["isFunction"])(boundOffset)) {
            boundOffset = boundOffset.call(this)
        }
        return Object(_core_utils_string__WEBPACK_IMPORTED_MODULE_6__["quadToObject"])(boundOffset)
    },
    _getArea: function() {
        var area = this.option("boundary");
        if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_18__["isFunction"])(area)) {
            area = area.call(this)
        }
        return Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(area)
    },
    _getContainer: function() {
        var container = this.option("container");
        if (void 0 === container) {
            container = Object(_core_utils_view_port__WEBPACK_IMPORTED_MODULE_20__["value"])()
        }
        return Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(container)
    },
    _dragMoveHandler: function(e, scrollBy) {
        this._dragMoveArgs = e;
        if (!this._$dragElement) {
            e.cancel = true;
            return
        }
        var offset = e.offset;
        var startPosition = this._startPosition;
        this._move({
            left: startPosition.left + offset.x,
            top: startPosition.top + offset.y
        });
        if (!scrollBy) {
            this._updateScrollable(e)
        }
        var eventArgs = this._getEventArgs(e);
        this._getAction("onDragMove")(eventArgs);
        if (true === eventArgs.cancel) {
            return
        }
        var targetDraggable = this._getTargetDraggable();
        targetDraggable.dragMove(e, scrollBy)
    },
    _updateScrollable: function(e) {
        if (this.option("autoScroll")) {
            var mousePosition = getMousePosition(e);
            var allObjects = _core_dom_adapter__WEBPACK_IMPORTED_MODULE_2__["default"].elementsFromPoint(mousePosition.x, mousePosition.y);
            this._verticalScrollHelper.updateScrollable(allObjects, mousePosition);
            this._horizontalScrollHelper.updateScrollable(allObjects, mousePosition)
        }
    },
    _getScrollable: function($element) {
        var $scrollable;
        $element.parents().toArray().some(parent => {
            var $parent = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(parent);
            if (this._horizontalScrollHelper.isScrollable($parent) || this._verticalScrollHelper.isScrollable($parent)) {
                $scrollable = $parent;
                return true
            }
        });
        return $scrollable
    },
    _defaultActionArgs: function() {
        var args = this.callBase.apply(this, arguments);
        var component = this.option("component");
        if (component) {
            args.component = component;
            args.element = component.element()
        }
        return args
    },
    _getEventArgs: function(e) {
        var sourceDraggable = this._getSourceDraggable();
        var targetDraggable = this._getTargetDraggable();
        return {
            event: e,
            itemData: sourceDraggable.option("itemData"),
            itemElement: Object(_core_element__WEBPACK_IMPORTED_MODULE_13__["getPublicElement"])(sourceDraggable._$sourceElement),
            fromComponent: sourceDraggable.option("component") || sourceDraggable,
            toComponent: targetDraggable.option("component") || targetDraggable,
            fromData: sourceDraggable.option("data"),
            toData: targetDraggable.option("data")
        }
    },
    _getDragStartArgs: function(e, $itemElement) {
        var args = this._getEventArgs(e);
        return {
            event: args.event,
            itemData: args.itemData,
            itemElement: $itemElement,
            fromData: args.fromData
        }
    },
    _revertItemToInitialPosition: function() {
        !this._dragElementIsCloned() && this._move(this._initialLocate, this._$sourceElement)
    },
    _dragEndHandler: function(e) {
        var d = new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_22__["Deferred"];
        var dragEndEventArgs = this._getEventArgs(e);
        var dropEventArgs = this._getEventArgs(e);
        var targetDraggable = this._getTargetDraggable();
        var needRevertPosition = true;
        try {
            this._getAction("onDragEnd")(dragEndEventArgs)
        } finally {
            Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_22__["when"])(Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_22__["fromPromise"])(dragEndEventArgs.cancel)).done(cancel => {
                if (!cancel) {
                    if (targetDraggable !== this) {
                        targetDraggable._getAction("onDrop")(dropEventArgs)
                    }
                    if (!dropEventArgs.cancel) {
                        needRevertPosition = false;
                        Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_22__["when"])(Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_22__["fromPromise"])(targetDraggable.dragEnd(dragEndEventArgs))).always(d.resolve);
                        return
                    }
                }
                d.resolve()
            }).fail(d.resolve);
            d.done(() => {
                if (needRevertPosition) {
                    this._revertItemToInitialPosition()
                }
                this.reset();
                targetDraggable.reset();
                this._stopAnimator();
                this._horizontalScrollHelper.reset();
                this._verticalScrollHelper.reset();
                this._resetDragElement();
                this._resetSourceElement();
                this._resetTargetDraggable();
                this._resetSourceDraggable()
            })
        }
    },
    _isTargetOverAnotherDraggable: function(e) {
        var sourceDraggable = this._getSourceDraggable();
        if (this === sourceDraggable) {
            return false
        }
        var $dragElement = sourceDraggable._$dragElement;
        var $sourceDraggableElement = sourceDraggable.$element();
        var $targetDraggableElement = this.$element();
        var mousePosition = getMousePosition(e);
        var elements = _core_dom_adapter__WEBPACK_IMPORTED_MODULE_2__["default"].elementsFromPoint(mousePosition.x, mousePosition.y);
        var firstWidgetElement = elements.filter(element => {
            var $element = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(element);
            if ($element.hasClass(this._addWidgetPrefix())) {
                return !$element.closest($dragElement).length
            }
        })[0];
        var $sourceElement = this._getSourceElement();
        var isTargetOverItself = firstWidgetElement === $sourceDraggableElement.get(0);
        var isTargetOverNestedDraggable = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(firstWidgetElement).closest($sourceElement).length;
        return !firstWidgetElement || firstWidgetElement === $targetDraggableElement.get(0) && !isTargetOverItself && !isTargetOverNestedDraggable
    },
    _dragEnterHandler: function(e) {
        this._fireDragEnterEvent(e);
        if (this._isTargetOverAnotherDraggable(e)) {
            this._setTargetDraggable()
        }
        var sourceDraggable = this._getSourceDraggable();
        sourceDraggable.dragEnter(e)
    },
    _dragLeaveHandler: function(e) {
        this._fireDragLeaveEvent(e);
        this._resetTargetDraggable();
        if (this !== this._getSourceDraggable()) {
            this.reset()
        }
        var sourceDraggable = this._getSourceDraggable();
        sourceDraggable.dragLeave(e)
    },
    _getAction: function(name) {
        return this["_" + name + "Action"] || this._createActionByOption(name)
    },
    _getAnonymousTemplateName: function() {
        return ANONYMOUS_TEMPLATE_NAME
    },
    _initTemplates: function() {
        if (!this.option("contentTemplate")) {
            return
        }
        this._templateManager.addDefaultTemplates({
            content: new _core_templates_empty_template__WEBPACK_IMPORTED_MODULE_21__["EmptyTemplate"]
        });
        this.callBase.apply(this, arguments)
    },
    _render: function() {
        this.callBase();
        this.$element().addClass(this._addWidgetPrefix());
        var transclude = this._templateManager.anonymousTemplateName === this.option("contentTemplate");
        var template = this._getTemplateByOption("contentTemplate");
        if (template) {
            Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(template.render({
                container: this.element(),
                transclude: transclude
            }))
        }
    },
    _optionChanged: function(args) {
        var name = args.name;
        switch (name) {
            case "onDragStart":
            case "onDragMove":
            case "onDragEnd":
            case "onDrop":
            case "onDragEnter":
            case "onDragLeave":
                this["_" + name + "Action"] = this._createActionByOption(name);
                break;
            case "dragTemplate":
            case "contentTemplate":
            case "container":
            case "clone":
                break;
            case "allowMoveByClick":
            case "dragDirection":
            case "disabled":
            case "boundary":
            case "filter":
            case "immediate":
                this._resetDragElement();
                this._detachEventHandlers();
                this._attachEventHandlers();
                break;
            case "autoScroll":
                this._verticalScrollHelper.reset();
                this._horizontalScrollHelper.reset();
                break;
            case "scrollSensitivity":
            case "scrollSpeed":
            case "boundOffset":
            case "handle":
            case "group":
            case "data":
            case "itemData":
                break;
            default:
                this.callBase(args)
        }
    },
    _getTargetDraggable: function() {
        return targetDraggable || this
    },
    _getSourceDraggable: function() {
        return sourceDraggable || this
    },
    _setTargetDraggable: function() {
        var currentGroup = this.option("group");
        var sourceDraggable = this._getSourceDraggable();
        if (currentGroup && currentGroup === sourceDraggable.option("group")) {
            targetDraggable = this
        }
    },
    _setSourceDraggable: function() {
        sourceDraggable = this
    },
    _resetSourceDraggable: function() {
        sourceDraggable = null
    },
    _resetTargetDraggable: function() {
        targetDraggable = null
    },
    _dispose: function() {
        this.callBase();
        this._detachEventHandlers();
        this._resetDragElement();
        this._resetTargetDraggable();
        this._resetSourceDraggable();
        this._$sourceElement = null;
        this._stopAnimator()
    },
    _fireDragEnterEvent: function(sourceEvent) {
        var args = this._getEventArgs(sourceEvent);
        this._getAction("onDragEnter")(args)
    },
    _fireDragLeaveEvent: function(sourceEvent) {
        var args = this._getEventArgs(sourceEvent);
        this._getAction("onDragLeave")(args)
    }
});
Object(_core_component_registrator__WEBPACK_IMPORTED_MODULE_7__["default"])(DRAGGABLE, Draggable);
/* harmony default export */ __webpack_exports__["default"] = (Draggable);


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/filter_builder.js":
/*!**********************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/filter_builder.js ***!
  \**********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _filter_builder_filter_builder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./filter_builder/filter_builder */ "./node_modules/devextreme/esm/ui/filter_builder/filter_builder.js");
/**
 * DevExtreme (esm/ui/filter_builder.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */

/* harmony default export */ __webpack_exports__["default"] = (_filter_builder_filter_builder__WEBPACK_IMPORTED_MODULE_0__["default"]);


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/filter_builder/between.js":
/*!******************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/filter_builder/between.js ***!
  \******************************************************************/
/*! exports provided: getConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getConfig", function() { return getConfig; });
/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/renderer */ "./node_modules/devextreme/esm/core/renderer.js");
/* harmony import */ var _core_utils_extend__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/utils/extend */ "./node_modules/devextreme/esm/core/utils/extend.js");
/**
 * DevExtreme (esm/ui/filter_builder/between.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */


var FILTER_BUILDER_RANGE_CLASS = "dx-filterbuilder-range";
var FILTER_BUILDER_RANGE_START_CLASS = FILTER_BUILDER_RANGE_CLASS + "-start";
var FILTER_BUILDER_RANGE_END_CLASS = FILTER_BUILDER_RANGE_CLASS + "-end";
var FILTER_BUILDER_RANGE_SEPARATOR_CLASS = FILTER_BUILDER_RANGE_CLASS + "-separator";
var SEPARATOR = "\u2013";

function editorTemplate(conditionInfo, container) {
    var $editorStart = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>").addClass(FILTER_BUILDER_RANGE_START_CLASS);
    var $editorEnd = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>").addClass(FILTER_BUILDER_RANGE_END_CLASS);
    var values = conditionInfo.value || [];
    var getStartValue = function(values) {
        return values && values.length > 0 ? values[0] : null
    };
    var getEndValue = function(values) {
        return values && 2 === values.length ? values[1] : null
    };
    container.append($editorStart);
    container.append(Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])("<span>").addClass(FILTER_BUILDER_RANGE_SEPARATOR_CLASS).text(SEPARATOR));
    container.append($editorEnd);
    container.addClass(FILTER_BUILDER_RANGE_CLASS);
    this._editorFactory.createEditor.call(this, $editorStart, Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_1__["extend"])({}, conditionInfo.field, conditionInfo, {
        value: getStartValue(values),
        parentType: "filterBuilder",
        setValue: function(value) {
            values = [value, getEndValue(values)];
            conditionInfo.setValue(values)
        }
    }));
    this._editorFactory.createEditor.call(this, $editorEnd, Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_1__["extend"])({}, conditionInfo.field, conditionInfo, {
        value: getEndValue(values),
        parentType: "filterBuilder",
        setValue: function(value) {
            values = [getStartValue(values), value];
            conditionInfo.setValue(values)
        }
    }))
}
function getConfig(caption, context) {
    return {
        name: "between",
        caption: caption,
        icon: "range",
        valueSeparator: SEPARATOR,
        dataTypes: ["number", "date", "datetime"],
        editorTemplate: editorTemplate.bind(context),
        notForLookup: true
    }
}


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/filter_builder/filter_builder.js":
/*!*************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/filter_builder/filter_builder.js ***!
  \*************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/renderer */ "./node_modules/devextreme/esm/core/renderer.js");
/* harmony import */ var _core_dom_adapter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/dom_adapter */ "./node_modules/devextreme/esm/core/dom_adapter.js");
/* harmony import */ var _core_class__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/class */ "./node_modules/devextreme/esm/core/class.js");
/* harmony import */ var _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../events/core/events_engine */ "./node_modules/devextreme/esm/events/core/events_engine.js");
/* harmony import */ var _widget_ui_widget__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../widget/ui.widget */ "./node_modules/devextreme/esm/ui/widget/ui.widget.js");
/* harmony import */ var _core_component_registrator__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core/component_registrator */ "./node_modules/devextreme/esm/core/component_registrator.js");
/* harmony import */ var _core_utils_extend__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../core/utils/extend */ "./node_modules/devextreme/esm/core/utils/extend.js");
/* harmony import */ var _localization_message__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../localization/message */ "./node_modules/devextreme/esm/localization/message.js");
/* harmony import */ var _core_utils_deferred__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../core/utils/deferred */ "./node_modules/devextreme/esm/core/utils/deferred.js");
/* harmony import */ var _core_utils_type__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../core/utils/type */ "./node_modules/devextreme/esm/core/utils/type.js");
/* harmony import */ var _tree_view__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../tree_view */ "./node_modules/devextreme/esm/ui/tree_view.js");
/* harmony import */ var _popup__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../popup */ "./node_modules/devextreme/esm/ui/popup.js");
/* harmony import */ var _overlay_utils__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../overlay/utils */ "./node_modules/devextreme/esm/ui/overlay/utils.js");
/* harmony import */ var _shared_ui_editor_factory_mixin__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../shared/ui.editor_factory_mixin */ "./node_modules/devextreme/esm/ui/shared/ui.editor_factory_mixin.js");
/* harmony import */ var _events_utils_index__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../events/utils/index */ "./node_modules/devextreme/esm/events/utils/index.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./utils */ "./node_modules/devextreme/esm/ui/filter_builder/utils.js");
/**
 * DevExtreme (esm/ui/filter_builder/filter_builder.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
















var FILTER_BUILDER_CLASS = "dx-filterbuilder";
var FILTER_BUILDER_GROUP_CLASS = FILTER_BUILDER_CLASS + "-group";
var FILTER_BUILDER_GROUP_ITEM_CLASS = FILTER_BUILDER_GROUP_CLASS + "-item";
var FILTER_BUILDER_GROUP_CONTENT_CLASS = FILTER_BUILDER_GROUP_CLASS + "-content";
var FILTER_BUILDER_GROUP_OPERATIONS_CLASS = FILTER_BUILDER_GROUP_CLASS + "-operations";
var FILTER_BUILDER_GROUP_OPERATION_CLASS = FILTER_BUILDER_GROUP_CLASS + "-operation";
var FILTER_BUILDER_ACTION_CLASS = FILTER_BUILDER_CLASS + "-action";
var FILTER_BUILDER_IMAGE_CLASS = FILTER_BUILDER_ACTION_CLASS + "-icon";
var FILTER_BUILDER_IMAGE_ADD_CLASS = "dx-icon-plus";
var FILTER_BUILDER_IMAGE_REMOVE_CLASS = "dx-icon-remove";
var FILTER_BUILDER_ITEM_TEXT_CLASS = FILTER_BUILDER_CLASS + "-text";
var FILTER_BUILDER_ITEM_FIELD_CLASS = FILTER_BUILDER_CLASS + "-item-field";
var FILTER_BUILDER_ITEM_OPERATION_CLASS = FILTER_BUILDER_CLASS + "-item-operation";
var FILTER_BUILDER_ITEM_VALUE_CLASS = FILTER_BUILDER_CLASS + "-item-value";
var FILTER_BUILDER_ITEM_VALUE_TEXT_CLASS = FILTER_BUILDER_CLASS + "-item-value-text";
var FILTER_BUILDER_OVERLAY_CLASS = FILTER_BUILDER_CLASS + "-overlay";
var FILTER_BUILDER_FILTER_OPERATIONS_CLASS = FILTER_BUILDER_CLASS + "-operations";
var FILTER_BUILDER_FIELDS_CLASS = FILTER_BUILDER_CLASS + "-fields";
var FILTER_BUILDER_ADD_CONDITION_CLASS = FILTER_BUILDER_CLASS + "-add-condition";
var ACTIVE_CLASS = "dx-state-active";
var FILTER_BUILDER_MENU_CUSTOM_OPERATION_CLASS = FILTER_BUILDER_CLASS + "-menu-custom-operation";
var SOURCE = "filterBuilder";
var DISABLED_STATE_CLASS = "dx-state-disabled";
var TAB_KEY = "tab";
var ENTER_KEY = "enter";
var ESCAPE_KEY = "escape";
var ACTIONS = [{
    name: "onEditorPreparing",
    config: {
        excludeValidators: ["disabled", "readOnly"],
        category: "rendering"
    }
}, {
    name: "onEditorPrepared",
    config: {
        excludeValidators: ["disabled", "readOnly"],
        category: "rendering"
    }
}, {
    name: "onValueChanged",
    config: {
        excludeValidators: ["disabled", "readOnly"]
    }
}];
var OPERATORS = {
    and: "and",
    or: "or",
    notAnd: "!and",
    notOr: "!or"
};
var EditorFactory = _core_class__WEBPACK_IMPORTED_MODULE_2__["default"].inherit(_shared_ui_editor_factory_mixin__WEBPACK_IMPORTED_MODULE_13__["default"]);
var FilterBuilder = _widget_ui_widget__WEBPACK_IMPORTED_MODULE_4__["default"].inherit({
    _getDefaultOptions: function() {
        return Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_6__["extend"])(this.callBase(), {
            onEditorPreparing: null,
            onEditorPrepared: null,
            onValueChanged: null,
            fields: [],
            groupOperations: ["and", "or", "notAnd", "notOr"],
            maxGroupLevel: void 0,
            value: null,
            allowHierarchicalFields: false,
            groupOperationDescriptions: {
                and: _localization_message__WEBPACK_IMPORTED_MODULE_7__["default"].format("dxFilterBuilder-and"),
                or: _localization_message__WEBPACK_IMPORTED_MODULE_7__["default"].format("dxFilterBuilder-or"),
                notAnd: _localization_message__WEBPACK_IMPORTED_MODULE_7__["default"].format("dxFilterBuilder-notAnd"),
                notOr: _localization_message__WEBPACK_IMPORTED_MODULE_7__["default"].format("dxFilterBuilder-notOr")
            },
            customOperations: [],
            closePopupOnTargetScroll: true,
            filterOperationDescriptions: {
                between: _localization_message__WEBPACK_IMPORTED_MODULE_7__["default"].format("dxFilterBuilder-filterOperationBetween"),
                equal: _localization_message__WEBPACK_IMPORTED_MODULE_7__["default"].format("dxFilterBuilder-filterOperationEquals"),
                notEqual: _localization_message__WEBPACK_IMPORTED_MODULE_7__["default"].format("dxFilterBuilder-filterOperationNotEquals"),
                lessThan: _localization_message__WEBPACK_IMPORTED_MODULE_7__["default"].format("dxFilterBuilder-filterOperationLess"),
                lessThanOrEqual: _localization_message__WEBPACK_IMPORTED_MODULE_7__["default"].format("dxFilterBuilder-filterOperationLessOrEquals"),
                greaterThan: _localization_message__WEBPACK_IMPORTED_MODULE_7__["default"].format("dxFilterBuilder-filterOperationGreater"),
                greaterThanOrEqual: _localization_message__WEBPACK_IMPORTED_MODULE_7__["default"].format("dxFilterBuilder-filterOperationGreaterOrEquals"),
                startsWith: _localization_message__WEBPACK_IMPORTED_MODULE_7__["default"].format("dxFilterBuilder-filterOperationStartsWith"),
                contains: _localization_message__WEBPACK_IMPORTED_MODULE_7__["default"].format("dxFilterBuilder-filterOperationContains"),
                notContains: _localization_message__WEBPACK_IMPORTED_MODULE_7__["default"].format("dxFilterBuilder-filterOperationNotContains"),
                endsWith: _localization_message__WEBPACK_IMPORTED_MODULE_7__["default"].format("dxFilterBuilder-filterOperationEndsWith"),
                isBlank: _localization_message__WEBPACK_IMPORTED_MODULE_7__["default"].format("dxFilterBuilder-filterOperationIsBlank"),
                isNotBlank: _localization_message__WEBPACK_IMPORTED_MODULE_7__["default"].format("dxFilterBuilder-filterOperationIsNotBlank")
            }
        })
    },
    _optionChanged: function(args) {
        switch (args.name) {
            case "closePopupOnTargetScroll":
                break;
            case "onEditorPreparing":
            case "onEditorPrepared":
            case "onValueChanged":
                this._initActions();
                break;
            case "customOperations":
                this._initCustomOperations();
                this._invalidate();
                break;
            case "fields":
            case "maxGroupLevel":
            case "groupOperations":
            case "allowHierarchicalFields":
            case "groupOperationDescriptions":
            case "filterOperationDescriptions":
                this._invalidate();
                break;
            case "value":
                if (args.value !== args.previousValue) {
                    var disableInvalidateForValue = this._disableInvalidateForValue;
                    if (!disableInvalidateForValue) {
                        this._initModel();
                        this._invalidate()
                    }
                    this._disableInvalidateForValue = false;
                    this.executeAction("onValueChanged", {
                        value: args.value,
                        previousValue: args.previousValue
                    });
                    this._disableInvalidateForValue = disableInvalidateForValue
                }
                break;
            default:
                this.callBase(args)
        }
    },
    getFilterExpression: function() {
        var fields = this._getNormalizedFields();
        var value = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_6__["extend"])(true, [], this._model);
        return Object(_utils__WEBPACK_IMPORTED_MODULE_15__["getFilterExpression"])(Object(_utils__WEBPACK_IMPORTED_MODULE_15__["getNormalizedFilter"])(value), fields, this._customOperations, SOURCE)
    },
    _getNormalizedFields: function() {
        return Object(_utils__WEBPACK_IMPORTED_MODULE_15__["getNormalizedFields"])(this.option("fields"))
    },
    _updateFilter: function() {
        this._disableInvalidateForValue = true;
        var value = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_6__["extend"])(true, [], this._model);
        var normalizedValue = Object(_utils__WEBPACK_IMPORTED_MODULE_15__["getNormalizedFilter"])(value);
        var oldValue = Object(_utils__WEBPACK_IMPORTED_MODULE_15__["getNormalizedFilter"])(this._getModel(this.option("value")));
        if (JSON.stringify(oldValue) !== JSON.stringify(normalizedValue)) {
            this.option("value", normalizedValue)
        }
        this._disableInvalidateForValue = false;
        this._fireContentReadyAction()
    },
    _init: function() {
        this._initCustomOperations();
        this._initModel();
        this._initEditorFactory();
        this._initActions();
        this.callBase()
    },
    _initEditorFactory: function() {
        this._editorFactory = new EditorFactory
    },
    _initCustomOperations: function() {
        this._customOperations = Object(_utils__WEBPACK_IMPORTED_MODULE_15__["getMergedOperations"])(this.option("customOperations"), this.option("filterOperationDescriptions.between"), this)
    },
    _getDefaultGroupOperation: function() {
        var _this$option$, _this$option;
        return null !== (_this$option$ = null === (_this$option = this.option("groupOperations")) || void 0 === _this$option ? void 0 : _this$option[0]) && void 0 !== _this$option$ ? _this$option$ : OPERATORS.and
    },
    _getModel: function(value) {
        return Object(_utils__WEBPACK_IMPORTED_MODULE_15__["convertToInnerStructure"])(value, this._customOperations, this._getDefaultGroupOperation())
    },
    _initModel: function() {
        this._model = this._getModel(this.option("value"))
    },
    _initActions: function() {
        var that = this;
        that._actions = {};
        ACTIONS.forEach((function(action) {
            var actionConfig = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_6__["extend"])({}, action.config);
            that._actions[action.name] = that._createActionByOption(action.name, actionConfig)
        }))
    },
    executeAction: function(actionName, options) {
        var action = this._actions[actionName];
        return action && action(options)
    },
    _initMarkup: function() {
        this.$element().addClass(FILTER_BUILDER_CLASS);
        this.callBase();
        this._createGroupElementByCriteria(this._model).appendTo(this.$element())
    },
    _createConditionElement: function(condition, parent) {
        return Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>").addClass(FILTER_BUILDER_GROUP_CLASS).append(this._createConditionItem(condition, parent))
    },
    _createGroupElementByCriteria: function(criteria, parent) {
        var groupLevel = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0;
        var $group = this._createGroupElement(criteria, parent, groupLevel);
        var $groupContent = $group.find("." + FILTER_BUILDER_GROUP_CONTENT_CLASS);
        var groupCriteria = Object(_utils__WEBPACK_IMPORTED_MODULE_15__["getGroupCriteria"])(criteria);
        for (var i = 0; i < groupCriteria.length; i++) {
            var innerCriteria = groupCriteria[i];
            if (Object(_utils__WEBPACK_IMPORTED_MODULE_15__["isGroup"])(innerCriteria)) {
                this._createGroupElementByCriteria(innerCriteria, criteria, groupLevel + 1).appendTo($groupContent)
            } else if (Object(_utils__WEBPACK_IMPORTED_MODULE_15__["isCondition"])(innerCriteria)) {
                this._createConditionElement(innerCriteria, criteria).appendTo($groupContent)
            }
        }
        return $group
    },
    _createGroupElement: function(criteria, parent, groupLevel) {
        var $groupItem = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>").addClass(FILTER_BUILDER_GROUP_ITEM_CLASS);
        var $groupContent = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>").addClass(FILTER_BUILDER_GROUP_CONTENT_CLASS);
        var $group = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>").addClass(FILTER_BUILDER_GROUP_CLASS).append($groupItem).append($groupContent);
        if (null != parent) {
            this._createRemoveButton(() => {
                Object(_utils__WEBPACK_IMPORTED_MODULE_15__["removeItem"])(parent, criteria);
                $group.remove();
                this._updateFilter()
            }).appendTo($groupItem)
        }
        this._createGroupOperationButton(criteria).appendTo($groupItem);
        this._createAddButton(() => {
            var newGroup = Object(_utils__WEBPACK_IMPORTED_MODULE_15__["createEmptyGroup"])(this._getDefaultGroupOperation());
            Object(_utils__WEBPACK_IMPORTED_MODULE_15__["addItem"])(newGroup, criteria);
            this._createGroupElement(newGroup, criteria, groupLevel + 1).appendTo($groupContent);
            this._updateFilter()
        }, () => {
            var field = this.option("fields")[0];
            var newCondition = Object(_utils__WEBPACK_IMPORTED_MODULE_15__["createCondition"])(field, this._customOperations);
            Object(_utils__WEBPACK_IMPORTED_MODULE_15__["addItem"])(newCondition, criteria);
            this._createConditionElement(newCondition, criteria).appendTo($groupContent);
            this._updateFilter()
        }, groupLevel).appendTo($groupItem);
        return $group
    },
    _createButton: function(caption) {
        return Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>").text(caption)
    },
    _createGroupOperationButton: function(criteria) {
        var groupOperations = this._getGroupOperations(criteria);
        var groupMenuItem = Object(_utils__WEBPACK_IMPORTED_MODULE_15__["getGroupMenuItem"])(criteria, groupOperations);
        var caption = groupMenuItem.text;
        var $operationButton = groupOperations && groupOperations.length < 2 ? this._createButton(caption).addClass(DISABLED_STATE_CLASS) : this._createButtonWithMenu({
            caption: caption,
            menu: {
                items: groupOperations,
                displayExpr: "text",
                keyExpr: "value",
                onItemClick: e => {
                    if (groupMenuItem !== e.itemData) {
                        Object(_utils__WEBPACK_IMPORTED_MODULE_15__["setGroupValue"])(criteria, e.itemData.value);
                        $operationButton.text(e.itemData.text);
                        groupMenuItem = e.itemData;
                        this._updateFilter()
                    }
                },
                onContentReady: function(e) {
                    e.component.selectItem(groupMenuItem)
                },
                cssClass: FILTER_BUILDER_GROUP_OPERATIONS_CLASS
            }
        });
        return $operationButton.addClass(FILTER_BUILDER_ITEM_TEXT_CLASS).addClass(FILTER_BUILDER_GROUP_OPERATION_CLASS).attr("tabindex", 0)
    },
    _createButtonWithMenu: function(options) {
        var that = this;
        var removeMenu = function() {
            that.$element().find("." + ACTIVE_CLASS).removeClass(ACTIVE_CLASS);
            that.$element().find(".dx-overlay .dx-treeview").remove();
            that.$element().find(".dx-overlay").remove()
        };
        var rtlEnabled = this.option("rtlEnabled");
        var position = rtlEnabled ? "right" : "left";
        var $button = this._createButton(options.caption);
        Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_6__["extend"])(options.menu, {
            focusStateEnabled: true,
            selectionMode: "single",
            onItemClick: (handler = options.menu.onItemClick, function(e) {
                handler(e);
                if ("dxclick" === e.event.type) {
                    removeMenu()
                }
            }),
            onHiding: function(e) {
                $button.removeClass(ACTIVE_CLASS)
            },
            position: {
                my: position + " top",
                at: position + " bottom",
                offset: "0 1",
                of: $button,
                collision: "flip"
            },
            animation: null,
            onHidden: function() {
                removeMenu()
            },
            cssClass: FILTER_BUILDER_OVERLAY_CLASS + " " + options.menu.cssClass,
            rtlEnabled: rtlEnabled
        });
        var handler;
        options.popup = {
            onShown: function(info) {
                var treeViewElement = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(info.component.content()).find(".dx-treeview");
                var treeView = treeViewElement.dxTreeView("instance");
                _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__["default"].on(treeViewElement, "keyup keydown", (function(e) {
                    var keyName = Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_14__["normalizeKeyName"])(e);
                    if ("keydown" === e.type && keyName === TAB_KEY || "keyup" === e.type && (keyName === ESCAPE_KEY || keyName === ENTER_KEY)) {
                        info.component.hide();
                        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__["default"].trigger(options.menu.position.of, "focus")
                    }
                }));
                treeView.focus();
                treeView.option("focusedElement", null)
            }
        };
        this._subscribeOnClickAndEnterKey($button, (function() {
            removeMenu();
            that._createPopupWithTreeView(options, that.$element());
            $button.addClass(ACTIVE_CLASS)
        }));
        return $button
    },
    _hasValueButton: function(condition) {
        var customOperation = Object(_utils__WEBPACK_IMPORTED_MODULE_15__["getCustomOperation"])(this._customOperations, condition[1]);
        return customOperation ? false !== customOperation.hasValue : null !== condition[2]
    },
    _createOperationButtonWithMenu: function(condition, field) {
        var that = this;
        var availableOperations = Object(_utils__WEBPACK_IMPORTED_MODULE_15__["getAvailableOperations"])(field, this.option("filterOperationDescriptions"), this._customOperations);
        var currentOperation = Object(_utils__WEBPACK_IMPORTED_MODULE_15__["getOperationFromAvailable"])(Object(_utils__WEBPACK_IMPORTED_MODULE_15__["getOperationValue"])(condition), availableOperations);
        var $operationButton = this._createButtonWithMenu({
            caption: currentOperation.text,
            menu: {
                items: availableOperations,
                displayExpr: "text",
                onItemRendered: function(e) {
                    e.itemData.isCustom && Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(e.itemElement).addClass(FILTER_BUILDER_MENU_CUSTOM_OPERATION_CLASS)
                },
                onContentReady: function(e) {
                    e.component.selectItem(currentOperation)
                },
                onItemClick: e => {
                    if (currentOperation !== e.itemData) {
                        currentOperation = e.itemData;
                        Object(_utils__WEBPACK_IMPORTED_MODULE_15__["updateConditionByOperation"])(condition, currentOperation.value, that._customOperations);
                        var $valueButton = $operationButton.siblings().filter("." + FILTER_BUILDER_ITEM_VALUE_CLASS);
                        if (that._hasValueButton(condition)) {
                            if (0 !== $valueButton.length) {
                                $valueButton.remove()
                            }
                            that._createValueButton(condition, field).appendTo($operationButton.parent())
                        } else {
                            $valueButton.remove()
                        }
                        $operationButton.html(currentOperation.text);
                        this._updateFilter()
                    }
                },
                cssClass: FILTER_BUILDER_FILTER_OPERATIONS_CLASS
            }
        }).addClass(FILTER_BUILDER_ITEM_TEXT_CLASS).addClass(FILTER_BUILDER_ITEM_OPERATION_CLASS).attr("tabindex", 0);
        return $operationButton
    },
    _createOperationAndValueButtons: function(condition, field, $item) {
        this._createOperationButtonWithMenu(condition, field).appendTo($item);
        if (this._hasValueButton(condition)) {
            this._createValueButton(condition, field).appendTo($item)
        }
    },
    _createFieldButtonWithMenu: function(fields, condition, field) {
        var that = this;
        var allowHierarchicalFields = this.option("allowHierarchicalFields");
        var items = Object(_utils__WEBPACK_IMPORTED_MODULE_15__["getItems"])(fields, allowHierarchicalFields);
        var item = Object(_utils__WEBPACK_IMPORTED_MODULE_15__["getField"])(field.name || field.dataField, items);
        var getFullCaption = function(item, items) {
            return allowHierarchicalFields ? Object(_utils__WEBPACK_IMPORTED_MODULE_15__["getCaptionWithParents"])(item, items) : item.caption
        };
        var $fieldButton = this._createButtonWithMenu({
            caption: getFullCaption(item, items),
            menu: {
                items: items,
                dataStructure: "plain",
                keyExpr: "id",
                parentId: "parentId",
                displayExpr: "caption",
                onItemClick: e => {
                    if (item !== e.itemData) {
                        item = e.itemData;
                        condition[0] = item.name || item.dataField;
                        condition[2] = "object" === item.dataType ? null : "";
                        Object(_utils__WEBPACK_IMPORTED_MODULE_15__["updateConditionByOperation"])(condition, Object(_utils__WEBPACK_IMPORTED_MODULE_15__["getDefaultOperation"])(item), that._customOperations);
                        $fieldButton.siblings().filter("." + FILTER_BUILDER_ITEM_TEXT_CLASS).remove();
                        that._createOperationAndValueButtons(condition, item, $fieldButton.parent());
                        var caption = getFullCaption(item, e.component.option("items"));
                        $fieldButton.html(caption);
                        this._updateFilter()
                    }
                },
                onContentReady: function(e) {
                    e.component.selectItem(item)
                },
                cssClass: FILTER_BUILDER_FIELDS_CLASS
            }
        }).addClass(FILTER_BUILDER_ITEM_TEXT_CLASS).addClass(FILTER_BUILDER_ITEM_FIELD_CLASS).attr("tabindex", 0);
        return $fieldButton
    },
    _createConditionItem: function(condition, parent) {
        var $item = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>").addClass(FILTER_BUILDER_GROUP_ITEM_CLASS);
        var fields = this._getNormalizedFields();
        var field = Object(_utils__WEBPACK_IMPORTED_MODULE_15__["getField"])(condition[0], fields);
        this._createRemoveButton(() => {
            Object(_utils__WEBPACK_IMPORTED_MODULE_15__["removeItem"])(parent, condition);
            var isSingleChild = 1 === $item.parent().children().length;
            if (isSingleChild) {
                $item.parent().remove()
            } else {
                $item.remove()
            }
            this._updateFilter()
        }).appendTo($item);
        this._createFieldButtonWithMenu(fields, condition, field).appendTo($item);
        this._createOperationAndValueButtons(condition, field, $item);
        return $item
    },
    _getGroupOperations: function(criteria) {
        var groupOperations = this.option("groupOperations");
        var groupOperationDescriptions = this.option("groupOperationDescriptions");
        if (!groupOperations || !groupOperations.length) {
            groupOperations = [Object(_utils__WEBPACK_IMPORTED_MODULE_15__["getGroupValue"])(criteria).replace("!", "not")]
        }
        return groupOperations.map(operation => ({
            text: groupOperationDescriptions[operation],
            value: OPERATORS[operation]
        }))
    },
    _createRemoveButton: function(handler) {
        var $removeButton = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>").addClass(FILTER_BUILDER_IMAGE_CLASS).addClass(FILTER_BUILDER_IMAGE_REMOVE_CLASS).addClass(FILTER_BUILDER_ACTION_CLASS).attr("tabindex", 0);
        this._subscribeOnClickAndEnterKey($removeButton, handler);
        return $removeButton
    },
    _createAddButton: function(addGroupHandler, addConditionHandler, groupLevel) {
        var $button;
        var maxGroupLevel = this.option("maxGroupLevel");
        if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_9__["isDefined"])(maxGroupLevel) && groupLevel >= maxGroupLevel) {
            $button = this._createButton();
            this._subscribeOnClickAndEnterKey($button, addConditionHandler)
        } else {
            $button = this._createButtonWithMenu({
                menu: {
                    items: [{
                        caption: _localization_message__WEBPACK_IMPORTED_MODULE_7__["default"].format("dxFilterBuilder-addCondition"),
                        click: addConditionHandler
                    }, {
                        caption: _localization_message__WEBPACK_IMPORTED_MODULE_7__["default"].format("dxFilterBuilder-addGroup"),
                        click: addGroupHandler
                    }],
                    displayExpr: "caption",
                    onItemClick: function(e) {
                        e.itemData.click()
                    },
                    cssClass: FILTER_BUILDER_ADD_CONDITION_CLASS
                }
            })
        }
        return $button.addClass(FILTER_BUILDER_IMAGE_CLASS).addClass(FILTER_BUILDER_IMAGE_ADD_CLASS).addClass(FILTER_BUILDER_ACTION_CLASS).attr("tabindex", 0)
    },
    _createValueText: function(item, field, $container) {
        var that = this;
        var $text = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>").html("&nbsp;").addClass(FILTER_BUILDER_ITEM_VALUE_TEXT_CLASS).attr("tabindex", 0).appendTo($container);
        var value = item[2];
        var customOperation = Object(_utils__WEBPACK_IMPORTED_MODULE_15__["getCustomOperation"])(that._customOperations, item[1]);
        if (!customOperation && field.lookup) {
            Object(_utils__WEBPACK_IMPORTED_MODULE_15__["getCurrentLookupValueText"])(field, value, (function(result) {
                Object(_utils__WEBPACK_IMPORTED_MODULE_15__["renderValueText"])($text, result)
            }))
        } else {
            Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_8__["when"])(Object(_utils__WEBPACK_IMPORTED_MODULE_15__["getCurrentValueText"])(field, value, customOperation)).done(result => {
                Object(_utils__WEBPACK_IMPORTED_MODULE_15__["renderValueText"])($text, result, customOperation)
            })
        }
        that._subscribeOnClickAndEnterKey($text, (function(e) {
            if ("keyup" === e.type) {
                e.stopPropagation()
            }
            that._createValueEditorWithEvents(item, field, $container)
        }));
        return $text
    },
    _updateConditionValue: function(item, value, callback) {
        var areValuesDifferent = item[2] !== value;
        if (areValuesDifferent) {
            item[2] = value
        }
        callback();
        this._updateFilter()
    },
    _addDocumentKeyUp: function($editor, handler) {
        var isComposing = false;
        var hasCompositionJustEnded = false;
        var document = _core_dom_adapter__WEBPACK_IMPORTED_MODULE_1__["default"].getDocument();
        var documentKeyUpHandler = e => {
            if (isComposing || hasCompositionJustEnded) {
                hasCompositionJustEnded = false;
                return
            }
            handler(e)
        };
        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__["default"].on(document, "keyup", documentKeyUpHandler);
        var input = $editor.find("input");
        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__["default"].on(input, "compositionstart", () => {
            isComposing = true
        });
        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__["default"].on(input, "compositionend", () => {
            isComposing = false;
            hasCompositionJustEnded = true
        });
        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__["default"].on(input, "keydown", event => {
            if (229 !== event.which) {
                hasCompositionJustEnded = false
            }
        });
        this._documentKeyUpHandler = documentKeyUpHandler
    },
    _addDocumentClick: function($editor, closeEditorFunc) {
        var document = _core_dom_adapter__WEBPACK_IMPORTED_MODULE_1__["default"].getDocument();
        var documentClickHandler = e => {
            if (!this._isFocusOnEditorParts($editor, e.target)) {
                _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__["default"].trigger($editor.find("input"), "change");
                closeEditorFunc()
            }
        };
        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__["default"].on(document, "dxpointerdown", documentClickHandler);
        this._documentClickHandler = documentClickHandler
    },
    _isFocusOnEditorParts: function($editor, target) {
        var activeElement = target || _core_dom_adapter__WEBPACK_IMPORTED_MODULE_1__["default"].getActiveElement();
        return Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(activeElement).closest($editor.children()).length || Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(activeElement).closest(".dx-dropdowneditor-overlay").length
    },
    _removeEvents: function() {
        var document = _core_dom_adapter__WEBPACK_IMPORTED_MODULE_1__["default"].getDocument();
        Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_9__["isDefined"])(this._documentKeyUpHandler) && _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__["default"].off(document, "keyup", this._documentKeyUpHandler);
        Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_9__["isDefined"])(this._documentClickHandler) && _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__["default"].off(document, "dxpointerdown", this._documentClickHandler)
    },
    _dispose: function() {
        this._removeEvents();
        this.callBase()
    },
    _createValueEditorWithEvents: function(item, field, $container) {
        var value = item[2];
        var createValueText = () => {
            $container.empty();
            this._removeEvents();
            return this._createValueText(item, field, $container)
        };
        var closeEditor = () => {
            this._updateConditionValue(item, value, (function() {
                createValueText()
            }))
        };
        var options = {
            value: "" === value ? null : value,
            filterOperation: Object(_utils__WEBPACK_IMPORTED_MODULE_15__["getOperationValue"])(item),
            setValue: function(data) {
                value = null === data ? "" : data
            },
            closeEditor: closeEditor,
            text: $container.text()
        };
        $container.empty();
        var $editor = this._createValueEditor($container, field, options);
        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__["default"].trigger($editor.find("input").not(":hidden").eq(0), "focus");
        this._removeEvents();
        this._addDocumentClick($editor, closeEditor);
        this._addDocumentKeyUp($editor, e => {
            var keyName = Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_14__["normalizeKeyName"])(e);
            if (keyName === TAB_KEY) {
                if (this._isFocusOnEditorParts($editor)) {
                    return
                }
                this._updateConditionValue(item, value, (function() {
                    createValueText();
                    if (e.shiftKey) {
                        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__["default"].trigger($container.prev(), "focus")
                    }
                }))
            }
            if (keyName === ESCAPE_KEY) {
                _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__["default"].trigger(createValueText(), "focus")
            }
            if (keyName === ENTER_KEY) {
                this._updateConditionValue(item, value, (function() {
                    _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__["default"].trigger(createValueText(), "focus")
                }))
            }
        });
        this._fireContentReadyAction()
    },
    _createValueButton: function(item, field) {
        var $valueButton = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>").addClass(FILTER_BUILDER_ITEM_TEXT_CLASS).addClass(FILTER_BUILDER_ITEM_VALUE_CLASS);
        this._createValueText(item, field, $valueButton);
        return $valueButton
    },
    _createValueEditor: function($container, field, options) {
        var $editor = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>").attr("tabindex", 0).appendTo($container);
        var customOperation = Object(_utils__WEBPACK_IMPORTED_MODULE_15__["getCustomOperation"])(this._customOperations, options.filterOperation);
        var editorTemplate = customOperation && customOperation.editorTemplate ? customOperation.editorTemplate : field.editorTemplate;
        if (editorTemplate) {
            var template = this._getTemplate(editorTemplate);
            template.render({
                model: Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_6__["extend"])({
                    field: field
                }, options),
                container: $editor
            })
        } else {
            this._editorFactory.createEditor.call(this, $editor, Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_6__["extend"])({}, field, options, {
                parentType: SOURCE
            }))
        }
        return $editor
    },
    _createPopupWithTreeView: function(options, $container) {
        var that = this;
        var $popup = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>").addClass(options.menu.cssClass).appendTo($container);
        this._createComponent($popup, _popup__WEBPACK_IMPORTED_MODULE_11__["default"], {
            wrapperAttr: {
                class: options.menu.cssClass
            },
            onHiding: options.menu.onHiding,
            onHidden: options.menu.onHidden,
            rtlEnabled: options.menu.rtlEnabled,
            position: options.menu.position,
            animation: options.menu.animation,
            contentTemplate: function(contentElement) {
                var $menuContainer = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>").appendTo(contentElement);
                that._createComponent($menuContainer, _tree_view__WEBPACK_IMPORTED_MODULE_10__["default"], options.menu);
                this.repaint()
            },
            _ignoreFunctionValueDeprecation: true,
            maxHeight: function() {
                return Object(_overlay_utils__WEBPACK_IMPORTED_MODULE_12__["getElementMaxHeightByWindow"])(options.menu.position.of)
            },
            visible: true,
            focusStateEnabled: false,
            hideOnParentScroll: this.option("closePopupOnTargetScroll"),
            closeOnOutsideClick: true,
            onShown: options.popup.onShown,
            shading: false,
            width: "auto",
            height: "auto",
            showTitle: false
        })
    },
    _subscribeOnClickAndEnterKey: function($button, handler) {
        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__["default"].on($button, "dxclick", handler);
        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__["default"].on($button, "keyup", (function(e) {
            if (Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_14__["normalizeKeyName"])(e) === ENTER_KEY) {
                handler(e)
            }
        }))
    }
});
Object(_core_component_registrator__WEBPACK_IMPORTED_MODULE_5__["default"])("dxFilterBuilder", FilterBuilder);
/* harmony default export */ __webpack_exports__["default"] = (FilterBuilder);


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/filter_builder/ui.filter_operations_dictionary.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/filter_builder/ui.filter_operations_dictionary.js ***!
  \******************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * DevExtreme (esm/ui/filter_builder/ui.filter_operations_dictionary.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
var OPERATION_ICONS = {
    "=": "equal",
    "<>": "notequal",
    "<": "less",
    "<=": "lessorequal",
    ">": "greater",
    ">=": "greaterorequal",
    notcontains: "doesnotcontain",
    contains: "contains",
    startswith: "startswith",
    endswith: "endswith",
    isblank: "isblank",
    isnotblank: "isnotblank"
};
var OPERATION_NAME = {
    "=": "equal",
    "<>": "notEqual",
    "<": "lessThan",
    "<=": "lessThanOrEqual",
    ">": "greaterThan",
    ">=": "greaterThanOrEqual",
    startswith: "startsWith",
    contains: "contains",
    notcontains: "notContains",
    endswith: "endsWith",
    isblank: "isBlank",
    isnotblank: "isNotBlank",
    between: "between"
};
/* harmony default export */ __webpack_exports__["default"] = ({
    getIconByFilterOperation: function(filterOperation) {
        return OPERATION_ICONS[filterOperation]
    },
    getNameByFilterOperation: function(filterOperation) {
        return OPERATION_NAME[filterOperation]
    }
});


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/filter_builder/utils.js":
/*!****************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/filter_builder/utils.js ***!
  \****************************************************************/
/*! exports provided: getGroupCriteria, setGroupValue, getGroupMenuItem, getGroupValue, getFilterOperations, getCaptionByOperation, getOperationFromAvailable, getCustomOperation, getAvailableOperations, getDefaultOperation, createCondition, removeItem, createEmptyGroup, isEmptyGroup, addItem, getField, isGroup, isCondition, convertToInnerStructure, getNormalizedFields, getFilterExpression, getNormalizedFilter, getCurrentLookupValueText, getCurrentValueText, getItems, getCaptionWithParents, updateConditionByOperation, getOperationValue, isValidCondition, getMergedOperations, removeFieldConditionsFromFilter, syncFilters, getMatchedConditions, filterHasField, renderValueText */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getGroupCriteria", function() { return getGroupCriteria; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setGroupValue", function() { return setGroupValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getGroupMenuItem", function() { return getGroupMenuItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getGroupValue", function() { return getGroupValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getFilterOperations", function() { return getFilterOperations; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getCaptionByOperation", function() { return getCaptionByOperation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getOperationFromAvailable", function() { return getOperationFromAvailable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getCustomOperation", function() { return getCustomOperation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getAvailableOperations", function() { return getAvailableOperations; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getDefaultOperation", function() { return getDefaultOperation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createCondition", function() { return createCondition; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removeItem", function() { return removeItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createEmptyGroup", function() { return createEmptyGroup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isEmptyGroup", function() { return isEmptyGroup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addItem", function() { return addItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getField", function() { return getField; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isGroup", function() { return isGroup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isCondition", function() { return isCondition; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "convertToInnerStructure", function() { return convertToInnerStructure; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getNormalizedFields", function() { return getNormalizedFields; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getFilterExpression", function() { return getFilterExpression; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getNormalizedFilter", function() { return getNormalizedFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getCurrentLookupValueText", function() { return getCurrentLookupValueText; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getCurrentValueText", function() { return getCurrentValueText; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getItems", function() { return getItems; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getCaptionWithParents", function() { return getCaptionWithParents; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "updateConditionByOperation", function() { return updateConditionByOperation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getOperationValue", function() { return getOperationValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isValidCondition", function() { return isValidCondition; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMergedOperations", function() { return getMergedOperations; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removeFieldConditionsFromFilter", function() { return removeFieldConditionsFromFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "syncFilters", function() { return syncFilters; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMatchedConditions", function() { return getMatchedConditions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "filterHasField", function() { return filterHasField; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "renderValueText", function() { return renderValueText; });
/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/renderer */ "./node_modules/devextreme/esm/core/renderer.js");
/* harmony import */ var _core_utils_deferred__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/utils/deferred */ "./node_modules/devextreme/esm/core/utils/deferred.js");
/* harmony import */ var _data_errors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../data/errors */ "./node_modules/devextreme/esm/data/errors.js");
/* harmony import */ var _core_utils_type__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/utils/type */ "./node_modules/devextreme/esm/core/utils/type.js");
/* harmony import */ var _core_utils_data__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/utils/data */ "./node_modules/devextreme/esm/core/utils/data.js");
/* harmony import */ var _widget_ui_errors__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../widget/ui.errors */ "./node_modules/devextreme/esm/ui/widget/ui.errors.js");
/* harmony import */ var _shared_filtering__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../shared/filtering */ "./node_modules/devextreme/esm/ui/shared/filtering.js");
/* harmony import */ var _format_helper__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../format_helper */ "./node_modules/devextreme/esm/format_helper.js");
/* harmony import */ var _core_utils_extend__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../core/utils/extend */ "./node_modules/devextreme/esm/core/utils/extend.js");
/* harmony import */ var _core_utils_inflector__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../core/utils/inflector */ "./node_modules/devextreme/esm/core/utils/inflector.js");
/* harmony import */ var _between__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./between */ "./node_modules/devextreme/esm/ui/filter_builder/between.js");
/* harmony import */ var _localization_message__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../localization/message */ "./node_modules/devextreme/esm/localization/message.js");
/* harmony import */ var _data_data_source_data_source__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../data/data_source/data_source */ "./node_modules/devextreme/esm/data/data_source/data_source.js");
/* harmony import */ var _ui_filter_operations_dictionary__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./ui.filter_operations_dictionary */ "./node_modules/devextreme/esm/ui/filter_builder/ui.filter_operations_dictionary.js");
/**
 * DevExtreme (esm/ui/filter_builder/utils.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */














var DEFAULT_DATA_TYPE = "string";
var EMPTY_MENU_ICON = "icon-none";
var AND_GROUP_OPERATION = "and";
var EQUAL_OPERATION = "=";
var NOT_EQUAL_OPERATION = "<>";
var DATATYPE_OPERATIONS = {
    number: ["=", "<>", "<", ">", "<=", ">=", "isblank", "isnotblank"],
    string: ["contains", "notcontains", "startswith", "endswith", "=", "<>", "isblank", "isnotblank"],
    date: ["=", "<>", "<", ">", "<=", ">=", "isblank", "isnotblank"],
    datetime: ["=", "<>", "<", ">", "<=", ">=", "isblank", "isnotblank"],
    boolean: ["=", "<>", "isblank", "isnotblank"],
    object: ["isblank", "isnotblank"]
};
var DEFAULT_FORMAT = {
    date: "shortDate",
    datetime: "shortDateShortTime"
};
var LOOKUP_OPERATIONS = ["=", "<>", "isblank", "isnotblank"];
var AVAILABLE_FIELD_PROPERTIES = ["caption", "customizeText", "dataField", "dataType", "editorTemplate", "falseText", "editorOptions", "filterOperations", "format", "lookup", "trueText", "calculateFilterExpression", "name"];
var FILTER_BUILDER_CLASS = "dx-filterbuilder";
var FILTER_BUILDER_ITEM_TEXT_CLASS = FILTER_BUILDER_CLASS + "-text";
var FILTER_BUILDER_ITEM_TEXT_PART_CLASS = FILTER_BUILDER_ITEM_TEXT_CLASS + "-part";
var FILTER_BUILDER_ITEM_TEXT_SEPARATOR_CLASS = FILTER_BUILDER_ITEM_TEXT_CLASS + "-separator";
var FILTER_BUILDER_ITEM_TEXT_SEPARATOR_EMPTY_CLASS = FILTER_BUILDER_ITEM_TEXT_SEPARATOR_CLASS + "-empty";

function getFormattedValueText(field, value) {
    var fieldFormat = field.format || DEFAULT_FORMAT[field.dataType];
    return _format_helper__WEBPACK_IMPORTED_MODULE_7__["default"].format(value, fieldFormat)
}

function isNegationGroup(group) {
    return group && group.length > 1 && "!" === group[0] && !isCondition(group)
}
function getGroupCriteria(group) {
    return isNegationGroup(group) ? group[1] : group
}

function setGroupCriteria(group, criteria) {
    if (isNegationGroup(group)) {
        group[1] = criteria
    } else {
        group = criteria
    }
    return group
}

function convertGroupToNewStructure(group, value) {
    if (function(value) {
            return -1 !== value.indexOf("!")
        }(value)) {
        if (!isNegationGroup(group)) {
            ! function(group) {
                var criteria = group.slice(0);
                group.length = 0;
                group.push("!", criteria)
            }(group)
        }
    } else if (isNegationGroup(group)) {
        ! function(group) {
            var criteria = getGroupCriteria(group);
            group.length = 0;
            [].push.apply(group, criteria)
        }(group)
    }
}
function setGroupValue(group, value) {
    convertGroupToNewStructure(group, value);
    var criteria = getGroupCriteria(group);
    var i;
    value = function(value) {
        return -1 === value.indexOf("!") ? value : value.substring(1)
    }(value);
    ! function(criteria, value) {
        for (i = 0; i < criteria.length; i++) {
            if (!Array.isArray(criteria[i])) {
                criteria[i] = value
            }
        }
    }(criteria, value);
    return group
}
function getGroupMenuItem(group, availableGroups) {
    var groupValue = getGroupValue(group);
    return availableGroups.filter((function(item) {
        return item.value === groupValue
    }))[0]
}

function getCriteriaOperation(criteria) {
    if (isCondition(criteria)) {
        return AND_GROUP_OPERATION
    }
    var value = "";
    for (var i = 0; i < criteria.length; i++) {
        var item = criteria[i];
        if (!Array.isArray(item)) {
            if (value && value !== item) {
                throw new _data_errors__WEBPACK_IMPORTED_MODULE_2__["errors"].Error("E4019")
            }
            if ("!" !== item) {
                value = item
            }
        }
    }
    return value
}
function getGroupValue(group) {
    var criteria = getGroupCriteria(group);
    var value = getCriteriaOperation(criteria);
    if (!value) {
        value = AND_GROUP_OPERATION
    }
    if (criteria !== group) {
        value = "!" + value
    }
    return value
}

function getDefaultFilterOperations(field) {
    return field.lookup && LOOKUP_OPERATIONS || DATATYPE_OPERATIONS[field.dataType || DEFAULT_DATA_TYPE]
}

function containItems(entity) {
    return Array.isArray(entity) && entity.length
}
function getFilterOperations(field) {
    var result = containItems(field.filterOperations) ? field.filterOperations : getDefaultFilterOperations(field);
    return Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_8__["extend"])([], result)
}
function getCaptionByOperation(operation, filterOperationDescriptions) {
    var operationName = _ui_filter_operations_dictionary__WEBPACK_IMPORTED_MODULE_13__["default"].getNameByFilterOperation(operation);
    return filterOperationDescriptions && filterOperationDescriptions[operationName] ? filterOperationDescriptions[operationName] : operationName
}
function getOperationFromAvailable(operation, availableOperations) {
    for (var i = 0; i < availableOperations.length; i++) {
        if (availableOperations[i].value === operation) {
            return availableOperations[i]
        }
    }
    throw new _widget_ui_errors__WEBPACK_IMPORTED_MODULE_5__["default"].Error("E1048", operation)
}
function getCustomOperation(customOperations, name) {
    var filteredOperations = customOperations.filter((function(item) {
        return item.name === name
    }));
    return filteredOperations.length ? filteredOperations[0] : null
}
function getAvailableOperations(field, filterOperationDescriptions, customOperations) {
    var filterOperations = getFilterOperations(field);
    var isLookupField = !!field.lookup;
    customOperations.forEach((function(customOperation) {
        if (!field.filterOperations && -1 === filterOperations.indexOf(customOperation.name)) {
            var dataTypes = customOperation && customOperation.dataTypes;
            var isOperationForbidden = isLookupField ? !!customOperation.notForLookup : false;
            if (!isOperationForbidden && dataTypes && dataTypes.indexOf(field.dataType || DEFAULT_DATA_TYPE) >= 0) {
                filterOperations.push(customOperation.name)
            }
        }
    }));
    return filterOperations.map((function(operation) {
        var customOperation = getCustomOperation(customOperations, operation);
        if (customOperation) {
            return {
                icon: customOperation.icon || EMPTY_MENU_ICON,
                text: customOperation.caption || Object(_core_utils_inflector__WEBPACK_IMPORTED_MODULE_9__["captionize"])(customOperation.name),
                value: customOperation.name,
                isCustom: true
            }
        } else {
            return {
                icon: _ui_filter_operations_dictionary__WEBPACK_IMPORTED_MODULE_13__["default"].getIconByFilterOperation(operation) || EMPTY_MENU_ICON,
                text: getCaptionByOperation(operation, filterOperationDescriptions),
                value: operation
            }
        }
    }))
}
function getDefaultOperation(field) {
    return field.defaultFilterOperation || getFilterOperations(field)[0]
}
function createCondition(field, customOperations) {
    var condition = [field.dataField, "", ""];
    var filterOperation = getDefaultOperation(field);
    updateConditionByOperation(condition, filterOperation, customOperations);
    return condition
}
function removeItem(group, item) {
    var criteria = getGroupCriteria(group);
    var index = criteria.indexOf(item);
    criteria.splice(index, 1);
    if (1 !== criteria.length) {
        criteria.splice(index, 1)
    }
    return group
}
function createEmptyGroup(value) {
    var isNegation = isNegationGroupOperation(value);
    var groupOperation = isNegation ? getGroupOperationFromNegationOperation(value) : value;
    return isNegation ? ["!", [groupOperation]] : [groupOperation]
}
function isEmptyGroup(group) {
    var criteria = getGroupCriteria(group);
    if (isCondition(criteria)) {
        return false
    }
    var hasConditions = criteria.some((function(item) {
        return isCondition(item)
    }));
    return !hasConditions
}
function addItem(item, group) {
    var criteria = getGroupCriteria(group);
    var groupValue = getGroupValue(criteria);
    1 === criteria.length ? criteria.unshift(item) : criteria.push(item, groupValue);
    return group
}
function getField(dataField, fields) {
    for (var i = 0; i < fields.length; i++) {
        if (fields[i].name === dataField) {
            return fields[i]
        }
        if (fields[i].dataField.toLowerCase() === dataField.toLowerCase()) {
            return fields[i]
        }
    }
    var extendedFields = getItems(fields, true).filter((function(item) {
        return item.dataField.toLowerCase() === dataField.toLowerCase()
    }));
    if (extendedFields.length > 0) {
        return extendedFields[0]
    }
    throw new _widget_ui_errors__WEBPACK_IMPORTED_MODULE_5__["default"].Error("E1047", dataField)
}
function isGroup(criteria) {
    if (!Array.isArray(criteria)) {
        return false
    }
    return criteria.length < 2 || Array.isArray(criteria[0]) || Array.isArray(criteria[1])
}
function isCondition(criteria) {
    if (!Array.isArray(criteria)) {
        return false
    }
    return criteria.length > 1 && !Array.isArray(criteria[0]) && !Array.isArray(criteria[1])
}

function convertToInnerGroup(group, customOperations, defaultGroupOperation) {
    defaultGroupOperation = defaultGroupOperation || AND_GROUP_OPERATION;
    var groupOperation = getCriteriaOperation(group).toLowerCase() || defaultGroupOperation;
    var innerGroup = [];
    for (var i = 0; i < group.length; i++) {
        if (isGroup(group[i])) {
            innerGroup.push(convertToInnerStructure(group[i], customOperations, defaultGroupOperation));
            innerGroup = appendGroupOperationToGroup(innerGroup, groupOperation)
        } else if (isCondition(group[i])) {
            innerGroup.push(convertToInnerCondition(group[i], customOperations));
            innerGroup = appendGroupOperationToGroup(innerGroup, groupOperation)
        }
    }
    if (0 === innerGroup.length) {
        innerGroup = appendGroupOperationToGroup(innerGroup, groupOperation)
    }
    return innerGroup
}

function conditionHasCustomOperation(condition, customOperations) {
    var customOperation = getCustomOperation(customOperations, condition[1]);
    return customOperation && customOperation.name === condition[1]
}

function convertToInnerCondition(condition, customOperations) {
    if (conditionHasCustomOperation(condition, customOperations)) {
        return condition
    }
    if (condition.length < 3) {
        condition[2] = condition[1];
        condition[1] = EQUAL_OPERATION
    }
    return condition
}

function isNegationGroupOperation(operation) {
    return -1 !== operation.indexOf("not")
}

function getGroupOperationFromNegationOperation(operation) {
    return operation.substring(3).toLowerCase()
}

function appendGroupOperationToCriteria(criteria, groupOperation) {
    var isNegation = isNegationGroupOperation(groupOperation);
    groupOperation = isNegation ? getGroupOperationFromNegationOperation(groupOperation) : groupOperation;
    return isNegation ? ["!", criteria, groupOperation] : [criteria, groupOperation]
}

function appendGroupOperationToGroup(group, groupOperation) {
    var isNegation = isNegationGroupOperation(groupOperation);
    groupOperation = isNegation ? getGroupOperationFromNegationOperation(groupOperation) : groupOperation;
    group.push(groupOperation);
    var result = group;
    if (isNegation) {
        result = ["!", result]
    }
    return result
}
function convertToInnerStructure(value, customOperations, defaultGroupOperation) {
    defaultGroupOperation = defaultGroupOperation || AND_GROUP_OPERATION;
    if (!value) {
        return createEmptyGroup(defaultGroupOperation)
    }
    value = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_8__["extend"])(true, [], value);
    if (isCondition(value)) {
        return appendGroupOperationToCriteria(convertToInnerCondition(value, customOperations), defaultGroupOperation)
    }
    if (isNegationGroup(value)) {
        return ["!", isCondition(value[1]) ? appendGroupOperationToCriteria(convertToInnerCondition(value[1], customOperations), defaultGroupOperation) : isNegationGroup(value[1]) ? appendGroupOperationToCriteria(convertToInnerStructure(value[1], customOperations), defaultGroupOperation) : convertToInnerGroup(value[1], customOperations, defaultGroupOperation)]
    }
    return convertToInnerGroup(value, customOperations, defaultGroupOperation)
}
function getNormalizedFields(fields) {
    return fields.reduce((function(result, field) {
        if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_3__["isDefined"])(field.dataField)) {
            var normalizedField = {};
            for (var key in field) {
                if (field[key] && AVAILABLE_FIELD_PROPERTIES.indexOf(key) > -1) {
                    normalizedField[key] = field[key]
                }
            }
            normalizedField.defaultCalculateFilterExpression = _shared_filtering__WEBPACK_IMPORTED_MODULE_6__["default"].defaultCalculateFilterExpression;
            if (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_3__["isDefined"])(normalizedField.dataType)) {
                normalizedField.dataType = DEFAULT_DATA_TYPE
            }
            if (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_3__["isDefined"])(normalizedField.trueText)) {
                normalizedField.trueText = _localization_message__WEBPACK_IMPORTED_MODULE_11__["default"].format("dxDataGrid-trueText")
            }
            if (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_3__["isDefined"])(normalizedField.falseText)) {
                normalizedField.falseText = _localization_message__WEBPACK_IMPORTED_MODULE_11__["default"].format("dxDataGrid-falseText")
            }
            result.push(normalizedField)
        }
        return result
    }), [])
}

function getConditionFilterExpression(condition, fields, customOperations, target) {
    var field = getField(condition[0], fields);
    var filterExpression = convertToInnerCondition(condition, customOperations);
    var customOperation = customOperations.length && getCustomOperation(customOperations, filterExpression[1]);
    if (customOperation && customOperation.calculateFilterExpression) {
        return customOperation.calculateFilterExpression.apply(customOperation, [filterExpression[2], field, fields])
    } else if (field.createFilterExpression) {
        return field.createFilterExpression.apply(field, [filterExpression[2], filterExpression[1], target])
    } else if (field.calculateFilterExpression) {
        return field.calculateFilterExpression.apply(field, [filterExpression[2], filterExpression[1], target])
    } else {
        return field.defaultCalculateFilterExpression.apply(field, [filterExpression[2], filterExpression[1], target])
    }
}
function getFilterExpression(value, fields, customOperations, target) {
    if (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_3__["isDefined"])(value)) {
        return null
    }
    if (isNegationGroup(value)) {
        var filterExpression = getFilterExpression(value[1], fields, customOperations, target);
        return ["!", filterExpression]
    }
    var criteria = getGroupCriteria(value);
    if (isCondition(criteria)) {
        return getConditionFilterExpression(criteria, fields, customOperations, target) || null
    } else {
        var result = [];
        var _filterExpression;
        var groupValue = getGroupValue(criteria);
        for (var i = 0; i < criteria.length; i++) {
            if (isGroup(criteria[i])) {
                _filterExpression = getFilterExpression(criteria[i], fields, customOperations, target);
                if (_filterExpression) {
                    i && result.push(groupValue);
                    result.push(_filterExpression)
                }
            } else if (isCondition(criteria[i])) {
                _filterExpression = getConditionFilterExpression(criteria[i], fields, customOperations, target);
                if (_filterExpression) {
                    result.length && result.push(groupValue);
                    result.push(_filterExpression)
                }
            }
        }
        if (1 === result.length) {
            result = result[0]
        }
        return result.length ? result : null
    }
}
function getNormalizedFilter(group) {
    var criteria = getGroupCriteria(group);
    var i;
    if (0 === criteria.length) {
        return null
    }
    var itemsForRemove = [];
    for (i = 0; i < criteria.length; i++) {
        if (isGroup(criteria[i])) {
            var normalizedGroupValue = getNormalizedFilter(criteria[i]);
            if (normalizedGroupValue) {
                criteria[i] = normalizedGroupValue
            } else {
                itemsForRemove.push(criteria[i])
            }
        } else if (isCondition(criteria[i])) {
            if (!isValidCondition(criteria[i])) {
                itemsForRemove.push(criteria[i])
            }
        }
    }
    for (i = 0; i < itemsForRemove.length; i++) {
        removeItem(criteria, itemsForRemove[i])
    }
    if (1 === criteria.length) {
        return null
    }
    criteria.splice(criteria.length - 1, 1);
    if (1 === criteria.length) {
        group = setGroupCriteria(group, criteria[0])
    }
    if (0 === group.length) {
        return null
    }
    return group
}
function getCurrentLookupValueText(field, value, handler) {
    if ("" === value) {
        handler("");
        return
    }
    var lookup = field.lookup;
    if (lookup.items) {
        handler(lookup.calculateCellValue(value) || "")
    } else {
        var lookupDataSource = Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_3__["isFunction"])(lookup.dataSource) ? lookup.dataSource({}) : lookup.dataSource;
        var dataSource = new _data_data_source_data_source__WEBPACK_IMPORTED_MODULE_12__["DataSource"](lookupDataSource);
        dataSource.loadSingle(lookup.valueExpr, value).done((function(result) {
            var valueText = "";
            if (result) {
                valueText = lookup.displayExpr ? Object(_core_utils_data__WEBPACK_IMPORTED_MODULE_4__["compileGetter"])(lookup.displayExpr)(result) : result
            }
            if (field.customizeText) {
                valueText = field.customizeText({
                    value: value,
                    valueText: valueText
                })
            }
            handler(valueText)
        })).fail((function() {
            handler("")
        }))
    }
}

function getPrimitiveValueText(field, value, customOperation, target, options) {
    var valueText;
    if (true === value) {
        valueText = field.trueText || _localization_message__WEBPACK_IMPORTED_MODULE_11__["default"].format("dxDataGrid-trueText")
    } else if (false === value) {
        valueText = field.falseText || _localization_message__WEBPACK_IMPORTED_MODULE_11__["default"].format("dxDataGrid-falseText")
    } else {
        valueText = getFormattedValueText(field, value)
    }
    if (field.customizeText) {
        valueText = field.customizeText.call(field, {
            value: value,
            valueText: valueText,
            target: target
        })
    }
    if (customOperation && customOperation.customizeText) {
        valueText = customOperation.customizeText.call(customOperation, {
            value: value,
            valueText: valueText,
            field: field,
            target: target
        }, options)
    }
    return valueText
}

function getArrayValueText(field, value, customOperation, target) {
    var options = {
        values: value
    };
    return value.map(v => getPrimitiveValueText(field, v, customOperation, target, options))
}

function checkDefaultValue(value) {
    return "" === value || null === value
}
function getCurrentValueText(field, value, customOperation) {
    var target = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : "filterBuilder";
    if (checkDefaultValue(value)) {
        return ""
    }
    if (Array.isArray(value)) {
        var result = new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_1__["Deferred"];
        _core_utils_deferred__WEBPACK_IMPORTED_MODULE_1__["when"].apply(this, getArrayValueText(field, value, customOperation, target)).done((function() {
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key]
            }
            var text = args.some(item => !checkDefaultValue(item)) ? args.map(item => !checkDefaultValue(item) ? item : "?") : "";
            result.resolve(text)
        }));
        return result
    } else {
        return getPrimitiveValueText(field, value, customOperation, target)
    }
}

function itemExists(plainItems, parentId) {
    return plainItems.some((function(item) {
        return item.dataField === parentId
    }))
}

function pushItemAndCheckParent(originalItems, plainItems, item) {
    var dataField = item.dataField;
    if (hasParent(dataField)) {
        item.parentId = getParentIdFromItemDataField(dataField);
        if (!itemExists(plainItems, item.parentId) && !itemExists(originalItems, item.parentId)) {
            pushItemAndCheckParent(originalItems, plainItems, {
                id: item.parentId,
                dataType: "object",
                dataField: item.parentId,
                caption: generateCaptionByDataField(item.parentId, true),
                filterOperations: ["isblank", "isnotblank"]
            })
        }
    }
    plainItems.push(item)
}

function generateCaptionByDataField(dataField, allowHierarchicalFields) {
    var caption = "";
    if (allowHierarchicalFields) {
        dataField = dataField.substring(dataField.lastIndexOf(".") + 1)
    } else if (hasParent(dataField)) {
        dataField.split(".").forEach((function(field, index, arr) {
            caption += Object(_core_utils_inflector__WEBPACK_IMPORTED_MODULE_9__["captionize"])(field);
            if (index !== arr.length - 1) {
                caption += "."
            }
        }));
        return caption
    }
    return Object(_core_utils_inflector__WEBPACK_IMPORTED_MODULE_9__["captionize"])(dataField)
}
function getItems(fields, allowHierarchicalFields) {
    var items = [];
    for (var i = 0; i < fields.length; i++) {
        var item = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_8__["extend"])(true, {
            caption: generateCaptionByDataField(fields[i].dataField, allowHierarchicalFields)
        }, fields[i]);
        item.id = item.name || item.dataField;
        if (allowHierarchicalFields) {
            pushItemAndCheckParent(fields, items, item)
        } else {
            items.push(item)
        }
    }
    return items
}

function hasParent(dataField) {
    return -1 !== dataField.lastIndexOf(".")
}

function getParentIdFromItemDataField(dataField) {
    return dataField.substring(0, dataField.lastIndexOf("."))
}
function getCaptionWithParents(item, plainItems) {
    if (hasParent(item.dataField)) {
        var parentId = getParentIdFromItemDataField(item.dataField);
        for (var i = 0; i < plainItems.length; i++) {
            if (plainItems[i].dataField === parentId) {
                return getCaptionWithParents(plainItems[i], plainItems) + "." + item.caption
            }
        }
    }
    return item.caption
}
function updateConditionByOperation(condition, operation, customOperations) {
    var customOperation = getCustomOperation(customOperations, operation);
    if (customOperation) {
        if (false === customOperation.hasValue) {
            condition[1] = operation;
            condition.length = 2
        } else {
            condition[1] = operation;
            condition[2] = ""
        }
        return condition
    }
    if ("isblank" === operation) {
        condition[1] = EQUAL_OPERATION;
        condition[2] = null
    } else if ("isnotblank" === operation) {
        condition[1] = NOT_EQUAL_OPERATION;
        condition[2] = null
    } else {
        customOperation = getCustomOperation(customOperations, condition[1]);
        if (customOperation || 2 === condition.length || null === condition[2]) {
            condition[2] = ""
        }
        condition[1] = operation
    }
    return condition
}
function getOperationValue(condition) {
    var caption;
    if (null === condition[2]) {
        if (condition[1] === EQUAL_OPERATION) {
            caption = "isblank"
        } else {
            caption = "isnotblank"
        }
    } else {
        caption = condition[1]
    }
    return caption
}
function isValidCondition(condition) {
    return "" !== condition[2]
}
function getMergedOperations(customOperations, betweenCaption, context) {
    var result = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_8__["extend"])(true, [], customOperations);
    var betweenIndex = -1;
    result.some((function(customOperation, index) {
        if ("between" === customOperation.name) {
            betweenIndex = index;
            return true
        }
    }));
    if (-1 !== betweenIndex) {
        result[betweenIndex] = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_8__["extend"])(Object(_between__WEBPACK_IMPORTED_MODULE_10__["getConfig"])(betweenCaption, context), result[betweenIndex])
    } else {
        result.unshift(Object(_between__WEBPACK_IMPORTED_MODULE_10__["getConfig"])(betweenCaption, context))
    }
    return result
}

function isMatchedCondition(filter, addedFilterDataField) {
    return filter[0] === addedFilterDataField
}
function removeFieldConditionsFromFilter(filter, dataField) {
    if (!filter || 0 === filter.length) {
        return null
    }
    if (isCondition(filter)) {
        var hasMatchedCondition = isMatchedCondition(filter, dataField);
        return !hasMatchedCondition ? filter : null
    } else {
        return syncConditionIntoGroup(filter, [dataField], false)
    }
}

function syncConditionIntoGroup(filter, addedFilter, canPush) {
    var result = [];
    filter.forEach((function(item) {
        if (isCondition(item)) {
            if (isMatchedCondition(item, addedFilter[0])) {
                if (canPush) {
                    result.push(addedFilter);
                    canPush = false
                } else {
                    result.splice(result.length - 1, 1)
                }
            } else {
                result.push(item)
            }
        } else {
            (result.length || isGroup(item)) && result.push(item)
        }
    }));
    if (0 === result.length) {
        return null
    }
    if (canPush) {
        result.push(AND_GROUP_OPERATION);
        result.push(addedFilter)
    }
    return 1 === result.length ? result[0] : result
}
function syncFilters(filter, addedFilter) {
    if (null === filter || 0 === filter.length) {
        return addedFilter
    }
    if (isCondition(filter)) {
        if (isMatchedCondition(filter, addedFilter[0])) {
            return addedFilter
        } else {
            return [filter, AND_GROUP_OPERATION, addedFilter]
        }
    }
    var groupValue = getGroupValue(filter);
    if (groupValue !== AND_GROUP_OPERATION) {
        return [addedFilter, "and", filter]
    }
    return syncConditionIntoGroup(filter, addedFilter, true)
}
function getMatchedConditions(filter, dataField) {
    if (null === filter || 0 === filter.length) {
        return []
    }
    if (isCondition(filter)) {
        if (isMatchedCondition(filter, dataField)) {
            return [filter]
        } else {
            return []
        }
    }
    var groupValue = getGroupValue(filter);
    if (groupValue !== AND_GROUP_OPERATION) {
        return []
    }
    var result = filter.filter((function(item) {
        return isCondition(item) && isMatchedCondition(item, dataField)
    }));
    return result
}
function filterHasField(filter, dataField) {
    if (null === filter || 0 === filter.length) {
        return false
    }
    if (isCondition(filter)) {
        return filter[0] === dataField
    }
    return filter.some((function(item) {
        return (isCondition(item) || isGroup(item)) && filterHasField(item, dataField)
    }))
}
var renderValueText = function($container, value, customOperation) {
    if (Array.isArray(value)) {
        var lastItemIndex = value.length - 1;
        $container.empty();
        value.forEach((t, i) => {
            Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])("<span>").addClass(FILTER_BUILDER_ITEM_TEXT_PART_CLASS).text(t).appendTo($container);
            if (i !== lastItemIndex) {
                Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])("<span>").addClass(FILTER_BUILDER_ITEM_TEXT_SEPARATOR_CLASS).text(customOperation && customOperation.valueSeparator ? customOperation.valueSeparator : "|").addClass(FILTER_BUILDER_ITEM_TEXT_SEPARATOR_EMPTY_CLASS).appendTo($container)
            }
        })
    } else if (value) {
        $container.text(value)
    } else {
        $container.text(_localization_message__WEBPACK_IMPORTED_MODULE_11__["default"].format("dxFilterBuilder-enterValueText"))
    }
};


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/grid_core/ui.grid.core.virtual_data_loader.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/grid_core/ui.grid.core.virtual_data_loader.js ***!
  \**************************************************************************************/
/*! exports provided: VirtualDataLoader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VirtualDataLoader", function() { return VirtualDataLoader; });
/* harmony import */ var _core_utils_deferred__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/utils/deferred */ "./node_modules/devextreme/esm/core/utils/deferred.js");
/* harmony import */ var _core_utils_type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/utils/type */ "./node_modules/devextreme/esm/core/utils/type.js");
/**
 * DevExtreme (esm/ui/grid_core/ui.grid.core.virtual_data_loader.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */


var LEGACY_SCROLLING_MODE = "scrolling.legacyMode";
var needTwoPagesLoading = that => that.option("scrolling.loadTwoPagesOnStart") || that._controller.isVirtual() || that._controller.getViewportItemIndex() > 0;
var getBeginPageIndex = that => that._cache.length ? that._cache[0].pageIndex : -1;
var getEndPageIndex = that => that._cache.length ? that._cache[that._cache.length - 1].pageIndex : -1;
var fireChanged = (that, changed, args) => {
    that._isChangedFiring = true;
    changed(args);
    that._isChangedFiring = false
};
var processDelayChanged = (that, changed, args) => {
    if (that._isDelayChanged) {
        that._isDelayChanged = false;
        fireChanged(that, changed, args);
        return true
    }
};
var getViewportPageCount = that => {
    var pageSize = that._dataOptions.pageSize();
    var preventPreload = that.option("scrolling.preventPreload");
    if (preventPreload) {
        return 0
    }
    var realViewportSize = that._controller.viewportSize();
    if (that._controller.isVirtualMode() && that.option("scrolling.removeInvisiblePages")) {
        realViewportSize = 0;
        var viewportSize = that._controller.viewportSize() * that._controller.viewportItemSize();
        var offset = that._controller.getContentOffset();
        var position = that._controller.getViewportPosition();
        var virtualItemsCount = that._controller.virtualItemsCount();
        var totalItemsCount = that._dataOptions.totalItemsCount();
        for (var itemIndex = virtualItemsCount.begin; itemIndex < totalItemsCount; itemIndex++) {
            if (offset >= position + viewportSize) {
                break
            }
            var itemSize = that._controller.getItemSizes()[itemIndex] || that._controller.viewportItemSize();
            offset += itemSize;
            if (offset >= position) {
                realViewportSize++
            }
        }
    }
    return pageSize && realViewportSize > 0 ? Math.ceil(realViewportSize / pageSize) : 1
};
var getPreloadPageCount = (that, previous) => {
    var preloadEnabled = that.option("scrolling.preloadEnabled");
    var pageCount = getViewportPageCount(that);
    var isAppendMode = that._controller.isAppendMode();
    if (pageCount) {
        if (previous) {
            pageCount = preloadEnabled ? 1 : 0
        } else {
            if (preloadEnabled) {
                pageCount++
            }
            if (isAppendMode || !needTwoPagesLoading(that)) {
                pageCount--
            }
        }
    }
    return pageCount
};
var getPageIndexForLoad = that => {
    var result = -1;
    var beginPageIndex = getBeginPageIndex(that);
    var dataOptions = that._dataOptions;
    if (beginPageIndex < 0) {
        result = that._pageIndex
    } else if (!that._cache[that._pageIndex - beginPageIndex]) {
        result = that._pageIndex
    } else if (beginPageIndex >= 0 && that._controller.viewportSize() >= 0) {
        if (beginPageIndex > 0) {
            var needToLoadPageBeforeLast = getEndPageIndex(that) + 1 === dataOptions.pageCount() && that._cache.length < getPreloadPageCount(that) + 1;
            var needToLoadPrevPage = needToLoadPageBeforeLast || that._pageIndex === beginPageIndex && getPreloadPageCount(that, true);
            if (needToLoadPrevPage) {
                result = beginPageIndex - 1
            }
        }
        if (result < 0) {
            var needToLoadNextPage = beginPageIndex + that._cache.length <= that._pageIndex + getPreloadPageCount(that);
            if (needToLoadNextPage) {
                result = beginPageIndex + that._cache.length
            }
        }
    }
    if (that._loadingPageIndexes[result]) {
        result = -1
    }
    return result
};
var loadCore = (that, pageIndex) => {
    var dataOptions = that._dataOptions;
    if (pageIndex === that.pageIndex() || !dataOptions.isLoading() && pageIndex < dataOptions.pageCount() || !dataOptions.hasKnownLastPage() && pageIndex === dataOptions.pageCount()) {
        dataOptions.pageIndex(pageIndex);
        that._loadingPageIndexes[pageIndex] = true;
        return Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_0__["when"])(dataOptions.load()).always(() => {
            that._loadingPageIndexes[pageIndex] = false
        })
    }
};
var processChanged = (that, changed, changeType, isDelayChanged, removeCacheItem) => {
    var dataOptions = that._dataOptions;
    var items = dataOptions.items().slice();
    var change = Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_1__["isObject"])(changeType) ? changeType : void 0;
    var isPrepend = "prepend" === changeType;
    var viewportItems = dataOptions.viewportItems();
    if (changeType && Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_1__["isString"])(changeType) && !that._isDelayChanged) {
        change = {
            changeType: changeType,
            items: items
        };
        if (removeCacheItem) {
            change.removeCount = removeCacheItem.itemsCount;
            if (change.removeCount && dataOptions.correctCount) {
                change.removeCount = dataOptions.correctCount(viewportItems, change.removeCount, isPrepend)
            }
        }
    }
    var removeItemCount = removeCacheItem ? removeCacheItem.itemsLength : 0;
    if (removeItemCount && dataOptions.correctCount) {
        removeItemCount = dataOptions.correctCount(viewportItems, removeItemCount, isPrepend)
    }
    if ("append" === changeType) {
        viewportItems.push.apply(viewportItems, items);
        if (removeCacheItem) {
            viewportItems.splice(0, removeItemCount)
        }
    } else if (isPrepend) {
        viewportItems.unshift.apply(viewportItems, items);
        if (removeCacheItem) {
            viewportItems.splice(-removeItemCount)
        }
    } else {
        that._dataOptions.viewportItems(items)
    }
    dataOptions.updateLoading();
    that._lastPageIndex = that.pageIndex();
    that._isDelayChanged = isDelayChanged;
    if (!isDelayChanged) {
        fireChanged(that, changed, change)
    }
};
class VirtualDataLoader {
    constructor(controller, dataOptions) {
        this._controller = controller;
        this._dataOptions = dataOptions;
        this._pageIndex = this._lastPageIndex = dataOptions.pageIndex();
        this._cache = [];
        this._loadingPageIndexes = {}
    }
    option() {
        return this._controller.option.apply(this._controller, arguments)
    }
    viewportItemIndexChanged(itemIndex) {
        var pageSize = this._dataOptions.pageSize();
        var pageCount = this._dataOptions.pageCount();
        var virtualMode = this._controller.isVirtualMode();
        var appendMode = this._controller.isAppendMode();
        var totalItemsCount = this._dataOptions.totalItemsCount();
        var newPageIndex;
        if (pageSize && (virtualMode || appendMode) && totalItemsCount >= 0) {
            var viewportSize = this._controller.viewportSize();
            if (viewportSize && itemIndex + viewportSize >= totalItemsCount && !this._controller.isVirtual()) {
                if (this._dataOptions.hasKnownLastPage()) {
                    newPageIndex = pageCount - 1;
                    var lastPageSize = totalItemsCount % pageSize;
                    if (newPageIndex > 0 && lastPageSize > 0 && lastPageSize < viewportSize) {
                        newPageIndex--
                    }
                } else {
                    newPageIndex = pageCount
                }
            } else {
                newPageIndex = Math.floor(itemIndex / pageSize);
                var maxPageIndex = pageCount - 1;
                newPageIndex = Math.max(newPageIndex, 0);
                newPageIndex = Math.min(newPageIndex, maxPageIndex)
            }
            this.pageIndex(newPageIndex);
            return this.load()
        }
    }
    pageIndex(pageIndex) {
        var isVirtualMode = this._controller.isVirtualMode();
        var isAppendMode = this._controller.isAppendMode();
        if (false !== this.option(LEGACY_SCROLLING_MODE) && (isVirtualMode || isAppendMode)) {
            if (void 0 !== pageIndex) {
                this._pageIndex = pageIndex
            }
            return this._pageIndex
        } else {
            return this._dataOptions.pageIndex(pageIndex)
        }
    }
    beginPageIndex(defaultPageIndex) {
        var beginPageIndex = getBeginPageIndex(this);
        if (beginPageIndex < 0) {
            beginPageIndex = void 0 !== defaultPageIndex ? defaultPageIndex : this.pageIndex()
        }
        return beginPageIndex
    }
    endPageIndex() {
        var endPageIndex = getEndPageIndex(this);
        return endPageIndex > 0 ? endPageIndex : this._lastPageIndex
    }
    pageSize() {
        return this._dataOptions.pageSize()
    }
    load() {
        var dataOptions = this._dataOptions;
        var result;
        var isVirtualMode = this._controller.isVirtualMode();
        var isAppendMode = this._controller.isAppendMode();
        if (false !== this.option(LEGACY_SCROLLING_MODE) && (isVirtualMode || isAppendMode)) {
            var pageIndexForLoad = getPageIndexForLoad(this);
            if (pageIndexForLoad >= 0) {
                var loadResult = loadCore(this, pageIndexForLoad);
                if (loadResult) {
                    result = new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_0__["Deferred"];
                    loadResult.done(() => {
                        var delayDeferred = this._delayDeferred;
                        if (delayDeferred) {
                            delayDeferred.done(result.resolve).fail(result.reject)
                        } else {
                            result.resolve()
                        }
                    }).fail(result.reject);
                    dataOptions.updateLoading()
                }
            }
        } else {
            result = dataOptions.load()
        }
        if (!result && this._lastPageIndex !== this.pageIndex()) {
            this._dataOptions.onChanged({
                changeType: "pageIndex"
            })
        }
        return result || (new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_0__["Deferred"]).resolve()
    }
    loadIfNeed() {
        var isVirtualMode = this._controller.isVirtualMode();
        var isAppendMode = this._controller.isAppendMode();
        if ((isVirtualMode || isAppendMode) && !this._dataOptions.isLoading() && (!this._isChangedFiring || this._controller.isVirtual())) {
            var position = this._controller.getViewportPosition();
            if (position > 0) {
                this._controller._setViewportPositionCore(position)
            } else {
                this.load()
            }
        }
    }
    handleDataChanged(callBase, e) {
        var dataOptions = this._dataOptions;
        var lastCacheLength = this._cache.length;
        var changeType;
        var removeInvisiblePages;
        var isVirtualMode = this._controller.isVirtualMode();
        var isAppendMode = this._controller.isAppendMode();
        if (e && e.changes) {
            fireChanged(this, callBase, e)
        } else if (false !== this.option(LEGACY_SCROLLING_MODE) && (isVirtualMode || isAppendMode)) {
            var beginPageIndex = getBeginPageIndex(this);
            if (beginPageIndex >= 0) {
                if (isVirtualMode && beginPageIndex + this._cache.length !== dataOptions.pageIndex() && beginPageIndex - 1 !== dataOptions.pageIndex()) {
                    lastCacheLength = 0;
                    this._cache = []
                }
                if (isAppendMode) {
                    if (0 === dataOptions.pageIndex()) {
                        this._cache = []
                    } else if (dataOptions.pageIndex() < getEndPageIndex(this)) {
                        fireChanged(this, callBase, {
                            changeType: "append",
                            items: []
                        });
                        return
                    }
                }
            }
            var cacheItem = {
                pageIndex: dataOptions.pageIndex(),
                itemsLength: dataOptions.items(true).length,
                itemsCount: this.itemsCount(true)
            };
            if (this.option("scrolling.removeInvisiblePages") && isVirtualMode) {
                removeInvisiblePages = this._cache.length > Math.max(getPreloadPageCount(this) + (this.option("scrolling.preloadEnabled") ? 1 : 0), 2)
            } else {
                processDelayChanged(this, callBase, {
                    isDelayed: true
                })
            }
            var removeCacheItem;
            if (beginPageIndex === dataOptions.pageIndex() + 1) {
                if (removeInvisiblePages) {
                    removeCacheItem = this._cache.pop()
                }
                changeType = "prepend";
                this._cache.unshift(cacheItem)
            } else {
                if (removeInvisiblePages) {
                    removeCacheItem = this._cache.shift()
                }
                changeType = "append";
                this._cache.push(cacheItem)
            }
            var isDelayChanged = isVirtualMode && 0 === lastCacheLength && needTwoPagesLoading(this);
            processChanged(this, callBase, this._cache.length > 1 ? changeType : void 0, isDelayChanged, removeCacheItem);
            this._delayDeferred = this.load().done(() => {
                if (processDelayChanged(this, callBase)) {
                    this.load()
                }
            })
        } else {
            processChanged(this, callBase, e)
        }
    }
    getDelayDeferred() {
        return this._delayDeferred
    }
    itemsCount(isBase) {
        var itemsCount = 0;
        var isVirtualMode = this._controller.isVirtualMode();
        if (!isBase && isVirtualMode) {
            this._cache.forEach(cacheItem => {
                itemsCount += cacheItem.itemsCount
            })
        } else {
            itemsCount = this._dataOptions.itemsCount()
        }
        return itemsCount
    }
    virtualItemsCount() {
        var pageIndex = getBeginPageIndex(this);
        if (pageIndex < 0) {
            pageIndex = this._dataOptions.pageIndex()
        }
        var beginItemsCount = pageIndex * this._dataOptions.pageSize();
        var itemsCount = this._cache.length * this._dataOptions.pageSize();
        var endItemsCount = Math.max(0, this._dataOptions.totalItemsCount() - itemsCount - beginItemsCount);
        return {
            begin: beginItemsCount,
            end: endItemsCount
        }
    }
    reset() {
        this._loadingPageIndexes = {};
        this._cache = []
    }
}


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.accessibility.js":
/*!********************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.accessibility.js ***!
  \********************************************************************************/
/*! exports provided: registerKeyboardAction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "registerKeyboardAction", function() { return registerKeyboardAction; });
/* harmony import */ var _ui_shared_accessibility__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ui/shared/accessibility */ "./node_modules/devextreme/esm/ui/shared/accessibility.js");
/**
 * DevExtreme (esm/ui/grid_core/ui.grid_core.accessibility.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */

var registerKeyboardAction = function(viewName, instance, $element, selector, action) {
    var keyboardController = instance.getController("keyboardNavigation");
    if (instance.option("useLegacyKeyboardNavigation") || keyboardController && !keyboardController.isKeyboardEnabled()) {
        return
    }
    instance.createAction("onKeyDown");
    _ui_shared_accessibility__WEBPACK_IMPORTED_MODULE_0__["registerKeyboardAction"](viewName, instance, $element, selector, action, args => {
        instance.executeAction("onKeyDown", args)
    })
};


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.adaptivity.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.adaptivity.js ***!
  \*****************************************************************************/
/*! exports provided: adaptivityModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "adaptivityModule", function() { return adaptivityModule; });
/* harmony import */ var _core_utils_size__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/utils/size */ "./node_modules/devextreme/esm/core/utils/size.js");
/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/renderer */ "./node_modules/devextreme/esm/core/renderer.js");
/* harmony import */ var _events_core_events_engine__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../events/core/events_engine */ "./node_modules/devextreme/esm/events/core/events_engine.js");
/* harmony import */ var _events_utils_index__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../events/utils/index */ "./node_modules/devextreme/esm/events/utils/index.js");
/* harmony import */ var _events_click__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../events/click */ "./node_modules/devextreme/esm/events/click.js");
/* harmony import */ var _core_utils_type__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core/utils/type */ "./node_modules/devextreme/esm/core/utils/type.js");
/* harmony import */ var _core_guid__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../core/guid */ "./node_modules/devextreme/esm/core/guid.js");
/* harmony import */ var _ui_grid_core_modules__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ui.grid_core.modules */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.modules.js");
/* harmony import */ var _form__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../form */ "./node_modules/devextreme/esm/ui/form.js");
/* harmony import */ var _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./ui.grid_core.utils */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.utils.js");
/* harmony import */ var _themes__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../themes */ "./node_modules/devextreme/esm/ui/themes.js");
/* harmony import */ var _core_utils_window__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../core/utils/window */ "./node_modules/devextreme/esm/core/utils/window.js");
/* harmony import */ var _core_utils_common__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../core/utils/common */ "./node_modules/devextreme/esm/core/utils/common.js");
/* harmony import */ var _core_utils_iterator__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../core/utils/iterator */ "./node_modules/devextreme/esm/core/utils/iterator.js");
/* harmony import */ var _core_utils_extend__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../core/utils/extend */ "./node_modules/devextreme/esm/core/utils/extend.js");
/* harmony import */ var _core_utils_deferred__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../core/utils/deferred */ "./node_modules/devextreme/esm/core/utils/deferred.js");
/* harmony import */ var _localization_message__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../localization/message */ "./node_modules/devextreme/esm/localization/message.js");
/**
 * DevExtreme (esm/ui/grid_core/ui.grid_core.adaptivity.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */

















var COLUMN_HEADERS_VIEW = "columnHeadersView";
var ROWS_VIEW = "rowsView";
var FOOTER_VIEW = "footerView";
var COLUMN_VIEWS = [COLUMN_HEADERS_VIEW, ROWS_VIEW, FOOTER_VIEW];
var ADAPTIVE_NAMESPACE = "dxDataGridAdaptivity";
var HIDDEN_COLUMNS_WIDTH = "adaptiveHidden";
var ADAPTIVE_ROW_TYPE = "detailAdaptive";
var FORM_ITEM_CONTENT_CLASS = "dx-field-item-content";
var FORM_ITEM_MODIFIED = "dx-item-modified";
var HIDDEN_COLUMN_CLASS = "hidden-column";
var ADAPTIVE_COLUMN_BUTTON_CLASS = "adaptive-more";
var ADAPTIVE_COLUMN_NAME_CLASS = "dx-command-adaptive";
var COMMAND_ADAPTIVE_HIDDEN_CLASS = "dx-command-adaptive-hidden";
var ADAPTIVE_DETAIL_ROW_CLASS = "dx-adaptive-detail-row";
var ADAPTIVE_ITEM_TEXT_CLASS = "dx-adaptive-item-text";
var MASTER_DETAIL_CELL_CLASS = "dx-master-detail-cell";
var LAST_DATA_CELL_CLASS = "dx-last-data-cell";
var ADAPTIVE_COLUMN_NAME = "adaptive";
var EDIT_MODE_BATCH = "batch";
var EDIT_MODE_ROW = "row";
var EDIT_MODE_FORM = "form";
var EDIT_MODE_POPUP = "popup";
var REVERT_TOOLTIP_CLASS = "revert-tooltip";
var GROUP_CELL_CLASS = "dx-group-cell";
var GROUP_ROW_CLASS = "dx-group-row";
var EXPAND_ARIA_NAME = "dxDataGrid-ariaAdaptiveExpand";
var COLLAPSE_ARIA_NAME = "dxDataGrid-ariaAdaptiveCollapse";
var LEGACY_SCROLLING_MODE = "scrolling.legacyMode";

function getColumnId(that, column) {
    return that._columnsController.getColumnId(column)
}

function getDataCellElements($row) {
    return $row.find("td:not(.dx-datagrid-hidden-column):not([class*='dx-command-'])")
}

function adaptiveCellTemplate(container, options) {
    var $adaptiveColumnButton;
    var $container = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(container);
    var adaptiveColumnsController = options.component.getController("adaptiveColumns");
    if ("data" === options.rowType) {
        $adaptiveColumnButton = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])("<span>").addClass(adaptiveColumnsController.addWidgetPrefix(ADAPTIVE_COLUMN_BUTTON_CLASS));
        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_2__["default"].on($adaptiveColumnButton, Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_3__["addNamespace"])(_events_click__WEBPACK_IMPORTED_MODULE_4__["name"], ADAPTIVE_NAMESPACE), adaptiveColumnsController.createAction((function() {
            adaptiveColumnsController.toggleExpandAdaptiveDetailRow(options.key)
        })));
        $adaptiveColumnButton.appendTo($container)
    } else {
        _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_9__["default"].setEmptyText($container)
    }
}
var AdaptiveColumnsController = _ui_grid_core_modules__WEBPACK_IMPORTED_MODULE_7__["default"].ViewController.inherit({
    _isRowEditMode: function() {
        var editMode = this._getEditMode();
        return editMode === EDIT_MODE_ROW
    },
    _isItemModified: function(item, cellOptions) {
        var columnIndex = this._columnsController.getVisibleIndex(item.column.index);
        var rowIndex = this._dataController.getRowIndexByKey(cellOptions.key);
        var row = this._dataController.items()[rowIndex + 1];
        return row && row.modifiedValues && Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isDefined"])(row.modifiedValues[columnIndex])
    },
    _renderFormViewTemplate: function(item, cellOptions, $container) {
        var column = item.column;
        var focusAction = this.createAction((function() {
            _events_core_events_engine__WEBPACK_IMPORTED_MODULE_2__["default"].trigger($container, _events_click__WEBPACK_IMPORTED_MODULE_4__["name"])
        }));
        var value = column.calculateCellValue(cellOptions.data);
        var displayValue = _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_9__["default"].getDisplayValue(column, value, cellOptions.data, cellOptions.rowType);
        var text = _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_9__["default"].formatValue(displayValue, column);
        var isCellOrBatchEditMode = this._editingController.isCellOrBatchEditMode();
        var rowsView = this._rowsView;
        if (column.allowEditing && this.getController("keyboardNavigation").isKeyboardEnabled()) {
            $container.attr("tabIndex", this.option("tabIndex"));
            if (isCellOrBatchEditMode) {
                _events_core_events_engine__WEBPACK_IMPORTED_MODULE_2__["default"].off($container, "focus", focusAction);
                _events_core_events_engine__WEBPACK_IMPORTED_MODULE_2__["default"].on($container, "focus", focusAction)
            }
        }
        if (column.cellTemplate) {
            var templateOptions = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_14__["extend"])({}, cellOptions, {
                value: value,
                displayValue: displayValue,
                text: text,
                column: column
            });
            var isDomElement = !!$container.closest(Object(_core_utils_window__WEBPACK_IMPORTED_MODULE_11__["getWindow"])().document).length;
            rowsView.renderTemplate($container, column.cellTemplate, templateOptions, isDomElement).done(() => {
                rowsView._cellPrepared($container, cellOptions)
            })
        } else {
            var container = $container.get(0);
            if (column.encodeHtml) {
                container.textContent = text
            } else {
                container.innerHTML = text
            }
            $container.addClass(ADAPTIVE_ITEM_TEXT_CLASS);
            if (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isDefined"])(text) || "" === text) {
                $container.html("&nbsp;")
            }
            if (!this._isRowEditMode()) {
                if (this._isItemModified(item, cellOptions)) {
                    $container.addClass(FORM_ITEM_MODIFIED)
                }
            }
            rowsView._cellPrepared($container, cellOptions)
        }
    },
    _getTemplate: function(item, cellOptions) {
        var that = this;
        var column = item.column;
        var editingController = this.getController("editing");
        return function(options, container) {
            var $container = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(container);
            var columnIndex = that._columnsController.getVisibleIndex(column.index);
            var templateOptions = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_14__["extend"])({}, cellOptions);
            var renderFormTemplate = function() {
                var isItemEdited = that._isItemEdited(item);
                templateOptions.value = cellOptions.row.values[columnIndex];
                if (isItemEdited || column.showEditorAlways) {
                    editingController.renderFormEditTemplate(templateOptions, item, options, $container, !isItemEdited)
                } else {
                    templateOptions.column = column;
                    templateOptions.columnIndex = columnIndex;
                    that._renderFormViewTemplate(item, templateOptions, $container)
                }
            };
            renderFormTemplate();
            templateOptions.watch && templateOptions.watch((function() {
                return {
                    isItemEdited: that._isItemEdited(item),
                    value: cellOptions.row.values[columnIndex]
                }
            }), (function() {
                $container.contents().remove();
                $container.removeClass(ADAPTIVE_ITEM_TEXT_CLASS);
                renderFormTemplate()
            }))
        }
    },
    _isVisibleColumnsValid: function(visibleColumns) {
        if (visibleColumns < 2) {
            return false
        }
        if (visibleColumns.length - function() {
                var result = 0;
                for (var j = 0; j < visibleColumns.length; j++) {
                    var visibleColumn = visibleColumns[j];
                    if (visibleColumn.command) {
                        result++
                    }
                }
                return result
            }() <= 1) {
            return false
        }
        return true
    },
    _calculatePercentWidths: function(widths, visibleColumns) {
        var that = this;
        var percentWidths = 0;
        visibleColumns.forEach((function(item, index) {
            if (widths[index] !== HIDDEN_COLUMNS_WIDTH) {
                percentWidths += that._getItemPercentWidth(item)
            }
        }));
        return percentWidths
    },
    _isPercentWidth: function(width) {
        return Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isString"])(width) && "%" === width.slice(-1)
    },
    _isColumnHidden: function(column) {
        return this._hiddenColumns.filter((function(hiddenColumn) {
            return hiddenColumn.index === column.index
        })).length > 0
    },
    _getAverageColumnsWidth: function(containerWidth, columns, columnsCanFit) {
        var that = this;
        var fixedColumnsWidth = 0;
        var columnsWithoutFixedWidthCount = 0;
        columns.forEach((function(column) {
            if (!that._isColumnHidden(column)) {
                var width = column.width;
                if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isDefined"])(width) && !isNaN(parseFloat(width))) {
                    fixedColumnsWidth += that._isPercentWidth(width) ? that._calculatePercentWidth({
                        visibleIndex: column.visibleIndex,
                        columnsCount: columns.length,
                        columnsCanFit: columnsCanFit,
                        bestFitWidth: column.bestFitWidth,
                        columnWidth: width,
                        containerWidth: containerWidth
                    }) : parseFloat(width)
                } else {
                    columnsWithoutFixedWidthCount++
                }
            }
        }));
        return (containerWidth - fixedColumnsWidth) / columnsWithoutFixedWidthCount
    },
    _calculateColumnWidth: function(column, containerWidth, contentColumns, columnsCanFit) {
        var columnId = getColumnId(this, column);
        var widthOption = this._columnsController.columnOption(columnId, "width");
        var bestFitWidth = this._columnsController.columnOption(columnId, "bestFitWidth");
        var columnsCount = contentColumns.length;
        var colWidth;
        if (widthOption && "auto" !== widthOption) {
            if (this._isPercentWidth(widthOption)) {
                colWidth = this._calculatePercentWidth({
                    visibleIndex: column.visibleIndex,
                    columnsCount: columnsCount,
                    columnsCanFit: columnsCanFit,
                    bestFitWidth: bestFitWidth,
                    columnWidth: widthOption,
                    containerWidth: containerWidth
                })
            } else {
                return parseFloat(widthOption)
            }
        } else {
            var columnAutoWidth = this.option("columnAutoWidth");
            colWidth = columnAutoWidth || !!column.command ? bestFitWidth : this._getAverageColumnsWidth(containerWidth, contentColumns, columnsCanFit)
        }
        return colWidth
    },
    _calculatePercentWidth: function(options) {
        var columnFitted = options.visibleIndex < options.columnsCount - 1 && options.columnsCanFit;
        var partialWidth = options.containerWidth * parseFloat(options.columnWidth) / 100;
        var resultWidth = options.columnsCanFit && partialWidth < options.bestFitWidth ? options.bestFitWidth : partialWidth;
        return columnFitted ? options.containerWidth * parseFloat(options.columnWidth) / 100 : resultWidth
    },
    _getNotTruncatedColumnWidth: function(column, containerWidth, contentColumns, columnsCanFit) {
        var columnId = getColumnId(this, column);
        var widthOption = this._columnsController.columnOption(columnId, "width");
        var bestFitWidth = this._columnsController.columnOption(columnId, "bestFitWidth");
        if (widthOption && "auto" !== widthOption && !this._isPercentWidth(widthOption)) {
            return parseFloat(widthOption)
        }
        var colWidth = this._calculateColumnWidth(column, containerWidth, contentColumns, columnsCanFit);
        return colWidth < bestFitWidth ? null : colWidth
    },
    _getItemPercentWidth: function(item) {
        var result = 0;
        if (item.width && this._isPercentWidth(item.width)) {
            result = parseFloat(item.width)
        }
        return result
    },
    _getCommandColumnsWidth: function() {
        var that = this;
        var columns = that._columnsController.getVisibleColumns();
        var colWidth = 0;
        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_13__["each"])(columns, (function(index, column) {
            if (column.index < 0 || column.command) {
                colWidth += that._columnsController.columnOption(getColumnId(that, column), "bestFitWidth") || 0
            }
        }));
        return colWidth
    },
    _isItemEdited: function(item) {
        if (this.isFormOrPopupEditMode()) {
            return false
        }
        if (this._isRowEditMode()) {
            var editRowKey = this.option("editing.editRowKey");
            if (Object(_core_utils_common__WEBPACK_IMPORTED_MODULE_12__["equalByValue"])(editRowKey, this._dataController.adaptiveExpandedKey())) {
                return true
            }
        } else {
            var rowIndex = this._dataController.getRowIndexByKey(this._dataController.adaptiveExpandedKey()) + 1;
            var columnIndex = this._columnsController.getVisibleIndex(item.column.index);
            return this._editingController.isEditCell(rowIndex, columnIndex)
        }
    },
    _getFormItemsByHiddenColumns: function(hiddenColumns) {
        var items = [];
        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_13__["each"])(hiddenColumns, (function(_, column) {
            items.push({
                column: column,
                name: column.name,
                dataField: column.dataField,
                visibleIndex: column.visibleIndex
            })
        }));
        return items
    },
    _getAdaptiveColumnVisibleIndex: function(visibleColumns) {
        for (var i = 0; i < visibleColumns.length; i++) {
            var column = visibleColumns[i];
            if (column.command === ADAPTIVE_COLUMN_NAME) {
                return i
            }
        }
    },
    _hideAdaptiveColumn: function(resultWidths, visibleColumns) {
        var visibleIndex = this._getAdaptiveColumnVisibleIndex(visibleColumns);
        if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isDefined"])(visibleIndex)) {
            resultWidths[visibleIndex] = HIDDEN_COLUMNS_WIDTH;
            this._hideVisibleColumn({
                isCommandColumn: true,
                visibleIndex: visibleIndex
            })
        }
    },
    _showHiddenCellsInView: function(_ref) {
        var {
            $cells: $cells,
            isCommandColumn: isCommandColumn
        } = _ref;
        var cssClassNameToRemove = isCommandColumn ? COMMAND_ADAPTIVE_HIDDEN_CLASS : this.addWidgetPrefix(HIDDEN_COLUMN_CLASS);
        $cells.removeClass(cssClassNameToRemove)
    },
    _showHiddenColumns: function() {
        for (var i = 0; i < COLUMN_VIEWS.length; i++) {
            var view = this.getView(COLUMN_VIEWS[i]);
            if (view && view.isVisible() && view.element()) {
                var viewName = view.name;
                var $hiddenCommandCells = view.element().find("." + COMMAND_ADAPTIVE_HIDDEN_CLASS);
                this._showHiddenCellsInView({
                    viewName: viewName,
                    $cells: $hiddenCommandCells,
                    isCommandColumn: true
                });
                var $hiddenCells = view.element().find("." + this.addWidgetPrefix(HIDDEN_COLUMN_CLASS));
                this._showHiddenCellsInView({
                    viewName: viewName,
                    $cells: $hiddenCells
                })
            }
        }
    },
    _isCellValid: function($cell) {
        return $cell && $cell.length && !$cell.hasClass(MASTER_DETAIL_CELL_CLASS) && !$cell.hasClass(GROUP_CELL_CLASS)
    },
    _hideVisibleColumn: function(_ref2) {
        var {
            isCommandColumn: isCommandColumn,
            visibleIndex: visibleIndex
        } = _ref2;
        var that = this;
        COLUMN_VIEWS.forEach((function(viewName) {
            var view = that.getView(viewName);
            view && that._hideVisibleColumnInView({
                view: view,
                isCommandColumn: isCommandColumn,
                visibleIndex: visibleIndex
            })
        }))
    },
    _hideVisibleColumnInView: function(_ref3) {
        var {
            view: view,
            isCommandColumn: isCommandColumn,
            visibleIndex: visibleIndex
        } = _ref3;
        var viewName = view.name;
        var $cellElement;
        var column = this._columnsController.getVisibleColumns()[visibleIndex];
        var editFormRowIndex = this._editingController && this._editingController.getEditFormRowIndex();
        if (view && view.isVisible() && column) {
            var rowsCount = view.getRowsCount();
            var $rowElements = view._getRowElements();
            for (var rowIndex = 0; rowIndex < rowsCount; rowIndex++) {
                var cancelClassAdding = rowIndex === editFormRowIndex && viewName === ROWS_VIEW && "popup" !== this.option("editing.mode");
                if (!cancelClassAdding) {
                    var currentVisibleIndex = viewName === COLUMN_HEADERS_VIEW ? this._columnsController.getVisibleIndex(column.index, rowIndex) : visibleIndex;
                    if (currentVisibleIndex >= 0) {
                        var $rowElement = $rowElements.eq(rowIndex);
                        $cellElement = this._findCellElementInRow($rowElement, currentVisibleIndex);
                        this._isCellValid($cellElement) && this._hideVisibleCellInView({
                            viewName: viewName,
                            isCommandColumn: isCommandColumn,
                            $cell: $cellElement
                        })
                    }
                }
            }
        }
    },
    _findCellElementInRow($rowElement, visibleColumnIndex) {
        var $rowCells = $rowElement.children();
        var visibleIndex = visibleColumnIndex;
        var cellIsInsideGroup = false;
        if ($rowElement.hasClass(GROUP_ROW_CLASS)) {
            var $groupCell = $rowElement.find(".".concat(GROUP_CELL_CLASS));
            var colSpan = $groupCell.attr("colspan");
            if ($groupCell.length && Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isDefined"])(colSpan)) {
                var groupCellLength = parseInt(colSpan);
                var endGroupIndex = $groupCell.index() + groupCellLength - 1;
                if (visibleColumnIndex > endGroupIndex) {
                    visibleIndex = visibleColumnIndex - groupCellLength + 1
                } else {
                    cellIsInsideGroup = true
                }
            }
        }
        var $cellElement = !cellIsInsideGroup ? $rowCells.eq(visibleIndex) : void 0;
        return $cellElement
    },
    _hideVisibleCellInView: function(_ref4) {
        var {
            $cell: $cell,
            isCommandColumn: isCommandColumn
        } = _ref4;
        var cssClassNameToAdd = isCommandColumn ? COMMAND_ADAPTIVE_HIDDEN_CLASS : this.addWidgetPrefix(HIDDEN_COLUMN_CLASS);
        $cell.addClass(cssClassNameToAdd)
    },
    _getEditMode: function() {
        return this._editingController.getEditMode()
    },
    isFormOrPopupEditMode: function() {
        var editMode = this._getEditMode();
        return editMode === EDIT_MODE_FORM || editMode === EDIT_MODE_POPUP
    },
    hideRedundantColumns: function(resultWidths, visibleColumns, hiddenQueue) {
        this._hiddenColumns = [];
        if (this._isVisibleColumnsValid(visibleColumns) && hiddenQueue.length) {
            var totalWidth = 0;
            var $rootElement = this.component.$element();
            var rootElementWidth = Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getWidth"])($rootElement) - this._getCommandColumnsWidth();
            var getVisibleContentColumns = function() {
                return visibleColumns.filter(item => !item.command && 0 === this._hiddenColumns.filter(i => i.index === item.index).length)
            }.bind(this);
            var visibleContentColumns = getVisibleContentColumns();
            var contentColumnsCount = visibleContentColumns.length;
            var i;
            var hasHiddenColumns;
            var needHideColumn;
            do {
                needHideColumn = false;
                totalWidth = 0;
                var percentWidths = this._calculatePercentWidths(resultWidths, visibleColumns);
                var columnsCanFit = percentWidths < 100 && 0 !== percentWidths;
                for (i = 0; i < visibleColumns.length; i++) {
                    var visibleColumn = visibleColumns[i];
                    var columnWidth = this._getNotTruncatedColumnWidth(visibleColumn, rootElementWidth, visibleContentColumns, columnsCanFit);
                    var columnId = getColumnId(this, visibleColumn);
                    var widthOption = this._columnsController.columnOption(columnId, "width");
                    var minWidth = this._columnsController.columnOption(columnId, "minWidth");
                    var columnBestFitWidth = this._columnsController.columnOption(columnId, "bestFitWidth");
                    if (resultWidths[i] === HIDDEN_COLUMNS_WIDTH) {
                        hasHiddenColumns = true;
                        continue
                    }
                    if (!columnWidth && !visibleColumn.command && !visibleColumn.fixed) {
                        needHideColumn = true;
                        break
                    }
                    if (!widthOption || "auto" === widthOption) {
                        columnWidth = Math.max(columnBestFitWidth || 0, minWidth || 0)
                    }
                    if (visibleColumn.command !== ADAPTIVE_COLUMN_NAME || hasHiddenColumns) {
                        totalWidth += columnWidth
                    }
                }
                needHideColumn = needHideColumn || totalWidth > Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getWidth"])($rootElement);
                if (needHideColumn) {
                    var column = hiddenQueue.pop();
                    var visibleIndex = this._columnsController.getVisibleIndex(column.index);
                    rootElementWidth += this._calculateColumnWidth(column, rootElementWidth, visibleContentColumns, columnsCanFit);
                    this._hideVisibleColumn({
                        visibleIndex: visibleIndex
                    });
                    resultWidths[visibleIndex] = HIDDEN_COLUMNS_WIDTH;
                    this._hiddenColumns.push(column);
                    visibleContentColumns = getVisibleContentColumns()
                }
            } while (needHideColumn && visibleContentColumns.length > 1 && hiddenQueue.length);
            if (contentColumnsCount === visibleContentColumns.length) {
                this._hideAdaptiveColumn(resultWidths, visibleColumns)
            }
        } else {
            this._hideAdaptiveColumn(resultWidths, visibleColumns)
        }
    },
    getItemContentByColumnIndex: function(visibleColumnIndex) {
        var $itemContent;
        for (var i = 0; i < this._$itemContents.length; i++) {
            $itemContent = this._$itemContents.eq(i);
            var item = $itemContent.data("dx-form-item");
            if (item && item.column && this._columnsController.getVisibleIndex(item.column.index) === visibleColumnIndex) {
                return $itemContent
            }
        }
    },
    toggleExpandAdaptiveDetailRow: function(key, alwaysExpanded) {
        if (!(this.isFormOrPopupEditMode() && this._editingController.isEditing())) {
            this.getController("data").toggleExpandAdaptiveDetailRow(key, alwaysExpanded)
        }
    },
    createFormByHiddenColumns: function(container, options) {
        var that = this;
        var $container = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(container);
        var userFormOptions = {
            items: that._getFormItemsByHiddenColumns(that._hiddenColumns),
            formID: "dx-" + new _core_guid__WEBPACK_IMPORTED_MODULE_6__["default"]
        };
        var defaultFormOptions = Object(_themes__WEBPACK_IMPORTED_MODULE_10__["isMaterial"])() ? {
            colCount: 2
        } : {};
        this.executeAction("onAdaptiveDetailRowPreparing", {
            formOptions: userFormOptions
        });
        that._$itemContents = null;
        that._form = that._createComponent(Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])("<div>").appendTo($container), _form__WEBPACK_IMPORTED_MODULE_8__["default"], Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_14__["extend"])(defaultFormOptions, userFormOptions, {
            customizeItem: function(item) {
                var column = item.column || that._columnsController.columnOption(item.name || item.dataField);
                if (column) {
                    item.label = item.label || {};
                    item.label.text = item.label.text || column.caption;
                    item.column = column;
                    item.template = that._getTemplate(item, options, that.updateForm.bind(that))
                }
                userFormOptions.customizeItem && userFormOptions.customizeItem.call(this, item)
            },
            onContentReady: function(e) {
                userFormOptions.onContentReady && userFormOptions.onContentReady.call(this, e);
                that._$itemContents = $container.find("." + FORM_ITEM_CONTENT_CLASS)
            }
        }))
    },
    hasAdaptiveDetailRowExpanded: function() {
        return Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isDefined"])(this._dataController.adaptiveExpandedKey())
    },
    updateForm: function(hiddenColumns) {
        if (this.hasAdaptiveDetailRowExpanded()) {
            if (this._form && Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isDefined"])(this._form._contentReadyAction)) {
                if (hiddenColumns && hiddenColumns.length) {
                    this._form.option("items", this._getFormItemsByHiddenColumns(hiddenColumns))
                } else {
                    this._form.repaint()
                }
            }
        }
    },
    updateHidingQueue: function(columns) {
        var hideableColumns = columns.filter((function(column) {
            return column.visible && !column.type && !column.fixed && !(Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isDefined"])(column.groupIndex) && column.groupIndex >= 0)
        }));
        var columnsHasHidingPriority;
        var i;
        this._hidingColumnsQueue = [];
        if (this.option("allowColumnResizing") && "widget" === this.option("columnResizingMode")) {
            return this._hidingColumnsQueue
        }
        for (i = 0; i < hideableColumns.length; i++) {
            if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isDefined"])(hideableColumns[i].hidingPriority) && hideableColumns[i].hidingPriority >= 0) {
                columnsHasHidingPriority = true;
                this._hidingColumnsQueue[hideableColumns[i].hidingPriority] = hideableColumns[i]
            }
        }
        if (columnsHasHidingPriority) {
            this._hidingColumnsQueue.reverse()
        } else if (this.option("columnHidingEnabled")) {
            for (i = 0; i < hideableColumns.length; i++) {
                var visibleIndex = this._columnsController.getVisibleIndex(hideableColumns[i].index);
                this._hidingColumnsQueue[visibleIndex] = hideableColumns[i]
            }
        }
        this._hidingColumnsQueue = this._hidingColumnsQueue.filter(Object);
        return this._hidingColumnsQueue
    },
    getHiddenColumns: function() {
        return this._hiddenColumns
    },
    hasHiddenColumns: function() {
        return this._hiddenColumns.length > 0
    },
    getHidingColumnsQueue: function() {
        return this._hidingColumnsQueue
    },
    init: function() {
        var that = this;
        that._columnsController = that.getController("columns");
        that._dataController = that.getController("data");
        that._rowsView = that.getView("rowsView");
        that._columnsController.addCommandColumn({
            type: ADAPTIVE_COLUMN_NAME,
            command: ADAPTIVE_COLUMN_NAME,
            visible: true,
            adaptiveHidden: true,
            cssClass: ADAPTIVE_COLUMN_NAME_CLASS,
            alignment: "center",
            width: "auto",
            cellTemplate: adaptiveCellTemplate,
            fixedPosition: "right"
        });
        that._columnsController.columnsChanged.add((function() {
            var isAdaptiveVisible = !!that.updateHidingQueue(that._columnsController.getColumns()).length;
            that._columnsController.columnOption("command:adaptive", "adaptiveHidden", !isAdaptiveVisible, true)
        }));
        that._editingController = that.getController("editing");
        that._hidingColumnsQueue = [];
        that._hiddenColumns = [];
        that.createAction("onAdaptiveDetailRowPreparing");
        that.callBase()
    },
    optionChanged: function(args) {
        if ("columnHidingEnabled" === args.name) {
            this._columnsController.columnOption("command:adaptive", "adaptiveHidden", !args.value)
        }
        this.callBase(args)
    },
    publicMethods: function() {
        return ["isAdaptiveDetailRowExpanded", "expandAdaptiveDetailRow", "collapseAdaptiveDetailRow"]
    },
    isAdaptiveDetailRowExpanded: function(key) {
        return this._dataController.adaptiveExpandedKey() && Object(_core_utils_common__WEBPACK_IMPORTED_MODULE_12__["equalByValue"])(this._dataController.adaptiveExpandedKey(), key)
    },
    expandAdaptiveDetailRow: function(key) {
        if (!this.hasAdaptiveDetailRowExpanded()) {
            this.toggleExpandAdaptiveDetailRow(key)
        }
    },
    collapseAdaptiveDetailRow: function() {
        if (this.hasAdaptiveDetailRowExpanded()) {
            this.toggleExpandAdaptiveDetailRow()
        }
    },
    updateCommandAdaptiveAriaLabel: function(key, label) {
        var rowIndex = this._dataController.getRowIndexByKey(key);
        if (-1 === rowIndex) {
            return
        }
        var $row = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(this.component.getRowElement(rowIndex));
        this.setCommandAdaptiveAriaLabel($row, label)
    },
    setCommandAdaptiveAriaLabel: function($row, labelName) {
        var $adaptiveCommand = $row.find(".dx-command-adaptive");
        $adaptiveCommand.attr("aria-label", _localization_message__WEBPACK_IMPORTED_MODULE_16__["default"].format(labelName))
    }
});
var adaptivityModule = {
    defaultOptions: function() {
        return {
            columnHidingEnabled: false,
            onAdaptiveDetailRowPreparing: null
        }
    },
    controllers: {
        adaptiveColumns: AdaptiveColumnsController
    },
    extenders: {
        views: {
            rowsView: {
                _getCellTemplate: function(options) {
                    var that = this;
                    var column = options.column;
                    if (options.rowType === ADAPTIVE_ROW_TYPE && "detail" === column.command) {
                        return function(container, options) {
                            that._adaptiveColumnsController.createFormByHiddenColumns(Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(container), options)
                        }
                    }
                    return that.callBase(options)
                },
                _createRow: function(row) {
                    var $row = this.callBase.apply(this, arguments);
                    if (row && row.rowType === ADAPTIVE_ROW_TYPE && row.key === this._dataController.adaptiveExpandedKey()) {
                        $row.addClass(ADAPTIVE_DETAIL_ROW_CLASS)
                    }
                    return $row
                },
                _renderCells: function($row, options) {
                    this.callBase($row, options);
                    var adaptiveColumnsController = this._adaptiveColumnsController;
                    var hidingColumnsQueueLength = adaptiveColumnsController.getHidingColumnsQueue().length;
                    var hiddenColumnsLength = adaptiveColumnsController.getHiddenColumns().length;
                    if (hidingColumnsQueueLength && !hiddenColumnsLength) {
                        getDataCellElements($row).last().addClass(LAST_DATA_CELL_CLASS)
                    }
                    if ("data" === options.row.rowType) {
                        adaptiveColumnsController.setCommandAdaptiveAriaLabel($row, EXPAND_ARIA_NAME)
                    }
                },
                _getColumnIndexByElementCore: function($element) {
                    var $itemContent = $element.closest("." + FORM_ITEM_CONTENT_CLASS);
                    if ($itemContent.length && $itemContent.closest(this.component.$element()).length) {
                        var formItem = $itemContent.length ? $itemContent.first().data("dx-form-item") : null;
                        return formItem && formItem.column && this._columnsController.getVisibleIndex(formItem.column.index)
                    } else {
                        return this.callBase($element)
                    }
                },
                _cellPrepared: function($cell, options) {
                    this.callBase.apply(this, arguments);
                    if (options.row.rowType !== ADAPTIVE_ROW_TYPE && options.column.visibleWidth === HIDDEN_COLUMNS_WIDTH) {
                        $cell.addClass(this.addWidgetPrefix(HIDDEN_COLUMN_CLASS))
                    }
                },
                _getCellElement: function(rowIndex, columnIdentifier) {
                    var item = this._dataController.items()[rowIndex];
                    if (item && item.rowType === ADAPTIVE_ROW_TYPE) {
                        return this._adaptiveColumnsController.getItemContentByColumnIndex(columnIdentifier)
                    } else {
                        return this.callBase.apply(this, arguments)
                    }
                },
                getContextMenuItems: function(options) {
                    if (options.row && "detailAdaptive" === options.row.rowType) {
                        var view = this.component.getView("columnHeadersView");
                        var formItem = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(options.targetElement).closest(".dx-field-item-label").next().data("dx-form-item");
                        options.column = formItem ? formItem.column : options.column;
                        return view.getContextMenuItems && view.getContextMenuItems(options)
                    }
                    return this.callBase && this.callBase(options)
                },
                isClickableElement: function($target) {
                    var isClickable = this.callBase ? this.callBase($target) : false;
                    return isClickable || !!$target.closest("." + ADAPTIVE_COLUMN_NAME_CLASS).length
                },
                init: function() {
                    this.callBase();
                    this._adaptiveColumnsController = this.getController("adaptiveColumns")
                }
            }
        },
        controllers: {
            export: {
                _updateColumnWidth: function(column, width) {
                    this.callBase(column, column.visibleWidth === HIDDEN_COLUMNS_WIDTH ? column.bestFitWidth : width)
                }
            },
            columnsResizer: {
                _pointCreated: function(point, cellsLength, columns) {
                    var result = this.callBase(point, cellsLength, columns);
                    var currentColumn = columns[point.columnIndex] || {};
                    var nextColumnIndex = this._getNextColumnIndex(point.columnIndex);
                    var nextColumn = columns[nextColumnIndex] || {};
                    var hasHiddenColumnsOnly = nextColumnIndex !== point.columnIndex + 1 && nextColumn.command;
                    var hasAdaptiveHiddenWidth = currentColumn.visibleWidth === HIDDEN_COLUMNS_WIDTH || hasHiddenColumnsOnly;
                    return result || hasAdaptiveHiddenWidth
                },
                _getNextColumnIndex: function(currentColumnIndex) {
                    var visibleColumns = this._columnsController.getVisibleColumns();
                    var index = this.callBase(currentColumnIndex);
                    while (visibleColumns[index] && visibleColumns[index].visibleWidth === HIDDEN_COLUMNS_WIDTH) {
                        index++
                    }
                    return index
                }
            },
            draggingHeader: {
                _pointCreated: function(point, columns, location, sourceColumn) {
                    var result = this.callBase(point, columns, location, sourceColumn);
                    var column = columns[point.columnIndex - 1] || {};
                    var hasAdaptiveHiddenWidth = column.visibleWidth === HIDDEN_COLUMNS_WIDTH;
                    return result || hasAdaptiveHiddenWidth
                }
            },
            editing: {
                _isRowEditMode: function() {
                    return this.getEditMode() === EDIT_MODE_ROW
                },
                _getFormEditItemTemplate: function(cellOptions, column) {
                    if (this.getEditMode() !== EDIT_MODE_ROW && "detailAdaptive" === cellOptions.rowType) {
                        cellOptions.columnIndex = this._columnsController.getVisibleIndex(column.index);
                        return this.getColumnTemplate(cellOptions)
                    }
                    return this.callBase(cellOptions, column)
                },
                _closeEditItem: function($targetElement) {
                    var $itemContents = $targetElement.closest("." + FORM_ITEM_CONTENT_CLASS);
                    var rowIndex = this._dataController.getRowIndexByKey(this._dataController.adaptiveExpandedKey()) + 1;
                    var formItem = $itemContents.length ? $itemContents.first().data("dx-form-item") : null;
                    var columnIndex = formItem && formItem.column && this._columnsController.getVisibleIndex(formItem.column.index);
                    if (!this.isEditCell(rowIndex, columnIndex)) {
                        this.callBase($targetElement)
                    }
                },
                _beforeUpdateItems: function(rowIndices, rowIndex) {
                    if (!this._adaptiveController.isFormOrPopupEditMode() && this._adaptiveController.hasHiddenColumns()) {
                        var items = this._dataController.items();
                        var item = items[rowIndex];
                        var oldExpandRowIndex = _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_9__["default"].getIndexByKey(this._dataController.adaptiveExpandedKey(), items);
                        this._isForceRowAdaptiveExpand = !this._adaptiveController.hasAdaptiveDetailRowExpanded();
                        if (oldExpandRowIndex >= 0) {
                            rowIndices.push(oldExpandRowIndex + 1)
                        }
                        rowIndices.push(rowIndex + 1);
                        this._dataController.adaptiveExpandedKey(item.key)
                    }
                },
                _afterInsertRow: function(key) {
                    this.callBase.apply(this, arguments);
                    if (this._adaptiveController.hasHiddenColumns()) {
                        this._adaptiveController.toggleExpandAdaptiveDetailRow(key, this.isRowEditMode());
                        this._isForceRowAdaptiveExpand = true
                    }
                },
                _collapseAdaptiveDetailRow: function() {
                    if (this._isRowEditMode() && this._isForceRowAdaptiveExpand) {
                        this._adaptiveController.collapseAdaptiveDetailRow();
                        this._isForceRowAdaptiveExpand = false
                    }
                },
                _cancelEditAdaptiveDetailRow: function() {
                    if (this._adaptiveController.hasHiddenColumns()) {
                        this._collapseAdaptiveDetailRow()
                    }
                },
                _afterSaveEditData: function() {
                    this.callBase.apply(this, arguments);
                    var deferred = new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_15__["Deferred"];
                    if (this._isRowEditMode() && this._adaptiveController.hasHiddenColumns()) {
                        Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_15__["when"])(this.getController("validating").validate(true)).done(isValid => {
                            if (isValid) {
                                this._cancelEditAdaptiveDetailRow()
                            }
                            deferred.resolve()
                        })
                    } else {
                        deferred.resolve()
                    }
                    return deferred.promise()
                },
                _beforeCancelEditData: function() {
                    this.callBase();
                    this._cancelEditAdaptiveDetailRow()
                },
                _getRowIndicesForCascadeUpdating: function(row) {
                    var rowIndices = this.callBase.apply(this, arguments);
                    if (this._adaptiveController.isAdaptiveDetailRowExpanded(row.key)) {
                        rowIndices.push(row.rowType === ADAPTIVE_ROW_TYPE ? row.rowIndex - 1 : row.rowIndex + 1)
                    }
                    return rowIndices
                },
                _beforeCloseEditCellInBatchMode: function(rowIndices) {
                    var expandedKey = this._dataController._adaptiveExpandedKey;
                    if (expandedKey) {
                        var rowIndex = _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_9__["default"].getIndexByKey(expandedKey, this._dataController.items());
                        if (rowIndex > -1) {
                            rowIndices.unshift(rowIndex)
                        }
                    }
                },
                editRow: function(rowIndex) {
                    if (this._adaptiveController.isFormOrPopupEditMode()) {
                        this._adaptiveController.collapseAdaptiveDetailRow()
                    }
                    this.callBase(rowIndex)
                },
                deleteRow: function(rowIndex) {
                    var rowKey = this._dataController.getKeyByRowIndex(rowIndex);
                    if (this.getEditMode() === EDIT_MODE_BATCH && this._adaptiveController.isAdaptiveDetailRowExpanded(rowKey)) {
                        this._adaptiveController.collapseAdaptiveDetailRow()
                    }
                    this.callBase(rowIndex)
                },
                init: function() {
                    this.callBase();
                    this._adaptiveController = this.getController("adaptiveColumns")
                }
            },
            resizing: {
                _needBestFit: function() {
                    return this.callBase() || !!this._adaptiveColumnsController.getHidingColumnsQueue().length
                },
                _correctColumnWidths: function(resultWidths, visibleColumns) {
                    var adaptiveController = this._adaptiveColumnsController;
                    var oldHiddenColumns = adaptiveController.getHiddenColumns();
                    var hidingColumnsQueue = adaptiveController.updateHidingQueue(this._columnsController.getColumns());
                    adaptiveController.hideRedundantColumns(resultWidths, visibleColumns, hidingColumnsQueue);
                    var hiddenColumns = adaptiveController.getHiddenColumns();
                    if (adaptiveController.hasAdaptiveDetailRowExpanded()) {
                        if (oldHiddenColumns.length !== hiddenColumns.length) {
                            adaptiveController.updateForm(hiddenColumns)
                        }
                    }!hiddenColumns.length && adaptiveController.collapseAdaptiveDetailRow();
                    return this.callBase.apply(this, arguments)
                },
                _toggleBestFitMode: function(isBestFit) {
                    isBestFit && this._adaptiveColumnsController._showHiddenColumns();
                    this.callBase(isBestFit)
                },
                _needStretch: function() {
                    var adaptiveColumnsController = this._adaptiveColumnsController;
                    return this.callBase.apply(this, arguments) || adaptiveColumnsController.getHidingColumnsQueue().length || adaptiveColumnsController.hasHiddenColumns()
                },
                init: function() {
                    this._adaptiveColumnsController = this.getController("adaptiveColumns");
                    this.callBase()
                },
                dispose: function() {
                    this.callBase.apply(this, arguments);
                    clearTimeout(this._updateScrollableTimeoutID)
                }
            },
            data: {
                _processItems: function(items, change) {
                    var changeType = change.changeType;
                    items = this.callBase.apply(this, arguments);
                    if ("loadingAll" === changeType || !Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isDefined"])(this._adaptiveExpandedKey)) {
                        return items
                    }
                    var expandRowIndex = _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_9__["default"].getIndexByKey(this._adaptiveExpandedKey, items);
                    var newMode = false === this.option(LEGACY_SCROLLING_MODE);
                    if (expandRowIndex >= 0) {
                        var item = items[expandRowIndex];
                        items.splice(expandRowIndex + 1, 0, {
                            visible: true,
                            rowType: ADAPTIVE_ROW_TYPE,
                            key: item.key,
                            data: item.data,
                            node: item.node,
                            modifiedValues: item.modifiedValues,
                            isNewRow: item.isNewRow,
                            values: item.values
                        })
                    } else if ("refresh" === changeType && !(newMode && change.repaintChangesOnly)) {
                        this._adaptiveExpandedKey = void 0
                    }
                    return items
                },
                _getRowIndicesForExpand: function(key) {
                    var rowIndices = this.callBase.apply(this, arguments);
                    if (this.getController("adaptiveColumns").isAdaptiveDetailRowExpanded(key)) {
                        var lastRowIndex = rowIndices[rowIndices.length - 1];
                        rowIndices.push(lastRowIndex + 1)
                    }
                    return rowIndices
                },
                adaptiveExpandedKey: function(value) {
                    if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isDefined"])(value)) {
                        this._adaptiveExpandedKey = value
                    } else {
                        return this._adaptiveExpandedKey
                    }
                },
                toggleExpandAdaptiveDetailRow: function(key, alwaysExpanded) {
                    var oldExpandLoadedRowIndex = _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_9__["default"].getIndexByKey(this._adaptiveExpandedKey, this._items);
                    var newExpandLoadedRowIndex = _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_9__["default"].getIndexByKey(key, this._items);
                    if (oldExpandLoadedRowIndex >= 0 && oldExpandLoadedRowIndex === newExpandLoadedRowIndex && !alwaysExpanded) {
                        key = void 0;
                        newExpandLoadedRowIndex = -1
                    }
                    var oldKey = this._adaptiveExpandedKey;
                    this._adaptiveExpandedKey = key;
                    if (oldExpandLoadedRowIndex >= 0) {
                        oldExpandLoadedRowIndex++
                    }
                    if (newExpandLoadedRowIndex >= 0) {
                        newExpandLoadedRowIndex++
                    }
                    var rowIndexDelta = this.getRowIndexDelta();
                    this.updateItems({
                        allowInvisibleRowIndices: true,
                        changeType: "update",
                        rowIndices: [oldExpandLoadedRowIndex - rowIndexDelta, newExpandLoadedRowIndex - rowIndexDelta]
                    });
                    var adaptiveColumnsController = this.getController("adaptiveColumns");
                    adaptiveColumnsController.updateCommandAdaptiveAriaLabel(key, COLLAPSE_ARIA_NAME);
                    adaptiveColumnsController.updateCommandAdaptiveAriaLabel(oldKey, EXPAND_ARIA_NAME)
                },
                init: function() {
                    this.callBase();
                    this._adaptiveExpandedKey = void 0
                }
            },
            editorFactory: {
                _getFocusCellSelector: function() {
                    return this.callBase() + ", .dx-adaptive-detail-row .dx-field-item > .dx-field-item-content"
                },
                _getTooltipsSelector: function() {
                    return this.callBase() + ", .dx-field-item-content ." + this.addWidgetPrefix(REVERT_TOOLTIP_CLASS)
                }
            },
            columns: {
                _isColumnVisible: function(column) {
                    return this.callBase(column) && !column.adaptiveHidden
                }
            },
            keyboardNavigation: {
                _isCellValid: function($cell) {
                    return this.callBase.apply(this, arguments) && !$cell.hasClass(this.addWidgetPrefix(HIDDEN_COLUMN_CLASS))
                },
                _processNextCellInMasterDetail: function($nextCell) {
                    this.callBase($nextCell);
                    var isCellOrBatchMode = this._editingController.isCellOrBatchEditMode();
                    if (!this._isInsideEditForm($nextCell) && $nextCell && isCellOrBatchMode) {
                        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_2__["default"].on($nextCell, "focus", (function focusHandler() {
                            _events_core_events_engine__WEBPACK_IMPORTED_MODULE_2__["default"].off($nextCell, "focus", focusHandler);
                            _events_core_events_engine__WEBPACK_IMPORTED_MODULE_2__["default"].trigger($nextCell, "dxclick")
                        }))
                    }
                },
                _handleTabKeyOnMasterDetailCell: function(eventTarget, direction) {
                    var result = this.callBase(eventTarget, direction);
                    var $currentCell = this._getFocusedCell();
                    var $row = $currentCell && $currentCell.parent();
                    if (!result && $row && $row.length) {
                        var $dataCells = getDataCellElements($row);
                        var $targetCell = "next" === direction ? $dataCells.last() : $dataCells.first();
                        var rowIndex = $row.get(0).rowIndex;
                        var adaptiveController = this._adaptiveController;
                        var key = this._dataController.getKeyByRowIndex("next" === direction ? rowIndex : rowIndex - 1);
                        var isCellElementsEquals = $currentCell && $targetCell && $currentCell.get(0) === $targetCell.get(0);
                        return adaptiveController.isAdaptiveDetailRowExpanded(key) && isCellElementsEquals
                    }
                    return result
                },
                init: function() {
                    this.callBase();
                    this._adaptiveController = this.getController("adaptiveColumns")
                }
            }
        }
    }
};


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.column_chooser.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.column_chooser.js ***!
  \*********************************************************************************/
/*! exports provided: columnChooserModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "columnChooserModule", function() { return columnChooserModule; });
/* harmony import */ var _core_utils_size__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/utils/size */ "./node_modules/devextreme/esm/core/utils/size.js");
/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/renderer */ "./node_modules/devextreme/esm/core/renderer.js");
/* harmony import */ var _core_utils_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/utils/common */ "./node_modules/devextreme/esm/core/utils/common.js");
/* harmony import */ var _ui_grid_core_modules__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ui.grid_core.modules */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.modules.js");
/* harmony import */ var _ui_grid_core_columns_view__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ui.grid_core.columns_view */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.columns_view.js");
/* harmony import */ var _localization_message__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../localization/message */ "./node_modules/devextreme/esm/localization/message.js");
/* harmony import */ var _themes__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../themes */ "./node_modules/devextreme/esm/ui/themes.js");
/* harmony import */ var _button__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../button */ "./node_modules/devextreme/esm/ui/button.js");
/* harmony import */ var _tree_view__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../tree_view */ "./node_modules/devextreme/esm/ui/tree_view.js");
/* harmony import */ var _core_devices__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../core/devices */ "./node_modules/devextreme/esm/core/devices.js");
/* harmony import */ var _popup__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../popup */ "./node_modules/devextreme/esm/ui/popup.js");
/* harmony import */ var _core_utils_type__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../core/utils/type */ "./node_modules/devextreme/esm/core/utils/type.js");
/* harmony import */ var _core_utils_extend__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../core/utils/extend */ "./node_modules/devextreme/esm/core/utils/extend.js");
/* harmony import */ var _core_utils_iterator__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../core/utils/iterator */ "./node_modules/devextreme/esm/core/utils/iterator.js");
/**
 * DevExtreme (esm/ui/grid_core/ui.grid_core.column_chooser.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */














var COLUMN_CHOOSER_CLASS = "column-chooser";
var COLUMN_CHOOSER_BUTTON_CLASS = "column-chooser-button";
var NOTOUCH_ACTION_CLASS = "notouch-action";
var COLUMN_CHOOSER_LIST_CLASS = "column-chooser-list";
var COLUMN_CHOOSER_PLAIN_CLASS = "column-chooser-plain";
var COLUMN_CHOOSER_DRAG_CLASS = "column-chooser-mode-drag";
var COLUMN_CHOOSER_SELECT_CLASS = "column-chooser-mode-select";
var COLUMN_CHOOSER_ICON_NAME = "column-chooser";
var COLUMN_CHOOSER_ITEM_CLASS = "dx-column-chooser-item";
var TREEVIEW_NODE_SELECTOR = ".dx-treeview-node";
var CHECKBOX_SELECTOR = ".dx-checkbox";
var CLICK_TIMEOUT = 300;
var processItems = function(that, chooserColumns) {
    var items = [];
    var isSelectMode = "select" === that.option("columnChooser.mode");
    if (chooserColumns.length) {
        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_13__["each"])(chooserColumns, (function(index, column) {
            var item = {
                text: column.caption,
                cssClass: column.cssClass,
                allowHiding: column.allowHiding,
                expanded: true,
                id: column.index,
                disabled: false,
                disableCheckBox: false === column.allowHiding,
                parentId: Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_11__["isDefined"])(column.ownerBand) ? column.ownerBand : null
            };
            if (isSelectMode) {
                item.selected = column.visible
            }
            items.push(item)
        }))
    }
    return items
};
var ColumnChooserController = _ui_grid_core_modules__WEBPACK_IMPORTED_MODULE_3__["default"].ViewController.inherit({
    renderShowColumnChooserButton: function($element) {
        var that = this;
        var columnChooserButtonClass = that.addWidgetPrefix(COLUMN_CHOOSER_BUTTON_CLASS);
        var columnChooserEnabled = that.option("columnChooser.enabled");
        var $showColumnChooserButton = $element.find("." + columnChooserButtonClass);
        var $columnChooserButton;
        if (columnChooserEnabled) {
            if (!$showColumnChooserButton.length) {
                $columnChooserButton = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])("<div>").addClass(columnChooserButtonClass).appendTo($element);
                that._createComponent($columnChooserButton, _button__WEBPACK_IMPORTED_MODULE_7__["default"], {
                    icon: COLUMN_CHOOSER_ICON_NAME,
                    onClick: function() {
                        that.getView("columnChooserView").showColumnChooser()
                    },
                    hint: that.option("columnChooser.title"),
                    integrationOptions: {}
                })
            } else {
                $showColumnChooserButton.show()
            }
        } else {
            $showColumnChooserButton.hide()
        }
    },
    getPosition: function() {
        var rowsView = this.getView("rowsView");
        return {
            my: "right bottom",
            at: "right bottom",
            of: rowsView && rowsView.element(),
            collision: "fit",
            offset: "-2 -2",
            boundaryOffset: "2 2"
        }
    }
});
var ColumnChooserView = _ui_grid_core_columns_view__WEBPACK_IMPORTED_MODULE_4__["ColumnsView"].inherit({
    _resizeCore: _core_utils_common__WEBPACK_IMPORTED_MODULE_2__["noop"],
    _isWinDevice: function() {
        return !!_core_devices__WEBPACK_IMPORTED_MODULE_9__["default"].real().win
    },
    _updateList: function(change) {
        var items;
        var $popupContent = this._popupContainer.$content();
        var isSelectMode = "select" === this.option("columnChooser.mode");
        var columnChooserList = this._columnChooserList;
        var chooserColumns = this._columnsController.getChooserColumns(isSelectMode);
        if (isSelectMode && columnChooserList && change && "selection" === change.changeType) {
            items = processItems(this, chooserColumns);
            for (var i = 0; i < items.length; i++) {
                var selected = items[i].selected;
                var id = items[i].id;
                if (id === change.columnIndex) {
                    if (selected) {
                        columnChooserList.selectItem(id, selected)
                    } else {
                        columnChooserList.unselectItem(id, selected)
                    }
                }
            }
        } else if (!isSelectMode || !columnChooserList || "full" === change) {
            this._popupContainer.$wrapper().toggleClass(this.addWidgetPrefix(COLUMN_CHOOSER_DRAG_CLASS), !isSelectMode).toggleClass(this.addWidgetPrefix(COLUMN_CHOOSER_SELECT_CLASS), isSelectMode);
            items = processItems(this, chooserColumns);
            this._renderTreeView($popupContent, items)
        }
    },
    _initializePopupContainer: function() {
        var that = this;
        var $element = that.element().addClass(that.addWidgetPrefix(COLUMN_CHOOSER_CLASS));
        var columnChooserOptions = that.option("columnChooser");
        var themeName = Object(_themes__WEBPACK_IMPORTED_MODULE_6__["current"])();
        var isGenericTheme = Object(_themes__WEBPACK_IMPORTED_MODULE_6__["isGeneric"])(themeName);
        var isMaterial = Object(_themes__WEBPACK_IMPORTED_MODULE_6__["isMaterial"])(themeName);
        var dxPopupOptions = {
            visible: false,
            shading: false,
            showCloseButton: false,
            dragEnabled: true,
            resizeEnabled: true,
            copyRootClassesToWrapper: true,
            _ignoreCopyRootClassesToWrapperDeprecation: true,
            toolbarItems: [{
                text: columnChooserOptions.title,
                toolbar: "top",
                location: isGenericTheme || isMaterial ? "before" : "center"
            }],
            position: that.getController("columnChooser").getPosition(),
            width: columnChooserOptions.width,
            height: columnChooserOptions.height,
            rtlEnabled: that.option("rtlEnabled"),
            onHidden: function() {
                if (that._isWinDevice()) {
                    Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])("body").removeClass(that.addWidgetPrefix(NOTOUCH_ACTION_CLASS))
                }
            },
            container: columnChooserOptions.container
        };
        if (isGenericTheme || isMaterial) {
            Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_12__["extend"])(dxPopupOptions, {
                showCloseButton: true
            })
        } else {
            dxPopupOptions.toolbarItems[dxPopupOptions.toolbarItems.length] = {
                shortcut: "cancel"
            }
        }
        if (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_11__["isDefined"])(this._popupContainer)) {
            that._popupContainer = that._createComponent($element, _popup__WEBPACK_IMPORTED_MODULE_10__["default"], dxPopupOptions);
            that._popupContainer.on("optionChanged", (function(args) {
                if ("visible" === args.name) {
                    that.renderCompleted.fire()
                }
            }))
        } else {
            this._popupContainer.option(dxPopupOptions)
        }
    },
    _renderCore: function(change) {
        if (this._popupContainer) {
            this._updateList(change)
        }
    },
    _renderTreeView: function($container, items) {
        var that = this;
        var columnChooser = this.option("columnChooser");
        var isSelectMode = "select" === columnChooser.mode;
        var treeViewConfig = {
            items: items,
            dataStructure: "plain",
            activeStateEnabled: true,
            focusStateEnabled: true,
            hoverStateEnabled: true,
            itemTemplate: "item",
            showCheckBoxesMode: "none",
            rootValue: null,
            searchEnabled: columnChooser.allowSearch,
            searchTimeout: columnChooser.searchTimeout,
            onItemRendered: function(e) {
                if (e.itemData.disableCheckBox) {
                    var $treeViewNode = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(e.itemElement).closest(TREEVIEW_NODE_SELECTOR);
                    var $checkBox;
                    if ($treeViewNode.length) {
                        $checkBox = $treeViewNode.find(CHECKBOX_SELECTOR);
                        if ($checkBox.length) {
                            var checkBoxInstance = $checkBox.data("dxCheckBox");
                            checkBoxInstance && checkBoxInstance.option("disabled", true)
                        }
                    }
                }
            }
        };
        var scrollableInstance = $container.find(".dx-scrollable").data("dxScrollable");
        var scrollTop = scrollableInstance && scrollableInstance.scrollTop();
        if (isSelectMode && !this._columnsController.isBandColumnsUsed()) {
            $container.addClass(this.addWidgetPrefix(COLUMN_CHOOSER_PLAIN_CLASS))
        }
        treeViewConfig.onContentReady = function(e) {
            Object(_core_utils_common__WEBPACK_IMPORTED_MODULE_2__["deferUpdate"])((function() {
                if (scrollTop) {
                    var scrollable = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(e.element).find(".dx-scrollable").data("dxScrollable");
                    scrollable && scrollable.scrollTo({
                        y: scrollTop
                    })
                }
                that.renderCompleted.fire()
            }))
        };
        if (this._isWinDevice()) {
            treeViewConfig.useNativeScrolling = false
        }
        Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_12__["extend"])(treeViewConfig, isSelectMode ? this._prepareSelectModeConfig() : this._prepareDragModeConfig());
        if (this._columnChooserList) {
            if (!treeViewConfig.searchEnabled) {
                treeViewConfig.searchValue = ""
            }
            this._columnChooserList.option(treeViewConfig)
        } else {
            this._columnChooserList = this._createComponent($container, _tree_view__WEBPACK_IMPORTED_MODULE_8__["default"], treeViewConfig);
            $container.addClass(this.addWidgetPrefix(COLUMN_CHOOSER_LIST_CLASS))
        }
    },
    _prepareDragModeConfig: function() {
        var columnChooserOptions = this.option("columnChooser");
        return {
            noDataText: columnChooserOptions.emptyPanelText,
            activeStateEnabled: false,
            focusStateEnabled: false,
            hoverStateEnabled: false,
            itemTemplate: function(data, index, item) {
                Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(item).text(data.text).parent().addClass(data.cssClass).addClass(COLUMN_CHOOSER_ITEM_CLASS)
            }
        }
    },
    _prepareSelectModeConfig: function() {
        var that = this;
        return {
            selectNodesRecursive: false,
            showCheckBoxesMode: "normal",
            onItemSelectionChanged: function(e) {
                var visibleColumns = that._columnsController.getVisibleColumns().filter((function(item) {
                    return !item.command
                }));
                var isLastColumnUnselected = 1 === visibleColumns.length && !e.itemData.selected;
                if (isLastColumnUnselected) {
                    e.component.selectItem(e.itemElement)
                } else {
                    setTimeout((function() {
                        that._columnsController.columnOption(e.itemData.id, "visible", e.itemData.selected)
                    }), CLICK_TIMEOUT)
                }
            }
        }
    },
    _columnOptionChanged: function(e) {
        var changeTypes = e.changeTypes;
        var optionNames = e.optionNames;
        var isSelectMode = "select" === this.option("columnChooser.mode");
        this.callBase(e);
        if (isSelectMode) {
            var needPartialRender = optionNames.visible && 1 === optionNames.length && void 0 !== e.columnIndex;
            var needFullRender = optionNames.showInColumnChooser || optionNames.caption || optionNames.visible || changeTypes.columns && optionNames.all;
            if (needPartialRender) {
                this.render(null, {
                    changeType: "selection",
                    columnIndex: e.columnIndex
                })
            } else if (needFullRender) {
                this.render(null, "full")
            }
        }
    },
    optionChanged: function(args) {
        switch (args.name) {
            case "columnChooser":
                this._initializePopupContainer();
                this.render(null, "full");
                break;
            default:
                this.callBase(args)
        }
    },
    getColumnElements: function() {
        var result = [];
        var $node;
        var isSelectMode = "select" === this.option("columnChooser.mode");
        var chooserColumns = this._columnsController.getChooserColumns(isSelectMode);
        var $content = this._popupContainer && this._popupContainer.$content();
        var $nodes = $content && $content.find(".dx-treeview-node");
        if ($nodes) {
            chooserColumns.forEach((function(column) {
                $node = $nodes.filter("[data-item-id = '" + column.index + "']");
                var item = $node.length ? $node.children("." + COLUMN_CHOOSER_ITEM_CLASS).get(0) : null;
                result.push(item)
            }))
        }
        return Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(result)
    },
    getName: function() {
        return "columnChooser"
    },
    getColumns: function() {
        return this._columnsController.getChooserColumns()
    },
    allowDragging: function(column, sourceLocation) {
        var columnVisible = column && column.allowHiding && ("columnChooser" !== sourceLocation || !column.visible && this._columnsController.isParentColumnVisible(column.index));
        return this.isColumnChooserVisible() && columnVisible
    },
    getBoundingRect: function() {
        var container = this._popupContainer && this._popupContainer.$overlayContent();
        if (container && container.is(":visible")) {
            var offset = container.offset();
            return {
                left: offset.left,
                top: offset.top,
                right: offset.left + Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getOuterWidth"])(container),
                bottom: offset.top + Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getOuterHeight"])(container)
            }
        }
        return null
    },
    showColumnChooser: function() {
        if (!this._popupContainer) {
            this._initializePopupContainer();
            this.render()
        }
        this._popupContainer.show();
        if (this._isWinDevice()) {
            Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])("body").addClass(this.addWidgetPrefix(NOTOUCH_ACTION_CLASS))
        }
    },
    hideColumnChooser: function() {
        if (this._popupContainer) {
            this._popupContainer.hide()
        }
    },
    isColumnChooserVisible: function() {
        var popupContainer = this._popupContainer;
        return popupContainer && popupContainer.option("visible")
    },
    publicMethods: function() {
        return ["showColumnChooser", "hideColumnChooser"]
    }
});
var columnChooserModule = {
    defaultOptions: function() {
        return {
            columnChooser: {
                enabled: false,
                allowSearch: false,
                searchTimeout: 500,
                mode: "dragAndDrop",
                width: 250,
                height: 260,
                title: _localization_message__WEBPACK_IMPORTED_MODULE_5__["default"].format("dxDataGrid-columnChooserTitle"),
                emptyPanelText: _localization_message__WEBPACK_IMPORTED_MODULE_5__["default"].format("dxDataGrid-columnChooserEmptyText"),
                container: void 0
            }
        }
    },
    controllers: {
        columnChooser: ColumnChooserController
    },
    views: {
        columnChooserView: ColumnChooserView
    },
    extenders: {
        views: {
            headerPanel: {
                _getToolbarItems: function() {
                    var items = this.callBase();
                    return this._appendColumnChooserItem(items)
                },
                _appendColumnChooserItem: function(items) {
                    var that = this;
                    var columnChooserEnabled = that.option("columnChooser.enabled");
                    if (columnChooserEnabled) {
                        var hintText = that.option("columnChooser.title");
                        var toolbarItem = {
                            widget: "dxButton",
                            options: {
                                icon: COLUMN_CHOOSER_ICON_NAME,
                                onClick: function() {
                                    that.component.getView("columnChooserView").showColumnChooser()
                                },
                                hint: hintText,
                                text: hintText,
                                onInitialized: function(e) {
                                    Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(e.element).addClass(that._getToolbarButtonClass(that.addWidgetPrefix(COLUMN_CHOOSER_BUTTON_CLASS)))
                                }
                            },
                            showText: "inMenu",
                            location: "after",
                            name: "columnChooserButton",
                            locateInMenu: "auto",
                            sortIndex: 40
                        };
                        items.push(toolbarItem)
                    }
                    return items
                },
                optionChanged: function(args) {
                    switch (args.name) {
                        case "columnChooser":
                            this._invalidate();
                            args.handled = true;
                            break;
                        default:
                            this.callBase(args)
                    }
                },
                isVisible: function() {
                    var columnChooserEnabled = this.option("columnChooser.enabled");
                    return this.callBase() || columnChooserEnabled
                }
            }
        },
        controllers: {
            columns: {
                allowMoveColumn: function(fromVisibleIndex, toVisibleIndex, sourceLocation, targetLocation) {
                    var columnChooserMode = this.option("columnChooser.mode");
                    var isMoveColumnDisallowed = "select" === columnChooserMode && "columnChooser" === targetLocation;
                    return isMoveColumnDisallowed ? false : this.callBase(fromVisibleIndex, toVisibleIndex, sourceLocation, targetLocation)
                }
            }
        }
    }
};


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.column_fixing.js":
/*!********************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.column_fixing.js ***!
  \********************************************************************************/
/*! exports provided: columnFixingModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "columnFixingModule", function() { return columnFixingModule; });
/* harmony import */ var _core_utils_size__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/utils/size */ "./node_modules/devextreme/esm/core/utils/size.js");
/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/renderer */ "./node_modules/devextreme/esm/core/renderer.js");
/* harmony import */ var _events_core_events_engine__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../events/core/events_engine */ "./node_modules/devextreme/esm/events/core/events_engine.js");
/* harmony import */ var _events_core_wheel__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../events/core/wheel */ "./node_modules/devextreme/esm/events/core/wheel.js");
/* harmony import */ var _localization_message__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../localization/message */ "./node_modules/devextreme/esm/localization/message.js");
/* harmony import */ var _grid_core_ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../grid_core/ui.grid_core.utils */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.utils.js");
/* harmony import */ var _core_utils_type__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../core/utils/type */ "./node_modules/devextreme/esm/core/utils/type.js");
/* harmony import */ var _core_utils_extend__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../core/utils/extend */ "./node_modules/devextreme/esm/core/utils/extend.js");
/* harmony import */ var _core_utils_iterator__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../core/utils/iterator */ "./node_modules/devextreme/esm/core/utils/iterator.js");
/* harmony import */ var _core_utils_browser__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../core/utils/browser */ "./node_modules/devextreme/esm/core/utils/browser.js");
/* harmony import */ var _core_utils_position__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../core/utils/position */ "./node_modules/devextreme/esm/core/utils/position.js");
/* harmony import */ var _animation_translator__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../animation/translator */ "./node_modules/devextreme/esm/animation/translator.js");
/* harmony import */ var _scroll_view_ui_scrollable__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../scroll_view/ui.scrollable */ "./node_modules/devextreme/esm/ui/scroll_view/ui.scrollable.js");
/**
 * DevExtreme (esm/ui/grid_core/ui.grid_core.column_fixing.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */













var CONTENT_CLASS = "content";
var CONTENT_FIXED_CLASS = "content-fixed";
var MASTER_DETAIL_CELL_CLASS = "dx-master-detail-cell";
var FIRST_CELL_CLASS = "dx-first-cell";
var LAST_CELL_CLASS = "dx-last-cell";
var HOVER_STATE_CLASS = "dx-state-hover";
var FIXED_COL_CLASS = "dx-col-fixed";
var FIXED_COLUMNS_CLASS = "dx-fixed-columns";
var POINTER_EVENTS_NONE_CLASS = "dx-pointer-events-none";
var COMMAND_TRANSPARENT = "transparent";
var GROUP_ROW_CLASS = "dx-group-row";
var getTransparentColumnIndex = function(fixedColumns) {
    var transparentColumnIndex = -1;
    Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_8__["each"])(fixedColumns, (function(index, column) {
        if (column.command === COMMAND_TRANSPARENT) {
            transparentColumnIndex = index;
            return false
        }
    }));
    return transparentColumnIndex
};
var normalizeColumnWidths = function(fixedColumns, widths, fixedWidths) {
    var fixedColumnIndex = 0;
    if (fixedColumns && widths && fixedWidths) {
        for (var i = 0; i < fixedColumns.length; i++) {
            if (fixedColumns[i].command === COMMAND_TRANSPARENT) {
                fixedColumnIndex += fixedColumns[i].colspan
            } else {
                if (widths[fixedColumnIndex] < fixedWidths[i]) {
                    widths[fixedColumnIndex] = fixedWidths[i]
                }
                fixedColumnIndex++
            }
        }
    }
    return widths
};
var baseFixedColumns = {
    init: function() {
        this.callBase();
        this._isFixedTableRendering = false;
        this._isFixedColumns = false
    },
    _createCol: function(column) {
        return this.callBase(column).toggleClass(FIXED_COL_CLASS, !!(this._isFixedTableRendering && (column.fixed || column.command && column.command !== COMMAND_TRANSPARENT)))
    },
    _correctColumnIndicesForFixedColumns: function(fixedColumns, change) {
        var transparentColumnIndex = getTransparentColumnIndex(fixedColumns);
        var transparentColspan = fixedColumns[transparentColumnIndex].colspan;
        var columnIndices = change && change.columnIndices;
        if (columnIndices) {
            change.columnIndices = columnIndices.map((function(columnIndices) {
                if (columnIndices) {
                    return columnIndices.map((function(columnIndex) {
                        if (columnIndex < transparentColumnIndex) {
                            return columnIndex
                        } else if (columnIndex >= transparentColumnIndex + transparentColspan) {
                            return columnIndex - transparentColspan + 1
                        }
                        return -1
                    })).filter((function(columnIndex) {
                        return columnIndex >= 0
                    }))
                }
            }))
        }
    },
    _partialUpdateFixedTable(fixedColumns) {
        var fixedTableElement = this._fixedTableElement;
        var transparentColumnIndex = getTransparentColumnIndex(fixedColumns);
        var transparentColumn = fixedColumns[transparentColumnIndex];
        var columnIndexOffset = this._columnsController.getColumnIndexOffset();
        var $rows = this._getRowElementsCore(fixedTableElement);
        var $colgroup = fixedTableElement.children("colgroup");
        $colgroup.replaceWith(this._createColGroup(fixedColumns));
        for (var i = 0; i < $rows.length; i++) {
            var cellElements = $rows[i].childNodes;
            var colIndex = columnIndexOffset + 1;
            for (var j = 0; j < cellElements.length; j++) {
                cellElements[j].setAttribute("aria-colindex", colIndex);
                if (j === transparentColumnIndex) {
                    cellElements[j].setAttribute("colspan", transparentColumn.colspan);
                    colIndex += transparentColumn.colspan
                } else {
                    colIndex++
                }
            }
        }
    },
    _renderTable: function(options) {
        var $fixedTable;
        var fixedColumns = this.getFixedColumns();
        this._isFixedColumns = !!fixedColumns.length;
        var $table = this.callBase(options);
        if (this._isFixedColumns) {
            var change = null === options || void 0 === options ? void 0 : options.change;
            this._isFixedTableRendering = true;
            if (null !== change && void 0 !== change && change.virtualColumnsScrolling && true !== this.option("scrolling.legacyMode")) {
                this._partialUpdateFixedTable(fixedColumns)
            } else {
                var columnIndices = null === change || void 0 === change ? void 0 : change.columnIndices;
                this._correctColumnIndicesForFixedColumns(fixedColumns, change);
                $fixedTable = this._createTable(fixedColumns);
                this._renderRows($fixedTable, Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_7__["extend"])({}, options, {
                    columns: fixedColumns
                }));
                this._updateContent($fixedTable, change);
                if (columnIndices) {
                    change.columnIndices = columnIndices
                }
            }
            this._isFixedTableRendering = false
        } else {
            this._fixedTableElement && this._fixedTableElement.parent().remove();
            this._fixedTableElement = null
        }
        return $table
    },
    _renderRow: function($table, options) {
        var fixedCorrection;
        var cells = options.row.cells;
        this.callBase.apply(this, arguments);
        if (this._isFixedTableRendering && cells && cells.length) {
            fixedCorrection = 0;
            var fixedCells = options.row.cells || [];
            cells = cells.slice();
            options.row.cells = cells;
            for (var i = 0; i < fixedCells.length; i++) {
                if (fixedCells[i].column && fixedCells[i].column.command === COMMAND_TRANSPARENT) {
                    fixedCorrection = (fixedCells[i].column.colspan || 1) - 1;
                    continue
                }
                cells[i + fixedCorrection] = fixedCells[i]
            }
        }
    },
    _createCell: function(options) {
        var that = this;
        var column = options.column;
        var columnCommand = column && column.command;
        var rowType = options.rowType;
        var $cell = that.callBase.apply(that, arguments);
        var fixedColumns;
        var prevFixedColumn;
        var transparentColumnIndex;
        if (that._isFixedTableRendering || "filter" === rowType) {
            fixedColumns = that.getFixedColumns();
            transparentColumnIndex = getTransparentColumnIndex(fixedColumns);
            prevFixedColumn = fixedColumns[transparentColumnIndex - 1]
        }
        if (that._isFixedTableRendering) {
            if (columnCommand === COMMAND_TRANSPARENT) {
                $cell.addClass(POINTER_EVENTS_NONE_CLASS).toggleClass(FIRST_CELL_CLASS, 0 === transparentColumnIndex || prevFixedColumn && "expand" === prevFixedColumn.command).toggleClass(LAST_CELL_CLASS, fixedColumns.length && transparentColumnIndex === fixedColumns.length - 1);
                if ("freeSpace" !== rowType) {
                    _grid_core_ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_5__["default"].setEmptyText($cell)
                }
            }
        } else if ("filter" === rowType) {
            $cell.toggleClass(FIRST_CELL_CLASS, options.columnIndex === transparentColumnIndex)
        }
        var isRowAltStyle = that.option("rowAlternationEnabled") && options.isAltRow;
        if (_core_utils_browser__WEBPACK_IMPORTED_MODULE_9__["default"].mozilla && options.column.fixed && "group" !== options.rowType && !isRowAltStyle) {
            $cell.addClass(FIXED_COL_CLASS)
        }
        return $cell
    },
    _wrapTableInScrollContainer: function() {
        var $scrollContainer = this.callBase.apply(this, arguments);
        if (this._isFixedTableRendering) {
            $scrollContainer.addClass(this.addWidgetPrefix(CONTENT_FIXED_CLASS))
        }
        return $scrollContainer
    },
    _renderCellContent: function($cell, options) {
        var isEmptyCell;
        var column = options.column;
        var isFixedTableRendering = this._isFixedTableRendering;
        var isGroupCell = "group" === options.rowType && Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isDefined"])(column.groupIndex);
        if (isFixedTableRendering && isGroupCell && !column.command && !column.groupCellTemplate) {
            $cell.css("pointerEvents", "none")
        }
        if (!isFixedTableRendering && this._isFixedColumns) {
            isEmptyCell = column.fixed || column.command && false !== column.fixed;
            if (isGroupCell) {
                isEmptyCell = false;
                if (options.row.summaryCells && options.row.summaryCells.length) {
                    var columns = this._columnsController.getVisibleColumns();
                    var alignByFixedColumnCellCount = this._getAlignByColumnCellCount ? this._getAlignByColumnCellCount(column.colspan, {
                        columns: columns,
                        row: options.row,
                        isFixed: true
                    }) : 0;
                    if (alignByFixedColumnCellCount > 0) {
                        var transparentColumnIndex = getTransparentColumnIndex(this._columnsController.getFixedColumns());
                        isEmptyCell = columns.length - alignByFixedColumnCellCount < transparentColumnIndex
                    }
                }
            }
            if (isEmptyCell) {
                if (column.command && "buttons" !== column.type || "group" === options.rowType) {
                    $cell.html("&nbsp;").addClass(column.cssClass);
                    return
                } else {
                    $cell.addClass("dx-hidden-cell")
                }
            }
        }
        if (column.command !== COMMAND_TRANSPARENT) {
            this.callBase($cell, options)
        }
    },
    _getCellElementsCore: function(rowIndex) {
        var cellElements = this.callBase.apply(this, arguments);
        var isGroupRow = cellElements.parent().hasClass(GROUP_ROW_CLASS);
        var headerRowIndex = "columnHeadersView" === this.name ? rowIndex : void 0;
        if (this._fixedTableElement && cellElements) {
            var fixedColumns = this.getFixedColumns(headerRowIndex);
            var fixedCellElements = this._getRowElements(this._fixedTableElement).eq(rowIndex).children("td");
            Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_8__["each"])(fixedCellElements, (columnIndex, cell) => {
                if (isGroupRow) {
                    if (cellElements[columnIndex] && "hidden" !== cell.style.visibility) {
                        cellElements[columnIndex] = cell
                    }
                } else {
                    var fixedColumn = fixedColumns[columnIndex];
                    if (fixedColumn) {
                        if (fixedColumn.command === COMMAND_TRANSPARENT) {
                            if (fixedCellElements.eq(columnIndex).hasClass(MASTER_DETAIL_CELL_CLASS)) {
                                cellElements[columnIndex] = cell || cellElements[columnIndex]
                            }
                        } else {
                            var fixedColumnIndex = this._columnsController.getVisibleIndexByColumn(fixedColumn, headerRowIndex);
                            cellElements[fixedColumnIndex] = cell || cellElements[fixedColumnIndex]
                        }
                    }
                }
            })
        }
        return cellElements
    },
    getColumnWidths: function() {
        var fixedWidths;
        var result = this.callBase();
        var fixedColumns = this.getFixedColumns();
        if (this._fixedTableElement && result.length) {
            fixedWidths = this.callBase(this._fixedTableElement)
        }
        return normalizeColumnWidths(fixedColumns, result, fixedWidths)
    },
    getTableElement: function() {
        var tableElement = this._isFixedTableRendering ? this._fixedTableElement : this.callBase();
        return tableElement
    },
    setTableElement: function(tableElement) {
        if (this._isFixedTableRendering) {
            this._fixedTableElement = tableElement.addClass(POINTER_EVENTS_NONE_CLASS)
        } else {
            this.callBase(tableElement)
        }
    },
    getColumns: function(rowIndex, $tableElement) {
        $tableElement = $tableElement || this.getTableElement();
        if (this._isFixedTableRendering || $tableElement && $tableElement.closest("table").parent("." + this.addWidgetPrefix(CONTENT_FIXED_CLASS)).length) {
            return this.getFixedColumns(rowIndex)
        }
        return this.callBase(rowIndex, $tableElement)
    },
    getRowIndex: function($row) {
        var $fixedTable = this._fixedTableElement;
        if ($fixedTable && $fixedTable.find($row).length) {
            return this._getRowElements($fixedTable).index($row)
        }
        return this.callBase($row)
    },
    getTableElements: function() {
        var result = this.callBase.apply(this, arguments);
        if (this._fixedTableElement) {
            result = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])([result.get(0), this._fixedTableElement.get(0)])
        }
        return result
    },
    getFixedColumns: function(rowIndex) {
        return this._columnsController.getFixedColumns(rowIndex)
    },
    getFixedColumnsOffset: function() {
        var offset = {
            left: 0,
            right: 0
        };
        var $transparentColumn;
        if (this._fixedTableElement) {
            $transparentColumn = this.getTransparentColumnElement();
            var positionTransparentColumn = $transparentColumn.position();
            offset = {
                left: positionTransparentColumn.left,
                right: Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getOuterWidth"])(this.element(), true) - (Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getOuterWidth"])($transparentColumn, true) + positionTransparentColumn.left)
            }
        }
        return offset
    },
    getTransparentColumnElement: function() {
        return this._fixedTableElement && this._fixedTableElement.find("." + POINTER_EVENTS_NONE_CLASS).first()
    },
    getFixedTableElement: function() {
        return this._fixedTableElement
    },
    isFixedColumns: function() {
        return this._isFixedColumns
    },
    _resizeCore: function() {
        this.callBase();
        this.synchronizeRows()
    },
    setColumnWidths: function(options) {
        var columns;
        var visibleColumns = this._columnsController.getVisibleColumns();
        var widths = options.widths;
        var isWidthsSynchronized = widths && widths.length && Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isDefined"])(visibleColumns[0].visibleWidth);
        var optionNames = options.optionNames;
        var isColumnWidthChanged = optionNames && optionNames.width;
        var useVisibleColumns = false;
        this.callBase.apply(this, arguments);
        if (this._fixedTableElement) {
            var hasAutoWidth = widths && widths.some((function(width) {
                return "auto" === width
            }));
            useVisibleColumns = hasAutoWidth && (!isWidthsSynchronized || !this.isScrollbarVisible(true));
            if (useVisibleColumns) {
                columns = visibleColumns
            }
            this.callBase(Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_7__["extend"])({}, options, {
                $tableElement: this._fixedTableElement,
                columns: columns,
                fixed: true
            }))
        }
        if (isWidthsSynchronized || isColumnWidthChanged && this.option("wordWrapEnabled")) {
            this.synchronizeRows()
        }
    },
    _createColGroup: function(columns) {
        if (this._isFixedTableRendering && !this.option("columnAutoWidth")) {
            var visibleColumns = this._columnsController.getVisibleColumns();
            var useVisibleColumns = visibleColumns.filter((function(column) {
                return !column.width
            })).length;
            if (useVisibleColumns) {
                columns = visibleColumns
            }
        }
        return this.callBase(columns)
    },
    _getClientHeight: function(element) {
        var boundingClientRectElement = element.getBoundingClientRect && Object(_core_utils_position__WEBPACK_IMPORTED_MODULE_10__["getBoundingRect"])(element);
        return boundingClientRectElement && boundingClientRectElement.height ? boundingClientRectElement.height : element.clientHeight
    },
    synchronizeRows: function() {
        var rowHeights = [];
        var fixedRowHeights = [];
        var rowIndex;
        var $rowElements;
        var $fixedRowElements;
        var $contentElement;
        if (this._isFixedColumns && this._tableElement && this._fixedTableElement) {
            var heightTable = this._getClientHeight(this._tableElement.get(0));
            var heightFixedTable = this._getClientHeight(this._fixedTableElement.get(0));
            $rowElements = this._getRowElements(this._tableElement);
            $fixedRowElements = this._getRowElements(this._fixedTableElement);
            $contentElement = this._findContentElement();
            if (heightTable !== heightFixedTable) {
                $contentElement && $contentElement.css("height", heightTable);
                $rowElements.css("height", "");
                $fixedRowElements.css("height", "");
                for (rowIndex = 0; rowIndex < $rowElements.length; rowIndex++) {
                    rowHeights.push(this._getClientHeight($rowElements.get(rowIndex)));
                    fixedRowHeights.push(this._getClientHeight($fixedRowElements.get(rowIndex)))
                }
                for (rowIndex = 0; rowIndex < $rowElements.length; rowIndex++) {
                    var rowHeight = rowHeights[rowIndex];
                    var fixedRowHeight = fixedRowHeights[rowIndex];
                    if (rowHeight > fixedRowHeight) {
                        $fixedRowElements.eq(rowIndex).css("height", rowHeight)
                    } else if (rowHeight < fixedRowHeight) {
                        $rowElements.eq(rowIndex).css("height", fixedRowHeight)
                    }
                }
                $contentElement && $contentElement.css("height", "")
            }
        }
    },
    setScrollerSpacing: function(width) {
        var rtlEnabled = this.option("rtlEnabled");
        this.callBase(width);
        this.element().children("." + this.addWidgetPrefix(CONTENT_FIXED_CLASS)).css({
            paddingLeft: rtlEnabled ? width : "",
            paddingRight: !rtlEnabled ? width : ""
        })
    }
};
var ColumnHeadersViewFixedColumnsExtender = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_7__["extend"])({}, baseFixedColumns, {
    _getRowVisibleColumns: function(rowIndex) {
        if (this._isFixedTableRendering) {
            return this.getFixedColumns(rowIndex)
        }
        return this.callBase(rowIndex)
    },
    getContextMenuItems: function(options) {
        var column = options.column;
        var columnFixingOptions = this.option("columnFixing");
        var items = this.callBase(options);
        if (options.row && "header" === options.row.rowType) {
            if (true === columnFixingOptions.enabled && column && column.allowFixing) {
                var onItemClick = params => {
                    switch (params.itemData.value) {
                        case "none":
                            this._columnsController.columnOption(column.index, "fixed", false);
                            break;
                        case "left":
                            this._columnsController.columnOption(column.index, {
                                fixed: true,
                                fixedPosition: "left"
                            });
                            break;
                        case "right":
                            this._columnsController.columnOption(column.index, {
                                fixed: true,
                                fixedPosition: "right"
                            })
                    }
                };
                items = items || [];
                items.push({
                    text: columnFixingOptions.texts.fix,
                    beginGroup: true,
                    items: [{
                        text: columnFixingOptions.texts.leftPosition,
                        value: "left",
                        disabled: column.fixed && (!column.fixedPosition || "left" === column.fixedPosition),
                        onItemClick: onItemClick
                    }, {
                        text: columnFixingOptions.texts.rightPosition,
                        value: "right",
                        disabled: column.fixed && "right" === column.fixedPosition,
                        onItemClick: onItemClick
                    }]
                }, {
                    text: columnFixingOptions.texts.unfix,
                    value: "none",
                    disabled: !column.fixed,
                    onItemClick: onItemClick
                })
            }
        }
        return items
    },
    getFixedColumnElements: function(rowIndex) {
        if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isDefined"])(rowIndex)) {
            return this._fixedTableElement && this._getRowElements(this._fixedTableElement).eq(rowIndex).children()
        }
        var columnElements = this.getColumnElements();
        var $transparentColumnElement = this.getTransparentColumnElement();
        if (columnElements && $transparentColumnElement && $transparentColumnElement.length) {
            var transparentColumnIndex = getTransparentColumnIndex(this.getFixedColumns());
            columnElements.splice(transparentColumnIndex, $transparentColumnElement.get(0).colSpan, $transparentColumnElement.get(0))
        }
        return columnElements
    },
    getColumnWidths: function() {
        var fixedWidths;
        var result = this.callBase();
        var $fixedColumnElements = this.getFixedColumnElements();
        var fixedColumns = this.getFixedColumns();
        if (this._fixedTableElement) {
            if ($fixedColumnElements && $fixedColumnElements.length) {
                fixedWidths = this._getWidths($fixedColumnElements)
            } else {
                fixedWidths = this.callBase(this._fixedTableElement)
            }
        }
        return normalizeColumnWidths(fixedColumns, result, fixedWidths)
    }
});
var RowsViewFixedColumnsExtender = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_7__["extend"])({}, baseFixedColumns, {
    _detachHoverEvents: function() {
        this._fixedTableElement && _events_core_events_engine__WEBPACK_IMPORTED_MODULE_2__["default"].off(this._fixedTableElement, "mouseover mouseout", ".dx-data-row");
        this._tableElement && _events_core_events_engine__WEBPACK_IMPORTED_MODULE_2__["default"].off(this._tableElement, "mouseover mouseout", ".dx-data-row")
    },
    _attachHoverEvents: function() {
        var that = this;
        var attachHoverEvent = function($table) {
            _events_core_events_engine__WEBPACK_IMPORTED_MODULE_2__["default"].on($table, "mouseover mouseout", ".dx-data-row", that.createAction((function(args) {
                var event = args.event;
                var rowIndex = that.getRowIndex(Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(event.target).closest(".dx-row"));
                var isHover = "mouseover" === event.type;
                if (rowIndex >= 0) {
                    that._tableElement && that._getRowElements(that._tableElement).eq(rowIndex).toggleClass(HOVER_STATE_CLASS, isHover);
                    that._fixedTableElement && that._getRowElements(that._fixedTableElement).eq(rowIndex).toggleClass(HOVER_STATE_CLASS, isHover)
                }
            })))
        };
        if (that._fixedTableElement && that._tableElement) {
            attachHoverEvent(that._fixedTableElement);
            attachHoverEvent(that._tableElement)
        }
    },
    _findContentElement: function() {
        var that = this;
        var $content;
        var scrollTop;
        var contentClass = that.addWidgetPrefix(CONTENT_CLASS);
        var element = that.element();
        var scrollDelay = _core_utils_browser__WEBPACK_IMPORTED_MODULE_9__["default"].mozilla ? 60 : 0;
        if (element && that._isFixedTableRendering) {
            $content = element.children("." + contentClass);
            var scrollable = that.getScrollable();
            if (!$content.length && scrollable) {
                $content = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])("<div>").addClass(contentClass);
                _events_core_events_engine__WEBPACK_IMPORTED_MODULE_2__["default"].on($content, "scroll", (function(e) {
                    clearTimeout(that._fixedScrollTimeout);
                    that._fixedScrollTimeout = setTimeout((function() {
                        scrollTop = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(e.target).scrollTop();
                        scrollable.scrollTo({
                            y: scrollTop
                        })
                    }), scrollDelay)
                }));
                _events_core_events_engine__WEBPACK_IMPORTED_MODULE_2__["default"].on($content, _events_core_wheel__WEBPACK_IMPORTED_MODULE_3__["name"], (function(e) {
                    var $nearestScrollable = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(e.target).closest(".dx-scrollable");
                    var shouldScroll = false;
                    if (scrollable && scrollable.$element().is($nearestScrollable)) {
                        shouldScroll = true
                    } else {
                        var nearestScrollableInstance = $nearestScrollable.length && _scroll_view_ui_scrollable__WEBPACK_IMPORTED_MODULE_12__["default"].getInstance($nearestScrollable.get(0));
                        var nearestScrollableHasVerticalScrollbar = nearestScrollableInstance && nearestScrollableInstance.scrollHeight() - nearestScrollableInstance.clientHeight() > 0;
                        shouldScroll = nearestScrollableInstance && !nearestScrollableHasVerticalScrollbar
                    }
                    if (shouldScroll) {
                        scrollTop = scrollable.scrollTop();
                        scrollable.scrollTo({
                            y: scrollTop - e.delta
                        });
                        if (scrollable.scrollTop() > 0 && scrollable.scrollTop() + scrollable.clientHeight() < scrollable.scrollHeight() + that.getScrollbarWidth()) {
                            return false
                        }
                    }
                }));
                $content.appendTo(element)
            }
            return $content
        }
        return that.callBase()
    },
    _updateScrollable: function() {
        this.callBase();
        var scrollable = this.getScrollable();
        if (null !== scrollable && void 0 !== scrollable && scrollable._disposed) {
            return
        }
        var scrollTop = scrollable && scrollable.scrollOffset().top;
        this._updateFixedTablePosition(scrollTop)
    },
    _renderContent: function(contentElement, tableElement) {
        if (this._isFixedTableRendering) {
            return contentElement.empty().addClass(this.addWidgetPrefix(CONTENT_CLASS) + " " + this.addWidgetPrefix(CONTENT_FIXED_CLASS)).append(tableElement)
        }
        return this.callBase(contentElement, tableElement)
    },
    _getGroupCellOptions: function(options) {
        if (this._isFixedTableRendering) {
            return this.callBase(Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_7__["extend"])({}, options, {
                columns: this._columnsController.getVisibleColumns()
            }))
        }
        return this.callBase(options)
    },
    _renderGroupedCells: function($row, options) {
        return this.callBase($row, Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_7__["extend"])({}, options, {
            columns: this._columnsController.getVisibleColumns()
        }))
    },
    _renderGroupSummaryCells: function($row, options) {
        if (this._isFixedTableRendering) {
            this.callBase($row, Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_7__["extend"])({}, options, {
                columns: this._columnsController.getVisibleColumns()
            }))
        } else {
            this.callBase($row, options)
        }
    },
    _hasAlignByColumnSummaryItems: function(columnIndex, options) {
        var result = this.callBase.apply(this, arguments);
        var column = options.columns[columnIndex];
        if (options.isFixed) {
            return column.fixed && (result || "right" === column.fixedPosition)
        }
        return result && (!this._isFixedColumns || !column.fixed)
    },
    _renderGroupSummaryCellsCore: function($groupCell, options, groupCellColSpan, alignByColumnCellCount) {
        var alignByFixedColumnCellCount;
        if (this._isFixedTableRendering) {
            options.isFixed = true;
            alignByFixedColumnCellCount = this._getAlignByColumnCellCount(groupCellColSpan, options);
            options.isFixed = false;
            var startColumnIndex = options.columns.length - alignByFixedColumnCellCount;
            options = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_7__["extend"])({}, options, {
                columns: this.getFixedColumns()
            });
            var transparentColumnIndex = getTransparentColumnIndex(options.columns);
            if (startColumnIndex < transparentColumnIndex) {
                alignByFixedColumnCellCount -= options.columns[transparentColumnIndex].colspan - 1 || 0;
                groupCellColSpan -= options.columns[transparentColumnIndex].colspan - 1 || 0
            } else if (alignByColumnCellCount > 0) {
                $groupCell.css("visibility", "hidden")
            }
            alignByColumnCellCount = alignByFixedColumnCellCount
        }
        this.callBase($groupCell, options, groupCellColSpan, alignByColumnCellCount)
    },
    _getSummaryCellIndex: function(columnIndex, columns) {
        if (this._isFixedTableRendering) {
            var transparentColumnIndex = getTransparentColumnIndex(columns);
            if (columnIndex > transparentColumnIndex) {
                columnIndex += columns[transparentColumnIndex].colspan - 1
            }
            return columnIndex
        }
        return this.callBase.apply(this, arguments)
    },
    _renderCore: function(change) {
        this._detachHoverEvents();
        this.callBase(change);
        var isFixedColumns = this._isFixedColumns;
        this.element().toggleClass(FIXED_COLUMNS_CLASS, isFixedColumns);
        if (this.option("hoverStateEnabled") && isFixedColumns) {
            this._attachHoverEvents()
        }
    },
    setRowsOpacity: function(columnIndex, value) {
        this.callBase(columnIndex, value);
        var $rows = this._getRowElements(this._fixedTableElement);
        this._setRowsOpacityCore($rows, this.getFixedColumns(), columnIndex, value)
    },
    optionChanged: function(args) {
        this.callBase(args);
        if ("hoverStateEnabled" === args.name && this._isFixedColumns) {
            args.value ? this._attachHoverEvents() : this._detachHoverEvents()
        }
    },
    getCellIndex: function($cell) {
        var $fixedTable = this._fixedTableElement;
        var cellIndex = 0;
        if ($fixedTable && $cell.is("td") && $cell.closest($fixedTable).length) {
            var columns = this.getFixedColumns();
            Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_8__["each"])(columns, (function(index, column) {
                if (index === $cell[0].cellIndex) {
                    return false
                }
                if (column.colspan) {
                    cellIndex += column.colspan;
                    return
                }
                cellIndex++
            }));
            return cellIndex
        }
        return this.callBase.apply(this, arguments)
    },
    _updateFixedTablePosition: function(scrollTop, needFocus) {
        if (this._fixedTableElement && this._tableElement) {
            var $focusedElement;
            var editorFactory = this.getController("editorFactory");
            this._fixedTableElement.parent().scrollTop(scrollTop);
            if (needFocus && editorFactory) {
                $focusedElement = editorFactory.focus();
                $focusedElement && editorFactory.focus($focusedElement)
            }
        }
    },
    setScrollerSpacing: function(vWidth, hWidth) {
        var styles = {
            marginBottom: 0
        };
        var $fixedContent = this.element().children("." + this.addWidgetPrefix(CONTENT_FIXED_CLASS));
        if ($fixedContent.length && this._fixedTableElement) {
            $fixedContent.css(styles);
            this._fixedTableElement.css(styles);
            styles[this.option("rtlEnabled") ? "marginLeft" : "marginRight"] = vWidth;
            styles.marginBottom = hWidth;
            var useNativeScrolling = this._scrollable && this._scrollable.option("useNative");
            (useNativeScrolling ? $fixedContent : this._fixedTableElement).css(styles)
        }
    },
    _getElasticScrollTop: function(e) {
        var elasticScrollTop = 0;
        if (e.scrollOffset.top < 0) {
            elasticScrollTop = -e.scrollOffset.top
        } else if (e.reachedBottom) {
            var $scrollableContent = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(this._findContentElement());
            var $scrollableContainer = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(e.component.container());
            var maxScrollTop = Math.max($scrollableContent.get(0).clientHeight - $scrollableContainer.get(0).clientHeight, 0);
            elasticScrollTop = maxScrollTop - e.scrollOffset.top
        }
        return Math.floor(elasticScrollTop)
    },
    _applyElasticScrolling: function(e) {
        if (this._fixedTableElement) {
            var elasticScrollTop = this._getElasticScrollTop(e);
            if (0 !== Math.ceil(elasticScrollTop)) {
                Object(_animation_translator__WEBPACK_IMPORTED_MODULE_11__["move"])(this._fixedTableElement, {
                    top: elasticScrollTop
                })
            } else {
                this._fixedTableElement.css("transform", "")
            }
        }
    },
    _handleScroll: function(e) {
        this._updateFixedTablePosition(e.scrollOffset.top, true);
        this._applyElasticScrolling(e);
        this.callBase(e)
    },
    _updateContentPosition: function(isRender) {
        this.callBase.apply(this, arguments);
        if (!isRender) {
            this._updateFixedTablePosition(this._scrollTop)
        }
    },
    _afterRowPrepared: function(e) {
        if (this._isFixedTableRendering) {
            return
        }
        this.callBase(e)
    },
    _scrollToElement: function($element) {
        this.callBase($element, this.getFixedColumnsOffset())
    },
    dispose: function() {
        this.callBase.apply(this, arguments);
        clearTimeout(this._fixedScrollTimeout)
    }
});
var FooterViewFixedColumnsExtender = baseFixedColumns;
var columnFixingModule = {
    defaultOptions: function() {
        return {
            columnFixing: {
                enabled: false,
                texts: {
                    fix: _localization_message__WEBPACK_IMPORTED_MODULE_4__["default"].format("dxDataGrid-columnFixingFix"),
                    unfix: _localization_message__WEBPACK_IMPORTED_MODULE_4__["default"].format("dxDataGrid-columnFixingUnfix"),
                    leftPosition: _localization_message__WEBPACK_IMPORTED_MODULE_4__["default"].format("dxDataGrid-columnFixingLeftPosition"),
                    rightPosition: _localization_message__WEBPACK_IMPORTED_MODULE_4__["default"].format("dxDataGrid-columnFixingRightPosition")
                }
            }
        }
    },
    extenders: {
        views: {
            columnHeadersView: ColumnHeadersViewFixedColumnsExtender,
            rowsView: RowsViewFixedColumnsExtender,
            footerView: FooterViewFixedColumnsExtender
        },
        controllers: function() {
            var normalizeColumnIndicesByPoints = function(columns, fixedColumns, pointsByColumns) {
                var transparentColumnIndex = getTransparentColumnIndex(fixedColumns);
                var correctIndex = columns.length - fixedColumns.length;
                Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_8__["each"])(pointsByColumns, (function(_, point) {
                    if (point.index > transparentColumnIndex) {
                        point.columnIndex += correctIndex;
                        point.index += correctIndex
                    }
                }));
                return pointsByColumns
            };
            return {
                draggingHeader: {
                    _generatePointsByColumns: function(options) {
                        var visibleColumns = options.columns;
                        var targetDraggingPanel = options.targetDraggingPanel;
                        if (targetDraggingPanel && "headers" === targetDraggingPanel.getName() && targetDraggingPanel.isFixedColumns()) {
                            if (options.sourceColumn.fixed) {
                                if (!options.rowIndex) {
                                    options.columnElements = targetDraggingPanel.getFixedColumnElements(0)
                                }
                                options.columns = targetDraggingPanel.getFixedColumns(options.rowIndex);
                                var pointsByColumns = this.callBase(options);
                                normalizeColumnIndicesByPoints(visibleColumns, options.columns, pointsByColumns);
                                return pointsByColumns
                            }
                        }
                        return this.callBase(options)
                    },
                    _pointCreated: function(point, columns, location, sourceColumn) {
                        var result = this.callBase.apply(this, arguments);
                        var targetColumn = columns[point.columnIndex];
                        var $transparentColumn = this._columnHeadersView.getTransparentColumnElement();
                        if (!result && "headers" === location && $transparentColumn && $transparentColumn.length) {
                            var boundingRect = Object(_core_utils_position__WEBPACK_IMPORTED_MODULE_10__["getBoundingRect"])($transparentColumn.get(0));
                            if (sourceColumn && sourceColumn.fixed) {
                                return "right" === sourceColumn.fixedPosition ? point.x < boundingRect.right : point.x > boundingRect.left
                            } else {
                                if (targetColumn && targetColumn.fixed && "right" !== targetColumn.fixedPosition) {
                                    return true
                                }
                                return point.x < boundingRect.left || point.x > boundingRect.right
                            }
                        }
                        return result
                    }
                },
                columnsResizer: {
                    _generatePointsByColumns: function() {
                        var that = this;
                        var columnsController = that._columnsController;
                        var columns = columnsController && that._columnsController.getVisibleColumns();
                        var fixedColumns = columnsController && that._columnsController.getFixedColumns();
                        var cells = that._columnHeadersView.getFixedColumnElements();
                        var pointsByFixedColumns = [];
                        that.callBase();
                        if (cells && cells.length > 0) {
                            pointsByFixedColumns = _grid_core_ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_5__["default"].getPointsByColumns(cells, (function(point) {
                                return that._pointCreated(point, cells.length, fixedColumns)
                            }));
                            that._pointsByFixedColumns = normalizeColumnIndicesByPoints(columns, fixedColumns, pointsByFixedColumns)
                        }
                    },
                    _pointCreated: function(point, cellsLength, columns) {
                        var isWidgetResizingMode = "widget" === this.option("columnResizingMode");
                        if (point.index > 0 && point.index < cellsLength) {
                            var currentColumn = columns[point.columnIndex - 1] || {};
                            var nextColumn = columns[point.columnIndex] || {};
                            if (currentColumn.fixed || nextColumn.fixed) {
                                point.columnIndex -= 1;
                                return !((currentColumn.allowResizing || currentColumn.command === COMMAND_TRANSPARENT) && (isWidgetResizingMode || nextColumn.allowResizing || nextColumn.command === COMMAND_TRANSPARENT))
                            }
                        }
                        return this.callBase.apply(this, arguments)
                    },
                    _getTargetPoint: function(pointsByColumns, currentX, deltaX) {
                        var $transparentColumn = this._columnHeadersView.getTransparentColumnElement();
                        if ($transparentColumn && $transparentColumn.length) {
                            var boundingRect = Object(_core_utils_position__WEBPACK_IMPORTED_MODULE_10__["getBoundingRect"])($transparentColumn.get(0));
                            if (currentX <= boundingRect.left || currentX >= boundingRect.right) {
                                return this.callBase(this._pointsByFixedColumns, currentX, deltaX)
                            }
                        }
                        return this.callBase(pointsByColumns, currentX, deltaX)
                    }
                }
            }
        }()
    }
};


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.column_headers.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.column_headers.js ***!
  \*********************************************************************************/
/*! exports provided: columnHeadersModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "columnHeadersModule", function() { return columnHeadersModule; });
/* harmony import */ var _core_utils_size__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/utils/size */ "./node_modules/devextreme/esm/core/utils/size.js");
/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/renderer */ "./node_modules/devextreme/esm/core/renderer.js");
/* harmony import */ var _events_core_events_engine__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../events/core/events_engine */ "./node_modules/devextreme/esm/events/core/events_engine.js");
/* harmony import */ var _ui_grid_core_columns_view__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ui.grid_core.columns_view */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.columns_view.js");
/* harmony import */ var _localization_message__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../localization/message */ "./node_modules/devextreme/esm/localization/message.js");
/* harmony import */ var _core_utils_type__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core/utils/type */ "./node_modules/devextreme/esm/core/utils/type.js");
/* harmony import */ var _core_utils_iterator__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../core/utils/iterator */ "./node_modules/devextreme/esm/core/utils/iterator.js");
/* harmony import */ var _core_utils_extend__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../core/utils/extend */ "./node_modules/devextreme/esm/core/utils/extend.js");
/* harmony import */ var _ui_grid_core_accessibility__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./ui.grid_core.accessibility */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.accessibility.js");
/**
 * DevExtreme (esm/ui/grid_core/ui.grid_core.column_headers.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */









var CELL_CONTENT_CLASS = "text-content";
var HEADERS_CLASS = "headers";
var NOWRAP_CLASS = "nowrap";
var ROW_CLASS_SELECTOR = ".dx-row";
var HEADER_ROW_CLASS = "dx-header-row";
var COLUMN_LINES_CLASS = "dx-column-lines";
var CONTEXT_MENU_SORT_ASC_ICON = "context-menu-sort-asc";
var CONTEXT_MENU_SORT_DESC_ICON = "context-menu-sort-desc";
var CONTEXT_MENU_SORT_NONE_ICON = "context-menu-sort-none";
var CELL_FOCUS_DISABLED_CLASS = "dx-cell-focus-disabled";
var VISIBILITY_HIDDEN_CLASS = "dx-visibility-hidden";
var TEXT_CONTENT_ALIGNMENT_CLASS_PREFIX = "dx-text-content-alignment-";
var SORT_INDICATOR_CLASS = "dx-sort-indicator";
var SORT_INDEX_INDICATOR_CLASS = "dx-sort-index-indicator";
var HEADER_FILTER_CLASS_SELECTOR = ".dx-header-filter";
var HEADER_FILTER_INDICATOR_CLASS = "dx-header-filter-indicator";
var MULTI_ROW_HEADER_CLASS = "dx-header-multi-row";
var columnHeadersModule = {
    defaultOptions: function() {
        return {
            showColumnHeaders: true,
            cellHintEnabled: true
        }
    },
    views: {
        columnHeadersView: _ui_grid_core_columns_view__WEBPACK_IMPORTED_MODULE_3__["ColumnsView"].inherit(function() {
            var createCellContent = function(that, $cell, options) {
                var $cellContent = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])("<div>").addClass(that.addWidgetPrefix(CELL_CONTENT_CLASS));
                that.setAria("role", "presentation", $cellContent);
                addCssClassesToCellContent(that, $cell, options.column, $cellContent);
                var showColumnLines = that.option("showColumnLines");
                var contentAlignment = that.getController("columns").getHeaderContentAlignment(options.column.alignment);
                return $cellContent[showColumnLines || "right" === contentAlignment ? "appendTo" : "prependTo"]($cell)
            };

            function addCssClassesToCellContent(that, $cell, column, $cellContent) {
                var $indicatorElements = that._getIndicatorElements($cell, true);
                var $visibleIndicatorElements = that._getIndicatorElements($cell);
                var indicatorCount = $indicatorElements && $indicatorElements.length;
                var columnAlignment = that._getColumnAlignment(column.alignment);
                var sortIndicatorClassName = ".".concat(that._getIndicatorClassName("sort"));
                var sortIndexIndicatorClassName = ".".concat(that._getIndicatorClassName("sortIndex"));
                var $sortIndicator = $visibleIndicatorElements.filter(sortIndicatorClassName);
                var $sortIndexIndicator = $visibleIndicatorElements.children().filter(sortIndexIndicatorClassName);
                $cellContent = $cellContent || $cell.children("." + that.addWidgetPrefix(CELL_CONTENT_CLASS));
                $cellContent.toggleClass(TEXT_CONTENT_ALIGNMENT_CLASS_PREFIX + columnAlignment, indicatorCount > 0).toggleClass(TEXT_CONTENT_ALIGNMENT_CLASS_PREFIX + ("left" === columnAlignment ? "right" : "left"), indicatorCount > 0 && "center" === column.alignment).toggleClass(SORT_INDICATOR_CLASS, !!$sortIndicator.length).toggleClass(SORT_INDEX_INDICATOR_CLASS, !!$sortIndexIndicator.length).toggleClass(HEADER_FILTER_INDICATOR_CLASS, !!$visibleIndicatorElements.filter("." + that._getIndicatorClassName("headerFilter")).length)
            }
            return {
                _createTable: function() {
                    var $table = this.callBase.apply(this, arguments);
                    _events_core_events_engine__WEBPACK_IMPORTED_MODULE_2__["default"].on($table, "mousedown selectstart", this.createAction((function(e) {
                        var event = e.event;
                        if (event.shiftKey) {
                            event.preventDefault()
                        }
                    })));
                    return $table
                },
                _isLegacyKeyboardNavigation() {
                    return this.option("useLegacyKeyboardNavigation")
                },
                _getDefaultTemplate: function(column) {
                    var that = this;
                    return function($container, options) {
                        var $content = column.command ? $container : createCellContent(that, $container, options);
                        var caption = "expand" !== column.command && column.caption;
                        if (caption) {
                            $content.text(caption)
                        } else if (column.command) {
                            $container.html("&nbsp;")
                        }
                    }
                },
                _getHeaderTemplate: function(column) {
                    return column.headerCellTemplate || {
                        allowRenderToDetachedContainer: true,
                        render: this._getDefaultTemplate(column)
                    }
                },
                _processTemplate: function(template, options) {
                    var that = this;
                    var resultTemplate;
                    var column = options.column;
                    var renderingTemplate = that.callBase(template);
                    if ("header" === options.rowType && renderingTemplate && column.headerCellTemplate && !column.command) {
                        resultTemplate = {
                            render: function(options) {
                                var $content = createCellContent(that, options.container, options.model);
                                renderingTemplate.render(Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_7__["extend"])({}, options, {
                                    container: $content
                                }))
                            }
                        }
                    } else {
                        resultTemplate = renderingTemplate
                    }
                    return resultTemplate
                },
                _handleDataChanged: function(e) {
                    if ("refresh" !== e.changeType) {
                        return
                    }
                    if (this._isGroupingChanged || this._requireReady) {
                        this._isGroupingChanged = false;
                        this.render()
                    }
                },
                _renderCell: function($row, options) {
                    var $cell = this.callBase($row, options);
                    if ("header" === options.row.rowType) {
                        $cell.addClass(CELL_FOCUS_DISABLED_CLASS);
                        if (!this._isLegacyKeyboardNavigation()) {
                            if (options.column && !options.column.type) {
                                $cell.attr("tabindex", this.option("tabindex") || 0)
                            }
                        }
                    }
                    return $cell
                },
                _setCellAriaAttributes: function($cell, cellOptions) {
                    this.callBase($cell, cellOptions);
                    if ("header" === cellOptions.rowType) {
                        this.setAria("role", "columnheader", $cell);
                        if (cellOptions.column && !cellOptions.column.command && !cellOptions.column.isBand) {
                            $cell.attr("id", cellOptions.column.headerId);
                            this.setAria("label", _localization_message__WEBPACK_IMPORTED_MODULE_4__["default"].format("dxDataGrid-ariaColumn") + " " + cellOptions.column.caption, $cell)
                        }
                    }
                },
                _createRow: function(row) {
                    var $row = this.callBase.apply(this, arguments);
                    $row.toggleClass(COLUMN_LINES_CLASS, this.option("showColumnLines"));
                    if ("header" === row.rowType) {
                        $row.addClass(HEADER_ROW_CLASS);
                        if (!this._isLegacyKeyboardNavigation()) {
                            Object(_ui_grid_core_accessibility__WEBPACK_IMPORTED_MODULE_8__["registerKeyboardAction"])("columnHeaders", this, $row, "td", this._handleActionKeyDown.bind(this))
                        }
                    }
                    return $row
                },
                _handleActionKeyDown: function(args) {
                    var event = args.event;
                    var $target = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(event.target);
                    this._lastActionElement = event.target;
                    if ($target.is(HEADER_FILTER_CLASS_SELECTOR)) {
                        var headerFilterController = this.getController("headerFilter");
                        var $column = $target.closest("td");
                        var columnIndex = this.getColumnIndexByElement($column);
                        if (columnIndex >= 0) {
                            headerFilterController.showHeaderFilterMenu(columnIndex, false)
                        }
                    } else {
                        var $row = $target.closest(ROW_CLASS_SELECTOR);
                        this._processHeaderAction(event, $row)
                    }
                    event.preventDefault()
                },
                _renderCore: function() {
                    var that = this;
                    var $container = that.element();
                    if (that._tableElement && !that._dataController.isLoaded() && !that._hasRowElements) {
                        return
                    }
                    $container.addClass(that.addWidgetPrefix(HEADERS_CLASS)).toggleClass(that.addWidgetPrefix(NOWRAP_CLASS), !that.option("wordWrapEnabled")).empty();
                    that.setAria("role", "presentation", $container);
                    that._updateContent(that._renderTable());
                    if (that.getRowCount() > 1) {
                        $container.addClass(MULTI_ROW_HEADER_CLASS)
                    }
                    that.callBase.apply(that, arguments)
                },
                _renderRows: function() {
                    var that = this;
                    if (that._dataController.isLoaded() || that._hasRowElements) {
                        that.callBase.apply(that, arguments);
                        that._hasRowElements = true
                    }
                },
                _getRowVisibleColumns: function(rowIndex) {
                    return this._columnsController.getVisibleColumns(rowIndex)
                },
                _renderRow: function($table, options) {
                    options.columns = this._getRowVisibleColumns(options.row.rowIndex);
                    this.callBase($table, options)
                },
                _createCell: function(options) {
                    var column = options.column;
                    var $cellElement = this.callBase.apply(this, arguments);
                    column.rowspan > 1 && "header" === options.rowType && $cellElement.attr("rowSpan", column.rowspan);
                    return $cellElement
                },
                _getRows: function() {
                    var result = [];
                    var rowCount = this.getRowCount();
                    if (this.option("showColumnHeaders")) {
                        for (var i = 0; i < rowCount; i++) {
                            result.push({
                                rowType: "header",
                                rowIndex: i
                            })
                        }
                    }
                    return result
                },
                _getCellTemplate: function(options) {
                    if ("header" === options.rowType) {
                        return this._getHeaderTemplate(options.column)
                    }
                },
                _columnOptionChanged: function(e) {
                    var changeTypes = e.changeTypes;
                    var optionNames = e.optionNames;
                    if (changeTypes.grouping || changeTypes.groupExpanding) {
                        if (changeTypes.grouping) {
                            this._isGroupingChanged = true
                        }
                        return
                    }
                    this.callBase(e);
                    if (optionNames.width || optionNames.visible) {
                        this.resizeCompleted.fire()
                    }
                },
                _isElementVisible: function(elementOptions) {
                    return elementOptions && elementOptions.visible
                },
                _alignCaptionByCenter: function($cell) {
                    var $indicatorsContainer = this._getIndicatorContainer($cell, true);
                    if ($indicatorsContainer && $indicatorsContainer.length) {
                        $indicatorsContainer.filter("." + VISIBILITY_HIDDEN_CLASS).remove();
                        $indicatorsContainer = this._getIndicatorContainer($cell);
                        $indicatorsContainer.clone().addClass(VISIBILITY_HIDDEN_CLASS).css("float", "").insertBefore($cell.children("." + this.addWidgetPrefix(CELL_CONTENT_CLASS)))
                    }
                },
                _updateCell: function($cell, options) {
                    if ("header" === options.rowType && "center" === options.column.alignment) {
                        this._alignCaptionByCenter($cell)
                    }
                    this.callBase.apply(this, arguments)
                },
                _updateIndicator: function($cell, column, indicatorName) {
                    var $indicatorElement = this.callBase.apply(this, arguments);
                    if ("center" === column.alignment) {
                        this._alignCaptionByCenter($cell)
                    }
                    addCssClassesToCellContent(this, $cell, column);
                    return $indicatorElement
                },
                _getIndicatorContainer: function($cell, returnAll) {
                    var $indicatorsContainer = this.callBase($cell);
                    return returnAll ? $indicatorsContainer : $indicatorsContainer.filter(":not(." + VISIBILITY_HIDDEN_CLASS + ")")
                },
                _isSortableElement: function() {
                    return true
                },
                getHeadersRowHeight: function() {
                    var $tableElement = this.getTableElement();
                    var $headerRows = $tableElement && $tableElement.find("." + HEADER_ROW_CLASS);
                    return $headerRows && $headerRows.toArray().reduce((function(sum, headerRow) {
                        return sum + Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getHeight"])(headerRow)
                    }), 0) || 0
                },
                getHeaderElement: function(index) {
                    var columnElements = this.getColumnElements();
                    return columnElements && columnElements.eq(index)
                },
                getColumnElements: function(index, bandColumnIndex) {
                    var that = this;
                    var $cellElement;
                    var columnsController = that._columnsController;
                    var rowCount = that.getRowCount();
                    if (that.option("showColumnHeaders")) {
                        if (rowCount > 1 && (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isDefined"])(index) || Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isDefined"])(bandColumnIndex))) {
                            var result = [];
                            var visibleColumns = Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isDefined"])(bandColumnIndex) ? columnsController.getChildrenByBandColumn(bandColumnIndex, true) : columnsController.getVisibleColumns();
                            Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_6__["each"])(visibleColumns, (function(_, column) {
                                var rowIndex = Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isDefined"])(index) ? index : columnsController.getRowIndex(column.index);
                                $cellElement = that._getCellElement(rowIndex, columnsController.getVisibleIndex(column.index, rowIndex));
                                $cellElement && result.push($cellElement.get(0))
                            }));
                            return Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(result)
                        } else if (!index || index < rowCount) {
                            return that.getCellElements(index || 0)
                        }
                    }
                },
                getColumnIndexByElement: function($cell) {
                    var cellIndex = this.getCellIndex($cell);
                    var $row = $cell.closest(".dx-row");
                    var rowIndex = $row[0].rowIndex;
                    var column = this.getColumns(rowIndex)[cellIndex];
                    return column ? column.index : -1
                },
                getVisibleColumnIndex: function(columnIndex, rowIndex) {
                    var column = this.getColumns()[columnIndex];
                    return column ? this._columnsController.getVisibleIndex(column.index, rowIndex) : -1
                },
                getColumnWidths: function() {
                    var $columnElements = this.getColumnElements();
                    if ($columnElements && $columnElements.length) {
                        return this._getWidths($columnElements)
                    }
                    return this.callBase.apply(this, arguments)
                },
                allowDragging: function(column, sourceLocation, draggingPanels) {
                    var i;
                    var draggableColumnCount = 0;
                    var rowIndex = column && this._columnsController.getRowIndex(column.index);
                    var columns = this.getColumns(0 === rowIndex ? 0 : null);
                    var canHideColumn = (null === column || void 0 === column ? void 0 : column.allowHiding) && columns.length > 1;
                    var allowDrag = function(column) {
                        return column.allowReordering || column.allowGrouping || column.allowHiding
                    };
                    for (i = 0; i < columns.length; i++) {
                        if (allowDrag(columns[i])) {
                            draggableColumnCount++
                        }
                    }
                    if (draggableColumnCount <= 1 && !canHideColumn) {
                        return false
                    } else if (!draggingPanels) {
                        return (this.option("allowColumnReordering") || this._columnsController.isColumnOptionUsed("allowReordering")) && column && column.allowReordering
                    }
                    for (i = 0; i < draggingPanels.length; i++) {
                        var draggingPanel = draggingPanels[i];
                        if (draggingPanel && draggingPanel.allowDragging(column, sourceLocation)) {
                            return true
                        }
                    }
                    return false
                },
                getBoundingRect: function() {
                    var $columnElements = this.getColumnElements();
                    if ($columnElements && $columnElements.length) {
                        var offset = this.getTableElement().offset();
                        return {
                            top: offset.top
                        }
                    }
                    return null
                },
                getName: function() {
                    return "headers"
                },
                getColumnCount: function() {
                    var $columnElements = this.getColumnElements();
                    return $columnElements ? $columnElements.length : 0
                },
                isVisible: function() {
                    return this.option("showColumnHeaders")
                },
                optionChanged: function(args) {
                    switch (args.name) {
                        case "showColumnHeaders":
                        case "wordWrapEnabled":
                        case "showColumnLines":
                            this._invalidate(true, true);
                            args.handled = true;
                            break;
                        default:
                            this.callBase(args)
                    }
                },
                getHeight: function() {
                    return this.getElementHeight()
                },
                getContextMenuItems: function(options) {
                    var that = this;
                    var column = options.column;
                    if (options.row && ("header" === options.row.rowType || "detailAdaptive" === options.row.rowType)) {
                        var sortingOptions = that.option("sorting");
                        if (sortingOptions && "none" !== sortingOptions.mode && column && column.allowSorting) {
                            var onItemClick = function(params) {
                                setTimeout((function() {
                                    that._columnsController.changeSortOrder(column.index, params.itemData.value)
                                }))
                            };
                            return [{
                                text: sortingOptions.ascendingText,
                                value: "asc",
                                disabled: "asc" === column.sortOrder,
                                icon: CONTEXT_MENU_SORT_ASC_ICON,
                                onItemClick: onItemClick
                            }, {
                                text: sortingOptions.descendingText,
                                value: "desc",
                                disabled: "desc" === column.sortOrder,
                                icon: CONTEXT_MENU_SORT_DESC_ICON,
                                onItemClick: onItemClick
                            }, {
                                text: sortingOptions.clearText,
                                value: "none",
                                disabled: !column.sortOrder,
                                icon: CONTEXT_MENU_SORT_NONE_ICON,
                                onItemClick: onItemClick
                            }]
                        }
                    }
                },
                getRowCount: function() {
                    return this._columnsController && this._columnsController.getRowCount()
                },
                setRowsOpacity: function(columnIndex, value, rowIndex) {
                    var that = this;
                    var i;
                    var columnElements;
                    var rowCount = that.getRowCount();
                    var columns = that._columnsController.getColumns();
                    var column = columns && columns[columnIndex];
                    var columnID = column && column.isBand && column.index;
                    var setColumnOpacity = function(index, column) {
                        if (column.ownerBand === columnID) {
                            columnElements.eq(index).css({
                                opacity: value
                            });
                            if (column.isBand) {
                                that.setRowsOpacity(column.index, value, i + 1)
                            }
                        }
                    };
                    if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isDefined"])(columnID)) {
                        rowIndex = rowIndex || 0;
                        for (i = rowIndex; i < rowCount; i++) {
                            columnElements = that.getCellElements(i);
                            Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_6__["each"])(that.getColumns(i), setColumnOpacity)
                        }
                    }
                }
            }
        }())
    }
};


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.column_state_mixin.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.column_state_mixin.js ***!
  \*************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/renderer */ "./node_modules/devextreme/esm/core/renderer.js");
/* harmony import */ var _core_utils_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/utils/common */ "./node_modules/devextreme/esm/core/utils/common.js");
/* harmony import */ var _core_utils_extend__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/utils/extend */ "./node_modules/devextreme/esm/core/utils/extend.js");
/* harmony import */ var _core_utils_position__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/utils/position */ "./node_modules/devextreme/esm/core/utils/position.js");
/**
 * DevExtreme (esm/ui/grid_core/ui.grid_core.column_state_mixin.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */




var COLUMN_INDICATORS_CLASS = "dx-column-indicators";
var GROUP_PANEL_ITEM_CLASS = "dx-group-panel-item";
/* harmony default export */ __webpack_exports__["default"] = ({
    _applyColumnState: function(options) {
        var _that$component;
        var rtlEnabled = this.option("rtlEnabled");
        var columnAlignment = this._getColumnAlignment(options.column.alignment, rtlEnabled);
        var parameters = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_2__["extend"])(true, {
            columnAlignment: columnAlignment
        }, options);
        var isGroupPanelItem = parameters.rootElement.hasClass(GROUP_PANEL_ITEM_CLASS);
        var $indicatorsContainer = this._createIndicatorContainer(parameters, isGroupPanelItem);
        var $span = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])("<span>").addClass(this._getIndicatorClassName(options.name));
        var columnsController = null === (_that$component = this.component) || void 0 === _that$component ? void 0 : _that$component.getController("columns");
        var indicatorAlignment = (null === columnsController || void 0 === columnsController ? void 0 : columnsController.getHeaderContentAlignment(columnAlignment)) || columnAlignment;
        parameters.container = $indicatorsContainer;
        parameters.indicator = $span;
        this._renderIndicator(parameters);
        $indicatorsContainer[(isGroupPanelItem || !options.showColumnLines) && "left" === indicatorAlignment ? "appendTo" : "prependTo"](options.rootElement);
        return $span
    },
    _getIndicatorClassName: _core_utils_common__WEBPACK_IMPORTED_MODULE_1__["noop"],
    _getColumnAlignment: function(alignment, rtlEnabled) {
        rtlEnabled = rtlEnabled || this.option("rtlEnabled");
        return alignment && "center" !== alignment ? alignment : Object(_core_utils_position__WEBPACK_IMPORTED_MODULE_3__["getDefaultAlignment"])(rtlEnabled)
    },
    _createIndicatorContainer: function(options, ignoreIndicatorAlignment) {
        var $indicatorsContainer = this._getIndicatorContainer(options.rootElement);
        var indicatorAlignment = "left" === options.columnAlignment ? "right" : "left";
        if (!$indicatorsContainer.length) {
            $indicatorsContainer = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>").addClass(COLUMN_INDICATORS_CLASS)
        }
        this.setAria("role", "presentation", $indicatorsContainer);
        return $indicatorsContainer.css("float", options.showColumnLines && !ignoreIndicatorAlignment ? indicatorAlignment : null)
    },
    _getIndicatorContainer: function($cell) {
        return $cell && $cell.find("." + COLUMN_INDICATORS_CLASS)
    },
    _getIndicatorElements: function($cell) {
        var $indicatorContainer = this._getIndicatorContainer($cell);
        return $indicatorContainer && $indicatorContainer.children()
    },
    _renderIndicator: function(options) {
        var $container = options.container;
        var $indicator = options.indicator;
        $container && $indicator && $container.append($indicator)
    },
    _updateIndicators: function(indicatorName) {
        var columns = this.getColumns();
        var $cells = this.getColumnElements();
        var $cell;
        if (!$cells || columns.length !== $cells.length) {
            return
        }
        for (var i = 0; i < columns.length; i++) {
            $cell = $cells.eq(i);
            this._updateIndicator($cell, columns[i], indicatorName);
            var rowOptions = $cell.parent().data("options");
            if (rowOptions && rowOptions.cells) {
                rowOptions.cells[$cell.index()].column = columns[i]
            }
        }
    },
    _updateIndicator: function($cell, column, indicatorName) {
        if (!column.command) {
            return this._applyColumnState({
                name: indicatorName,
                rootElement: $cell,
                column: column,
                showColumnLines: this.option("showColumnLines")
            })
        }
    }
});


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.columns_controller.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.columns_controller.js ***!
  \*************************************************************************************/
/*! exports provided: columnsControllerModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "columnsControllerModule", function() { return columnsControllerModule; });
/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ "./node_modules/@babel/runtime/helpers/esm/extends.js");
/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/renderer */ "./node_modules/devextreme/esm/core/renderer.js");
/* harmony import */ var _core_utils_callbacks__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/utils/callbacks */ "./node_modules/devextreme/esm/core/utils/callbacks.js");
/* harmony import */ var _core_utils_variable_wrapper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/utils/variable_wrapper */ "./node_modules/devextreme/esm/core/utils/variable_wrapper.js");
/* harmony import */ var _core_utils_data__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/utils/data */ "./node_modules/devextreme/esm/core/utils/data.js");
/* harmony import */ var _core_utils_type__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core/utils/type */ "./node_modules/devextreme/esm/core/utils/type.js");
/* harmony import */ var _core_utils_iterator__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../core/utils/iterator */ "./node_modules/devextreme/esm/core/utils/iterator.js");
/* harmony import */ var _core_utils_position__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../core/utils/position */ "./node_modules/devextreme/esm/core/utils/position.js");
/* harmony import */ var _core_utils_extend__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../core/utils/extend */ "./node_modules/devextreme/esm/core/utils/extend.js");
/* harmony import */ var _core_utils_array__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../core/utils/array */ "./node_modules/devextreme/esm/core/utils/array.js");
/* harmony import */ var _core_config__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../core/config */ "./node_modules/devextreme/esm/core/config.js");
/* harmony import */ var _core_utils_object__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../core/utils/object */ "./node_modules/devextreme/esm/core/utils/object.js");
/* harmony import */ var _widget_ui_errors__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../widget/ui.errors */ "./node_modules/devextreme/esm/ui/widget/ui.errors.js");
/* harmony import */ var _ui_grid_core_modules__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./ui.grid_core.modules */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.modules.js");
/* harmony import */ var _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./ui.grid_core.utils */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.utils.js");
/* harmony import */ var _core_utils_inflector__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../core/utils/inflector */ "./node_modules/devextreme/esm/core/utils/inflector.js");
/* harmony import */ var _core_utils_date_serialization__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../core/utils/date_serialization */ "./node_modules/devextreme/esm/core/utils/date_serialization.js");
/* harmony import */ var _localization_number__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../localization/number */ "./node_modules/devextreme/esm/localization/number.js");
/* harmony import */ var _localization_date__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../localization/date */ "./node_modules/devextreme/esm/localization/date.js");
/* harmony import */ var _localization_message__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../localization/message */ "./node_modules/devextreme/esm/localization/message.js");
/* harmony import */ var _core_utils_deferred__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../core/utils/deferred */ "./node_modules/devextreme/esm/core/utils/deferred.js");
/* harmony import */ var _data_abstract_store__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../../data/abstract_store */ "./node_modules/devextreme/esm/data/abstract_store.js");
/* harmony import */ var _data_data_source_data_source__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../../data/data_source/data_source */ "./node_modules/devextreme/esm/data/data_source/data_source.js");
/* harmony import */ var _data_data_source_utils__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../../data/data_source/utils */ "./node_modules/devextreme/esm/data/data_source/utils.js");
/* harmony import */ var _shared_filtering__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../shared/filtering */ "./node_modules/devextreme/esm/ui/shared/filtering.js");
/**
 * DevExtreme (esm/ui/grid_core/ui.grid_core.columns_controller.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */

























var USER_STATE_FIELD_NAMES_15_1 = ["filterValues", "filterType", "fixed", "fixedPosition"];
var USER_STATE_FIELD_NAMES = ["visibleIndex", "dataField", "name", "dataType", "width", "visible", "sortOrder", "lastSortOrder", "sortIndex", "groupIndex", "filterValue", "selectedFilterOperation", "added"].concat(USER_STATE_FIELD_NAMES_15_1);
var IGNORE_COLUMN_OPTION_NAMES = {
    visibleWidth: true,
    bestFitWidth: true,
    bufferedFilterValue: true
};
var COMMAND_EXPAND_CLASS = "dx-command-expand";
var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;
var GROUP_COMMAND_COLUMN_NAME = "groupExpand";
var regExp = /columns\[(\d+)\]\.?/gi;
var globalColumnId = 1;
var columnsControllerModule = {
    defaultOptions: function() {
        return {
            commonColumnSettings: {
                allowFiltering: true,
                allowHiding: true,
                allowSorting: true,
                allowEditing: true,
                encodeHtml: true,
                trueText: _localization_message__WEBPACK_IMPORTED_MODULE_19__["default"].format("dxDataGrid-trueText"),
                falseText: _localization_message__WEBPACK_IMPORTED_MODULE_19__["default"].format("dxDataGrid-falseText")
            },
            allowColumnReordering: false,
            allowColumnResizing: false,
            columnResizingMode: "nextColumn",
            columnMinWidth: void 0,
            columnWidth: void 0,
            adaptColumnWidthByRatio: true,
            columns: void 0,
            regenerateColumnsByVisibleItems: false,
            customizeColumns: null,
            dateSerializationFormat: void 0
        }
    },
    controllers: {
        columns: _ui_grid_core_modules__WEBPACK_IMPORTED_MODULE_13__["default"].Controller.inherit(function() {
            var DEFAULT_COLUMN_OPTIONS = {
                visible: true,
                showInColumnChooser: true
            };
            var DATATYPE_OPERATIONS = {
                number: ["=", "<>", "<", ">", "<=", ">=", "between"],
                string: ["contains", "notcontains", "startswith", "endswith", "=", "<>"],
                date: ["=", "<>", "<", ">", "<=", ">=", "between"],
                datetime: ["=", "<>", "<", ">", "<=", ">=", "between"]
            };
            var COLUMN_INDEX_OPTIONS = {
                visibleIndex: true,
                groupIndex: true,
                grouped: true,
                sortIndex: true,
                sortOrder: true
            };
            var setFilterOperationsAsDefaultValues = function(column) {
                column.filterOperations = column.defaultFilterOperations
            };
            var createColumn = function(that, columnOptions, userStateColumnOptions, bandColumn) {
                var commonColumnOptions = {};
                if (columnOptions) {
                    if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isString"])(columnOptions)) {
                        columnOptions = {
                            dataField: columnOptions
                        }
                    }
                    that.setName(columnOptions);
                    var result = {};
                    if (columnOptions.command) {
                        result = Object(_core_utils_object__WEBPACK_IMPORTED_MODULE_11__["deepExtendArraySafe"])(commonColumnOptions, columnOptions)
                    } else {
                        commonColumnOptions = that.getCommonSettings(columnOptions);
                        if (userStateColumnOptions && userStateColumnOptions.name && userStateColumnOptions.dataField) {
                            columnOptions = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_8__["extend"])({}, columnOptions, {
                                dataField: userStateColumnOptions.dataField
                            })
                        }
                        var calculatedColumnOptions = that._createCalculatedColumnOptions(columnOptions, bandColumn);
                        if (!columnOptions.type) {
                            result = {
                                headerId: "dx-col-".concat(globalColumnId++)
                            }
                        }
                        result = Object(_core_utils_object__WEBPACK_IMPORTED_MODULE_11__["deepExtendArraySafe"])(result, DEFAULT_COLUMN_OPTIONS);
                        Object(_core_utils_object__WEBPACK_IMPORTED_MODULE_11__["deepExtendArraySafe"])(result, commonColumnOptions);
                        Object(_core_utils_object__WEBPACK_IMPORTED_MODULE_11__["deepExtendArraySafe"])(result, calculatedColumnOptions);
                        Object(_core_utils_object__WEBPACK_IMPORTED_MODULE_11__["deepExtendArraySafe"])(result, columnOptions);
                        Object(_core_utils_object__WEBPACK_IMPORTED_MODULE_11__["deepExtendArraySafe"])(result, {
                            selector: null
                        })
                    }
                    if (columnOptions.filterOperations === columnOptions.defaultFilterOperations) {
                        setFilterOperationsAsDefaultValues(result)
                    }
                    return result
                }
            };
            var createColumnsFromOptions = function createColumnsFromOptions(that, columnsOptions, bandColumn) {
                var result = [];
                if (columnsOptions) {
                    Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_6__["each"])(columnsOptions, (function(index, columnOptions) {
                        var userStateColumnOptions = that._columnsUserState && checkUserStateColumn(columnOptions, that._columnsUserState[index]) && that._columnsUserState[index];
                        var column = createColumn(that, columnOptions, userStateColumnOptions, bandColumn);
                        if (column) {
                            if (bandColumn) {
                                column.ownerBand = bandColumn
                            }
                            result.push(column);
                            if (column.columns) {
                                result = result.concat(createColumnsFromOptions(that, column.columns, column));
                                delete column.columns;
                                column.hasColumns = true
                            }
                        }
                    }))
                }
                return result
            };
            var getParentBandColumns = function(columnIndex, columnParentByIndex) {
                var result = [];
                var parent = columnParentByIndex[columnIndex];
                while (parent) {
                    result.unshift(parent);
                    columnIndex = parent.index;
                    parent = columnParentByIndex[columnIndex]
                }
                return result
            };
            var _getChildrenByBandColumn = function(columnIndex, columnChildrenByIndex, recursive) {
                var result = [];
                var children = columnChildrenByIndex[columnIndex];
                if (children) {
                    for (var i = 0; i < children.length; i++) {
                        var column = children[i];
                        if (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isDefined"])(column.groupIndex) || column.showWhenGrouped) {
                            result.push(column);
                            if (recursive && column.isBand) {
                                result = result.concat(_getChildrenByBandColumn(column.index, columnChildrenByIndex, recursive))
                            }
                        }
                    }
                }
                return result
            };
            var getColumnFullPath = function(that, column) {
                var result = [];
                var columns;
                var bandColumnsCache = that.getBandColumnsCache();
                var callbackFilter = function(item) {
                    return item.ownerBand === column.ownerBand
                };
                if (bandColumnsCache.isPlain) {
                    var columnIndex = that._columns.indexOf(column);
                    if (columnIndex >= 0) {
                        result = ["columns[".concat(columnIndex, "]")]
                    }
                } else {
                    columns = that._columns.filter(callbackFilter);
                    while (columns.length && -1 !== columns.indexOf(column)) {
                        result.unshift("columns[".concat(columns.indexOf(column), "]"));
                        column = bandColumnsCache.columnParentByIndex[column.index];
                        columns = column ? that._columns.filter(callbackFilter) : []
                    }
                }
                return result.join(".")
            };
            var calculateColspan = function calculateColspan(that, columnID) {
                var colspan = 0;
                var columns = that.getChildrenByBandColumn(columnID, true);
                Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_6__["each"])(columns, (function(_, column) {
                    if (column.isBand) {
                        column.colspan = column.colspan || calculateColspan(that, column.index);
                        colspan += column.colspan || 1
                    } else {
                        colspan += 1
                    }
                }));
                return colspan
            };
            var getValueDataType = function(value) {
                var dataType = Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["type"])(value);
                if ("string" !== dataType && "boolean" !== dataType && "number" !== dataType && "date" !== dataType && "object" !== dataType) {
                    dataType = void 0
                }
                return dataType
            };
            var getSerializationFormat = function(dataType, value) {
                switch (dataType) {
                    case "date":
                    case "datetime":
                        return _core_utils_date_serialization__WEBPACK_IMPORTED_MODULE_16__["default"].getDateSerializationFormat(value);
                    case "number":
                        if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isString"])(value)) {
                            return "string"
                        }
                        if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isNumeric"])(value)) {
                            return null
                        }
                }
            };
            var updateSerializers = function(options, dataType) {
                if (!options.deserializeValue) {
                    if (_ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_14__["default"].isDateType(dataType)) {
                        options.deserializeValue = function(value) {
                            return _core_utils_date_serialization__WEBPACK_IMPORTED_MODULE_16__["default"].deserializeDate(value)
                        };
                        options.serializeValue = function(value) {
                            return Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isString"])(value) ? value : _core_utils_date_serialization__WEBPACK_IMPORTED_MODULE_16__["default"].serializeDate(value, this.serializationFormat)
                        }
                    }
                    if ("number" === dataType) {
                        options.deserializeValue = function(value) {
                            var parsedValue = parseFloat(value);
                            return isNaN(parsedValue) ? value : parsedValue
                        };
                        options.serializeValue = function(value, target) {
                            if ("filter" === target) {
                                return value
                            }
                            return Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isDefined"])(value) && "string" === this.serializationFormat ? value.toString() : value
                        }
                    }
                }
            };
            var customizeTextForBooleanDataType = function(e) {
                if (true === e.value) {
                    return this.trueText || "true"
                } else if (false === e.value) {
                    return this.falseText || "false"
                } else {
                    return e.valueText || ""
                }
            };
            var getCustomizeTextByDataType = function(dataType) {
                if ("boolean" === dataType) {
                    return customizeTextForBooleanDataType
                }
            };
            var updateColumnIndexes = function(that) {
                Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_6__["each"])(that._columns, (function(index, column) {
                    column.index = index
                }));
                Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_6__["each"])(that._columns, (function(index, column) {
                    if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isObject"])(column.ownerBand)) {
                        column.ownerBand = column.ownerBand.index
                    }
                }));
                Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_6__["each"])(that._commandColumns, (function(index, column) {
                    column.index = -(index + 1)
                }))
            };
            var updateColumnGroupIndexes = function(that, currentColumn) {
                Object(_core_utils_array__WEBPACK_IMPORTED_MODULE_9__["normalizeIndexes"])(that._columns, "groupIndex", currentColumn, (function(column) {
                    var grouped = column.grouped;
                    delete column.grouped;
                    return grouped
                }))
            };
            var getColumnIndexByVisibleIndex = function(that, visibleIndex, location) {
                var rowIndex = Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isObject"])(visibleIndex) ? visibleIndex.rowIndex : null;
                var columns = "group" === location ? that.getGroupColumns() : "columnChooser" === location ? that.getChooserColumns() : that.getVisibleColumns(rowIndex);
                var column;
                visibleIndex = Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isObject"])(visibleIndex) ? visibleIndex.columnIndex : visibleIndex;
                column = columns[visibleIndex];
                if (column && column.type === GROUP_COMMAND_COLUMN_NAME) {
                    column = that._columns.filter(col => column.type === col.type)[0] || column
                }
                return column && Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isDefined"])(column.index) ? column.index : -1
            };

            function checkUserStateColumn(column, userStateColumn) {
                return column && userStateColumn && userStateColumn.name === (column.name || column.dataField) && (userStateColumn.dataField === column.dataField || column.name)
            }
            var applyUserState = function(that) {
                var columnsUserState = that._columnsUserState;
                var ignoreColumnOptionNames = that._ignoreColumnOptionNames || [];
                var columns = that._columns;
                var columnCountById = {};
                var resultColumns = [];
                var allColumnsHaveState = true;
                var userStateColumnIndexes = [];
                var column;
                var userStateColumnIndex;
                var i;

                function applyFieldsState(column, userStateColumn) {
                    if (!userStateColumn) {
                        return
                    }
                    for (var index = 0; index < USER_STATE_FIELD_NAMES.length; index++) {
                        var fieldName = USER_STATE_FIELD_NAMES[index];
                        if (Object(_core_utils_array__WEBPACK_IMPORTED_MODULE_9__["inArray"])(fieldName, ignoreColumnOptionNames) >= 0) {
                            continue
                        }
                        if ("dataType" === fieldName) {
                            column[fieldName] = column[fieldName] || userStateColumn[fieldName]
                        } else if (Object(_core_utils_array__WEBPACK_IMPORTED_MODULE_9__["inArray"])(fieldName, USER_STATE_FIELD_NAMES_15_1) >= 0) {
                            if (fieldName in userStateColumn) {
                                column[fieldName] = userStateColumn[fieldName]
                            }
                        } else {
                            if ("selectedFilterOperation" === fieldName && userStateColumn[fieldName]) {
                                column.defaultSelectedFilterOperation = column[fieldName] || null
                            }
                            column[fieldName] = userStateColumn[fieldName]
                        }
                    }
                }

                function findUserStateColumn(columnsUserState, column) {
                    var id = column.name || column.dataField;
                    var count = columnCountById[id] || 0;
                    for (var j = 0; j < columnsUserState.length; j++) {
                        if (checkUserStateColumn(column, columnsUserState[j])) {
                            if (count) {
                                count--
                            } else {
                                columnCountById[id] = columnCountById[id] || 0;
                                columnCountById[id]++;
                                return j
                            }
                        }
                    }
                    return -1
                }
                if (columnsUserState) {
                    for (i = 0; i < columns.length; i++) {
                        userStateColumnIndex = findUserStateColumn(columnsUserState, columns[i]);
                        allColumnsHaveState = allColumnsHaveState && userStateColumnIndex >= 0;
                        userStateColumnIndexes.push(userStateColumnIndex)
                    }
                    for (i = 0; i < columns.length; i++) {
                        column = columns[i];
                        userStateColumnIndex = userStateColumnIndexes[i];
                        if (that._hasUserState || allColumnsHaveState) {
                            applyFieldsState(column, columnsUserState[userStateColumnIndex])
                        }
                        if (userStateColumnIndex >= 0 && Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isDefined"])(columnsUserState[userStateColumnIndex].initialIndex)) {
                            resultColumns[userStateColumnIndex] = column
                        } else {
                            resultColumns.push(column)
                        }
                    }
                    var hasAddedBands = false;
                    for (i = 0; i < columnsUserState.length; i++) {
                        var columnUserState = columnsUserState[i];
                        if (columnUserState.added && findUserStateColumn(columns, columnUserState) < 0) {
                            column = createColumn(that, columnUserState.added);
                            applyFieldsState(column, columnUserState);
                            resultColumns.push(column);
                            if (columnUserState.added.columns) {
                                hasAddedBands = true
                            }
                        }
                    }
                    if (hasAddedBands) {
                        updateColumnIndexes(that);
                        resultColumns = createColumnsFromOptions(that, resultColumns)
                    }
                    assignColumns(that, resultColumns)
                }
            };
            var updateIndexes = function(that, column) {
                updateColumnIndexes(that);
                updateColumnGroupIndexes(that, column);
                ! function(that, currentColumn) {
                    Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_6__["each"])(that._columns, (function(index, column) {
                        if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isDefined"])(column.sortIndex) && !isSortOrderValid(column.sortOrder)) {
                            delete column.sortIndex
                        }
                    }));
                    Object(_core_utils_array__WEBPACK_IMPORTED_MODULE_9__["normalizeIndexes"])(that._columns, "sortIndex", currentColumn, (function(column) {
                        return !Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isDefined"])(column.groupIndex) && isSortOrderValid(column.sortOrder)
                    }))
                }(that, column);
                resetBandColumnsCache(that);
                ! function(that, currentColumn) {
                    var key;
                    var column;
                    var bandColumns = {};
                    var result = [];
                    var bandColumnsCache = that.getBandColumnsCache();
                    var columns = that._columns.filter(column => !column.command);
                    for (var i = 0; i < columns.length; i++) {
                        column = columns[i];
                        var parentBandColumns = getParentBandColumns(i, bandColumnsCache.columnParentByIndex);
                        if (parentBandColumns.length) {
                            var bandColumnIndex = parentBandColumns[parentBandColumns.length - 1].index;
                            bandColumns[bandColumnIndex] = bandColumns[bandColumnIndex] || [];
                            bandColumns[bandColumnIndex].push(column)
                        } else {
                            result.push(column)
                        }
                    }
                    for (key in bandColumns) {
                        Object(_core_utils_array__WEBPACK_IMPORTED_MODULE_9__["normalizeIndexes"])(bandColumns[key], "visibleIndex", currentColumn)
                    }
                    Object(_core_utils_array__WEBPACK_IMPORTED_MODULE_9__["normalizeIndexes"])(result, "visibleIndex", currentColumn)
                }(that, column)
            };
            var resetColumnsCache = function(that) {
                that.resetColumnsCache()
            };

            function assignColumns(that, columns) {
                that._columns = columns;
                resetColumnsCache(that);
                that.updateColumnDataTypes()
            }
            var updateColumnChanges = function(that, changeType, optionName, columnIndex) {
                var columnChanges = that._columnChanges || {
                    optionNames: {
                        length: 0
                    },
                    changeTypes: {
                        length: 0
                    },
                    columnIndex: columnIndex
                };
                optionName = optionName || "all";
                optionName = optionName.split(".")[0];
                var changeTypes = columnChanges.changeTypes;
                if (changeType && !changeTypes[changeType]) {
                    changeTypes[changeType] = true;
                    changeTypes.length++
                }
                var optionNames = columnChanges.optionNames;
                if (optionName && !optionNames[optionName]) {
                    optionNames[optionName] = true;
                    optionNames.length++
                }
                if (void 0 === columnIndex || columnIndex !== columnChanges.columnIndex) {
                    delete columnChanges.columnIndex
                }
                that._columnChanges = columnChanges;
                resetColumnsCache(that)
            };
            var fireColumnsChanged = function(that) {
                var onColumnsChanging = that.option("onColumnsChanging");
                var columnChanges = that._columnChanges;
                var reinitOptionNames = ["dataField", "lookup", "dataType", "columns"];
                if (that.isInitialized() && !that._updateLockCount && columnChanges) {
                    if (onColumnsChanging) {
                        that._updateLockCount++;
                        onColumnsChanging(Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_8__["extend"])({
                            component: that.component
                        }, columnChanges));
                        that._updateLockCount--
                    }
                    that._columnChanges = void 0;
                    if (options = columnChanges.optionNames, options && reinitOptionNames.some(name => options[name])) {
                        that.reinit()
                    } else {
                        that.columnsChanged.fire(columnChanges)
                    }
                }
                var options
            };
            var updateSortOrderWhenGrouping = function(that, column, groupIndex, prevGroupIndex) {
                var columnWasGrouped = prevGroupIndex >= 0;
                if (groupIndex >= 0) {
                    if (!columnWasGrouped) {
                        column.lastSortOrder = column.sortOrder
                    }
                } else {
                    var sortMode = that.option("sorting.mode");
                    var sortOrder = column.lastSortOrder;
                    if ("single" === sortMode) {
                        var sortedByAnotherColumn = that._columns.some(col => col !== column && Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isDefined"])(col.sortIndex));
                        if (sortedByAnotherColumn) {
                            sortOrder = void 0
                        }
                    }
                    column.sortOrder = sortOrder
                }
            };
            var fireOptionChanged = function(that, options) {
                var value = options.value;
                var optionName = options.optionName;
                var prevValue = options.prevValue;
                var fullOptionName = options.fullOptionName;
                var fullOptionPath = "".concat(fullOptionName, ".").concat(optionName);
                if (!IGNORE_COLUMN_OPTION_NAMES[optionName] && that._skipProcessingColumnsChange !== fullOptionPath) {
                    that._skipProcessingColumnsChange = fullOptionPath;
                    that.component._notifyOptionChanged(fullOptionPath, value, prevValue);
                    that._skipProcessingColumnsChange = false
                }
            };
            var columnOptionCore = function(that, column, optionName, value, notFireEvent) {
                var optionGetter = Object(_core_utils_data__WEBPACK_IMPORTED_MODULE_4__["compileGetter"])(optionName);
                var columnIndex = column.index;
                var columns;
                var changeType;
                var initialColumn;
                if (3 === arguments.length) {
                    return optionGetter(column, {
                        functionsAsIs: true
                    })
                }
                var prevValue = optionGetter(column, {
                    functionsAsIs: true
                });
                if (prevValue !== value) {
                    if ("groupIndex" === optionName || "calculateGroupValue" === optionName) {
                        changeType = "grouping";
                        updateSortOrderWhenGrouping(that, column, value, prevValue)
                    } else if ("sortIndex" === optionName || "sortOrder" === optionName || "calculateSortValue" === optionName) {
                        changeType = "sorting"
                    } else {
                        changeType = "columns"
                    }
                    var optionSetter = Object(_core_utils_data__WEBPACK_IMPORTED_MODULE_4__["compileSetter"])(optionName);
                    optionSetter(column, value, {
                        functionsAsIs: true
                    });
                    var fullOptionName = getColumnFullPath(that, column);
                    if (COLUMN_INDEX_OPTIONS[optionName]) {
                        updateIndexes(that, column);
                        value = optionGetter(column)
                    }
                    if ("name" === optionName || "allowEditing" === optionName) {
                        that._checkColumns()
                    }
                    if (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isDefined"])(prevValue) && !Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isDefined"])(value) && 0 !== optionName.indexOf("buffer")) {
                        notFireEvent = true
                    }
                    if (!notFireEvent) {
                        if (Object(_core_utils_array__WEBPACK_IMPORTED_MODULE_9__["inArray"])(optionName, USER_STATE_FIELD_NAMES) < 0 && "visibleWidth" !== optionName) {
                            columns = that.option("columns");
                            initialColumn = that.getColumnByPath(fullOptionName, columns);
                            if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isString"])(initialColumn)) {
                                initialColumn = columns[columnIndex] = {
                                    dataField: initialColumn
                                }
                            }
                            if (initialColumn && checkUserStateColumn(initialColumn, column)) {
                                optionSetter(initialColumn, value, {
                                    functionsAsIs: true
                                })
                            }
                        }
                        updateColumnChanges(that, changeType, optionName, columnIndex)
                    } else {
                        resetColumnsCache(that)
                    }
                    fullOptionName && fireOptionChanged(that, {
                        fullOptionName: fullOptionName,
                        optionName: optionName,
                        value: value,
                        prevValue: prevValue
                    })
                }
            };

            function isSortOrderValid(sortOrder) {
                return "asc" === sortOrder || "desc" === sortOrder
            }
            var defaultSetCellValue = function(data, value) {
                var path = this.dataField.split(".");
                var dotCount = path.length - 1;
                if (this.serializeValue) {
                    value = this.serializeValue(value)
                }
                for (var i = 0; i < dotCount; i++) {
                    var name = path[i];
                    data = data[name] = data[name] || {}
                }
                data[path[dotCount]] = value
            };
            var isCustomCommandColumn = (that, commandColumn) => !!that._columns.filter(column => column.type === commandColumn.type).length;
            var getFixedPosition = function(that, column) {
                var rtlEnabled = that.option("rtlEnabled");
                if (column.command && !isCustomCommandColumn(that, column) || !column.fixedPosition) {
                    return rtlEnabled ? "right" : "left"
                }
                return column.fixedPosition
            };
            var processExpandColumns = function(columns, expandColumns, type, columnIndex) {
                var customColumnIndex;
                var rowCount = this.getRowCount();
                var rowspan = columns[columnIndex] && columns[columnIndex].rowspan;
                var expandColumnsByType = expandColumns.filter(column => column.type === type);
                columns.forEach((column, index) => {
                    if (column.type === type) {
                        customColumnIndex = index;
                        rowspan = columns[index + 1] ? columns[index + 1].rowspan : rowCount
                    }
                });
                if (rowspan > 1) {
                    expandColumnsByType = Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_6__["map"])(expandColumnsByType, (function(expandColumn) {
                        return Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_8__["extend"])({}, expandColumn, {
                            rowspan: rowspan
                        })
                    }))
                }
                expandColumnsByType.unshift.apply(expandColumnsByType, Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isDefined"])(customColumnIndex) ? [customColumnIndex, 1] : [columnIndex, 0]);
                columns.splice.apply(columns, expandColumnsByType);
                return rowspan || 1
            };
            var numberToString = function(number, digitsCount) {
                var str = number ? number.toString() : "0";
                while (str.length < digitsCount) {
                    str = "0" + str
                }
                return str
            };
            var mergeColumns = (that, columns, commandColumns, needToExtend) => {
                var column;
                var commandColumnIndex;
                var result = columns.slice().map(column => Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_8__["extend"])({}, column));
                var isColumnFixing = that._isColumnFixing();
                var defaultCommandColumns = commandColumns.slice().map(column => Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_8__["extend"])({
                    fixed: isColumnFixing
                }, column));
                var getCommandColumnIndex = column => commandColumns.reduce((result, commandColumn, index) => {
                    var columnType = needToExtend && column.type === GROUP_COMMAND_COLUMN_NAME ? "expand" : column.type;
                    return commandColumn.type === columnType || commandColumn.command === column.command ? index : result
                }, -1);
                var callbackFilter = commandColumn => commandColumn.command !== commandColumns[commandColumnIndex].command;
                for (var i = 0; i < columns.length; i++) {
                    column = columns[i];
                    commandColumnIndex = column && (column.type || column.command) ? getCommandColumnIndex(column) : -1;
                    if (commandColumnIndex >= 0) {
                        if (needToExtend) {
                            result[i] = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_8__["extend"])({
                                fixed: isColumnFixing
                            }, commandColumns[commandColumnIndex], column);
                            if (column.type !== GROUP_COMMAND_COLUMN_NAME) {
                                defaultCommandColumns = defaultCommandColumns.filter(callbackFilter)
                            }
                        } else {
                            var columnOptions = {
                                visibleIndex: column.visibleIndex,
                                index: column.index,
                                headerId: column.headerId,
                                allowFixing: 0 === column.groupIndex,
                                allowReordering: 0 === column.groupIndex,
                                groupIndex: column.groupIndex
                            };
                            result[i] = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_8__["extend"])({}, column, commandColumns[commandColumnIndex], column.type === GROUP_COMMAND_COLUMN_NAME && columnOptions)
                        }
                    }
                }
                if (columns.length && needToExtend && defaultCommandColumns.length) {
                    result = result.concat(defaultCommandColumns)
                }
                return result
            };
            var isColumnFixed = (that, column) => Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isDefined"])(column.fixed) || !column.type ? column.fixed : that._isColumnFixing();
            var resetBandColumnsCache = that => {
                that._bandColumnsCache = void 0
            };
            var findColumn = (columns, identifier) => {
                var identifierOptionName = Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isString"])(identifier) && identifier.substr(0, identifier.indexOf(":"));
                var column;
                if (void 0 === identifier) {
                    return
                }
                if (identifierOptionName) {
                    identifier = identifier.substr(identifierOptionName.length + 1)
                }
                if (identifierOptionName) {
                    column = columns.filter(column => "" + column[identifierOptionName] === identifier)[0]
                } else {
                    ["index", "name", "dataField", "caption"].some(optionName => {
                        column = columns.filter(column => column[optionName] === identifier)[0];
                        return !!column
                    })
                }
                return column
            };
            return {
                _getExpandColumnOptions: function() {
                    return {
                        type: "expand",
                        command: "expand",
                        width: "auto",
                        cssClass: COMMAND_EXPAND_CLASS,
                        allowEditing: false,
                        allowGrouping: false,
                        allowSorting: false,
                        allowResizing: false,
                        allowReordering: false,
                        allowHiding: false
                    }
                },
                _getFirstItems: function(dataSource) {
                    var groupsCount;
                    var items = [];
                    if (dataSource && dataSource.items().length > 0) {
                        groupsCount = _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_14__["default"].normalizeSortingInfo(dataSource.group()).length;
                        items = function getFirstItemsCore(items, groupsCount) {
                            if (!items || !groupsCount) {
                                return items
                            }
                            for (var i = 0; i < items.length; i++) {
                                var childItems = getFirstItemsCore(items[i].items || items[i].collapsedItems, groupsCount - 1);
                                if (childItems && childItems.length) {
                                    return childItems
                                }
                            }
                        }(dataSource.items(), groupsCount) || []
                    }
                    return items
                },
                _endUpdateCore: function() {
                    !this._skipProcessingColumnsChange && fireColumnsChanged(this)
                },
                init: function() {
                    var columns = this.option("columns");
                    this._commandColumns = this._commandColumns || [];
                    this._columns = this._columns || [];
                    this._isColumnsFromOptions = !!columns;
                    if (this._isColumnsFromOptions) {
                        assignColumns(this, columns ? createColumnsFromOptions(this, columns) : []);
                        applyUserState(this)
                    } else {
                        assignColumns(this, this._columnsUserState ? createColumnsFromOptions(this, this._columnsUserState) : this._columns)
                    }! function(that) {
                        var options = that._getExpandColumnOptions();
                        that.addCommandColumn(options)
                    }(this);
                    if (this._dataSourceApplied) {
                        this.applyDataSource(this._dataSource, true)
                    } else {
                        updateIndexes(this)
                    }
                    this._checkColumns()
                },
                callbackNames: function() {
                    return ["columnsChanged"]
                },
                getColumnByPath: function(path, columns) {
                    var column;
                    var columnIndexes = [];
                    path.replace(regExp, (function(_, columnIndex) {
                        columnIndexes.push(parseInt(columnIndex));
                        return ""
                    }));
                    if (columnIndexes.length) {
                        if (columns) {
                            column = columnIndexes.reduce((function(column, index) {
                                return column && column.columns && column.columns[index]
                            }), {
                                columns: columns
                            })
                        } else {
                            column = function(that, columnIndexes) {
                                var result;
                                var columns;
                                var bandColumnsCache = that.getBandColumnsCache();
                                var callbackFilter = function(column) {
                                    var ownerBand = result ? result.index : void 0;
                                    return column.ownerBand === ownerBand
                                };
                                if (bandColumnsCache.isPlain) {
                                    result = that._columns[columnIndexes[0]]
                                } else {
                                    columns = that._columns.filter(callbackFilter);
                                    for (var i = 0; i < columnIndexes.length; i++) {
                                        result = columns[columnIndexes[i]];
                                        if (result) {
                                            columns = that._columns.filter(callbackFilter)
                                        }
                                    }
                                }
                                return result
                            }(this, columnIndexes)
                        }
                    }
                    return column
                },
                optionChanged: function(args) {
                    var needUpdateRequireResize;
                    switch (args.name) {
                        case "adaptColumnWidthByRatio":
                            args.handled = true;
                            break;
                        case "dataSource":
                            if (args.value !== args.previousValue && !this.option("columns") && (!Array.isArray(args.value) || !Array.isArray(args.previousValue))) {
                                this._columns = []
                            }
                            break;
                        case "columns":
                            needUpdateRequireResize = this._skipProcessingColumnsChange;
                            args.handled = true;
                            if (!this._skipProcessingColumnsChange) {
                                if (args.name === args.fullName) {
                                    this._columnsUserState = null;
                                    this._ignoreColumnOptionNames = null;
                                    this.init()
                                } else {
                                    this._columnOptionChanged(args);
                                    needUpdateRequireResize = true
                                }
                            }
                            if (needUpdateRequireResize) {
                                this._updateRequireResize(args)
                            }
                            break;
                        case "commonColumnSettings":
                        case "columnAutoWidth":
                        case "allowColumnResizing":
                        case "allowColumnReordering":
                        case "columnFixing":
                        case "grouping":
                        case "groupPanel":
                        case "regenerateColumnsByVisibleItems":
                        case "customizeColumns":
                        case "columnHidingEnabled":
                        case "dateSerializationFormat":
                        case "columnResizingMode":
                        case "columnMinWidth":
                        case "columnWidth":
                            args.handled = true;
                            var ignoreColumnOptionNames = "columnWidth" === args.fullName && ["width"];
                            this.reinit(ignoreColumnOptionNames);
                            break;
                        case "rtlEnabled":
                            this.reinit();
                            break;
                        default:
                            this.callBase(args)
                    }
                },
                _columnOptionChanged: function(args) {
                    var columnOptionValue = {};
                    var column = this.getColumnByPath(args.fullName);
                    var columnOptionName = args.fullName.replace(regExp, "");
                    if (column) {
                        if (columnOptionName) {
                            columnOptionValue[columnOptionName] = args.value
                        } else {
                            columnOptionValue = args.value
                        }
                        this._skipProcessingColumnsChange = args.fullName;
                        this.columnOption(column.index, columnOptionValue);
                        this._skipProcessingColumnsChange = false
                    }
                },
                _updateRequireResize: function(args) {
                    var component = this.component;
                    if ("width" === args.fullName.replace(regExp, "") && component._updateLockCount) {
                        component._requireResize = true
                    }
                },
                publicMethods: function() {
                    return ["addColumn", "deleteColumn", "columnOption", "columnCount", "clearSorting", "clearGrouping", "getVisibleColumns", "getVisibleColumnIndex"]
                },
                applyDataSource: function(dataSource, forceApplying) {
                    var isDataSourceLoaded = dataSource && dataSource.isLoaded();
                    this._dataSource = dataSource;
                    if (!this._dataSourceApplied || 0 === this._dataSourceColumnsCount || forceApplying || this.option("regenerateColumnsByVisibleItems")) {
                        if (isDataSourceLoaded) {
                            if (!this._isColumnsFromOptions) {
                                var columnsFromDataSource = function(that, dataSource) {
                                    var firstItems = that._getFirstItems(dataSource);
                                    var fieldName;
                                    var processedFields = {};
                                    var result = [];
                                    for (var i = 0; i < firstItems.length; i++) {
                                        if (firstItems[i]) {
                                            for (fieldName in firstItems[i]) {
                                                if (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isFunction"])(firstItems[i][fieldName]) || _core_utils_variable_wrapper__WEBPACK_IMPORTED_MODULE_3__["default"].isWrapped(firstItems[i][fieldName])) {
                                                    processedFields[fieldName] = true
                                                }
                                            }
                                        }
                                    }
                                    for (fieldName in processedFields) {
                                        if (0 !== fieldName.indexOf("__")) {
                                            var column = createColumn(that, fieldName);
                                            result.push(column)
                                        }
                                    }
                                    return result
                                }(this, dataSource);
                                if (columnsFromDataSource.length) {
                                    assignColumns(this, columnsFromDataSource);
                                    this._dataSourceColumnsCount = this._columns.length;
                                    applyUserState(this)
                                }
                            }
                            return this.updateColumns(dataSource, forceApplying)
                        } else {
                            this._dataSourceApplied = false;
                            updateIndexes(this)
                        }
                    } else if (isDataSourceLoaded && !this.isAllDataTypesDefined(true) && this.updateColumnDataTypes(dataSource)) {
                        updateColumnChanges(this, "columns");
                        fireColumnsChanged(this);
                        return (new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_20__["Deferred"]).reject().promise()
                    }
                },
                reset: function() {
                    this._dataSource = null;
                    this._dataSourceApplied = false;
                    this._dataSourceColumnsCount = void 0;
                    this.reinit()
                },
                resetColumnsCache: function() {
                    this._visibleColumns = void 0;
                    this._fixedColumns = void 0;
                    this._rowCount = void 0;
                    resetBandColumnsCache(this)
                },
                reinit: function(ignoreColumnOptionNames) {
                    this._columnsUserState = this.getUserState();
                    this._ignoreColumnOptionNames = ignoreColumnOptionNames || null;
                    this.init();
                    if (ignoreColumnOptionNames) {
                        this._ignoreColumnOptionNames = null
                    }
                },
                isInitialized: function() {
                    return !!this._columns.length || !!this.option("columns")
                },
                isDataSourceApplied: function() {
                    return this._dataSourceApplied
                },
                getCommonSettings: function(column) {
                    var commonColumnSettings = (!column || !column.type) && this.option("commonColumnSettings") || {};
                    var groupingOptions = this.option("grouping") || {};
                    var groupPanelOptions = this.option("groupPanel") || {};
                    return Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_8__["extend"])({
                        allowFixing: this.option("columnFixing.enabled"),
                        allowResizing: this.option("allowColumnResizing") || void 0,
                        allowReordering: this.option("allowColumnReordering"),
                        minWidth: this.option("columnMinWidth"),
                        width: this.option("columnWidth"),
                        autoExpandGroup: groupingOptions.autoExpandAll,
                        allowCollapsing: groupingOptions.allowCollapsing,
                        allowGrouping: groupPanelOptions.allowColumnDragging && groupPanelOptions.visible || groupingOptions.contextMenuEnabled
                    }, commonColumnSettings)
                },
                isColumnOptionUsed: function(optionName) {
                    for (var i = 0; i < this._columns.length; i++) {
                        if (this._columns[i][optionName]) {
                            return true
                        }
                    }
                },
                isAllDataTypesDefined: function(checkSerializers) {
                    var columns = this._columns;
                    if (!columns.length) {
                        return false
                    }
                    for (var i = 0; i < columns.length; i++) {
                        if (!columns[i].dataField && columns[i].calculateCellValue === columns[i].defaultCalculateCellValue) {
                            continue
                        }
                        if (!columns[i].dataType || checkSerializers && columns[i].deserializeValue && void 0 === columns[i].serializationFormat) {
                            return false
                        }
                    }
                    return true
                },
                getColumns: function() {
                    return this._columns
                },
                isBandColumnsUsed: function() {
                    return this.getColumns().some((function(column) {
                        return column.isBand
                    }))
                },
                getGroupColumns: function() {
                    var result = [];
                    Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_6__["each"])(this._columns, (function() {
                        if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isDefined"])(this.groupIndex)) {
                            result[this.groupIndex] = this
                        }
                    }));
                    return result
                },
                getVisibleColumns: function(rowIndex) {
                    this._visibleColumns = this._visibleColumns || this._getVisibleColumnsCore();
                    rowIndex = Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isDefined"])(rowIndex) ? rowIndex : this._visibleColumns.length - 1;
                    return this._visibleColumns[rowIndex] || []
                },
                getFixedColumns: function(rowIndex) {
                    this._fixedColumns = this._fixedColumns || this._getFixedColumnsCore();
                    rowIndex = Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isDefined"])(rowIndex) ? rowIndex : this._fixedColumns.length - 1;
                    return this._fixedColumns[rowIndex] || []
                },
                getFilteringColumns: function() {
                    return this.getColumns().filter(item => (item.dataField || item.name) && (item.allowFiltering || item.allowHeaderFiltering)).map(item => {
                        var field = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_8__["extend"])(true, {}, item);
                        if (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isDefined"])(field.dataField)) {
                            field.dataField = field.name
                        }
                        field.filterOperations = item.filterOperations !== item.defaultFilterOperations ? field.filterOperations : null;
                        return field
                    })
                },
                getColumnIndexOffset: function() {
                    return 0
                },
                _getFixedColumnsCore: function() {
                    var result = [];
                    var rowCount = this.getRowCount();
                    var isColumnFixing = this._isColumnFixing();
                    var transparentColumn = {
                        command: "transparent"
                    };
                    var transparentColspan = 0;
                    var notFixedColumnCount;
                    var transparentColumnIndex;
                    var lastFixedPosition;
                    if (isColumnFixing) {
                        for (var i = 0; i <= rowCount; i++) {
                            notFixedColumnCount = 0;
                            lastFixedPosition = null;
                            transparentColumnIndex = null;
                            var visibleColumns = this.getVisibleColumns(i, true);
                            for (var j = 0; j < visibleColumns.length; j++) {
                                var prevColumn = visibleColumns[j - 1];
                                var column = visibleColumns[j];
                                if (!column.fixed) {
                                    if (0 === i) {
                                        if (column.isBand && column.colspan) {
                                            transparentColspan += column.colspan
                                        } else {
                                            transparentColspan++
                                        }
                                    }
                                    notFixedColumnCount++;
                                    if (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isDefined"])(transparentColumnIndex)) {
                                        transparentColumnIndex = j
                                    }
                                } else if (prevColumn && prevColumn.fixed && getFixedPosition(this, prevColumn) !== getFixedPosition(this, column)) {
                                    if (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isDefined"])(transparentColumnIndex)) {
                                        transparentColumnIndex = j
                                    }
                                } else {
                                    lastFixedPosition = column.fixedPosition
                                }
                            }
                            if (0 === i && (0 === notFixedColumnCount || notFixedColumnCount >= visibleColumns.length)) {
                                return []
                            }
                            if (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isDefined"])(transparentColumnIndex)) {
                                transparentColumnIndex = "right" === lastFixedPosition ? 0 : visibleColumns.length
                            }
                            result[i] = visibleColumns.slice(0);
                            if (!transparentColumn.colspan) {
                                transparentColumn.colspan = transparentColspan
                            }
                            result[i].splice(transparentColumnIndex, notFixedColumnCount, transparentColumn)
                        }
                    }
                    return result.map(columns => columns.map(column => {
                        var newColumn = Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__["default"])({}, column);
                        if (newColumn.headerId) {
                            newColumn.headerId += "-fixed"
                        }
                        return newColumn
                    }))
                },
                _isColumnFixing: function() {
                    var isColumnFixing = this.option("columnFixing.enabled");
                    !isColumnFixing && Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_6__["each"])(this._columns, (function(_, column) {
                        if (column.fixed) {
                            isColumnFixing = true;
                            return false
                        }
                    }));
                    return isColumnFixing
                },
                _getExpandColumnsCore: function() {
                    return this.getGroupColumns()
                },
                getExpandColumns: function() {
                    var expandColumns = this._getExpandColumnsCore();
                    var expandColumn;
                    var firstGroupColumn = expandColumns.filter(column => 0 === column.groupIndex)[0];
                    var isFixedFirstGroupColumn = firstGroupColumn && firstGroupColumn.fixed;
                    var isColumnFixing = this._isColumnFixing();
                    var rtlEnabled = this.option("rtlEnabled");
                    if (expandColumns.length) {
                        expandColumn = this.columnOption("command:expand")
                    }
                    expandColumns = Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_6__["map"])(expandColumns, column => Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_8__["extend"])({}, column, {
                        visibleWidth: null,
                        minWidth: null,
                        cellTemplate: !Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isDefined"])(column.groupIndex) ? column.cellTemplate : null,
                        headerCellTemplate: null,
                        fixed: !Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isDefined"])(column.groupIndex) || !isFixedFirstGroupColumn ? isColumnFixing : true,
                        fixedPosition: rtlEnabled ? "right" : "left"
                    }, expandColumn, {
                        index: column.index,
                        type: column.type || GROUP_COMMAND_COLUMN_NAME
                    }));
                    return expandColumns
                },
                getBandColumnsCache: function() {
                    if (!this._bandColumnsCache) {
                        var columns = this._columns;
                        var columnChildrenByIndex = {};
                        var columnParentByIndex = {};
                        var isPlain = true;
                        columns.forEach((function(column) {
                            var ownerBand = column.ownerBand;
                            var parentIndex = Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isObject"])(ownerBand) ? ownerBand.index : ownerBand;
                            var parent = columns[parentIndex];
                            if (column.hasColumns) {
                                isPlain = false
                            }
                            if (column.colspan) {
                                column.colspan = void 0
                            }
                            if (column.rowspan) {
                                column.rowspan = void 0
                            }
                            if (parent) {
                                columnParentByIndex[column.index] = parent
                            } else {
                                parentIndex = -1
                            }
                            columnChildrenByIndex[parentIndex] = columnChildrenByIndex[parentIndex] || [];
                            columnChildrenByIndex[parentIndex].push(column)
                        }));
                        this._bandColumnsCache = {
                            isPlain: isPlain,
                            columnChildrenByIndex: columnChildrenByIndex,
                            columnParentByIndex: columnParentByIndex
                        }
                    }
                    return this._bandColumnsCache
                },
                _isColumnVisible: function(column) {
                    return column.visible && this.isParentColumnVisible(column.index)
                },
                _getVisibleColumnsCore: function() {
                    var that = this;
                    var i;
                    var result = [];
                    var rowspanGroupColumns = 0;
                    var rowspanExpandColumns = 0;
                    var rowCount = that.getRowCount();
                    var positiveIndexedColumns = [];
                    var negativeIndexedColumns = [];
                    var notGroupedColumnsCount = 0;
                    var isFixedToEnd;
                    var rtlEnabled = that.option("rtlEnabled");
                    var bandColumnsCache = that.getBandColumnsCache();
                    var expandColumns = mergeColumns(that, that.getExpandColumns(), that._columns);
                    var columns = mergeColumns(that, that._columns, that._commandColumns, true);
                    var columnDigitsCount = function(number) {
                        var i;
                        for (i = 0; number > 1; i++) {
                            number /= 10
                        }
                        return i
                    }(columns.length);
                    ! function(that, columns, bandColumnsCache) {
                        var rowspan;
                        for (var i = 0; i < columns.length; i++) {
                            var column = columns[i];
                            if (column.visible || column.command) {
                                if (column.isBand) {
                                    column.colspan = column.colspan || calculateColspan(that, column.index)
                                }
                                if (!column.isBand || !column.colspan) {
                                    rowspan = that.getRowCount();
                                    if (!column.command && (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isDefined"])(column.groupIndex) || column.showWhenGrouped)) {
                                        rowspan -= getParentBandColumns(column.index, bandColumnsCache.columnParentByIndex).length
                                    }
                                    if (rowspan > 1) {
                                        column.rowspan = rowspan
                                    }
                                }
                            }
                        }
                    }(that, columns, bandColumnsCache);
                    for (i = 0; i < rowCount; i++) {
                        result[i] = [];
                        negativeIndexedColumns[i] = [{}];
                        positiveIndexedColumns[i] = [{}, {}, {}]
                    }
                    Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_6__["each"])(columns, (function() {
                        var visibleIndex = this.visibleIndex;
                        var indexedColumns;
                        var parentBandColumns = getParentBandColumns(this.index, bandColumnsCache.columnParentByIndex);
                        var visible = that._isColumnVisible(this);
                        if (visible && (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isDefined"])(this.groupIndex) || this.showWhenGrouped)) {
                            var rowIndex = parentBandColumns.length;
                            if (visibleIndex < 0) {
                                visibleIndex = -visibleIndex;
                                indexedColumns = negativeIndexedColumns[rowIndex]
                            } else {
                                this.fixed = parentBandColumns.length ? parentBandColumns[0].fixed : this.fixed;
                                this.fixedPosition = parentBandColumns.length ? parentBandColumns[0].fixedPosition : this.fixedPosition;
                                if (this.fixed) {
                                    isFixedToEnd = "right" === this.fixedPosition;
                                    if (rtlEnabled && (!this.command || isCustomCommandColumn(that, this))) {
                                        isFixedToEnd = !isFixedToEnd
                                    }
                                    if (isFixedToEnd) {
                                        indexedColumns = positiveIndexedColumns[rowIndex][2]
                                    } else {
                                        indexedColumns = positiveIndexedColumns[rowIndex][0]
                                    }
                                } else {
                                    indexedColumns = positiveIndexedColumns[rowIndex][1]
                                }
                            }
                            if (parentBandColumns.length) {
                                visibleIndex = numberToString(visibleIndex, columnDigitsCount);
                                for (i = parentBandColumns.length - 1; i >= 0; i--) {
                                    visibleIndex = numberToString(parentBandColumns[i].visibleIndex, columnDigitsCount) + visibleIndex
                                }
                            }
                            indexedColumns[visibleIndex] = indexedColumns[visibleIndex] || [];
                            indexedColumns[visibleIndex].push(this);
                            notGroupedColumnsCount++
                        }
                    }));
                    Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_6__["each"])(result, (function(rowIndex) {
                        Object(_core_utils_object__WEBPACK_IMPORTED_MODULE_11__["orderEach"])(negativeIndexedColumns[rowIndex], (function(_, columns) {
                            result[rowIndex].unshift.apply(result[rowIndex], columns)
                        }));
                        var firstPositiveIndexColumn = result[rowIndex].length;
                        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_6__["each"])(positiveIndexedColumns[rowIndex], (function(index, columnsByFixing) {
                            Object(_core_utils_object__WEBPACK_IMPORTED_MODULE_11__["orderEach"])(columnsByFixing, (function(_, columnsByVisibleIndex) {
                                result[rowIndex].push.apply(result[rowIndex], columnsByVisibleIndex)
                            }))
                        }));
                        if (rowspanExpandColumns < rowIndex + 1) {
                            rowspanExpandColumns += processExpandColumns.call(that, result[rowIndex], expandColumns, "detailExpand", firstPositiveIndexColumn)
                        }
                        if (rowspanGroupColumns < rowIndex + 1) {
                            rowspanGroupColumns += processExpandColumns.call(that, result[rowIndex], expandColumns, GROUP_COMMAND_COLUMN_NAME, firstPositiveIndexColumn)
                        }
                    }));
                    result.push(function getDataColumns(columns, rowIndex, bandColumnID) {
                        var result = [];
                        rowIndex = rowIndex || 0;
                        columns[rowIndex] && Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_6__["each"])(columns[rowIndex], (function(_, column) {
                            if (column.ownerBand === bandColumnID || column.type === GROUP_COMMAND_COLUMN_NAME) {
                                if (!column.isBand || !column.colspan) {
                                    if (!column.command || rowIndex < 1) {
                                        result.push(column)
                                    }
                                } else {
                                    result.push.apply(result, getDataColumns(columns, rowIndex + 1, column.index))
                                }
                            }
                        }));
                        return result
                    }(result));
                    if (!notGroupedColumnsCount && that._columns.length) {
                        result[rowCount].push({
                            command: "empty"
                        })
                    }
                    return result
                },
                getInvisibleColumns: function(columns, bandColumnIndex) {
                    var that = this;
                    var result = [];
                    var hiddenColumnsByBand;
                    columns = columns || that._columns;
                    Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_6__["each"])(columns, (function(_, column) {
                        if (column.ownerBand !== bandColumnIndex) {
                            return
                        }
                        if (column.isBand) {
                            if (!column.visible) {
                                hiddenColumnsByBand = that.getChildrenByBandColumn(column.index)
                            } else {
                                hiddenColumnsByBand = that.getInvisibleColumns(that.getChildrenByBandColumn(column.index), column.index)
                            }
                            if (hiddenColumnsByBand.length) {
                                result.push(column);
                                result = result.concat(hiddenColumnsByBand)
                            }
                            return
                        }
                        if (!column.visible) {
                            result.push(column)
                        }
                    }));
                    return result
                },
                getChooserColumns: function(getAllColumns) {
                    var columns = getAllColumns ? this.getColumns() : this.getInvisibleColumns();
                    var columnChooserColumns = columns.filter(column => column.showInColumnChooser);
                    var sortOrder = this.option("columnChooser.sortOrder");
                    return ((columns, sortOrder) => {
                        if ("asc" !== sortOrder && "desc" !== sortOrder) {
                            return columns
                        }
                        var sign = "asc" === sortOrder ? 1 : -1;
                        columns.sort((function(column1, column2) {
                            var caption1 = column1.caption || "";
                            var caption2 = column2.caption || "";
                            return sign * caption1.localeCompare(caption2)
                        }));
                        return columns
                    })(columnChooserColumns, sortOrder)
                },
                allowMoveColumn: function(fromVisibleIndex, toVisibleIndex, sourceLocation, targetLocation) {
                    var columnIndex = getColumnIndexByVisibleIndex(this, fromVisibleIndex, sourceLocation);
                    var sourceColumn = this._columns[columnIndex];
                    if (sourceColumn && (sourceColumn.allowReordering || sourceColumn.allowGrouping || sourceColumn.allowHiding)) {
                        if (sourceLocation === targetLocation) {
                            if ("columnChooser" === sourceLocation) {
                                return false
                            }
                            fromVisibleIndex = Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isObject"])(fromVisibleIndex) ? fromVisibleIndex.columnIndex : fromVisibleIndex;
                            toVisibleIndex = Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isObject"])(toVisibleIndex) ? toVisibleIndex.columnIndex : toVisibleIndex;
                            return fromVisibleIndex !== toVisibleIndex && fromVisibleIndex + 1 !== toVisibleIndex
                        } else if ("group" === sourceLocation && "columnChooser" !== targetLocation || "group" === targetLocation) {
                            return sourceColumn && sourceColumn.allowGrouping
                        } else if ("columnChooser" === sourceLocation || "columnChooser" === targetLocation) {
                            return sourceColumn && sourceColumn.allowHiding
                        }
                        return true
                    }
                    return false
                },
                moveColumn: function(fromVisibleIndex, toVisibleIndex, sourceLocation, targetLocation) {
                    var options = {};
                    var prevGroupIndex;
                    var fromIndex = getColumnIndexByVisibleIndex(this, fromVisibleIndex, sourceLocation);
                    var toIndex = getColumnIndexByVisibleIndex(this, toVisibleIndex, targetLocation);
                    var targetGroupIndex;
                    if (fromIndex >= 0) {
                        var column = this._columns[fromIndex];
                        toVisibleIndex = Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isObject"])(toVisibleIndex) ? toVisibleIndex.columnIndex : toVisibleIndex;
                        targetGroupIndex = toIndex >= 0 ? this._columns[toIndex].groupIndex : -1;
                        if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isDefined"])(column.groupIndex) && "group" === sourceLocation) {
                            if (targetGroupIndex > column.groupIndex) {
                                targetGroupIndex--
                            }
                            if ("group" !== targetLocation) {
                                options.groupIndex = void 0
                            } else {
                                prevGroupIndex = column.groupIndex;
                                delete column.groupIndex;
                                updateColumnGroupIndexes(this)
                            }
                        }
                        if ("group" === targetLocation) {
                            options.groupIndex = function(that, column, groupIndex) {
                                var groupColumns = that.getGroupColumns();
                                var i;
                                if (groupIndex >= 0) {
                                    for (i = 0; i < groupColumns.length; i++) {
                                        if (groupColumns[i].groupIndex >= groupIndex) {
                                            groupColumns[i].groupIndex++
                                        }
                                    }
                                } else {
                                    groupIndex = 0;
                                    for (i = 0; i < groupColumns.length; i++) {
                                        groupIndex = Math.max(groupIndex, groupColumns[i].groupIndex + 1)
                                    }
                                }
                                return groupIndex
                            }(this, 0, targetGroupIndex);
                            column.groupIndex = prevGroupIndex
                        } else if (toVisibleIndex >= 0) {
                            var targetColumn = this._columns[toIndex];
                            if (!targetColumn || column.ownerBand !== targetColumn.ownerBand) {
                                options.visibleIndex = MAX_SAFE_INTEGER
                            } else if (isColumnFixed(this, column) ^ isColumnFixed(this, targetColumn)) {
                                options.visibleIndex = MAX_SAFE_INTEGER
                            } else {
                                options.visibleIndex = targetColumn.visibleIndex
                            }
                        }
                        var isVisible = "columnChooser" !== targetLocation;
                        if (column.visible !== isVisible) {
                            options.visible = isVisible
                        }
                        this.columnOption(column.index, options)
                    }
                },
                changeSortOrder: function(columnIndex, sortOrder) {
                    var options = {};
                    var sortingOptions = this.option("sorting");
                    var sortingMode = sortingOptions && sortingOptions.mode;
                    var needResetSorting = "single" === sortingMode || !sortOrder;
                    var allowSorting = "single" === sortingMode || "multiple" === sortingMode;
                    var column = this._columns[columnIndex];
                    if (allowSorting && column && column.allowSorting) {
                        if (needResetSorting && !Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isDefined"])(column.groupIndex)) {
                            Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_6__["each"])(this._columns, (function(index) {
                                if (index !== columnIndex && this.sortOrder) {
                                    if (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isDefined"])(this.groupIndex)) {
                                        delete this.sortOrder
                                    }
                                    delete this.sortIndex
                                }
                            }))
                        }
                        if (isSortOrderValid(sortOrder)) {
                            if (column.sortOrder !== sortOrder) {
                                options.sortOrder = sortOrder
                            }
                        } else if ("none" === sortOrder) {
                            if (column.sortOrder) {
                                options.sortIndex = void 0;
                                options.sortOrder = void 0
                            }
                        } else {
                            ! function(column) {
                                if ("ctrl" === sortOrder) {
                                    if (!("sortOrder" in column && "sortIndex" in column)) {
                                        return false
                                    }
                                    options.sortOrder = void 0;
                                    options.sortIndex = void 0
                                } else if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isDefined"])(column.groupIndex) || Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isDefined"])(column.sortIndex)) {
                                    options.sortOrder = "desc" === column.sortOrder ? "asc" : "desc"
                                } else {
                                    options.sortOrder = "asc"
                                }
                                return true
                            }(column)
                        }
                    }
                    this.columnOption(column.index, options)
                },
                getSortDataSourceParameters: function(useLocalSelector) {
                    var sortColumns = [];
                    var sort = [];
                    Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_6__["each"])(this._columns, (function() {
                        if ((this.dataField || this.selector || this.calculateCellValue) && Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isDefined"])(this.sortIndex) && !Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isDefined"])(this.groupIndex)) {
                            sortColumns[this.sortIndex] = this
                        }
                    }));
                    Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_6__["each"])(sortColumns, (function() {
                        var sortOrder = this && this.sortOrder;
                        if (isSortOrderValid(sortOrder)) {
                            var sortItem = {
                                selector: this.calculateSortValue || this.displayField || this.calculateDisplayValue || useLocalSelector && this.selector || this.dataField || this.calculateCellValue,
                                desc: "desc" === this.sortOrder
                            };
                            if (this.sortingMethod) {
                                sortItem.compare = this.sortingMethod.bind(this)
                            }
                            sort.push(sortItem)
                        }
                    }));
                    return sort.length > 0 ? sort : null
                },
                getGroupDataSourceParameters: function(useLocalSelector) {
                    var group = [];
                    Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_6__["each"])(this.getGroupColumns(), (function() {
                        var selector = this.calculateGroupValue || this.displayField || this.calculateDisplayValue || useLocalSelector && this.selector || this.dataField || this.calculateCellValue;
                        if (selector) {
                            var groupItem = {
                                selector: selector,
                                desc: "desc" === this.sortOrder,
                                isExpanded: !!this.autoExpandGroup
                            };
                            if (this.sortingMethod) {
                                groupItem.compare = this.sortingMethod.bind(this)
                            }
                            group.push(groupItem)
                        }
                    }));
                    return group.length > 0 ? group : null
                },
                refresh: function(updateNewLookupsOnly) {
                    var deferreds = [];
                    Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_6__["each"])(this._columns, (function() {
                        var lookup = this.lookup;
                        if (lookup && !this.calculateDisplayValue) {
                            if (updateNewLookupsOnly && lookup.valueMap) {
                                return
                            }
                            if (lookup.update) {
                                deferreds.push(lookup.update())
                            }
                        }
                    }));
                    return _core_utils_deferred__WEBPACK_IMPORTED_MODULE_20__["when"].apply(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"], deferreds).done(resetColumnsCache.bind(null, this))
                },
                _updateColumnOptions: function(column, columnIndex) {
                    column.selector = column.selector || function(data) {
                        return column.calculateCellValue(data)
                    };
                    Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_6__["each"])(["calculateSortValue", "calculateGroupValue", "calculateDisplayValue"], (function(_, calculateCallbackName) {
                        var calculateCallback = column[calculateCallbackName];
                        if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isFunction"])(calculateCallback)) {
                            if (!calculateCallback.originalCallback) {
                                var context = {
                                    column: column
                                };
                                column[calculateCallbackName] = function(data) {
                                    return calculateCallback.call(context.column, data)
                                };
                                column[calculateCallbackName].originalCallback = calculateCallback;
                                column[calculateCallbackName].columnIndex = columnIndex;
                                column[calculateCallbackName].context = context
                            } else {
                                column[calculateCallbackName].context.column = column
                            }
                        }
                    }));
                    if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isString"])(column.calculateDisplayValue)) {
                        column.displayField = column.calculateDisplayValue;
                        column.calculateDisplayValue = Object(_core_utils_data__WEBPACK_IMPORTED_MODULE_4__["compileGetter"])(column.displayField)
                    }
                    if (column.calculateDisplayValue) {
                        column.displayValueMap = column.displayValueMap || {}
                    }
                    updateSerializers(column, column.dataType);
                    var lookup = column.lookup;
                    if (lookup) {
                        updateSerializers(lookup, lookup.dataType)
                    }
                    var dataType = lookup ? lookup.dataType : column.dataType;
                    if (dataType) {
                        column.alignment = column.alignment || function(dataType, isRTL) {
                            switch (dataType) {
                                case "number":
                                    return "right";
                                case "boolean":
                                    return "center";
                                default:
                                    return Object(_core_utils_position__WEBPACK_IMPORTED_MODULE_7__["getDefaultAlignment"])(isRTL)
                            }
                        }(dataType, this.option("rtlEnabled"));
                        column.format = column.format || _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_14__["default"].getFormatByDataType(dataType);
                        column.customizeText = column.customizeText || getCustomizeTextByDataType(dataType);
                        column.defaultFilterOperations = column.defaultFilterOperations || !lookup && DATATYPE_OPERATIONS[dataType] || [];
                        if (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isDefined"])(column.filterOperations)) {
                            setFilterOperationsAsDefaultValues(column)
                        }
                        column.defaultFilterOperation = column.filterOperations && column.filterOperations[0] || "=";
                        column.showEditorAlways = Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isDefined"])(column.showEditorAlways) ? column.showEditorAlways : "boolean" === dataType && !column.cellTemplate && !column.lookup
                    }
                },
                updateColumnDataTypes: function(dataSource) {
                    var that = this;
                    var dateSerializationFormat = that.option("dateSerializationFormat");
                    var firstItems = that._getFirstItems(dataSource);
                    var isColumnDataTypesUpdated = false;
                    Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_6__["each"])(that._columns, (function(index, column) {
                        var i;
                        var value;
                        var dataType;
                        var lookupDataType;
                        var valueDataType;
                        var lookup = column.lookup;
                        if (_ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_14__["default"].isDateType(column.dataType) && void 0 === column.serializationFormat) {
                            column.serializationFormat = dateSerializationFormat
                        }
                        if (lookup && _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_14__["default"].isDateType(lookup.dataType) && void 0 === column.serializationFormat) {
                            lookup.serializationFormat = dateSerializationFormat
                        }
                        if (column.calculateCellValue && firstItems.length) {
                            if (!column.dataType || lookup && !lookup.dataType) {
                                for (i = 0; i < firstItems.length; i++) {
                                    value = column.calculateCellValue(firstItems[i]);
                                    if (!column.dataType) {
                                        valueDataType = getValueDataType(value);
                                        dataType = dataType || valueDataType;
                                        if (dataType && valueDataType && dataType !== valueDataType) {
                                            dataType = "string"
                                        }
                                    }
                                    if (lookup && !lookup.dataType) {
                                        valueDataType = getValueDataType(_ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_14__["default"].getDisplayValue(column, value, firstItems[i]));
                                        lookupDataType = lookupDataType || valueDataType;
                                        if (lookupDataType && valueDataType && lookupDataType !== valueDataType) {
                                            lookupDataType = "string"
                                        }
                                    }
                                }
                                if (dataType || lookupDataType) {
                                    if (dataType) {
                                        column.dataType = dataType
                                    }
                                    if (lookup && lookupDataType) {
                                        lookup.dataType = lookupDataType
                                    }
                                    isColumnDataTypesUpdated = true
                                }
                            }
                            if (void 0 === column.serializationFormat || lookup && void 0 === lookup.serializationFormat) {
                                for (i = 0; i < firstItems.length; i++) {
                                    value = column.calculateCellValue(firstItems[i], true);
                                    if (void 0 === column.serializationFormat) {
                                        column.serializationFormat = getSerializationFormat(column.dataType, value)
                                    }
                                    if (lookup && void 0 === lookup.serializationFormat) {
                                        lookup.serializationFormat = getSerializationFormat(lookup.dataType, lookup.calculateCellValue(value, true))
                                    }
                                }
                            }
                        }
                        that._updateColumnOptions(column, index)
                    }));
                    return isColumnDataTypesUpdated
                },
                _customizeColumns: function(columns) {
                    var customizeColumns = this.option("customizeColumns");
                    if (customizeColumns) {
                        var hasOwnerBand = columns.some((function(column) {
                            return Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isObject"])(column.ownerBand)
                        }));
                        if (hasOwnerBand) {
                            updateIndexes(this)
                        }
                        customizeColumns(columns);
                        assignColumns(this, createColumnsFromOptions(this, columns))
                    }
                },
                updateColumns: function(dataSource, forceApplying) {
                    if (!forceApplying) {
                        this.updateSortingGrouping(dataSource)
                    }
                    if (!dataSource || dataSource.isLoaded()) {
                        var sortParameters = dataSource ? dataSource.sort() || [] : this.getSortDataSourceParameters();
                        var groupParameters = dataSource ? dataSource.group() || [] : this.getGroupDataSourceParameters();
                        var filterParameters = null === dataSource || void 0 === dataSource ? void 0 : dataSource.lastLoadOptions().filter;
                        this._customizeColumns(this._columns);
                        updateIndexes(this);
                        var columns = this._columns;
                        return Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_20__["when"])(this.refresh(true)).always(() => {
                            if (this._columns !== columns) {
                                return
                            }
                            this._updateChanges(dataSource, {
                                sorting: sortParameters,
                                grouping: groupParameters,
                                filtering: filterParameters
                            });
                            fireColumnsChanged(this)
                        })
                    }
                },
                _updateChanges: function(dataSource, parameters) {
                    if (dataSource) {
                        this.updateColumnDataTypes(dataSource);
                        this._dataSourceApplied = true
                    }
                    if (!_ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_14__["default"].equalSortParameters(parameters.sorting, this.getSortDataSourceParameters())) {
                        updateColumnChanges(this, "sorting")
                    }
                    if (!_ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_14__["default"].equalSortParameters(parameters.grouping, this.getGroupDataSourceParameters())) {
                        updateColumnChanges(this, "grouping")
                    }
                    var dataController = this.getController("data");
                    if (dataController && !_ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_14__["default"].equalFilterParameters(parameters.filtering, dataController.getCombinedFilter())) {
                        updateColumnChanges(this, "filtering")
                    }
                    updateColumnChanges(this, "columns")
                },
                updateSortingGrouping: function(dataSource, fromDataSource) {
                    var that = this;
                    var sortParameters;
                    var isColumnsChanged;
                    var updateSortGroupParameterIndexes = function(columns, sortParameters, indexParameterName) {
                        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_6__["each"])(columns, (function(index, column) {
                            delete column[indexParameterName];
                            if (sortParameters) {
                                for (var i = 0; i < sortParameters.length; i++) {
                                    var selector = sortParameters[i].selector;
                                    var isExpanded = sortParameters[i].isExpanded;
                                    if (selector === column.dataField || selector === column.name || selector === column.selector || selector === column.calculateCellValue || selector === column.calculateGroupValue || selector === column.calculateDisplayValue) {
                                        column.sortOrder = column.sortOrder || (sortParameters[i].desc ? "desc" : "asc");
                                        if (void 0 !== isExpanded) {
                                            column.autoExpandGroup = isExpanded
                                        }
                                        column[indexParameterName] = i;
                                        break
                                    }
                                }
                            }
                        }))
                    };
                    if (dataSource) {
                        sortParameters = _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_14__["default"].normalizeSortingInfo(dataSource.sort());
                        var groupParameters = _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_14__["default"].normalizeSortingInfo(dataSource.group());
                        var columnsGroupParameters = that.getGroupDataSourceParameters();
                        var columnsSortParameters = that.getSortDataSourceParameters();
                        var groupingChanged = !_ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_14__["default"].equalSortParameters(groupParameters, columnsGroupParameters, true);
                        var groupExpandingChanged = !groupingChanged && !_ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_14__["default"].equalSortParameters(groupParameters, columnsGroupParameters);
                        if (!that._columns.length) {
                            Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_6__["each"])(groupParameters, (function(index, group) {
                                that._columns.push(group.selector)
                            }));
                            Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_6__["each"])(sortParameters, (function(index, sort) {
                                that._columns.push(sort.selector)
                            }));
                            assignColumns(that, createColumnsFromOptions(that, that._columns))
                        }
                        if ((fromDataSource || !columnsGroupParameters && !that._hasUserState) && (groupingChanged || groupExpandingChanged)) {
                            updateSortGroupParameterIndexes(that._columns, groupParameters, "groupIndex");
                            if (fromDataSource) {
                                groupingChanged && updateColumnChanges(that, "grouping");
                                groupExpandingChanged && updateColumnChanges(that, "groupExpanding");
                                isColumnsChanged = true
                            }
                        }
                        if ((fromDataSource || !columnsSortParameters && !that._hasUserState) && !_ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_14__["default"].equalSortParameters(sortParameters, columnsSortParameters)) {
                            updateSortGroupParameterIndexes(that._columns, sortParameters, "sortIndex");
                            if (fromDataSource) {
                                updateColumnChanges(that, "sorting");
                                isColumnsChanged = true
                            }
                        }
                        if (isColumnsChanged) {
                            fireColumnsChanged(that)
                        }
                    }
                },
                updateFilter: function(filter, remoteFiltering, columnIndex, filterValue) {
                    if (!Array.isArray(filter)) {
                        return filter
                    }
                    filter = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_8__["extend"])([], filter);
                    columnIndex = void 0 !== filter.columnIndex ? filter.columnIndex : columnIndex;
                    filterValue = void 0 !== filter.filterValue ? filter.filterValue : filterValue;
                    if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isString"])(filter[0]) && "!" !== filter[0]) {
                        var column = this.columnOption(filter[0]);
                        if (remoteFiltering) {
                            if (Object(_core_config__WEBPACK_IMPORTED_MODULE_10__["default"])().forceIsoDateParsing && column && column.serializeValue && filter.length > 1) {
                                filter[filter.length - 1] = column.serializeValue(filter[filter.length - 1], "filter")
                            }
                        } else if (column && column.selector) {
                            filter[0] = column.selector;
                            filter[0].columnIndex = column.index
                        }
                    } else if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isFunction"])(filter[0])) {
                        filter[0].columnIndex = columnIndex;
                        filter[0].filterValue = filterValue
                    }
                    for (var i = 0; i < filter.length; i++) {
                        filter[i] = this.updateFilter(filter[i], remoteFiltering, columnIndex, filterValue)
                    }
                    return filter
                },
                columnCount: function() {
                    return this._columns ? this._columns.length : 0
                },
                columnOption: function(identifier, option, value, notFireEvent) {
                    var that = this;
                    var columns = that._columns.concat(that._commandColumns);
                    var column = findColumn(columns, identifier);
                    if (column) {
                        if (1 === arguments.length) {
                            return Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_8__["extend"])({}, column)
                        }
                        if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isString"])(option)) {
                            if (2 === arguments.length) {
                                return columnOptionCore(that, column, option)
                            } else {
                                columnOptionCore(that, column, option, value, notFireEvent)
                            }
                        } else if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isObject"])(option)) {
                            Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_6__["each"])(option, (function(optionName, value) {
                                columnOptionCore(that, column, optionName, value, notFireEvent)
                            }))
                        }
                        fireColumnsChanged(that)
                    }
                },
                clearSorting: function() {
                    var columnCount = this.columnCount();
                    this.beginUpdate();
                    for (var i = 0; i < columnCount; i++) {
                        this.columnOption(i, "sortOrder", void 0)
                    }
                    this.endUpdate()
                },
                clearGrouping: function() {
                    var columnCount = this.columnCount();
                    this.beginUpdate();
                    for (var i = 0; i < columnCount; i++) {
                        this.columnOption(i, "groupIndex", void 0)
                    }
                    this.endUpdate()
                },
                getVisibleIndex: function(index, rowIndex) {
                    var columns = this.getVisibleColumns(rowIndex);
                    for (var i = columns.length - 1; i >= 0; i--) {
                        if (columns[i].index === index) {
                            return i
                        }
                    }
                    return -1
                },
                getVisibleIndexByColumn: function(column, rowIndex) {
                    var visibleColumns = this.getVisibleColumns(rowIndex);
                    var visibleColumn = visibleColumns.filter(col => col.index === column.index && col.command === column.command)[0];
                    return visibleColumns.indexOf(visibleColumn)
                },
                getVisibleColumnIndex: function(id, rowIndex) {
                    var index = this.columnOption(id, "index");
                    return this.getVisibleIndex(index, rowIndex)
                },
                addColumn: function(options) {
                    var column = createColumn(this, options);
                    var index = this._columns.length;
                    this._columns.push(column);
                    if (column.isBand) {
                        this._columns = createColumnsFromOptions(this, this._columns);
                        column = this._columns[index]
                    }
                    column.added = options;
                    updateIndexes(this, column);
                    this.updateColumns(this._dataSource);
                    this._checkColumns()
                },
                deleteColumn: function(id) {
                    var column = this.columnOption(id);
                    if (column && column.index >= 0) {
                        columns = this._columns, void columns.forEach(column => {
                            if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isDefined"])(column.ownerBand)) {
                                column.ownerBand = columns[column.ownerBand]
                            }
                        });
                        this._columns.splice(column.index, 1);
                        if (column.isBand) {
                            var childIndexes = this.getChildrenByBandColumn(column.index).map(column => column.index);
                            this._columns = this._columns.filter(column => childIndexes.indexOf(column.index) < 0)
                        }
                        updateIndexes(this);
                        this.updateColumns(this._dataSource)
                    }
                    var columns
                },
                addCommandColumn: function(options) {
                    var commandColumn = this._commandColumns.filter(column => column.command === options.command)[0];
                    if (!commandColumn) {
                        commandColumn = options;
                        this._commandColumns.push(commandColumn)
                    }
                },
                getUserState: function() {
                    var columns = this._columns;
                    var result = [];
                    var i;

                    function handleStateField(index, value) {
                        if (void 0 !== columns[i][value]) {
                            result[i][value] = columns[i][value]
                        }
                    }
                    for (i = 0; i < columns.length; i++) {
                        result[i] = {};
                        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_6__["each"])(USER_STATE_FIELD_NAMES, handleStateField)
                    }
                    return result
                },
                setName: function(column) {
                    column.name = column.name || column.dataField || column.type
                },
                setUserState: function(state) {
                    var dataSource = this._dataSource;
                    var ignoreColumnOptionNames = this.option("stateStoring.ignoreColumnOptionNames");
                    null === state || void 0 === state ? void 0 : state.forEach(this.setName);
                    if (!ignoreColumnOptionNames) {
                        ignoreColumnOptionNames = [];
                        var commonColumnSettings = this.getCommonSettings();
                        if (!this.option("columnChooser.enabled")) {
                            ignoreColumnOptionNames.push("visible")
                        }
                        if ("none" === this.option("sorting.mode")) {
                            ignoreColumnOptionNames.push("sortIndex", "sortOrder")
                        }
                        if (!commonColumnSettings.allowGrouping) {
                            ignoreColumnOptionNames.push("groupIndex")
                        }
                        if (!commonColumnSettings.allowFixing) {
                            ignoreColumnOptionNames.push("fixed", "fixedPosition")
                        }
                        if (!commonColumnSettings.allowResizing) {
                            ignoreColumnOptionNames.push("width", "visibleWidth")
                        }
                        var isFilterPanelHidden = !this.option("filterPanel.visible");
                        if (!this.option("filterRow.visible") && isFilterPanelHidden) {
                            ignoreColumnOptionNames.push("filterValue", "selectedFilterOperation")
                        }
                        if (!this.option("headerFilter.visible") && isFilterPanelHidden) {
                            ignoreColumnOptionNames.push("filterValues", "filterType")
                        }
                    }
                    this._columnsUserState = state;
                    this._ignoreColumnOptionNames = ignoreColumnOptionNames;
                    this._hasUserState = !!state;
                    updateColumnChanges(this, "filtering");
                    this.init();
                    if (dataSource) {
                        dataSource.sort(this.getSortDataSourceParameters());
                        dataSource.group(this.getGroupDataSourceParameters())
                    }
                },
                _checkColumns: function() {
                    var usedNames = {};
                    var hasEditableColumnWithoutName = false;
                    var duplicatedNames = [];
                    this._columns.forEach(column => {
                        var _column$columns;
                        var name = column.name;
                        var isBand = null === (_column$columns = column.columns) || void 0 === _column$columns ? void 0 : _column$columns.length;
                        var isEditable = column.allowEditing && (column.dataField || column.setCellValue) && !isBand;
                        if (name) {
                            if (usedNames[name]) {
                                duplicatedNames.push('"'.concat(name, '"'))
                            }
                            usedNames[name] = true
                        } else if (isEditable) {
                            hasEditableColumnWithoutName = true
                        }
                    });
                    if (duplicatedNames.length) {
                        _widget_ui_errors__WEBPACK_IMPORTED_MODULE_12__["default"].log("E1059", duplicatedNames.join(", "))
                    }
                    if (hasEditableColumnWithoutName) {
                        _widget_ui_errors__WEBPACK_IMPORTED_MODULE_12__["default"].log("E1060")
                    }
                },
                _createCalculatedColumnOptions: function(columnOptions, bandColumn) {
                    var calculatedColumnOptions = {};
                    var dataField = columnOptions.dataField;
                    if (Array.isArray(columnOptions.columns) && columnOptions.columns.length || columnOptions.isBand) {
                        calculatedColumnOptions.isBand = true;
                        dataField = null
                    }
                    if (dataField) {
                        if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isString"])(dataField)) {
                            var getter = Object(_core_utils_data__WEBPACK_IMPORTED_MODULE_4__["compileGetter"])(dataField);
                            calculatedColumnOptions = {
                                caption: Object(_core_utils_inflector__WEBPACK_IMPORTED_MODULE_15__["captionize"])(dataField),
                                calculateCellValue: function(data, skipDeserialization) {
                                    var value = getter(data);
                                    return this.deserializeValue && !skipDeserialization ? this.deserializeValue(value) : value
                                },
                                setCellValue: defaultSetCellValue,
                                parseValue: function(text) {
                                    var result;
                                    var parsedValue;
                                    if ("number" === this.dataType) {
                                        if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isString"])(text) && this.format) {
                                            result = function(text, format) {
                                                var parsedValue = _localization_number__WEBPACK_IMPORTED_MODULE_17__["default"].parse(text);
                                                if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isNumeric"])(parsedValue)) {
                                                    var formattedValue = _localization_number__WEBPACK_IMPORTED_MODULE_17__["default"].format(parsedValue, format);
                                                    var formattedValueWithDefaultFormat = _localization_number__WEBPACK_IMPORTED_MODULE_17__["default"].format(parsedValue, "decimal");
                                                    if (formattedValue === text || formattedValueWithDefaultFormat === text) {
                                                        return parsedValue
                                                    }
                                                }
                                            }(text.trim(), this.format)
                                        } else if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isDefined"])(text) && Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isNumeric"])(text)) {
                                            result = Number(text)
                                        }
                                    } else if ("boolean" === this.dataType) {
                                        if (text === this.trueText) {
                                            result = true
                                        } else if (text === this.falseText) {
                                            result = false
                                        }
                                    } else if (_ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_14__["default"].isDateType(this.dataType)) {
                                        parsedValue = _localization_date__WEBPACK_IMPORTED_MODULE_18__["default"].parse(text, this.format);
                                        if (parsedValue) {
                                            result = parsedValue
                                        }
                                    } else {
                                        result = text
                                    }
                                    return result
                                }
                            }
                        }
                        calculatedColumnOptions.allowFiltering = true
                    } else {
                        calculatedColumnOptions.allowFiltering = !!columnOptions.calculateFilterExpression
                    }
                    calculatedColumnOptions.calculateFilterExpression = function() {
                        return _shared_filtering__WEBPACK_IMPORTED_MODULE_24__["default"].defaultCalculateFilterExpression.apply(this, arguments)
                    };
                    calculatedColumnOptions.createFilterExpression = function(filterValue) {
                        var result;
                        if (this.calculateFilterExpression) {
                            result = this.calculateFilterExpression.apply(this, arguments)
                        }
                        if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isFunction"])(result)) {
                            result = [result, "=", true]
                        }
                        if (result) {
                            result.columnIndex = this.index;
                            result.filterValue = filterValue
                        }
                        return result
                    };
                    if (!dataField || !Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isString"])(dataField)) {
                        Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_8__["extend"])(true, calculatedColumnOptions, {
                            allowSorting: false,
                            allowGrouping: false,
                            calculateCellValue: function() {
                                return null
                            }
                        })
                    }
                    if (bandColumn) {
                        calculatedColumnOptions.allowFixing = false
                    }
                    if (columnOptions.dataType) {
                        calculatedColumnOptions.userDataType = columnOptions.dataType
                    }
                    if (columnOptions.selectedFilterOperation && !("defaultSelectedFilterOperation" in calculatedColumnOptions)) {
                        calculatedColumnOptions.defaultSelectedFilterOperation = columnOptions.selectedFilterOperation
                    }
                    if (columnOptions.lookup) {
                        calculatedColumnOptions.lookup = {
                            calculateCellValue: function(value, skipDeserialization) {
                                if (this.valueExpr) {
                                    value = this.valueMap && this.valueMap[value]
                                }
                                return this.deserializeValue && !skipDeserialization ? this.deserializeValue(value) : value
                            },
                            updateValueMap: function() {
                                this.valueMap = {};
                                if (this.items) {
                                    var calculateValue = Object(_core_utils_data__WEBPACK_IMPORTED_MODULE_4__["compileGetter"])(this.valueExpr);
                                    var calculateDisplayValue = Object(_core_utils_data__WEBPACK_IMPORTED_MODULE_4__["compileGetter"])(this.displayExpr);
                                    for (var i = 0; i < this.items.length; i++) {
                                        var item = this.items[i];
                                        var displayValue = calculateDisplayValue(item);
                                        this.valueMap[calculateValue(item)] = displayValue;
                                        this.dataType = this.dataType || getValueDataType(displayValue)
                                    }
                                }
                            },
                            update: function() {
                                var that = this;
                                var dataSource = that.dataSource;
                                if (dataSource) {
                                    if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isFunction"])(dataSource) && !_core_utils_variable_wrapper__WEBPACK_IMPORTED_MODULE_3__["default"].isWrapped(dataSource)) {
                                        dataSource = dataSource({})
                                    }
                                    if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isPlainObject"])(dataSource) || dataSource instanceof _data_abstract_store__WEBPACK_IMPORTED_MODULE_21__["default"] || Array.isArray(dataSource)) {
                                        if (that.valueExpr) {
                                            var dataSourceOptions = Object(_data_data_source_utils__WEBPACK_IMPORTED_MODULE_23__["normalizeDataSourceOptions"])(dataSource);
                                            dataSourceOptions.paginate = false;
                                            dataSource = new _data_data_source_data_source__WEBPACK_IMPORTED_MODULE_22__["DataSource"](dataSourceOptions);
                                            return dataSource.load().done((function(data) {
                                                that.items = data;
                                                that.updateValueMap && that.updateValueMap()
                                            }))
                                        }
                                    } else {
                                        _widget_ui_errors__WEBPACK_IMPORTED_MODULE_12__["default"].log("E1016")
                                    }
                                } else {
                                    that.updateValueMap && that.updateValueMap()
                                }
                            }
                        }
                    }
                    calculatedColumnOptions.resizedCallbacks = Object(_core_utils_callbacks__WEBPACK_IMPORTED_MODULE_2__["default"])();
                    if (columnOptions.resized) {
                        calculatedColumnOptions.resizedCallbacks.add(columnOptions.resized.bind(columnOptions))
                    }
                    Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_6__["each"])(calculatedColumnOptions, (function(optionName) {
                        if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isFunction"])(calculatedColumnOptions[optionName]) && 0 !== optionName.indexOf("default")) {
                            var defaultOptionName = "default" + optionName.charAt(0).toUpperCase() + optionName.substr(1);
                            calculatedColumnOptions[defaultOptionName] = calculatedColumnOptions[optionName]
                        }
                    }));
                    return calculatedColumnOptions
                },
                getRowCount: function() {
                    this._rowCount = this._rowCount || function(that) {
                        var rowCount = 1;
                        var bandColumnsCache = that.getBandColumnsCache();
                        var columnParentByIndex = bandColumnsCache.columnParentByIndex;
                        that._columns.forEach((function(column) {
                            var parents = getParentBandColumns(column.index, columnParentByIndex);
                            var invisibleParents = parents.filter((function(column) {
                                return !column.visible
                            }));
                            if (column.visible && !invisibleParents.length) {
                                rowCount = Math.max(rowCount, parents.length + 1)
                            }
                        }));
                        return rowCount
                    }(this);
                    return this._rowCount
                },
                getRowIndex: function(columnIndex, alwaysGetRowIndex) {
                    var column = this._columns[columnIndex];
                    var bandColumnsCache = this.getBandColumnsCache();
                    return column && (alwaysGetRowIndex || column.visible && !(column.command || Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isDefined"])(column.groupIndex))) ? getParentBandColumns(columnIndex, bandColumnsCache.columnParentByIndex).length : 0
                },
                getChildrenByBandColumn: function(bandColumnIndex, onlyVisibleDirectChildren) {
                    var bandColumnsCache = this.getBandColumnsCache();
                    var result = _getChildrenByBandColumn(bandColumnIndex, bandColumnsCache.columnChildrenByIndex, !onlyVisibleDirectChildren);
                    if (onlyVisibleDirectChildren) {
                        return result.filter((function(column) {
                            return column.visible && !column.command
                        })).sort((function(column1, column2) {
                            return column1.visibleIndex - column2.visibleIndex
                        }))
                    }
                    return result
                },
                isParentBandColumn: function(columnIndex, bandColumnIndex) {
                    var result = false;
                    var column = this._columns[columnIndex];
                    var bandColumnsCache = this.getBandColumnsCache();
                    var parentBandColumns = column && getParentBandColumns(columnIndex, bandColumnsCache.columnParentByIndex);
                    if (parentBandColumns) {
                        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_6__["each"])(parentBandColumns, (function(_, bandColumn) {
                            if (bandColumn.index === bandColumnIndex) {
                                result = true;
                                return false
                            }
                        }))
                    }
                    return result
                },
                isParentColumnVisible: function(columnIndex) {
                    var result = true;
                    var bandColumnsCache = this.getBandColumnsCache();
                    var bandColumns = columnIndex >= 0 && getParentBandColumns(columnIndex, bandColumnsCache.columnParentByIndex);
                    bandColumns && Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_6__["each"])(bandColumns, (function(_, bandColumn) {
                        result = result && bandColumn.visible;
                        return result
                    }));
                    return result
                },
                getColumnId: function(column) {
                    if (column.command && column.type === GROUP_COMMAND_COLUMN_NAME) {
                        if (isCustomCommandColumn(this, column)) {
                            return "type:" + column.type
                        }
                        return "command:" + column.command
                    }
                    return column.index
                },
                getCustomizeTextByDataType: getCustomizeTextByDataType,
                getHeaderContentAlignment: function(columnAlignment) {
                    var rtlEnabled = this.option("rtlEnabled");
                    if (rtlEnabled) {
                        return "left" === columnAlignment ? "right" : "left"
                    }
                    return columnAlignment
                }
            }
        }())
    }
};


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.columns_resizing_reordering.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.columns_resizing_reordering.js ***!
  \**********************************************************************************************/
/*! exports provided: columnsResizingReorderingModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "columnsResizingReorderingModule", function() { return columnsResizingReorderingModule; });
/* harmony import */ var _core_utils_size__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/utils/size */ "./node_modules/devextreme/esm/core/utils/size.js");
/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/renderer */ "./node_modules/devextreme/esm/core/renderer.js");
/* harmony import */ var _core_dom_adapter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/dom_adapter */ "./node_modules/devextreme/esm/core/dom_adapter.js");
/* harmony import */ var _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../events/core/events_engine */ "./node_modules/devextreme/esm/events/core/events_engine.js");
/* harmony import */ var _core_utils_callbacks__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/utils/callbacks */ "./node_modules/devextreme/esm/core/utils/callbacks.js");
/* harmony import */ var _core_utils_type__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core/utils/type */ "./node_modules/devextreme/esm/core/utils/type.js");
/* harmony import */ var _core_utils_iterator__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../core/utils/iterator */ "./node_modules/devextreme/esm/core/utils/iterator.js");
/* harmony import */ var _core_utils_extend__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../core/utils/extend */ "./node_modules/devextreme/esm/core/utils/extend.js");
/* harmony import */ var _core_utils_position__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../core/utils/position */ "./node_modules/devextreme/esm/core/utils/position.js");
/* harmony import */ var _events_utils_index__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../events/utils/index */ "./node_modules/devextreme/esm/events/utils/index.js");
/* harmony import */ var _events_pointer__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../events/pointer */ "./node_modules/devextreme/esm/events/pointer.js");
/* harmony import */ var _events_drag__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../events/drag */ "./node_modules/devextreme/esm/events/drag.js");
/* harmony import */ var _ui_grid_core_modules__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./ui.grid_core.modules */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.modules.js");
/* harmony import */ var _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./ui.grid_core.utils */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.utils.js");
/* harmony import */ var _animation_fx__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../animation/fx */ "./node_modules/devextreme/esm/animation/fx.js");
/* harmony import */ var _widget_swatch_container__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../widget/swatch_container */ "./node_modules/devextreme/esm/ui/widget/swatch_container.js");
/**
 * DevExtreme (esm/ui/grid_core/ui.grid_core.columns_resizing_reordering.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
















var COLUMNS_SEPARATOR_CLASS = "columns-separator";
var COLUMNS_SEPARATOR_TRANSPARENT = "columns-separator-transparent";
var DRAGGING_HEADER_CLASS = "drag-header";
var CELL_CONTENT_CLASS = "text-content";
var HEADERS_DRAG_ACTION_CLASS = "drag-action";
var TRACKER_CLASS = "tracker";
var HEADERS_DROP_HIGHLIGHT_CLASS = "drop-highlight";
var BLOCK_SEPARATOR_CLASS = "dx-block-separator";
var HEADER_ROW_CLASS = "dx-header-row";
var WIDGET_CLASS = "dx-widget";
var DRAGGING_COMMAND_CELL_CLASS = "dx-drag-command-cell";
var MODULE_NAMESPACE = "dxDataGridResizingReordering";
var COLUMNS_SEPARATOR_TOUCH_TRACKER_WIDTH = 10;
var DRAGGING_DELTA = 5;
var COLUMN_OPACITY = .5;
var allowResizing = function(that) {
    return that.option("allowColumnResizing") || that.getController("columns").isColumnOptionUsed("allowResizing")
};
var allowReordering = function(that) {
    return that.option("allowColumnReordering") || that.getController("columns").isColumnOptionUsed("allowReordering")
};
var TrackerView = _ui_grid_core_modules__WEBPACK_IMPORTED_MODULE_12__["default"].View.inherit({
    _renderCore: function() {
        this.callBase();
        this.element().addClass(this.addWidgetPrefix(TRACKER_CLASS));
        this.hide()
    },
    _unsubscribeFromCallback: function() {
        if (this._positionChanged) {
            this._tablePositionController.positionChanged.remove(this._positionChanged)
        }
    },
    _subscribeToCallback: function() {
        var that = this;
        that._positionChanged = function(position) {
            var $element = that.element();
            if ($element && $element.hasClass(that.addWidgetPrefix(TRACKER_CLASS))) {
                $element.css({
                    top: position.top
                });
                Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["setHeight"])($element, position.height)
            }
        };
        this._tablePositionController.positionChanged.add(that._positionChanged)
    },
    optionChanged: function(args) {
        if ("allowColumnResizing" === args.name) {
            this._unsubscribeFromCallback();
            if (args.value) {
                this._subscribeToCallback();
                this._invalidate()
            }
        }
        this.callBase(args)
    },
    init: function() {
        this.callBase();
        this._tablePositionController = this.getController("tablePosition");
        this._subscribeToCallback()
    },
    isVisible: function() {
        return allowResizing(this)
    },
    show: function() {
        this.element().show()
    },
    hide: function() {
        this.element() && this.element().hide()
    },
    setHeight: function(value) {
        Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["setHeight"])(this.element(), value)
    },
    dispose: function() {
        this._unsubscribeFromCallback();
        this.callBase()
    }
});
var SeparatorView = _ui_grid_core_modules__WEBPACK_IMPORTED_MODULE_12__["default"].View.inherit({
    _renderSeparator: function() {},
    _renderCore: function(options) {
        this.callBase(options);
        this._isShown = true;
        this._renderSeparator();
        this.hide()
    },
    show: function() {
        this._isShown = true
    },
    hide: function() {
        this._isShown = false
    },
    height: function(value) {
        var $element = this.element();
        if ($element) {
            if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isDefined"])(value)) {
                Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["setHeight"])($element, value)
            } else {
                return Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getHeight"])($element)
            }
        }
    },
    width: function(value) {
        var $element = this.element();
        if ($element) {
            if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isDefined"])(value)) {
                Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["setWidth"])($element, value)
            } else {
                return Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getWidth"])($element)
            }
        }
    }
});
var ColumnsSeparatorView = SeparatorView.inherit({
    _renderSeparator: function() {
        this.callBase();
        var $element = this.element();
        $element.addClass(this.addWidgetPrefix(COLUMNS_SEPARATOR_CLASS))
    },
    _subscribeToCallback: function() {
        var that = this;
        var $element;
        that._positionChanged = function(position) {
            $element = that.element();
            if ($element) {
                $element.css({
                    top: position.top
                });
                Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["setHeight"])($element, position.height)
            }
        };
        that._tablePositionController.positionChanged.add(that._positionChanged)
    },
    _unsubscribeFromCallback: function() {
        this._positionChanged && this._tablePositionController.positionChanged.remove(this._positionChanged)
    },
    _init: function() {
        this._isTransparent = allowResizing(this);
        if (this.isVisible()) {
            this._subscribeToCallback()
        }
    },
    isVisible: function() {
        return this.option("showColumnHeaders") && (allowReordering(this) || allowResizing(this))
    },
    optionChanged: function(args) {
        if ("allowColumnResizing" === args.name) {
            if (args.value) {
                this._init();
                this._invalidate();
                this.hide(true)
            } else {
                this._unsubscribeFromCallback();
                this._isTransparent = allowResizing(this);
                this.hide(true)
            }
        }
        this.callBase(args)
    },
    init: function() {
        this.callBase();
        this._tablePositionController = this.getController("tablePosition");
        this._init()
    },
    show: function() {
        var $element = this.element();
        if ($element && !this._isShown) {
            if (this._isTransparent) {
                $element.removeClass(this.addWidgetPrefix(COLUMNS_SEPARATOR_TRANSPARENT))
            } else {
                $element.show()
            }
        }
        this.callBase()
    },
    hide: function(force) {
        var $element = this.element();
        var columnsSeparatorTransparent = this.addWidgetPrefix(COLUMNS_SEPARATOR_TRANSPARENT);
        if ($element && (this._isShown || force)) {
            if (this._isTransparent) {
                $element.addClass(columnsSeparatorTransparent);
                $element.css("left", "");
                $element.show()
            } else {
                if ($element.hasClass(columnsSeparatorTransparent)) {
                    $element.removeClass(columnsSeparatorTransparent)
                }
                $element.hide()
            }
        }
        this.callBase()
    },
    moveByX: function(outerX) {
        var $element = this.element();
        if ($element) {
            $element.css("left", null === outerX ? 0 : outerX - this._parentElement().offset().left)
        }
    },
    changeCursor: function(cursorName) {
        cursorName = Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isDefined"])(cursorName) ? cursorName : "";
        var $element = this.element();
        if ($element) {
            $element.css("cursor", cursorName)
        }
    },
    dispose: function() {
        this._unsubscribeFromCallback();
        this.callBase()
    }
});
var BlockSeparatorView = SeparatorView.inherit({
    init: function() {
        var that = this;
        this.callBase();
        this.getController("data").loadingChanged.add((function(isLoading) {
            if (!isLoading) {
                that.hide()
            }
        }))
    },
    _renderSeparator: function() {
        this.callBase();
        this.element().addClass(BLOCK_SEPARATOR_CLASS).html("&nbsp;")
    },
    hide: function() {
        var $parent = this._parentElement();
        var $element = this.element();
        if ($element && this._isShown) {
            $element.css("display", "none")
        }
        if ($parent && !$parent.children("." + BLOCK_SEPARATOR_CLASS).length) {
            $parent.prepend(this.element())
        }
        this.callBase()
    },
    isVisible: function() {
        var groupPanelOptions = this.option("groupPanel");
        var columnChooserOptions = this.option("columnChooser");
        return groupPanelOptions && groupPanelOptions.visible || columnChooserOptions && columnChooserOptions.enabled
    },
    show: function(targetLocation) {
        var $element = this.element();
        var startAnimate = function(toOptions) {
            _animation_fx__WEBPACK_IMPORTED_MODULE_14__["default"].stop($element, true);
            _animation_fx__WEBPACK_IMPORTED_MODULE_14__["default"].animate($element, {
                type: "slide",
                from: {
                    width: 0,
                    display: toOptions.display
                },
                to: toOptions,
                duration: 300,
                easing: "swing"
            })
        };
        if ($element && !this._isShown) {
            switch (targetLocation) {
                case "group":
                    startAnimate({
                        width: "50px",
                        display: "inline-block"
                    });
                    break;
                case "columnChooser":
                    startAnimate({
                        width: "100%",
                        display: "block"
                    });
                    break;
                default:
                    $element.css("display", "")
            }
        }
        this.callBase()
    }
});
var DraggingHeaderView = _ui_grid_core_modules__WEBPACK_IMPORTED_MODULE_12__["default"].View.inherit({
    _isDragging: false,
    isDragging: function() {
        return this._isDragging
    },
    _getDraggingPanelByPos: function(pos) {
        var result;
        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_6__["each"])(this._dragOptions.draggingPanels, (function(index, draggingPanel) {
            if (draggingPanel) {
                var boundingRect = draggingPanel.getBoundingRect();
                if (boundingRect && (void 0 === boundingRect.bottom || pos.y < boundingRect.bottom) && (void 0 === boundingRect.top || pos.y > boundingRect.top) && (void 0 === boundingRect.left || pos.x > boundingRect.left) && (void 0 === boundingRect.right || pos.x < boundingRect.right)) {
                    result = draggingPanel;
                    return false
                }
            }
        }));
        return result
    },
    _renderCore: function() {
        this.element().addClass(this.addWidgetPrefix(DRAGGING_HEADER_CLASS) + " " + this.addWidgetPrefix(CELL_CONTENT_CLASS) + " " + WIDGET_CLASS).hide()
    },
    _resetTargetColumnOptions: function() {
        var params = this._dropOptions;
        params.targetColumnIndex = -1;
        delete params.targetColumnElement;
        delete params.isLast;
        delete params.posX;
        delete params.posY
    },
    _getVisibleIndexObject: function(rowIndex, visibleIndex) {
        if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isDefined"])(rowIndex)) {
            return {
                columnIndex: visibleIndex,
                rowIndex: rowIndex
            }
        }
        return visibleIndex
    },
    dispose: function() {
        var element = this.element();
        this._dragOptions = null;
        element && element.parent().find("." + this.addWidgetPrefix(DRAGGING_HEADER_CLASS)).remove()
    },
    isVisible: function() {
        var columnsController = this.getController("columns");
        var commonColumnSettings = columnsController.getCommonSettings();
        return this.option("showColumnHeaders") && (allowReordering(this) || commonColumnSettings.allowGrouping || commonColumnSettings.allowHiding)
    },
    init: function() {
        var that = this;
        this.callBase();
        this._controller = this.getController("draggingHeader");
        this._columnsResizerViewController = this.getController("columnsResizer");
        this.getController("data").loadingChanged.add((function(isLoading) {
            var element = that.element();
            if (!isLoading && element) {
                element.hide()
            }
        }))
    },
    dragHeader: function(options) {
        var columnElement = options.columnElement;
        var isCommandColumn = !!options.sourceColumn.type;
        this._isDragging = true;
        this._dragOptions = options;
        this._dropOptions = {
            sourceIndex: options.index,
            sourceColumnIndex: this._getVisibleIndexObject(options.rowIndex, options.columnIndex),
            sourceColumnElement: options.columnElement,
            sourceLocation: options.sourceLocation
        };
        var document = _core_dom_adapter__WEBPACK_IMPORTED_MODULE_2__["default"].getDocument();
        this._onSelectStart = document.onselectstart;
        document.onselectstart = function() {
            return false
        };
        this._controller.drag(this._dropOptions);
        this.element().css({
            textAlign: columnElement && columnElement.css("textAlign"),
            height: columnElement && (isCommandColumn && columnElement.get(0).clientHeight || Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getHeight"])(columnElement)),
            width: columnElement && (isCommandColumn && columnElement.get(0).clientWidth || Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getWidth"])(columnElement)),
            whiteSpace: columnElement && columnElement.css("whiteSpace")
        }).addClass(this.addWidgetPrefix(HEADERS_DRAG_ACTION_CLASS)).toggleClass(DRAGGING_COMMAND_CELL_CLASS, isCommandColumn).text(isCommandColumn ? "" : options.sourceColumn.caption);
        this.element().appendTo(_widget_swatch_container__WEBPACK_IMPORTED_MODULE_15__["default"].getSwatchContainer(columnElement))
    },
    moveHeader: function(args) {
        var e = args.event;
        var that = e.data.that;
        var eventData = Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_9__["eventData"])(e);
        var isResizing = that._columnsResizerViewController ? that._columnsResizerViewController.isResizing() : false;
        var dragOptions = that._dragOptions;
        if (that._isDragging && !isResizing) {
            var $element = that.element();
            var moveDeltaX = Math.abs(eventData.x - dragOptions.columnElement.offset().left - dragOptions.deltaX);
            var moveDeltaY = Math.abs(eventData.y - dragOptions.columnElement.offset().top - dragOptions.deltaY);
            if ($element.is(":visible") || moveDeltaX > DRAGGING_DELTA || moveDeltaY > DRAGGING_DELTA) {
                $element.show();
                var newLeft = eventData.x - dragOptions.deltaX;
                var newTop = eventData.y - dragOptions.deltaY;
                $element.css({
                    left: newLeft,
                    top: newTop
                });
                that.dockHeader(eventData)
            }
            e.preventDefault()
        }
    },
    dockHeader: function(eventData) {
        var targetDraggingPanel = this._getDraggingPanelByPos(eventData);
        var controller = this._controller;
        var params = this._dropOptions;
        var dragOptions = this._dragOptions;
        if (targetDraggingPanel) {
            var rtlEnabled = this.option("rtlEnabled");
            var isVerticalOrientation = "columnChooser" === targetDraggingPanel.getName();
            var axisName = isVerticalOrientation ? "y" : "x";
            var targetLocation = targetDraggingPanel.getName();
            var rowIndex = "headers" === targetLocation ? dragOptions.rowIndex : void 0;
            var sourceColumn = dragOptions.sourceColumn;
            var columnElements = targetDraggingPanel.getColumnElements(rowIndex, null === sourceColumn || void 0 === sourceColumn ? void 0 : sourceColumn.ownerBand) || [];
            var pointsByTarget = dragOptions.pointsByTarget = dragOptions.pointsByTarget || {};
            var pointsByColumns = "columnChooser" === targetLocation ? [] : pointsByTarget[targetLocation] || controller._generatePointsByColumns(Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_7__["extend"])({}, dragOptions, {
                targetDraggingPanel: targetDraggingPanel,
                columns: targetDraggingPanel.getColumns(rowIndex),
                columnElements: columnElements,
                isVerticalOrientation: isVerticalOrientation,
                startColumnIndex: "headers" === targetLocation && Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(columnElements[0]).index()
            }));
            pointsByTarget[targetLocation] = pointsByColumns;
            params.targetLocation = targetLocation;
            if (pointsByColumns.length > 0) {
                for (var i = 0; i < pointsByColumns.length; i++) {
                    var centerPosition = pointsByColumns[i + 1] && (pointsByColumns[i][axisName] + pointsByColumns[i + 1][axisName]) / 2;
                    if (void 0 === centerPosition || (rtlEnabled && "x" === axisName ? eventData[axisName] > centerPosition : eventData[axisName] < centerPosition)) {
                        params.targetColumnIndex = this._getVisibleIndexObject(rowIndex, pointsByColumns[i].columnIndex);
                        if (columnElements[i]) {
                            params.targetColumnElement = columnElements.eq(i);
                            params.isLast = false
                        } else {
                            params.targetColumnElement = columnElements.last();
                            params.isLast = true
                        }
                        params.posX = pointsByColumns[i].x;
                        params.posY = pointsByColumns[i].y;
                        controller.dock(params);
                        break
                    }
                }
            } else {
                this._resetTargetColumnOptions();
                controller.dock(params)
            }
        }
    },
    dropHeader: function(args) {
        var e = args.event;
        var that = e.data.that;
        var controller = that._controller;
        that.element().hide();
        if (controller && that._isDragging) {
            controller.drop(that._dropOptions)
        }
        that.element().appendTo(that._parentElement());
        that._dragOptions = null;
        that._dropOptions = null;
        that._isDragging = false;
        _core_dom_adapter__WEBPACK_IMPORTED_MODULE_2__["default"].getDocument().onselectstart = that._onSelectStart || null
    }
});
var isNextColumnResizingMode = function(that) {
    return "widget" !== that.option("columnResizingMode")
};
var ColumnsResizerViewController = _ui_grid_core_modules__WEBPACK_IMPORTED_MODULE_12__["default"].ViewController.inherit({
    _isHeadersRowArea: function(posY) {
        if (this._columnHeadersView) {
            var element = this._columnHeadersView.element();
            if (element) {
                var offsetTop = element.offset().top;
                var headersRowHeight = this._columnHeadersView.getHeadersRowHeight();
                return posY >= offsetTop && posY <= offsetTop + headersRowHeight
            }
        }
        return false
    },
    _isRtlParentStyle: function() {
        var _this$_$parentContain;
        return this.option("rtlEnabled") && "rtl" === (null === (_this$_$parentContain = this._$parentContainer) || void 0 === _this$_$parentContain ? void 0 : _this$_$parentContain.parent().css("direction"))
    },
    _pointCreated: function(point, cellsLength, columns) {
        var isNextColumnMode = isNextColumnResizingMode(this);
        var rtlEnabled = this.option("rtlEnabled");
        var isRtlParentStyle = this._isRtlParentStyle();
        var firstPointColumnIndex = !isNextColumnMode && rtlEnabled && !isRtlParentStyle ? 0 : 1;
        if (point.index >= firstPointColumnIndex && point.index < cellsLength + (!isNextColumnMode && (!rtlEnabled || isRtlParentStyle) ? 1 : 0)) {
            point.columnIndex -= firstPointColumnIndex;
            var currentColumn = columns[point.columnIndex] || {};
            var nextColumn = columns[point.columnIndex + 1] || {};
            return !(isNextColumnMode ? currentColumn.allowResizing && nextColumn.allowResizing : currentColumn.allowResizing)
        }
        return true
    },
    _getTargetPoint: function(pointsByColumns, currentX, deltaX) {
        if (pointsByColumns) {
            for (var i = 0; i < pointsByColumns.length; i++) {
                if (pointsByColumns[i].x === pointsByColumns[0].x && pointsByColumns[i + 1] && pointsByColumns[i].x === pointsByColumns[i + 1].x) {
                    continue
                }
                if (pointsByColumns[i].x - deltaX <= currentX && currentX <= pointsByColumns[i].x + deltaX) {
                    return pointsByColumns[i]
                }
            }
        }
        return null
    },
    _moveSeparator: function(args) {
        var _that$_draggingHeader;
        var e = args.event;
        var that = e.data;
        var columnsSeparatorWidth = that._columnsSeparatorView.width();
        var isNextColumnMode = isNextColumnResizingMode(that);
        var deltaX = columnsSeparatorWidth / 2;
        var parentOffset = that._$parentContainer.offset();
        var parentOffsetLeft = parentOffset.left;
        var eventData = Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_9__["eventData"])(e);
        var rtlEnabled = that.option("rtlEnabled");
        var isRtlParentStyle = this._isRtlParentStyle();
        var isDragging = null === (_that$_draggingHeader = that._draggingHeaderView) || void 0 === _that$_draggingHeader ? void 0 : _that$_draggingHeader.isDragging();
        if (that._isResizing && that._resizingInfo) {
            if ((parentOffsetLeft <= eventData.x || !isNextColumnMode && isRtlParentStyle) && (!isNextColumnMode || eventData.x <= parentOffsetLeft + Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getWidth"])(that._$parentContainer))) {
                if (that._updateColumnsWidthIfNeeded(eventData.x)) {
                    var $cell = that._columnHeadersView.getColumnElements().eq(that._resizingInfo.currentColumnIndex);
                    var cell = $cell[0];
                    if (cell) {
                        var outerWidth = cell.getBoundingClientRect().width;
                        that._columnsSeparatorView.moveByX($cell.offset().left + ((isNextColumnMode || isRtlParentStyle) && rtlEnabled ? 0 : outerWidth));
                        that._tablePositionController.update(that._targetPoint.y);
                        e.preventDefault()
                    }
                }
            }
        } else if (!isDragging) {
            if (that._isHeadersRowArea(eventData.y)) {
                if (that._previousParentOffset) {
                    if (that._previousParentOffset.left !== parentOffset.left || that._previousParentOffset.top !== parentOffset.top) {
                        that.pointsByColumns(null)
                    }
                }
                that._targetPoint = that._getTargetPoint(that.pointsByColumns(), eventData.x, columnsSeparatorWidth);
                that._previousParentOffset = parentOffset;
                that._isReadyResizing = false;
                if (that._targetPoint) {
                    that._columnsSeparatorView.changeCursor("col-resize");
                    that._columnsSeparatorView.moveByX(that._targetPoint.x - deltaX);
                    that._tablePositionController.update(that._targetPoint.y);
                    that._isReadyResizing = true;
                    e.preventDefault()
                } else {
                    that._columnsSeparatorView.changeCursor();
                    that._columnsSeparatorView.moveByX(null)
                }
            } else {
                that.pointsByColumns(null);
                that._isReadyResizing = false;
                that._columnsSeparatorView.changeCursor();
                that._columnsSeparatorView.moveByX(null)
            }
        }
    },
    _endResizing: function(args) {
        var e = args.event;
        var that = e.data;
        if (that._isResizing) {
            that.pointsByColumns(null);
            that._resizingInfo = null;
            that._columnsSeparatorView.hide();
            that._columnsSeparatorView.changeCursor();
            that._trackerView.hide();
            that._isReadyResizing = false;
            that._isResizing = false
        }
    },
    _getNextColumnIndex: function(currentColumnIndex) {
        return currentColumnIndex + 1
    },
    _setupResizingInfo: function(posX) {
        var currentColumnIndex = this._targetPoint.columnIndex;
        var nextColumnIndex = this._getNextColumnIndex(currentColumnIndex);
        var currentHeader = this._columnHeadersView.getHeaderElement(currentColumnIndex);
        var nextHeader = this._columnHeadersView.getHeaderElement(nextColumnIndex);
        this._resizingInfo = {
            startPosX: posX,
            currentColumnIndex: currentColumnIndex,
            currentColumnWidth: currentHeader && currentHeader.length > 0 ? Object(_core_utils_position__WEBPACK_IMPORTED_MODULE_8__["getBoundingRect"])(currentHeader[0]).width : 0,
            nextColumnIndex: nextColumnIndex,
            nextColumnWidth: nextHeader && nextHeader.length > 0 ? Object(_core_utils_position__WEBPACK_IMPORTED_MODULE_8__["getBoundingRect"])(nextHeader[0]).width : 0
        }
    },
    _startResizing: function(args) {
        var e = args.event;
        var that = e.data;
        var eventData = Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_9__["eventData"])(e);
        if (Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_9__["isTouchEvent"])(e)) {
            if (that._isHeadersRowArea(eventData.y)) {
                that._targetPoint = that._getTargetPoint(that.pointsByColumns(), eventData.x, COLUMNS_SEPARATOR_TOUCH_TRACKER_WIDTH);
                if (that._targetPoint) {
                    that._columnsSeparatorView.moveByX(that._targetPoint.x - that._columnsSeparatorView.width() / 2);
                    that._isReadyResizing = true
                }
            } else {
                that._isReadyResizing = false
            }
        }
        if (that._isReadyResizing) {
            that._setupResizingInfo(eventData.x);
            that._isResizing = true;
            that._tablePositionController.update(that._targetPoint.y);
            that._columnsSeparatorView.show();
            that._trackerView.show();
            var scrollable = that.component.getScrollable();
            if (scrollable && that._isRtlParentStyle()) {
                that._scrollRight = Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getWidth"])(scrollable.$content()) - Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getWidth"])(scrollable.container()) - scrollable.scrollLeft()
            }
            e.preventDefault();
            e.stopPropagation()
        }
        if (this.isResizing()) {
            this.getController("editorFactory").loseFocus()
        }
    },
    _generatePointsByColumns: function() {
        var that = this;
        var columns = that._columnsController ? that._columnsController.getVisibleColumns() : [];
        var cells = that._columnHeadersView.getColumnElements();
        var pointsByColumns = [];
        if (cells && cells.length > 0) {
            pointsByColumns = _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_13__["default"].getPointsByColumns(cells, (function(point) {
                return that._pointCreated(point, cells.length, columns)
            }))
        }
        that._pointsByColumns = pointsByColumns
    },
    _unsubscribeFromEvents: function() {
        this._moveSeparatorHandler && _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__["default"].off(_core_dom_adapter__WEBPACK_IMPORTED_MODULE_2__["default"].getDocument(), Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_9__["addNamespace"])(_events_pointer__WEBPACK_IMPORTED_MODULE_10__["default"].move, MODULE_NAMESPACE), this._moveSeparatorHandler);
        this._startResizingHandler && _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__["default"].off(this._$parentContainer, Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_9__["addNamespace"])(_events_pointer__WEBPACK_IMPORTED_MODULE_10__["default"].down, MODULE_NAMESPACE), this._startResizingHandler);
        if (this._endResizingHandler) {
            _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__["default"].off(this._columnsSeparatorView.element(), Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_9__["addNamespace"])(_events_pointer__WEBPACK_IMPORTED_MODULE_10__["default"].up, MODULE_NAMESPACE), this._endResizingHandler);
            _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__["default"].off(_core_dom_adapter__WEBPACK_IMPORTED_MODULE_2__["default"].getDocument(), Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_9__["addNamespace"])(_events_pointer__WEBPACK_IMPORTED_MODULE_10__["default"].up, MODULE_NAMESPACE), this._endResizingHandler)
        }
    },
    _subscribeToEvents: function() {
        this._moveSeparatorHandler = this.createAction(this._moveSeparator);
        this._startResizingHandler = this.createAction(this._startResizing);
        this._endResizingHandler = this.createAction(this._endResizing);
        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__["default"].on(_core_dom_adapter__WEBPACK_IMPORTED_MODULE_2__["default"].getDocument(), Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_9__["addNamespace"])(_events_pointer__WEBPACK_IMPORTED_MODULE_10__["default"].move, MODULE_NAMESPACE), this, this._moveSeparatorHandler);
        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__["default"].on(this._$parentContainer, Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_9__["addNamespace"])(_events_pointer__WEBPACK_IMPORTED_MODULE_10__["default"].down, MODULE_NAMESPACE), this, this._startResizingHandler);
        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__["default"].on(this._columnsSeparatorView.element(), Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_9__["addNamespace"])(_events_pointer__WEBPACK_IMPORTED_MODULE_10__["default"].up, MODULE_NAMESPACE), this, this._endResizingHandler);
        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__["default"].on(_core_dom_adapter__WEBPACK_IMPORTED_MODULE_2__["default"].getDocument(), Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_9__["addNamespace"])(_events_pointer__WEBPACK_IMPORTED_MODULE_10__["default"].up, MODULE_NAMESPACE), this, this._endResizingHandler)
    },
    _updateColumnsWidthIfNeeded: function(posX) {
        var deltaX;
        var needUpdate = false;
        var nextCellWidth;
        var resizingInfo = this._resizingInfo;
        var columnsController = this._columnsController;
        var visibleColumns = columnsController.getVisibleColumns();
        var columnsSeparatorWidth = this._columnsSeparatorView.width();
        var contentWidth = this._rowsView.contentWidth();
        var isNextColumnMode = isNextColumnResizingMode(this);
        var adaptColumnWidthByRatio = isNextColumnMode && this.option("adaptColumnWidthByRatio") && !this.option("columnAutoWidth");
        var minWidth;
        var nextColumn;
        var cellWidth;
        var rtlEnabled = this.option("rtlEnabled");
        var isRtlParentStyle = this._isRtlParentStyle();

        function isPercentWidth(width) {
            return Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isString"])(width) && "%" === width.slice(-1)
        }

        function setColumnWidth(column, columnWidth, contentWidth, adaptColumnWidthByRatio) {
            if (column) {
                var oldColumnWidth = column.width;
                if (oldColumnWidth) {
                    adaptColumnWidthByRatio = isPercentWidth(oldColumnWidth)
                }
                if (adaptColumnWidthByRatio) {
                    columnsController.columnOption(column.index, "visibleWidth", columnWidth);
                    columnsController.columnOption(column.index, "width", (columnWidth / contentWidth * 100).toFixed(3) + "%")
                } else {
                    columnsController.columnOption(column.index, "visibleWidth", null);
                    columnsController.columnOption(column.index, "width", columnWidth)
                }
            }
        }
        deltaX = posX - resizingInfo.startPosX;
        if ((isNextColumnMode || isRtlParentStyle) && rtlEnabled) {
            deltaX = -deltaX
        }
        cellWidth = resizingInfo.currentColumnWidth + deltaX;
        var column = visibleColumns[resizingInfo.currentColumnIndex];
        minWidth = column && column.minWidth || columnsSeparatorWidth;
        needUpdate = cellWidth >= minWidth;
        if (isNextColumnMode) {
            nextCellWidth = resizingInfo.nextColumnWidth - deltaX;
            nextColumn = visibleColumns[resizingInfo.nextColumnIndex];
            minWidth = nextColumn && nextColumn.minWidth || columnsSeparatorWidth;
            needUpdate = needUpdate && nextCellWidth >= minWidth
        }
        if (needUpdate) {
            columnsController.beginUpdate();
            cellWidth = Math.floor(cellWidth);
            contentWidth = function(contentWidth, visibleColumns) {
                var allColumnsHaveWidth = visibleColumns.every(column => column.width);
                if (allColumnsHaveWidth) {
                    var totalPercent = visibleColumns.reduce((sum, column) => {
                        if (isPercentWidth(column.width)) {
                            sum += parseFloat(column.width)
                        }
                        return sum
                    }, 0);
                    if (totalPercent > 100) {
                        contentWidth = contentWidth / totalPercent * 100
                    }
                }
                return contentWidth
            }(contentWidth, visibleColumns);
            setColumnWidth(column, cellWidth, contentWidth, adaptColumnWidthByRatio);
            if (isNextColumnMode) {
                nextCellWidth = Math.floor(nextCellWidth);
                setColumnWidth(nextColumn, nextCellWidth, contentWidth, adaptColumnWidthByRatio)
            } else {
                var columnWidths = this._columnHeadersView.getColumnWidths();
                columnWidths[resizingInfo.currentColumnIndex] = cellWidth;
                var hasScroll = columnWidths.reduce((totalWidth, width) => totalWidth + width, 0) > this._rowsView.contentWidth();
                if (!hasScroll) {
                    var lastColumnIndex = _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_13__["default"].getLastResizableColumnIndex(visibleColumns);
                    if (lastColumnIndex >= 0) {
                        columnsController.columnOption(visibleColumns[lastColumnIndex].index, "visibleWidth", "auto")
                    }
                }
                for (var i = 0; i < columnWidths.length; i++) {
                    if (visibleColumns[i] && visibleColumns[i] !== column && void 0 === visibleColumns[i].width) {
                        columnsController.columnOption(visibleColumns[i].index, "width", columnWidths[i])
                    }
                }
            }
            columnsController.endUpdate();
            if (!isNextColumnMode) {
                this.component.updateDimensions();
                var scrollable = this.component.getScrollable();
                if (scrollable && isRtlParentStyle) {
                    var left = Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getWidth"])(scrollable.$content()) - Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getWidth"])(scrollable.container()) - this._scrollRight;
                    scrollable.scrollTo({
                        left: left
                    })
                }
            }
        }
        return needUpdate
    },
    _subscribeToCallback: function(callback, handler) {
        callback.add(handler);
        this._subscribesToCallbacks.push({
            callback: callback,
            handler: handler
        })
    },
    _unsubscribeFromCallbacks: function() {
        for (var i = 0; i < this._subscribesToCallbacks.length; i++) {
            var subscribe = this._subscribesToCallbacks[i];
            subscribe.callback.remove(subscribe.handler)
        }
        this._subscribesToCallbacks = []
    },
    _unsubscribes: function() {
        this._unsubscribeFromEvents();
        this._unsubscribeFromCallbacks()
    },
    _init: function() {
        var that = this;
        var generatePointsByColumnsHandler = function() {
            if (!that._isResizing) {
                that.pointsByColumns(null)
            }
        };
        var generatePointsByColumnsScrollHandler = function(offset) {
            if (that._scrollLeft !== offset.left) {
                that._scrollLeft = offset.left;
                that.pointsByColumns(null)
            }
        };
        that._columnsSeparatorView = that.getView("columnsSeparatorView");
        that._columnHeadersView = that.getView("columnHeadersView");
        that._trackerView = that.getView("trackerView");
        that._rowsView = that.getView("rowsView");
        that._columnsController = that.getController("columns");
        that._tablePositionController = that.getController("tablePosition");
        that._$parentContainer = that.component.$element();
        that._draggingHeaderView = that.component.getView("draggingHeaderView");
        that._subscribeToCallback(that._columnHeadersView.renderCompleted, generatePointsByColumnsHandler);
        that._subscribeToCallback(that._columnHeadersView.resizeCompleted, generatePointsByColumnsHandler);
        that._subscribeToCallback(that._columnsSeparatorView.renderCompleted, (function() {
            that._unsubscribeFromEvents();
            that._subscribeToEvents()
        }));
        that._subscribeToCallback(that._rowsView.renderCompleted, (function() {
            that._rowsView.scrollChanged.remove(generatePointsByColumnsScrollHandler);
            that._rowsView.scrollChanged.add(generatePointsByColumnsScrollHandler)
        }));
        var previousScrollbarVisibility = 0 !== that._rowsView.getScrollbarWidth();
        var previousTableHeight = 0;
        that._subscribeToCallback(that.getController("tablePosition").positionChanged, (function(e) {
            if (that._isResizing && !that._rowsView.isResizing) {
                var scrollbarVisibility = 0 !== that._rowsView.getScrollbarWidth();
                if (previousScrollbarVisibility !== scrollbarVisibility || previousTableHeight && previousTableHeight !== e.height) {
                    previousScrollbarVisibility = scrollbarVisibility;
                    previousTableHeight = e.height;
                    that.component.updateDimensions()
                } else {
                    that._rowsView.updateFreeSpaceRowHeight()
                }
            }
            previousTableHeight = e.height
        }))
    },
    optionChanged: function(args) {
        this.callBase(args);
        if ("allowColumnResizing" === args.name) {
            if (args.value) {
                this._init();
                this._subscribeToEvents()
            } else {
                this._unsubscribes()
            }
        }
    },
    isResizing: function() {
        return this._isResizing
    },
    init: function() {
        this._subscribesToCallbacks = [];
        if (allowResizing(this)) {
            this._init()
        }
    },
    pointsByColumns: function(value) {
        if (void 0 !== value) {
            this._pointsByColumns = value
        } else {
            if (!this._pointsByColumns) {
                this._generatePointsByColumns()
            }
            return this._pointsByColumns
        }
    },
    dispose: function() {
        this._unsubscribes();
        this.callBase()
    }
});
var TablePositionViewController = _ui_grid_core_modules__WEBPACK_IMPORTED_MODULE_12__["default"].ViewController.inherit({
    update: function(top) {
        var params = {};
        var $element = this._columnHeadersView.element();
        var offset = $element && $element.offset();
        var offsetTop = offset && offset.top || 0;
        var diffOffsetTop = Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isDefined"])(top) ? Math.abs(top - offsetTop) : 0;
        var columnsHeadersHeight = this._columnHeadersView ? this._columnHeadersView.getHeight() : 0;
        var scrollBarWidth = this._rowsView.getScrollbarWidth(true);
        var rowsHeight = this._rowsView ? this._rowsView.height() - scrollBarWidth : 0;
        var columnsResizerController = this.component.getController("columnsResizer");
        var draggingHeaderView = this.component.getView("draggingHeaderView");
        params.height = columnsHeadersHeight;
        var isDraggingOrResizing = false !== columnsResizerController.isResizing() || draggingHeaderView.isDragging();
        if (isDraggingOrResizing) {
            params.height += rowsHeight - diffOffsetTop
        }
        if (null !== top && $element && $element.length) {
            params.top = $element[0].offsetTop + diffOffsetTop
        }
        this.positionChanged.fire(params)
    },
    init: function() {
        var that = this;
        that.callBase();
        that._columnHeadersView = this.getView("columnHeadersView");
        that._rowsView = this.getView("rowsView");
        that._pagerView = this.getView("pagerView");
        that._rowsView.resizeCompleted.add((function() {
            if (that.option("allowColumnResizing")) {
                var targetPoint = that.getController("columnsResizer")._targetPoint;
                that.update(targetPoint ? targetPoint.y : null)
            }
        }))
    },
    ctor: function(component) {
        this.callBase(component);
        this.positionChanged = Object(_core_utils_callbacks__WEBPACK_IMPORTED_MODULE_4__["default"])()
    }
});
var DraggingHeaderViewController = _ui_grid_core_modules__WEBPACK_IMPORTED_MODULE_12__["default"].ViewController.inherit({
    _generatePointsByColumns: function(options) {
        var that = this;
        return _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_13__["default"].getPointsByColumns(options.columnElements, (function(point) {
            return that._pointCreated(point, options.columns, options.targetDraggingPanel.getName(), options.sourceColumn)
        }), options.isVerticalOrientation, options.startColumnIndex)
    },
    _pointCreated: function(point, columns, location, sourceColumn) {
        var targetColumn = columns[point.columnIndex];
        var prevColumn = columns[point.columnIndex - 1];
        switch (location) {
            case "columnChooser":
                return true;
            case "headers":
                return sourceColumn && !sourceColumn.allowReordering || (!targetColumn || !targetColumn.allowReordering) && (!prevColumn || !prevColumn.allowReordering);
            default:
                return 0 === columns.length
        }
    },
    _subscribeToEvents: function(draggingHeader, draggingPanels) {
        var that = this;
        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_6__["each"])(draggingPanels, (function(_, draggingPanel) {
            if (draggingPanel) {
                var columns;
                var rowCount = draggingPanel.getRowCount ? draggingPanel.getRowCount() : 1;
                var nameDraggingPanel = draggingPanel.getName();
                var subscribeToEvents = function(index, columnElement) {
                    if (!columnElement) {
                        return
                    }
                    var $columnElement = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(columnElement);
                    var column = columns[index];
                    if (draggingPanel.allowDragging(column, nameDraggingPanel, draggingPanels)) {
                        $columnElement.addClass(that.addWidgetPrefix(HEADERS_DRAG_ACTION_CLASS));
                        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__["default"].on($columnElement, Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_9__["addNamespace"])(_events_drag__WEBPACK_IMPORTED_MODULE_11__["start"], MODULE_NAMESPACE), that.createAction((function(args) {
                            var e = args.event;
                            var eventData = Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_9__["eventData"])(e);
                            draggingHeader.dragHeader({
                                deltaX: eventData.x - Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(e.currentTarget).offset().left,
                                deltaY: eventData.y - Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(e.currentTarget).offset().top,
                                sourceColumn: column,
                                index: column.index,
                                columnIndex: index,
                                columnElement: $columnElement,
                                sourceLocation: nameDraggingPanel,
                                draggingPanels: draggingPanels,
                                rowIndex: that._columnsController.getRowIndex(column.index, true)
                            })
                        })));
                        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__["default"].on($columnElement, Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_9__["addNamespace"])(_events_drag__WEBPACK_IMPORTED_MODULE_11__["move"], MODULE_NAMESPACE), {
                            that: draggingHeader
                        }, that.createAction(draggingHeader.moveHeader));
                        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__["default"].on($columnElement, Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_9__["addNamespace"])(_events_drag__WEBPACK_IMPORTED_MODULE_11__["end"], MODULE_NAMESPACE), {
                            that: draggingHeader
                        }, that.createAction(draggingHeader.dropHeader))
                    }
                };
                for (var i = 0; i < rowCount; i++) {
                    var columnElements = draggingPanel.getColumnElements(i) || [];
                    if (columnElements.length) {
                        columns = draggingPanel.getColumns(i) || [];
                        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_6__["each"])(columnElements, subscribeToEvents)
                    }
                }
            }
        }))
    },
    _unsubscribeFromEvents: function(draggingHeader, draggingPanels) {
        var that = this;
        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_6__["each"])(draggingPanels, (function(_, draggingPanel) {
            if (draggingPanel) {
                var columnElements = draggingPanel.getColumnElements() || [];
                Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_6__["each"])(columnElements, (function(index, columnElement) {
                    var $columnElement = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(columnElement);
                    _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__["default"].off($columnElement, Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_9__["addNamespace"])(_events_drag__WEBPACK_IMPORTED_MODULE_11__["start"], MODULE_NAMESPACE));
                    _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__["default"].off($columnElement, Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_9__["addNamespace"])(_events_drag__WEBPACK_IMPORTED_MODULE_11__["move"], MODULE_NAMESPACE));
                    _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__["default"].off($columnElement, Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_9__["addNamespace"])(_events_drag__WEBPACK_IMPORTED_MODULE_11__["end"], MODULE_NAMESPACE));
                    $columnElement.removeClass(that.addWidgetPrefix(HEADERS_DRAG_ACTION_CLASS))
                }))
            }
        }))
    },
    _getSeparator: function(targetLocation) {
        return "headers" === targetLocation ? this._columnsSeparatorView : this._blockSeparatorView
    },
    hideSeparators: function(type) {
        var blockSeparator = this._blockSeparatorView;
        var columnsSeparator = this._columnsSeparatorView;
        this._animationColumnIndex = null;
        blockSeparator && blockSeparator.hide();
        "block" !== type && columnsSeparator && columnsSeparator.hide()
    },
    init: function() {
        var that = this;
        that.callBase();
        that._columnsController = that.getController("columns");
        that._columnHeadersView = that.getView("columnHeadersView");
        that._columnsSeparatorView = that.getView("columnsSeparatorView");
        that._draggingHeaderView = that.getView("draggingHeaderView");
        that._rowsView = that.getView("rowsView");
        that._blockSeparatorView = that.getView("blockSeparatorView");
        that._headerPanelView = that.getView("headerPanel");
        that._columnChooserView = that.getView("columnChooserView");
        var subscribeToEvents = function() {
            if (that._draggingHeaderView) {
                var draggingPanels = [that._columnChooserView, that._columnHeadersView, that._headerPanelView];
                that._unsubscribeFromEvents(that._draggingHeaderView, draggingPanels);
                that._subscribeToEvents(that._draggingHeaderView, draggingPanels)
            }
        };
        that._columnHeadersView.renderCompleted.add(subscribeToEvents);
        that._headerPanelView && that._headerPanelView.renderCompleted.add(subscribeToEvents);
        that._columnChooserView && that._columnChooserView.renderCompleted.add(subscribeToEvents)
    },
    allowDrop: function(parameters) {
        return this._columnsController.allowMoveColumn(parameters.sourceColumnIndex, parameters.targetColumnIndex, parameters.sourceLocation, parameters.targetLocation)
    },
    drag: function(parameters) {
        var sourceIndex = parameters.sourceIndex;
        var sourceLocation = parameters.sourceLocation;
        var sourceColumnElement = parameters.sourceColumnElement;
        var headersView = this._columnHeadersView;
        var rowsView = this._rowsView;
        if (sourceColumnElement) {
            sourceColumnElement.css({
                opacity: COLUMN_OPACITY
            });
            if ("headers" === sourceLocation) {
                headersView && headersView.setRowsOpacity(sourceIndex, COLUMN_OPACITY);
                rowsView && rowsView.setRowsOpacity(sourceIndex, COLUMN_OPACITY)
            }
        }
    },
    dock: function(parameters) {
        var that = this;
        var targetColumnIndex = Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isObject"])(parameters.targetColumnIndex) ? parameters.targetColumnIndex.columnIndex : parameters.targetColumnIndex;
        var sourceLocation = parameters.sourceLocation;
        var targetLocation = parameters.targetLocation;
        var separator = that._getSeparator(targetLocation);
        var hasTargetVisibleIndex = targetColumnIndex >= 0;
        that._columnHeadersView.element().find("." + HEADER_ROW_CLASS).toggleClass(that.addWidgetPrefix(HEADERS_DROP_HIGHLIGHT_CLASS), "headers" !== sourceLocation && "headers" === targetLocation && !hasTargetVisibleIndex);
        if (separator) {
            if (that.allowDrop(parameters) && hasTargetVisibleIndex) {
                if ("group" === targetLocation || "columnChooser" === targetLocation) {
                    ! function() {
                        if (that._animationColumnIndex !== targetColumnIndex) {
                            that.hideSeparators();
                            separator.element()[parameters.isLast ? "insertAfter" : "insertBefore"](parameters.targetColumnElement);
                            that._animationColumnIndex = targetColumnIndex;
                            separator.show(targetLocation)
                        }
                    }()
                } else {
                    that.hideSeparators("block");
                    that.getController("tablePosition").update(parameters.posY);
                    separator.moveByX(parameters.posX - separator.width());
                    separator.show()
                }
            } else {
                that.hideSeparators()
            }
        }
    },
    drop: function(parameters) {
        var sourceColumnElement = parameters.sourceColumnElement;
        if (sourceColumnElement) {
            sourceColumnElement.css({
                opacity: ""
            });
            this._columnHeadersView.setRowsOpacity(parameters.sourceIndex, "");
            this._rowsView.setRowsOpacity(parameters.sourceIndex, "");
            this._columnHeadersView.element().find("." + HEADER_ROW_CLASS).removeClass(this.addWidgetPrefix(HEADERS_DROP_HIGHLIGHT_CLASS))
        }
        if (this.allowDrop(parameters)) {
            var separator = this._getSeparator(parameters.targetLocation);
            if (separator) {
                separator.hide()
            }
            this._columnsController.moveColumn(parameters.sourceColumnIndex, parameters.targetColumnIndex, parameters.sourceLocation, parameters.targetLocation)
        }
    },
    dispose: function() {
        if (this._draggingHeaderView) {
            this._unsubscribeFromEvents(this._draggingHeaderView, [this._columnChooserView, this._columnHeadersView, this._headerPanelView])
        }
    }
});
var columnsResizingReorderingModule = {
    views: {
        columnsSeparatorView: ColumnsSeparatorView,
        blockSeparatorView: BlockSeparatorView,
        draggingHeaderView: DraggingHeaderView,
        trackerView: TrackerView
    },
    controllers: {
        draggingHeader: DraggingHeaderViewController,
        tablePosition: TablePositionViewController,
        columnsResizer: ColumnsResizerViewController
    },
    extenders: {
        views: {
            rowsView: {
                _needUpdateRowHeight: function(itemCount) {
                    var wordWrapEnabled = this.option("wordWrapEnabled");
                    var columnsResizerController = this.getController("columnsResizer");
                    var isResizing = columnsResizerController.isResizing();
                    return this.callBase.apply(this, arguments) || itemCount > 0 && wordWrapEnabled && isResizing
                }
            }
        },
        controllers: {
            editorFactory: {
                renderFocusOverlay: function() {
                    if (this.getController("columnsResizer").isResizing()) {
                        return
                    }
                    return this.callBase.apply(this, arguments)
                }
            }
        }
    }
};


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.columns_view.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.columns_view.js ***!
  \*******************************************************************************/
/*! exports provided: ColumnsView */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ColumnsView", function() { return ColumnsView; });
/* harmony import */ var _core_utils_size__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/utils/size */ "./node_modules/devextreme/esm/core/utils/size.js");
/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/renderer */ "./node_modules/devextreme/esm/core/renderer.js");
/* harmony import */ var _core_dom_adapter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/dom_adapter */ "./node_modules/devextreme/esm/core/dom_adapter.js");
/* harmony import */ var _core_utils_window__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/utils/window */ "./node_modules/devextreme/esm/core/utils/window.js");
/* harmony import */ var _events_core_events_engine__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../events/core/events_engine */ "./node_modules/devextreme/esm/events/core/events_engine.js");
/* harmony import */ var _core_element_data__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core/element_data */ "./node_modules/devextreme/esm/core/element_data.js");
/* harmony import */ var _events_pointer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../events/pointer */ "./node_modules/devextreme/esm/events/pointer.js");
/* harmony import */ var _events_click__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../events/click */ "./node_modules/devextreme/esm/events/click.js");
/* harmony import */ var _events_double_click__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../events/double_click */ "./node_modules/devextreme/esm/events/double_click.js");
/* harmony import */ var _core_utils_browser__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../core/utils/browser */ "./node_modules/devextreme/esm/core/utils/browser.js");
/* harmony import */ var _core_utils_common__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../core/utils/common */ "./node_modules/devextreme/esm/core/utils/common.js");
/* harmony import */ var _core_utils_style__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../core/utils/style */ "./node_modules/devextreme/esm/core/utils/style.js");
/* harmony import */ var _core_element__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../core/element */ "./node_modules/devextreme/esm/core/element.js");
/* harmony import */ var _core_utils_type__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../core/utils/type */ "./node_modules/devextreme/esm/core/utils/type.js");
/* harmony import */ var _core_utils_position__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../core/utils/position */ "./node_modules/devextreme/esm/core/utils/position.js");
/* harmony import */ var _core_utils_iterator__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../core/utils/iterator */ "./node_modules/devextreme/esm/core/utils/iterator.js");
/* harmony import */ var _core_utils_extend__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../core/utils/extend */ "./node_modules/devextreme/esm/core/utils/extend.js");
/* harmony import */ var _ui_grid_core_modules__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./ui.grid_core.modules */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.modules.js");
/* harmony import */ var _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./ui.grid_core.utils */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.utils.js");
/* harmony import */ var _ui_grid_core_column_state_mixin__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./ui.grid_core.column_state_mixin */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.column_state_mixin.js");
/* harmony import */ var _core_utils_deferred__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../core/utils/deferred */ "./node_modules/devextreme/esm/core/utils/deferred.js");
/* harmony import */ var _core_utils_support__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../../core/utils/support */ "./node_modules/devextreme/esm/core/utils/support.js");
/**
 * DevExtreme (esm/ui/grid_core/ui.grid_core.columns_view.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */






















var SCROLL_CONTAINER_CLASS = "scroll-container";
var SCROLLABLE_SIMULATED_CLASS = "scrollable-simulated";
var GROUP_SPACE_CLASS = "group-space";
var CONTENT_CLASS = "content";
var TABLE_CLASS = "table";
var TABLE_FIXED_CLASS = "table-fixed";
var CONTENT_FIXED_CLASS = "content-fixed";
var ROW_CLASS = "dx-row";
var GROUP_ROW_CLASS = "dx-group-row";
var GROUP_CELL_CLASS = "dx-group-cell";
var DETAIL_ROW_CLASS = "dx-master-detail-row";
var FILTER_ROW_CLASS = "filter-row";
var ERROR_ROW_CLASS = "dx-error-row";
var CELL_UPDATED_ANIMATION_CLASS = "cell-updated-animation";
var HIDDEN_COLUMNS_WIDTH = "0.0001px";
var CELL_HINT_VISIBLE = "dxCellHintVisible";
var FORM_FIELD_ITEM_CONTENT_CLASS = "dx-field-item-content";
var appendElementTemplate = {
    render: function(options) {
        options.container.append(options.content)
    }
};
var subscribeToRowEvents = function(that, $table) {
    var touchTarget;
    var touchCurrentTarget;
    var timeoutId;

    function clearTouchTargets(timeout) {
        return setTimeout((function() {
            touchTarget = touchCurrentTarget = null
        }), timeout)
    }
    _events_core_events_engine__WEBPACK_IMPORTED_MODULE_4__["default"].on($table, "touchstart touchend", ".dx-row", (function(e) {
        clearTimeout(timeoutId);
        if ("touchstart" === e.type) {
            touchTarget = e.target;
            touchCurrentTarget = e.currentTarget;
            timeoutId = clearTouchTargets(1e3)
        } else {
            timeoutId = clearTouchTargets()
        }
    }));
    _events_core_events_engine__WEBPACK_IMPORTED_MODULE_4__["default"].on($table, [_events_click__WEBPACK_IMPORTED_MODULE_7__["name"], _events_double_click__WEBPACK_IMPORTED_MODULE_8__["name"], _events_pointer__WEBPACK_IMPORTED_MODULE_6__["default"].down].join(" "), ".dx-row", {
        useNative: that._isNativeClick()
    }, that.createAction((function(e) {
        var event = e.event;
        if (touchTarget) {
            event.target = touchTarget;
            event.currentTarget = touchCurrentTarget
        }
        if (!Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(event.target).closest("a").length) {
            e.rowIndex = that.getRowIndex(event.currentTarget);
            if (e.rowIndex >= 0) {
                e.rowElement = Object(_core_element__WEBPACK_IMPORTED_MODULE_12__["getPublicElement"])(Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(event.currentTarget));
                e.columns = that.getColumns();
                if (event.type === _events_pointer__WEBPACK_IMPORTED_MODULE_6__["default"].down) {
                    that._rowPointerDown(e)
                } else if (event.type === _events_click__WEBPACK_IMPORTED_MODULE_7__["name"]) {
                    that._rowClick(e)
                } else {
                    that._rowDblClick(e)
                }
            }
        }
    })))
};
var getWidthStyle = function(width) {
    if ("auto" === width) {
        return ""
    }
    return Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_13__["isNumeric"])(width) ? width + "px" : width
};
var setCellWidth = function(cell, column, width) {
    cell.style.width = cell.style.maxWidth = "auto" === column.width ? "" : width
};
var copyAttributes = function(element, newElement) {
    if (!element || !newElement) {
        return
    }
    var oldAttributes = element.attributes;
    var newAttributes = newElement.attributes;
    var i;
    for (i = 0; i < oldAttributes.length; i++) {
        var name = oldAttributes[i].nodeName;
        if (!newElement.hasAttribute(name)) {
            element.removeAttribute(name)
        }
    }
    for (i = 0; i < newAttributes.length; i++) {
        element.setAttribute(newAttributes[i].nodeName, newAttributes[i].nodeValue)
    }
};
var ColumnsView = _ui_grid_core_modules__WEBPACK_IMPORTED_MODULE_17__["default"].View.inherit(_ui_grid_core_column_state_mixin__WEBPACK_IMPORTED_MODULE_19__["default"]).inherit({
    _createScrollableOptions: function() {
        var scrollingOptions = this.option("scrolling");
        var useNativeScrolling = this.option("scrolling.useNative");
        var options = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_16__["extend"])({}, scrollingOptions, {
            direction: "both",
            bounceEnabled: false,
            useKeyboard: false
        });
        if (void 0 === useNativeScrolling) {
            useNativeScrolling = true
        }
        if ("auto" === useNativeScrolling) {
            delete options.useNative;
            delete options.useSimulatedScrollbar
        } else {
            options.useNative = !!useNativeScrolling;
            options.useSimulatedScrollbar = !useNativeScrolling
        }
        return options
    },
    _updateCell: function($cell, parameters) {
        if (parameters.rowType) {
            this._cellPrepared($cell, parameters)
        }
    },
    _createCell: function(options) {
        var column = options.column;
        var alignment = column.alignment || Object(_core_utils_position__WEBPACK_IMPORTED_MODULE_14__["getDefaultAlignment"])(this.option("rtlEnabled"));
        var cell = _core_dom_adapter__WEBPACK_IMPORTED_MODULE_2__["default"].createElement("td");
        cell.style.textAlign = alignment;
        var $cell = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(cell);
        if ("data" === options.rowType && column.headerId && !column.type) {
            if (this.component.option("showColumnHeaders")) {
                this.setAria("describedby", column.headerId, $cell)
            }
        }
        if (column.cssClass) {
            $cell.addClass(column.cssClass)
        }
        if ("expand" === column.command) {
            $cell.addClass(column.cssClass);
            $cell.addClass(this.addWidgetPrefix(GROUP_SPACE_CLASS))
        }
        if (column.colspan > 1) {
            $cell.attr("colSpan", column.colspan)
        } else if (!column.isBand && "auto" !== column.visibleWidth && this.option("columnAutoWidth")) {
            if (column.width || column.minWidth) {
                cell.style.minWidth = getWidthStyle(column.minWidth || column.width)
            }
            if (column.width) {
                setCellWidth(cell, column, getWidthStyle(column.width))
            }
        }
        return $cell
    },
    _createRow: function(rowObject, tagName) {
        tagName = tagName || "tr";
        var $element = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])("<".concat(tagName, ">")).addClass(ROW_CLASS);
        this.setAria("role", "row", $element);
        return $element
    },
    _isAltRow: function(row) {
        return row && row.dataIndex % 2 === 1
    },
    _createTable: function(columns, isAppend) {
        var that = this;
        var $table = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])("<table>").addClass(that.addWidgetPrefix(TABLE_CLASS)).addClass(that.addWidgetPrefix(TABLE_FIXED_CLASS));
        if (columns && !isAppend) {
            $table.append(that._createColGroup(columns));
            if (_core_utils_browser__WEBPACK_IMPORTED_MODULE_9__["default"].safari) {
                $table.append(Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])("<thead>").append("<tr>"))
            }
            that.setAria("role", "presentation", $table)
        } else {
            that.setAria("hidden", true, $table)
        }
        this.setAria("role", "presentation", Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])("<tbody>").appendTo($table));
        if (isAppend) {
            return $table
        }
        if (_core_utils_browser__WEBPACK_IMPORTED_MODULE_9__["default"].mozilla) {
            _events_core_events_engine__WEBPACK_IMPORTED_MODULE_4__["default"].on($table, "mousedown", "td", (function(e) {
                if (e.ctrlKey) {
                    e.preventDefault()
                }
            }))
        }
        if (that.option("cellHintEnabled")) {
            _events_core_events_engine__WEBPACK_IMPORTED_MODULE_4__["default"].on($table, "mousemove", ".dx-row > td", this.createAction((function(args) {
                var e = args.event;
                var $element = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(e.target);
                var $cell = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(e.currentTarget);
                var $row = $cell.parent();
                var isDataRow = $row.hasClass("dx-data-row");
                var isHeaderRow = $row.hasClass("dx-header-row");
                var isGroupRow = $row.hasClass(GROUP_ROW_CLASS);
                var isMasterDetailRow = $row.hasClass(DETAIL_ROW_CLASS);
                var isFilterRow = $row.hasClass(that.addWidgetPrefix(FILTER_ROW_CLASS));
                var visibleColumns = that._columnsController.getVisibleColumns();
                var rowOptions = $row.data("options");
                var columnIndex = $cell.index();
                var cellOptions = rowOptions && rowOptions.cells && rowOptions.cells[columnIndex];
                var column = cellOptions ? cellOptions.column : visibleColumns[columnIndex];
                if (!isMasterDetailRow && !isFilterRow && (!isDataRow || isDataRow && column && !column.cellTemplate) && (!isHeaderRow || isHeaderRow && column && !column.headerCellTemplate) && (!isGroupRow || isGroupRow && column && (void 0 === column.groupIndex || !column.groupCellTemplate))) {
                    if ($element.data(CELL_HINT_VISIBLE)) {
                        $element.removeAttr("title");
                        $element.data(CELL_HINT_VISIBLE, false)
                    }
                    var difference = $element[0].scrollWidth - $element[0].clientWidth;
                    if (difference > 0 && !Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_13__["isDefined"])($element.attr("title"))) {
                        $element.attr("title", $element.text());
                        $element.data(CELL_HINT_VISIBLE, true)
                    }
                }
            })))
        }
        var getOptions = function(event) {
            var $cell = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(event.currentTarget);
            var $fieldItemContent = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(event.target).closest("." + FORM_FIELD_ITEM_CONTENT_CLASS);
            var $row = $cell.parent();
            var rowOptions = $row.data("options");
            var options = rowOptions && rowOptions.cells && rowOptions.cells[$cell.index()];
            if (!$cell.closest("table").is(event.delegateTarget)) {
                return
            }
            var resultOptions = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_16__["extend"])({}, options, {
                cellElement: Object(_core_element__WEBPACK_IMPORTED_MODULE_12__["getPublicElement"])($cell),
                event: event,
                eventType: event.type
            });
            resultOptions.rowIndex = that.getRowIndex($row);
            if ($fieldItemContent.length) {
                var formItemOptions = $fieldItemContent.data("dx-form-item");
                if (formItemOptions.column) {
                    resultOptions.column = formItemOptions.column;
                    resultOptions.columnIndex = that._columnsController.getVisibleIndex(resultOptions.column.index)
                }
            }
            return resultOptions
        };
        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_4__["default"].on($table, "mouseover", ".dx-row > td", (function(e) {
            var options = getOptions(e);
            options && that.executeAction("onCellHoverChanged", options)
        }));
        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_4__["default"].on($table, "mouseout", ".dx-row > td", (function(e) {
            var options = getOptions(e);
            options && that.executeAction("onCellHoverChanged", options)
        }));
        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_4__["default"].on($table, _events_click__WEBPACK_IMPORTED_MODULE_7__["name"], ".dx-row > td", (function(e) {
            var options = getOptions(e);
            options && that.executeAction("onCellClick", options)
        }));
        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_4__["default"].on($table, _events_double_click__WEBPACK_IMPORTED_MODULE_8__["name"], ".dx-row > td", (function(e) {
            var options = getOptions(e);
            options && that.executeAction("onCellDblClick", options)
        }));
        subscribeToRowEvents(that, $table);
        return $table
    },
    _isNativeClick: _core_utils_common__WEBPACK_IMPORTED_MODULE_10__["noop"],
    _rowPointerDown: _core_utils_common__WEBPACK_IMPORTED_MODULE_10__["noop"],
    _rowClick: _core_utils_common__WEBPACK_IMPORTED_MODULE_10__["noop"],
    _rowDblClick: _core_utils_common__WEBPACK_IMPORTED_MODULE_10__["noop"],
    _createColGroup: function(columns) {
        var colgroupElement = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])("<colgroup>");
        for (var i = 0; i < columns.length; i++) {
            var colspan = columns[i].colspan || 1;
            for (var j = 0; j < colspan; j++) {
                colgroupElement.append(this._createCol(columns[i]))
            }
        }
        return colgroupElement
    },
    _createCol: function(column) {
        var width = column.visibleWidth || column.width;
        if ("adaptiveHidden" === width) {
            width = HIDDEN_COLUMNS_WIDTH
        }
        var col = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])("<col>");
        Object(_core_utils_style__WEBPACK_IMPORTED_MODULE_11__["setWidth"])(col, width);
        return col
    },
    renderDelayedTemplates: function(change) {
        var delayedTemplates = this._delayedTemplates;
        var syncTemplates = delayedTemplates.filter(template => !template.async);
        var asyncTemplates = delayedTemplates.filter(template => template.async);
        this._delayedTemplates = [];
        this._renderDelayedTemplatesCore(syncTemplates, false, change);
        this._renderDelayedTemplatesCoreAsync(asyncTemplates)
    },
    _renderDelayedTemplatesCoreAsync: function(templates) {
        var that = this;
        if (templates.length) {
            Object(_core_utils_window__WEBPACK_IMPORTED_MODULE_3__["getWindow"])().setTimeout((function() {
                that._renderDelayedTemplatesCore(templates, true)
            }))
        }
    },
    _renderDelayedTemplatesCore: function(templates, isAsync, change) {
        var date = new Date;
        while (templates.length) {
            var templateParameters = templates.shift();
            var options = templateParameters.options;
            var doc = _core_dom_adapter__WEBPACK_IMPORTED_MODULE_2__["default"].getDocument();
            if (!isAsync || Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(options.container).closest(doc).length) {
                if (change) {
                    options.change = change
                }
                templateParameters.template.render(options)
            }
            if (isAsync && new Date - date > 30) {
                this._renderDelayedTemplatesCoreAsync(templates);
                break
            }
        }
        if (!templates.length && this._delayedTemplates.length) {
            this.renderDelayedTemplates()
        }
    },
    _processTemplate: function(template) {
        var renderingTemplate;
        if (template && template.render && !Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_13__["isRenderer"])(template)) {
            renderingTemplate = {
                allowRenderToDetachedContainer: template.allowRenderToDetachedContainer,
                render: function(options) {
                    template.render(options.container, options.model, options.change);
                    options.deferred && options.deferred.resolve()
                }
            }
        } else if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_13__["isFunction"])(template)) {
            renderingTemplate = {
                render: function(options) {
                    var renderedTemplate = template(Object(_core_element__WEBPACK_IMPORTED_MODULE_12__["getPublicElement"])(options.container), options.model, options.change);
                    if (renderedTemplate && (renderedTemplate.nodeType || Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_13__["isRenderer"])(renderedTemplate))) {
                        options.container.append(renderedTemplate)
                    }
                    options.deferred && options.deferred.resolve()
                }
            }
        } else {
            var templateID = Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_13__["isString"])(template) ? template : Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(template).attr("id");
            if (!templateID) {
                renderingTemplate = this.getTemplate(template)
            } else {
                if (!this._templatesCache[templateID]) {
                    this._templatesCache[templateID] = this.getTemplate(template)
                }
                renderingTemplate = this._templatesCache[templateID]
            }
        }
        return renderingTemplate
    },
    renderTemplate: function(container, template, options, allowRenderToDetachedContainer, change) {
        var renderingTemplate = this._processTemplate(template, options);
        var column = options.column;
        var isDataRow = "data" === options.rowType;
        var templateDeferred = new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_20__["Deferred"];
        var templateOptions = {
            container: container,
            model: options,
            deferred: templateDeferred,
            onRendered: () => {
                templateDeferred.resolve()
            }
        };
        if (renderingTemplate) {
            options.component = this.component;
            var async = column && (column.renderAsync && isDataRow || this.option("renderAsync") && (false !== column.renderAsync && (column.command || column.showEditorAlways) && isDataRow || "filter" === options.rowType));
            if ((renderingTemplate.allowRenderToDetachedContainer || allowRenderToDetachedContainer) && !async) {
                renderingTemplate.render(templateOptions)
            } else {
                this._delayedTemplates.push({
                    template: renderingTemplate,
                    options: templateOptions,
                    async: async
                })
            }
            if (change) {
                change.templateDeferreds = change.templateDeferreds || [];
                change.templateDeferreds.push(templateDeferred)
            }
        } else {
            templateDeferred.reject()
        }
        return templateDeferred.promise()
    },
    _getBodies: function(tableElement) {
        return Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(tableElement).children("tbody").not(".dx-header").not(".dx-footer")
    },
    _wrapRowIfNeed: function($table, $row) {
        var hasDataRowTemplate = this.option().rowTemplate || this.option("dataRowTemplate");
        var $tBodies = hasDataRowTemplate && this._getBodies(this._tableElement || $table);
        if ($tBodies && $tBodies.filter("." + ROW_CLASS).length) {
            var $tbody = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])("<tbody>").addClass($row.attr("class"));
            this.setAria("role", "presentation", $tbody);
            return $tbody.append($row)
        }
        return $row
    },
    _appendRow: function($table, $row, appendTemplate) {
        appendTemplate = appendTemplate || appendElementTemplate;
        appendTemplate.render({
            content: $row,
            container: $table
        })
    },
    _resizeCore: function() {
        var scrollLeft = this._scrollLeft;
        if (scrollLeft >= 0) {
            this._scrollLeft = 0;
            this.scrollTo({
                left: scrollLeft
            })
        }
    },
    _renderCore: function(e) {
        var $root = this.element().parent();
        if (!$root || $root.parent().length) {
            this.renderDelayedTemplates(e)
        }
    },
    _renderTable: function(options) {
        options = options || {};
        options.columns = this._columnsController.getVisibleColumns();
        var changeType = options.change && options.change.changeType;
        var $table = this._createTable(options.columns, "append" === changeType || "prepend" === changeType || "update" === changeType);
        this._renderRows($table, options);
        return $table
    },
    _renderRows: function($table, options) {
        var rows = this._getRows(options.change);
        var columnIndices = options.change && options.change.columnIndices || [];
        var changeTypes = options.change && options.change.changeTypes || [];
        for (var i = 0; i < rows.length; i++) {
            this._renderRow($table, Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_16__["extend"])({
                row: rows[i],
                columnIndices: columnIndices[i],
                changeType: changeTypes[i]
            }, options))
        }
    },
    _renderRow: function($table, options) {
        if (!options.columnIndices) {
            options.row.cells = []
        }
        var $row = this._createRow(options.row);
        var $wrappedRow = this._wrapRowIfNeed($table, $row);
        if ("remove" !== options.changeType) {
            this._renderCells($row, options)
        }
        this._appendRow($table, $wrappedRow);
        var rowOptions = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_16__["extend"])({
            columns: options.columns
        }, options.row);
        this._addWatchMethod(rowOptions, options.row);
        this._rowPrepared($wrappedRow, rowOptions, options.row)
    },
    _needRenderCell: function(columnIndex, columnIndices) {
        return !columnIndices || columnIndices.indexOf(columnIndex) >= 0
    },
    _renderCells: function($row, options) {
        var columnIndex = 0;
        var row = options.row;
        var columns = options.columns;
        for (var i = 0; i < columns.length; i++) {
            if (this._needRenderCell(i, options.columnIndices)) {
                this._renderCell($row, Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_16__["extend"])({
                    column: columns[i],
                    columnIndex: columnIndex,
                    value: row.values && row.values[columnIndex],
                    oldValue: row.oldValues && row.oldValues[columnIndex]
                }, options))
            }
            if (columns[i].colspan > 1) {
                columnIndex += columns[i].colspan
            } else {
                columnIndex++
            }
        }
    },
    _updateCells: function($rowElement, $newRowElement, columnIndices) {
        var $cells = $rowElement.children();
        var $newCells = $newRowElement.children();
        var highlightChanges = this.option("highlightChanges");
        var cellUpdatedClass = this.addWidgetPrefix(CELL_UPDATED_ANIMATION_CLASS);
        columnIndices.forEach((function(columnIndex, index) {
            var $cell = $cells.eq(columnIndex);
            var $newCell = $newCells.eq(index);
            $cell.replaceWith($newCell);
            if (highlightChanges && !$newCell.hasClass("dx-command-expand")) {
                $newCell.addClass(cellUpdatedClass)
            }
        }));
        copyAttributes($rowElement.get(0), $newRowElement.get(0))
    },
    _setCellAriaAttributes: function($cell, cellOptions) {
        if ("freeSpace" !== cellOptions.rowType) {
            this.setAria("selected", false, $cell);
            this.setAria("role", "gridcell", $cell);
            var columnIndexOffset = this._columnsController.getColumnIndexOffset();
            var ariaColIndex = cellOptions.columnIndex + columnIndexOffset + 1;
            this.setAria("colindex", ariaColIndex, $cell)
        }
    },
    _renderCell: function($row, options) {
        var cellOptions = this._getCellOptions(options);
        if (options.columnIndices) {
            if (options.row.cells) {
                var cellIndex = options.row.cells.findIndex(cell => cell.columnIndex === cellOptions.columnIndex);
                options.row.cells[cellIndex] = cellOptions
            }
        } else {
            options.row.cells.push(cellOptions)
        }
        var $cell = this._createCell(cellOptions);
        this._setCellAriaAttributes($cell, cellOptions);
        this._renderCellContent($cell, cellOptions);
        $row.get(0).appendChild($cell.get(0));
        return $cell
    },
    _renderCellContent: function($cell, options) {
        var template = this._getCellTemplate(options);
        Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_20__["when"])(!template || this.renderTemplate($cell, template, options)).done(() => {
            this._updateCell($cell, options)
        })
    },
    _getCellTemplate: function() {},
    _getRows: function() {
        return []
    },
    _getCellOptions: function(options) {
        var cellOptions = {
            column: options.column,
            columnIndex: options.columnIndex,
            rowType: options.row.rowType,
            isAltRow: this._isAltRow(options.row)
        };
        this._addWatchMethod(cellOptions);
        return cellOptions
    },
    _addWatchMethod: function(options, source) {
        if (!this.option("repaintChangesOnly")) {
            return
        }
        var watchers = [];
        source = source || options;
        source.watch = source.watch || function(getter, updateValueFunc, updateRowFunc) {
            var oldValue = getter(source.data);
            var watcher = function(row) {
                if (row && updateRowFunc) {
                    updateRowFunc(row)
                }
                var newValue = getter(source.data);
                if (JSON.stringify(oldValue) !== JSON.stringify(newValue)) {
                    if (row) {
                        updateValueFunc(newValue)
                    }
                    oldValue = newValue
                }
            };
            watchers.push(watcher);
            return function() {
                var index = watchers.indexOf(watcher);
                if (index >= 0) {
                    watchers.splice(index, 1)
                }
            }
        };
        source.update = source.update || function(row, keepRow) {
            if (row) {
                this.data = options.data = row.data;
                this.rowIndex = options.rowIndex = row.rowIndex;
                this.dataIndex = options.dataIndex = row.dataIndex;
                this.isExpanded = options.isExpanded = row.isExpanded;
                if (options.row && !keepRow) {
                    options.row = row
                }
            }
            watchers.forEach((function(watcher) {
                watcher(row)
            }))
        };
        if (source !== options) {
            options.watch = source.watch.bind(source)
        }
        return options
    },
    _cellPrepared: function(cell, options) {
        options.cellElement = Object(_core_element__WEBPACK_IMPORTED_MODULE_12__["getPublicElement"])(Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(cell));
        this.executeAction("onCellPrepared", options)
    },
    _rowPrepared: function($row, options) {
        Object(_core_element_data__WEBPACK_IMPORTED_MODULE_5__["data"])($row.get(0), "options", options);
        options.rowElement = Object(_core_element__WEBPACK_IMPORTED_MODULE_12__["getPublicElement"])($row);
        this.executeAction("onRowPrepared", options)
    },
    _columnOptionChanged: function(e) {
        var optionNames = e.optionNames;
        if (_ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_18__["default"].checkChanges(optionNames, ["width", "visibleWidth"])) {
            var visibleColumns = this._columnsController.getVisibleColumns();
            var widths = _core_utils_iterator__WEBPACK_IMPORTED_MODULE_15__["map"](visibleColumns, (function(column) {
                var width = column.visibleWidth || column.width;
                return Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_13__["isDefined"])(width) ? width : "auto"
            }));
            this.setColumnWidths({
                widths: widths,
                optionNames: optionNames
            });
            return
        }
        if (!this._requireReady) {
            this.render()
        }
    },
    getCellIndex: function($cell) {
        var cellIndex = $cell.length ? $cell[0].cellIndex : -1;
        return cellIndex
    },
    getTableElements: function() {
        return this._tableElement || Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])()
    },
    getTableElement: function() {
        return this._tableElement
    },
    setTableElement: function(tableElement) {
        this._tableElement = tableElement
    },
    optionChanged: function(args) {
        this.callBase(args);
        switch (args.name) {
            case "cellHintEnabled":
            case "onCellPrepared":
            case "onRowPrepared":
            case "onCellHoverChanged":
                this._invalidate(true, true);
                args.handled = true
        }
    },
    init: function() {
        var that = this;
        that._scrollLeft = -1;
        that._columnsController = that.getController("columns");
        that._dataController = that.getController("data");
        that._delayedTemplates = [];
        that._templatesCache = {};
        that.createAction("onCellClick");
        that.createAction("onRowClick");
        that.createAction("onCellDblClick");
        that.createAction("onRowDblClick");
        that.createAction("onCellHoverChanged", {
            excludeValidators: ["disabled", "readOnly"]
        });
        that.createAction("onCellPrepared", {
            excludeValidators: ["disabled", "readOnly"],
            category: "rendering"
        });
        that.createAction("onRowPrepared", {
            excludeValidators: ["disabled", "readOnly"],
            category: "rendering",
            afterExecute: function(e) {
                that._afterRowPrepared(e)
            }
        });
        that._columnsController.columnsChanged.add(that._columnOptionChanged.bind(that));
        that._dataController && that._dataController.changed.add(that._handleDataChanged.bind(that))
    },
    _afterRowPrepared: _core_utils_common__WEBPACK_IMPORTED_MODULE_10__["noop"],
    _handleDataChanged: function() {},
    callbackNames: function() {
        return ["scrollChanged"]
    },
    _updateScrollLeftPosition: function() {
        var scrollLeft = this._scrollLeft;
        if (scrollLeft >= 0) {
            this._scrollLeft = 0;
            this.scrollTo({
                left: scrollLeft
            })
        }
    },
    scrollTo: function(pos) {
        var $element = this.element();
        var $scrollContainer = $element && $element.children("." + this.addWidgetPrefix(SCROLL_CONTAINER_CLASS)).not("." + this.addWidgetPrefix(CONTENT_FIXED_CLASS));
        if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_13__["isDefined"])(pos) && Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_13__["isDefined"])(pos.left) && this._scrollLeft !== pos.left) {
            this._scrollLeft = pos.left;
            $scrollContainer && $scrollContainer.scrollLeft(pos.left)
        }
    },
    _wrapTableInScrollContainer: function($table) {
        var $scrollContainer = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])("<div>");
        var useNative = this.option("scrolling.useNative");
        if (false === useNative || "auto" === useNative && !_core_utils_support__WEBPACK_IMPORTED_MODULE_21__["nativeScrolling"]) {
            $scrollContainer.addClass(this.addWidgetPrefix(SCROLLABLE_SIMULATED_CLASS))
        }
        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_4__["default"].on($scrollContainer, "scroll", () => {
            var scrollLeft = $scrollContainer.scrollLeft();
            if (scrollLeft !== this._scrollLeft) {
                this.scrollChanged.fire({
                    left: scrollLeft
                }, this.name)
            }
        });
        $scrollContainer.addClass(this.addWidgetPrefix(CONTENT_CLASS)).addClass(this.addWidgetPrefix(SCROLL_CONTAINER_CLASS)).append($table).appendTo(this.element());
        this.setAria("role", "presentation", $scrollContainer);
        return $scrollContainer
    },
    _updateContent: function($newTableElement) {
        this.setTableElement($newTableElement);
        this._wrapTableInScrollContainer($newTableElement)
    },
    _findContentElement: _core_utils_common__WEBPACK_IMPORTED_MODULE_10__["noop"],
    _getWidths: function($cellElements) {
        var result = [];
        var width;
        if ($cellElements) {
            _core_utils_iterator__WEBPACK_IMPORTED_MODULE_15__["each"]($cellElements, (function(index, item) {
                width = item.offsetWidth;
                if (item.getBoundingClientRect) {
                    var clientRect = Object(_core_utils_position__WEBPACK_IMPORTED_MODULE_14__["getBoundingRect"])(item);
                    if (clientRect.width > width - 1) {
                        width = clientRect.width
                    }
                }
                result.push(width)
            }))
        }
        return result
    },
    getColumnWidths: function($tableElement) {
        var result = [];
        var $rows;
        var $cells;
        (this.option("forceApplyBindings") || _core_utils_common__WEBPACK_IMPORTED_MODULE_10__["noop"])();
        $tableElement = $tableElement || this.getTableElement();
        if ($tableElement) {
            $rows = $tableElement.children("tbody:not(.dx-header)").children();
            for (var i = 0; i < $rows.length; i++) {
                var $row = $rows.eq(i);
                var isRowVisible = "none" !== $row.get(0).style.display && !$row.hasClass("dx-state-invisible");
                if (!$row.is("." + GROUP_ROW_CLASS) && !$row.is("." + DETAIL_ROW_CLASS) && !$row.is("." + ERROR_ROW_CLASS) && isRowVisible) {
                    $cells = $row.children("td");
                    break
                }
            }
            result = this._getWidths($cells)
        }
        return result
    },
    getVisibleColumnIndex: function(columnIndex, rowIndex) {
        return columnIndex
    },
    setColumnWidths: function(_ref) {
        var {
            widths: widths,
            $tableElement: $tableElement,
            columns: columns,
            fixed: fixed
        } = _ref;
        var $cols;
        var width;
        var minWidth;
        var columnIndex;
        var columnAutoWidth = this.option("columnAutoWidth");
        $tableElement = $tableElement || this.getTableElement();
        if ($tableElement && $tableElement.length && widths) {
            columnIndex = 0;
            $cols = $tableElement.children("colgroup").children("col");
            Object(_core_utils_style__WEBPACK_IMPORTED_MODULE_11__["setWidth"])($cols, "auto");
            columns = columns || this.getColumns(null, $tableElement);
            for (var i = 0; i < columns.length; i++) {
                if (columnAutoWidth && !fixed) {
                    width = columns[i].width;
                    if (width && !columns[i].command) {
                        width = columns[i].visibleWidth || width;
                        width = getWidthStyle(width);
                        minWidth = getWidthStyle(columns[i].minWidth || width);
                        var $rows = $rows || $tableElement.children().children(".dx-row").not("." + DETAIL_ROW_CLASS);
                        for (var rowIndex = 0; rowIndex < $rows.length; rowIndex++) {
                            var row = $rows[rowIndex];
                            var cell = void 0;
                            var visibleIndex = this.getVisibleColumnIndex(i, rowIndex);
                            if (row.classList.contains(GROUP_ROW_CLASS)) {
                                cell = row.querySelector("td[aria-colindex='".concat(visibleIndex + 1, "']:not(.").concat(GROUP_CELL_CLASS, ")"))
                            } else {
                                cell = row.cells[visibleIndex]
                            }
                            if (cell) {
                                setCellWidth(cell, columns[i], width);
                                cell.style.minWidth = minWidth
                            }
                        }
                    }
                }
                if (columns[i].colspan) {
                    columnIndex += columns[i].colspan;
                    continue
                }
                width = widths[columnIndex];
                if ("adaptiveHidden" === width) {
                    width = HIDDEN_COLUMNS_WIDTH
                }
                if ("number" === typeof width) {
                    width = width.toFixed(3) + "px"
                }
                Object(_core_utils_style__WEBPACK_IMPORTED_MODULE_11__["setWidth"])($cols.eq(columnIndex), Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_13__["isDefined"])(width) ? width : "auto");
                columnIndex++
            }
        }
    },
    getCellElements: function(rowIndex) {
        return this._getCellElementsCore(rowIndex)
    },
    _getCellElementsCore: function(rowIndex) {
        var $row = this._getRowElements().eq(rowIndex);
        return $row.children()
    },
    _getCellElement: function(rowIndex, columnIdentifier) {
        var $cell;
        var $cells = this.getCellElements(rowIndex);
        var columnVisibleIndex = this._getVisibleColumnIndex($cells, rowIndex, columnIdentifier);
        if ($cells.length && columnVisibleIndex >= 0) {
            $cell = $cells.eq(columnVisibleIndex)
        }
        if ($cell && $cell.length) {
            return $cell
        }
    },
    _getRowElement: function(rowIndex) {
        var that = this;
        var $rowElement = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])();
        var $tableElements = that.getTableElements();
        _core_utils_iterator__WEBPACK_IMPORTED_MODULE_15__["each"]($tableElements, (function(_, tableElement) {
            $rowElement = $rowElement.add(that._getRowElements(Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(tableElement)).eq(rowIndex))
        }));
        if ($rowElement.length) {
            return $rowElement
        }
    },
    getCellElement: function(rowIndex, columnIdentifier) {
        return Object(_core_element__WEBPACK_IMPORTED_MODULE_12__["getPublicElement"])(this._getCellElement(rowIndex, columnIdentifier))
    },
    getRowElement: function(rowIndex) {
        var $rows = this._getRowElement(rowIndex);
        var elements = [];
        if ($rows && !Object(_core_element__WEBPACK_IMPORTED_MODULE_12__["getPublicElement"])($rows).get) {
            for (var i = 0; i < $rows.length; i++) {
                elements.push($rows[i])
            }
        } else {
            elements = $rows
        }
        return elements
    },
    _getVisibleColumnIndex: function($cells, rowIndex, columnIdentifier) {
        if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_13__["isString"])(columnIdentifier)) {
            var columnIndex = this._columnsController.columnOption(columnIdentifier, "index");
            return this._columnsController.getVisibleIndex(columnIndex)
        }
        return columnIdentifier
    },
    getColumnElements: function() {},
    getColumns: function(rowIndex) {
        return this._columnsController.getVisibleColumns(rowIndex)
    },
    getCell: function(cellPosition, rows) {
        var $rows = rows || this._getRowElements();
        var $cells;
        if ($rows.length > 0 && cellPosition.rowIndex >= 0) {
            if ("virtual" !== this.option("scrolling.mode") && "virtual" !== this.option("scrolling.rowRenderingMode")) {
                cellPosition.rowIndex = cellPosition.rowIndex < $rows.length ? cellPosition.rowIndex : $rows.length - 1
            }
            $cells = this.getCellElements(cellPosition.rowIndex);
            if ($cells && $cells.length > 0) {
                return $cells.eq($cells.length > cellPosition.columnIndex ? cellPosition.columnIndex : $cells.length - 1)
            }
        }
    },
    getRowsCount: function() {
        var tableElement = this.getTableElement();
        if (tableElement && 1 === tableElement.length) {
            return tableElement[0].rows.length
        }
        return 0
    },
    _getRowElementsCore: function(tableElement) {
        tableElement = tableElement || this.getTableElement();
        if (tableElement) {
            var hasRowTemplate = this.option().rowTemplate || this.option("dataRowTemplate");
            var tBodies = hasRowTemplate && tableElement.find("> tbody." + ROW_CLASS);
            return tBodies && tBodies.length ? tBodies : tableElement.find("> tbody > ." + ROW_CLASS + ", > ." + ROW_CLASS)
        }
        return Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])()
    },
    _getRowElements: function(tableElement) {
        return this._getRowElementsCore(tableElement)
    },
    getRowIndex: function($row) {
        return this._getRowElements().index($row)
    },
    getBoundingRect: function() {},
    getName: function() {},
    setScrollerSpacing: function(width) {
        var $element = this.element();
        var rtlEnabled = this.option("rtlEnabled");
        $element && $element.css({
            paddingLeft: rtlEnabled ? width : "",
            paddingRight: !rtlEnabled ? width : ""
        })
    },
    isScrollbarVisible: function(isHorizontal) {
        var $element = this.element();
        var $tableElement = this._tableElement;
        if ($element && $tableElement) {
            return isHorizontal ? Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getOuterWidth"])($tableElement) - Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getWidth"])($element) > 0 : Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getOuterHeight"])($tableElement) - Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getHeight"])($element) > 0
        }
        return false
    }
});


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.context_menu.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.context_menu.js ***!
  \*******************************************************************************/
/*! exports provided: contextMenuModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "contextMenuModule", function() { return contextMenuModule; });
/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/renderer */ "./node_modules/devextreme/esm/core/renderer.js");
/* harmony import */ var _core_element__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/element */ "./node_modules/devextreme/esm/core/element.js");
/* harmony import */ var _core_utils_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/utils/common */ "./node_modules/devextreme/esm/core/utils/common.js");
/* harmony import */ var _core_utils_iterator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/utils/iterator */ "./node_modules/devextreme/esm/core/utils/iterator.js");
/* harmony import */ var _ui_grid_core_modules__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ui.grid_core.modules */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.modules.js");
/* harmony import */ var _context_menu__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../context_menu */ "./node_modules/devextreme/esm/ui/context_menu.js");
/**
 * DevExtreme (esm/ui/grid_core/ui.grid_core.context_menu.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */






var CONTEXT_MENU = "dx-context-menu";
var viewName = {
    columnHeadersView: "header",
    rowsView: "content",
    footerView: "footer",
    headerPanel: "headerPanel"
};
var VIEW_NAMES = ["columnHeadersView", "rowsView", "footerView", "headerPanel"];
var ContextMenuController = _ui_grid_core_modules__WEBPACK_IMPORTED_MODULE_4__["default"].ViewController.inherit({
    init: function() {
        this.createAction("onContextMenuPreparing")
    },
    getContextMenuItems: function(dxEvent) {
        if (!dxEvent) {
            return false
        }
        var that = this;
        var $targetElement = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(dxEvent.target);
        var $element;
        var $targetRowElement;
        var $targetCellElement;
        var menuItems;
        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_3__["each"])(VIEW_NAMES, (function() {
            var view = that.getView(this);
            $element = view && view.element();
            if ($element && ($element.is($targetElement) || $element.find($targetElement).length)) {
                var _rowOptions$cells;
                $targetCellElement = $targetElement.closest(".dx-row > td, .dx-row > tr");
                $targetRowElement = $targetCellElement.parent();
                var rowIndex = view.getRowIndex($targetRowElement);
                var columnIndex = $targetCellElement[0] && $targetCellElement[0].cellIndex;
                var rowOptions = $targetRowElement.data("options");
                var options = {
                    event: dxEvent,
                    targetElement: Object(_core_element__WEBPACK_IMPORTED_MODULE_1__["getPublicElement"])($targetElement),
                    target: viewName[this],
                    rowIndex: rowIndex,
                    row: view._getRows()[rowIndex],
                    columnIndex: columnIndex,
                    column: null === rowOptions || void 0 === rowOptions ? void 0 : null === (_rowOptions$cells = rowOptions.cells) || void 0 === _rowOptions$cells ? void 0 : _rowOptions$cells[columnIndex].column
                };
                options.items = view.getContextMenuItems && view.getContextMenuItems(options);
                that.executeAction("onContextMenuPreparing", options);
                that._contextMenuPrepared(options);
                menuItems = options.items;
                if (menuItems) {
                    return false
                }
            }
        }));
        return menuItems
    },
    _contextMenuPrepared: _core_utils_common__WEBPACK_IMPORTED_MODULE_2__["noop"]
});
var ContextMenuView = _ui_grid_core_modules__WEBPACK_IMPORTED_MODULE_4__["default"].View.inherit({
    _renderCore: function() {
        var that = this;
        var $element = that.element().addClass(CONTEXT_MENU);
        this.setAria("role", "presentation", $element);
        this._createComponent($element, _context_menu__WEBPACK_IMPORTED_MODULE_5__["default"], {
            onPositioning: function(actionArgs) {
                var event = actionArgs.event;
                var contextMenuInstance = actionArgs.component;
                var items = that.getController("contextMenu").getContextMenuItems(event);
                if (items) {
                    contextMenuInstance.option("items", items);
                    event.stopPropagation()
                } else {
                    actionArgs.cancel = true
                }
            },
            onItemClick: function(params) {
                params.itemData.onItemClick && params.itemData.onItemClick(params)
            },
            cssClass: that.getWidgetContainerClass(),
            target: that.component.$element()
        })
    }
});
var contextMenuModule = {
    defaultOptions: function() {
        return {
            onContextMenuPreparing: null
        }
    },
    controllers: {
        contextMenu: ContextMenuController
    },
    views: {
        contextMenuView: ContextMenuView
    }
};


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.data_controller.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.data_controller.js ***!
  \**********************************************************************************/
/*! exports provided: dataControllerModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dataControllerModule", function() { return dataControllerModule; });
/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/renderer */ "./node_modules/devextreme/esm/core/renderer.js");
/* harmony import */ var _ui_grid_core_modules__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ui.grid_core.modules */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.modules.js");
/* harmony import */ var _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ui.grid_core.utils */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.utils.js");
/* harmony import */ var _data_array_store__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../data/array_store */ "./node_modules/devextreme/esm/data/array_store.js");
/* harmony import */ var _data_custom_store__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../data/custom_store */ "./node_modules/devextreme/esm/data/custom_store.js");
/* harmony import */ var _widget_ui_errors__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../widget/ui.errors */ "./node_modules/devextreme/esm/ui/widget/ui.errors.js");
/* harmony import */ var _core_utils_common__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../core/utils/common */ "./node_modules/devextreme/esm/core/utils/common.js");
/* harmony import */ var _core_utils_iterator__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../core/utils/iterator */ "./node_modules/devextreme/esm/core/utils/iterator.js");
/* harmony import */ var _core_utils_type__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../core/utils/type */ "./node_modules/devextreme/esm/core/utils/type.js");
/* harmony import */ var _core_utils_extend__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../core/utils/extend */ "./node_modules/devextreme/esm/core/utils/extend.js");
/* harmony import */ var _data_helper__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../data_helper */ "./node_modules/devextreme/esm/data_helper.js");
/* harmony import */ var _core_utils_deferred__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../core/utils/deferred */ "./node_modules/devextreme/esm/core/utils/deferred.js");
/* harmony import */ var _core_utils_array_compare__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../core/utils/array_compare */ "./node_modules/devextreme/esm/core/utils/array_compare.js");
/**
 * DevExtreme (esm/ui/grid_core/ui.grid_core.data_controller.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */













var dataControllerModule = {
    defaultOptions: function() {
        return {
            loadingTimeout: 0,
            dataSource: null,
            cacheEnabled: true,
            repaintChangesOnly: false,
            highlightChanges: false,
            onDataErrorOccurred: null,
            remoteOperations: "auto",
            paging: {
                enabled: true,
                pageSize: void 0,
                pageIndex: void 0
            }
        }
    },
    controllers: {
        data: _ui_grid_core_modules__WEBPACK_IMPORTED_MODULE_1__["default"].Controller.inherit({}).include(_data_helper__WEBPACK_IMPORTED_MODULE_10__["default"]).inherit(function() {
            var changePaging = function(that, optionName, value) {
                var dataSource = that._dataSource;
                if (dataSource) {
                    if (void 0 !== value) {
                        var oldValue = that._getPagingOptionValue(optionName);
                        if (oldValue !== value) {
                            if ("pageSize" === optionName) {
                                dataSource.pageIndex(0)
                            }
                            dataSource[optionName](value);
                            that._skipProcessingPagingChange = true;
                            that.option("paging." + optionName, value);
                            that._skipProcessingPagingChange = false;
                            var pageIndex = dataSource.pageIndex();
                            return dataSource["pageIndex" === optionName ? "load" : "reload"]().done(() => that.pageChanged.fire(pageIndex))
                        }
                        return Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_11__["Deferred"])().resolve().promise()
                    }
                    return dataSource[optionName]()
                }
                return 0
            };
            var members = {
                init: function() {
                    var that = this;
                    that._items = [];
                    that._cachedProcessedItems = null;
                    that._columnsController = that.getController("columns");
                    that._currentOperationTypes = null;
                    that._dataChangedHandler = e => {
                        that._currentOperationTypes = this._dataSource.operationTypes();
                        that._handleDataChanged(e);
                        that._currentOperationTypes = null
                    };
                    that._columnsChangedHandler = that._handleColumnsChanged.bind(that);
                    that._loadingChangedHandler = that._handleLoadingChanged.bind(that);
                    that._loadErrorHandler = that._handleLoadError.bind(that);
                    that._customizeStoreLoadOptionsHandler = that._handleCustomizeStoreLoadOptions.bind(that);
                    that._changingHandler = that._handleChanging.bind(that);
                    that._dataPushedHandler = that._handleDataPushed.bind(that);
                    that._columnsController.columnsChanged.add(that._columnsChangedHandler);
                    that._isLoading = false;
                    that._isCustomLoading = false;
                    that._repaintChangesOnly = void 0;
                    that._changes = [];
                    that.createAction("onDataErrorOccurred");
                    that.dataErrorOccurred.add((function(error) {
                        return that.executeAction("onDataErrorOccurred", {
                            error: error
                        })
                    }));
                    that._refreshDataSource()
                },
                _getPagingOptionValue: function(optionName) {
                    return this._dataSource[optionName]()
                },
                callbackNames: function() {
                    return ["changed", "loadingChanged", "dataErrorOccurred", "pageChanged", "dataSourceChanged", "pushed"]
                },
                callbackFlags: function(name) {
                    if ("dataErrorOccurred" === name) {
                        return {
                            stopOnFalse: true
                        }
                    }
                },
                publicMethods: function() {
                    return ["beginCustomLoading", "endCustomLoading", "refresh", "filter", "clearFilter", "getCombinedFilter", "keyOf", "byKey", "getDataByKeys", "pageIndex", "pageSize", "pageCount", "totalCount", "_disposeDataSource", "getKeyByRowIndex", "getRowIndexByKey", "getDataSource", "getVisibleRows", "repaintRows"]
                },
                reset: function() {
                    this._columnsController.reset();
                    this._items = [];
                    this._refreshDataSource()
                },
                _handleDataSourceChange(args) {
                    if (args.value === args.previousValue || this.option("columns") && Array.isArray(args.value) && Array.isArray(args.previousValue)) {
                        var _this$_dataSource;
                        var isValueChanged = args.value !== args.previousValue;
                        if (isValueChanged) {
                            var store = this.store();
                            if (store) {
                                store._array = args.value
                            }
                        }
                        var isParasiteChange = Array.isArray(args.value) && !isValueChanged && (null === (_this$_dataSource = this._dataSource) || void 0 === _this$_dataSource ? void 0 : _this$_dataSource.isLoading());
                        if (!isParasiteChange) {
                            this.refresh(this.option("repaintChangesOnly"))
                        }
                        return true
                    }
                    return false
                },
                optionChanged: function(args) {
                    var that = this;
                    var dataSource;

                    function handled() {
                        args.handled = true
                    }
                    if ("dataSource" === args.name && args.name === args.fullName && this._handleDataSourceChange(args)) {
                        handled();
                        return
                    }
                    switch (args.name) {
                        case "cacheEnabled":
                        case "repaintChangesOnly":
                        case "highlightChanges":
                        case "loadingTimeout":
                            handled();
                            break;
                        case "remoteOperations":
                        case "keyExpr":
                        case "dataSource":
                        case "scrolling":
                            handled();
                            that.reset();
                            break;
                        case "paging":
                            dataSource = that.dataSource();
                            if (dataSource && that._setPagingOptions(dataSource)) {
                                var pageIndex = dataSource.pageIndex();
                                dataSource.load().done(() => that.pageChanged.fire(pageIndex))
                            }
                            handled();
                            break;
                        case "rtlEnabled":
                            that.reset();
                            break;
                        case "columns":
                            dataSource = that.dataSource();
                            if (dataSource && dataSource.isLoading() && args.name === args.fullName) {
                                this._useSortingGroupingFromColumns = true;
                                dataSource.load()
                            }
                            break;
                        default:
                            that.callBase(args)
                    }
                },
                isReady: function() {
                    return !this._isLoading
                },
                getDataSource: function() {
                    return this._dataSource && this._dataSource._dataSource
                },
                getCombinedFilter: function(returnDataField) {
                    return this.combinedFilter(void 0, returnDataField)
                },
                combinedFilter: function(filter, returnDataField) {
                    var dataSource = this._dataSource;
                    var columnsController = this._columnsController;
                    if (dataSource) {
                        if (void 0 === filter) {
                            filter = dataSource.filter()
                        }
                        var additionalFilter = this._calculateAdditionalFilter();
                        if (additionalFilter) {
                            if (columnsController.isDataSourceApplied() || columnsController.isAllDataTypesDefined()) {
                                filter = _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_2__["default"].combineFilters([additionalFilter, filter])
                            }
                        }
                        filter = columnsController.updateFilter(filter, returnDataField || dataSource.remoteOperations().filtering)
                    }
                    return filter
                },
                waitReady: function() {
                    if (this._updateLockCount) {
                        this._readyDeferred = new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_11__["Deferred"];
                        return this._readyDeferred
                    }
                    return Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_11__["when"])()
                },
                _endUpdateCore: function() {
                    var changes = this._changes;
                    if (changes.length) {
                        this._changes = [];
                        var repaintChangesOnly = changes.every(change => change.repaintChangesOnly);
                        this.updateItems(1 === changes.length ? changes[0] : {
                            repaintChangesOnly: repaintChangesOnly
                        })
                    }
                    if (this._readyDeferred) {
                        this._readyDeferred.resolve();
                        this._readyDeferred = null
                    }
                },
                _handleCustomizeStoreLoadOptions: function(e) {
                    var _storeLoadOptions$fil;
                    var columnsController = this._columnsController;
                    var dataSource = this._dataSource;
                    var storeLoadOptions = e.storeLoadOptions;
                    if (e.isCustomLoading && !storeLoadOptions.isLoadingAll) {
                        return
                    }
                    storeLoadOptions.filter = this.combinedFilter(storeLoadOptions.filter);
                    if (1 === (null === (_storeLoadOptions$fil = storeLoadOptions.filter) || void 0 === _storeLoadOptions$fil ? void 0 : _storeLoadOptions$fil.length) && "!" === storeLoadOptions.filter[0]) {
                        e.data = [];
                        e.extra = e.extra || {};
                        e.extra.totalCount = 0
                    }
                    if (!columnsController.isDataSourceApplied()) {
                        columnsController.updateColumnDataTypes(dataSource)
                    }
                    this._columnsUpdating = true;
                    columnsController.updateSortingGrouping(dataSource, !this._useSortingGroupingFromColumns);
                    this._columnsUpdating = false;
                    storeLoadOptions.sort = columnsController.getSortDataSourceParameters();
                    storeLoadOptions.group = columnsController.getGroupDataSourceParameters();
                    dataSource.sort(storeLoadOptions.sort);
                    dataSource.group(storeLoadOptions.group);
                    storeLoadOptions.sort = columnsController.getSortDataSourceParameters(!dataSource.remoteOperations().sorting);
                    e.group = columnsController.getGroupDataSourceParameters(!dataSource.remoteOperations().grouping)
                },
                _handleColumnsChanged: function(e) {
                    var that = this;
                    var changeTypes = e.changeTypes;
                    var optionNames = e.optionNames;
                    var filterValue;
                    var filterValues;
                    var filterApplied;
                    if (changeTypes.sorting || changeTypes.grouping) {
                        if (that._dataSource && !that._columnsUpdating) {
                            that._dataSource.group(that._columnsController.getGroupDataSourceParameters());
                            that._dataSource.sort(that._columnsController.getSortDataSourceParameters());
                            that.reload()
                        }
                    } else if (changeTypes.columns) {
                        filterValues = that._columnsController.columnOption(e.columnIndex, "filterValues");
                        if (optionNames.filterValues || optionNames.filterType && Array.isArray(filterValues) || optionNames.filterValue || optionNames.selectedFilterOperation || optionNames.allowFiltering) {
                            filterValue = that._columnsController.columnOption(e.columnIndex, "filterValue");
                            if (Array.isArray(filterValues) || void 0 === e.columnIndex || Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_8__["isDefined"])(filterValue) || !optionNames.selectedFilterOperation || optionNames.filterValue) {
                                that._applyFilter();
                                filterApplied = true
                            }
                        }
                        if (!that._needApplyFilter && !_ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_2__["default"].checkChanges(optionNames, ["width", "visibleWidth", "filterValue", "bufferedFilterValue", "selectedFilterOperation", "filterValues", "filterType"])) {
                            that._columnsController.columnsChanged.add((function updateItemsHandler() {
                                that._columnsController.columnsChanged.remove(updateItemsHandler);
                                that.updateItems({
                                    repaintChangesOnly: false,
                                    virtualColumnsScrolling: e.changeTypes.virtualColumnsScrolling
                                })
                            }))
                        }
                        if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_8__["isDefined"])(optionNames.visible)) {
                            var column = that._columnsController.columnOption(e.columnIndex);
                            if (column && (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_8__["isDefined"])(column.filterValue) || Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_8__["isDefined"])(column.filterValues))) {
                                that._applyFilter();
                                filterApplied = true
                            }
                        }
                    }
                    if (!filterApplied && changeTypes.filtering) {
                        that.reload()
                    }
                },
                _handleDataChanged: function(e) {
                    var that = this;
                    var dataSource = that._dataSource;
                    var columnsController = that._columnsController;
                    var isAsyncDataSourceApplying = false;
                    this._useSortingGroupingFromColumns = false;
                    if (dataSource && !that._isDataSourceApplying) {
                        that._isDataSourceApplying = true;
                        Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_11__["when"])(that._columnsController.applyDataSource(dataSource)).done((function() {
                            if (that._isLoading) {
                                that._handleLoadingChanged(false)
                            }
                            if (isAsyncDataSourceApplying && e && e.isDelayed) {
                                e.isDelayed = false
                            }
                            that._isDataSourceApplying = false;
                            var needApplyFilter = that._needApplyFilter;
                            that._needApplyFilter = false;
                            if (needApplyFilter && !that._isAllDataTypesDefined && (additionalFilter = that._calculateAdditionalFilter(), additionalFilter && additionalFilter.length)) {
                                _widget_ui_errors__WEBPACK_IMPORTED_MODULE_5__["default"].log("W1005", that.component.NAME);
                                that._applyFilter()
                            } else {
                                that.updateItems(e, true)
                            }
                            var additionalFilter
                        })).fail((function() {
                            that._isDataSourceApplying = false
                        }));
                        if (that._isDataSourceApplying) {
                            isAsyncDataSourceApplying = true;
                            that._handleLoadingChanged(true)
                        }
                        that._needApplyFilter = !that._columnsController.isDataSourceApplied();
                        that._isAllDataTypesDefined = columnsController.isAllDataTypesDefined()
                    }
                },
                _handleLoadingChanged: function(isLoading) {
                    this._isLoading = isLoading;
                    this._fireLoadingChanged()
                },
                _handleLoadError: function(e) {
                    this.dataErrorOccurred.fire(e)
                },
                _handleDataPushed: function(changes) {
                    this.pushed.fire(changes)
                },
                fireError: function() {
                    this.dataErrorOccurred.fire(_widget_ui_errors__WEBPACK_IMPORTED_MODULE_5__["default"].Error.apply(_widget_ui_errors__WEBPACK_IMPORTED_MODULE_5__["default"], arguments))
                },
                _setPagingOptions: function(dataSource) {
                    var pageIndex = this.option("paging.pageIndex");
                    var pageSize = this.option("paging.pageSize");
                    var pagingEnabled = this.option("paging.enabled");
                    var scrollingMode = this.option("scrolling.mode");
                    var appendMode = "infinite" === scrollingMode;
                    var virtualMode = "virtual" === scrollingMode;
                    var paginate = pagingEnabled || virtualMode || appendMode;
                    var isChanged = false;
                    dataSource.requireTotalCount(!appendMode);
                    if (void 0 !== pagingEnabled && dataSource.paginate() !== paginate) {
                        dataSource.paginate(paginate);
                        isChanged = true
                    }
                    if (void 0 !== pageSize && dataSource.pageSize() !== pageSize) {
                        dataSource.pageSize(pageSize);
                        isChanged = true
                    }
                    if (void 0 !== pageIndex && dataSource.pageIndex() !== pageIndex) {
                        dataSource.pageIndex(pageIndex);
                        isChanged = true
                    }
                    return isChanged
                },
                _getSpecificDataSourceOption: function() {
                    var dataSource = this.option("dataSource");
                    if (Array.isArray(dataSource)) {
                        return {
                            store: {
                                type: "array",
                                data: dataSource,
                                key: this.option("keyExpr")
                            }
                        }
                    }
                    return dataSource
                },
                _initDataSource: function() {
                    var dataSource = this.option("dataSource");
                    var oldDataSource = this._dataSource;
                    this.callBase();
                    dataSource = this._dataSource;
                    this._useSortingGroupingFromColumns = true;
                    this._cachedProcessedItems = null;
                    if (dataSource) {
                        this._setPagingOptions(dataSource);
                        this.setDataSource(dataSource)
                    } else if (oldDataSource) {
                        this.updateItems()
                    }
                },
                _loadDataSource: function() {
                    var dataSource = this._dataSource;
                    var result = new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_11__["Deferred"];
                    Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_11__["when"])(this._columnsController.refresh(true)).always((function() {
                        if (dataSource) {
                            dataSource.load().done(result.resolve).fail(result.reject)
                        } else {
                            result.resolve()
                        }
                    }));
                    return result.promise()
                },
                _beforeProcessItems: function(items) {
                    return items.slice(0)
                },
                getRowIndexDelta: function() {
                    return 0
                },
                _processItems: function(items, change) {
                    var that = this;
                    var rowIndexDelta = that.getRowIndexDelta();
                    var changeType = change.changeType;
                    var visibleColumns = that._columnsController.getVisibleColumns(null, "loadingAll" === changeType);
                    var visibleItems = that._items;
                    var lastVisibleItem = "append" === changeType && visibleItems.length > 0 ? visibleItems[visibleItems.length - 1] : null;
                    var dataIndex = Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_8__["isDefined"])(null === lastVisibleItem || void 0 === lastVisibleItem ? void 0 : lastVisibleItem.dataIndex) ? lastVisibleItem.dataIndex + 1 : 0;
                    var options = {
                        visibleColumns: visibleColumns,
                        dataIndex: dataIndex
                    };
                    var result = [];
                    Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_7__["each"])(items, (function(index, item) {
                        if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_8__["isDefined"])(item)) {
                            options.rowIndex = index - rowIndexDelta;
                            item = that._processItem(item, options);
                            result.push(item)
                        }
                    }));
                    return result
                },
                _processItem: function(item, options) {
                    item = this._generateDataItem(item, options);
                    item = this._processDataItem(item, options);
                    item.dataIndex = options.dataIndex++;
                    return item
                },
                _generateDataItem: function(data) {
                    return {
                        rowType: "data",
                        data: data,
                        key: this.keyOf(data)
                    }
                },
                _processDataItem: function(dataItem, options) {
                    dataItem.values = this.generateDataValues(dataItem.data, options.visibleColumns);
                    return dataItem
                },
                generateDataValues: function(data, columns, isModified) {
                    var values = [];
                    var value;
                    for (var i = 0; i < columns.length; i++) {
                        var column = columns[i];
                        value = isModified ? void 0 : null;
                        if (!column.command) {
                            if (column.calculateCellValue) {
                                value = column.calculateCellValue(data)
                            } else if (column.dataField) {
                                value = data[column.dataField]
                            }
                        }
                        values.push(value)
                    }
                    return values
                },
                _applyChange: function(change) {
                    if ("update" === change.changeType) {
                        this._applyChangeUpdate(change)
                    } else if (this.items().length && change.repaintChangesOnly && "refresh" === change.changeType) {
                        this._applyChangesOnly(change)
                    } else if ("refresh" === change.changeType) {
                        this._applyChangeFull(change)
                    }
                },
                _applyChangeFull: function(change) {
                    this._items = change.items.slice(0)
                },
                _getRowIndices: function(change) {
                    var rowIndices = change.rowIndices.slice(0);
                    var rowIndexDelta = this.getRowIndexDelta();
                    rowIndices.sort((function(a, b) {
                        return a - b
                    }));
                    for (var i = 0; i < rowIndices.length; i++) {
                        var correctedRowIndex = rowIndices[i];
                        if (change.allowInvisibleRowIndices) {
                            correctedRowIndex += rowIndexDelta
                        }
                        if (correctedRowIndex < 0) {
                            rowIndices.splice(i, 1);
                            i--
                        }
                    }
                    return rowIndices
                },
                _applyChangeUpdate: function(change) {
                    var that = this;
                    var items = change.items;
                    var rowIndices = that._getRowIndices(change);
                    var rowIndexDelta = that.getRowIndexDelta();
                    var repaintChangesOnly = that.option("repaintChangesOnly");
                    var prevIndex = -1;
                    var rowIndexCorrection = 0;
                    var changeType;
                    change.items = [];
                    change.rowIndices = [];
                    change.columnIndices = [];
                    change.changeTypes = [];
                    var equalItems = function(item1, item2, strict) {
                        var result = item1 && item2 && Object(_core_utils_common__WEBPACK_IMPORTED_MODULE_6__["equalByValue"])(item1.key, item2.key);
                        if (result && strict) {
                            result = item1.rowType === item2.rowType && ("detail" !== item2.rowType || item1.isEditing === item2.isEditing)
                        }
                        return result
                    };
                    Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_7__["each"])(rowIndices, (function(index, rowIndex) {
                        var columnIndices;
                        rowIndex += rowIndexCorrection + rowIndexDelta;
                        if (prevIndex === rowIndex) {
                            return
                        }
                        prevIndex = rowIndex;
                        var oldItem = that._items[rowIndex];
                        var oldNextItem = that._items[rowIndex + 1];
                        var newItem = items[rowIndex];
                        var newNextItem = items[rowIndex + 1];
                        var strict = equalItems(oldItem, oldNextItem) || equalItems(newItem, newNextItem);
                        if (newItem) {
                            newItem.rowIndex = rowIndex;
                            change.items.push(newItem)
                        }
                        if (oldItem && newItem && equalItems(oldItem, newItem, strict)) {
                            changeType = "update";
                            that._items[rowIndex] = newItem;
                            if (oldItem.visible !== newItem.visible) {
                                change.items.splice(-1, 1, {
                                    visible: newItem.visible
                                })
                            } else if (repaintChangesOnly && !change.isFullUpdate) {
                                columnIndices = that._partialUpdateRow(oldItem, newItem, rowIndex - rowIndexDelta)
                            }
                        } else if (newItem && !oldItem || newNextItem && equalItems(oldItem, newNextItem, strict)) {
                            changeType = "insert";
                            that._items.splice(rowIndex, 0, newItem);
                            rowIndexCorrection++
                        } else if (oldItem && !newItem || oldNextItem && equalItems(newItem, oldNextItem, strict)) {
                            changeType = "remove";
                            that._items.splice(rowIndex, 1);
                            rowIndexCorrection--;
                            prevIndex = -1
                        } else if (newItem) {
                            changeType = "update";
                            that._items[rowIndex] = newItem
                        } else {
                            return
                        }
                        change.rowIndices.push(rowIndex - rowIndexDelta);
                        change.changeTypes.push(changeType);
                        change.columnIndices.push(columnIndices)
                    }))
                },
                _isCellChanged: function(oldRow, newRow, visibleRowIndex, columnIndex, isLiveUpdate) {
                    if (JSON.stringify(oldRow.values[columnIndex]) !== JSON.stringify(newRow.values[columnIndex])) {
                        return true
                    }

                    function isCellModified(row, columnIndex) {
                        return row.modifiedValues ? void 0 !== row.modifiedValues[columnIndex] : false
                    }
                    if (isCellModified(oldRow, columnIndex) !== isCellModified(newRow, columnIndex)) {
                        return true
                    }
                    return false
                },
                _getChangedColumnIndices: function(oldItem, newItem, visibleRowIndex, isLiveUpdate) {
                    var columnIndices;
                    if (oldItem.rowType === newItem.rowType) {
                        if ("group" !== newItem.rowType && "groupFooter" !== newItem.rowType) {
                            columnIndices = [];
                            if ("detail" !== newItem.rowType) {
                                for (var columnIndex = 0; columnIndex < oldItem.values.length; columnIndex++) {
                                    if (this._isCellChanged(oldItem, newItem, visibleRowIndex, columnIndex, isLiveUpdate)) {
                                        columnIndices.push(columnIndex)
                                    }
                                }
                            }
                        }
                        if ("group" === newItem.rowType && newItem.isExpanded === oldItem.isExpanded && oldItem.cells) {
                            columnIndices = oldItem.cells.map((cell, index) => {
                                var _cell$column;
                                return "groupExpand" !== (null === (_cell$column = cell.column) || void 0 === _cell$column ? void 0 : _cell$column.type) ? index : -1
                            }).filter(index => index >= 0)
                        }
                    }
                    return columnIndices
                },
                _partialUpdateRow: function(oldItem, newItem, visibleRowIndex, isLiveUpdate) {
                    var _changedColumnIndices;
                    var changedColumnIndices = this._getChangedColumnIndices(oldItem, newItem, visibleRowIndex, isLiveUpdate);
                    if (null !== (_changedColumnIndices = changedColumnIndices) && void 0 !== _changedColumnIndices && _changedColumnIndices.length && this.option("dataRowTemplate")) {
                        changedColumnIndices = void 0
                    }
                    if (changedColumnIndices) {
                        oldItem.cells && oldItem.cells.forEach((function(cell, columnIndex) {
                            var isCellChanged = changedColumnIndices.indexOf(columnIndex) >= 0;
                            if (!isCellChanged && cell && cell.update) {
                                cell.update(newItem)
                            }
                        }));
                        newItem.update = oldItem.update;
                        newItem.watch = oldItem.watch;
                        newItem.cells = oldItem.cells;
                        if (isLiveUpdate) {
                            newItem.oldValues = oldItem.values
                        }
                        oldItem.update && oldItem.update(newItem)
                    }
                    return changedColumnIndices
                },
                _isItemEquals: function(item1, item2) {
                    if (JSON.stringify(item1.values) !== JSON.stringify(item2.values)) {
                        return false
                    }
                    if (["modified", "isNewRow", "removed", "isEditing"].some(field => item1[field] !== item2[field])) {
                        return false
                    }
                    if ("group" === item1.rowType || "groupFooter" === item1.rowType) {
                        var _item1$data, _item2$data, _item1$data2, _item2$data2;
                        var expandedMatch = item1.isExpanded === item2.isExpanded;
                        var summaryCellsMatch = JSON.stringify(item1.summaryCells) === JSON.stringify(item2.summaryCells);
                        var continuationMatch = (null === (_item1$data = item1.data) || void 0 === _item1$data ? void 0 : _item1$data.isContinuation) === (null === (_item2$data = item2.data) || void 0 === _item2$data ? void 0 : _item2$data.isContinuation) && (null === (_item1$data2 = item1.data) || void 0 === _item1$data2 ? void 0 : _item1$data2.isContinuationOnNextPage) === (null === (_item2$data2 = item2.data) || void 0 === _item2$data2 ? void 0 : _item2$data2.isContinuationOnNextPage);
                        if (!expandedMatch || !summaryCellsMatch || !continuationMatch) {
                            return false
                        }
                    }
                    return true
                },
                _applyChangesOnly: function(change) {
                    var rowIndices = [];
                    var columnIndices = [];
                    var changeTypes = [];
                    var items = [];
                    var newIndexByKey = {};

                    function getRowKey(row) {
                        if (row) {
                            return row.rowType + "," + JSON.stringify(row.key)
                        }
                    }
                    var currentItems = this._items;
                    var oldItems = currentItems.slice();
                    change.items.forEach((function(item, index) {
                        var key = getRowKey(item);
                        newIndexByKey[key] = index;
                        item.rowIndex = index
                    }));
                    var result = Object(_core_utils_array_compare__WEBPACK_IMPORTED_MODULE_12__["findChanges"])(oldItems, change.items, getRowKey, (item1, item2) => {
                        if (!this._isItemEquals(item1, item2)) {
                            return false
                        }
                        if (item1.cells) {
                            item1.update && item1.update(item2);
                            item1.cells.forEach((function(cell) {
                                if (cell && cell.update) {
                                    cell.update(item2, true)
                                }
                            }))
                        }
                        return true
                    });
                    if (!result) {
                        this._applyChangeFull(change);
                        return
                    }
                    result.forEach(change => {
                        switch (change.type) {
                            case "update":
                                var index = change.index;
                                var newItem = change.data;
                                var oldItem = change.oldItem;
                                var changedColumnIndices = this._partialUpdateRow(oldItem, newItem, index, true);
                                rowIndices.push(index);
                                changeTypes.push("update");
                                items.push(newItem);
                                currentItems[index] = newItem;
                                columnIndices.push(changedColumnIndices);
                                break;
                            case "insert":
                                rowIndices.push(change.index);
                                changeTypes.push("insert");
                                items.push(change.data);
                                columnIndices.push(void 0);
                                currentItems.splice(change.index, 0, change.data);
                                break;
                            case "remove":
                                rowIndices.push(change.index);
                                changeTypes.push("remove");
                                currentItems.splice(change.index, 1);
                                items.push(change.oldItem);
                                columnIndices.push(void 0)
                        }
                    });
                    change.repaintChangesOnly = true;
                    change.changeType = "update";
                    change.rowIndices = rowIndices;
                    change.columnIndices = columnIndices;
                    change.changeTypes = changeTypes;
                    change.items = items;
                    if (oldItems.length) {
                        change.isLiveUpdate = true
                    }
                    this._correctRowIndices(rowIndex => {
                        var oldRowIndexOffset = this._rowIndexOffset || 0;
                        var rowIndexOffset = this.getRowIndexOffset();
                        var oldItem = oldItems[rowIndex - oldRowIndexOffset];
                        var key = getRowKey(oldItem);
                        var newVisibleRowIndex = newIndexByKey[key];
                        return newVisibleRowIndex >= 0 ? newVisibleRowIndex + rowIndexOffset - rowIndex : 0
                    })
                },
                _correctRowIndices: _core_utils_common__WEBPACK_IMPORTED_MODULE_6__["noop"],
                _afterProcessItems: function(items) {
                    return items
                },
                _updateItemsCore: function(change) {
                    var items;
                    var dataSource = this._dataSource;
                    var changeType = change.changeType || "refresh";
                    change.changeType = changeType;
                    if (dataSource) {
                        var cachedProcessedItems = this._cachedProcessedItems;
                        if (change.useProcessedItemsCache && cachedProcessedItems) {
                            items = cachedProcessedItems
                        } else {
                            items = change.items || dataSource.items();
                            items = this._beforeProcessItems(items);
                            items = this._processItems(items, change);
                            this._cachedProcessedItems = items
                        }
                        items = this._afterProcessItems(items, change);
                        change.items = items;
                        var oldItems = this._items.length === items.length && this._items;
                        this._applyChange(change);
                        var rowIndexDelta = this.getRowIndexDelta();
                        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_7__["each"])(this._items, (index, item) => {
                            item.rowIndex = index - rowIndexDelta;
                            if (oldItems) {
                                item.cells = oldItems[index].cells || []
                            }
                            var newItem = items[index];
                            if (newItem) {
                                item.loadIndex = newItem.loadIndex
                            }
                        });
                        this._rowIndexOffset = this.getRowIndexOffset()
                    } else {
                        this._items = []
                    }
                },
                _handleChanging: function(e) {
                    var rows = this.getVisibleRows();
                    var dataSource = this.dataSource();
                    if (dataSource) {
                        e.changes.forEach((function(change) {
                            if ("insert" === change.type && change.index >= 0) {
                                var dataIndex = 0;
                                for (var i = 0; i < change.index; i++) {
                                    var row = rows[i];
                                    if (row && ("data" === row.rowType || "group" === row.rowType)) {
                                        dataIndex++
                                    }
                                }
                                change.index = dataIndex
                            }
                        }))
                    }
                },
                updateItems: function(change, isDataChanged) {
                    change = change || {};
                    if (void 0 !== this._repaintChangesOnly) {
                        var _change$repaintChange;
                        change.repaintChangesOnly = null !== (_change$repaintChange = change.repaintChangesOnly) && void 0 !== _change$repaintChange ? _change$repaintChange : this._repaintChangesOnly;
                        change.needUpdateDimensions = change.needUpdateDimensions || this._needUpdateDimensions
                    } else if (change.changes) {
                        change.repaintChangesOnly = this.option("repaintChangesOnly")
                    } else if (isDataChanged) {
                        var operationTypes = this.dataSource().operationTypes();
                        change.repaintChangesOnly = operationTypes && !operationTypes.grouping && !operationTypes.filtering && this.option("repaintChangesOnly");
                        change.isDataChanged = true;
                        if (operationTypes && (operationTypes.reload || operationTypes.paging || operationTypes.groupExpanding)) {
                            change.needUpdateDimensions = true
                        }
                    }
                    if (this._updateLockCount) {
                        this._changes.push(change);
                        return
                    }
                    this._updateItemsCore(change);
                    if (change.cancel) {
                        return
                    }
                    this._fireChanged(change)
                },
                loadingOperationTypes: function() {
                    var dataSource = this.dataSource();
                    return dataSource && dataSource.loadingOperationTypes() || {}
                },
                _fireChanged: function(change) {
                    if (this._currentOperationTypes) {
                        change.operationTypes = this._currentOperationTypes;
                        this._currentOperationTypes = null
                    }
                    Object(_core_utils_common__WEBPACK_IMPORTED_MODULE_6__["deferRender"])(() => {
                        this.changed.fire(change)
                    })
                },
                isLoading: function() {
                    return this._isLoading || this._isCustomLoading
                },
                _fireLoadingChanged: function() {
                    this.loadingChanged.fire(this.isLoading(), this._loadingText)
                },
                _calculateAdditionalFilter: function() {
                    return null
                },
                _applyFilter: function() {
                    var dataSource = this._dataSource;
                    if (dataSource) {
                        dataSource.pageIndex(0);
                        this._isFilterApplying = true;
                        return this.reload().done(() => {
                            if (this._isFilterApplying) {
                                this.pageChanged.fire()
                            }
                        })
                    }
                },
                resetFilterApplying: function() {
                    this._isFilterApplying = false
                },
                filter: function(filterExpr) {
                    var dataSource = this._dataSource;
                    var filter = dataSource && dataSource.filter();
                    if (0 === arguments.length) {
                        return filter
                    }
                    filterExpr = arguments.length > 1 ? Array.prototype.slice.call(arguments, 0) : filterExpr;
                    if (_ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_2__["default"].equalFilterParameters(filter, filterExpr)) {
                        return
                    }
                    if (dataSource) {
                        dataSource.filter(filterExpr)
                    }
                    this._applyFilter()
                },
                clearFilter: function(filterName) {
                    var that = this;
                    var columnsController = that._columnsController;
                    var clearColumnOption = function(optionName) {
                        var columnCount = columnsController.columnCount();
                        for (var index = 0; index < columnCount; index++) {
                            columnsController.columnOption(index, optionName, void 0)
                        }
                    };
                    that.component.beginUpdate();
                    if (arguments.length > 0) {
                        switch (filterName) {
                            case "dataSource":
                                that.filter(null);
                                break;
                            case "search":
                                that.searchByText("");
                                break;
                            case "header":
                                clearColumnOption("filterValues");
                                break;
                            case "row":
                                clearColumnOption("filterValue")
                        }
                    } else {
                        that.filter(null);
                        that.searchByText("");
                        clearColumnOption("filterValue");
                        clearColumnOption("bufferedFilterValue");
                        clearColumnOption("filterValues")
                    }
                    that.component.endUpdate()
                },
                _fireDataSourceChanged: function() {
                    var that = this;
                    that.changed.add((function changedHandler() {
                        that.changed.remove(changedHandler);
                        that.dataSourceChanged.fire()
                    }))
                },
                _getDataSourceAdapter: _core_utils_common__WEBPACK_IMPORTED_MODULE_6__["noop"],
                _createDataSourceAdapterCore: function(dataSource, remoteOperations) {
                    var dataSourceAdapterProvider = this._getDataSourceAdapter();
                    var dataSourceAdapter = dataSourceAdapterProvider.create(this.component);
                    dataSourceAdapter.init(dataSource, remoteOperations);
                    return dataSourceAdapter
                },
                isLocalStore: function(store) {
                    store = store || this.store();
                    return store instanceof _data_array_store__WEBPACK_IMPORTED_MODULE_3__["default"]
                },
                isCustomStore: function(store) {
                    store = store || this.store();
                    return store instanceof _data_custom_store__WEBPACK_IMPORTED_MODULE_4__["default"]
                },
                _createDataSourceAdapter: function(dataSource) {
                    var remoteOperations = this.option("remoteOperations");
                    var store = dataSource.store();
                    var enabledRemoteOperations = {
                        filtering: true,
                        sorting: true,
                        paging: true,
                        grouping: true,
                        summary: true
                    };
                    if (remoteOperations && remoteOperations.groupPaging) {
                        remoteOperations = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_9__["extend"])({}, enabledRemoteOperations, remoteOperations)
                    }
                    if ("auto" === remoteOperations) {
                        remoteOperations = this.isLocalStore(store) || this.isCustomStore(store) ? {} : {
                            filtering: true,
                            sorting: true,
                            paging: true
                        }
                    }
                    if (true === remoteOperations) {
                        remoteOperations = enabledRemoteOperations
                    }
                    return this._createDataSourceAdapterCore(dataSource, remoteOperations)
                },
                setDataSource: function(dataSource) {
                    var oldDataSource = this._dataSource;
                    if (!dataSource && oldDataSource) {
                        oldDataSource.cancelAll();
                        oldDataSource.changed.remove(this._dataChangedHandler);
                        oldDataSource.loadingChanged.remove(this._loadingChangedHandler);
                        oldDataSource.loadError.remove(this._loadErrorHandler);
                        oldDataSource.customizeStoreLoadOptions.remove(this._customizeStoreLoadOptionsHandler);
                        oldDataSource.changing.remove(this._changingHandler);
                        oldDataSource.pushed.remove(this._dataPushedHandler);
                        oldDataSource.dispose(this._isSharedDataSource)
                    }
                    if (dataSource) {
                        dataSource = this._createDataSourceAdapter(dataSource)
                    }
                    this._dataSource = dataSource;
                    if (dataSource) {
                        this._fireDataSourceChanged();
                        this._isLoading = !dataSource.isLoaded();
                        this._needApplyFilter = true;
                        this._isAllDataTypesDefined = this._columnsController.isAllDataTypesDefined();
                        dataSource.changed.add(this._dataChangedHandler);
                        dataSource.loadingChanged.add(this._loadingChangedHandler);
                        dataSource.loadError.add(this._loadErrorHandler);
                        dataSource.customizeStoreLoadOptions.add(this._customizeStoreLoadOptionsHandler);
                        dataSource.changing.add(this._changingHandler);
                        dataSource.pushed.add(this._dataPushedHandler)
                    }
                },
                items: function() {
                    return this._items
                },
                isEmpty: function() {
                    return !this.items().length
                },
                pageCount: function() {
                    return this._dataSource ? this._dataSource.pageCount() : 1
                },
                dataSource: function() {
                    return this._dataSource
                },
                store: function() {
                    var dataSource = this._dataSource;
                    return dataSource && dataSource.store()
                },
                loadAll: function(data) {
                    var that = this;
                    var d = new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_11__["Deferred"];
                    var dataSource = that._dataSource;
                    if (dataSource) {
                        if (data) {
                            var options = {
                                data: data,
                                isCustomLoading: true,
                                storeLoadOptions: {
                                    isLoadingAll: true
                                },
                                loadOptions: {
                                    filter: that.getCombinedFilter(),
                                    group: dataSource.group(),
                                    sort: dataSource.sort()
                                }
                            };
                            dataSource._handleDataLoaded(options);
                            Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_11__["when"])(options.data).done((function(data) {
                                data = that._beforeProcessItems(data);
                                d.resolve(that._processItems(data, {
                                    changeType: "loadingAll"
                                }), options.extra && options.extra.summary)
                            })).fail(d.reject)
                        } else if (!dataSource.isLoading()) {
                            var loadOptions = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_9__["extend"])({}, dataSource.loadOptions(), {
                                isLoadingAll: true,
                                requireTotalCount: false
                            });
                            dataSource.load(loadOptions).done((function(items, extra) {
                                items = that._beforeProcessItems(items);
                                items = that._processItems(items, {
                                    changeType: "loadingAll"
                                });
                                d.resolve(items, extra && extra.summary)
                            })).fail(d.reject)
                        } else {
                            d.reject()
                        }
                    } else {
                        d.resolve([])
                    }
                    return d
                },
                getKeyByRowIndex: function(rowIndex, byLoaded) {
                    var item = this.items(byLoaded)[rowIndex];
                    if (item) {
                        return item.key
                    }
                },
                getRowIndexByKey: function(key, byLoaded) {
                    return _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_2__["default"].getIndexByKey(key, this.items(byLoaded))
                },
                keyOf: function(data) {
                    var store = this.store();
                    if (store) {
                        return store.keyOf(data)
                    }
                },
                byKey: function(key) {
                    var store = this.store();
                    var rowIndex = this.getRowIndexByKey(key);
                    var result;
                    if (!store) {
                        return
                    }
                    if (rowIndex >= 0) {
                        result = (new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_11__["Deferred"]).resolve(this.items()[rowIndex].data)
                    }
                    return result || store.byKey(key)
                },
                key: function() {
                    var store = this.store();
                    if (store) {
                        return store.key()
                    }
                },
                getRowIndexOffset: function() {
                    return 0
                },
                getDataByKeys: function(rowKeys) {
                    var that = this;
                    var result = new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_11__["Deferred"];
                    var deferreds = [];
                    var data = [];
                    Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_7__["each"])(rowKeys, (function(index, key) {
                        deferreds.push(that.byKey(key).done((function(keyData) {
                            data[index] = keyData
                        })))
                    }));
                    _core_utils_deferred__WEBPACK_IMPORTED_MODULE_11__["when"].apply(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"], deferreds).always((function() {
                        result.resolve(data)
                    }));
                    return result
                },
                pageIndex: function(value) {
                    return changePaging(this, "pageIndex", value)
                },
                pageSize: function(value) {
                    return changePaging(this, "pageSize", value)
                },
                beginCustomLoading: function(messageText) {
                    this._isCustomLoading = true;
                    this._loadingText = messageText || "";
                    this._fireLoadingChanged()
                },
                endCustomLoading: function() {
                    this._isCustomLoading = false;
                    this._loadingText = void 0;
                    this._fireLoadingChanged()
                },
                refresh: function(options) {
                    if (true === options) {
                        options = {
                            reload: true,
                            changesOnly: true
                        }
                    } else if (!options) {
                        options = {
                            lookup: true,
                            selection: true,
                            reload: true
                        }
                    }
                    var that = this;
                    var dataSource = that.getDataSource();
                    var changesOnly = options.changesOnly;
                    var d = new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_11__["Deferred"];
                    var customizeLoadResult = function() {
                        that._repaintChangesOnly = !!changesOnly
                    };
                    Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_11__["when"])(!options.lookup || that._columnsController.refresh()).always((function() {
                        if (options.load || options.reload) {
                            dataSource && dataSource.on("customizeLoadResult", customizeLoadResult);
                            Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_11__["when"])(that.reload(options.reload, changesOnly)).always((function() {
                                dataSource && dataSource.off("customizeLoadResult", customizeLoadResult);
                                that._repaintChangesOnly = void 0
                            })).done(d.resolve).fail(d.reject)
                        } else {
                            that.updateItems({
                                repaintChangesOnly: options.changesOnly
                            });
                            d.resolve()
                        }
                    }));
                    return d.promise()
                },
                getVisibleRows: function() {
                    return this.items()
                },
                _disposeDataSource: function() {
                    this.setDataSource(null)
                },
                dispose: function() {
                    this._disposeDataSource();
                    this.callBase.apply(this, arguments)
                },
                repaintRows: function(rowIndexes, changesOnly) {
                    rowIndexes = Array.isArray(rowIndexes) ? rowIndexes : [rowIndexes];
                    if (rowIndexes.length > 1 || Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_8__["isDefined"])(rowIndexes[0])) {
                        this.updateItems({
                            changeType: "update",
                            rowIndices: rowIndexes,
                            isFullUpdate: !changesOnly
                        })
                    }
                },
                skipProcessingPagingChange: function(fullName) {
                    return this._skipProcessingPagingChange && ("paging.pageIndex" === fullName || "paging.pageSize" === fullName)
                },
                getUserState: function() {
                    return {
                        searchText: this.option("searchPanel.text"),
                        pageIndex: this.pageIndex(),
                        pageSize: this.pageSize()
                    }
                },
                getCachedStoreData: function() {
                    return this._dataSource && this._dataSource.getCachedStoreData()
                },
                isLastPageLoaded: function() {
                    var pageIndex = this.pageIndex();
                    var pageCount = this.pageCount();
                    return pageIndex === pageCount - 1
                }
            };
            _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_2__["default"].proxyMethod(members, "load");
            _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_2__["default"].proxyMethod(members, "reload");
            _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_2__["default"].proxyMethod(members, "push");
            _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_2__["default"].proxyMethod(members, "itemsCount", 0);
            _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_2__["default"].proxyMethod(members, "totalItemsCount", 0);
            _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_2__["default"].proxyMethod(members, "hasKnownLastPage", true);
            _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_2__["default"].proxyMethod(members, "isLoaded", true);
            _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_2__["default"].proxyMethod(members, "totalCount", 0);
            return members
        }())
    }
};


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.data_source_adapter.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.data_source_adapter.js ***!
  \**************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ "./node_modules/@babel/runtime/helpers/esm/extends.js");
/* harmony import */ var _core_utils_callbacks__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/utils/callbacks */ "./node_modules/devextreme/esm/core/utils/callbacks.js");
/* harmony import */ var _data_grid_ui_data_grid_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../data_grid/ui.data_grid.core */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.core.js");
/* harmony import */ var _core_utils_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/utils/common */ "./node_modules/devextreme/esm/core/utils/common.js");
/* harmony import */ var _core_utils_type__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/utils/type */ "./node_modules/devextreme/esm/core/utils/type.js");
/* harmony import */ var _core_utils_iterator__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core/utils/iterator */ "./node_modules/devextreme/esm/core/utils/iterator.js");
/* harmony import */ var _core_utils_extend__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../core/utils/extend */ "./node_modules/devextreme/esm/core/utils/extend.js");
/* harmony import */ var _data_array_store__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../data/array_store */ "./node_modules/devextreme/esm/data/array_store.js");
/* harmony import */ var _data_array_utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../data/array_utils */ "./node_modules/devextreme/esm/data/array_utils.js");
/* harmony import */ var _core_utils_deferred__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../core/utils/deferred */ "./node_modules/devextreme/esm/core/utils/deferred.js");
/**
 * DevExtreme (esm/ui/grid_core/ui.grid_core.data_source_adapter.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */










/* harmony default export */ __webpack_exports__["default"] = (_data_grid_ui_data_grid_core__WEBPACK_IMPORTED_MODULE_2__["default"].Controller.inherit(function() {
    function cloneItems(items, groupCount) {
        if (items) {
            items = items.slice(0);
            if (groupCount) {
                for (var i = 0; i < items.length; i++) {
                    items[i] = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_6__["extend"])({
                        key: items[i].key
                    }, items[i]);
                    items[i].items = cloneItems(items[i].items, groupCount - 1)
                }
            }
        }
        return items
    }

    function calculateOperationTypes(loadOptions, lastLoadOptions, isFullReload) {
        var operationTypes = {
            reload: true,
            fullReload: true
        };
        if (lastLoadOptions) {
            operationTypes = {
                sorting: !_data_grid_ui_data_grid_core__WEBPACK_IMPORTED_MODULE_2__["default"].equalSortParameters(loadOptions.sort, lastLoadOptions.sort),
                grouping: !_data_grid_ui_data_grid_core__WEBPACK_IMPORTED_MODULE_2__["default"].equalSortParameters(loadOptions.group, lastLoadOptions.group, true),
                groupExpanding: !_data_grid_ui_data_grid_core__WEBPACK_IMPORTED_MODULE_2__["default"].equalSortParameters(loadOptions.group, lastLoadOptions.group) || lastLoadOptions.groupExpand,
                filtering: !_data_grid_ui_data_grid_core__WEBPACK_IMPORTED_MODULE_2__["default"].equalFilterParameters(loadOptions.filter, lastLoadOptions.filter),
                pageIndex: loadOptions.pageIndex !== lastLoadOptions.pageIndex,
                skip: loadOptions.skip !== lastLoadOptions.skip,
                take: loadOptions.take !== lastLoadOptions.take,
                pageSize: loadOptions.pageSize !== lastLoadOptions.pageSize,
                fullReload: isFullReload
            };
            operationTypes.reload = isFullReload || operationTypes.sorting || operationTypes.grouping || operationTypes.filtering;
            operationTypes.paging = operationTypes.pageIndex || operationTypes.pageSize || operationTypes.take
        }
        return operationTypes
    }

    function getPageDataFromCache(options, updatePaging) {
        var groupCount = _data_grid_ui_data_grid_core__WEBPACK_IMPORTED_MODULE_2__["default"].normalizeSortingInfo(options.group || options.storeLoadOptions.group || options.loadOptions.group).length;
        var items = [];
        if (fillItemsFromCache(items, options, groupCount)) {
            return items
        } else if (updatePaging) {
            ! function(cacheItemsFromBegin, options, groupCount) {
                var cacheItemBeginCount = cacheItemsFromBegin.length;
                var {
                    storeLoadOptions: storeLoadOptions
                } = options;
                if (void 0 !== storeLoadOptions.skip && storeLoadOptions.take && !groupCount) {
                    var cacheItemsFromEnd = [];
                    fillItemsFromCache(cacheItemsFromEnd, options, groupCount, true);
                    var cacheItemEndCount = cacheItemsFromEnd.length;
                    if (cacheItemBeginCount || cacheItemEndCount) {
                        var _options$skip2, _options$take2;
                        options.skip = null !== (_options$skip2 = options.skip) && void 0 !== _options$skip2 ? _options$skip2 : storeLoadOptions.skip;
                        options.take = null !== (_options$take2 = options.take) && void 0 !== _options$take2 ? _options$take2 : storeLoadOptions.take
                    }
                    if (cacheItemBeginCount) {
                        storeLoadOptions.skip += cacheItemBeginCount;
                        storeLoadOptions.take -= cacheItemBeginCount;
                        options.cachedDataPartBegin = cacheItemsFromBegin
                    }
                    if (cacheItemEndCount) {
                        storeLoadOptions.take -= cacheItemEndCount;
                        options.cachedDataPartEnd = cacheItemsFromEnd.reverse()
                    }
                }
            }(items, options, groupCount)
        }
    }

    function fillItemsFromCache(items, options, groupCount, fromEnd) {
        var _ref, _options$take, _options$cachedData;
        var {
            storeLoadOptions: storeLoadOptions
        } = options;
        var take = null !== (_ref = null !== (_options$take = options.take) && void 0 !== _options$take ? _options$take : storeLoadOptions.take) && void 0 !== _ref ? _ref : 0;
        var cachedItems = null === (_options$cachedData = options.cachedData) || void 0 === _options$cachedData ? void 0 : _options$cachedData.items;
        if (take && cachedItems) {
            var _ref2, _options$skip;
            var skip = null !== (_ref2 = null !== (_options$skip = options.skip) && void 0 !== _options$skip ? _options$skip : storeLoadOptions.skip) && void 0 !== _ref2 ? _ref2 : 0;
            for (var i = 0; i < take; i++) {
                var localIndex = fromEnd ? take - 1 - i : i;
                var cacheItemIndex = localIndex + skip;
                var cacheItem = cachedItems[cacheItemIndex];
                if (void 0 === cacheItem && cacheItemIndex in cachedItems) {
                    return true
                }
                var item = getItemFromCache(options, cacheItem, groupCount, localIndex, take);
                if (item) {
                    items.push(item)
                } else {
                    return false
                }
            }
            return true
        }
        return false
    }

    function getItemFromCache(options, cacheItem, groupCount, index, take) {
        if (groupCount && cacheItem) {
            var skips = 0 === index && options.skips || [];
            var takes = index === take - 1 && options.takes || [];
            return function getGroupItemFromCache(cacheItem, groupCount, skips, takes) {
                if (groupCount && cacheItem) {
                    var result = Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__["default"])({}, cacheItem);
                    var skip = skips[0] || 0;
                    var take = takes[0];
                    var items = cacheItem.items;
                    if (items) {
                        if (void 0 === take && !items[skip]) {
                            return
                        }
                        result.items = [];
                        if (skips.length) {
                            result.isContinuation = true
                        }
                        if (takes.length) {
                            result.isContinuationOnNextPage = true
                        }
                        for (var i = 0; void 0 === take ? items[i + skip] : i < take; i++) {
                            var childCacheItem = items[i + skip];
                            var isLast = i + 1 === take;
                            var item = getGroupItemFromCache(childCacheItem, groupCount - 1, 0 === i ? skips.slice(1) : [], isLast ? takes.slice(1) : []);
                            if (void 0 !== item) {
                                result.items.push(item)
                            } else {
                                return
                            }
                        }
                    }
                    return result
                }
                return cacheItem
            }(cacheItem, groupCount, skips, takes)
        } else {
            return cacheItem
        }
    }

    function getCacheItem(cacheItem, loadedItem, groupCount, skips) {
        if (groupCount && loadedItem) {
            var result = Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__["default"])({}, loadedItem);
            delete result.isContinuation;
            delete result.isContinuationOnNextPage;
            var skip = skips[0] || 0;
            if (loadedItem.items) {
                result.items = (null === cacheItem || void 0 === cacheItem ? void 0 : cacheItem.items) || {};
                loadedItem.items.forEach((item, index) => {
                    var globalIndex = index + skip;
                    var childSkips = 0 === index ? skips.slice(1) : [];
                    result.items[globalIndex] = getCacheItem(result.items[globalIndex], item, groupCount - 1, childSkips)
                })
            }
            return result
        }
        return loadedItem
    }
    return {
        init: function(dataSource, remoteOperations) {
            var that = this;
            that._dataSource = dataSource;
            that._remoteOperations = remoteOperations || {};
            that._isLastPage = !dataSource.isLastPage();
            that._hasLastPage = false;
            that._currentTotalCount = 0;
            that._cachedData = {
                items: {}
            };
            that._lastOperationTypes = {};
            that._eventsStrategy = dataSource._eventsStrategy;
            that._totalCountCorrection = 0;
            that._isLoadingAll = false;
            that.changed = Object(_core_utils_callbacks__WEBPACK_IMPORTED_MODULE_1__["default"])();
            that.loadingChanged = Object(_core_utils_callbacks__WEBPACK_IMPORTED_MODULE_1__["default"])();
            that.loadError = Object(_core_utils_callbacks__WEBPACK_IMPORTED_MODULE_1__["default"])();
            that.customizeStoreLoadOptions = Object(_core_utils_callbacks__WEBPACK_IMPORTED_MODULE_1__["default"])();
            that.changing = Object(_core_utils_callbacks__WEBPACK_IMPORTED_MODULE_1__["default"])();
            that.pushed = Object(_core_utils_callbacks__WEBPACK_IMPORTED_MODULE_1__["default"])();
            that._dataChangedHandler = that._handleDataChanged.bind(that);
            that._customizeStoreLoadOptionsHandler = that._handleCustomizeStoreLoadOptions.bind(that);
            that._dataLoadedHandler = that._handleDataLoaded.bind(that);
            that._loadingChangedHandler = that._handleLoadingChanged.bind(that);
            that._loadErrorHandler = that._handleLoadError.bind(that);
            that._pushHandler = that._handlePush.bind(that);
            that._changingHandler = that._handleChanging.bind(that);
            dataSource.on("changed", that._dataChangedHandler);
            dataSource.on("customizeStoreLoadOptions", that._customizeStoreLoadOptionsHandler);
            dataSource.on("customizeLoadResult", that._dataLoadedHandler);
            dataSource.on("loadingChanged", that._loadingChangedHandler);
            dataSource.on("loadError", that._loadErrorHandler);
            dataSource.on("changing", that._changingHandler);
            dataSource.store().on("beforePush", that._pushHandler);
            Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_5__["each"])(dataSource, (function(memberName, member) {
                if (!that[memberName] && Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_4__["isFunction"])(member)) {
                    that[memberName] = function() {
                        return this._dataSource[memberName].apply(this._dataSource, arguments)
                    }
                }
            }))
        },
        remoteOperations: function() {
            return this._remoteOperations
        },
        dispose: function(isSharedDataSource) {
            var dataSource = this._dataSource;
            var store = dataSource.store();
            dataSource.off("changed", this._dataChangedHandler);
            dataSource.off("customizeStoreLoadOptions", this._customizeStoreLoadOptionsHandler);
            dataSource.off("customizeLoadResult", this._dataLoadedHandler);
            dataSource.off("loadingChanged", this._loadingChangedHandler);
            dataSource.off("loadError", this._loadErrorHandler);
            dataSource.off("changing", this._changingHandler);
            store && store.off("beforePush", this._pushHandler);
            if (!isSharedDataSource) {
                dataSource.dispose()
            }
        },
        refresh: function(options, operationTypes) {
            var dataSource = this._dataSource;
            if (operationTypes.reload) {
                this.resetCurrentTotalCount();
                this._isLastPage = !dataSource.paginate();
                this._hasLastPage = this._isLastPage
            }
        },
        resetCurrentTotalCount: function() {
            this._currentTotalCount = 0;
            this._totalCountCorrection = 0
        },
        resetCache: function() {
            this._cachedStoreData = void 0;
            this._cachedPagingData = void 0
        },
        resetPagesCache: function() {
            this._cachedData = {
                items: {}
            }
        },
        _needClearStoreDataCache: function() {
            var remoteOperations = this.remoteOperations();
            var operationTypes = calculateOperationTypes(this._lastLoadOptions || {}, {});
            var isLocalOperations = Object.keys(remoteOperations).every(operationName => !operationTypes[operationName] || !remoteOperations[operationName]);
            return !isLocalOperations
        },
        push: function(changes, fromStore) {
            var store = this.store();
            if (this._needClearStoreDataCache()) {
                this._cachedStoreData = void 0
            }
            this._cachedPagingData = void 0;
            this.resetPagesCache(true);
            if (this._cachedStoreData) {
                Object(_data_array_utils__WEBPACK_IMPORTED_MODULE_8__["applyBatch"])({
                    keyInfo: store,
                    data: this._cachedStoreData,
                    changes: changes
                })
            }
            if (!fromStore) {
                this._applyBatch(changes)
            }
            this.pushed.fire(changes)
        },
        getDataIndexGetter: function() {
            if (!this._dataIndexGetter) {
                var indexByKey;
                var storeData;
                var store = this.store();
                this._dataIndexGetter = data => {
                    var isCacheUpdated = storeData && storeData !== this._cachedStoreData;
                    if (!indexByKey || isCacheUpdated) {
                        storeData = this._cachedStoreData || [];
                        indexByKey = {};
                        for (var i = 0; i < storeData.length; i++) {
                            indexByKey[Object(_core_utils_common__WEBPACK_IMPORTED_MODULE_3__["getKeyHash"])(store.keyOf(storeData[i]))] = i
                        }
                    }
                    return indexByKey[Object(_core_utils_common__WEBPACK_IMPORTED_MODULE_3__["getKeyHash"])(store.keyOf(data))]
                }
            }
            return this._dataIndexGetter
        },
        _getKeyInfo: function() {
            return this.store()
        },
        _applyBatch: function(changes) {
            var keyInfo = this._getKeyInfo();
            var dataSource = this._dataSource;
            var groupCount = _data_grid_ui_data_grid_core__WEBPACK_IMPORTED_MODULE_2__["default"].normalizeSortingInfo(this.group()).length;
            var totalCount = this.totalCount();
            var isVirtualMode = "virtual" === this.option("scrolling.mode");
            changes = changes.filter((function(change) {
                return !dataSource.paginate() || "insert" !== change.type || void 0 !== change.index
            }));
            var getItemCount = () => groupCount ? this.itemsCount() : this.items().length;
            var oldItemCount = getItemCount();
            Object(_data_array_utils__WEBPACK_IMPORTED_MODULE_8__["applyBatch"])({
                keyInfo: keyInfo,
                data: this._items,
                changes: changes,
                groupCount: groupCount,
                useInsertIndex: true
            });
            Object(_data_array_utils__WEBPACK_IMPORTED_MODULE_8__["applyBatch"])({
                keyInfo: keyInfo,
                data: dataSource.items(),
                changes: changes,
                groupCount: groupCount,
                useInsertIndex: true
            });
            if (this._currentTotalCount > 0 || isVirtualMode && totalCount === oldItemCount) {
                this._totalCountCorrection += getItemCount() - oldItemCount
            }
            changes.splice(0, changes.length)
        },
        _handlePush: function(_ref5) {
            var {
                changes: changes
            } = _ref5;
            this.push(changes, true)
        },
        _handleChanging: function(e) {
            this.changing.fire(e);
            this._applyBatch(e.changes)
        },
        _needCleanCacheByOperation: function(operationType, remoteOperations) {
            var operationTypesByOrder = ["filtering", "sorting", "paging"];
            var operationTypeIndex = operationTypesByOrder.indexOf(operationType);
            var currentOperationTypes = operationTypeIndex >= 0 ? operationTypesByOrder.slice(operationTypeIndex) : [operationType];
            return currentOperationTypes.some(operationType => remoteOperations[operationType])
        },
        _customizeRemoteOperations: function(options, operationTypes) {
            var cachedStoreData = this._cachedStoreData;
            var cachedPagingData = this._cachedPagingData;
            var cachedData = this._cachedData;
            if (options.storeLoadOptions.filter && !options.remoteOperations.filtering || options.storeLoadOptions.sort && !options.remoteOperations.sorting) {
                options.remoteOperations = {
                    filtering: options.remoteOperations.filtering,
                    summary: options.remoteOperations.summary
                }
            }
            if (operationTypes.fullReload) {
                cachedStoreData = void 0;
                cachedPagingData = void 0;
                cachedData = {
                    items: {}
                }
            } else {
                if (operationTypes.reload) {
                    cachedPagingData = void 0;
                    cachedData = {
                        items: {}
                    }
                } else if (operationTypes.groupExpanding) {
                    cachedData = {
                        items: {}
                    }
                }
                Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_5__["each"])(operationTypes, (operationType, value) => {
                    if (value && this._needCleanCacheByOperation(operationType, options.remoteOperations)) {
                        cachedStoreData = void 0;
                        cachedPagingData = void 0
                    }
                })
            }
            if (cachedPagingData) {
                options.remoteOperations.paging = false
            }
            options.cachedStoreData = cachedStoreData;
            options.cachedPagingData = cachedPagingData;
            options.cachedData = cachedData;
            if (!options.isCustomLoading) {
                this._cachedStoreData = cachedStoreData;
                this._cachedPagingData = cachedPagingData;
                this._cachedData = cachedData
            }
        },
        _handleCustomizeStoreLoadOptions(options) {
            var _options$data;
            this._handleDataLoading(options);
            if (!(0 === (null === (_options$data = options.data) || void 0 === _options$data ? void 0 : _options$data.length))) {
                options.data = getPageDataFromCache(options, true) || options.cachedStoreData
            }
        },
        _handleDataLoading: function(options) {
            var dataSource = this._dataSource;
            var lastLoadOptions = this._lastLoadOptions;
            this.customizeStoreLoadOptions.fire(options);
            options.delay = this.option("loadingTimeout");
            options.originalStoreLoadOptions = options.storeLoadOptions;
            options.remoteOperations = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_6__["extend"])({}, this.remoteOperations());
            var isFullReload = !this.isLoaded() && !this._isRefreshing;
            if (this.option("integrationOptions.renderedOnServer") && !this.isLoaded()) {
                options.delay = void 0
            }
            var loadOptions = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_6__["extend"])({
                pageIndex: this.pageIndex(),
                pageSize: this.pageSize()
            }, options.storeLoadOptions);
            var operationTypes = calculateOperationTypes(loadOptions, lastLoadOptions, isFullReload);
            this._customizeRemoteOperations(options, operationTypes);
            if (!options.isCustomLoading) {
                var isRefreshing = this._isRefreshing;
                options.pageIndex = dataSource.pageIndex();
                options.lastLoadOptions = loadOptions;
                options.operationTypes = operationTypes;
                this._loadingOperationTypes = operationTypes;
                this._isRefreshing = true;
                Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_9__["when"])(isRefreshing || this._isRefreshed || this.refresh(options, operationTypes)).done(() => {
                    if (this._lastOperationId === options.operationId) {
                        this._isRefreshed = true;
                        this.load().always(() => {
                            this._isRefreshed = false
                        })
                    }
                }).fail(() => {
                    dataSource.cancel(options.operationId)
                }).always(() => {
                    this._isRefreshing = false
                });
                dataSource.cancel(this._lastOperationId);
                this._lastOperationId = options.operationId;
                if (this._isRefreshing) {
                    dataSource.cancel(this._lastOperationId)
                }
            }
            this._handleDataLoadingCore(options)
        },
        _handleDataLoadingCore: function(options) {
            var remoteOperations = options.remoteOperations;
            options.loadOptions = {};
            var cachedExtra = options.cachedData.extra;
            var localLoadOptionNames = {
                filter: !remoteOperations.filtering,
                sort: !remoteOperations.sorting,
                group: !remoteOperations.grouping,
                summary: !remoteOperations.summary,
                skip: !remoteOperations.paging,
                take: !remoteOperations.paging,
                requireTotalCount: cachedExtra && "totalCount" in cachedExtra || !remoteOperations.paging
            };
            Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_5__["each"])(options.storeLoadOptions, (function(optionName, optionValue) {
                if (localLoadOptionNames[optionName]) {
                    options.loadOptions[optionName] = optionValue;
                    delete options.storeLoadOptions[optionName]
                }
            }));
            if (cachedExtra) {
                options.extra = cachedExtra
            }
        },
        _handleDataLoaded: function(options) {
            var loadOptions = options.loadOptions;
            var localPaging = options.remoteOperations && !options.remoteOperations.paging;
            var cachedData = options.cachedData;
            var storeLoadOptions = options.storeLoadOptions;
            var needCache = false !== this.option("cacheEnabled") && storeLoadOptions;
            var needPageCache = needCache && !options.isCustomLoading && cachedData && (!localPaging || storeLoadOptions.group);
            var needPagingCache = needCache && localPaging;
            var needStoreCache = needPagingCache && !options.isCustomLoading;
            if (!loadOptions) {
                this._dataSource.cancel(options.operationId);
                return
            }
            if (localPaging) {
                options.skip = loadOptions.skip;
                options.take = loadOptions.take;
                delete loadOptions.skip;
                delete loadOptions.take
            }
            if (loadOptions.group) {
                loadOptions.group = options.group || loadOptions.group
            }
            var groupCount = _data_grid_ui_data_grid_core__WEBPACK_IMPORTED_MODULE_2__["default"].normalizeSortingInfo(options.group || storeLoadOptions.group || loadOptions.group).length;
            if (options.cachedDataPartBegin) {
                options.data = options.cachedDataPartBegin.concat(options.data)
            }
            if (options.cachedDataPartEnd) {
                options.data = options.data.concat(options.cachedDataPartEnd)
            }
            if (!needPageCache || !getPageDataFromCache(options)) {
                if (needPagingCache && options.cachedPagingData) {
                    options.data = cloneItems(options.cachedPagingData, groupCount)
                } else {
                    if (needStoreCache) {
                        if (!this._cachedStoreData) {
                            this._cachedStoreData = cloneItems(options.data, _data_grid_ui_data_grid_core__WEBPACK_IMPORTED_MODULE_2__["default"].normalizeSortingInfo(storeLoadOptions.group).length)
                        } else if (options.mergeStoreLoadData) {
                            options.data = this._cachedStoreData = this._cachedStoreData.concat(options.data)
                        }
                    }
                    new _data_array_store__WEBPACK_IMPORTED_MODULE_7__["default"](options.data).load(loadOptions).done(data => {
                        options.data = data;
                        if (needStoreCache) {
                            this._cachedPagingData = cloneItems(options.data, groupCount)
                        }
                    }).fail(error => {
                        options.data = (new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_9__["Deferred"]).reject(error)
                    })
                }
                if (loadOptions.requireTotalCount && localPaging) {
                    options.extra = Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_4__["isPlainObject"])(options.extra) ? options.extra : {};
                    options.extra.totalCount = options.data.length
                }
                if (options.extra && options.extra.totalCount >= 0 && (false === storeLoadOptions.requireTotalCount || false === loadOptions.requireTotalCount)) {
                    options.extra.totalCount = -1
                }
                this._handleDataLoadedCore(options);
                if (needPageCache) {
                    cachedData.extra = cachedData.extra || Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_6__["extend"])({}, options.extra);
                    Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_9__["when"])(options.data).done(data => {
                        ! function(options, data, groupCount) {
                            var _ref3, _options$skip3, _ref4, _options$take3;
                            var {
                                storeLoadOptions: storeLoadOptions
                            } = options;
                            var skip = null !== (_ref3 = null !== (_options$skip3 = options.skip) && void 0 !== _options$skip3 ? _options$skip3 : storeLoadOptions.skip) && void 0 !== _ref3 ? _ref3 : 0;
                            var take = null !== (_ref4 = null !== (_options$take3 = options.take) && void 0 !== _options$take3 ? _options$take3 : storeLoadOptions.take) && void 0 !== _ref4 ? _ref4 : 0;
                            for (var i = 0; i < take; i++) {
                                var globalIndex = i + skip;
                                var cacheItems = options.cachedData.items;
                                var skips = 0 === i && options.skips || [];
                                cacheItems[globalIndex] = getCacheItem(cacheItems[globalIndex], data[i], groupCount, skips)
                            }
                        }(options, data, groupCount)
                    })
                }
            }
            Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_9__["when"])(options.data).done(() => {
                if (options.lastLoadOptions) {
                    this._lastLoadOptions = options.lastLoadOptions;
                    Object.keys(options.operationTypes).forEach(operationType => {
                        this._lastOperationTypes[operationType] = this._lastOperationTypes[operationType] || options.operationTypes[operationType]
                    })
                }
            });
            options.storeLoadOptions = options.originalStoreLoadOptions
        },
        _handleDataLoadedCore: function(options) {
            if (options.remoteOperations && !options.remoteOperations.paging && Array.isArray(options.data)) {
                if (void 0 !== options.skip) {
                    options.data = options.data.slice(options.skip)
                }
                if (void 0 !== options.take) {
                    options.data = options.data.slice(0, options.take)
                }
            }
        },
        _handleLoadingChanged: function(isLoading) {
            this.loadingChanged.fire(isLoading)
        },
        _handleLoadError: function(error) {
            this.loadError.fire(error);
            this.changed.fire({
                changeType: "loadError",
                error: error
            })
        },
        _loadPageSize: function() {
            return this.pageSize()
        },
        _handleDataChanged: function(args) {
            var currentTotalCount;
            var dataSource = this._dataSource;
            var isLoading = false;
            var isDataLoading = !args || Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_4__["isDefined"])(args.changeType);
            var itemsCount = this.itemsCount();
            if (isDataLoading) {
                this._isLastPage = !itemsCount || !this._loadPageSize() || itemsCount < this._loadPageSize();
                if (this._isLastPage) {
                    this._hasLastPage = true
                }
            }
            if (dataSource.totalCount() >= 0) {
                if (dataSource.pageIndex() >= this.pageCount()) {
                    dataSource.pageIndex(this.pageCount() - 1);
                    this.pageIndex(dataSource.pageIndex());
                    this.resetPagesCache();
                    dataSource.load();
                    isLoading = true
                }
            } else if (isDataLoading) {
                currentTotalCount = dataSource.pageIndex() * this.pageSize() + itemsCount;
                if (currentTotalCount > this._currentTotalCount) {
                    this._currentTotalCount = currentTotalCount;
                    if (0 === dataSource.pageIndex() || !this.option("scrolling.legacyMode")) {
                        this._totalCountCorrection = 0
                    }
                }
                if (0 === itemsCount && dataSource.pageIndex() >= this.pageCount()) {
                    dataSource.pageIndex(this.pageCount() - 1);
                    if ("infinite" !== this.option("scrolling.mode")) {
                        dataSource.load();
                        isLoading = true
                    }
                }
            }
            if (!isLoading) {
                this._operationTypes = this._lastOperationTypes;
                this._lastOperationTypes = {};
                this.component._optionCache = {};
                this.changed.fire(args);
                this.component._optionCache = void 0
            }
        },
        _scheduleCustomLoadCallbacks: function(deferred) {
            var that = this;
            that._isCustomLoading = true;
            deferred.always((function() {
                that._isCustomLoading = false
            }))
        },
        loadingOperationTypes: function() {
            return this._loadingOperationTypes
        },
        operationTypes: function() {
            return this._operationTypes
        },
        lastLoadOptions: function() {
            return this._lastLoadOptions || {}
        },
        isLastPage: function() {
            return this._isLastPage
        },
        _dataSourceTotalCount: function() {
            return this._dataSource.totalCount()
        },
        totalCount: function() {
            return parseInt((this._currentTotalCount || this._dataSourceTotalCount()) + this._totalCountCorrection)
        },
        totalCountCorrection: function() {
            return this._totalCountCorrection
        },
        itemsCount: function() {
            return this._dataSource.items().length
        },
        totalItemsCount: function() {
            return this.totalCount()
        },
        pageSize: function() {
            var dataSource = this._dataSource;
            if (!arguments.length && !dataSource.paginate()) {
                return 0
            }
            return dataSource.pageSize.apply(dataSource, arguments)
        },
        pageCount: function() {
            var count = this.totalItemsCount() - this._totalCountCorrection;
            var pageSize = this.pageSize();
            if (pageSize && count > 0) {
                return Math.max(1, Math.ceil(count / pageSize))
            }
            return 1
        },
        hasKnownLastPage: function() {
            return this._hasLastPage || this._dataSource.totalCount() >= 0
        },
        loadFromStore: function(loadOptions, store) {
            var dataSource = this._dataSource;
            var d = new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_9__["Deferred"];
            if (!dataSource) {
                return
            }
            store = store || dataSource.store();
            store.load(loadOptions).done((function(data, extra) {
                if (data && !Array.isArray(data) && Array.isArray(data.data)) {
                    extra = data;
                    data = data.data
                }
                d.resolve(data, extra)
            })).fail(d.reject);
            return d
        },
        isCustomLoading: function() {
            return !!this._isCustomLoading
        },
        load: function(options) {
            var that = this;
            var dataSource = that._dataSource;
            var d = new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_9__["Deferred"];
            if (options) {
                var store = dataSource.store();
                var dataSourceLoadOptions = dataSource.loadOptions();
                var loadResult = {
                    storeLoadOptions: options,
                    isCustomLoading: true
                };
                Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_5__["each"])(store._customLoadOptions() || [], (function(_, optionName) {
                    if (!(optionName in loadResult.storeLoadOptions)) {
                        loadResult.storeLoadOptions[optionName] = dataSourceLoadOptions[optionName]
                    }
                }));
                this._isLoadingAll = options.isLoadingAll;
                that._scheduleCustomLoadCallbacks(d);
                dataSource._scheduleLoadCallbacks(d);
                that._handleCustomizeStoreLoadOptions(loadResult);
                ! function(action, timeout) {
                    if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_4__["isDefined"])(timeout)) {
                        Object(_core_utils_common__WEBPACK_IMPORTED_MODULE_3__["executeAsync"])(action, timeout)
                    } else {
                        action()
                    }
                }((function() {
                    if (!dataSource.store()) {
                        return d.reject("canceled")
                    }
                    Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_9__["when"])(loadResult.data || that.loadFromStore(loadResult.storeLoadOptions)).done((function(data, extra) {
                        loadResult.data = data;
                        loadResult.extra = extra || {};
                        that._handleDataLoaded(loadResult);
                        if (options.requireTotalCount && void 0 === loadResult.extra.totalCount) {
                            loadResult.extra.totalCount = store.totalCount(loadResult.storeLoadOptions)
                        }
                        Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_9__["when"])(loadResult.data, loadResult.extra.totalCount).done((function(data, totalCount) {
                            loadResult.extra.totalCount = totalCount;
                            d.resolve(data, loadResult.extra)
                        })).fail(d.reject)
                    })).fail(d.reject)
                }), that.option("loadingTimeout"));
                return d.fail((function() {
                    that._eventsStrategy.fireEvent("loadError", arguments)
                })).always(() => {
                    this._isLoadingAll = false
                }).promise()
            } else {
                return dataSource.load()
            }
        },
        reload: function(full) {
            return full ? this._dataSource.reload() : this._dataSource.load()
        },
        getCachedStoreData: function() {
            return this._cachedStoreData
        }
    }
}()));


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.editing.js":
/*!**************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.editing.js ***!
  \**************************************************************************/
/*! exports provided: editingModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "editingModule", function() { return editingModule; });
/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ "./node_modules/@babel/runtime/helpers/esm/extends.js");
/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/renderer */ "./node_modules/devextreme/esm/core/renderer.js");
/* harmony import */ var _core_dom_adapter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/dom_adapter */ "./node_modules/devextreme/esm/core/dom_adapter.js");
/* harmony import */ var _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../events/core/events_engine */ "./node_modules/devextreme/esm/events/core/events_engine.js");
/* harmony import */ var _core_guid__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/guid */ "./node_modules/devextreme/esm/core/guid.js");
/* harmony import */ var _core_utils_dom__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core/utils/dom */ "./node_modules/devextreme/esm/core/utils/dom.js");
/* harmony import */ var _core_utils_type__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../core/utils/type */ "./node_modules/devextreme/esm/core/utils/type.js");
/* harmony import */ var _core_utils_iterator__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../core/utils/iterator */ "./node_modules/devextreme/esm/core/utils/iterator.js");
/* harmony import */ var _core_utils_extend__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../core/utils/extend */ "./node_modules/devextreme/esm/core/utils/extend.js");
/* harmony import */ var _ui_grid_core_modules__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./ui.grid_core.modules */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.modules.js");
/* harmony import */ var _events_click__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../events/click */ "./node_modules/devextreme/esm/events/click.js");
/* harmony import */ var _events_pointer__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../events/pointer */ "./node_modules/devextreme/esm/events/pointer.js");
/* harmony import */ var _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./ui.grid_core.utils */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.utils.js");
/* harmony import */ var _data_array_utils__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../data/array_utils */ "./node_modules/devextreme/esm/data/array_utils.js");
/* harmony import */ var _events_utils_index__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../events/utils/index */ "./node_modules/devextreme/esm/events/utils/index.js");
/* harmony import */ var _dialog__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../dialog */ "./node_modules/devextreme/esm/ui/dialog.js");
/* harmony import */ var _localization_message__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../localization/message */ "./node_modules/devextreme/esm/localization/message.js");
/* harmony import */ var _core_devices__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../core/devices */ "./node_modules/devextreme/esm/core/devices.js");
/* harmony import */ var _core_utils_deferred__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../core/utils/deferred */ "./node_modules/devextreme/esm/core/utils/deferred.js");
/* harmony import */ var _core_utils_common__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../core/utils/common */ "./node_modules/devextreme/esm/core/utils/common.js");
/* harmony import */ var _core_utils_icon__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../core/utils/icon */ "./node_modules/devextreme/esm/core/utils/icon.js");
/* harmony import */ var _ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./ui.grid_core.editing_constants */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.editing_constants.js");
/**
 * DevExtreme (esm/ui/grid_core/ui.grid_core.editing.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */






















var READONLY_CLASS = "readonly";
var LINK_CLASS = "dx-link";
var ROW_SELECTED = "dx-selection";
var EDIT_BUTTON_CLASS = "dx-edit-button";
var COMMAND_EDIT_CLASS = "dx-command-edit";
var COMMAND_EDIT_WITH_ICONS_CLASS = COMMAND_EDIT_CLASS + "-with-icons";
var INSERT_INDEX = "__DX_INSERT_INDEX__";
var ROW_INSERTED = "dx-row-inserted";
var ROW_MODIFIED = "dx-row-modified";
var CELL_MODIFIED = "dx-cell-modified";
var EDITING_NAMESPACE = "dxDataGridEditing";
var CELL_FOCUS_DISABLED_CLASS = "dx-cell-focus-disabled";
var DATA_EDIT_DATA_UPDATE_TYPE = "update";
var DEFAULT_START_EDIT_ACTION = "click";
var EDIT_LINK_CLASS = {
    save: "dx-link-save",
    cancel: "dx-link-cancel",
    edit: "dx-link-edit",
    undelete: "dx-link-undelete",
    delete: "dx-link-delete",
    add: "dx-link-add"
};
var EDIT_ICON_CLASS = {
    save: "save",
    cancel: "revert",
    edit: "edit",
    undelete: "revert",
    delete: "trash",
    add: "add"
};
var METHOD_NAMES = {
    edit: "editRow",
    delete: "deleteRow",
    undelete: "undeleteRow",
    save: "saveEditData",
    cancel: "cancelEditData",
    add: "addRowByRowIndex"
};
var ACTION_OPTION_NAMES = {
    add: "allowAdding",
    edit: "allowUpdating",
    delete: "allowDeleting"
};
var BUTTON_NAMES = ["edit", "save", "cancel", "delete", "undelete"];
var EDITING_CHANGES_OPTION_NAME = "editing.changes";
var createFailureHandler = function(deferred) {
    return function(arg) {
        var error = arg instanceof Error ? arg : new Error(arg && String(arg) || "Unknown error");
        deferred.reject(error)
    }
};
var isEditingCell = function(isEditRow, cellOptions) {
    return cellOptions.isEditing || isEditRow && cellOptions.column.allowEditing
};
var isEditingOrShowEditorAlwaysDataCell = function(isEditRow, cellOptions) {
    var isCommandCell = !!cellOptions.column.command;
    var isEditing = isEditingCell(isEditRow, cellOptions);
    var isEditorCell = !isCommandCell && (isEditing || cellOptions.column.showEditorAlways);
    return "data" === cellOptions.rowType && isEditorCell
};
var EditingController = _ui_grid_core_modules__WEBPACK_IMPORTED_MODULE_9__["default"].ViewController.inherit(function() {
    var getButtonIndex = (buttons, name) => {
        var result = -1;
        buttons.some((button, index) => {
            if (getButtonName(button) === name) {
                result = index;
                return true
            }
        });
        return result
    };

    function getButtonName(button) {
        return Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isObject"])(button) ? button.name : button
    }
    return {
        init: function() {
            this._columnsController = this.getController("columns");
            this._dataController = this.getController("data");
            this._rowsView = this.getView("rowsView");
            this._lastOperation = null;
            if (this._deferreds) {
                this._deferreds.forEach(d => d.reject("cancel"))
            }
            this._deferreds = [];
            if (!this._dataChangedHandler) {
                this._dataChangedHandler = this._handleDataChanged.bind(this);
                this._dataController.changed.add(this._dataChangedHandler)
            }
            if (!this._saveEditorHandler) {
                this.createAction("onInitNewRow", {
                    excludeValidators: ["disabled", "readOnly"]
                });
                this.createAction("onRowInserting", {
                    excludeValidators: ["disabled", "readOnly"]
                });
                this.createAction("onRowInserted", {
                    excludeValidators: ["disabled", "readOnly"]
                });
                this.createAction("onEditingStart", {
                    excludeValidators: ["disabled", "readOnly"]
                });
                this.createAction("onRowUpdating", {
                    excludeValidators: ["disabled", "readOnly"]
                });
                this.createAction("onRowUpdated", {
                    excludeValidators: ["disabled", "readOnly"]
                });
                this.createAction("onRowRemoving", {
                    excludeValidators: ["disabled", "readOnly"]
                });
                this.createAction("onRowRemoved", {
                    excludeValidators: ["disabled", "readOnly"]
                });
                this.createAction("onSaved", {
                    excludeValidators: ["disabled", "readOnly"]
                });
                this.createAction("onSaving", {
                    excludeValidators: ["disabled", "readOnly"]
                });
                this.createAction("onEditCanceling", {
                    excludeValidators: ["disabled", "readOnly"]
                });
                this.createAction("onEditCanceled", {
                    excludeValidators: ["disabled", "readOnly"]
                })
            }
            this._updateEditColumn();
            this._updateEditButtons();
            if (!this._internalState) {
                this._internalState = []
            }
            this.component._optionsByReference[_ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_21__["EDITING_EDITROWKEY_OPTION_NAME"]] = true;
            this.component._optionsByReference[EDITING_CHANGES_OPTION_NAME] = true
        },
        getEditMode: function() {
            var editMode = this.option("editing.mode");
            if (-1 !== _ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_21__["EDIT_MODES"].indexOf(editMode)) {
                return editMode
            }
            return _ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_21__["EDIT_MODE_ROW"]
        },
        _getDefaultEditorTemplate: function() {
            return (container, options) => {
                var $editor = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])("<div>").appendTo(container);
                this.getController("editorFactory").createEditor($editor, Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_8__["extend"])({}, options.column, {
                    value: options.value,
                    setValue: options.setValue,
                    row: options.row,
                    parentType: "dataRow",
                    width: null,
                    readOnly: !options.setValue,
                    isOnForm: options.isOnForm,
                    id: options.id
                }))
            }
        },
        _getNewRowPosition: function() {
            var newRowPosition = this.option("editing.newRowPosition");
            var scrollingMode = this.option("scrolling.mode");
            if ("virtual" === scrollingMode) {
                switch (newRowPosition) {
                    case _ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_21__["PAGE_TOP_NEW_ROW_POSITION"]:
                        return _ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_21__["VIEWPORT_TOP_NEW_ROW_POSITION"];
                    case _ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_21__["PAGE_BOTTOM_NEW_ROW_POSITION"]:
                        return _ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_21__["VIEWPORT_BOTTOM_NEW_ROW_POSITION"];
                    default:
                        return newRowPosition
                }
            }
            return newRowPosition
        },
        getChanges: function() {
            return this.option(EDITING_CHANGES_OPTION_NAME)
        },
        getInsertRowCount: function() {
            var changes = this.option(EDITING_CHANGES_OPTION_NAME);
            return changes.filter(change => "insert" === change.type).length
        },
        resetChanges: function() {
            var changes = this.getChanges();
            var needReset = null === changes || void 0 === changes ? void 0 : changes.length;
            if (needReset) {
                this._silentOption(EDITING_CHANGES_OPTION_NAME, [])
            }
        },
        _getInternalData: function(key) {
            return this._internalState.filter(item => Object(_core_utils_common__WEBPACK_IMPORTED_MODULE_19__["equalByValue"])(item.key, key))[0]
        },
        _addInternalData: function(params) {
            var internalData = this._getInternalData(params.key);
            if (internalData) {
                return Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_8__["extend"])(internalData, params)
            }
            this._internalState.push(params);
            return params
        },
        _getOldData: function(key) {
            var _this$_getInternalDat;
            return null === (_this$_getInternalDat = this._getInternalData(key)) || void 0 === _this$_getInternalDat ? void 0 : _this$_getInternalDat.oldData
        },
        getUpdatedData: function(data) {
            var key = this._dataController.keyOf(data);
            var changes = this.getChanges();
            var editIndex = _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_12__["default"].getIndexByKey(key, changes);
            if (changes[editIndex]) {
                return Object(_data_array_utils__WEBPACK_IMPORTED_MODULE_13__["createObjectWithChanges"])(data, changes[editIndex].data)
            }
            return data
        },
        getInsertedData: function() {
            return this.getChanges().filter(change => change.data && change.type === _ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_21__["DATA_EDIT_DATA_INSERT_TYPE"]).map(change => change.data)
        },
        getRemovedData: function() {
            return this.getChanges().filter(change => this._getOldData(change.key) && change.type === _ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_21__["DATA_EDIT_DATA_REMOVE_TYPE"]).map(change => this._getOldData(change.key))
        },
        _fireDataErrorOccurred: function(arg) {
            if ("cancel" === arg) {
                return
            }
            var $popupContent = this.getPopupContent();
            this._dataController.dataErrorOccurred.fire(arg, $popupContent)
        },
        _needToCloseEditableCell: _core_utils_common__WEBPACK_IMPORTED_MODULE_19__["noop"],
        _closeEditItem: _core_utils_common__WEBPACK_IMPORTED_MODULE_19__["noop"],
        _handleDataChanged: _core_utils_common__WEBPACK_IMPORTED_MODULE_19__["noop"],
        _isDefaultButtonVisible: function(button, options) {
            var result = true;
            switch (button.name) {
                case "delete":
                    result = this.allowDeleting(options);
                    break;
                case "undelete":
                    result = false
            }
            return result
        },
        _isButtonVisible: function(button, options) {
            var visible = button.visible;
            if (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isDefined"])(visible)) {
                return this._isDefaultButtonVisible(button, options)
            }
            return Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isFunction"])(visible) ? visible.call(button, {
                component: options.component,
                row: options.row,
                column: options.column
            }) : visible
        },
        _isButtonDisabled: function(button, options) {
            var disabled = button.disabled;
            return Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isFunction"])(disabled) ? disabled.call(button, {
                component: options.component,
                row: options.row,
                column: options.column
            }) : !!disabled
        },
        _getButtonConfig: function(button, options) {
            var config = Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isObject"])(button) ? button : {};
            var buttonName = getButtonName(button);
            var editingTexts = (options => {
                var editingTexts = options.component.option("editing.texts") || {};
                return {
                    save: editingTexts.saveRowChanges,
                    cancel: editingTexts.cancelRowChanges,
                    edit: editingTexts.editRow,
                    undelete: editingTexts.undeleteRow,
                    delete: editingTexts.deleteRow,
                    add: editingTexts.addRowToNode
                }
            })(options);
            var methodName = METHOD_NAMES[buttonName];
            var editingOptions = this.option("editing");
            var actionName = ACTION_OPTION_NAMES[buttonName];
            var allowAction = actionName ? editingOptions[actionName] : true;
            return Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_8__["extend"])({
                name: buttonName,
                text: editingTexts[buttonName],
                cssClass: EDIT_LINK_CLASS[buttonName]
            }, {
                onClick: methodName && (e => {
                    var event = e.event;
                    event.stopPropagation();
                    event.preventDefault();
                    setTimeout(() => {
                        options.row && allowAction && this[methodName] && this[methodName](options.row.rowIndex)
                    })
                })
            }, config)
        },
        _getEditingButtons: function(options) {
            var buttonIndex;
            var haveCustomButtons = !!options.column.buttons;
            var buttons = (options.column.buttons || []).slice();
            if (haveCustomButtons) {
                buttonIndex = getButtonIndex(buttons, "edit");
                if (buttonIndex >= 0) {
                    if (getButtonIndex(buttons, "save") < 0) {
                        buttons.splice(buttonIndex + 1, 0, "save")
                    }
                    if (getButtonIndex(buttons, "cancel") < 0) {
                        buttons.splice(getButtonIndex(buttons, "save") + 1, 0, "cancel")
                    }
                }
                buttonIndex = getButtonIndex(buttons, "delete");
                if (buttonIndex >= 0 && getButtonIndex(buttons, "undelete") < 0) {
                    buttons.splice(buttonIndex + 1, 0, "undelete")
                }
            } else {
                buttons = BUTTON_NAMES.slice()
            }
            return buttons.map(button => this._getButtonConfig(button, options))
        },
        _renderEditingButtons: function($container, buttons, options, change) {
            buttons.forEach(button => {
                if (this._isButtonVisible(button, options)) {
                    this._createButton($container, button, options, change)
                }
            })
        },
        _getEditCommandCellTemplate: function() {
            return (container, options, change) => {
                var $container = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(container);
                if ("data" === options.rowType) {
                    var buttons = this._getEditingButtons(options);
                    this._renderEditingButtons($container, buttons, options, change);
                    options.watch && options.watch(() => buttons.map(button => this._isButtonVisible(button, options)), () => {
                        $container.empty();
                        this._renderEditingButtons($container, buttons, options)
                    })
                } else {
                    _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_12__["default"].setEmptyText($container)
                }
            }
        },
        isRowBasedEditMode: function() {
            var editMode = this.getEditMode();
            return -1 !== _ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_21__["ROW_BASED_MODES"].indexOf(editMode)
        },
        getFirstEditableColumnIndex: function() {
            var columnsController = this.getController("columns");
            var columnIndex;
            var visibleColumns = columnsController.getVisibleColumns();
            Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_7__["each"])(visibleColumns, (function(index, column) {
                if (column.allowEditing) {
                    columnIndex = index;
                    return false
                }
            }));
            return columnIndex
        },
        getFirstEditableCellInRow: function(rowIndex) {
            var rowsView = this.getView("rowsView");
            return rowsView && rowsView._getCellElement(rowIndex ? rowIndex : 0, this.getFirstEditableColumnIndex())
        },
        getFocusedCellInRow: function(rowIndex) {
            return this.getFirstEditableCellInRow(rowIndex)
        },
        getIndexByKey: function(key, items) {
            return _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_12__["default"].getIndexByKey(key, items)
        },
        hasChanges: function(rowIndex) {
            var changes = this.getChanges();
            var result = false;
            for (var i = 0; i < (null === changes || void 0 === changes ? void 0 : changes.length); i++) {
                if (changes[i].type && (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isDefined"])(rowIndex) || this._dataController.getRowIndexByKey(changes[i].key) === rowIndex)) {
                    result = true;
                    break
                }
            }
            return result
        },
        dispose: function() {
            this.callBase();
            clearTimeout(this._inputFocusTimeoutID);
            _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__["default"].off(_core_dom_adapter__WEBPACK_IMPORTED_MODULE_2__["default"].getDocument(), _events_pointer__WEBPACK_IMPORTED_MODULE_11__["default"].up, this._pointerUpEditorHandler);
            _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__["default"].off(_core_dom_adapter__WEBPACK_IMPORTED_MODULE_2__["default"].getDocument(), _events_pointer__WEBPACK_IMPORTED_MODULE_11__["default"].down, this._pointerDownEditorHandler);
            _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__["default"].off(_core_dom_adapter__WEBPACK_IMPORTED_MODULE_2__["default"].getDocument(), _events_click__WEBPACK_IMPORTED_MODULE_10__["name"], this._saveEditorHandler)
        },
        optionChanged: function(args) {
            if ("editing" === args.name) {
                var fullName = args.fullName;
                if (fullName === _ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_21__["EDITING_EDITROWKEY_OPTION_NAME"]) {
                    this._handleEditRowKeyChange(args)
                } else if (fullName === EDITING_CHANGES_OPTION_NAME) {
                    this._handleChangesChange(args)
                } else if (!args.handled) {
                    this._columnsController.reinit();
                    this.init();
                    this.resetChanges();
                    this._resetEditColumnName();
                    this._resetEditRowKey()
                }
                args.handled = true
            } else {
                this.callBase(args)
            }
        },
        _handleEditRowKeyChange: function(args) {
            var rowIndex = this._dataController.getRowIndexByKey(args.value);
            var oldRowIndexCorrection = this._getEditRowIndexCorrection();
            var oldRowIndex = this._dataController.getRowIndexByKey(args.previousValue) + oldRowIndexCorrection;
            if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isDefined"])(args.value)) {
                if (args.value !== args.previousValue) {
                    this._editRowFromOptionChanged(rowIndex, oldRowIndex)
                }
            } else {
                this.cancelEditData()
            }
        },
        _handleChangesChange: function(args) {
            var dataController = this._dataController;
            if (!args.value.length && !args.previousValue.length) {
                return
            }
            this._processInsertChanges(args.value);
            dataController.updateItems({
                repaintChangesOnly: true
            })
        },
        _processInsertChanges: function(changes) {
            changes.forEach(change => {
                if ("insert" === change.type) {
                    this._addInsertInfo(change)
                }
            })
        },
        publicMethods: function() {
            return ["addRow", "deleteRow", "undeleteRow", "editRow", "saveEditData", "cancelEditData", "hasEditData"]
        },
        refresh: function() {
            if (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isDefined"])(this._pageIndex)) {
                return
            }
            this._refreshCore.apply(this, arguments)
        },
        _refreshCore: _core_utils_common__WEBPACK_IMPORTED_MODULE_19__["noop"],
        isEditing: function() {
            var isEditRowKeyDefined = Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isDefined"])(this.option(_ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_21__["EDITING_EDITROWKEY_OPTION_NAME"]));
            return isEditRowKeyDefined
        },
        isEditRow: function() {
            return false
        },
        _setEditRowKey: function(value, silent) {
            if (silent) {
                this._silentOption(_ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_21__["EDITING_EDITROWKEY_OPTION_NAME"], value)
            } else {
                this.option(_ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_21__["EDITING_EDITROWKEY_OPTION_NAME"], value)
            }
        },
        _setEditRowKeyByIndex: function(rowIndex, silent) {
            var key = this._dataController.getKeyByRowIndex(rowIndex);
            if (void 0 === key) {
                this._dataController.fireError("E1043");
                return
            }
            this._setEditRowKey(key, silent)
        },
        getEditRowIndex: function() {
            return this._getVisibleEditRowIndex()
        },
        getEditFormRowIndex: function() {
            return -1
        },
        _isEditRowByIndex(rowIndex) {
            var key = this._dataController.getKeyByRowIndex(rowIndex);
            var isKeyEqual = Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isDefined"])(key) && Object(_core_utils_common__WEBPACK_IMPORTED_MODULE_19__["equalByValue"])(this.option(_ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_21__["EDITING_EDITROWKEY_OPTION_NAME"]), key);
            if (isKeyEqual) {
                return this._getVisibleEditRowIndex() === rowIndex
            }
            return isKeyEqual
        },
        isEditCell: function(visibleRowIndex, columnIndex) {
            return this._isEditRowByIndex(visibleRowIndex) && this._getVisibleEditColumnIndex() === columnIndex
        },
        getPopupContent: _core_utils_common__WEBPACK_IMPORTED_MODULE_19__["noop"],
        _isProcessedItem: function(item) {
            return false
        },
        _getInsertRowIndex: function(items, change, isProcessedItems) {
            var result = -1;
            var dataController = this._dataController;
            var key = this._getInsertAfterOrBeforeKey(change);
            if (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isDefined"])(key) && 0 === items.length) {
                result = 0
            } else if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isDefined"])(key)) {
                items.some((item, index) => {
                    var isProcessedItem = isProcessedItems || this._isProcessedItem(item);
                    if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isObject"])(item)) {
                        if (isProcessedItem || Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isDefined"])(item[INSERT_INDEX])) {
                            if (Object(_core_utils_common__WEBPACK_IMPORTED_MODULE_19__["equalByValue"])(item.key, key)) {
                                result = index
                            }
                        } else if (Object(_core_utils_common__WEBPACK_IMPORTED_MODULE_19__["equalByValue"])(dataController.keyOf(item), key)) {
                            result = index
                        }
                    }
                    if (result >= 0) {
                        var nextItem = items[result + 1];
                        if (nextItem && ("detail" === nextItem.rowType || "detailAdaptive" === nextItem.rowType) && Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isDefined"])(change.insertAfterKey)) {
                            return
                        }
                        if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isDefined"])(change.insertAfterKey)) {
                            result += 1
                        }
                        return true
                    }
                })
            }
            return result
        },
        _generateNewItem: function(key) {
            var _this$_getInternalDat2;
            var item = {
                key: key
            };
            var insertInfo = null === (_this$_getInternalDat2 = this._getInternalData(key)) || void 0 === _this$_getInternalDat2 ? void 0 : _this$_getInternalDat2.insertInfo;
            if (null !== insertInfo && void 0 !== insertInfo && insertInfo[INSERT_INDEX]) {
                item[INSERT_INDEX] = insertInfo[INSERT_INDEX]
            }
            return item
        },
        _getLoadedRowIndex: function(items, change, isProcessedItems) {
            var loadedRowIndex = this._getInsertRowIndex(items, change, isProcessedItems);
            var dataController = this._dataController;
            if (loadedRowIndex < 0) {
                var newRowPosition = this._getNewRowPosition();
                var pageIndex = dataController.pageIndex();
                var insertAfterOrBeforeKey = this._getInsertAfterOrBeforeKey(change);
                if (newRowPosition !== _ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_21__["LAST_NEW_ROW_POSITION"] && 0 === pageIndex && !Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isDefined"])(insertAfterOrBeforeKey)) {
                    loadedRowIndex = 0
                } else if (newRowPosition === _ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_21__["LAST_NEW_ROW_POSITION"] && dataController.isLastPageLoaded()) {
                    loadedRowIndex = items.length
                }
            }
            return loadedRowIndex
        },
        processItems: function(items, e) {
            var changeType = e.changeType;
            this.update(changeType);
            var changes = this.getChanges();
            changes.forEach(change => {
                var _this$_getInternalDat3;
                var isInsert = change.type === _ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_21__["DATA_EDIT_DATA_INSERT_TYPE"];
                if (!isInsert) {
                    return
                }
                var key = change.key;
                var insertInfo = null === (_this$_getInternalDat3 = this._getInternalData(key)) || void 0 === _this$_getInternalDat3 ? void 0 : _this$_getInternalDat3.insertInfo;
                if (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isDefined"])(key) || !Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isDefined"])(insertInfo)) {
                    insertInfo = this._addInsertInfo(change);
                    key = insertInfo.key
                }
                var loadedRowIndex = this._getLoadedRowIndex(items, change);
                var item = this._generateNewItem(key);
                if (loadedRowIndex >= 0) {
                    items.splice(loadedRowIndex, 0, item)
                }
            });
            return items
        },
        processDataItem: function(item, options, generateDataValues) {
            var columns = options.visibleColumns;
            var key = item.data[INSERT_INDEX] ? item.data.key : item.key;
            var changes = this.getChanges();
            var editIndex = _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_12__["default"].getIndexByKey(key, changes);
            item.isEditing = false;
            if (editIndex >= 0) {
                this._processDataItemCore(item, changes[editIndex], key, columns, generateDataValues)
            }
        },
        _processDataItemCore: function(item, change, key, columns, generateDataValues) {
            var {
                data: data,
                type: type
            } = change;
            switch (type) {
                case _ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_21__["DATA_EDIT_DATA_INSERT_TYPE"]:
                    item.isNewRow = true;
                    item.key = key;
                    item.data = data;
                    break;
                case DATA_EDIT_DATA_UPDATE_TYPE:
                    item.modified = true;
                    item.oldData = item.data;
                    item.data = Object(_data_array_utils__WEBPACK_IMPORTED_MODULE_13__["createObjectWithChanges"])(item.data, data);
                    item.modifiedValues = generateDataValues(data, columns, true);
                    break;
                case _ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_21__["DATA_EDIT_DATA_REMOVE_TYPE"]:
                    item.removed = true
            }
        },
        _initNewRow: function(options) {
            this.executeAction("onInitNewRow", options);
            if (options.promise) {
                var deferred = new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_18__["Deferred"];
                Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_18__["when"])(Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_18__["fromPromise"])(options.promise)).done(deferred.resolve).fail(createFailureHandler(deferred)).fail(arg => this._fireDataErrorOccurred(arg));
                return deferred
            }
        },
        _createInsertInfo: function() {
            var insertInfo = {};
            insertInfo[INSERT_INDEX] = this._getInsertIndex();
            return insertInfo
        },
        _addInsertInfo: function(change, parentKey) {
            var _this$_getInternalDat4;
            var insertInfo;
            var {
                key: key
            } = change;
            if (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isDefined"])(key)) {
                key = String(new _core_guid__WEBPACK_IMPORTED_MODULE_4__["default"]);
                change.key = key
            }
            insertInfo = null === (_this$_getInternalDat4 = this._getInternalData(key)) || void 0 === _this$_getInternalDat4 ? void 0 : _this$_getInternalDat4.insertInfo;
            if (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isDefined"])(insertInfo)) {
                var insertAfterOrBeforeKey = this._getInsertAfterOrBeforeKey(change);
                insertInfo = this._createInsertInfo();
                if (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isDefined"])(insertAfterOrBeforeKey)) {
                    this._setInsertAfterOrBeforeKey(change, parentKey)
                }
            }
            this._addInternalData({
                insertInfo: insertInfo,
                key: key
            });
            return {
                insertInfo: insertInfo,
                key: key
            }
        },
        _setInsertAfterOrBeforeKey: function(change, parentKey) {
            var dataController = this._dataController;
            var allItems = dataController.items(true);
            var rowsView = this.getView("rowsView");
            var newRowPosition = this._getNewRowPosition();
            switch (newRowPosition) {
                case _ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_21__["FIRST_NEW_ROW_POSITION"]:
                case _ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_21__["LAST_NEW_ROW_POSITION"]:
                    break;
                case _ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_21__["PAGE_TOP_NEW_ROW_POSITION"]:
                case _ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_21__["PAGE_BOTTOM_NEW_ROW_POSITION"]:
                    if (allItems.length) {
                        var itemIndex = newRowPosition === _ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_21__["PAGE_TOP_NEW_ROW_POSITION"] ? 0 : allItems.length - 1;
                        change[0 === itemIndex ? "insertBeforeKey" : "insertAfterKey"] = allItems[itemIndex].key
                    }
                    break;
                default:
                    var isViewportBottom = newRowPosition === _ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_21__["VIEWPORT_BOTTOM_NEW_ROW_POSITION"];
                    var visibleItemIndex = isViewportBottom ? null === rowsView || void 0 === rowsView ? void 0 : rowsView.getBottomVisibleItemIndex() : null === rowsView || void 0 === rowsView ? void 0 : rowsView.getTopVisibleItemIndex();
                    var row = dataController.getVisibleRows()[visibleItemIndex];
                    if (row && (!row.isEditing && "detail" === row.rowType || "detailAdaptive" === row.rowType)) {
                        visibleItemIndex++
                    }
                    var insertKey = dataController.getKeyByRowIndex(visibleItemIndex);
                    if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isDefined"])(insertKey)) {
                        change.insertBeforeKey = insertKey
                    }
            }
        },
        _getInsertIndex: function() {
            var maxInsertIndex = 0;
            this.getChanges().forEach(editItem => {
                var _this$_getInternalDat5;
                var insertInfo = null === (_this$_getInternalDat5 = this._getInternalData(editItem.key)) || void 0 === _this$_getInternalDat5 ? void 0 : _this$_getInternalDat5.insertInfo;
                if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isDefined"])(insertInfo) && editItem.type === _ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_21__["DATA_EDIT_DATA_INSERT_TYPE"] && insertInfo[INSERT_INDEX] > maxInsertIndex) {
                    maxInsertIndex = insertInfo[INSERT_INDEX]
                }
            });
            return maxInsertIndex + 1
        },
        _getInsertAfterOrBeforeKey: function(insertChange) {
            var _insertChange$insertA;
            return null !== (_insertChange$insertA = insertChange.insertAfterKey) && void 0 !== _insertChange$insertA ? _insertChange$insertA : insertChange.insertBeforeKey
        },
        _getPageIndexToInsertRow: function() {
            var newRowPosition = this._getNewRowPosition();
            var dataController = this._dataController;
            var pageIndex = dataController.pageIndex();
            var lastPageIndex = dataController.pageCount() - 1;
            if (newRowPosition === _ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_21__["FIRST_NEW_ROW_POSITION"] && 0 !== pageIndex) {
                return 0
            } else if (newRowPosition === _ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_21__["LAST_NEW_ROW_POSITION"] && pageIndex !== lastPageIndex) {
                return lastPageIndex
            }
            return -1
        },
        addRow: function(parentKey) {
            var dataController = this._dataController;
            var store = dataController.store();
            if (!store) {
                dataController.fireError("E1052", this.component.NAME);
                return (new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_18__["Deferred"]).reject()
            }
            return this._addRow(parentKey)
        },
        _addRow: function(parentKey) {
            var dataController = this._dataController;
            var store = dataController.store();
            var key = store && store.key();
            var param = {
                data: {}
            };
            var oldEditRowIndex = this._getVisibleEditRowIndex();
            var deferred = new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_18__["Deferred"];
            this.refresh({
                allowCancelEditing: true
            });
            if (!this._allowRowAdding()) {
                Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_18__["when"])(this._navigateToNewRow(oldEditRowIndex)).done(deferred.resolve).fail(deferred.reject);
                return deferred.promise()
            }
            if (!key) {
                param.data.__KEY__ = String(new _core_guid__WEBPACK_IMPORTED_MODULE_4__["default"])
            }
            Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_18__["when"])(this._initNewRow(param, parentKey)).done(() => {
                if (this._allowRowAdding()) {
                    Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_18__["when"])(this._addRowCore(param.data, parentKey, oldEditRowIndex)).done(deferred.resolve).fail(deferred.reject)
                } else {
                    deferred.reject("cancel")
                }
            }).fail(deferred.reject);
            return deferred.promise()
        },
        _allowRowAdding: function() {
            var insertIndex = this._getInsertIndex();
            if (insertIndex > 1) {
                return false
            }
            return true
        },
        _addRowCore: function(data, parentKey, initialOldEditRowIndex) {
            var change = {
                data: data,
                type: _ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_21__["DATA_EDIT_DATA_INSERT_TYPE"]
            };
            var editRowIndex = this._getVisibleEditRowIndex();
            var insertInfo = this._addInsertInfo(change, parentKey);
            var key = insertInfo.key;
            this._setEditRowKey(key, true);
            this._addChange(change);
            return this._navigateToNewRow(initialOldEditRowIndex, change, editRowIndex)
        },
        _navigateToNewRow: function(oldEditRowIndex, change, editRowIndex) {
            var _editRowIndex, _change;
            var d = new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_18__["Deferred"];
            var dataController = this._dataController;
            var focusController = this.getController("focus");
            editRowIndex = null !== (_editRowIndex = editRowIndex) && void 0 !== _editRowIndex ? _editRowIndex : -1;
            change = null !== (_change = change) && void 0 !== _change ? _change : this.getChanges().filter(c => c.type === _ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_21__["DATA_EDIT_DATA_INSERT_TYPE"])[0];
            if (!change) {
                return d.reject("cancel").promise()
            }
            var pageIndexToInsertRow = this._getPageIndexToInsertRow();
            var rowIndex = this._getLoadedRowIndex(dataController.items(), change, true);
            var navigateToRowByKey = key => {
                Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_18__["when"])(null === focusController || void 0 === focusController ? void 0 : focusController.navigateToRow(key)).done(() => {
                    rowIndex = dataController.getRowIndexByKey(change.key);
                    d.resolve()
                })
            };
            var insertAfterOrBeforeKey = this._getInsertAfterOrBeforeKey(change);
            if (pageIndexToInsertRow >= 0) {
                dataController.pageIndex(pageIndexToInsertRow).done(() => {
                    navigateToRowByKey(change.key)
                }).fail(d.reject)
            } else if (rowIndex < 0 && Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isDefined"])(insertAfterOrBeforeKey)) {
                navigateToRowByKey(insertAfterOrBeforeKey)
            } else {
                dataController.updateItems({
                    changeType: "update",
                    rowIndices: [oldEditRowIndex, editRowIndex, rowIndex]
                });
                rowIndex = dataController.getRowIndexByKey(change.key);
                if (rowIndex < 0) {
                    navigateToRowByKey(change.key)
                } else {
                    d.resolve()
                }
            }
            d.done(() => {
                this._showAddedRow(rowIndex);
                this._afterInsertRow(change.key)
            });
            return d.promise()
        },
        _showAddedRow: function(rowIndex) {
            this._focusFirstEditableCellInRow(rowIndex)
        },
        _beforeFocusElementInRow: _core_utils_common__WEBPACK_IMPORTED_MODULE_19__["noop"],
        _focusFirstEditableCellInRow: function(rowIndex) {
            var dataController = this._dataController;
            var key = dataController.getKeyByRowIndex(rowIndex);
            var $firstCell = this.getFirstEditableCellInRow(rowIndex);
            this._editCellInProgress = true;
            this._delayedInputFocus($firstCell, () => {
                rowIndex = dataController.getRowIndexByKey(key);
                this._editCellInProgress = false;
                this._beforeFocusElementInRow(rowIndex)
            })
        },
        _isEditingStart: function(options) {
            this.executeAction("onEditingStart", options);
            return options.cancel
        },
        _beforeUpdateItems: _core_utils_common__WEBPACK_IMPORTED_MODULE_19__["noop"],
        _getVisibleEditColumnIndex: function() {
            var editColumnName = this.option(_ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_21__["EDITING_EDITCOLUMNNAME_OPTION_NAME"]);
            if (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isDefined"])(editColumnName)) {
                return -1
            }
            return this._columnsController.getVisibleColumnIndex(editColumnName)
        },
        _setEditColumnNameByIndex: function(index, silent) {
            var _visibleColumns$index;
            var visibleColumns = this._columnsController.getVisibleColumns();
            this._setEditColumnName(null === (_visibleColumns$index = visibleColumns[index]) || void 0 === _visibleColumns$index ? void 0 : _visibleColumns$index.name, silent)
        },
        _setEditColumnName: function(name, silent) {
            if (silent) {
                this._silentOption(_ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_21__["EDITING_EDITCOLUMNNAME_OPTION_NAME"], name)
            } else {
                this.option(_ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_21__["EDITING_EDITCOLUMNNAME_OPTION_NAME"], name)
            }
        },
        _resetEditColumnName: function() {
            this._setEditColumnName(null, true)
        },
        _getEditColumn: function() {
            var editColumnName = this.option(_ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_21__["EDITING_EDITCOLUMNNAME_OPTION_NAME"]);
            return this._getColumnByName(editColumnName)
        },
        _getColumnByName: function(name) {
            var visibleColumns = this._columnsController.getVisibleColumns();
            var editColumn;
            Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isDefined"])(name) && visibleColumns.some(column => {
                if (column.name === name) {
                    editColumn = column;
                    return true
                }
            });
            return editColumn
        },
        _getVisibleEditRowIndex: function(columnName) {
            var dataController = this._dataController;
            var editRowKey = this.option(_ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_21__["EDITING_EDITROWKEY_OPTION_NAME"]);
            var rowIndex = dataController.getRowIndexByKey(editRowKey);
            if (-1 === rowIndex) {
                return rowIndex
            }
            return rowIndex + this._getEditRowIndexCorrection(columnName)
        },
        _getEditRowIndexCorrection: function(columnName) {
            var editColumn = columnName ? this._getColumnByName(columnName) : this._getEditColumn();
            var isColumnHidden = "adaptiveHidden" === (null === editColumn || void 0 === editColumn ? void 0 : editColumn.visibleWidth);
            return isColumnHidden ? 1 : 0
        },
        _resetEditRowKey: function() {
            this._setEditRowKey(null, true)
        },
        _resetEditIndices: function() {
            this._resetEditColumnName();
            this._resetEditRowKey()
        },
        editRow: function(rowIndex) {
            var _item$oldData;
            var dataController = this._dataController;
            var items = dataController.items();
            var item = items[rowIndex];
            var params = {
                data: item && item.data,
                cancel: false
            };
            var oldRowIndex = this._getVisibleEditRowIndex();
            if (!item) {
                return
            }
            if (rowIndex === oldRowIndex) {
                return true
            }
            if (void 0 === item.key) {
                this._dataController.fireError("E1043");
                return
            }
            if (!item.isNewRow) {
                params.key = item.key
            }
            if (this._isEditingStart(params)) {
                return
            }
            this.resetChanges();
            this.init();
            this._resetEditColumnName();
            this._pageIndex = dataController.pageIndex();
            this._addInternalData({
                key: item.key,
                oldData: null !== (_item$oldData = item.oldData) && void 0 !== _item$oldData ? _item$oldData : item.data
            });
            this._setEditRowKey(item.key)
        },
        _editRowFromOptionChanged: function(rowIndex, oldRowIndex) {
            var rowIndices = [oldRowIndex, rowIndex];
            this._beforeUpdateItems(rowIndices, rowIndex, oldRowIndex);
            this._editRowFromOptionChangedCore(rowIndices, rowIndex)
        },
        _editRowFromOptionChangedCore: function(rowIndices, rowIndex, preventRendering) {
            this._needFocusEditor = true;
            this._dataController.updateItems({
                changeType: "update",
                rowIndices: rowIndices,
                cancel: preventRendering
            })
        },
        _focusEditorIfNeed: _core_utils_common__WEBPACK_IMPORTED_MODULE_19__["noop"],
        _showEditPopup: _core_utils_common__WEBPACK_IMPORTED_MODULE_19__["noop"],
        _repaintEditPopup: _core_utils_common__WEBPACK_IMPORTED_MODULE_19__["noop"],
        _getEditPopupHiddenHandler: function() {
            return e => {
                if (this.isEditing()) {
                    this.cancelEditData()
                }
            }
        },
        _getPopupEditFormTemplate: _core_utils_common__WEBPACK_IMPORTED_MODULE_19__["noop"],
        _getSaveButtonConfig: function() {
            return {
                text: this.option("editing.texts.saveRowChanges"),
                onClick: this.saveEditData.bind(this)
            }
        },
        _getCancelButtonConfig: function() {
            return {
                text: this.option("editing.texts.cancelRowChanges"),
                onClick: this.cancelEditData.bind(this)
            }
        },
        _removeInternalData: function(key) {
            var internalData = this._getInternalData(key);
            var index = this._internalState.indexOf(internalData);
            if (index > -1) {
                this._internalState.splice(index, 1)
            }
        },
        _updateInsertAfterOrBeforeKeys: function(changes, index) {
            var removeChange = changes[index];
            changes.forEach(change => {
                var insertAfterOrBeforeKey = this._getInsertAfterOrBeforeKey(change);
                if (Object(_core_utils_common__WEBPACK_IMPORTED_MODULE_19__["equalByValue"])(insertAfterOrBeforeKey, removeChange.key)) {
                    change[Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isDefined"])(change.insertAfterKey) ? "insertAfterKey" : "insertBeforeKey"] = this._getInsertAfterOrBeforeKey(removeChange)
                }
            })
        },
        _removeChange: function(index) {
            if (index >= 0) {
                var changes = [...this.getChanges()];
                var key = changes[index].key;
                this._removeInternalData(key);
                this._updateInsertAfterOrBeforeKeys(changes, index);
                changes.splice(index, 1);
                this._silentOption(EDITING_CHANGES_OPTION_NAME, changes);
                if (Object(_core_utils_common__WEBPACK_IMPORTED_MODULE_19__["equalByValue"])(this.option(_ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_21__["EDITING_EDITROWKEY_OPTION_NAME"]), key)) {
                    this._resetEditIndices()
                }
            }
        },
        executeOperation: function(deferred, func) {
            this._lastOperation && this._lastOperation.reject();
            this._lastOperation = deferred;
            this.waitForDeferredOperations().done(() => {
                if ("rejected" === deferred.state()) {
                    return
                }
                func();
                this._lastOperation = null
            }).fail(() => {
                deferred.reject();
                this._lastOperation = null
            })
        },
        waitForDeferredOperations: function() {
            return Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_18__["when"])(...this._deferreds)
        },
        _processCanceledEditingCell: _core_utils_common__WEBPACK_IMPORTED_MODULE_19__["noop"],
        _repaintEditCell: function(column, oldColumn, oldEditRowIndex) {
            this._needFocusEditor = true;
            if (!column || !column.showEditorAlways || oldColumn && !oldColumn.showEditorAlways) {
                this._editCellInProgress = true;
                this.getController("editorFactory").loseFocus();
                this._dataController.updateItems({
                    changeType: "update",
                    rowIndices: [oldEditRowIndex, this._getVisibleEditRowIndex()]
                })
            } else if (column !== oldColumn) {
                this._dataController.updateItems({
                    changeType: "update",
                    rowIndices: []
                })
            }
        },
        _delayedInputFocus: function($cell, beforeFocusCallback, callBeforeFocusCallbackAlways) {
            var inputFocus = () => {
                if (beforeFocusCallback) {
                    beforeFocusCallback()
                }
                if ($cell) {
                    var $focusableElement = $cell.find(_ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_21__["FOCUSABLE_ELEMENT_SELECTOR"]).first();
                    _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_12__["default"].focusAndSelectElement(this, $focusableElement)
                }
                this._beforeFocusCallback = null
            };
            if (_core_devices__WEBPACK_IMPORTED_MODULE_17__["default"].real().ios || _core_devices__WEBPACK_IMPORTED_MODULE_17__["default"].real().android) {
                inputFocus()
            } else {
                if (this._beforeFocusCallback) {
                    this._beforeFocusCallback()
                }
                clearTimeout(this._inputFocusTimeoutID);
                if (callBeforeFocusCallbackAlways) {
                    this._beforeFocusCallback = beforeFocusCallback
                }
                this._inputFocusTimeoutID = setTimeout(inputFocus)
            }
        },
        _focusEditingCell: function(beforeFocusCallback, $editCell, callBeforeFocusCallbackAlways) {
            var rowsView = this.getView("rowsView");
            var editColumnIndex = this._getVisibleEditColumnIndex();
            $editCell = $editCell || rowsView && rowsView._getCellElement(this._getVisibleEditRowIndex(), editColumnIndex);
            if ($editCell) {
                this._delayedInputFocus($editCell, beforeFocusCallback, callBeforeFocusCallbackAlways)
            }
        },
        deleteRow: function(rowIndex) {
            this._checkAndDeleteRow(rowIndex)
        },
        _checkAndDeleteRow: function(rowIndex) {
            var editingOptions = this.option("editing");
            var editingTexts = null === editingOptions || void 0 === editingOptions ? void 0 : editingOptions.texts;
            var confirmDelete = null === editingOptions || void 0 === editingOptions ? void 0 : editingOptions.confirmDelete;
            var confirmDeleteMessage = null === editingTexts || void 0 === editingTexts ? void 0 : editingTexts.confirmDeleteMessage;
            var item = this._dataController.items()[rowIndex];
            var allowDeleting = !this.isEditing() || item.isNewRow;
            if (item && allowDeleting) {
                if (!confirmDelete || !confirmDeleteMessage) {
                    this._deleteRowCore(rowIndex)
                } else {
                    var confirmDeleteTitle = editingTexts && editingTexts.confirmDeleteTitle;
                    var showDialogTitle = Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isDefined"])(confirmDeleteTitle) && confirmDeleteTitle.length > 0;
                    Object(_dialog__WEBPACK_IMPORTED_MODULE_15__["confirm"])(confirmDeleteMessage, confirmDeleteTitle, showDialogTitle).done(confirmResult => {
                        if (confirmResult) {
                            this._deleteRowCore(rowIndex)
                        }
                    })
                }
            }
        },
        _deleteRowCore: function(rowIndex) {
            var dataController = this._dataController;
            var item = dataController.items()[rowIndex];
            var key = item && item.key;
            var oldEditRowIndex = this._getVisibleEditRowIndex();
            this.refresh();
            var changes = this.getChanges();
            var editIndex = _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_12__["default"].getIndexByKey(key, changes);
            if (editIndex >= 0) {
                if (changes[editIndex].type === _ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_21__["DATA_EDIT_DATA_INSERT_TYPE"]) {
                    this._removeChange(editIndex)
                } else {
                    this._addChange({
                        key: key,
                        type: _ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_21__["DATA_EDIT_DATA_REMOVE_TYPE"]
                    })
                }
            } else {
                this._addChange({
                    key: key,
                    oldData: item.data,
                    type: _ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_21__["DATA_EDIT_DATA_REMOVE_TYPE"]
                })
            }
            return this._afterDeleteRow(rowIndex, oldEditRowIndex)
        },
        _afterDeleteRow: function(rowIndex, oldEditRowIndex) {
            return this.saveEditData()
        },
        undeleteRow: function(rowIndex) {
            var dataController = this._dataController;
            var item = dataController.items()[rowIndex];
            var oldEditRowIndex = this._getVisibleEditRowIndex();
            var key = item && item.key;
            var changes = this.getChanges();
            if (item) {
                var editIndex = _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_12__["default"].getIndexByKey(key, changes);
                if (editIndex >= 0) {
                    var {
                        data: data
                    } = changes[editIndex];
                    if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isEmptyObject"])(data)) {
                        this._removeChange(editIndex)
                    } else {
                        this._addChange({
                            key: key,
                            type: DATA_EDIT_DATA_UPDATE_TYPE
                        })
                    }
                    dataController.updateItems({
                        changeType: "update",
                        rowIndices: [oldEditRowIndex, rowIndex]
                    })
                }
            }
        },
        _fireOnSaving: function() {
            var onSavingParams = {
                cancel: false,
                promise: null,
                changes: [...this.getChanges()]
            };
            this.executeAction("onSaving", onSavingParams);
            var d = new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_18__["Deferred"];
            Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_18__["when"])(Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_18__["fromPromise"])(onSavingParams.promise)).done(() => {
                d.resolve(onSavingParams)
            }).fail(arg => {
                createFailureHandler(d);
                this._fireDataErrorOccurred(arg);
                d.resolve({
                    cancel: true
                })
            });
            return d
        },
        _executeEditingAction: function(actionName, params, func) {
            if (this.component._disposed) {
                return null
            }
            var deferred = new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_18__["Deferred"];
            this.executeAction(actionName, params);
            Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_18__["when"])(Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_18__["fromPromise"])(params.cancel)).done((function(cancel) {
                if (cancel) {
                    setTimeout((function() {
                        deferred.resolve("cancel")
                    }))
                } else {
                    func(params).done(deferred.resolve).fail(createFailureHandler(deferred))
                }
            })).fail(createFailureHandler(deferred));
            return deferred
        },
        _processChanges: function(deferreds, results, dataChanges, changes) {
            var store = this._dataController.store();
            Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_7__["each"])(changes, (index, change) => {
                var oldData = this._getOldData(change.key);
                var {
                    data: data,
                    type: type
                } = change;
                var changeCopy = Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__["default"])({}, change);
                var deferred;
                var params;
                if (this._beforeSaveEditData(change, index)) {
                    return
                }
                switch (type) {
                    case _ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_21__["DATA_EDIT_DATA_REMOVE_TYPE"]:
                        params = {
                            data: oldData,
                            key: change.key,
                            cancel: false
                        };
                        deferred = this._executeEditingAction("onRowRemoving", params, (function() {
                            return store.remove(change.key).done((function(key) {
                                dataChanges.push({
                                    type: "remove",
                                    key: key
                                })
                            }))
                        }));
                        break;
                    case _ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_21__["DATA_EDIT_DATA_INSERT_TYPE"]:
                        params = {
                            data: data,
                            cancel: false
                        };
                        deferred = this._executeEditingAction("onRowInserting", params, (function() {
                            return store.insert(params.data).done((function(data, key) {
                                if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isDefined"])(key)) {
                                    changeCopy.key = key
                                }
                                if (data && Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isObject"])(data) && data !== params.data) {
                                    changeCopy.data = data
                                }
                                dataChanges.push({
                                    type: "insert",
                                    data: data,
                                    index: 0
                                })
                            }))
                        }));
                        break;
                    case DATA_EDIT_DATA_UPDATE_TYPE:
                        params = {
                            newData: data,
                            oldData: oldData,
                            key: change.key,
                            cancel: false
                        };
                        deferred = this._executeEditingAction("onRowUpdating", params, (function() {
                            return store.update(change.key, params.newData).done((function(data, key) {
                                if (data && Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isObject"])(data) && data !== params.newData) {
                                    changeCopy.data = data
                                }
                                dataChanges.push({
                                    type: "update",
                                    key: key,
                                    data: data
                                })
                            }))
                        }))
                }
                changes[index] = changeCopy;
                if (deferred) {
                    var doneDeferred = new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_18__["Deferred"];
                    deferred.always((function(data) {
                        results.push({
                            key: change.key,
                            result: data
                        })
                    })).always(doneDeferred.resolve);
                    deferreds.push(doneDeferred.promise())
                }
            })
        },
        _processRemoveIfError: function(changes, editIndex) {
            var change = changes[editIndex];
            if ((null === change || void 0 === change ? void 0 : change.type) === _ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_21__["DATA_EDIT_DATA_REMOVE_TYPE"]) {
                if (editIndex >= 0) {
                    changes.splice(editIndex, 1)
                }
            }
            return true
        },
        _processRemove: function(changes, editIndex, cancel) {
            var change = changes[editIndex];
            if (!cancel || !change || change.type === _ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_21__["DATA_EDIT_DATA_REMOVE_TYPE"]) {
                return this._processRemoveCore(changes, editIndex, !cancel || !change)
            }
        },
        _processRemoveCore: function(changes, editIndex) {
            if (editIndex >= 0) {
                changes.splice(editIndex, 1)
            }
            return true
        },
        _processSaveEditDataResult: function(results) {
            var hasSavedData = false;
            var changes = [...this.getChanges()];
            var changesLength = changes.length;
            for (var i = 0; i < results.length; i++) {
                var arg = results[i].result;
                var cancel = "cancel" === arg;
                var editIndex = _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_12__["default"].getIndexByKey(results[i].key, changes);
                var change = changes[editIndex];
                var isError = arg && arg instanceof Error;
                if (isError) {
                    if (change) {
                        this._addInternalData({
                            key: change.key,
                            error: arg
                        })
                    }
                    this._fireDataErrorOccurred(arg);
                    if (this._processRemoveIfError(changes, editIndex)) {
                        break
                    }
                } else if (this._processRemove(changes, editIndex, cancel)) {
                    hasSavedData = !cancel
                }
            }
            if (changes.length < changesLength) {
                this._silentOption(EDITING_CHANGES_OPTION_NAME, changes)
            }
            return hasSavedData
        },
        _fireSaveEditDataEvents: function(changes) {
            Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_7__["each"])(changes, (_, _ref) => {
                var {
                    data: data,
                    key: key,
                    type: type
                } = _ref;
                var internalData = this._addInternalData({
                    key: key
                });
                var params = {
                    key: key,
                    data: data
                };
                if (internalData.error) {
                    params.error = internalData.error
                }
                switch (type) {
                    case _ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_21__["DATA_EDIT_DATA_REMOVE_TYPE"]:
                        this.executeAction("onRowRemoved", Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_8__["extend"])({}, params, {
                            data: internalData.oldData
                        }));
                        break;
                    case _ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_21__["DATA_EDIT_DATA_INSERT_TYPE"]:
                        this.executeAction("onRowInserted", params);
                        break;
                    case DATA_EDIT_DATA_UPDATE_TYPE:
                        this.executeAction("onRowUpdated", params)
                }
            });
            this.executeAction("onSaved", {
                changes: changes
            })
        },
        saveEditData: function() {
            var deferred = new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_18__["Deferred"];
            this.waitForDeferredOperations().done(() => {
                if (this.isSaving()) {
                    this._resolveAfterSave(deferred);
                    return
                }
                Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_18__["when"])(this._beforeSaveEditData()).done(cancel => {
                    if (cancel) {
                        this._resolveAfterSave(deferred, {
                            cancel: cancel
                        });
                        return
                    }
                    this._saving = true;
                    var options = {};
                    this._saveEditDataInner(options).always(() => {
                        this._saving = false;
                        options.needFocusEditCell && this._focusEditingCell()
                    }).done(deferred.resolve).fail(deferred.reject)
                }).fail(deferred.reject)
            }).fail(deferred.reject);
            return deferred.promise()
        },
        _resolveAfterSave: function(deferred) {
            var {
                cancel: cancel,
                error: error
            } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
            Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_18__["when"])(this._afterSaveEditData(cancel)).done((function() {
                deferred.resolve(error)
            })).fail(deferred.reject)
        },
        _saveEditDataInner: function(options) {
            var results = [];
            var deferreds = [];
            var dataChanges = [];
            var dataController = this._dataController;
            var dataSource = dataController.dataSource();
            var result = new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_18__["Deferred"];
            Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_18__["when"])(this._fireOnSaving()).done(_ref2 => {
                var {
                    cancel: cancel,
                    changes: changes
                } = _ref2;
                if (cancel) {
                    return result.resolve().promise()
                }
                this._processChanges(deferreds, results, dataChanges, changes);
                if (deferreds.length) {
                    null === dataSource || void 0 === dataSource ? void 0 : dataSource.beginLoading();
                    Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_18__["when"])(...deferreds).done(() => {
                        if (this._processSaveEditDataResult(results)) {
                            this._endSaving(dataChanges, changes, result)
                        } else {
                            null === dataSource || void 0 === dataSource ? void 0 : dataSource.endLoading();
                            result.resolve()
                        }
                    }).fail(error => {
                        null === dataSource || void 0 === dataSource ? void 0 : dataSource.endLoading();
                        result.resolve(error)
                    });
                    return result.always(() => {
                        options.needFocusEditCell = true
                    }).promise()
                }
                this._cancelSaving(result)
            }).fail(result.reject);
            return result.promise()
        },
        _beforeEndSaving: function(changes) {
            this._resetEditIndices()
        },
        _endSaving: function(dataChanges, changes, deferred) {
            var dataSource = this._dataController.dataSource();
            this._beforeEndSaving(changes);
            null === dataSource || void 0 === dataSource ? void 0 : dataSource.endLoading();
            this._refreshDataAfterSave(dataChanges, changes, deferred)
        },
        _cancelSaving: function(result) {
            this.executeAction("onSaved", {
                changes: []
            });
            this._resolveAfterSave(result)
        },
        _refreshDataAfterSave: function(dataChanges, changes, deferred) {
            var dataController = this._dataController;
            var refreshMode = this.option("editing.refreshMode");
            var isFullRefresh = "reshape" !== refreshMode && "repaint" !== refreshMode;
            if (!isFullRefresh) {
                dataController.push(dataChanges)
            }
            Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_18__["when"])(dataController.refresh({
                selection: isFullRefresh,
                reload: isFullRefresh,
                load: "reshape" === refreshMode,
                changesOnly: this.option("repaintChangesOnly")
            })).always(() => {
                this._fireSaveEditDataEvents(changes)
            }).done(() => {
                this._resolveAfterSave(deferred)
            }).fail(error => {
                this._resolveAfterSave(deferred, {
                    error: error
                })
            })
        },
        isSaving: function() {
            return this._saving
        },
        _updateEditColumn: function() {
            var isEditColumnVisible = this._isEditColumnVisible();
            var useIcons = this.option("editing.useIcons");
            var cssClass = COMMAND_EDIT_CLASS + (useIcons ? " " + COMMAND_EDIT_WITH_ICONS_CLASS : "");
            this._columnsController.addCommandColumn({
                type: "buttons",
                command: "edit",
                visible: isEditColumnVisible,
                cssClass: cssClass,
                width: "auto",
                alignment: "center",
                cellTemplate: this._getEditCommandCellTemplate(),
                fixedPosition: "right"
            });
            this._columnsController.columnOption("command:edit", {
                visible: isEditColumnVisible,
                cssClass: cssClass
            })
        },
        _isEditColumnVisible: function() {
            var editingOptions = this.option("editing");
            return editingOptions.allowDeleting
        },
        _isEditButtonDisabled: function() {
            var hasChanges = this.hasChanges();
            var isEditRowDefined = Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isDefined"])(this.option("editing.editRowKey"));
            return !(isEditRowDefined || hasChanges)
        },
        _updateEditButtons: function() {
            var headerPanel = this.getView("headerPanel");
            var isButtonDisabled = this._isEditButtonDisabled();
            if (headerPanel) {
                headerPanel.setToolbarItemDisabled("saveButton", isButtonDisabled);
                headerPanel.setToolbarItemDisabled("revertButton", isButtonDisabled)
            }
        },
        _applyModified: function($element) {
            $element && $element.addClass(CELL_MODIFIED)
        },
        _beforeCloseEditCellInBatchMode: _core_utils_common__WEBPACK_IMPORTED_MODULE_19__["noop"],
        cancelEditData: function() {
            var changes = this.getChanges();
            var params = {
                cancel: false,
                changes: changes
            };
            this.executeAction("onEditCanceling", params);
            if (!params.cancel) {
                this._cancelEditDataCore();
                this.executeAction("onEditCanceled", {
                    changes: changes
                })
            }
        },
        _cancelEditDataCore: function() {
            var rowIndex = this._getVisibleEditRowIndex();
            this._beforeCancelEditData();
            this.init();
            this.resetChanges();
            this._resetEditColumnName();
            this._resetEditRowKey();
            this._afterCancelEditData(rowIndex)
        },
        _afterCancelEditData: function(rowIndex) {
            var dataController = this._dataController;
            dataController.updateItems({
                repaintChangesOnly: this.option("repaintChangesOnly")
            })
        },
        _hideEditPopup: _core_utils_common__WEBPACK_IMPORTED_MODULE_19__["noop"],
        hasEditData: function() {
            return this.hasChanges()
        },
        update: function(changeType) {
            var dataController = this._dataController;
            if (dataController && this._pageIndex !== dataController.pageIndex()) {
                if ("refresh" === changeType) {
                    this.refresh({
                        isPageChanged: true
                    })
                }
                this._pageIndex = dataController.pageIndex()
            }
            this._updateEditButtons()
        },
        _getRowIndicesForCascadeUpdating: function(row, skipCurrentRow) {
            return skipCurrentRow ? [] : [row.rowIndex]
        },
        addDeferred: function(deferred) {
            if (this._deferreds.indexOf(deferred) < 0) {
                this._deferreds.push(deferred);
                deferred.always(() => {
                    var index = this._deferreds.indexOf(deferred);
                    if (index >= 0) {
                        this._deferreds.splice(index, 1)
                    }
                })
            }
        },
        _prepareChange: function(options, value, text) {
            var _options$row;
            var newData = {};
            var oldData = null === (_options$row = options.row) || void 0 === _options$row ? void 0 : _options$row.data;
            var rowKey = options.key;
            var deferred = new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_18__["Deferred"];
            if (void 0 !== rowKey) {
                options.value = value;
                var setCellValueResult = Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_18__["fromPromise"])(options.column.setCellValue(newData, value, Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_8__["extend"])(true, {}, oldData), text));
                setCellValueResult.done((function() {
                    deferred.resolve({
                        data: newData,
                        key: rowKey,
                        oldData: oldData,
                        type: DATA_EDIT_DATA_UPDATE_TYPE
                    })
                })).fail(createFailureHandler(deferred)).fail(arg => this._fireDataErrorOccurred(arg));
                if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isDefined"])(text) && options.column.displayValueMap) {
                    options.column.displayValueMap[value] = text
                }
                this._updateRowValues(options);
                this.addDeferred(deferred)
            }
            return deferred
        },
        _updateRowValues: function(options) {
            if (options.values) {
                var dataController = this._dataController;
                var rowIndex = dataController.getRowIndexByKey(options.key);
                var row = dataController.getVisibleRows()[rowIndex];
                if (row) {
                    options.values = row.values
                }
                options.values[options.columnIndex] = options.value
            }
        },
        updateFieldValue: function(options, value, text, forceUpdateRow) {
            var rowKey = options.key;
            var deferred = new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_18__["Deferred"];
            if (void 0 === rowKey) {
                this._dataController.fireError("E1043")
            }
            if (options.column.setCellValue) {
                this._prepareChange(options, value, text).done(params => {
                    Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_18__["when"])(this._applyChange(options, params, forceUpdateRow)).always(() => {
                        deferred.resolve()
                    })
                })
            } else {
                deferred.resolve()
            }
            return deferred.promise()
        },
        _focusPreviousEditingCellIfNeed: function(options) {
            if (this.hasEditData() && !this.isEditCell(options.rowIndex, options.columnIndex)) {
                this._focusEditingCell();
                this._updateEditRow(options.row, true);
                return true
            }
        },
        _needUpdateRow: function(column) {
            var visibleColumns = this._columnsController.getVisibleColumns();
            if (!column) {
                column = this._getEditColumn()
            }
            var isCustomSetCellValue = column && column.setCellValue !== column.defaultSetCellValue;
            var isCustomCalculateCellValue = visibleColumns.some(visibleColumn => visibleColumn.calculateCellValue !== visibleColumn.defaultCalculateCellValue);
            return isCustomSetCellValue || isCustomCalculateCellValue
        },
        _applyChange: function(options, params, forceUpdateRow) {
            var changeOptions = Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__["default"])({}, options, {
                forceUpdateRow: forceUpdateRow
            });
            this._addChange(params, changeOptions);
            this._updateEditButtons();
            return this._applyChangeCore(options, changeOptions.forceUpdateRow)
        },
        _applyChangeCore: function(options, forceUpdateRow) {
            var isCustomSetCellValue = options.column.setCellValue !== options.column.defaultSetCellValue;
            var row = options.row;
            if (row) {
                if (forceUpdateRow || isCustomSetCellValue) {
                    this._updateEditRow(row, forceUpdateRow, isCustomSetCellValue)
                } else if (row.update) {
                    row.update()
                }
            }
        },
        _updateEditRowCore: function(row, skipCurrentRow, isCustomSetCellValue) {
            this._dataController.updateItems({
                changeType: "update",
                rowIndices: this._getRowIndicesForCascadeUpdating(row, skipCurrentRow)
            })
        },
        _updateEditRow: function(row, forceUpdateRow, isCustomSetCellValue) {
            if (forceUpdateRow) {
                this._updateRowImmediately(row, forceUpdateRow, isCustomSetCellValue)
            } else {
                this._updateRowWithDelay(row, isCustomSetCellValue)
            }
        },
        _updateRowImmediately: function(row, forceUpdateRow, isCustomSetCellValue) {
            this._updateEditRowCore(row, !forceUpdateRow, isCustomSetCellValue);
            this._validateEditFormAfterUpdate(row, isCustomSetCellValue);
            if (!forceUpdateRow) {
                this._focusEditingCell()
            }
        },
        _updateRowWithDelay: function(row, isCustomSetCellValue) {
            var deferred = new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_18__["Deferred"];
            this.addDeferred(deferred);
            setTimeout(() => {
                var $focusedElement = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(_core_dom_adapter__WEBPACK_IMPORTED_MODULE_2__["default"].getActiveElement());
                var columnIndex = this._rowsView.getCellIndex($focusedElement, row.rowIndex);
                var focusedElement = $focusedElement.get(0);
                var selectionRange = _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_12__["default"].getSelectionRange(focusedElement);
                this._updateEditRowCore(row, false, isCustomSetCellValue);
                this._validateEditFormAfterUpdate(row, isCustomSetCellValue);
                if (columnIndex >= 0) {
                    var $focusedItem = this._rowsView._getCellElement(row.rowIndex, columnIndex);
                    this._delayedInputFocus($focusedItem, () => {
                        setTimeout(() => {
                            focusedElement = _core_dom_adapter__WEBPACK_IMPORTED_MODULE_2__["default"].getActiveElement();
                            if (selectionRange.selectionStart >= 0) {
                                _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_12__["default"].setSelectionRange(focusedElement, selectionRange)
                            }
                        })
                    })
                }
                deferred.resolve()
            })
        },
        _validateEditFormAfterUpdate: _core_utils_common__WEBPACK_IMPORTED_MODULE_19__["noop"],
        _addChange: function(changeParams, options) {
            var _this$getChanges;
            var row = null === options || void 0 === options ? void 0 : options.row;
            var changes = [...this.getChanges()];
            var index = _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_12__["default"].getIndexByKey(changeParams.key, changes);
            if (index < 0) {
                index = changes.length;
                this._addInternalData({
                    key: changeParams.key,
                    oldData: changeParams.oldData
                });
                delete changeParams.oldData;
                changes.push(changeParams)
            }
            var change = Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__["default"])({}, changes[index]);
            if (change) {
                if (changeParams.data) {
                    change.data = Object(_data_array_utils__WEBPACK_IMPORTED_MODULE_13__["createObjectWithChanges"])(change.data, changeParams.data)
                }
                if ((!change.type || !changeParams.data) && changeParams.type) {
                    change.type = changeParams.type
                }
                if (row) {
                    row.oldData = this._getOldData(row.key);
                    row.data = Object(_data_array_utils__WEBPACK_IMPORTED_MODULE_13__["createObjectWithChanges"])(row.data, changeParams.data)
                }
            }
            changes[index] = change;
            this._silentOption(EDITING_CHANGES_OPTION_NAME, changes);
            if (options && change !== (null === (_this$getChanges = this.getChanges()) || void 0 === _this$getChanges ? void 0 : _this$getChanges[index])) {
                options.forceUpdateRow = true
            }
            return change
        },
        _getFormEditItemTemplate: function(cellOptions, column) {
            return column.editCellTemplate || this._getDefaultEditorTemplate()
        },
        getColumnTemplate: function(options) {
            var column = options.column;
            var rowIndex = options.row && options.row.rowIndex;
            var template;
            var isRowMode = this.isRowBasedEditMode();
            var isRowEditing = this.isEditRow(rowIndex);
            var isCellEditing = this.isEditCell(rowIndex, options.columnIndex);
            var editingStartOptions;
            if ((column.showEditorAlways || column.setCellValue && (isRowEditing && column.allowEditing || isCellEditing)) && ("data" === options.rowType || "detailAdaptive" === options.rowType) && !column.command) {
                var allowUpdating = this.allowUpdating(options);
                if (((allowUpdating || isRowEditing) && column.allowEditing || isCellEditing) && (isRowEditing || !isRowMode)) {
                    if (column.showEditorAlways && !isRowMode) {
                        editingStartOptions = {
                            cancel: false,
                            key: options.row.isNewRow ? void 0 : options.row.key,
                            data: options.row.data,
                            column: column
                        };
                        this._isEditingStart(editingStartOptions)
                    }
                    if (!editingStartOptions || !editingStartOptions.cancel) {
                        options.setValue = (value, text) => {
                            this.updateFieldValue(options, value, text)
                        }
                    }
                }
                template = column.editCellTemplate || this._getDefaultEditorTemplate()
            } else if ("detail" === column.command && "detail" === options.rowType && isRowEditing) {
                template = null === this || void 0 === this ? void 0 : this.getEditFormTemplate(options)
            }
            return template
        },
        _createButton: function($container, button, options, change) {
            var icon = EDIT_ICON_CLASS[button.name];
            var useIcons = this.option("editing.useIcons");
            var useLegacyColumnButtonTemplate = this.option("useLegacyColumnButtonTemplate");
            var $button = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])("<a>").attr("href", "#").addClass(LINK_CLASS).addClass(button.cssClass);
            if (button.template && useLegacyColumnButtonTemplate) {
                this._rowsView.renderTemplate($container, button.template, options, true)
            } else {
                if (button.template) {
                    $button = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])("<span>").addClass(button.cssClass)
                } else if (useIcons && icon || button.icon) {
                    icon = button.icon || icon;
                    var iconType = _core_utils_icon__WEBPACK_IMPORTED_MODULE_20__["getImageSourceType"](icon);
                    if ("image" === iconType || "svg" === iconType) {
                        $button = _core_utils_icon__WEBPACK_IMPORTED_MODULE_20__["getImageContainer"](icon).addClass(button.cssClass)
                    } else {
                        $button.addClass("dx-icon" + ("dxIcon" === iconType ? "-" : " ") + icon).attr("title", button.text)
                    }
                    $button.addClass("dx-link-icon");
                    $container.addClass(COMMAND_EDIT_WITH_ICONS_CLASS);
                    var localizationName = this.getButtonLocalizationNames()[button.name];
                    localizationName && $button.attr("aria-label", _localization_message__WEBPACK_IMPORTED_MODULE_16__["default"].format(localizationName))
                } else {
                    $button.text(button.text)
                }
                if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isDefined"])(button.hint)) {
                    $button.attr("title", button.hint)
                }
                if (this._isButtonDisabled(button, options)) {
                    $button.addClass("dx-state-disabled")
                } else if (!button.template || button.onClick) {
                    _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__["default"].on($button, Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_14__["addNamespace"])("click", EDITING_NAMESPACE), this.createAction((function(e) {
                        var _button$onClick;
                        null === (_button$onClick = button.onClick) || void 0 === _button$onClick ? void 0 : _button$onClick.call(button, Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_8__["extend"])({}, e, {
                            row: options.row,
                            column: options.column
                        }));
                        e.event.preventDefault();
                        e.event.stopPropagation()
                    })))
                }
                $container.append($button, "&nbsp;");
                if (button.template) {
                    this._rowsView.renderTemplate($button, button.template, options, true, change)
                }
            }
        },
        getButtonLocalizationNames: () => ({
            edit: "dxDataGrid-editingEditRow",
            save: "dxDataGrid-editingSaveRowChanges",
            delete: "dxDataGrid-editingDeleteRow",
            undelete: "dxDataGrid-editingUndeleteRow",
            cancel: "dxDataGrid-editingCancelRowChanges"
        }),
        prepareButtonItem: function(headerPanel, name, methodName, sortIndex) {
            var editingTexts = this.option("editing.texts") || {};
            var titleButtonTextByClassNames = {
                revert: editingTexts.cancelAllChanges,
                save: editingTexts.saveAllChanges,
                addRow: editingTexts.addRow
            };
            var className = {
                revert: "cancel",
                save: "save",
                addRow: "addrow"
            } [name];
            var hintText = titleButtonTextByClassNames[name];
            var isButtonDisabled = ("save" === className || "cancel" === className) && this._isEditButtonDisabled();
            return {
                widget: "dxButton",
                options: {
                    onInitialized: e => {
                        Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(e.element).addClass(headerPanel._getToolbarButtonClass(EDIT_BUTTON_CLASS + " " + this.addWidgetPrefix(className) + "-button"))
                    },
                    icon: "edit-button-" + className,
                    disabled: isButtonDisabled,
                    onClick: () => {
                        setTimeout(() => {
                            this[methodName]()
                        })
                    },
                    text: hintText,
                    hint: hintText
                },
                showText: "inMenu",
                name: name + "Button",
                location: "after",
                locateInMenu: "auto",
                sortIndex: sortIndex
            }
        },
        prepareEditButtons: function(headerPanel) {
            var editingOptions = this.option("editing") || {};
            var buttonItems = [];
            if (editingOptions.allowAdding) {
                buttonItems.push(this.prepareButtonItem(headerPanel, "addRow", "addRow", 20))
            }
            return buttonItems
        },
        highlightDataCell: function($cell, parameters) {
            var cellModified = this.isCellModified(parameters);
            var shouldHighlight = cellModified && parameters.column.setCellValue && (this.getEditMode() !== _ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_21__["EDIT_MODE_ROW"] || !parameters.row.isEditing);
            shouldHighlight && $cell.addClass(CELL_MODIFIED)
        },
        _afterInsertRow: _core_utils_common__WEBPACK_IMPORTED_MODULE_19__["noop"],
        _beforeSaveEditData: function(change) {
            if (change && !Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isDefined"])(change.key) && Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isDefined"])(change.type)) {
                return true
            }
        },
        _afterSaveEditData: _core_utils_common__WEBPACK_IMPORTED_MODULE_19__["noop"],
        _beforeCancelEditData: _core_utils_common__WEBPACK_IMPORTED_MODULE_19__["noop"],
        _allowEditAction: function(actionName, options) {
            var allowEditAction = this.option("editing." + actionName);
            if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isFunction"])(allowEditAction)) {
                allowEditAction = allowEditAction({
                    component: this.component,
                    row: options.row
                })
            }
            return allowEditAction
        },
        allowUpdating: function(options, eventName) {
            var startEditAction = this.option("editing.startEditAction") || DEFAULT_START_EDIT_ACTION;
            var needCallback = arguments.length > 1 ? startEditAction === eventName || "down" === eventName : true;
            return needCallback && this._allowEditAction("allowUpdating", options)
        },
        allowDeleting: function(options) {
            return this._allowEditAction("allowDeleting", options)
        },
        isCellModified: function(parameters) {
            var columnIndex = parameters.columnIndex;
            var modifiedValues = parameters.row && (parameters.row.isNewRow ? parameters.row.values : parameters.row.modifiedValues);
            return !!modifiedValues && void 0 !== modifiedValues[columnIndex]
        },
        isNewRowInEditMode: function() {
            var visibleEditRowIndex = this._getVisibleEditRowIndex();
            var rows = this._dataController.items();
            return visibleEditRowIndex >= 0 ? rows[visibleEditRowIndex].isNewRow : false
        }
    }
}());
var editingModule = {
    defaultOptions: function() {
        return {
            editing: {
                mode: "row",
                refreshMode: "full",
                newRowPosition: _ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_21__["VIEWPORT_TOP_NEW_ROW_POSITION"],
                allowAdding: false,
                allowUpdating: false,
                allowDeleting: false,
                useIcons: false,
                selectTextOnEditStart: false,
                confirmDelete: true,
                texts: {
                    editRow: _localization_message__WEBPACK_IMPORTED_MODULE_16__["default"].format("dxDataGrid-editingEditRow"),
                    saveAllChanges: _localization_message__WEBPACK_IMPORTED_MODULE_16__["default"].format("dxDataGrid-editingSaveAllChanges"),
                    saveRowChanges: _localization_message__WEBPACK_IMPORTED_MODULE_16__["default"].format("dxDataGrid-editingSaveRowChanges"),
                    cancelAllChanges: _localization_message__WEBPACK_IMPORTED_MODULE_16__["default"].format("dxDataGrid-editingCancelAllChanges"),
                    cancelRowChanges: _localization_message__WEBPACK_IMPORTED_MODULE_16__["default"].format("dxDataGrid-editingCancelRowChanges"),
                    addRow: _localization_message__WEBPACK_IMPORTED_MODULE_16__["default"].format("dxDataGrid-editingAddRow"),
                    deleteRow: _localization_message__WEBPACK_IMPORTED_MODULE_16__["default"].format("dxDataGrid-editingDeleteRow"),
                    undeleteRow: _localization_message__WEBPACK_IMPORTED_MODULE_16__["default"].format("dxDataGrid-editingUndeleteRow"),
                    confirmDeleteMessage: _localization_message__WEBPACK_IMPORTED_MODULE_16__["default"].format("dxDataGrid-editingConfirmDeleteMessage"),
                    confirmDeleteTitle: ""
                },
                form: {
                    colCount: 2
                },
                popup: {},
                startEditAction: "click",
                editRowKey: null,
                editColumnName: null,
                changes: []
            },
            useLegacyColumnButtonTemplate: false
        }
    },
    controllers: {
        editing: EditingController
    },
    extenders: {
        controllers: {
            data: {
                init: function() {
                    this._editingController = this.getController("editing");
                    this.callBase()
                },
                reload: function(full, repaintChangesOnly) {
                    !repaintChangesOnly && this._editingController.refresh();
                    return this.callBase.apply(this, arguments)
                },
                repaintRows: function() {
                    if (this.getController("editing").isSaving()) {
                        return
                    }
                    return this.callBase.apply(this, arguments)
                },
                _updateEditRow: function(items) {
                    var editRowKey = this.option(_ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_21__["EDITING_EDITROWKEY_OPTION_NAME"]);
                    var editRowIndex = _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_12__["default"].getIndexByKey(editRowKey, items);
                    var editItem = items[editRowIndex];
                    if (editItem) {
                        var _this$_updateEditItem;
                        editItem.isEditing = true;
                        null === (_this$_updateEditItem = this._updateEditItem) || void 0 === _this$_updateEditItem ? void 0 : _this$_updateEditItem.call(this, editItem)
                    }
                },
                _updateItemsCore: function(change) {
                    this.callBase(change);
                    this._updateEditRow(this.items(true))
                },
                _applyChangeUpdate: function(change) {
                    this._updateEditRow(change.items);
                    this.callBase(change)
                },
                _applyChangesOnly: function(change) {
                    this._updateEditRow(change.items);
                    this.callBase(change)
                },
                _processItems: function(items, change) {
                    items = this._editingController.processItems(items, change);
                    return this.callBase(items, change)
                },
                _processDataItem: function(dataItem, options) {
                    this._editingController.processDataItem(dataItem, options, this.generateDataValues);
                    return this.callBase(dataItem, options)
                },
                _processItem: function(item, options) {
                    item = this.callBase(item, options);
                    if (item.isNewRow) {
                        options.dataIndex--;
                        delete item.dataIndex
                    }
                    return item
                },
                _getChangedColumnIndices: function(oldItem, newItem, rowIndex, isLiveUpdate) {
                    if (oldItem.isNewRow !== newItem.isNewRow || oldItem.removed !== newItem.removed) {
                        return
                    }
                    return this.callBase.apply(this, arguments)
                },
                _isCellChanged: function(oldRow, newRow, visibleRowIndex, columnIndex, isLiveUpdate) {
                    var editingController = this.getController("editing");
                    var cell = oldRow.cells && oldRow.cells[columnIndex];
                    var isEditing = editingController && editingController.isEditCell(visibleRowIndex, columnIndex);
                    if (isLiveUpdate && isEditing) {
                        return false
                    }
                    if (cell && cell.column && !cell.column.showEditorAlways && cell.isEditing !== isEditing) {
                        return true
                    }
                    return this.callBase.apply(this, arguments)
                },
                _handleDataSourceChange(args) {
                    var result = this.callBase(args);
                    var changes = this.option("editing.changes");
                    var dataSource = args.value;
                    if (Array.isArray(dataSource) && changes.length) {
                        var dataSourceKeys = dataSource.map(item => this.keyOf(item));
                        var newChanges = changes.filter(change => "insert" === change.type || dataSourceKeys.some(key => Object(_core_utils_common__WEBPACK_IMPORTED_MODULE_19__["equalByValue"])(change.key, key)));
                        if (newChanges.length !== changes.length) {
                            this.option("editing.changes", newChanges)
                        }
                        var editRowKey = this.option("editing.editRowKey");
                        var isEditNewItem = newChanges.find(change => "insert" === change.type && Object(_core_utils_common__WEBPACK_IMPORTED_MODULE_19__["equalByValue"])(editRowKey, change.key));
                        if (!isEditNewItem && dataSourceKeys.every(key => !Object(_core_utils_common__WEBPACK_IMPORTED_MODULE_19__["equalByValue"])(editRowKey, key))) {
                            this.option("editing.editRowKey", null)
                        }
                    }
                    return result
                }
            }
        },
        views: {
            rowsView: {
                init: function() {
                    this.callBase();
                    this._editingController = this.getController("editing")
                },
                getCellIndex: function($cell, rowIndex) {
                    if (!$cell.is("td") && rowIndex >= 0) {
                        var $cellElements = this.getCellElements(rowIndex);
                        var cellIndex = -1;
                        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_7__["each"])($cellElements, (function(index, cellElement) {
                            if (Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(cellElement).find($cell).length) {
                                cellIndex = index
                            }
                        }));
                        return cellIndex
                    }
                    return this.callBase.apply(this, arguments)
                },
                publicMethods: function() {
                    return this.callBase().concat(["cellValue"])
                },
                _getCellTemplate: function(options) {
                    var template = this._editingController.getColumnTemplate(options);
                    return template || this.callBase(options)
                },
                _isNativeClick: function() {
                    return (_core_devices__WEBPACK_IMPORTED_MODULE_17__["default"].real().ios || _core_devices__WEBPACK_IMPORTED_MODULE_17__["default"].real().android) && this.option("editing.allowUpdating")
                },
                _createRow: function(row) {
                    var $row = this.callBase.apply(this, arguments);
                    if (row) {
                        var isRowRemoved = !!row.removed;
                        var isRowInserted = !!row.isNewRow;
                        var isRowModified = !!row.modified;
                        isRowInserted && $row.addClass(ROW_INSERTED);
                        isRowModified && $row.addClass(ROW_MODIFIED);
                        if (isRowInserted || isRowRemoved) {
                            $row.removeClass(ROW_SELECTED)
                        }
                    }
                    return $row
                },
                _getColumnIndexByElement: function($element) {
                    var $tableElement = $element.closest("table");
                    var $tableElements = this.getTableElements();
                    while ($tableElement.length && !$tableElements.filter($tableElement).length) {
                        $element = $tableElement.closest("td");
                        $tableElement = $element.closest("table")
                    }
                    return this._getColumnIndexByElementCore($element)
                },
                _getColumnIndexByElementCore: function($element) {
                    var $targetElement = $element.closest("." + _ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_21__["ROW_CLASS"] + "> td:not(.dx-master-detail-cell)");
                    return this.getCellIndex($targetElement)
                },
                _editCellByClick: function(e, eventName) {
                    var editingController = this._editingController;
                    var $targetElement = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(e.event.target);
                    var columnIndex = this._getColumnIndexByElement($targetElement);
                    var row = this._dataController.items()[e.rowIndex];
                    var allowUpdating = editingController.allowUpdating({
                        row: row
                    }, eventName) || row && row.isNewRow;
                    var column = this._columnsController.getVisibleColumns()[columnIndex];
                    var isEditedCell = editingController.isEditCell(e.rowIndex, columnIndex);
                    var allowEditing = allowUpdating && column && (column.allowEditing || isEditedCell);
                    var startEditAction = this.option("editing.startEditAction") || "click";
                    if ("down" === eventName) {
                        if ((_core_devices__WEBPACK_IMPORTED_MODULE_17__["default"].real().ios || _core_devices__WEBPACK_IMPORTED_MODULE_17__["default"].real().android) && !isEditedCell) {
                            Object(_core_utils_dom__WEBPACK_IMPORTED_MODULE_5__["resetActiveElement"])()
                        }
                        return column && column.showEditorAlways && allowEditing && editingController.editCell(e.rowIndex, columnIndex)
                    }
                    if ("click" === eventName && "dblClick" === startEditAction && !isEditedCell) {
                        var withoutSaveEditData = null === row || void 0 === row ? void 0 : row.isNewRow;
                        editingController.closeEditCell(false, withoutSaveEditData)
                    }
                    if (allowEditing && eventName === startEditAction) {
                        return editingController.editCell(e.rowIndex, columnIndex) || editingController.isEditRow(e.rowIndex)
                    }
                },
                _rowPointerDown: function(e) {
                    this._pointerDownTimeout = setTimeout(() => {
                        this._editCellByClick(e, "down")
                    })
                },
                _rowClick: function(e) {
                    var isEditForm = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(e.rowElement).hasClass(this.addWidgetPrefix(_ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_21__["EDIT_FORM_CLASS"]));
                    e.event[_ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_21__["TARGET_COMPONENT_NAME"]] = this.component;
                    if (!this._editCellByClick(e, "click") && !isEditForm) {
                        this.callBase.apply(this, arguments)
                    }
                },
                _rowDblClick: function(e) {
                    if (!this._editCellByClick(e, "dblClick")) {
                        this.callBase.apply(this, arguments)
                    }
                },
                _cellPrepared: function($cell, parameters) {
                    var editingController = this._editingController;
                    var isCommandCell = !!parameters.column.command;
                    var isEditableCell = parameters.setValue;
                    var isEditRow = editingController.isEditRow(parameters.rowIndex);
                    var isEditing = isEditingCell(isEditRow, parameters);
                    if (isEditingOrShowEditorAlwaysDataCell(isEditRow, parameters)) {
                        var alignment = parameters.column.alignment;
                        $cell.toggleClass(this.addWidgetPrefix(READONLY_CLASS), !isEditableCell).toggleClass(CELL_FOCUS_DISABLED_CLASS, !isEditableCell);
                        if (alignment) {
                            $cell.find(_ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_21__["EDITORS_INPUT_SELECTOR"]).first().css("textAlign", alignment)
                        }
                    }
                    if (isEditing) {
                        this._editCellPrepared($cell)
                    }
                    if (parameters.column && !isCommandCell) {
                        editingController.highlightDataCell($cell, parameters)
                    }
                    this.callBase.apply(this, arguments)
                },
                _editCellPrepared: _core_utils_common__WEBPACK_IMPORTED_MODULE_19__["noop"],
                _formItemPrepared: _core_utils_common__WEBPACK_IMPORTED_MODULE_19__["noop"],
                _getCellOptions: function(options) {
                    var cellOptions = this.callBase(options);
                    cellOptions.isEditing = this._editingController.isEditCell(cellOptions.rowIndex, cellOptions.columnIndex);
                    return cellOptions
                },
                _createCell: function(options) {
                    var $cell = this.callBase(options);
                    var isEditRow = this._editingController.isEditRow(options.rowIndex);
                    isEditingOrShowEditorAlwaysDataCell(isEditRow, options) && $cell.addClass(_ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_21__["EDITOR_CELL_CLASS"]);
                    return $cell
                },
                cellValue: function(rowIndex, columnIdentifier, value, text) {
                    var cellOptions = this.getCellOptions(rowIndex, columnIdentifier);
                    if (cellOptions) {
                        if (void 0 === value) {
                            return cellOptions.value
                        } else {
                            this._editingController.updateFieldValue(cellOptions, value, text, true)
                        }
                    }
                },
                dispose: function() {
                    this.callBase.apply(this, arguments);
                    clearTimeout(this._pointerDownTimeout)
                },
                _renderCore: function() {
                    this.callBase.apply(this, arguments);
                    this._editingController._focusEditorIfNeed()
                }
            },
            headerPanel: {
                _getToolbarItems: function() {
                    var items = this.callBase();
                    var editButtonItems = this.getController("editing").prepareEditButtons(this);
                    return editButtonItems.concat(items)
                },
                optionChanged: function(args) {
                    var fullName = args.fullName;
                    switch (args.name) {
                        case "editing":
                            var excludedOptions = [_ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_21__["EDITING_POPUP_OPTION_NAME"], EDITING_CHANGES_OPTION_NAME, _ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_21__["EDITING_EDITCOLUMNNAME_OPTION_NAME"], _ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_21__["EDITING_EDITROWKEY_OPTION_NAME"]];
                            var shouldInvalidate = fullName && !excludedOptions.some(optionName => optionName === fullName);
                            shouldInvalidate && this._invalidate();
                            this.callBase(args);
                            break;
                        case "useLegacyColumnButtonTemplate":
                            args.handled = true;
                            break;
                        default:
                            this.callBase(args)
                    }
                },
                isVisible: function() {
                    var editingOptions = this.getController("editing").option("editing");
                    return this.callBase() || (null === editingOptions || void 0 === editingOptions ? void 0 : editingOptions.allowAdding)
                }
            }
        }
    }
};


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.editing_cell_based.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.editing_cell_based.js ***!
  \*************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/renderer */ "./node_modules/devextreme/esm/core/renderer.js");
/* harmony import */ var _core_dom_adapter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/dom_adapter */ "./node_modules/devextreme/esm/core/dom_adapter.js");
/* harmony import */ var _core_utils_window__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/utils/window */ "./node_modules/devextreme/esm/core/utils/window.js");
/* harmony import */ var _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../events/core/events_engine */ "./node_modules/devextreme/esm/events/core/events_engine.js");
/* harmony import */ var _core_utils_type__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/utils/type */ "./node_modules/devextreme/esm/core/utils/type.js");
/* harmony import */ var _events_click__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../events/click */ "./node_modules/devextreme/esm/events/click.js");
/* harmony import */ var _events_pointer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../events/pointer */ "./node_modules/devextreme/esm/events/pointer.js");
/* harmony import */ var _events_utils_index__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../events/utils/index */ "./node_modules/devextreme/esm/events/utils/index.js");
/* harmony import */ var _events_hold__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../events/hold */ "./node_modules/devextreme/esm/events/hold.js");
/* harmony import */ var _core_utils_deferred__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../core/utils/deferred */ "./node_modules/devextreme/esm/core/utils/deferred.js");
/* harmony import */ var _core_utils_common__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../core/utils/common */ "./node_modules/devextreme/esm/core/utils/common.js");
/* harmony import */ var _data_array_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../data/array_utils */ "./node_modules/devextreme/esm/data/array_utils.js");
/* harmony import */ var _ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./ui.grid_core.editing_constants */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.editing_constants.js");
/**
 * DevExtreme (esm/ui/grid_core/ui.grid_core.editing_cell_based.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */













var FOCUS_OVERLAY_CLASS = "focus-overlay";
var ADD_ROW_BUTTON_CLASS = "addrow-button";
var DROPDOWN_EDITOR_OVERLAY_CLASS = "dx-dropdowneditor-overlay";
var EDITOR_CELL_CLASS = "dx-editor-cell";
var ROW_CLASS = "dx-row";
var CELL_MODIFIED_CLASS = "dx-cell-modified";
var DATA_ROW_CLASS = "dx-data-row";
var ROW_REMOVED = "dx-row-removed";
var EDITING_EDITROWKEY_OPTION_NAME = "editing.editRowKey";
var EDITING_EDITCOLUMNNAME_OPTION_NAME = "editing.editColumnName";
var DATA_EDIT_DATA_REMOVE_TYPE = "remove";
/* harmony default export */ __webpack_exports__["default"] = ({
    extenders: {
        controllers: {
            editing: {
                init: function() {
                    var needCreateHandlers = !this._saveEditorHandler;
                    this.callBase.apply(this, arguments);
                    if (needCreateHandlers) {
                        var $pointerDownTarget;
                        var isResizing;
                        this._pointerUpEditorHandler = () => {
                            var _this$getController;
                            isResizing = null === (_this$getController = this.getController("columnsResizer")) || void 0 === _this$getController ? void 0 : _this$getController.isResizing()
                        };
                        this._pointerDownEditorHandler = e => $pointerDownTarget = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(e.target);
                        this._saveEditorHandler = this.createAction((function(e) {
                            var event = e.event;
                            var $target = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(event.target);
                            var targetComponent = event[_ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_12__["TARGET_COMPONENT_NAME"]];
                            var component = this.component;
                            if ($pointerDownTarget && $pointerDownTarget.is("input") && !$pointerDownTarget.is($target)) {
                                return
                            }

                            function checkEditorPopup($element) {
                                if (!$element) {
                                    return false
                                }
                                var $dropDownEditorOverlay = $element.closest(".".concat(DROPDOWN_EDITOR_OVERLAY_CLASS));
                                var $componentElement = component.$element();
                                return $dropDownEditorOverlay.length > 0 && 0 === $componentElement.closest($dropDownEditorOverlay).length
                            }
                            if (this.isCellOrBatchEditMode() && !this._editCellInProgress) {
                                var isEditorPopup = checkEditorPopup($target) || checkEditorPopup(null === targetComponent || void 0 === targetComponent ? void 0 : targetComponent.$element());
                                var isDomElement = !!$target.closest(Object(_core_utils_window__WEBPACK_IMPORTED_MODULE_2__["getWindow"])().document).length;
                                var isAnotherComponent = targetComponent && !targetComponent._disposed && targetComponent !== this.component;
                                var isAddRowButton = !!$target.closest(".".concat(this.addWidgetPrefix(ADD_ROW_BUTTON_CLASS))).length;
                                var isFocusOverlay = $target.hasClass(this.addWidgetPrefix(FOCUS_OVERLAY_CLASS));
                                var isCellEditMode = this.isCellEditMode();
                                if (!isResizing && !isEditorPopup && !isFocusOverlay && !(isAddRowButton && isCellEditMode && this.isEditing()) && (isDomElement || isAnotherComponent)) {
                                    this._closeEditItem.bind(this)($target)
                                }
                            }
                        }));
                        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__["default"].on(_core_dom_adapter__WEBPACK_IMPORTED_MODULE_1__["default"].getDocument(), _events_pointer__WEBPACK_IMPORTED_MODULE_6__["default"].up, this._pointerUpEditorHandler);
                        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__["default"].on(_core_dom_adapter__WEBPACK_IMPORTED_MODULE_1__["default"].getDocument(), _events_pointer__WEBPACK_IMPORTED_MODULE_6__["default"].down, this._pointerDownEditorHandler);
                        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__["default"].on(_core_dom_adapter__WEBPACK_IMPORTED_MODULE_1__["default"].getDocument(), _events_click__WEBPACK_IMPORTED_MODULE_5__["name"], this._saveEditorHandler)
                    }
                },
                isCellEditMode: function() {
                    return this.option("editing.mode") === _ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_12__["EDIT_MODE_CELL"]
                },
                isBatchEditMode: function() {
                    return this.option("editing.mode") === _ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_12__["EDIT_MODE_BATCH"]
                },
                isCellOrBatchEditMode: function() {
                    return this.isCellEditMode() || this.isBatchEditMode()
                },
                _needToCloseEditableCell: function($targetElement) {
                    var $element = this.component.$element();
                    var result = this.isEditing();
                    var isCurrentComponentElement = !$element || !!$targetElement.closest($element).length;
                    if (isCurrentComponentElement) {
                        var isDataRow = $targetElement.closest("." + DATA_ROW_CLASS).length;
                        if (isDataRow) {
                            var rowsView = this.getView("rowsView");
                            var $targetCell = $targetElement.closest("." + ROW_CLASS + "> td");
                            var rowIndex = rowsView.getRowIndex($targetCell.parent());
                            var columnIndex = rowsView.getCellElements(rowIndex).index($targetCell);
                            var visibleColumns = this._columnsController.getVisibleColumns();
                            var allowEditing = visibleColumns[columnIndex] && visibleColumns[columnIndex].allowEditing;
                            result = result && !allowEditing && !this.isEditCell(rowIndex, columnIndex)
                        }
                    }
                    return result || this.callBase.apply(this, arguments)
                },
                _closeEditItem: function($targetElement) {
                    if (this._needToCloseEditableCell($targetElement)) {
                        this.closeEditCell()
                    }
                },
                _focusEditorIfNeed: function() {
                    if (this._needFocusEditor && this.isCellOrBatchEditMode()) {
                        var _this$_rowsView;
                        var editColumnIndex = this._getVisibleEditColumnIndex();
                        var $cell = null === (_this$_rowsView = this._rowsView) || void 0 === _this$_rowsView ? void 0 : _this$_rowsView._getCellElement(this._getVisibleEditRowIndex(), editColumnIndex);
                        if ($cell && !$cell.find(":focus").length) {
                            this._focusEditingCell(() => {
                                this._editCellInProgress = false
                            }, $cell, true)
                        } else {
                            this._editCellInProgress = false
                        }
                        this._needFocusEditor = false
                    } else {
                        this.callBase.apply(this, arguments)
                    }
                },
                isEditing: function() {
                    if (this.isCellOrBatchEditMode()) {
                        var isEditRowKeyDefined = Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_4__["isDefined"])(this.option(EDITING_EDITROWKEY_OPTION_NAME));
                        var isEditColumnNameDefined = Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_4__["isDefined"])(this.option(EDITING_EDITCOLUMNNAME_OPTION_NAME));
                        return isEditRowKeyDefined && isEditColumnNameDefined
                    }
                    return this.callBase.apply(this, arguments)
                },
                _handleEditColumnNameChange: function(args) {
                    var oldRowIndex = this._getVisibleEditRowIndex(args.previousValue);
                    if (this.isCellOrBatchEditMode() && -1 !== oldRowIndex && Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_4__["isDefined"])(args.value) && args.value !== args.previousValue) {
                        var columnIndex = this._columnsController.getVisibleColumnIndex(args.value);
                        var oldColumnIndex = this._columnsController.getVisibleColumnIndex(args.previousValue);
                        this._editCellFromOptionChanged(columnIndex, oldColumnIndex, oldRowIndex)
                    }
                },
                _addRow: function(parentKey, deferred) {
                    if (this.isCellEditMode() && this.hasChanges()) {
                        var _deferred = new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_9__["Deferred"];
                        this.saveEditData().done(() => {
                            if (!this.hasChanges()) {
                                this.addRow(parentKey).done(_deferred.resolve).fail(_deferred.reject)
                            } else {
                                _deferred.reject("cancel")
                            }
                        });
                        return _deferred.promise()
                    }
                    return this.callBase.apply(this, arguments)
                },
                editCell: function(rowIndex, columnIndex) {
                    return this._editCell({
                        rowIndex: rowIndex,
                        columnIndex: columnIndex
                    })
                },
                _editCell: function(options) {
                    var d = new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_9__["Deferred"];
                    var coreResult;
                    this.executeOperation(d, () => {
                        coreResult = this._editCellCore(options);
                        Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_9__["when"])(coreResult).done(d.resolve).fail(d.reject)
                    });
                    return void 0 !== coreResult ? coreResult : d.promise()
                },
                _editCellCore: function(options) {
                    var dataController = this._dataController;
                    var isEditByOptionChanged = Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_4__["isDefined"])(options.oldColumnIndex) || Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_4__["isDefined"])(options.oldRowIndex);
                    var {
                        columnIndex: columnIndex,
                        rowIndex: rowIndex,
                        column: column,
                        item: item
                    } = this._getNormalizedEditCellOptions(options);
                    var params = {
                        data: null === item || void 0 === item ? void 0 : item.data,
                        cancel: false,
                        column: column
                    };
                    if (void 0 === item.key) {
                        this._dataController.fireError("E1043");
                        return
                    }
                    if (column && ("data" === item.rowType || "detailAdaptive" === item.rowType) && !item.removed && this.isCellOrBatchEditMode()) {
                        if (!isEditByOptionChanged && this.isEditCell(rowIndex, columnIndex)) {
                            return true
                        }
                        var editRowIndex = rowIndex + dataController.getRowIndexOffset();
                        return Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_9__["when"])(this._beforeEditCell(rowIndex, columnIndex, item)).done(cancel => {
                            if (cancel) {
                                return
                            }
                            if (!this._prepareEditCell(params, item, columnIndex, editRowIndex)) {
                                this._processCanceledEditingCell()
                            }
                        })
                    }
                    return false
                },
                _beforeEditCell: function(rowIndex, columnIndex, item) {
                    if (this.isCellEditMode() && !item.isNewRow && this.hasChanges()) {
                        var d = new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_9__["Deferred"];
                        this.saveEditData().always(() => {
                            d.resolve(this.hasChanges())
                        });
                        return d
                    }
                },
                publicMethods: function() {
                    var publicMethods = this.callBase.apply(this, arguments);
                    return publicMethods.concat(["editCell", "closeEditCell"])
                },
                _getNormalizedEditCellOptions: function(_ref) {
                    var {
                        oldColumnIndex: oldColumnIndex,
                        oldRowIndex: oldRowIndex,
                        columnIndex: columnIndex,
                        rowIndex: rowIndex
                    } = _ref;
                    var columnsController = this._columnsController;
                    var visibleColumns = columnsController.getVisibleColumns();
                    var items = this._dataController.items();
                    var item = items[rowIndex];
                    var oldColumn;
                    if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_4__["isDefined"])(oldColumnIndex)) {
                        oldColumn = visibleColumns[oldColumnIndex]
                    } else {
                        oldColumn = this._getEditColumn()
                    }
                    if (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_4__["isDefined"])(oldRowIndex)) {
                        oldRowIndex = this._getVisibleEditRowIndex()
                    }
                    if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_4__["isString"])(columnIndex)) {
                        columnIndex = columnsController.columnOption(columnIndex, "index");
                        columnIndex = columnsController.getVisibleIndex(columnIndex)
                    }
                    var column = visibleColumns[columnIndex];
                    return {
                        oldColumn: oldColumn,
                        columnIndex: columnIndex,
                        oldRowIndex: oldRowIndex,
                        rowIndex: rowIndex,
                        column: column,
                        item: item
                    }
                },
                _prepareEditCell: function(params, item, editColumnIndex, editRowIndex) {
                    if (!item.isNewRow) {
                        params.key = item.key
                    }
                    if (this._isEditingStart(params)) {
                        return false
                    }
                    this._pageIndex = this._dataController.pageIndex();
                    this._setEditRowKey(item.key);
                    this._setEditColumnNameByIndex(editColumnIndex);
                    if (!params.column.showEditorAlways) {
                        var _item$oldData;
                        this._addInternalData({
                            key: item.key,
                            oldData: null !== (_item$oldData = item.oldData) && void 0 !== _item$oldData ? _item$oldData : item.data
                        })
                    }
                    return true
                },
                closeEditCell: function(isError, withoutSaveEditData) {
                    var result = Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_9__["when"])();
                    var oldEditRowIndex = this._getVisibleEditRowIndex();
                    if (this.isCellOrBatchEditMode()) {
                        var deferred = new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_9__["Deferred"];
                        result = new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_9__["Deferred"];
                        this.executeOperation(deferred, () => {
                            this._closeEditCellCore(isError, oldEditRowIndex, withoutSaveEditData).always(result.resolve)
                        })
                    }
                    return result.promise()
                },
                _closeEditCellCore: function(isError, oldEditRowIndex, withoutSaveEditData) {
                    var dataController = this._dataController;
                    var deferred = new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_9__["Deferred"];
                    var promise = deferred.promise();
                    if (this.isCellEditMode() && this.hasChanges()) {
                        if (!withoutSaveEditData) {
                            this.saveEditData().done(error => {
                                if (!this.hasChanges()) {
                                    this.closeEditCell(!!error).always(deferred.resolve);
                                    return
                                }
                                deferred.resolve()
                            });
                            return promise
                        }
                    } else {
                        this._resetEditRowKey();
                        this._resetEditColumnName();
                        if (oldEditRowIndex >= 0) {
                            var rowIndices = [oldEditRowIndex];
                            this._beforeCloseEditCellInBatchMode(rowIndices);
                            if (!isError) {
                                dataController.updateItems({
                                    changeType: "update",
                                    rowIndices: rowIndices
                                })
                            }
                        }
                    }
                    deferred.resolve();
                    return promise
                },
                _resetModifiedClassCells: function(changes) {
                    if (this.isBatchEditMode()) {
                        var columnsCount = this._columnsController.getVisibleColumns().length;
                        changes.forEach(_ref2 => {
                            var {
                                key: key
                            } = _ref2;
                            var rowIndex = this._dataController.getRowIndexByKey(key);
                            if (-1 !== rowIndex) {
                                for (var columnIndex = 0; columnIndex < columnsCount; columnIndex++) {
                                    this._rowsView._getCellElement(rowIndex, columnIndex).removeClass(CELL_MODIFIED_CLASS)
                                }
                            }
                        })
                    }
                },
                _prepareChange: function(options, value, text) {
                    var $cellElement = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(options.cellElement);
                    if (this.isBatchEditMode() && void 0 !== options.key) {
                        this._applyModified($cellElement, options)
                    }
                    return this.callBase.apply(this, arguments)
                },
                _cancelSaving: function() {
                    var dataController = this._dataController;
                    if (this.isCellOrBatchEditMode()) {
                        if (this.isBatchEditMode()) {
                            this._resetEditIndices()
                        }
                        dataController.updateItems()
                    }
                    this.callBase.apply(this, arguments)
                },
                optionChanged: function(args) {
                    var fullName = args.fullName;
                    if ("editing" === args.name && fullName === EDITING_EDITCOLUMNNAME_OPTION_NAME) {
                        this._handleEditColumnNameChange(args);
                        args.handled = true
                    } else {
                        this.callBase(args)
                    }
                },
                _editCellFromOptionChanged: function(columnIndex, oldColumnIndex, oldRowIndex) {
                    var columns = this._columnsController.getVisibleColumns();
                    if (columnIndex > -1) {
                        Object(_core_utils_common__WEBPACK_IMPORTED_MODULE_10__["deferRender"])(() => {
                            this._repaintEditCell(columns[columnIndex], columns[oldColumnIndex], oldRowIndex)
                        })
                    }
                },
                _handleEditRowKeyChange: function(args) {
                    if (this.isCellOrBatchEditMode()) {
                        var columnIndex = this._getVisibleEditColumnIndex();
                        var oldRowIndexCorrection = this._getEditRowIndexCorrection();
                        var oldRowIndex = this._dataController.getRowIndexByKey(args.previousValue) + oldRowIndexCorrection;
                        if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_4__["isDefined"])(args.value) && args.value !== args.previousValue) {
                            var _this$_editCellFromOp;
                            null === (_this$_editCellFromOp = this._editCellFromOptionChanged) || void 0 === _this$_editCellFromOp ? void 0 : _this$_editCellFromOp.call(this, columnIndex, columnIndex, oldRowIndex)
                        }
                    } else {
                        this.callBase.apply(this, arguments)
                    }
                },
                deleteRow: function(rowIndex) {
                    if (this.isCellEditMode() && this.isEditing()) {
                        var isNewRow = this._dataController.items()[rowIndex].isNewRow;
                        var rowKey = this._dataController.getKeyByRowIndex(rowIndex);
                        this.closeEditCell(null, isNewRow).always(() => {
                            rowIndex = this._dataController.getRowIndexByKey(rowKey);
                            this._checkAndDeleteRow(rowIndex)
                        })
                    } else {
                        this.callBase.apply(this, arguments)
                    }
                },
                _checkAndDeleteRow: function(rowIndex) {
                    if (this.isBatchEditMode()) {
                        this._deleteRowCore(rowIndex)
                    } else {
                        this.callBase.apply(this, arguments)
                    }
                },
                _refreshCore: function(params) {
                    var {
                        isPageChanged: isPageChanged
                    } = null !== params && void 0 !== params ? params : {};
                    var needResetIndexes = this.isBatchEditMode() || isPageChanged && "virtual" !== this.option("scrolling.mode");
                    if (this.isCellOrBatchEditMode()) {
                        if (needResetIndexes) {
                            this._resetEditColumnName();
                            this._resetEditRowKey()
                        }
                    } else {
                        this.callBase.apply(this, arguments)
                    }
                },
                _allowRowAdding: function(params) {
                    if (this.isBatchEditMode()) {
                        return true
                    }
                    return this.callBase.apply(this, arguments)
                },
                _afterDeleteRow: function(rowIndex, oldEditRowIndex) {
                    var dataController = this._dataController;
                    if (this.isBatchEditMode()) {
                        dataController.updateItems({
                            changeType: "update",
                            rowIndices: [oldEditRowIndex, rowIndex]
                        });
                        return (new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_9__["Deferred"]).resolve()
                    }
                    return this.callBase.apply(this, arguments)
                },
                _updateEditRow: function(row, forceUpdateRow, isCustomSetCellValue) {
                    if (this.isCellOrBatchEditMode()) {
                        this._updateRowImmediately(row, forceUpdateRow, isCustomSetCellValue)
                    } else {
                        this.callBase.apply(this, arguments)
                    }
                },
                _isDefaultButtonVisible: function(button, options) {
                    if (this.isCellOrBatchEditMode()) {
                        var isBatchMode = this.isBatchEditMode();
                        switch (button.name) {
                            case "save":
                            case "cancel":
                            case "edit":
                                return false;
                            case "delete":
                                return this.callBase.apply(this, arguments) && (!isBatchMode || !options.row.removed);
                            case "undelete":
                                return isBatchMode && this.allowDeleting(options) && options.row.removed;
                            default:
                                return this.callBase.apply(this, arguments)
                        }
                    }
                    return this.callBase.apply(this, arguments)
                },
                _isRowDeleteAllowed: function() {
                    var callBase = this.callBase.apply(this, arguments);
                    return callBase || this.isBatchEditMode()
                },
                _beforeEndSaving: function(changes) {
                    if (this.isCellEditMode()) {
                        var _changes$;
                        if ("update" !== (null === (_changes$ = changes[0]) || void 0 === _changes$ ? void 0 : _changes$.type)) {
                            this.callBase.apply(this, arguments)
                        }
                    } else {
                        if (this.isBatchEditMode()) {
                            this._resetModifiedClassCells(changes)
                        }
                        this.callBase.apply(this, arguments)
                    }
                },
                prepareEditButtons: function(headerPanel) {
                    var editingOptions = this.option("editing") || {};
                    var buttonItems = this.callBase.apply(this, arguments);
                    if ((editingOptions.allowUpdating || editingOptions.allowAdding || editingOptions.allowDeleting) && this.isBatchEditMode()) {
                        buttonItems.push(this.prepareButtonItem(headerPanel, "save", "saveEditData", 21));
                        buttonItems.push(this.prepareButtonItem(headerPanel, "revert", "cancelEditData", 22))
                    }
                    return buttonItems
                },
                _saveEditDataInner: function() {
                    var _deferred2;
                    var editRow = this._dataController.getVisibleRows()[this.getEditRowIndex()];
                    var editColumn = this._getEditColumn();
                    var showEditorAlways = null === editColumn || void 0 === editColumn ? void 0 : editColumn.showEditorAlways;
                    var isUpdateInCellMode = this.isCellEditMode() && !(null !== editRow && void 0 !== editRow && editRow.isNewRow);
                    var deferred;
                    if (isUpdateInCellMode && showEditorAlways) {
                        deferred = new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_9__["Deferred"];
                        this.addDeferred(deferred)
                    }
                    return this.callBase.apply(this, arguments).always(null === (_deferred2 = deferred) || void 0 === _deferred2 ? void 0 : _deferred2.resolve)
                },
                _applyChange: function(options, params, forceUpdateRow) {
                    var isUpdateInCellMode = this.isCellEditMode() && options.row && !options.row.isNewRow;
                    var showEditorAlways = options.column.showEditorAlways;
                    var isCustomSetCellValue = options.column.setCellValue !== options.column.defaultSetCellValue;
                    var focusPreviousEditingCell = showEditorAlways && !forceUpdateRow && isUpdateInCellMode && this.hasEditData() && !this.isEditCell(options.rowIndex, options.columnIndex);
                    if (focusPreviousEditingCell) {
                        this._focusEditingCell();
                        this._updateEditRow(options.row, true, isCustomSetCellValue);
                        return
                    }
                    return this.callBase.apply(this, arguments)
                },
                _applyChangeCore: function(options, forceUpdateRow) {
                    var showEditorAlways = options.column.showEditorAlways;
                    var isUpdateInCellMode = this.isCellEditMode() && options.row && !options.row.isNewRow;
                    if (showEditorAlways && !forceUpdateRow) {
                        if (isUpdateInCellMode) {
                            this._setEditRowKey(options.row.key, true);
                            this._setEditColumnNameByIndex(options.columnIndex, true);
                            return this.saveEditData()
                        } else if (this.isBatchEditMode()) {
                            forceUpdateRow = this._needUpdateRow(options.column);
                            return this.callBase(options, forceUpdateRow)
                        }
                    }
                    return this.callBase.apply(this, arguments)
                },
                _processDataItemCore: function(item, _ref3) {
                    var {
                        data: data,
                        type: type
                    } = _ref3;
                    if (this.isBatchEditMode() && type === DATA_EDIT_DATA_REMOVE_TYPE) {
                        item.data = Object(_data_array_utils__WEBPACK_IMPORTED_MODULE_11__["createObjectWithChanges"])(item.data, data)
                    }
                    this.callBase.apply(this, arguments)
                },
                _processRemoveCore: function(changes, editIndex, processIfBatch) {
                    if (this.isBatchEditMode() && !processIfBatch) {
                        return
                    }
                    return this.callBase.apply(this, arguments)
                },
                _processRemoveIfError: function() {
                    if (this.isBatchEditMode()) {
                        return
                    }
                    return this.callBase.apply(this, arguments)
                },
                _beforeFocusElementInRow: function(rowIndex) {
                    this.callBase.apply(this, arguments);
                    var editRowIndex = rowIndex >= 0 ? rowIndex : 0;
                    var columnIndex = this.getFirstEditableColumnIndex();
                    columnIndex >= 0 && this.editCell(editRowIndex, columnIndex)
                }
            }
        },
        views: {
            rowsView: {
                _createTable: function() {
                    var $table = this.callBase.apply(this, arguments);
                    var editingController = this._editingController;
                    if (editingController.isCellOrBatchEditMode() && this.option("editing.allowUpdating")) {
                        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__["default"].on($table, Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_7__["addNamespace"])(_events_hold__WEBPACK_IMPORTED_MODULE_8__["default"].name, "dxDataGridRowsView"), "td:not(." + EDITOR_CELL_CLASS + ")", this.createAction(() => {
                            if (editingController.isEditing()) {
                                editingController.closeEditCell()
                            }
                        }))
                    }
                    return $table
                },
                _createRow: function(row) {
                    var $row = this.callBase.apply(this, arguments);
                    if (row) {
                        var editingController = this._editingController;
                        var isRowRemoved = !!row.removed;
                        if (editingController.isBatchEditMode()) {
                            isRowRemoved && $row.addClass(ROW_REMOVED)
                        }
                    }
                    return $row
                }
            },
            headerPanel: {
                isVisible: function() {
                    var editingOptions = this.getController("editing").option("editing");
                    return this.callBase() || editingOptions && (editingOptions.allowUpdating || editingOptions.allowDeleting) && editingOptions.mode === _ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_12__["EDIT_MODE_BATCH"]
                }
            }
        }
    }
});


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.editing_constants.js":
/*!************************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.editing_constants.js ***!
  \************************************************************************************/
/*! exports provided: EDITOR_CELL_CLASS, ROW_CLASS, CELL_MODIFIED_CLASS, ROW_SELECTED_CLASS, EDIT_FORM_CLASS, DATA_EDIT_DATA_INSERT_TYPE, DATA_EDIT_DATA_REMOVE_TYPE, EDITING_POPUP_OPTION_NAME, EDITING_FORM_OPTION_NAME, EDITING_EDITROWKEY_OPTION_NAME, EDITING_EDITCOLUMNNAME_OPTION_NAME, TARGET_COMPONENT_NAME, EDITORS_INPUT_SELECTOR, FOCUSABLE_ELEMENT_SELECTOR, EDIT_MODE_BATCH, EDIT_MODE_ROW, EDIT_MODE_CELL, EDIT_MODE_FORM, EDIT_MODE_POPUP, FIRST_NEW_ROW_POSITION, LAST_NEW_ROW_POSITION, PAGE_BOTTOM_NEW_ROW_POSITION, PAGE_TOP_NEW_ROW_POSITION, VIEWPORT_BOTTOM_NEW_ROW_POSITION, VIEWPORT_TOP_NEW_ROW_POSITION, EDIT_MODES, ROW_BASED_MODES, MODES_WITH_DELAYED_FOCUS */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EDITOR_CELL_CLASS", function() { return EDITOR_CELL_CLASS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ROW_CLASS", function() { return ROW_CLASS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CELL_MODIFIED_CLASS", function() { return CELL_MODIFIED_CLASS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ROW_SELECTED_CLASS", function() { return ROW_SELECTED_CLASS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EDIT_FORM_CLASS", function() { return EDIT_FORM_CLASS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DATA_EDIT_DATA_INSERT_TYPE", function() { return DATA_EDIT_DATA_INSERT_TYPE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DATA_EDIT_DATA_REMOVE_TYPE", function() { return DATA_EDIT_DATA_REMOVE_TYPE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EDITING_POPUP_OPTION_NAME", function() { return EDITING_POPUP_OPTION_NAME; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EDITING_FORM_OPTION_NAME", function() { return EDITING_FORM_OPTION_NAME; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EDITING_EDITROWKEY_OPTION_NAME", function() { return EDITING_EDITROWKEY_OPTION_NAME; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EDITING_EDITCOLUMNNAME_OPTION_NAME", function() { return EDITING_EDITCOLUMNNAME_OPTION_NAME; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TARGET_COMPONENT_NAME", function() { return TARGET_COMPONENT_NAME; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EDITORS_INPUT_SELECTOR", function() { return EDITORS_INPUT_SELECTOR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FOCUSABLE_ELEMENT_SELECTOR", function() { return FOCUSABLE_ELEMENT_SELECTOR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EDIT_MODE_BATCH", function() { return EDIT_MODE_BATCH; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EDIT_MODE_ROW", function() { return EDIT_MODE_ROW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EDIT_MODE_CELL", function() { return EDIT_MODE_CELL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EDIT_MODE_FORM", function() { return EDIT_MODE_FORM; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EDIT_MODE_POPUP", function() { return EDIT_MODE_POPUP; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FIRST_NEW_ROW_POSITION", function() { return FIRST_NEW_ROW_POSITION; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LAST_NEW_ROW_POSITION", function() { return LAST_NEW_ROW_POSITION; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PAGE_BOTTOM_NEW_ROW_POSITION", function() { return PAGE_BOTTOM_NEW_ROW_POSITION; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PAGE_TOP_NEW_ROW_POSITION", function() { return PAGE_TOP_NEW_ROW_POSITION; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VIEWPORT_BOTTOM_NEW_ROW_POSITION", function() { return VIEWPORT_BOTTOM_NEW_ROW_POSITION; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VIEWPORT_TOP_NEW_ROW_POSITION", function() { return VIEWPORT_TOP_NEW_ROW_POSITION; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EDIT_MODES", function() { return EDIT_MODES; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ROW_BASED_MODES", function() { return ROW_BASED_MODES; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MODES_WITH_DELAYED_FOCUS", function() { return MODES_WITH_DELAYED_FOCUS; });
/**
 * DevExtreme (esm/ui/grid_core/ui.grid_core.editing_constants.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
var EDITOR_CELL_CLASS = "dx-editor-cell";
var ROW_CLASS = "dx-row";
var CELL_MODIFIED_CLASS = "dx-cell-modified";
var ROW_SELECTED_CLASS = "dx-selection";
var EDIT_FORM_CLASS = "edit-form";
var DATA_EDIT_DATA_INSERT_TYPE = "insert";
var DATA_EDIT_DATA_REMOVE_TYPE = "remove";
var EDITING_POPUP_OPTION_NAME = "editing.popup";
var EDITING_FORM_OPTION_NAME = "editing.form";
var EDITING_EDITROWKEY_OPTION_NAME = "editing.editRowKey";
var EDITING_EDITCOLUMNNAME_OPTION_NAME = "editing.editColumnName";
var TARGET_COMPONENT_NAME = "targetComponent";
var EDITORS_INPUT_SELECTOR = "input:not([type='hidden'])";
var FOCUSABLE_ELEMENT_SELECTOR = "[tabindex], " + EDITORS_INPUT_SELECTOR;
var EDIT_MODE_BATCH = "batch";
var EDIT_MODE_ROW = "row";
var EDIT_MODE_CELL = "cell";
var EDIT_MODE_FORM = "form";
var EDIT_MODE_POPUP = "popup";
var FIRST_NEW_ROW_POSITION = "first";
var LAST_NEW_ROW_POSITION = "last";
var PAGE_BOTTOM_NEW_ROW_POSITION = "pageBottom";
var PAGE_TOP_NEW_ROW_POSITION = "pageTop";
var VIEWPORT_BOTTOM_NEW_ROW_POSITION = "viewportBottom";
var VIEWPORT_TOP_NEW_ROW_POSITION = "viewportTop";
var EDIT_MODES = [EDIT_MODE_BATCH, EDIT_MODE_ROW, EDIT_MODE_CELL, EDIT_MODE_FORM, EDIT_MODE_POPUP];
var ROW_BASED_MODES = [EDIT_MODE_ROW, EDIT_MODE_FORM, EDIT_MODE_POPUP];
var MODES_WITH_DELAYED_FOCUS = [EDIT_MODE_ROW, EDIT_MODE_FORM];


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.editing_form_based.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.editing_form_based.js ***!
  \*************************************************************************************/
/*! exports provided: editingFormBasedModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "editingFormBasedModule", function() { return editingFormBasedModule; });
/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/renderer */ "./node_modules/devextreme/esm/core/renderer.js");
/* harmony import */ var _core_utils_window__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/utils/window */ "./node_modules/devextreme/esm/core/utils/window.js");
/* harmony import */ var _events_core_events_engine__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../events/core/events_engine */ "./node_modules/devextreme/esm/events/core/events_engine.js");
/* harmony import */ var _core_guid__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/guid */ "./node_modules/devextreme/esm/core/guid.js");
/* harmony import */ var _core_utils_type__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/utils/type */ "./node_modules/devextreme/esm/core/utils/type.js");
/* harmony import */ var _core_utils_iterator__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core/utils/iterator */ "./node_modules/devextreme/esm/core/utils/iterator.js");
/* harmony import */ var _core_utils_extend__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../core/utils/extend */ "./node_modules/devextreme/esm/core/utils/extend.js");
/* harmony import */ var _button__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../button */ "./node_modules/devextreme/esm/ui/button.js");
/* harmony import */ var _core_devices__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../core/devices */ "./node_modules/devextreme/esm/core/devices.js");
/* harmony import */ var _form__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../form */ "./node_modules/devextreme/esm/ui/form.js");
/* harmony import */ var _core_utils_deferred__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../core/utils/deferred */ "./node_modules/devextreme/esm/core/utils/deferred.js");
/* harmony import */ var _scroll_view_ui_scrollable__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../scroll_view/ui.scrollable */ "./node_modules/devextreme/esm/ui/scroll_view/ui.scrollable.js");
/* harmony import */ var _popup__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../popup */ "./node_modules/devextreme/esm/ui/popup.js");
/* harmony import */ var _ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./ui.grid_core.editing_constants */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.editing_constants.js");
/**
 * DevExtreme (esm/ui/grid_core/ui.grid_core.editing_form_based.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */














var EDIT_FORM_ITEM_CLASS = "edit-form-item";
var EDIT_POPUP_CLASS = "edit-popup";
var SCROLLABLE_CONTAINER_CLASS = "dx-scrollable-container";
var EDIT_POPUP_FORM_CLASS = "edit-popup-form";
var BUTTON_CLASS = "dx-button";
var FORM_BUTTONS_CONTAINER_CLASS = "form-buttons-container";
var getEditorType = item => {
    var _column$formItem;
    var column = item.column;
    return item.isCustomEditorType ? item.editorType : null === (_column$formItem = column.formItem) || void 0 === _column$formItem ? void 0 : _column$formItem.editorType
};
var forEachFormItems = (items, callBack) => {
    items.forEach(item => {
        if (item.items || item.tabs) {
            forEachFormItems(item.items || item.tabs, callBack)
        } else {
            callBack(item)
        }
    })
};
var editingFormBasedModule = {
    extenders: {
        controllers: {
            editing: {
                init: function() {
                    this._editForm = null;
                    this._updateEditFormDeferred = null;
                    this.callBase.apply(this, arguments)
                },
                isFormOrPopupEditMode: function() {
                    return this.isPopupEditMode() || this.isFormEditMode()
                },
                isPopupEditMode: function() {
                    var editMode = this.option("editing.mode");
                    return editMode === _ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_13__["EDIT_MODE_POPUP"]
                },
                isFormEditMode: function() {
                    var editMode = this.option("editing.mode");
                    return editMode === _ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_13__["EDIT_MODE_FORM"]
                },
                getFirstEditableColumnIndex: function() {
                    var firstFormItem = this._firstFormItem;
                    if (this.isFormEditMode() && firstFormItem) {
                        var editRowKey = this.option(_ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_13__["EDITING_EDITROWKEY_OPTION_NAME"]);
                        var editRowIndex = this._dataController.getRowIndexByKey(editRowKey);
                        var $editFormElements = this._rowsView.getCellElements(editRowIndex);
                        return this._rowsView._getEditFormEditorVisibleIndex($editFormElements, firstFormItem.column)
                    }
                    return this.callBase.apply(this, arguments)
                },
                getEditFormRowIndex: function() {
                    return this.isFormOrPopupEditMode() ? this._getVisibleEditRowIndex() : this.callBase.apply(this, arguments)
                },
                _isEditColumnVisible: function() {
                    var result = this.callBase.apply(this, arguments);
                    var editingOptions = this.option("editing");
                    return this.isFormOrPopupEditMode() ? editingOptions.allowUpdating || result : result
                },
                _handleDataChanged: function(args) {
                    var editForm = this._editForm;
                    if ("refresh" === args.changeType && this.isPopupEditMode() && null !== editForm && void 0 !== editForm && editForm.option("visible")) {
                        this._repaintEditPopup()
                    }
                    this.callBase.apply(this, arguments)
                },
                getPopupContent: function() {
                    var _this$_editPopup;
                    var popupVisible = null === (_this$_editPopup = this._editPopup) || void 0 === _this$_editPopup ? void 0 : _this$_editPopup.option("visible");
                    if (this.isPopupEditMode() && popupVisible) {
                        return this._$popupContent
                    }
                },
                _showAddedRow: function(rowIndex) {
                    if (this.isPopupEditMode()) {
                        this._showEditPopup(rowIndex)
                    } else {
                        this.callBase.apply(this, arguments)
                    }
                },
                _cancelEditDataCore: function() {
                    this.callBase.apply(this, arguments);
                    if (this.isPopupEditMode()) {
                        this._hideEditPopup()
                    }
                },
                _updateEditRowCore: function(row, skipCurrentRow, isCustomSetCellValue) {
                    var editForm = this._editForm;
                    if (this.isPopupEditMode()) {
                        if (this.option("repaintChangesOnly")) {
                            var _row$update;
                            null === (_row$update = row.update) || void 0 === _row$update ? void 0 : _row$update.call(row, row);
                            this._rowsView.renderDelayedTemplates()
                        } else if (editForm) {
                            this._updateEditFormDeferred = (new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_10__["Deferred"]).done(() => editForm.repaint());
                            if (!this._updateLockCount) {
                                this._updateEditFormDeferred.resolve()
                            }
                        }
                    } else {
                        this.callBase.apply(this, arguments)
                    }
                },
                _showEditPopup: function(rowIndex, repaintForm) {
                    var isMobileDevice = "desktop" !== _core_devices__WEBPACK_IMPORTED_MODULE_8__["default"].current().deviceType;
                    var popupOptions = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_6__["extend"])({
                        showTitle: false,
                        fullScreen: isMobileDevice,
                        copyRootClassesToWrapper: true,
                        _ignoreCopyRootClassesToWrapperDeprecation: true,
                        toolbarItems: [{
                            toolbar: "bottom",
                            location: "after",
                            widget: "dxButton",
                            options: this._getSaveButtonConfig()
                        }, {
                            toolbar: "bottom",
                            location: "after",
                            widget: "dxButton",
                            options: this._getCancelButtonConfig()
                        }],
                        contentTemplate: this._getPopupEditFormTemplate(rowIndex)
                    }, this.option(_ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_13__["EDITING_POPUP_OPTION_NAME"]));
                    if (!this._editPopup) {
                        var $popupContainer = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>").appendTo(this.component.$element()).addClass(this.addWidgetPrefix(EDIT_POPUP_CLASS));
                        this._editPopup = this._createComponent($popupContainer, _popup__WEBPACK_IMPORTED_MODULE_12__["default"], {
                            copyRootClassesToWrapper: true,
                            _ignoreCopyRootClassesToWrapperDeprecation: true
                        });
                        this._editPopup.on("hiding", this._getEditPopupHiddenHandler());
                        this._editPopup.on("shown", e => {
                            _events_core_events_engine__WEBPACK_IMPORTED_MODULE_2__["default"].trigger(e.component.$content().find(_ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_13__["FOCUSABLE_ELEMENT_SELECTOR"]).not("." + SCROLLABLE_CONTAINER_CLASS).first(), "focus");
                            if (repaintForm) {
                                var _this$_editForm;
                                null === (_this$_editForm = this._editForm) || void 0 === _this$_editForm ? void 0 : _this$_editForm.repaint()
                            }
                        })
                    }
                    this._editPopup.option(popupOptions);
                    this._editPopup.show();
                    this.callBase.apply(this, arguments)
                },
                _getPopupEditFormTemplate: function(rowIndex) {
                    var row = this.component.getVisibleRows()[rowIndex];
                    var templateOptions = {
                        row: row,
                        values: row.values,
                        rowType: row.rowType,
                        key: row.key,
                        rowIndex: rowIndex
                    };
                    this._rowsView._addWatchMethod(templateOptions, row);
                    return container => {
                        var formTemplate = this.getEditFormTemplate();
                        var scrollable = this._createComponent(Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>").appendTo(container), _scroll_view_ui_scrollable__WEBPACK_IMPORTED_MODULE_11__["default"]);
                        this._$popupContent = scrollable.$content();
                        formTemplate(this._$popupContent, templateOptions, {
                            isPopupForm: true
                        });
                        this._rowsView.renderDelayedTemplates()
                    }
                },
                _repaintEditPopup: function() {
                    var _this$_editPopup2;
                    var rowIndex = this._getVisibleEditRowIndex();
                    if (null !== (_this$_editPopup2 = this._editPopup) && void 0 !== _this$_editPopup2 && _this$_editPopup2.option("visible") && rowIndex >= 0) {
                        var defaultAnimation = this._editPopup.option("animation");
                        this._editPopup.option("animation", null);
                        this._showEditPopup(rowIndex, true);
                        this._editPopup.option("animation", defaultAnimation)
                    }
                },
                _hideEditPopup: function() {
                    var _this$_editPopup3;
                    null === (_this$_editPopup3 = this._editPopup) || void 0 === _this$_editPopup3 ? void 0 : _this$_editPopup3.option("visible", false)
                },
                optionChanged: function(args) {
                    if ("editing" === args.name && this.isFormOrPopupEditMode()) {
                        var fullName = args.fullName;
                        if (0 === fullName.indexOf(_ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_13__["EDITING_FORM_OPTION_NAME"])) {
                            this._handleFormOptionChange(args);
                            args.handled = true
                        } else if (0 === fullName.indexOf(_ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_13__["EDITING_POPUP_OPTION_NAME"])) {
                            this._handlePopupOptionChange(args);
                            args.handled = true
                        }
                    }
                    this.callBase.apply(this, arguments)
                },
                _handleFormOptionChange: function(args) {
                    var _this$_editPopup4;
                    if (this.isFormEditMode()) {
                        var editRowIndex = this._getVisibleEditRowIndex();
                        if (editRowIndex >= 0) {
                            this._dataController.updateItems({
                                changeType: "update",
                                rowIndices: [editRowIndex]
                            })
                        }
                    } else if (null !== (_this$_editPopup4 = this._editPopup) && void 0 !== _this$_editPopup4 && _this$_editPopup4.option("visible") && 0 === args.fullName.indexOf(_ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_13__["EDITING_FORM_OPTION_NAME"])) {
                        this._repaintEditPopup()
                    }
                },
                _handlePopupOptionChange: function(args) {
                    var editPopup = this._editPopup;
                    if (editPopup) {
                        var popupOptionName = args.fullName.slice(_ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_13__["EDITING_POPUP_OPTION_NAME"].length + 1);
                        if (popupOptionName) {
                            editPopup.option(popupOptionName, args.value)
                        } else {
                            editPopup.option(args.value)
                        }
                    }
                },
                renderFormEditTemplate: function(detailCellOptions, item, formTemplateOptions, container, isReadOnly) {
                    var that = this;
                    var $container = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(container);
                    var column = item.column;
                    var editorType = getEditorType(item);
                    var rowData = null === detailCellOptions || void 0 === detailCellOptions ? void 0 : detailCellOptions.row.data;
                    var form = formTemplateOptions.component;
                    var {
                        label: label,
                        labelMark: labelMark,
                        labelMode: labelMode
                    } = formTemplateOptions.editorOptions || {};
                    var cellOptions = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_6__["extend"])({}, detailCellOptions, {
                        data: rowData,
                        cellElement: null,
                        isOnForm: true,
                        item: item,
                        id: form.getItemID(item.name || item.dataField),
                        column: Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_6__["extend"])({}, column, {
                            editorType: editorType,
                            editorOptions: Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_6__["extend"])({
                                label: label,
                                labelMark: labelMark,
                                labelMode: labelMode
                            }, column.editorOptions, item.editorOptions)
                        }),
                        columnIndex: column.index,
                        setValue: !isReadOnly && column.allowEditing && function(value) {
                            that.updateFieldValue(cellOptions, value)
                        }
                    });
                    cellOptions.value = column.calculateCellValue(rowData);
                    var template = this._getFormEditItemTemplate.bind(this)(cellOptions, column);
                    this._rowsView.renderTemplate($container, template, cellOptions, !!$container.closest(Object(_core_utils_window__WEBPACK_IMPORTED_MODULE_1__["getWindow"])().document).length).done(() => {
                        this._rowsView._updateCell($container, cellOptions)
                    });
                    return cellOptions
                },
                getFormEditorTemplate: function(cellOptions, item) {
                    var column = this.component.columnOption(item.dataField);
                    return (options, container) => {
                        var _cellOptions$row$watc, _cellOptions$row;
                        var $container = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(container);
                        null === (_cellOptions$row$watc = (_cellOptions$row = cellOptions.row).watch) || void 0 === _cellOptions$row$watc ? void 0 : _cellOptions$row$watc.call(_cellOptions$row, (function() {
                            return column.selector(cellOptions.row.data)
                        }), () => {
                            var _validator;
                            var $editorElement = $container.find(".dx-widget").first();
                            var validator = $editorElement.data("dxValidator");
                            var validatorOptions = null === (_validator = validator) || void 0 === _validator ? void 0 : _validator.option();
                            $container.contents().remove();
                            cellOptions = this.renderFormEditTemplate.bind(this)(cellOptions, item, options, $container);
                            $editorElement = $container.find(".dx-widget").first();
                            validator = $editorElement.data("dxValidator");
                            if (validatorOptions && !validator) {
                                $editorElement.dxValidator({
                                    validationRules: validatorOptions.validationRules,
                                    validationGroup: validatorOptions.validationGroup,
                                    dataGetter: validatorOptions.dataGetter
                                })
                            }
                        });
                        cellOptions = this.renderFormEditTemplate.bind(this)(cellOptions, item, options, $container)
                    }
                },
                getEditFormOptions: function(detailOptions) {
                    var _this$_getValidationG;
                    var editFormOptions = null === (_this$_getValidationG = this._getValidationGroupsInForm) || void 0 === _this$_getValidationG ? void 0 : _this$_getValidationG.call(this, detailOptions);
                    var userCustomizeItem = this.option("editing.form.customizeItem");
                    var editFormItemClass = this.addWidgetPrefix(EDIT_FORM_ITEM_CLASS);
                    var items = this.option("editing.form.items");
                    var isCustomEditorType = {};
                    if (!items) {
                        var columns = this.getController("columns").getColumns();
                        items = [];
                        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_5__["each"])(columns, (function(_, column) {
                            if (!column.isBand && !column.type) {
                                items.push({
                                    column: column,
                                    name: column.name,
                                    dataField: column.dataField
                                })
                            }
                        }))
                    } else {
                        forEachFormItems(items, item => {
                            var itemId = (null === item || void 0 === item ? void 0 : item.name) || (null === item || void 0 === item ? void 0 : item.dataField);
                            if (itemId) {
                                isCustomEditorType[itemId] = !!item.editorType
                            }
                        })
                    }
                    return Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_6__["extend"])({}, editFormOptions, {
                        items: items,
                        formID: "dx-" + new _core_guid__WEBPACK_IMPORTED_MODULE_3__["default"],
                        customizeItem: item => {
                            var column;
                            var itemId = item.name || item.dataField;
                            if (item.column || itemId) {
                                column = item.column || this._columnsController.columnOption(item.name ? "name:" + item.name : "dataField:" + item.dataField)
                            }
                            if (column) {
                                item.label = item.label || {};
                                item.label.text = item.label.text || column.caption;
                                if ("boolean" === column.dataType && void 0 === item.label.visible) {
                                    var labelMode = this.option("editing.form.labelMode");
                                    if ("floating" === labelMode || "static" === labelMode) {
                                        item.label.visible = true
                                    }
                                }
                                item.template = item.template || this.getFormEditorTemplate(detailOptions, item);
                                item.column = column;
                                item.isCustomEditorType = isCustomEditorType[itemId];
                                if (column.formItem) {
                                    Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_6__["extend"])(item, column.formItem)
                                }
                                if (void 0 === item.isRequired && column.validationRules) {
                                    item.isRequired = column.validationRules.some((function(rule) {
                                        return "required" === rule.type
                                    }));
                                    item.validationRules = []
                                }
                                var itemVisible = Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_4__["isDefined"])(item.visible) ? item.visible : true;
                                if (!this._firstFormItem && itemVisible) {
                                    this._firstFormItem = item
                                }
                            }
                            null === userCustomizeItem || void 0 === userCustomizeItem ? void 0 : userCustomizeItem.call(this, item);
                            item.cssClass = Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_4__["isString"])(item.cssClass) ? item.cssClass + " " + editFormItemClass : editFormItemClass
                        }
                    })
                },
                getEditFormTemplate: function() {
                    return ($container, detailOptions, options) => {
                        var editFormOptions = this.option(_ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_13__["EDITING_FORM_OPTION_NAME"]);
                        var baseEditFormOptions = this.getEditFormOptions(detailOptions);
                        var $formContainer = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>").appendTo($container);
                        var isPopupForm = null === options || void 0 === options ? void 0 : options.isPopupForm;
                        this._firstFormItem = void 0;
                        if (isPopupForm) {
                            $formContainer.addClass(this.addWidgetPrefix(EDIT_POPUP_FORM_CLASS))
                        }
                        this._editForm = this._createComponent($formContainer, _form__WEBPACK_IMPORTED_MODULE_9__["default"], Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_6__["extend"])({}, editFormOptions, baseEditFormOptions));
                        if (!isPopupForm) {
                            var $buttonsContainer = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>").addClass(this.addWidgetPrefix(FORM_BUTTONS_CONTAINER_CLASS)).appendTo($container);
                            this._createComponent(Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>").appendTo($buttonsContainer), _button__WEBPACK_IMPORTED_MODULE_7__["default"], this._getSaveButtonConfig());
                            this._createComponent(Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>").appendTo($buttonsContainer), _button__WEBPACK_IMPORTED_MODULE_7__["default"], this._getCancelButtonConfig())
                        }
                        this._editForm.on("contentReady", () => {
                            var _this$_editPopup5;
                            this._rowsView.renderDelayedTemplates();
                            null === (_this$_editPopup5 = this._editPopup) || void 0 === _this$_editPopup5 ? void 0 : _this$_editPopup5.repaint()
                        })
                    }
                },
                getEditForm: function() {
                    return this._editForm
                },
                _endUpdateCore: function() {
                    var _this$_updateEditForm;
                    null === (_this$_updateEditForm = this._updateEditFormDeferred) || void 0 === _this$_updateEditForm ? void 0 : _this$_updateEditForm.resolve()
                },
                _beforeEndSaving: function() {
                    this.callBase.apply(this, arguments);
                    if (this.isPopupEditMode()) {
                        var _this$_editPopup6;
                        null === (_this$_editPopup6 = this._editPopup) || void 0 === _this$_editPopup6 ? void 0 : _this$_editPopup6.hide()
                    }
                },
                _processDataItemCore: function(item, _ref) {
                    var {
                        type: type
                    } = _ref;
                    if (this.isPopupEditMode() && type === _ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_13__["DATA_EDIT_DATA_INSERT_TYPE"]) {
                        item.visible = false
                    }
                    this.callBase.apply(this, arguments)
                },
                _editRowFromOptionChangedCore: function(rowIndices, rowIndex) {
                    var isPopupEditMode = this.isPopupEditMode();
                    this.callBase(rowIndices, rowIndex, isPopupEditMode);
                    if (isPopupEditMode) {
                        this._showEditPopup(rowIndex)
                    }
                }
            },
            data: {
                _updateEditItem: function(item) {
                    if (this._editingController.isFormEditMode()) {
                        item.rowType = "detail"
                    }
                }
            }
        },
        views: {
            rowsView: {
                _renderCellContent: function($cell, options) {
                    if ("data" === options.rowType && this._editingController.isPopupEditMode() && false === options.row.visible) {
                        return
                    }
                    this.callBase.apply(this, arguments)
                },
                getCellElements: function(rowIndex) {
                    var $cellElements = this.callBase(rowIndex);
                    var editingController = this._editingController;
                    var editForm = editingController.getEditForm();
                    var editFormRowIndex = editingController.getEditFormRowIndex();
                    if (editFormRowIndex === rowIndex && $cellElements && editForm) {
                        return editForm.$element().find("." + this.addWidgetPrefix(EDIT_FORM_ITEM_CLASS) + ", ." + BUTTON_CLASS)
                    }
                    return $cellElements
                },
                _getVisibleColumnIndex: function($cells, rowIndex, columnIdentifier) {
                    var editFormRowIndex = this._editingController.getEditFormRowIndex();
                    if (editFormRowIndex === rowIndex && Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_4__["isString"])(columnIdentifier)) {
                        var column = this._columnsController.columnOption(columnIdentifier);
                        return this._getEditFormEditorVisibleIndex($cells, column)
                    }
                    return this.callBase.apply(this, arguments)
                },
                _getEditFormEditorVisibleIndex: function($cells, column) {
                    var visibleIndex = -1;
                    Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_5__["each"])($cells, (function(index, cellElement) {
                        var item = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(cellElement).find(".dx-field-item-content").data("dx-form-item");
                        if (null !== item && void 0 !== item && item.column && column && item.column.index === column.index) {
                            visibleIndex = index;
                            return false
                        }
                    }));
                    return visibleIndex
                },
                _isFormItem: function(parameters) {
                    var isDetailRow = "detail" === parameters.rowType || "detailAdaptive" === parameters.rowType;
                    var isPopupEditing = "data" === parameters.rowType && this._editingController.isPopupEditMode();
                    return (isDetailRow || isPopupEditing) && parameters.item
                },
                _updateCell: function($cell, parameters) {
                    if (this._isFormItem(parameters)) {
                        this._formItemPrepared(parameters, $cell)
                    } else {
                        this.callBase($cell, parameters)
                    }
                }
            }
        }
    }
};


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.editing_row_based.js":
/*!************************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.editing_row_based.js ***!
  \************************************************************************************/
/*! exports provided: editingRowBasedModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "editingRowBasedModule", function() { return editingRowBasedModule; });
/* harmony import */ var _ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ui.grid_core.editing_constants */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.editing_constants.js");
/**
 * DevExtreme (esm/ui/grid_core/ui.grid_core.editing_row_based.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */

var EDIT_ROW = "dx-edit-row";
var editingRowBasedModule = {
    extenders: {
        controllers: {
            editing: {
                isRowEditMode: function() {
                    return this.getEditMode() === _ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_0__["EDIT_MODE_ROW"]
                },
                _afterCancelEditData: function(rowIndex) {
                    var dataController = this._dataController;
                    if (this.isRowBasedEditMode() && rowIndex >= 0) {
                        dataController.updateItems({
                            changeType: "update",
                            rowIndices: [rowIndex, rowIndex + 1]
                        })
                    } else {
                        this.callBase.apply(this, arguments)
                    }
                },
                _isDefaultButtonVisible: function(button, options) {
                    var isRowMode = this.isRowBasedEditMode();
                    var isEditRow = options.row && options.row.rowIndex === this._getVisibleEditRowIndex();
                    if (isRowMode) {
                        switch (button.name) {
                            case "edit":
                                return !isEditRow && this.allowUpdating(options);
                            case "delete":
                                return this.callBase.apply(this, arguments) && !isEditRow;
                            case "save":
                            case "cancel":
                                return isEditRow;
                            default:
                                return this.callBase.apply(this, arguments)
                        }
                    }
                    return this.callBase.apply(this, arguments)
                },
                isEditRow: function(rowIndex) {
                    return this.isRowBasedEditMode() && this._isEditRowByIndex(rowIndex)
                },
                _cancelSaving: function() {
                    if (this.isRowBasedEditMode()) {
                        if (!this.hasChanges()) {
                            this._cancelEditDataCore()
                        }
                    }
                    this.callBase.apply(this, arguments)
                },
                _refreshCore: function(params) {
                    var {
                        allowCancelEditing: allowCancelEditing
                    } = null !== params && void 0 !== params ? params : {};
                    if (this.isRowBasedEditMode()) {
                        var hasUpdateChanges = this.getChanges().filter(it => "update" === it.type).length > 0;
                        this.init();
                        allowCancelEditing && hasUpdateChanges && this._cancelEditDataCore()
                    }
                    this.callBase.apply(this, arguments)
                },
                _isEditColumnVisible: function() {
                    var result = this.callBase.apply(this, arguments);
                    var editingOptions = this.option("editing");
                    var isRowEditMode = this.isRowEditMode();
                    var isVisibleInRowEditMode = editingOptions.allowUpdating || editingOptions.allowAdding;
                    return result || isRowEditMode && isVisibleInRowEditMode
                },
                _focusEditorIfNeed: function() {
                    var editMode = this.getEditMode();
                    if (this._needFocusEditor) {
                        if (-1 !== _ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_0__["MODES_WITH_DELAYED_FOCUS"].indexOf(editMode)) {
                            var $editingCell = this.getFocusedCellInRow(this._getVisibleEditRowIndex());
                            this._delayedInputFocus($editingCell, () => {
                                $editingCell && this.component.focus($editingCell)
                            })
                        }
                        this._needFocusEditor = false
                    }
                }
            },
            data: {
                _getChangedColumnIndices: function(oldItem, newItem, rowIndex, isLiveUpdate) {
                    var editingController = this.getController("editing");
                    if (editingController.isRowBasedEditMode() && oldItem.isEditing !== newItem.isEditing) {
                        return
                    }
                    return this.callBase.apply(this, arguments)
                }
            }
        },
        views: {
            rowsView: {
                _createRow: function(row) {
                    var $row = this.callBase.apply(this, arguments);
                    if (row) {
                        var editingController = this._editingController;
                        var isEditRow = editingController.isEditRow(row.rowIndex);
                        if (isEditRow) {
                            $row.addClass(EDIT_ROW);
                            $row.removeClass(_ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_0__["ROW_SELECTED_CLASS"]);
                            if ("detail" === row.rowType) {
                                $row.addClass(this.addWidgetPrefix(_ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_0__["EDIT_FORM_CLASS"]))
                            }
                        }
                    }
                    return $row
                },
                _update: function(change) {
                    this.callBase(change);
                    if ("updateSelection" === change.changeType) {
                        this.getTableElements().children("tbody").children("." + EDIT_ROW).removeClass(_ui_grid_core_editing_constants__WEBPACK_IMPORTED_MODULE_0__["ROW_SELECTED_CLASS"])
                    }
                }
            }
        }
    }
};


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.editor_factory.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.editor_factory.js ***!
  \*********************************************************************************/
/*! exports provided: editorFactoryModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "editorFactoryModule", function() { return editorFactoryModule; });
/* harmony import */ var _core_utils_size__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/utils/size */ "./node_modules/devextreme/esm/core/utils/size.js");
/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/renderer */ "./node_modules/devextreme/esm/core/renderer.js");
/* harmony import */ var _core_dom_adapter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/dom_adapter */ "./node_modules/devextreme/esm/core/dom_adapter.js");
/* harmony import */ var _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../events/core/events_engine */ "./node_modules/devextreme/esm/events/core/events_engine.js");
/* harmony import */ var _ui_grid_core_modules__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ui.grid_core.modules */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.modules.js");
/* harmony import */ var _events_click__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../events/click */ "./node_modules/devextreme/esm/events/click.js");
/* harmony import */ var _events_pointer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../events/pointer */ "./node_modules/devextreme/esm/events/pointer.js");
/* harmony import */ var _animation_position__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../animation/position */ "./node_modules/devextreme/esm/animation/position.js");
/* harmony import */ var _events_utils_index__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../events/utils/index */ "./node_modules/devextreme/esm/events/utils/index.js");
/* harmony import */ var _core_utils_browser__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../core/utils/browser */ "./node_modules/devextreme/esm/core/utils/browser.js");
/* harmony import */ var _core_utils_extend__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../core/utils/extend */ "./node_modules/devextreme/esm/core/utils/extend.js");
/* harmony import */ var _core_utils_position__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../core/utils/position */ "./node_modules/devextreme/esm/core/utils/position.js");
/* harmony import */ var _shared_ui_editor_factory_mixin__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../shared/ui.editor_factory_mixin */ "./node_modules/devextreme/esm/ui/shared/ui.editor_factory_mixin.js");
/* harmony import */ var _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./ui.grid_core.utils */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.utils.js");
/**
 * DevExtreme (esm/ui/grid_core/ui.grid_core.editor_factory.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */














var EDITOR_INLINE_BLOCK = "dx-editor-inline-block";
var CELL_FOCUS_DISABLED_CLASS = "dx-cell-focus-disabled";
var FOCUS_OVERLAY_CLASS = "focus-overlay";
var CONTENT_CLASS = "content";
var FOCUSED_ELEMENT_CLASS = "dx-focused";
var ROW_CLASS = "dx-row";
var MODULE_NAMESPACE = "dxDataGridEditorFactory";
var UPDATE_FOCUS_EVENTS = Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_8__["addNamespace"])([_events_pointer__WEBPACK_IMPORTED_MODULE_6__["default"].down, "focusin", _events_click__WEBPACK_IMPORTED_MODULE_5__["name"]].join(" "), MODULE_NAMESPACE);
var DX_HIDDEN = "dx-hidden";
var EditorFactory = _ui_grid_core_modules__WEBPACK_IMPORTED_MODULE_4__["default"].ViewController.inherit({
    _getFocusedElement: function($dataGridElement) {
        var rowSelector = this.option("focusedRowEnabled") ? "tr[tabindex]:focus" : "tr[tabindex]:not(.dx-data-row):focus";
        var focusedElementSelector = "td[tabindex]:focus, ".concat(rowSelector, ", input:focus, textarea:focus, .dx-lookup-field:focus, .dx-checkbox:focus, .dx-switch:focus, .dx-dropdownbutton .dx-buttongroup:focus");
        return $dataGridElement.find(focusedElementSelector)
    },
    _getFocusCellSelector: function() {
        return ".dx-row > td"
    },
    _updateFocusCore: function() {
        var $focus = this._$focusedElement;
        var $dataGridElement = this.component && this.component.$element();
        var $focusCell;
        var hideBorders;
        if ($dataGridElement) {
            $focus = this._getFocusedElement($dataGridElement);
            if ($focus.length) {
                if (!$focus.hasClass(CELL_FOCUS_DISABLED_CLASS) && !$focus.hasClass(ROW_CLASS)) {
                    $focusCell = $focus.closest(this._getFocusCellSelector() + ", ." + CELL_FOCUS_DISABLED_CLASS);
                    hideBorders = $focusCell.get(0) !== $focus.get(0) && $focusCell.hasClass(EDITOR_INLINE_BLOCK);
                    $focus = $focusCell
                }
                if ($focus.length && !$focus.hasClass(CELL_FOCUS_DISABLED_CLASS)) {
                    this.focus($focus, hideBorders);
                    return
                }
            }
        }
        this.loseFocus()
    },
    _updateFocus: function(e) {
        var that = this;
        var isFocusOverlay = e && e.event && Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(e.event.target).hasClass(that.addWidgetPrefix(FOCUS_OVERLAY_CLASS));
        that._isFocusOverlay = that._isFocusOverlay || isFocusOverlay;
        clearTimeout(that._updateFocusTimeoutID);
        that._updateFocusTimeoutID = setTimeout((function() {
            delete that._updateFocusTimeoutID;
            if (!that._isFocusOverlay) {
                that._updateFocusCore()
            }
            that._isFocusOverlay = false
        }))
    },
    _updateFocusOverlaySize: function($element, position) {
        $element.hide();
        var location = _animation_position__WEBPACK_IMPORTED_MODULE_7__["default"].calculate($element, Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_10__["extend"])({
            collision: "fit"
        }, position));
        if (location.h.oversize > 0) {
            Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["setOuterWidth"])($element, Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getOuterWidth"])($element) - location.h.oversize)
        }
        if (location.v.oversize > 0) {
            Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["setOuterHeight"])($element, Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getOuterHeight"])($element) - location.v.oversize)
        }
        $element.show()
    },
    callbackNames: function() {
        return ["focused"]
    },
    focus: function($element, hideBorder) {
        var that = this;
        if (void 0 === $element) {
            return that._$focusedElement
        } else if ($element) {
            if (!$element.is(that._$focusedElement)) {
                that._$focusedElement && that._$focusedElement.removeClass(FOCUSED_ELEMENT_CLASS)
            }
            that._$focusedElement = $element;
            clearTimeout(that._focusTimeoutID);
            that._focusTimeoutID = setTimeout((function() {
                delete that._focusTimeoutID;
                that.renderFocusOverlay($element, hideBorder);
                $element.addClass(FOCUSED_ELEMENT_CLASS);
                that.focused.fire($element)
            }))
        }
    },
    refocus: function() {
        var $focus = this.focus();
        this.focus($focus)
    },
    renderFocusOverlay: function($element, hideBorder) {
        if (!_ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_13__["default"].isElementInCurrentGrid(this, $element)) {
            return
        }
        if (!this._$focusOverlay) {
            this._$focusOverlay = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])("<div>").addClass(this.addWidgetPrefix(FOCUS_OVERLAY_CLASS))
        }
        if (hideBorder) {
            this._$focusOverlay.addClass(DX_HIDDEN)
        } else if ($element.length) {
            var align = _core_utils_browser__WEBPACK_IMPORTED_MODULE_9__["default"].mozilla ? "right bottom" : "left top";
            var $content = $element.closest("." + this.addWidgetPrefix(CONTENT_CLASS));
            var elemCoord = Object(_core_utils_position__WEBPACK_IMPORTED_MODULE_11__["getBoundingRect"])($element.get(0));
            this._$focusOverlay.removeClass(DX_HIDDEN).appendTo($content);
            Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["setOuterHeight"])(this._$focusOverlay, elemCoord.bottom - elemCoord.top + 1);
            Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["setOuterWidth"])(this._$focusOverlay, elemCoord.right - elemCoord.left + 1);
            var focusOverlayPosition = {
                precise: true,
                my: align,
                at: align,
                of: $element,
                boundary: $content.length && $content
            };
            this._updateFocusOverlaySize(this._$focusOverlay, focusOverlayPosition);
            _animation_position__WEBPACK_IMPORTED_MODULE_7__["default"].setup(this._$focusOverlay, focusOverlayPosition);
            this._$focusOverlay.css("visibility", "visible")
        }
    },
    resize: function() {
        var $focusedElement = this._$focusedElement;
        if ($focusedElement) {
            this.focus($focusedElement)
        }
    },
    loseFocus: function() {
        this._$focusedElement && this._$focusedElement.removeClass(FOCUSED_ELEMENT_CLASS);
        this._$focusedElement = null;
        this._$focusOverlay && this._$focusOverlay.addClass(DX_HIDDEN)
    },
    init: function() {
        this.createAction("onEditorPreparing", {
            excludeValidators: ["disabled", "readOnly"],
            category: "rendering"
        });
        this.createAction("onEditorPrepared", {
            excludeValidators: ["disabled", "readOnly"],
            category: "rendering"
        });
        this._updateFocusHandler = this._updateFocusHandler || this.createAction(this._updateFocus.bind(this));
        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__["default"].on(_core_dom_adapter__WEBPACK_IMPORTED_MODULE_2__["default"].getDocument(), UPDATE_FOCUS_EVENTS, this._updateFocusHandler);
        this._attachContainerEventHandlers()
    },
    _attachContainerEventHandlers: function() {
        var that = this;
        var $container = that.component && that.component.$element();
        if ($container) {
            _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__["default"].on($container, Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_8__["addNamespace"])("keydown", MODULE_NAMESPACE), (function(e) {
                if ("tab" === Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_8__["normalizeKeyName"])(e)) {
                    that._updateFocusHandler(e)
                }
            }))
        }
    },
    dispose: function() {
        clearTimeout(this._focusTimeoutID);
        clearTimeout(this._updateFocusTimeoutID);
        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__["default"].off(_core_dom_adapter__WEBPACK_IMPORTED_MODULE_2__["default"].getDocument(), UPDATE_FOCUS_EVENTS, this._updateFocusHandler)
    }
}).include(_shared_ui_editor_factory_mixin__WEBPACK_IMPORTED_MODULE_12__["default"]);
var editorFactoryModule = {
    defaultOptions: function() {
        return {}
    },
    controllers: {
        editorFactory: EditorFactory
    }
};


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.error_handling.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.error_handling.js ***!
  \*********************************************************************************/
/*! exports provided: errorHandlingModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "errorHandlingModule", function() { return errorHandlingModule; });
/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/renderer */ "./node_modules/devextreme/esm/core/renderer.js");
/* harmony import */ var _events_core_events_engine__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../events/core/events_engine */ "./node_modules/devextreme/esm/events/core/events_engine.js");
/* harmony import */ var _events_click__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../events/click */ "./node_modules/devextreme/esm/events/click.js");
/* harmony import */ var _core_utils_iterator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/utils/iterator */ "./node_modules/devextreme/esm/core/utils/iterator.js");
/* harmony import */ var _ui_grid_core_modules__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ui.grid_core.modules */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.modules.js");
/**
 * DevExtreme (esm/ui/grid_core/ui.grid_core.error_handling.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */





var ERROR_ROW_CLASS = "dx-error-row";
var ERROR_MESSAGE_CLASS = "dx-error-message";
var ERROR_CLOSEBUTTON_CLASS = "dx-closebutton";
var ACTION_CLASS = "action";
var ErrorHandlingController = _ui_grid_core_modules__WEBPACK_IMPORTED_MODULE_4__["default"].ViewController.inherit({
    init: function() {
        this._columnHeadersView = this.getView("columnHeadersView");
        this._rowsView = this.getView("rowsView")
    },
    _createErrorRow: function(error, $tableElements) {
        var that = this;
        var $errorRow;
        var $closeButton;
        var $errorMessage = this._renderErrorMessage(error);
        if ($tableElements) {
            $errorRow = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])("<tr>").addClass(ERROR_ROW_CLASS);
            $closeButton = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>").addClass(ERROR_CLOSEBUTTON_CLASS).addClass(that.addWidgetPrefix(ACTION_CLASS));
            _events_core_events_engine__WEBPACK_IMPORTED_MODULE_1__["default"].on($closeButton, _events_click__WEBPACK_IMPORTED_MODULE_2__["name"], that.createAction((function(args) {
                var e = args.event;
                var $errorRow;
                var errorRowIndex = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(e.currentTarget).closest("." + ERROR_ROW_CLASS).index();
                e.stopPropagation();
                Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_3__["each"])($tableElements, (function(_, tableElement) {
                    $errorRow = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(tableElement).children("tbody").children("tr").eq(errorRowIndex);
                    that.removeErrorRow($errorRow)
                }));
                that.getController("resizing") && that.getController("resizing").fireContentReadyAction()
            })));
            Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])("<td>").attr({
                colSpan: that.getController("columns").getVisibleColumns().length,
                role: "presentation"
            }).prepend($closeButton).append($errorMessage).appendTo($errorRow);
            return $errorRow
        }
        return $errorMessage
    },
    _renderErrorMessage: function(error) {
        var message = error.url ? error.message.replace(error.url, "") : error.message || error;
        var $message = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>").addClass(ERROR_MESSAGE_CLASS).text(message);
        if (error.url) {
            Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])("<a>").attr("href", error.url).text(error.url).appendTo($message)
        }
        return $message
    },
    renderErrorRow: function(error, rowIndex, $popupContent) {
        var that = this;
        var $errorMessageElement;
        var $firstErrorRow;
        if ($popupContent) {
            $popupContent.find("." + ERROR_MESSAGE_CLASS).remove();
            $errorMessageElement = that._createErrorRow(error);
            $popupContent.prepend($errorMessageElement);
            return $errorMessageElement
        }
        var viewElement = rowIndex >= 0 || !that._columnHeadersView.isVisible() ? that._rowsView : that._columnHeadersView;
        var $tableElements = viewElement.getTableElements();
        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_3__["each"])($tableElements, (function(_, tableElement) {
            $errorMessageElement = that._createErrorRow(error, $tableElements);
            $firstErrorRow = $firstErrorRow || $errorMessageElement;
            if (rowIndex >= 0) {
                var $row = viewElement._getRowElements(Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(tableElement)).eq(rowIndex);
                that.removeErrorRow($row.next());
                $errorMessageElement.insertAfter($row)
            } else {
                var $tbody = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(tableElement).children("tbody");
                var rowElements = $tbody.children("tr");
                if (that._columnHeadersView.isVisible()) {
                    that.removeErrorRow(rowElements.last());
                    Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(tableElement).append($errorMessageElement)
                } else {
                    that.removeErrorRow(rowElements.first());
                    $tbody.first().prepend($errorMessageElement)
                }
            }
        }));
        var resizingController = that.getController("resizing");
        resizingController && resizingController.fireContentReadyAction();
        return $firstErrorRow
    },
    removeErrorRow: function($row) {
        if (!$row) {
            var $columnHeaders = this._columnHeadersView && this._columnHeadersView.element();
            $row = $columnHeaders && $columnHeaders.find("." + ERROR_ROW_CLASS);
            if (!$row || !$row.length) {
                var $rowsViewElement = this._rowsView.element();
                $row = $rowsViewElement && $rowsViewElement.find("." + ERROR_ROW_CLASS)
            }
        }
        $row && $row.hasClass(ERROR_ROW_CLASS) && $row.remove()
    },
    optionChanged: function(args) {
        switch (args.name) {
            case "errorRowEnabled":
                args.handled = true;
                break;
            default:
                this.callBase(args)
        }
    }
});
var errorHandlingModule = {
    defaultOptions: function() {
        return {
            errorRowEnabled: true
        }
    },
    controllers: {
        errorHandling: ErrorHandlingController
    },
    extenders: {
        controllers: {
            data: {
                init: function() {
                    var that = this;
                    var errorHandlingController = that.getController("errorHandling");
                    that.callBase();
                    that.dataErrorOccurred.add((function(error, $popupContent) {
                        if (that.option("errorRowEnabled")) {
                            errorHandlingController.renderErrorRow(error, void 0, $popupContent)
                        }
                    }));
                    that.changed.add((function(e) {
                        if (e && "loadError" === e.changeType) {
                            return
                        }
                        var errorHandlingController = that.getController("errorHandling");
                        var editingController = that.getController("editing");
                        if (editingController && !editingController.hasChanges()) {
                            errorHandlingController && errorHandlingController.removeErrorRow()
                        }
                    }))
                }
            }
        }
    }
};


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.export_mixin.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.export_mixin.js ***!
  \*******************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _core_utils_extend__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/utils/extend */ "./node_modules/devextreme/esm/core/utils/extend.js");
/**
 * DevExtreme (esm/ui/grid_core/ui.grid_core.export_mixin.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */

/* harmony default export */ __webpack_exports__["default"] = ({
    _getEmptyCell: function() {
        return {
            text: "",
            value: void 0,
            colspan: 1,
            rowspan: 1
        }
    },
    _defaultSetter: function(value) {
        return !value ? 1 : value
    },
    _cloneItem: function(item) {
        return Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, item, this._getEmptyCell())
    },
    _prepareItems: function(items) {
        var that = this;
        var resultItems = [];
        var cols = (items[0] || []).reduce((sum, item) => sum + that._defaultSetter(item.colspan), 0);
        var getItem = function(items) {
            var rowIndex = 0;
            var cellIndex = 0;
            return function() {
                var row = items[rowIndex] || [];
                var item = row[cellIndex++];
                if (cellIndex >= row.length) {
                    rowIndex++;
                    cellIndex = 0
                }
                if (item) {
                    item.colspan = that._defaultSetter(item.colspan);
                    item.rowspan = that._defaultSetter(item.rowspan)
                }
                return item
            }
        }(items);

        function addItem(rowIndex, cellIndex, item) {
            var row = resultItems[rowIndex] = resultItems[rowIndex] || [];
            row[cellIndex] = item;
            if (item.colspan > 1 || item.rowspan > 1) {
                var clone = that._cloneItem(item);
                for (var c = 1; c < item.colspan; c++) {
                    addItem(rowIndex, cellIndex + c, clone)
                }
                for (var r = 1; r < item.rowspan; r++) {
                    for (var _c = 0; _c < item.colspan; _c++) {
                        addItem(rowIndex + r, cellIndex + _c, clone)
                    }
                }
            }
        }
        var item = getItem();
        var rowIndex = 0;
        while (item) {
            for (var cellIndex = 0; cellIndex < cols; cellIndex++) {
                if (!item) {
                    break
                }
                if (resultItems[rowIndex] && resultItems[rowIndex][cellIndex]) {
                    continue
                }
                addItem(rowIndex, cellIndex, item);
                cellIndex += item.colspan - 1;
                item = getItem()
            }
            rowIndex++
        }
        return resultItems
    }
});


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.filter_builder.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.filter_builder.js ***!
  \*********************************************************************************/
/*! exports provided: filterBuilderModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "filterBuilderModule", function() { return filterBuilderModule; });
/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/renderer */ "./node_modules/devextreme/esm/core/renderer.js");
/* harmony import */ var _ui_grid_core_modules__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ui.grid_core.modules */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.modules.js");
/* harmony import */ var _core_utils_extend__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/utils/extend */ "./node_modules/devextreme/esm/core/utils/extend.js");
/* harmony import */ var _filter_builder__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./../filter_builder */ "./node_modules/devextreme/esm/ui/filter_builder.js");
/* harmony import */ var _localization_message__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../localization/message */ "./node_modules/devextreme/esm/localization/message.js");
/* harmony import */ var _scroll_view__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./../scroll_view */ "./node_modules/devextreme/esm/ui/scroll_view.js");
/* harmony import */ var _popup__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./../popup */ "./node_modules/devextreme/esm/ui/popup.js");
/* harmony import */ var _shared_accessibility__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../shared/accessibility */ "./node_modules/devextreme/esm/ui/shared/accessibility.js");
/**
 * DevExtreme (esm/ui/grid_core/ui.grid_core.filter_builder.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */








var FilterBuilderView = _ui_grid_core_modules__WEBPACK_IMPORTED_MODULE_1__["default"].View.inherit({
    _renderCore: function() {
        this._updatePopupOptions()
    },
    _updatePopupOptions: function() {
        if (this.option("filterBuilderPopup.visible")) {
            this._initPopup()
        } else if (this._filterBuilderPopup) {
            this._filterBuilderPopup.hide()
        }
    },
    _disposePopup: function() {
        if (this._filterBuilderPopup) {
            this._filterBuilderPopup.dispose();
            this._filterBuilderPopup = void 0
        }
        if (this._filterBuilder) {
            this._filterBuilder.dispose();
            this._filterBuilder = void 0
        }
    },
    _initPopup: function() {
        var that = this;
        that._disposePopup();
        that._filterBuilderPopup = that._createComponent(that.element(), _popup__WEBPACK_IMPORTED_MODULE_6__["default"], Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_2__["extend"])({
            title: _localization_message__WEBPACK_IMPORTED_MODULE_4__["default"].format("dxDataGrid-filterBuilderPopupTitle"),
            contentTemplate: function($contentElement) {
                return that._getPopupContentTemplate($contentElement)
            },
            onOptionChanged: function(args) {
                if ("visible" === args.name) {
                    that.option("filterBuilderPopup.visible", args.value)
                }
            },
            toolbarItems: that._getPopupToolbarItems()
        }, that.option("filterBuilderPopup"), {
            onHidden: function(e) {
                Object(_shared_accessibility__WEBPACK_IMPORTED_MODULE_7__["restoreFocus"])(that);
                that._disposePopup()
            }
        }))
    },
    _getPopupContentTemplate: function(contentElement) {
        var $contentElement = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(contentElement);
        var $filterBuilderContainer = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>").appendTo(Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(contentElement));
        this._filterBuilder = this._createComponent($filterBuilderContainer, _filter_builder__WEBPACK_IMPORTED_MODULE_3__["default"], Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_2__["extend"])({
            value: this.option("filterValue"),
            fields: this.getController("columns").getFilteringColumns()
        }, this.option("filterBuilder"), {
            customOperations: this.getController("filterSync").getCustomFilterOperations()
        }));
        this._createComponent($contentElement, _scroll_view__WEBPACK_IMPORTED_MODULE_5__["default"], {
            direction: "both"
        })
    },
    _getPopupToolbarItems: function() {
        var that = this;
        return [{
            toolbar: "bottom",
            location: "after",
            widget: "dxButton",
            options: {
                text: _localization_message__WEBPACK_IMPORTED_MODULE_4__["default"].format("OK"),
                onClick: function(e) {
                    var filter = that._filterBuilder.option("value");
                    that.option("filterValue", filter);
                    that._filterBuilderPopup.hide()
                }
            }
        }, {
            toolbar: "bottom",
            location: "after",
            widget: "dxButton",
            options: {
                text: _localization_message__WEBPACK_IMPORTED_MODULE_4__["default"].format("Cancel"),
                onClick: function(e) {
                    that._filterBuilderPopup.hide()
                }
            }
        }]
    },
    optionChanged: function(args) {
        switch (args.name) {
            case "filterBuilder":
            case "filterBuilderPopup":
                this._invalidate();
                args.handled = true;
                break;
            default:
                this.callBase(args)
        }
    }
});
var filterBuilderModule = {
    defaultOptions: function() {
        return {
            filterBuilder: {
                groupOperationDescriptions: {
                    and: _localization_message__WEBPACK_IMPORTED_MODULE_4__["default"].format("dxFilterBuilder-and"),
                    or: _localization_message__WEBPACK_IMPORTED_MODULE_4__["default"].format("dxFilterBuilder-or"),
                    notAnd: _localization_message__WEBPACK_IMPORTED_MODULE_4__["default"].format("dxFilterBuilder-notAnd"),
                    notOr: _localization_message__WEBPACK_IMPORTED_MODULE_4__["default"].format("dxFilterBuilder-notOr")
                },
                filterOperationDescriptions: {
                    between: _localization_message__WEBPACK_IMPORTED_MODULE_4__["default"].format("dxFilterBuilder-filterOperationBetween"),
                    equal: _localization_message__WEBPACK_IMPORTED_MODULE_4__["default"].format("dxFilterBuilder-filterOperationEquals"),
                    notEqual: _localization_message__WEBPACK_IMPORTED_MODULE_4__["default"].format("dxFilterBuilder-filterOperationNotEquals"),
                    lessThan: _localization_message__WEBPACK_IMPORTED_MODULE_4__["default"].format("dxFilterBuilder-filterOperationLess"),
                    lessThanOrEqual: _localization_message__WEBPACK_IMPORTED_MODULE_4__["default"].format("dxFilterBuilder-filterOperationLessOrEquals"),
                    greaterThan: _localization_message__WEBPACK_IMPORTED_MODULE_4__["default"].format("dxFilterBuilder-filterOperationGreater"),
                    greaterThanOrEqual: _localization_message__WEBPACK_IMPORTED_MODULE_4__["default"].format("dxFilterBuilder-filterOperationGreaterOrEquals"),
                    startsWith: _localization_message__WEBPACK_IMPORTED_MODULE_4__["default"].format("dxFilterBuilder-filterOperationStartsWith"),
                    contains: _localization_message__WEBPACK_IMPORTED_MODULE_4__["default"].format("dxFilterBuilder-filterOperationContains"),
                    notContains: _localization_message__WEBPACK_IMPORTED_MODULE_4__["default"].format("dxFilterBuilder-filterOperationNotContains"),
                    endsWith: _localization_message__WEBPACK_IMPORTED_MODULE_4__["default"].format("dxFilterBuilder-filterOperationEndsWith"),
                    isBlank: _localization_message__WEBPACK_IMPORTED_MODULE_4__["default"].format("dxFilterBuilder-filterOperationIsBlank"),
                    isNotBlank: _localization_message__WEBPACK_IMPORTED_MODULE_4__["default"].format("dxFilterBuilder-filterOperationIsNotBlank")
                }
            },
            filterBuilderPopup: {}
        }
    },
    views: {
        filterBuilderView: FilterBuilderView
    }
};


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.filter_custom_operations.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.filter_custom_operations.js ***!
  \*******************************************************************************************/
/*! exports provided: anyOf, noneOf */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "anyOf", function() { return anyOf; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "noneOf", function() { return noneOf; });
/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/renderer */ "./node_modules/devextreme/esm/core/renderer.js");
/* harmony import */ var _localization_message__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../localization/message */ "./node_modules/devextreme/esm/localization/message.js");
/* harmony import */ var _core_utils_extend__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/utils/extend */ "./node_modules/devextreme/esm/core/utils/extend.js");
/* harmony import */ var _data_data_source_data_source__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../data/data_source/data_source */ "./node_modules/devextreme/esm/data/data_source/data_source.js");
/* harmony import */ var _core_utils_deferred__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/utils/deferred */ "./node_modules/devextreme/esm/core/utils/deferred.js");
/* harmony import */ var _filter_builder_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../filter_builder/utils */ "./node_modules/devextreme/esm/ui/filter_builder/utils.js");
/* harmony import */ var _widget_ui_errors__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../widget/ui.errors */ "./node_modules/devextreme/esm/ui/widget/ui.errors.js");
/**
 * DevExtreme (esm/ui/grid_core/ui.grid_core.filter_custom_operations.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */








function baseOperation(grid) {
    var getFullText = function(itemText, parentText) {
        return parentText ? parentText + "/" + itemText : itemText
    };
    var headerFilterController = grid && grid.getController("headerFilter");
    return {
        dataTypes: ["string", "date", "datetime", "number", "boolean", "object"],
        calculateFilterExpression: function(filterValue, field, fields) {
            var result = [];
            var lastIndex = filterValue.length - 1;
            filterValue && filterValue.forEach((function(value, index) {
                if (Object(_filter_builder_utils__WEBPACK_IMPORTED_MODULE_5__["isCondition"])(value) || Object(_filter_builder_utils__WEBPACK_IMPORTED_MODULE_5__["isGroup"])(value)) {
                    var filterExpression = Object(_filter_builder_utils__WEBPACK_IMPORTED_MODULE_5__["getFilterExpression"])(value, fields, [], "headerFilter");
                    result.push(filterExpression)
                } else {
                    result.push(Object(_filter_builder_utils__WEBPACK_IMPORTED_MODULE_5__["getFilterExpression"])([field.dataField, "=", value], fields, [], "headerFilter"))
                }
                index !== lastIndex && result.push("or")
            }));
            if (1 === result.length) {
                result = result[0]
            }
            return result
        },
        editorTemplate: function(conditionInfo, container) {
            var div = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>").addClass("dx-filterbuilder-item-value-text").appendTo(container);
            var column = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_2__["extend"])(true, {}, grid.columnOption(conditionInfo.field.dataField));
            Object(_filter_builder_utils__WEBPACK_IMPORTED_MODULE_5__["renderValueText"])(div, conditionInfo.text && conditionInfo.text.split("|"));
            column.filterType = "include";
            column.filterValues = conditionInfo.value ? conditionInfo.value.slice() : [];
            headerFilterController.showHeaderFilterMenuBase({
                columnElement: div,
                column: column,
                apply: function() {
                    value = this.filterValues, void conditionInfo.setValue(value);
                    var value;
                    headerFilterController.hideHeaderFilterMenu();
                    conditionInfo.closeEditor()
                },
                onHidden: function() {
                    conditionInfo.closeEditor()
                },
                isFilterBuilder: true
            });
            return container
        },
        customizeText: function(fieldInfo, options) {
            options = options || {};
            var value = fieldInfo.value;
            var column = grid.columnOption(fieldInfo.field.dataField);
            var headerFilter = column && column.headerFilter;
            var lookup = column && column.lookup;
            var values = options.values || [value];
            if (headerFilter && headerFilter.dataSource || lookup && lookup.dataSource) {
                var result = new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_4__["Deferred"];
                var itemsDeferred = options.items || new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_4__["Deferred"];
                if (!options.items) {
                    column = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_2__["extend"])({}, column, {
                        filterType: "include",
                        filterValues: values
                    });
                    var dataSourceOptions = headerFilterController.getDataSource(column);
                    dataSourceOptions.paginate = false;
                    var dataSource = new _data_data_source_data_source__WEBPACK_IMPORTED_MODULE_3__["DataSource"](dataSourceOptions);
                    var key = dataSource.store().key();
                    if (key) {
                        var {
                            values: _values
                        } = options;
                        if (_values && _values.length > 1) {
                            var filter = _values.reduce((result, value) => {
                                if (result.length) {
                                    result.push("or")
                                }
                                result.push([key, "=", value]);
                                return result
                            }, []);
                            dataSource.filter(filter)
                        } else {
                            dataSource.filter([key, "=", fieldInfo.value])
                        }
                    } else if (fieldInfo.field.calculateDisplayValue) {
                        _widget_ui_errors__WEBPACK_IMPORTED_MODULE_6__["default"].log("W1017")
                    }
                    options.items = itemsDeferred;
                    dataSource.load().done(itemsDeferred.resolve)
                }
                itemsDeferred.done(items => {
                    var index = values.indexOf(fieldInfo.value);
                    result.resolve(function getSelectedItemsTexts(items, parentText) {
                        var result = [];
                        items.forEach((function(item) {
                            if (item.items) {
                                var selectedItemsTexts = getSelectedItemsTexts(item.items, getFullText(item.text, parentText));
                                result = result.concat(selectedItemsTexts)
                            }
                            item.selected && result.push(getFullText(item.text, parentText))
                        }));
                        return result
                    }(items)[index])
                });
                return result
            } else {
                var text = headerFilterController.getHeaderItemText(value, column, 0, grid.option("headerFilter"));
                return text
            }
        }
    }
}
function anyOf(grid) {
    return Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_2__["extend"])(baseOperation(grid), {
        name: "anyof",
        icon: "selectall",
        caption: _localization_message__WEBPACK_IMPORTED_MODULE_1__["default"].format("dxFilterBuilder-filterOperationAnyOf")
    })
}
function noneOf(grid) {
    var baseOp = baseOperation(grid);
    return Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_2__["extend"])({}, baseOp, {
        calculateFilterExpression: function(filterValue, field, fields) {
            var baseFilter = baseOp.calculateFilterExpression(filterValue, field, fields);
            if (!baseFilter || 0 === baseFilter.length) {
                return null
            }
            return "!" === baseFilter[0] ? baseFilter : ["!", baseFilter]
        },
        name: "noneof",
        icon: "unselectall",
        caption: _localization_message__WEBPACK_IMPORTED_MODULE_1__["default"].format("dxFilterBuilder-filterOperationNoneOf")
    })
}


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.filter_panel.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.filter_panel.js ***!
  \*******************************************************************************/
/*! exports provided: filterPanelModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "filterPanelModule", function() { return filterPanelModule; });
/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/renderer */ "./node_modules/devextreme/esm/core/renderer.js");
/* harmony import */ var _core_utils_type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/utils/type */ "./node_modules/devextreme/esm/core/utils/type.js");
/* harmony import */ var _ui_grid_core_modules__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ui.grid_core.modules */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.modules.js");
/* harmony import */ var _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ui.grid_core.utils */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.utils.js");
/* harmony import */ var _events_core_events_engine__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../events/core/events_engine */ "./node_modules/devextreme/esm/events/core/events_engine.js");
/* harmony import */ var _localization_message__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../localization/message */ "./node_modules/devextreme/esm/localization/message.js");
/* harmony import */ var _check_box__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../check_box */ "./node_modules/devextreme/esm/ui/check_box.js");
/* harmony import */ var _filter_builder_utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../filter_builder/utils */ "./node_modules/devextreme/esm/ui/filter_builder/utils.js");
/* harmony import */ var _core_utils_deferred__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../core/utils/deferred */ "./node_modules/devextreme/esm/core/utils/deferred.js");
/* harmony import */ var _core_utils_inflector__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../core/utils/inflector */ "./node_modules/devextreme/esm/core/utils/inflector.js");
/* harmony import */ var _ui_grid_core_accessibility__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./ui.grid_core.accessibility */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.accessibility.js");
/**
 * DevExtreme (esm/ui/grid_core/ui.grid_core.filter_panel.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */











var FILTER_PANEL_CLASS = "filter-panel";
var FILTER_PANEL_TEXT_CLASS = FILTER_PANEL_CLASS + "-text";
var FILTER_PANEL_CHECKBOX_CLASS = FILTER_PANEL_CLASS + "-checkbox";
var FILTER_PANEL_CLEAR_FILTER_CLASS = FILTER_PANEL_CLASS + "-clear-filter";
var FILTER_PANEL_LEFT_CONTAINER = FILTER_PANEL_CLASS + "-left";
var FILTER_PANEL_TARGET = "filterPanel";
var FilterPanelView = _ui_grid_core_modules__WEBPACK_IMPORTED_MODULE_2__["default"].View.inherit({
    isVisible: function() {
        return this.option("filterPanel.visible") && this.getController("data").dataSource()
    },
    init: function() {
        this.getController("data").dataSourceChanged.add(() => this.render())
    },
    _renderCore: function() {
        var $element = this.element();
        $element.empty().addClass(this.addWidgetPrefix(FILTER_PANEL_CLASS));
        var $leftContainer = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>").addClass(this.addWidgetPrefix(FILTER_PANEL_LEFT_CONTAINER)).appendTo($element);
        if (this.option("filterValue") || this._filterValueBuffer) {
            $leftContainer.append(this._getCheckElement()).append(this._getFilterElement()).append(this._getTextElement());
            $element.append(this._getRemoveButtonElement())
        } else {
            $leftContainer.append(this._getFilterElement()).append(this._getTextElement())
        }
    },
    _getCheckElement: function() {
        var that = this;
        var $element = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>").addClass(this.addWidgetPrefix(FILTER_PANEL_CHECKBOX_CLASS));
        that._createComponent($element, _check_box__WEBPACK_IMPORTED_MODULE_6__["default"], {
            value: that.option("filterPanel.filterEnabled"),
            onValueChanged: function(e) {
                that.option("filterPanel.filterEnabled", e.value)
            }
        });
        $element.attr("title", this.option("filterPanel.texts.filterEnabledHint"));
        return $element
    },
    _getFilterElement: function() {
        var that = this;
        var $element = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>").addClass("dx-icon-filter");
        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_4__["default"].on($element, "click", () => that._showFilterBuilder());
        Object(_ui_grid_core_accessibility__WEBPACK_IMPORTED_MODULE_10__["registerKeyboardAction"])("filterPanel", that, $element, void 0, () => that._showFilterBuilder());
        that._addTabIndexToElement($element);
        return $element
    },
    _getTextElement: function() {
        var that = this;
        var $textElement = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>").addClass(that.addWidgetPrefix(FILTER_PANEL_TEXT_CLASS));
        var filterText;
        var filterValue = that.option("filterValue");
        if (filterValue) {
            Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_8__["when"])(that.getFilterText(filterValue, that.getController("filterSync").getCustomFilterOperations())).done((function(filterText) {
                var customizeText = that.option("filterPanel.customizeText");
                if (customizeText) {
                    var customText = customizeText({
                        component: that.component,
                        filterValue: filterValue,
                        text: filterText
                    });
                    if ("string" === typeof customText) {
                        filterText = customText
                    }
                }
                $textElement.text(filterText)
            }))
        } else {
            filterText = that.option("filterPanel.texts.createFilter");
            $textElement.text(filterText)
        }
        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_4__["default"].on($textElement, "click", () => that._showFilterBuilder());
        Object(_ui_grid_core_accessibility__WEBPACK_IMPORTED_MODULE_10__["registerKeyboardAction"])("filterPanel", that, $textElement, void 0, () => that._showFilterBuilder());
        that._addTabIndexToElement($textElement);
        return $textElement
    },
    _showFilterBuilder: function() {
        this.option("filterBuilderPopup.visible", true)
    },
    _getRemoveButtonElement: function() {
        var that = this;
        var clearFilterValue = () => that.option("filterValue", null);
        var $element = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>").addClass(that.addWidgetPrefix(FILTER_PANEL_CLEAR_FILTER_CLASS)).text(that.option("filterPanel.texts.clearFilter"));
        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_4__["default"].on($element, "click", clearFilterValue);
        Object(_ui_grid_core_accessibility__WEBPACK_IMPORTED_MODULE_10__["registerKeyboardAction"])("filterPanel", this, $element, void 0, clearFilterValue);
        that._addTabIndexToElement($element);
        return $element
    },
    _addTabIndexToElement: function($element) {
        if (!this.option("useLegacyKeyboardNavigation")) {
            var tabindex = this.option("tabindex") || 0;
            $element.attr("tabindex", tabindex)
        }
    },
    optionChanged: function(args) {
        switch (args.name) {
            case "filterValue":
                this._invalidate();
                this.option("filterPanel.filterEnabled", true);
                args.handled = true;
                break;
            case "filterPanel":
                this._invalidate();
                args.handled = true;
                break;
            default:
                this.callBase(args)
        }
    },
    _getConditionText: function(fieldText, operationText, valueText) {
        var result = "[".concat(fieldText, "] ").concat(operationText);
        if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_1__["isDefined"])(valueText)) {
            result += valueText
        }
        return result
    },
    _getValueMaskedText: function(value) {
        return Array.isArray(value) ? "('".concat(value.join("', '"), "')") : " '".concat(value, "'")
    },
    _getValueText: function(field, customOperation, value) {
        var deferred = new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_8__["Deferred"];
        var hasCustomOperation = customOperation && customOperation.customizeText;
        if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_1__["isDefined"])(value) || hasCustomOperation) {
            if (!hasCustomOperation && field.lookup) {
                Object(_filter_builder_utils__WEBPACK_IMPORTED_MODULE_7__["getCurrentLookupValueText"])(field, value, data => {
                    deferred.resolve(this._getValueMaskedText(data))
                })
            } else {
                var displayValue = Array.isArray(value) ? value : _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_3__["default"].getDisplayValue(field, value);
                Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_8__["when"])(Object(_filter_builder_utils__WEBPACK_IMPORTED_MODULE_7__["getCurrentValueText"])(field, displayValue, customOperation, FILTER_PANEL_TARGET)).done(data => {
                    deferred.resolve(this._getValueMaskedText(data))
                })
            }
        } else {
            deferred.resolve("")
        }
        return deferred.promise()
    },
    getConditionText: function(filterValue, options) {
        var that = this;
        var operation = filterValue[1];
        var deferred = new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_8__["Deferred"];
        var customOperation = Object(_filter_builder_utils__WEBPACK_IMPORTED_MODULE_7__["getCustomOperation"])(options.customOperations, operation);
        var operationText;
        var field = Object(_filter_builder_utils__WEBPACK_IMPORTED_MODULE_7__["getField"])(filterValue[0], options.columns);
        var fieldText = field.caption || "";
        var value = filterValue[2];
        if (customOperation) {
            operationText = customOperation.caption || Object(_core_utils_inflector__WEBPACK_IMPORTED_MODULE_9__["captionize"])(customOperation.name)
        } else if (null === value) {
            operationText = Object(_filter_builder_utils__WEBPACK_IMPORTED_MODULE_7__["getCaptionByOperation"])("=" === operation ? "isblank" : "isnotblank", options.filterOperationDescriptions)
        } else {
            operationText = Object(_filter_builder_utils__WEBPACK_IMPORTED_MODULE_7__["getCaptionByOperation"])(operation, options.filterOperationDescriptions)
        }
        this._getValueText(field, customOperation, value).done(valueText => {
            deferred.resolve(that._getConditionText(fieldText, operationText, valueText))
        });
        return deferred
    },
    getGroupText: function(filterValue, options, isInnerGroup) {
        var that = this;
        var result = new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_8__["Deferred"];
        var textParts = [];
        var groupValue = Object(_filter_builder_utils__WEBPACK_IMPORTED_MODULE_7__["getGroupValue"])(filterValue);
        filterValue.forEach(item => {
            if (Object(_filter_builder_utils__WEBPACK_IMPORTED_MODULE_7__["isCondition"])(item)) {
                textParts.push(that.getConditionText(item, options))
            } else if (Object(_filter_builder_utils__WEBPACK_IMPORTED_MODULE_7__["isGroup"])(item)) {
                textParts.push(that.getGroupText(item, options, true))
            }
        });
        _core_utils_deferred__WEBPACK_IMPORTED_MODULE_8__["when"].apply(this, textParts).done((function() {
            var text;
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key]
            }
            if ("!" === groupValue[0]) {
                var groupText = options.groupOperationDescriptions["not" + groupValue.substring(1, 2).toUpperCase() + groupValue.substring(2)].split(" ");
                text = "".concat(groupText[0], " ").concat(args[0])
            } else {
                text = args.join(" ".concat(options.groupOperationDescriptions[groupValue], " "))
            }
            if (isInnerGroup) {
                text = "(".concat(text, ")")
            }
            result.resolve(text)
        }));
        return result
    },
    getFilterText: function(filterValue, customOperations) {
        var options = {
            customOperations: customOperations,
            columns: this.getController("columns").getFilteringColumns(),
            filterOperationDescriptions: this.option("filterBuilder.filterOperationDescriptions"),
            groupOperationDescriptions: this.option("filterBuilder.groupOperationDescriptions")
        };
        return Object(_filter_builder_utils__WEBPACK_IMPORTED_MODULE_7__["isCondition"])(filterValue) ? this.getConditionText(filterValue, options) : this.getGroupText(filterValue, options)
    }
});
var filterPanelModule = {
    defaultOptions: function() {
        return {
            filterPanel: {
                visible: false,
                filterEnabled: true,
                texts: {
                    createFilter: _localization_message__WEBPACK_IMPORTED_MODULE_5__["default"].format("dxDataGrid-filterPanelCreateFilter"),
                    clearFilter: _localization_message__WEBPACK_IMPORTED_MODULE_5__["default"].format("dxDataGrid-filterPanelClearFilter"),
                    filterEnabledHint: _localization_message__WEBPACK_IMPORTED_MODULE_5__["default"].format("dxDataGrid-filterPanelFilterEnabledHint")
                }
            }
        }
    },
    views: {
        filterPanelView: FilterPanelView
    },
    extenders: {
        controllers: {
            data: {
                optionChanged: function(args) {
                    switch (args.name) {
                        case "filterPanel":
                            this._applyFilter();
                            args.handled = true;
                            break;
                        default:
                            this.callBase(args)
                    }
                }
            }
        }
    }
};


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.filter_row.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.filter_row.js ***!
  \*****************************************************************************/
/*! exports provided: filterRowModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "filterRowModule", function() { return filterRowModule; });
/* harmony import */ var _core_utils_size__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/utils/size */ "./node_modules/devextreme/esm/core/utils/size.js");
/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/renderer */ "./node_modules/devextreme/esm/core/renderer.js");
/* harmony import */ var _events_core_events_engine__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../events/core/events_engine */ "./node_modules/devextreme/esm/events/core/events_engine.js");
/* harmony import */ var _core_utils_type__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/utils/type */ "./node_modules/devextreme/esm/core/utils/type.js");
/* harmony import */ var _core_utils_extend__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/utils/extend */ "./node_modules/devextreme/esm/core/utils/extend.js");
/* harmony import */ var _events_utils_index__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../events/utils/index */ "./node_modules/devextreme/esm/events/utils/index.js");
/* harmony import */ var _core_utils_iterator__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../core/utils/iterator */ "./node_modules/devextreme/esm/core/utils/iterator.js");
/* harmony import */ var _ui_grid_core_modules__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ui.grid_core.modules */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.modules.js");
/* harmony import */ var _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./ui.grid_core.utils */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.utils.js");
/* harmony import */ var _localization_message__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../localization/message */ "./node_modules/devextreme/esm/localization/message.js");
/* harmony import */ var _editor_editor__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../editor/editor */ "./node_modules/devextreme/esm/ui/editor/editor.js");
/* harmony import */ var _overlay_ui_overlay__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../overlay/ui.overlay */ "./node_modules/devextreme/esm/ui/overlay/ui.overlay.js");
/* harmony import */ var _menu__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../menu */ "./node_modules/devextreme/esm/ui/menu.js");
/* harmony import */ var _shared_accessibility__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../shared/accessibility */ "./node_modules/devextreme/esm/ui/shared/accessibility.js");
/**
 * DevExtreme (esm/ui/grid_core/ui.grid_core.filter_row.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */














var OPERATION_ICONS = {
    "=": "filter-operation-equals",
    "<>": "filter-operation-not-equals",
    "<": "filter-operation-less",
    "<=": "filter-operation-less-equal",
    ">": "filter-operation-greater",
    ">=": "filter-operation-greater-equal",
    default: "filter-operation-default",
    notcontains: "filter-operation-not-contains",
    contains: "filter-operation-contains",
    startswith: "filter-operation-starts-with",
    endswith: "filter-operation-ends-with",
    between: "filter-operation-between"
};
var OPERATION_DESCRIPTORS = {
    "=": "equal",
    "<>": "notEqual",
    "<": "lessThan",
    "<=": "lessThanOrEqual",
    ">": "greaterThan",
    ">=": "greaterThanOrEqual",
    startswith: "startsWith",
    contains: "contains",
    notcontains: "notContains",
    endswith: "endsWith",
    between: "between"
};
var FILTERING_TIMEOUT = 700;
var CORRECT_FILTER_RANGE_OVERLAY_WIDTH = 1;
var FILTER_ROW_CLASS = "filter-row";
var FILTER_RANGE_OVERLAY_CLASS = "filter-range-overlay";
var FILTER_RANGE_START_CLASS = "filter-range-start";
var FILTER_RANGE_END_CLASS = "filter-range-end";
var MENU_CLASS = "dx-menu";
var EDITOR_WITH_MENU_CLASS = "dx-editor-with-menu";
var EDITOR_CONTAINER_CLASS = "dx-editor-container";
var EDITOR_CELL_CLASS = "dx-editor-cell";
var FILTER_MENU = "dx-filter-menu";
var APPLY_BUTTON_CLASS = "dx-apply-button";
var HIGHLIGHT_OUTLINE_CLASS = "dx-highlight-outline";
var FOCUSED_CLASS = "dx-focused";
var CELL_FOCUS_DISABLED_CLASS = "dx-cell-focus-disabled";
var FILTER_RANGE_CONTENT_CLASS = "dx-filter-range-content";
var FILTER_MODIFIED_CLASS = "dx-filter-modified";
var EDITORS_INPUT_SELECTOR = "input:not([type='hidden'])";
var BETWEEN_OPERATION_DATA_TYPES = ["date", "datetime", "number"];

function isOnClickApplyFilterMode(that) {
    return "onClick" === that.option("filterRow.applyFilter")
}
var ColumnHeadersViewFilterRowExtender = function() {
    var getEditorInstance = function($editorContainer) {
        var $editor = $editorContainer && $editorContainer.children();
        var componentNames = $editor && $editor.data("dxComponents");
        var editor = componentNames && componentNames.length && $editor.data(componentNames[0]);
        if (editor instanceof _editor_editor__WEBPACK_IMPORTED_MODULE_10__["default"]) {
            return editor
        }
    };
    var getRangeTextByFilterValue = function(that, column) {
        var result = "";
        var rangeEnd = "";
        var filterValue = getColumnFilterValue(that, column);
        var formatOptions = _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_8__["default"].getFormatOptionsByColumn(column, "filterRow");
        if (Array.isArray(filterValue)) {
            result = _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_8__["default"].formatValue(filterValue[0], formatOptions);
            rangeEnd = _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_8__["default"].formatValue(filterValue[1], formatOptions);
            if ("" !== rangeEnd) {
                result += " - " + rangeEnd
            }
        } else if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_3__["isDefined"])(filterValue)) {
            result = _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_8__["default"].formatValue(filterValue, formatOptions)
        }
        return result
    };

    function getColumnFilterValue(that, column) {
        if (column) {
            return isOnClickApplyFilterMode(that) && void 0 !== column.bufferedFilterValue ? column.bufferedFilterValue : column.filterValue
        }
    }
    var getColumnSelectedFilterOperation = function(that, column) {
        if (column) {
            return isOnClickApplyFilterMode(that) && void 0 !== column.bufferedSelectedFilterOperation ? column.bufferedSelectedFilterOperation : column.selectedFilterOperation
        }
    };
    var getFilterValue = function(that, columnIndex, $editorContainer) {
        var column = that._columnsController.columnOption(columnIndex);
        var filterValue = getColumnFilterValue(that, column);
        var isFilterRange = $editorContainer.closest("." + that.addWidgetPrefix(FILTER_RANGE_OVERLAY_CLASS)).length;
        var isRangeStart = $editorContainer.hasClass(that.addWidgetPrefix(FILTER_RANGE_START_CLASS));
        if (filterValue && Array.isArray(filterValue) && "between" === getColumnSelectedFilterOperation(that, column)) {
            if (isRangeStart) {
                return filterValue[0]
            } else {
                return filterValue[1]
            }
        }
        return !isFilterRange && function(filterValue, column) {
            if (column && BETWEEN_OPERATION_DATA_TYPES.indexOf(column.dataType) >= 0 && Array.isArray(filterValue)) {
                return false
            }
            return void 0 !== filterValue
        }(filterValue, column) ? filterValue : null
    };
    var updateFilterValue = function(that, options) {
        var value = "" === options.value ? null : options.value;
        var $editorContainer = options.container;
        var column = that._columnsController.columnOption(options.column.index);
        var filterValue = getFilterValue(that, column.index, $editorContainer);
        if (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_3__["isDefined"])(filterValue) && !Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_3__["isDefined"])(value)) {
            return
        }
        that._applyFilterViewController.setHighLight($editorContainer, filterValue !== value);
        var columnOptionName = isOnClickApplyFilterMode(that) ? "bufferedFilterValue" : "filterValue";
        var normalizedValue = function(that, filterValue, column, $editorContainer) {
            if ("between" === getColumnSelectedFilterOperation(that, column)) {
                var columnFilterValue = getColumnFilterValue(that, column);
                if ($editorContainer.hasClass(that.addWidgetPrefix(FILTER_RANGE_START_CLASS))) {
                    return [filterValue, Array.isArray(columnFilterValue) ? columnFilterValue[1] : void 0]
                } else {
                    return [Array.isArray(columnFilterValue) ? columnFilterValue[0] : columnFilterValue, filterValue]
                }
            }
            return filterValue
        }(that, value, column, $editorContainer);
        var isBetween = "between" === getColumnSelectedFilterOperation(that, column);
        var notFireEvent = options.notFireEvent || isBetween && Array.isArray(normalizedValue) && normalizedValue.indexOf(void 0) >= 0;
        that._columnsController.columnOption(column.index, columnOptionName, normalizedValue, notFireEvent)
    };
    return {
        _updateEditorValue: function(column, $editorContainer) {
            var editor = getEditorInstance($editorContainer);
            editor && editor.option("value", getFilterValue(this, column.index, $editorContainer))
        },
        _columnOptionChanged: function(e) {
            var optionNames = e.optionNames;
            var $cell;
            var $editorContainer;
            var $editorRangeElements;
            var $menu;
            if (_ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_8__["default"].checkChanges(optionNames, ["filterValue", "bufferedFilterValue", "selectedFilterOperation", "bufferedSelectedFilterOperation", "filterValues", "filterType"]) && void 0 !== e.columnIndex) {
                var visibleIndex = this._columnsController.getVisibleIndex(e.columnIndex);
                var column = this._columnsController.columnOption(e.columnIndex);
                $cell = this._getCellElement(this.element().find("." + this.addWidgetPrefix(FILTER_ROW_CLASS)).index(), visibleIndex) || Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])();
                $editorContainer = $cell.find("." + EDITOR_CONTAINER_CLASS).first();
                if (optionNames.filterValue || optionNames.bufferedFilterValue) {
                    this._updateEditorValue(column, $editorContainer);
                    var overlayInstance = $cell.find("." + this.addWidgetPrefix(FILTER_RANGE_OVERLAY_CLASS)).data("dxOverlay");
                    if (overlayInstance) {
                        $editorRangeElements = overlayInstance.$content().find("." + EDITOR_CONTAINER_CLASS);
                        this._updateEditorValue(column, $editorRangeElements.first());
                        this._updateEditorValue(column, $editorRangeElements.last())
                    }
                    if (!overlayInstance || !overlayInstance.option("visible")) {
                        this._updateFilterRangeContent($cell, getRangeTextByFilterValue(this, column))
                    }
                }
                if (optionNames.selectedFilterOperation || optionNames.bufferedSelectedFilterOperation) {
                    if (visibleIndex >= 0 && column) {
                        $menu = $cell.find("." + MENU_CLASS);
                        if ($menu.length) {
                            this._updateFilterOperationChooser($menu, column, $editorContainer);
                            if ("between" === getColumnSelectedFilterOperation(this, column)) {
                                this._renderFilterRangeContent($cell, column)
                            } else if ($editorContainer.find("." + FILTER_RANGE_CONTENT_CLASS).length) {
                                this._renderEditor($editorContainer, this._getEditorOptions($editorContainer, column));
                                this._hideFilterRange()
                            }
                        }
                    }
                }
                return
            }
            this.callBase(e)
        },
        _renderCore: function() {
            this._filterRangeOverlayInstance = null;
            this.callBase.apply(this, arguments)
        },
        _resizeCore: function() {
            this.callBase.apply(this, arguments);
            this._filterRangeOverlayInstance && this._filterRangeOverlayInstance.repaint()
        },
        isFilterRowVisible: function() {
            return this._isElementVisible(this.option("filterRow"))
        },
        isVisible: function() {
            return this.callBase() || this.isFilterRowVisible()
        },
        init: function() {
            this.callBase();
            this._applyFilterViewController = this.getController("applyFilter")
        },
        _initFilterRangeOverlay: function($cell, column) {
            var that = this;
            var sharedData = {};
            var $editorContainer = $cell.find(".dx-editor-container");
            var $overlay = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])("<div>").addClass(that.addWidgetPrefix(FILTER_RANGE_OVERLAY_CLASS)).appendTo($cell);
            return that._createComponent($overlay, _overlay_ui_overlay__WEBPACK_IMPORTED_MODULE_11__["default"], {
                height: "auto",
                shading: false,
                showTitle: false,
                focusStateEnabled: false,
                closeOnOutsideClick: true,
                copyRootClassesToWrapper: true,
                _ignoreCopyRootClassesToWrapperDeprecation: true,
                animation: false,
                position: {
                    my: "top",
                    at: "top",
                    of: $editorContainer.length && $editorContainer || $cell,
                    offset: "0 -1"
                },
                contentTemplate: function(contentElement) {
                    var editorOptions;
                    var $editor = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])("<div>").addClass(EDITOR_CONTAINER_CLASS + " " + that.addWidgetPrefix(FILTER_RANGE_START_CLASS)).appendTo(contentElement);
                    column = that._columnsController.columnOption(column.index);
                    editorOptions = that._getEditorOptions($editor, column);
                    editorOptions.sharedData = sharedData;
                    that._renderEditor($editor, editorOptions);
                    _events_core_events_engine__WEBPACK_IMPORTED_MODULE_2__["default"].on($editor.find(EDITORS_INPUT_SELECTOR), "keydown", (function(e) {
                        var $prevElement = $cell.find("[tabindex]").not(e.target).first();
                        if ("tab" === Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_5__["normalizeKeyName"])(e) && e.shiftKey) {
                            e.preventDefault();
                            that._hideFilterRange();
                            if (!$prevElement.length) {
                                $prevElement = $cell.prev().find("[tabindex]").last()
                            }
                            _events_core_events_engine__WEBPACK_IMPORTED_MODULE_2__["default"].trigger($prevElement, "focus")
                        }
                    }));
                    $editor = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])("<div>").addClass(EDITOR_CONTAINER_CLASS + " " + that.addWidgetPrefix(FILTER_RANGE_END_CLASS)).appendTo(contentElement);
                    editorOptions = that._getEditorOptions($editor, column);
                    editorOptions.sharedData = sharedData;
                    that._renderEditor($editor, editorOptions);
                    _events_core_events_engine__WEBPACK_IMPORTED_MODULE_2__["default"].on($editor.find(EDITORS_INPUT_SELECTOR), "keydown", (function(e) {
                        if ("tab" === Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_5__["normalizeKeyName"])(e) && !e.shiftKey) {
                            e.preventDefault();
                            that._hideFilterRange();
                            _events_core_events_engine__WEBPACK_IMPORTED_MODULE_2__["default"].trigger($cell.next().find("[tabindex]").first(), "focus")
                        }
                    }));
                    return Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(contentElement).addClass(that.getWidgetContainerClass())
                },
                onShown: function(e) {
                    var $editor = e.component.$content().find("." + EDITOR_CONTAINER_CLASS).first();
                    _events_core_events_engine__WEBPACK_IMPORTED_MODULE_2__["default"].trigger($editor.find(EDITORS_INPUT_SELECTOR), "focus")
                },
                onHidden: function() {
                    column = that._columnsController.columnOption(column.index);
                    $cell.find("." + MENU_CLASS).parent().addClass(EDITOR_WITH_MENU_CLASS);
                    if ("between" === getColumnSelectedFilterOperation(that, column)) {
                        that._updateFilterRangeContent($cell, getRangeTextByFilterValue(that, column));
                        that.component.updateDimensions()
                    }
                }
            })
        },
        _updateFilterRangeOverlay: function(options) {
            var overlayInstance = this._filterRangeOverlayInstance;
            overlayInstance && overlayInstance.option(options)
        },
        _showFilterRange: function($cell, column) {
            var $overlay = $cell.children("." + this.addWidgetPrefix(FILTER_RANGE_OVERLAY_CLASS));
            var overlayInstance = $overlay.length && $overlay.data("dxOverlay");
            if (!overlayInstance && column) {
                overlayInstance = this._initFilterRangeOverlay($cell, column)
            }
            if (!overlayInstance.option("visible")) {
                this._filterRangeOverlayInstance && this._filterRangeOverlayInstance.hide();
                this._filterRangeOverlayInstance = overlayInstance;
                this._updateFilterRangeOverlay({
                    width: Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getOuterWidth"])($cell, true) + CORRECT_FILTER_RANGE_OVERLAY_WIDTH
                });
                this._filterRangeOverlayInstance && this._filterRangeOverlayInstance.show()
            }
        },
        _hideFilterRange: function() {
            var overlayInstance = this._filterRangeOverlayInstance;
            overlayInstance && overlayInstance.hide()
        },
        getFilterRangeOverlayInstance: function() {
            return this._filterRangeOverlayInstance
        },
        _createRow: function(row) {
            var $row = this.callBase(row);
            if ("filter" === row.rowType) {
                $row.addClass(this.addWidgetPrefix(FILTER_ROW_CLASS));
                if (!this.option("useLegacyKeyboardNavigation")) {
                    _events_core_events_engine__WEBPACK_IMPORTED_MODULE_2__["default"].on($row, "keydown", event => Object(_shared_accessibility__WEBPACK_IMPORTED_MODULE_13__["selectView"])("filterRow", this, event))
                }
            }
            return $row
        },
        _getRows: function() {
            var result = this.callBase();
            if (this.isFilterRowVisible()) {
                result.push({
                    rowType: "filter"
                })
            }
            return result
        },
        _renderFilterCell: function(cell, options) {
            var column = options.column;
            var $cell = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(cell);
            if (this.component.option("showColumnHeaders")) {
                this.setAria("describedby", column.headerId, $cell)
            }
            this.setAria("label", _localization_message__WEBPACK_IMPORTED_MODULE_9__["default"].format("dxDataGrid-ariaFilterCell"), $cell);
            $cell.addClass(EDITOR_CELL_CLASS);
            var $container = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])("<div>").appendTo($cell);
            var $editorContainer = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])("<div>").addClass(EDITOR_CONTAINER_CLASS).appendTo($container);
            if ("between" === getColumnSelectedFilterOperation(this, column)) {
                this._renderFilterRangeContent($cell, column)
            } else {
                var editorOptions = this._getEditorOptions($editorContainer, column);
                this._renderEditor($editorContainer, editorOptions)
            }
            var alignment = column.alignment;
            if (alignment && "center" !== alignment) {
                $cell.find(EDITORS_INPUT_SELECTOR).first().css("textAlign", column.alignment)
            }
            if (column.filterOperations && column.filterOperations.length) {
                this._renderFilterOperationChooser($container, column, $editorContainer)
            }
        },
        _renderCellContent: function($cell, options) {
            var that = this;
            var column = options.column;
            if ("filter" === options.rowType) {
                if (column.command) {
                    $cell.html("&nbsp;")
                } else if (column.allowFiltering) {
                    that.renderTemplate($cell, that._renderFilterCell.bind(that), options).done(() => {
                        that._updateCell($cell, options)
                    });
                    return
                }
            }
            that.callBase($cell, options)
        },
        _getEditorOptions: function($editorContainer, column) {
            var that = this;
            var accessibilityOptions = {
                editorOptions: {
                    inputAttr: that._getFilterInputAccessibilityAttributes(column)
                }
            };
            var result = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_4__["extend"])(accessibilityOptions, column, {
                value: getFilterValue(that, column.index, $editorContainer),
                parentType: "filterRow",
                showAllText: that.option("filterRow.showAllText"),
                updateValueTimeout: "onClick" === that.option("filterRow.applyFilter") ? 0 : FILTERING_TIMEOUT,
                width: null,
                setValue: function(value, notFireEvent) {
                    updateFilterValue(that, {
                        column: column,
                        value: value,
                        container: $editorContainer,
                        notFireEvent: notFireEvent
                    })
                }
            });
            if ("between" === getColumnSelectedFilterOperation(that, column)) {
                if ($editorContainer.hasClass(that.addWidgetPrefix(FILTER_RANGE_START_CLASS))) {
                    result.placeholder = that.option("filterRow.betweenStartText")
                } else {
                    result.placeholder = that.option("filterRow.betweenEndText")
                }
            }
            return result
        },
        _getFilterInputAccessibilityAttributes: function(column) {
            var columnAriaLabel = _localization_message__WEBPACK_IMPORTED_MODULE_9__["default"].format("dxDataGrid-ariaFilterCell");
            if (this.component.option("showColumnHeaders")) {
                return {
                    "aria-label": columnAriaLabel,
                    "aria-describedby": column.headerId
                }
            }
            return {
                "aria-label": columnAriaLabel
            }
        },
        _renderEditor: function($editorContainer, options) {
            $editorContainer.empty();
            return this.getController("editorFactory").createEditor(Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])("<div>").appendTo($editorContainer), options)
        },
        _renderFilterRangeContent: function($cell, column) {
            var that = this;
            var $editorContainer = $cell.find("." + EDITOR_CONTAINER_CLASS).first();
            $editorContainer.empty();
            var $filterRangeContent = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])("<div>").addClass(FILTER_RANGE_CONTENT_CLASS).attr("tabindex", this.option("tabIndex"));
            _events_core_events_engine__WEBPACK_IMPORTED_MODULE_2__["default"].on($filterRangeContent, "focusin", (function() {
                that._showFilterRange($cell, column)
            }));
            $filterRangeContent.appendTo($editorContainer);
            that._updateFilterRangeContent($cell, getRangeTextByFilterValue(that, column))
        },
        _updateFilterRangeContent: function($cell, value) {
            var $filterRangeContent = $cell.find("." + FILTER_RANGE_CONTENT_CLASS);
            if ($filterRangeContent.length) {
                if ("" === value) {
                    $filterRangeContent.html("&nbsp;")
                } else {
                    $filterRangeContent.text(value)
                }
            }
        },
        _updateFilterOperationChooser: function($menu, column, $editorContainer) {
            var that = this;
            var isCellWasFocused;
            var restoreFocus = function() {
                var menu = _menu__WEBPACK_IMPORTED_MODULE_12__["default"].getInstance($menu);
                menu && menu.option("focusedElement", null);
                isCellWasFocused && that._focusEditor($editorContainer)
            };
            that._createComponent($menu, _menu__WEBPACK_IMPORTED_MODULE_12__["default"], {
                integrationOptions: {},
                activeStateEnabled: false,
                selectionMode: "single",
                cssClass: that.getWidgetContainerClass() + " " + CELL_FOCUS_DISABLED_CLASS + " " + FILTER_MENU,
                showFirstSubmenuMode: "onHover",
                hideSubmenuOnMouseLeave: true,
                items: [{
                    disabled: column.filterOperations && column.filterOperations.length ? false : true,
                    icon: OPERATION_ICONS[getColumnSelectedFilterOperation(that, column) || "default"],
                    selectable: false,
                    items: that._getFilterOperationMenuItems(column)
                }],
                onItemClick: function(properties) {
                    var selectedFilterOperation = properties.itemData.name;
                    var columnSelectedFilterOperation = getColumnSelectedFilterOperation(that, column);
                    var notFocusEditor = false;
                    var isOnClickMode = isOnClickApplyFilterMode(that);
                    var options = {};
                    if (properties.itemData.items || selectedFilterOperation && selectedFilterOperation === columnSelectedFilterOperation) {
                        return
                    }
                    if (selectedFilterOperation) {
                        options[isOnClickMode ? "bufferedSelectedFilterOperation" : "selectedFilterOperation"] = selectedFilterOperation;
                        if ("between" === selectedFilterOperation || "between" === columnSelectedFilterOperation) {
                            notFocusEditor = "between" === selectedFilterOperation;
                            options[isOnClickMode ? "bufferedFilterValue" : "filterValue"] = null
                        }
                    } else {
                        options[isOnClickMode ? "bufferedFilterValue" : "filterValue"] = null;
                        options[isOnClickMode ? "bufferedSelectedFilterOperation" : "selectedFilterOperation"] = column.defaultSelectedFilterOperation || null
                    }
                    that._columnsController.columnOption(column.index, options);
                    that._applyFilterViewController.setHighLight($editorContainer, true);
                    if (!selectedFilterOperation) {
                        var editor = getEditorInstance($editorContainer);
                        if (editor && "dxDateBox" === editor.NAME && !editor.option("isValid")) {
                            editor.reset();
                            editor.option("isValid", true)
                        }
                    }
                    if (!notFocusEditor) {
                        that._focusEditor($editorContainer)
                    } else {
                        that._showFilterRange($editorContainer.closest("." + EDITOR_CELL_CLASS), column)
                    }
                },
                onSubmenuShown: function() {
                    isCellWasFocused = that._isEditorFocused($editorContainer);
                    that.getController("editorFactory").loseFocus()
                },
                onSubmenuHiding: function() {
                    _events_core_events_engine__WEBPACK_IMPORTED_MODULE_2__["default"].trigger($menu, "blur");
                    restoreFocus()
                },
                onContentReady: function(e) {
                    _events_core_events_engine__WEBPACK_IMPORTED_MODULE_2__["default"].on($menu, "blur", () => {
                        var menu = e.component;
                        menu._hideSubmenu(menu._visibleSubmenu);
                        restoreFocus()
                    })
                },
                rtlEnabled: that.option("rtlEnabled")
            })
        },
        _isEditorFocused: function($container) {
            return $container.hasClass(FOCUSED_CLASS) || $container.parents("." + FOCUSED_CLASS).length
        },
        _focusEditor: function($container) {
            this.getController("editorFactory").focus($container);
            _events_core_events_engine__WEBPACK_IMPORTED_MODULE_2__["default"].trigger($container.find(EDITORS_INPUT_SELECTOR), "focus")
        },
        _renderFilterOperationChooser: function($container, column, $editorContainer) {
            var $menu;
            if (this.option("filterRow.showOperationChooser")) {
                $container.addClass(EDITOR_WITH_MENU_CLASS);
                $menu = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])("<div>").prependTo($container);
                this._updateFilterOperationChooser($menu, column, $editorContainer)
            }
        },
        _getFilterOperationMenuItems: function(column) {
            var that = this;
            var result = [{}];
            var filterRowOptions = that.option("filterRow");
            var operationDescriptions = filterRowOptions && filterRowOptions.operationDescriptions || {};
            if (column.filterOperations && column.filterOperations.length) {
                var availableFilterOperations = column.filterOperations.filter((function(value) {
                    return Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_3__["isDefined"])(OPERATION_DESCRIPTORS[value])
                }));
                result = Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_6__["map"])(availableFilterOperations, (function(value) {
                    var descriptionName = OPERATION_DESCRIPTORS[value];
                    return {
                        name: value,
                        selected: (getColumnSelectedFilterOperation(that, column) || column.defaultFilterOperation) === value,
                        text: operationDescriptions[descriptionName],
                        icon: OPERATION_ICONS[value]
                    }
                }));
                result.push({
                    name: null,
                    text: filterRowOptions && filterRowOptions.resetOperationText,
                    icon: OPERATION_ICONS.default
                })
            }
            return result
        },
        optionChanged: function(args) {
            switch (args.name) {
                case "filterRow":
                case "showColumnLines":
                    this._invalidate(true, true);
                    args.handled = true;
                    break;
                default:
                    this.callBase(args)
            }
        }
    }
}();
var DataControllerFilterRowExtender = {
    skipCalculateColumnFilters: function() {
        return false
    },
    _calculateAdditionalFilter: function() {
        if (this.skipCalculateColumnFilters()) {
            return this.callBase()
        }
        var filters = [this.callBase()];
        var columns = this._columnsController.getVisibleColumns(null, true);
        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_6__["each"])(columns, (function() {
            if (this.allowFiltering && this.calculateFilterExpression && Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_3__["isDefined"])(this.filterValue)) {
                var filter = this.createFilterExpression(this.filterValue, this.selectedFilterOperation || this.defaultFilterOperation, "filterRow");
                filters.push(filter)
            }
        }));
        return _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_8__["default"].combineFilters(filters)
    }
};
var ApplyFilterViewController = _ui_grid_core_modules__WEBPACK_IMPORTED_MODULE_7__["default"].ViewController.inherit({
    _getHeaderPanel: function() {
        if (!this._headerPanel) {
            this._headerPanel = this.getView("headerPanel")
        }
        return this._headerPanel
    },
    setHighLight: function($element, value) {
        if (isOnClickApplyFilterMode(this)) {
            $element && $element.toggleClass(HIGHLIGHT_OUTLINE_CLASS, value) && $element.closest("." + EDITOR_CELL_CLASS).toggleClass(FILTER_MODIFIED_CLASS, value);
            this._getHeaderPanel().enableApplyButton(value)
        }
    },
    applyFilter: function() {
        var columnsController = this.getController("columns");
        var columns = columnsController.getColumns();
        columnsController.beginUpdate();
        for (var i = 0; i < columns.length; i++) {
            var column = columns[i];
            if (void 0 !== column.bufferedFilterValue) {
                columnsController.columnOption(i, "filterValue", column.bufferedFilterValue);
                column.bufferedFilterValue = void 0
            }
            if (void 0 !== column.bufferedSelectedFilterOperation) {
                columnsController.columnOption(i, "selectedFilterOperation", column.bufferedSelectedFilterOperation);
                column.bufferedSelectedFilterOperation = void 0
            }
        }
        columnsController.endUpdate();
        this.removeHighLights()
    },
    removeHighLights: function() {
        if (isOnClickApplyFilterMode(this)) {
            var columnHeadersViewElement = this.getView("columnHeadersView").element();
            columnHeadersViewElement.find("." + this.addWidgetPrefix(FILTER_ROW_CLASS) + " ." + HIGHLIGHT_OUTLINE_CLASS).removeClass(HIGHLIGHT_OUTLINE_CLASS);
            columnHeadersViewElement.find("." + this.addWidgetPrefix(FILTER_ROW_CLASS) + " ." + FILTER_MODIFIED_CLASS).removeClass(FILTER_MODIFIED_CLASS);
            this._getHeaderPanel().enableApplyButton(false)
        }
    }
});
var filterRowModule = {
    defaultOptions: function() {
        return {
            filterRow: {
                visible: false,
                showOperationChooser: true,
                showAllText: _localization_message__WEBPACK_IMPORTED_MODULE_9__["default"].format("dxDataGrid-filterRowShowAllText"),
                resetOperationText: _localization_message__WEBPACK_IMPORTED_MODULE_9__["default"].format("dxDataGrid-filterRowResetOperationText"),
                applyFilter: "auto",
                applyFilterText: _localization_message__WEBPACK_IMPORTED_MODULE_9__["default"].format("dxDataGrid-applyFilterText"),
                operationDescriptions: {
                    equal: _localization_message__WEBPACK_IMPORTED_MODULE_9__["default"].format("dxDataGrid-filterRowOperationEquals"),
                    notEqual: _localization_message__WEBPACK_IMPORTED_MODULE_9__["default"].format("dxDataGrid-filterRowOperationNotEquals"),
                    lessThan: _localization_message__WEBPACK_IMPORTED_MODULE_9__["default"].format("dxDataGrid-filterRowOperationLess"),
                    lessThanOrEqual: _localization_message__WEBPACK_IMPORTED_MODULE_9__["default"].format("dxDataGrid-filterRowOperationLessOrEquals"),
                    greaterThan: _localization_message__WEBPACK_IMPORTED_MODULE_9__["default"].format("dxDataGrid-filterRowOperationGreater"),
                    greaterThanOrEqual: _localization_message__WEBPACK_IMPORTED_MODULE_9__["default"].format("dxDataGrid-filterRowOperationGreaterOrEquals"),
                    startsWith: _localization_message__WEBPACK_IMPORTED_MODULE_9__["default"].format("dxDataGrid-filterRowOperationStartsWith"),
                    contains: _localization_message__WEBPACK_IMPORTED_MODULE_9__["default"].format("dxDataGrid-filterRowOperationContains"),
                    notContains: _localization_message__WEBPACK_IMPORTED_MODULE_9__["default"].format("dxDataGrid-filterRowOperationNotContains"),
                    endsWith: _localization_message__WEBPACK_IMPORTED_MODULE_9__["default"].format("dxDataGrid-filterRowOperationEndsWith"),
                    between: _localization_message__WEBPACK_IMPORTED_MODULE_9__["default"].format("dxDataGrid-filterRowOperationBetween"),
                    isBlank: _localization_message__WEBPACK_IMPORTED_MODULE_9__["default"].format("dxFilterBuilder-filterOperationIsBlank"),
                    isNotBlank: _localization_message__WEBPACK_IMPORTED_MODULE_9__["default"].format("dxFilterBuilder-filterOperationIsNotBlank")
                },
                betweenStartText: _localization_message__WEBPACK_IMPORTED_MODULE_9__["default"].format("dxDataGrid-filterRowOperationBetweenStartText"),
                betweenEndText: _localization_message__WEBPACK_IMPORTED_MODULE_9__["default"].format("dxDataGrid-filterRowOperationBetweenEndText")
            }
        }
    },
    controllers: {
        applyFilter: ApplyFilterViewController
    },
    extenders: {
        controllers: {
            data: DataControllerFilterRowExtender,
            columnsResizer: {
                _startResizing: function() {
                    var that = this;
                    that.callBase.apply(that, arguments);
                    if (that.isResizing()) {
                        var overlayInstance = that._columnHeadersView.getFilterRangeOverlayInstance();
                        if (overlayInstance) {
                            var cellIndex = overlayInstance.$element().closest("td").index();
                            if (cellIndex === that._targetPoint.columnIndex || cellIndex === that._targetPoint.columnIndex + 1) {
                                overlayInstance.$content().hide()
                            }
                        }
                    }
                },
                _endResizing: function() {
                    var that = this;
                    var $cell;
                    if (that.isResizing()) {
                        var overlayInstance = that._columnHeadersView.getFilterRangeOverlayInstance();
                        if (overlayInstance) {
                            $cell = overlayInstance.$element().closest("td");
                            that._columnHeadersView._updateFilterRangeOverlay({
                                width: Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getOuterWidth"])($cell, true) + CORRECT_FILTER_RANGE_OVERLAY_WIDTH
                            });
                            overlayInstance.$content().show()
                        }
                    }
                    that.callBase.apply(that, arguments)
                }
            }
        },
        views: {
            columnHeadersView: ColumnHeadersViewFilterRowExtender,
            headerPanel: {
                _getToolbarItems: function() {
                    var items = this.callBase();
                    var filterItem = this._prepareFilterItem(items);
                    return filterItem.concat(items)
                },
                _prepareFilterItem: function() {
                    var that = this;
                    var filterItem = [];
                    if (that._isShowApplyFilterButton()) {
                        var hintText = that.option("filterRow.applyFilterText");
                        var columns = that._columnsController.getColumns();
                        var disabled = !columns.filter((function(column) {
                            return void 0 !== column.bufferedFilterValue
                        })).length;
                        var toolbarItem = {
                            widget: "dxButton",
                            options: {
                                icon: "apply-filter",
                                disabled: disabled,
                                onClick: function() {
                                    that._applyFilterViewController.applyFilter()
                                },
                                hint: hintText,
                                text: hintText,
                                onInitialized: function(e) {
                                    Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(e.element).addClass(that._getToolbarButtonClass(APPLY_BUTTON_CLASS))
                                }
                            },
                            showText: "inMenu",
                            name: "applyFilterButton",
                            location: "after",
                            locateInMenu: "auto",
                            sortIndex: 10
                        };
                        filterItem.push(toolbarItem)
                    }
                    return filterItem
                },
                _isShowApplyFilterButton: function() {
                    var filterRowOptions = this.option("filterRow");
                    return filterRowOptions && filterRowOptions.visible && "onClick" === filterRowOptions.applyFilter
                },
                init: function() {
                    this.callBase();
                    this._dataController = this.getController("data");
                    this._applyFilterViewController = this.getController("applyFilter")
                },
                enableApplyButton: function(value) {
                    this.setToolbarItemDisabled("applyFilterButton", !value)
                },
                isVisible: function() {
                    return this.callBase() || this._isShowApplyFilterButton()
                },
                optionChanged: function(args) {
                    if ("filterRow" === args.name) {
                        this._invalidate();
                        args.handled = true
                    } else {
                        this.callBase(args)
                    }
                }
            }
        }
    }
};


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.filter_sync.js":
/*!******************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.filter_sync.js ***!
  \******************************************************************************/
/*! exports provided: filterSyncModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "filterSyncModule", function() { return filterSyncModule; });
/* harmony import */ var _core_utils_type__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/utils/type */ "./node_modules/devextreme/esm/core/utils/type.js");
/* harmony import */ var _ui_grid_core_modules__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ui.grid_core.modules */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.modules.js");
/* harmony import */ var _filter_builder_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../filter_builder/utils */ "./node_modules/devextreme/esm/ui/filter_builder/utils.js");
/* harmony import */ var _widget_ui_errors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../widget/ui.errors */ "./node_modules/devextreme/esm/ui/widget/ui.errors.js");
/* harmony import */ var _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ui.grid_core.utils */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.utils.js");
/* harmony import */ var _shared_filtering__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../shared/filtering */ "./node_modules/devextreme/esm/ui/shared/filtering.js");
/* harmony import */ var _ui_grid_core_filter_custom_operations__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ui.grid_core.filter_custom_operations */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.filter_custom_operations.js");
/**
 * DevExtreme (esm/ui/grid_core/ui.grid_core.filter_sync.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */







var FILTER_ROW_OPERATIONS = ["=", "<>", "<", "<=", ">", ">=", "notcontains", "contains", "startswith", "endswith", "between"];
var FILTER_TYPES_INCLUDE = "include";
var FILTER_TYPES_EXCLUDE = "exclude";

function getColumnIdentifier(column) {
    return column.name || column.dataField
}

function checkForErrors(columns) {
    columns.forEach(column => {
        var identifier = getColumnIdentifier(column);
        if (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_0__["isDefined"])(identifier) && column.allowFiltering) {
            throw new _widget_ui_errors__WEBPACK_IMPORTED_MODULE_3__["default"].Error("E1049", column.caption)
        }
    })
}
var FilterSyncController = _ui_grid_core_modules__WEBPACK_IMPORTED_MODULE_1__["default"].Controller.inherit(function() {
    var getEmptyFilterValues = function() {
        return {
            filterType: FILTER_TYPES_INCLUDE,
            filterValues: void 0
        }
    };
    var canSyncHeaderFilterWithFilterRow = function(column) {
        var filterValues = column.filterValues || [];
        return !_shared_filtering__WEBPACK_IMPORTED_MODULE_5__["default"].getGroupInterval(column) && !(column.headerFilter && column.headerFilter.dataSource) || 1 === filterValues.length && null === filterValues[0]
    };
    var getConditionFromFilterRow = function(column) {
        var value = column.filterValue;
        if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_0__["isDefined"])(value)) {
            var operation = column.selectedFilterOperation || column.defaultFilterOperation || Object(_filter_builder_utils__WEBPACK_IMPORTED_MODULE_2__["getDefaultOperation"])(column);
            var filter = [getColumnIdentifier(column), operation, column.filterValue];
            return filter
        } else {
            return null
        }
    };
    var getConditionFromHeaderFilter = function(column) {
        var selectedOperation;
        var value;
        var filterValues = column.filterValues;
        if (!filterValues) {
            return null
        }
        if (1 === filterValues.length && canSyncHeaderFilterWithFilterRow(column) && !Array.isArray(filterValues[0])) {
            column.filterType === FILTER_TYPES_EXCLUDE ? selectedOperation = "<>" : selectedOperation = "=";
            value = filterValues[0]
        } else {
            column.filterType === FILTER_TYPES_EXCLUDE ? selectedOperation = "noneof" : selectedOperation = "anyof";
            value = filterValues
        }
        return [getColumnIdentifier(column), selectedOperation, value]
    };
    var updateHeaderFilterCondition = function(columnsController, column, headerFilterCondition) {
        var headerFilter = function(headerFilterCondition, column) {
            if (!headerFilterCondition) {
                return getEmptyFilterValues()
            }
            var filterType;
            var selectedFilterOperation = headerFilterCondition[1];
            var value = headerFilterCondition[2];
            var hasArrayValue = Array.isArray(value);
            if (!hasArrayValue) {
                if (!canSyncHeaderFilterWithFilterRow(column)) {
                    return getEmptyFilterValues()
                }
            }
            switch (selectedFilterOperation) {
                case "anyof":
                case "=":
                    filterType = FILTER_TYPES_INCLUDE;
                    break;
                case "noneof":
                case "<>":
                    filterType = FILTER_TYPES_EXCLUDE;
                    break;
                default:
                    return getEmptyFilterValues()
            }
            return {
                filterType: filterType,
                filterValues: hasArrayValue ? value : [value]
            }
        }(headerFilterCondition, column);
        columnsController.columnOption(getColumnIdentifier(column), headerFilter)
    };
    var updateFilterRowCondition = function(columnsController, column, condition) {
        var filterRowOptions;
        var selectedFilterOperation = null === condition || void 0 === condition ? void 0 : condition[1];
        var filterValue = null === condition || void 0 === condition ? void 0 : condition[2];
        var filterOperations = column.filterOperations || column.defaultFilterOperations;
        if ((!filterOperations || filterOperations.indexOf(selectedFilterOperation) >= 0 || selectedFilterOperation === column.defaultFilterOperation) && FILTER_ROW_OPERATIONS.indexOf(selectedFilterOperation) >= 0 && null !== filterValue) {
            if (selectedFilterOperation === column.defaultFilterOperation && !Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_0__["isDefined"])(column.selectedFilterOperation)) {
                selectedFilterOperation = column.selectedFilterOperation
            }
            filterRowOptions = {
                filterValue: filterValue,
                selectedFilterOperation: selectedFilterOperation
            }
        } else {
            filterRowOptions = {
                filterValue: void 0,
                selectedFilterOperation: void 0
            }
        }
        columnsController.columnOption(getColumnIdentifier(column), filterRowOptions)
    };
    return {
        syncFilterValue: function() {
            var that = this;
            var columnsController = that.getController("columns");
            var columns = columnsController.getFilteringColumns();
            this._skipSyncColumnOptions = true;
            columns.forEach((function(column) {
                var filterConditions = Object(_filter_builder_utils__WEBPACK_IMPORTED_MODULE_2__["getMatchedConditions"])(that.option("filterValue"), getColumnIdentifier(column));
                if (1 === filterConditions.length) {
                    var filterCondition = filterConditions[0];
                    updateHeaderFilterCondition(columnsController, column, filterCondition);
                    updateFilterRowCondition(columnsController, column, filterCondition)
                } else {
                    Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_0__["isDefined"])(column.filterValues) && updateHeaderFilterCondition(columnsController, column);
                    Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_0__["isDefined"])(column.filterValue) && updateFilterRowCondition(columnsController, column)
                }
            }));
            this._skipSyncColumnOptions = false
        },
        _initSync: function() {
            var columns = this.getController("columns").getColumns();
            var dataController = this.getController("data");
            var pageIndex = dataController.pageIndex();
            checkForErrors(columns);
            if (!this.option("filterValue")) {
                var filteringColumns = this.getController("columns").getFilteringColumns();
                var filterValue = this.getFilterValueFromColumns(filteringColumns);
                this.option("filterValue", filterValue)
            }
            this.syncFilterValue();
            dataController.pageIndex(pageIndex)
        },
        init: function() {
            var dataController = this.getController("data");
            if (dataController.isFilterSyncActive()) {
                if (this.getController("columns").isAllDataTypesDefined()) {
                    this._initSync()
                } else {
                    dataController.dataSourceChanged.add(() => this._initSync())
                }
            }
        },
        _getSyncFilterRow: function(filterValue, column) {
            var filter = getConditionFromFilterRow(column);
            if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_0__["isDefined"])(filter)) {
                return Object(_filter_builder_utils__WEBPACK_IMPORTED_MODULE_2__["syncFilters"])(filterValue, filter)
            } else {
                return Object(_filter_builder_utils__WEBPACK_IMPORTED_MODULE_2__["removeFieldConditionsFromFilter"])(filterValue, getColumnIdentifier(column))
            }
        },
        _getSyncHeaderFilter: function(filterValue, column) {
            var filter = getConditionFromHeaderFilter(column);
            if (filter) {
                return Object(_filter_builder_utils__WEBPACK_IMPORTED_MODULE_2__["syncFilters"])(filterValue, filter)
            } else {
                return Object(_filter_builder_utils__WEBPACK_IMPORTED_MODULE_2__["removeFieldConditionsFromFilter"])(filterValue, getColumnIdentifier(column))
            }
        },
        getFilterValueFromColumns: function(columns) {
            if (!this.getController("data").isFilterSyncActive()) {
                return null
            }
            var filterValue = ["and"];
            columns && columns.forEach(column => {
                var headerFilter = getConditionFromHeaderFilter(column);
                var filterRow = getConditionFromFilterRow(column);
                headerFilter && Object(_filter_builder_utils__WEBPACK_IMPORTED_MODULE_2__["addItem"])(headerFilter, filterValue);
                filterRow && Object(_filter_builder_utils__WEBPACK_IMPORTED_MODULE_2__["addItem"])(filterRow, filterValue)
            });
            return Object(_filter_builder_utils__WEBPACK_IMPORTED_MODULE_2__["getNormalizedFilter"])(filterValue)
        },
        syncFilterRow: function(column, value) {
            this.option("filterValue", this._getSyncFilterRow(this.option("filterValue"), column))
        },
        syncHeaderFilter: function(column) {
            this.option("filterValue", this._getSyncHeaderFilter(this.option("filterValue"), column))
        },
        getCustomFilterOperations: function() {
            var filterBuilderCustomOperations = this.option("filterBuilder.customOperations") || [];
            return [Object(_ui_grid_core_filter_custom_operations__WEBPACK_IMPORTED_MODULE_6__["anyOf"])(this.component), Object(_ui_grid_core_filter_custom_operations__WEBPACK_IMPORTED_MODULE_6__["noneOf"])(this.component)].concat(filterBuilderCustomOperations)
        },
        publicMethods: function() {
            return ["getCustomFilterOperations"]
        }
    }
}());
var DataControllerFilterSyncExtender = {
    isFilterSyncActive: function() {
        var filterSyncEnabledValue = this.option("filterSyncEnabled");
        return "auto" === filterSyncEnabledValue ? this.option("filterPanel.visible") : filterSyncEnabledValue
    },
    skipCalculateColumnFilters: function() {
        return Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_0__["isDefined"])(this.option("filterValue")) && this.isFilterSyncActive()
    },
    _calculateAdditionalFilter: function() {
        if (false === this.option("filterPanel.filterEnabled")) {
            return this.callBase()
        }
        var filters = [this.callBase()];
        var columns = this.getController("columns").getFilteringColumns();
        var filterValue = this.option("filterValue");
        if (this.isFilterSyncActive()) {
            var currentColumn = this.getController("headerFilter").getCurrentColumn();
            if (currentColumn && filterValue) {
                filterValue = Object(_filter_builder_utils__WEBPACK_IMPORTED_MODULE_2__["removeFieldConditionsFromFilter"])(filterValue, getColumnIdentifier(currentColumn))
            }
        }
        var customOperations = this.getController("filterSync").getCustomFilterOperations();
        var calculatedFilterValue = Object(_filter_builder_utils__WEBPACK_IMPORTED_MODULE_2__["getFilterExpression"])(filterValue, columns, customOperations, "filterBuilder");
        if (calculatedFilterValue) {
            filters.push(calculatedFilterValue)
        }
        return _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_4__["default"].combineFilters(filters)
    },
    _parseColumnPropertyName: function(fullName) {
        var matched = fullName.match(/.*\.(.*)/);
        if (matched) {
            return matched[1]
        } else {
            return null
        }
    },
    clearFilter: function(filterName) {
        this.component.beginUpdate();
        if (arguments.length > 0) {
            if ("filterValue" === filterName) {
                this.option("filterValue", null)
            }
            this.callBase(filterName)
        } else {
            this.option("filterValue", null);
            this.callBase()
        }
        this.component.endUpdate()
    },
    optionChanged: function(args) {
        switch (args.name) {
            case "filterValue":
                this._applyFilter();
                this.isFilterSyncActive() && this.getController("filterSync").syncFilterValue();
                args.handled = true;
                break;
            case "filterSyncEnabled":
                args.handled = true;
                break;
            case "columns":
                if (this.isFilterSyncActive()) {
                    var column = this.getController("columns").getColumnByPath(args.fullName);
                    var filterSyncController = this.getController("filterSync");
                    if (column && !filterSyncController._skipSyncColumnOptions) {
                        var propertyName = this._parseColumnPropertyName(args.fullName);
                        filterSyncController._skipSyncColumnOptions = true;
                        if ("filterType" === propertyName) {
                            if (FILTER_TYPES_EXCLUDE === args.value || FILTER_TYPES_EXCLUDE === args.previousValue) {
                                filterSyncController.syncHeaderFilter(column)
                            }
                        } else if ("filterValues" === propertyName) {
                            filterSyncController.syncHeaderFilter(column)
                        } else if (["filterValue", "selectedFilterOperation"].indexOf(propertyName) > -1) {
                            filterSyncController.syncFilterRow(column, column.filterValue)
                        }
                        filterSyncController._skipSyncColumnOptions = false
                    }
                }
                this.callBase(args);
                break;
            default:
                this.callBase(args)
        }
    }
};
var ColumnHeadersViewFilterSyncExtender = {
    _isHeaderFilterEmpty: function(column) {
        if (this.getController("data").isFilterSyncActive()) {
            return !Object(_filter_builder_utils__WEBPACK_IMPORTED_MODULE_2__["filterHasField"])(this.option("filterValue"), getColumnIdentifier(column))
        }
        return this.callBase(column)
    },
    _needUpdateFilterIndicators: function() {
        return !this.getController("data").isFilterSyncActive()
    },
    optionChanged: function(args) {
        if ("filterValue" === args.name) {
            this._updateHeaderFilterIndicators()
        } else {
            this.callBase(args)
        }
    }
};
var filterSyncModule = {
    defaultOptions: function() {
        return {
            filterValue: null,
            filterSyncEnabled: "auto"
        }
    },
    controllers: {
        filterSync: FilterSyncController
    },
    extenders: {
        controllers: {
            data: DataControllerFilterSyncExtender
        },
        views: {
            columnHeadersView: ColumnHeadersViewFilterSyncExtender
        }
    }
};


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.focus.js":
/*!************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.focus.js ***!
  \************************************************************************/
/*! exports provided: focusModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "focusModule", function() { return focusModule; });
/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/renderer */ "./node_modules/devextreme/esm/core/renderer.js");
/* harmony import */ var _ui_grid_core_modules__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ui.grid_core.modules */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.modules.js");
/* harmony import */ var _core_utils_iterator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/utils/iterator */ "./node_modules/devextreme/esm/core/utils/iterator.js");
/* harmony import */ var _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ui.grid_core.utils */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.utils.js");
/* harmony import */ var _core_utils_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/utils/common */ "./node_modules/devextreme/esm/core/utils/common.js");
/* harmony import */ var _core_utils_type__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core/utils/type */ "./node_modules/devextreme/esm/core/utils/type.js");
/* harmony import */ var _core_utils_deferred__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../core/utils/deferred */ "./node_modules/devextreme/esm/core/utils/deferred.js");
/**
 * DevExtreme (esm/ui/grid_core/ui.grid_core.focus.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */







var ROW_FOCUSED_CLASS = "dx-row-focused";
var FOCUSED_ROW_SELECTOR = ".dx-row." + ROW_FOCUSED_CLASS;
var TABLE_POSTFIX_CLASS = "table";
var CELL_FOCUS_DISABLED_CLASS = "dx-cell-focus-disabled";
var FocusController = _ui_grid_core_modules__WEBPACK_IMPORTED_MODULE_1__["default"].ViewController.inherit({
    init: function() {
        this._dataController = this.getController("data");
        this._keyboardController = this.getController("keyboardNavigation");
        this.component._optionsByReference.focusedRowKey = true
    },
    optionChanged: function(args) {
        if ("focusedRowIndex" === args.name) {
            var focusedRowKey = this.option("focusedRowKey");
            this._focusRowByIndex(args.value);
            this._triggerFocusedRowChangedIfNeed(focusedRowKey, args.value);
            args.handled = true
        } else if ("focusedRowKey" === args.name) {
            args.handled = true;
            if (Array.isArray(args.value) && JSON.stringify(args.value) === JSON.stringify(args.previousValue)) {
                return
            }
            var focusedRowIndex = this.option("focusedRowIndex");
            this._focusRowByKey(args.value);
            this._triggerFocusedRowChangedIfNeed(args.value, focusedRowIndex)
        } else if ("focusedColumnIndex" === args.name) {
            args.handled = true
        } else if ("focusedRowEnabled" === args.name) {
            args.handled = true
        } else if ("autoNavigateToFocusedRow" === args.name) {
            args.handled = true
        } else {
            this.callBase(args)
        }
    },
    _triggerFocusedRowChangedIfNeed: function(focusedRowKey, focusedRowIndex) {
        var focusedRowIndexByKey = this.getFocusedRowIndexByKey(focusedRowKey);
        if (focusedRowIndex === focusedRowIndexByKey) {
            var rowIndex = this._dataController.getRowIndexByKey(focusedRowKey);
            if (rowIndex >= 0) {
                var $rowElement = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(this.getView("rowsView").getRowElement(rowIndex));
                this.getController("keyboardNavigation")._fireFocusedRowChanged($rowElement, focusedRowIndex)
            }
        }
    },
    isAutoNavigateToFocusedRow: function() {
        return "infinite" !== this.option("scrolling.mode") && this.option("autoNavigateToFocusedRow")
    },
    _focusRowByIndex: function(index, operationTypes) {
        if (!this.option("focusedRowEnabled")) {
            return
        }
        index = void 0 !== index ? index : this.option("focusedRowIndex");
        if (index < 0) {
            if (this.isAutoNavigateToFocusedRow()) {
                this._resetFocusedRow()
            }
        } else {
            this._focusRowByIndexCore(index, operationTypes)
        }
    },
    _focusRowByIndexCore: function(index, operationTypes) {
        var dataController = this.getController("data");
        var pageSize = dataController.pageSize();
        var setKeyByIndex = () => {
            if (this._isValidFocusedRowIndex(index)) {
                var rowIndex = index - dataController.getRowIndexOffset(true);
                if (!operationTypes || operationTypes.paging && !operationTypes.filtering) {
                    var lastItemIndex = dataController._getLastItemIndex();
                    rowIndex = Math.min(rowIndex, lastItemIndex)
                }
                var focusedRowKey = dataController.getKeyByRowIndex(rowIndex, true);
                if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isDefined"])(focusedRowKey) && !this.isRowFocused(focusedRowKey)) {
                    this.option("focusedRowKey", focusedRowKey)
                }
            }
        };
        if (pageSize >= 0) {
            if (!this._isLocalRowIndex(index)) {
                var pageIndex = Math.floor(index / dataController.pageSize());
                Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_6__["when"])(dataController.pageIndex(pageIndex), dataController.waitReady()).done(() => {
                    setKeyByIndex()
                })
            } else {
                setKeyByIndex()
            }
        }
    },
    _isLocalRowIndex(index) {
        var dataController = this.getController("data");
        var isVirtualScrolling = this.getController("keyboardNavigation")._isVirtualScrolling();
        if (isVirtualScrolling) {
            var pageIndex = Math.floor(index / dataController.pageSize());
            var virtualItems = dataController.virtualItemsCount();
            var virtualItemsBegin = virtualItems ? virtualItems.begin : -1;
            var visibleRowsCount = dataController.getVisibleRows().length + dataController.getRowIndexOffset();
            var visiblePagesCount = Math.ceil(visibleRowsCount / dataController.pageSize());
            return virtualItemsBegin <= index && visiblePagesCount > pageIndex
        }
        return true
    },
    _setFocusedRowKeyByIndex: function(index) {
        var dataController = this.getController("data");
        if (this._isValidFocusedRowIndex(index)) {
            var rowIndex = Math.min(index - dataController.getRowIndexOffset(), dataController.items().length - 1);
            var focusedRowKey = dataController.getKeyByRowIndex(rowIndex);
            if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isDefined"])(focusedRowKey) && !this.isRowFocused(focusedRowKey)) {
                this.option("focusedRowKey", focusedRowKey)
            }
        }
    },
    _focusRowByKey: function(key) {
        if (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isDefined"])(key)) {
            this._resetFocusedRow()
        } else {
            this._navigateToRow(key, true)
        }
    },
    _resetFocusedRow: function() {
        var focusedRowKey = this.option("focusedRowKey");
        var isFocusedRowKeyDefined = Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isDefined"])(focusedRowKey);
        if (!isFocusedRowKeyDefined && this.option("focusedRowIndex") < 0) {
            return
        }
        var keyboardController = this.getController("keyboardNavigation");
        if (isFocusedRowKeyDefined) {
            this.option("focusedRowKey", null)
        }
        keyboardController.setFocusedRowIndex(-1);
        this.option("focusedRowIndex", -1);
        this.getController("data").updateItems({
            changeType: "updateFocusedRow",
            focusedRowKey: null
        });
        keyboardController._fireFocusedRowChanged(void 0, -1)
    },
    _isValidFocusedRowIndex: function(rowIndex) {
        var dataController = this.getController("data");
        var row = dataController.getVisibleRows()[rowIndex];
        return !row || "data" === row.rowType || "group" === row.rowType
    },
    publicMethods: function() {
        return ["navigateToRow", "isRowFocused"]
    },
    navigateToRow: function(key) {
        if (!this.isAutoNavigateToFocusedRow()) {
            this.option("focusedRowIndex", -1)
        }
        return this._navigateToRow(key)
    },
    _navigateToRow: function(key, needFocusRow) {
        var that = this;
        var dataController = that.getController("data");
        var isAutoNavigate = that.isAutoNavigateToFocusedRow();
        var d = new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_6__["Deferred"];
        if (void 0 === key || !dataController.dataSource()) {
            return d.reject().promise()
        }
        var rowIndexByKey = that.getFocusedRowIndexByKey(key);
        if (!isAutoNavigate && needFocusRow || rowIndexByKey >= 0) {
            that._navigateTo(key, d, needFocusRow)
        } else {
            dataController.getPageIndexByKey(key).done((function(pageIndex) {
                if (pageIndex < 0) {
                    d.resolve(-1);
                    return
                }
                if (pageIndex === dataController.pageIndex()) {
                    dataController.reload().done((function() {
                        if (that.isRowFocused(key) && dataController.getRowIndexByKey(key) >= 0) {
                            d.resolve(that.getFocusedRowIndexByKey(key))
                        } else {
                            that._navigateTo(key, d, needFocusRow)
                        }
                    })).fail(d.reject)
                } else {
                    dataController.pageIndex(pageIndex).done((function() {
                        that._navigateTo(key, d, needFocusRow)
                    })).fail(d.reject)
                }
            })).fail(d.reject)
        }
        return d.promise()
    },
    _navigateTo: function(key, deferred, needFocusRow) {
        var visibleRowIndex = this.getController("data").getRowIndexByKey(key);
        var isVirtualRowRenderingMode = _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_3__["default"].isVirtualRowRendering(this);
        var isAutoNavigate = this.isAutoNavigateToFocusedRow();
        if (isAutoNavigate && isVirtualRowRenderingMode && visibleRowIndex < 0) {
            this._navigateToVirtualRow(key, deferred, needFocusRow)
        } else {
            this._navigateToVisibleRow(key, deferred, needFocusRow)
        }
    },
    _navigateToVisibleRow: function(key, deferred, needFocusRow) {
        if (needFocusRow) {
            this._triggerUpdateFocusedRow(key, deferred)
        } else {
            var focusedRowIndex = this.getFocusedRowIndexByKey(key);
            this.getView("rowsView").scrollToRowElement(key, deferred).done((function() {
                deferred.resolve(focusedRowIndex)
            }))
        }
    },
    _navigateToVirtualRow: function(key, deferred, needFocusRow) {
        var that = this;
        var dataController = this.getController("data");
        var rowsScrollController = dataController._rowsScrollController;
        var rowIndex = _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_3__["default"].getIndexByKey(key, dataController.items(true));
        var scrollable = that.getView("rowsView").getScrollable();
        if (rowsScrollController && scrollable && rowIndex >= 0) {
            var focusedRowIndex = rowIndex + dataController.getRowIndexOffset(true);
            var offset = rowsScrollController.getItemOffset(focusedRowIndex);
            that.component.on("contentReady", (function triggerUpdateFocusedRow() {
                that.component.off("contentReady", triggerUpdateFocusedRow);
                if (needFocusRow) {
                    that._triggerUpdateFocusedRow(key, deferred)
                } else {
                    deferred.resolve(focusedRowIndex)
                }
            }));
            this.getView("rowsView").scrollTopPosition(offset)
        } else {
            deferred.resolve(-1)
        }
    },
    _triggerUpdateFocusedRow: function(key, deferred) {
        var dataController = this.getController("data");
        var focusedRowIndex = this.getFocusedRowIndexByKey(key);
        if (this._isValidFocusedRowIndex(focusedRowIndex)) {
            var d;
            if (this.option("focusedRowEnabled")) {
                dataController.updateItems({
                    changeType: "updateFocusedRow",
                    focusedRowKey: key
                })
            } else {
                d = this.getView("rowsView").scrollToRowElement(key)
            }
            Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_6__["when"])(d).done(() => {
                this.getController("keyboardNavigation").setFocusedRowIndex(focusedRowIndex);
                deferred && deferred.resolve(focusedRowIndex)
            })
        } else {
            deferred && deferred.resolve(-1)
        }
    },
    getFocusedRowIndexByKey: function(key) {
        var dataController = this.getController("data");
        var loadedRowIndex = dataController.getRowIndexByKey(key, true);
        return loadedRowIndex >= 0 ? loadedRowIndex + dataController.getRowIndexOffset(true) : -1
    },
    _focusRowByKeyOrIndex: function() {
        var focusedRowKey = this.option("focusedRowKey");
        var currentFocusedRowIndex = this.option("focusedRowIndex");
        var keyboardController = this.getController("keyboardNavigation");
        var dataController = this.getController("data");
        if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isDefined"])(focusedRowKey)) {
            var visibleRowIndex = dataController.getRowIndexByKey(focusedRowKey);
            if (visibleRowIndex >= 0) {
                if (keyboardController._isVirtualScrolling()) {
                    currentFocusedRowIndex = visibleRowIndex + dataController.getRowIndexOffset()
                }
                keyboardController.setFocusedRowIndex(currentFocusedRowIndex);
                this._triggerUpdateFocusedRow(focusedRowKey)
            } else {
                this._navigateToRow(focusedRowKey, true).done(focusedRowIndex => {
                    if (currentFocusedRowIndex >= 0 && focusedRowIndex < 0) {
                        this._focusRowByIndex()
                    } else if (currentFocusedRowIndex < 0 && focusedRowIndex >= 0) {
                        keyboardController.setFocusedRowIndex(focusedRowIndex)
                    }
                })
            }
        } else if (currentFocusedRowIndex >= 0) {
            this.getController("focus")._focusRowByIndex(currentFocusedRowIndex)
        }
    },
    isRowFocused: function(key) {
        var focusedRowKey = this.option("focusedRowKey");
        if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isDefined"])(focusedRowKey)) {
            return Object(_core_utils_common__WEBPACK_IMPORTED_MODULE_4__["equalByValue"])(key, this.option("focusedRowKey"))
        }
    },
    updateFocusedRow: function(change) {
        var that = this;
        var focusedRowIndex = that._dataController.getRowIndexByKey(change.focusedRowKey);
        var rowsView = that.getView("rowsView");
        var $tableElement;
        var $mainRow;
        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_2__["each"])(rowsView.getTableElements(), (function(index, element) {
            var isMainTable = 0 === index;
            $tableElement = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(element);
            that._clearPreviousFocusedRow($tableElement, focusedRowIndex);
            var $row = that._prepareFocusedRow({
                changedItem: that._dataController.getVisibleRows()[focusedRowIndex],
                $tableElement: $tableElement,
                focusedRowIndex: focusedRowIndex
            });
            if (isMainTable) {
                $mainRow = $row
            }
        }));
        $mainRow && rowsView.scrollToElementVertically($mainRow)
    },
    _clearPreviousFocusedRow: function($tableElement, focusedRowIndex) {
        var $prevRowFocusedElement = $tableElement.find(FOCUSED_ROW_SELECTOR).filter((_, focusedRow) => {
            var $focusedRowTable = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(focusedRow).closest(".".concat(this.addWidgetPrefix(TABLE_POSTFIX_CLASS)));
            return $tableElement.is($focusedRowTable)
        });
        $prevRowFocusedElement.removeClass(ROW_FOCUSED_CLASS).removeClass(CELL_FOCUS_DISABLED_CLASS).removeAttr("tabindex");
        $prevRowFocusedElement.children("td").removeAttr("tabindex");
        if (0 !== focusedRowIndex) {
            var $firstRow = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(this.getView("rowsView").getRowElement(0));
            $firstRow.removeClass(CELL_FOCUS_DISABLED_CLASS).removeAttr("tabIndex")
        }
    },
    _prepareFocusedRow: function(options) {
        var $row;
        var changedItem = options.changedItem;
        if (changedItem && ("data" === changedItem.rowType || "group" === changedItem.rowType)) {
            var focusedRowIndex = options.focusedRowIndex;
            var $tableElement = options.$tableElement;
            var tabIndex = this.option("tabindex") || 0;
            var rowsView = this.getView("rowsView");
            $row = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(rowsView._getRowElements($tableElement).eq(focusedRowIndex));
            $row.addClass(ROW_FOCUSED_CLASS).attr("tabindex", tabIndex)
        }
        return $row
    }
});
var focusModule = {
    defaultOptions: function() {
        return {
            focusedRowEnabled: false,
            autoNavigateToFocusedRow: true,
            focusedRowKey: null,
            focusedRowIndex: -1,
            focusedColumnIndex: -1
        }
    },
    controllers: {
        focus: FocusController
    },
    extenders: {
        controllers: {
            keyboardNavigation: {
                init: function() {
                    var rowIndex = this.option("focusedRowIndex");
                    var columnIndex = this.option("focusedColumnIndex");
                    this.createAction("onFocusedRowChanging", {
                        excludeValidators: ["disabled", "readOnly"]
                    });
                    this.createAction("onFocusedRowChanged", {
                        excludeValidators: ["disabled", "readOnly"]
                    });
                    this.createAction("onFocusedCellChanging", {
                        excludeValidators: ["disabled", "readOnly"]
                    });
                    this.createAction("onFocusedCellChanged", {
                        excludeValidators: ["disabled", "readOnly"]
                    });
                    this.callBase();
                    this.setRowFocusType();
                    this._focusedCellPosition = {};
                    if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isDefined"])(rowIndex)) {
                        this._focusedCellPosition.rowIndex = this.option("focusedRowIndex")
                    }
                    if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isDefined"])(columnIndex)) {
                        this._focusedCellPosition.columnIndex = this.option("focusedColumnIndex")
                    }
                },
                setFocusedRowIndex: function(rowIndex) {
                    var dataController = this.getController("data");
                    this.callBase(rowIndex);
                    var visibleRowIndex = rowIndex - dataController.getRowIndexOffset();
                    var visibleRow = dataController.getVisibleRows()[visibleRowIndex];
                    if (!visibleRow || !visibleRow.isNewRow) {
                        this.option("focusedRowIndex", rowIndex)
                    }
                },
                setFocusedColumnIndex: function(columnIndex) {
                    this.callBase(columnIndex);
                    this.option("focusedColumnIndex", columnIndex)
                },
                _escapeKeyHandler: function(eventArgs, isEditing) {
                    if (isEditing || !this.option("focusedRowEnabled")) {
                        this.callBase(eventArgs, isEditing);
                        return
                    }
                    if (this.isCellFocusType()) {
                        this.setRowFocusType();
                        this._focus(this._getCellElementFromTarget(eventArgs.originalEvent.target), true)
                    }
                },
                _updateFocusedCellPosition: function($cell, direction) {
                    var prevRowIndex = this.option("focusedRowIndex");
                    var prevColumnIndex = this.option("focusedColumnIndex");
                    var position = this.callBase($cell, direction);
                    if (position && position.columnIndex >= 0) {
                        this._fireFocusedCellChanged($cell, prevColumnIndex, prevRowIndex)
                    }
                }
            },
            editorFactory: {
                renderFocusOverlay: function($element, hideBorder) {
                    var keyboardController = this.getController("keyboardNavigation");
                    var focusedRowEnabled = this.option("focusedRowEnabled");
                    var editingController = this.getController("editing");
                    var $cell;
                    if (!focusedRowEnabled || !(null !== keyboardController && void 0 !== keyboardController && keyboardController.isRowFocusType()) || editingController.isEditing()) {
                        this.callBase($element, hideBorder)
                    } else if (focusedRowEnabled) {
                        var isRowElement = "row" === keyboardController._getElementType($element);
                        if (isRowElement && !$element.hasClass(ROW_FOCUSED_CLASS)) {
                            $cell = keyboardController.getFirstValidCellInRow($element);
                            keyboardController.focus($cell)
                        }
                    }
                }
            },
            columns: {
                getSortDataSourceParameters: function(_, sortByKey) {
                    var result = this.callBase.apply(this, arguments);
                    var dataController = this.getController("data");
                    var dataSource = dataController._dataSource;
                    var store = dataController.store();
                    var key = store && store.key();
                    var remoteOperations = dataSource && dataSource.remoteOperations() || {};
                    var isLocalOperations = Object.keys(remoteOperations).every(operationName => !remoteOperations[operationName]);
                    if (key && (this.option("focusedRowEnabled") && false !== this.getController("focus").isAutoNavigateToFocusedRow() || sortByKey)) {
                        key = Array.isArray(key) ? key : [key];
                        var notSortedKeys = key.filter(key => !this.columnOption(key, "sortOrder"));
                        if (notSortedKeys.length) {
                            result = result || [];
                            if (isLocalOperations) {
                                result.push({
                                    selector: dataSource.getDataIndexGetter(),
                                    desc: false
                                })
                            } else {
                                notSortedKeys.forEach(notSortedKey => result.push({
                                    selector: notSortedKey,
                                    desc: false
                                }))
                            }
                        }
                    }
                    return result
                }
            },
            data: {
                _applyChange: function(change) {
                    if (change && "updateFocusedRow" === change.changeType) {
                        return
                    }
                    return this.callBase.apply(this, arguments)
                },
                _fireChanged: function(e) {
                    this.callBase(e);
                    if (this.option("focusedRowEnabled") && this._dataSource) {
                        var isPartialUpdate = "update" === e.changeType && e.repaintChangesOnly;
                        var isPartialUpdateWithDeleting = isPartialUpdate && e.changeTypes && e.changeTypes.indexOf("remove") >= 0;
                        if ("refresh" === e.changeType && e.items.length || isPartialUpdateWithDeleting) {
                            this._updatePageIndexes();
                            this.processUpdateFocusedRow(e)
                        } else if ("append" === e.changeType || "prepend" === e.changeType) {
                            this._updatePageIndexes()
                        } else if ("update" === e.changeType && e.repaintChangesOnly) {
                            this.processUpdateFocusedRow(e)
                        }
                    }
                },
                _updatePageIndexes: function() {
                    var prevRenderingPageIndex = this._lastRenderingPageIndex || 0;
                    var renderingPageIndex = this._rowsScrollController ? this._rowsScrollController.pageIndex() : 0;
                    this._lastRenderingPageIndex = renderingPageIndex;
                    this._isPagingByRendering = renderingPageIndex !== prevRenderingPageIndex
                },
                isPagingByRendering: function() {
                    return this._isPagingByRendering
                },
                processUpdateFocusedRow: function(e) {
                    var operationTypes = e.operationTypes || {};
                    var focusController = this.getController("focus");
                    var {
                        reload: reload,
                        fullReload: fullReload
                    } = operationTypes;
                    var keyboardController = this.getController("keyboardNavigation");
                    var isVirtualScrolling = keyboardController._isVirtualScrolling();
                    var focusedRowKey = this.option("focusedRowKey");
                    var isAutoNavigate = focusController.isAutoNavigateToFocusedRow();
                    if (reload && !fullReload && Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isDefined"])(focusedRowKey)) {
                        focusController._navigateToRow(focusedRowKey, true).done((function(focusedRowIndex) {
                            if (focusedRowIndex < 0) {
                                focusController._focusRowByIndex(void 0, operationTypes)
                            }
                        }))
                    } else if (operationTypes.paging && !isVirtualScrolling) {
                        if (isAutoNavigate) {
                            var rowIndexByKey = this.getRowIndexByKey(focusedRowKey);
                            var isValidRowIndexByKey = rowIndexByKey >= 0;
                            var focusedRowIndex = this.option("focusedRowIndex");
                            var needFocusRowByIndex = focusedRowIndex >= 0 && (focusedRowIndex === rowIndexByKey || !isValidRowIndexByKey);
                            if (needFocusRowByIndex) {
                                focusController._focusRowByIndex(void 0, operationTypes)
                            }
                        } else if (this.getRowIndexByKey(focusedRowKey) < 0) {
                            this.option("focusedRowIndex", -1)
                        }
                    } else if (operationTypes.fullReload) {
                        focusController._focusRowByKeyOrIndex()
                    }
                },
                getPageIndexByKey: function(key) {
                    var that = this;
                    var d = new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_6__["Deferred"];
                    that.getGlobalRowIndexByKey(key).done((function(globalIndex) {
                        d.resolve(globalIndex >= 0 ? Math.floor(globalIndex / that.pageSize()) : -1)
                    })).fail(d.reject);
                    return d.promise()
                },
                getGlobalRowIndexByKey: function(key) {
                    if (this._dataSource.group()) {
                        return this._calculateGlobalRowIndexByGroupedData(key)
                    }
                    return this._calculateGlobalRowIndexByFlatData(key)
                },
                _calculateGlobalRowIndexByFlatData: function(key, groupFilter, useGroup) {
                    var that = this;
                    var deferred = new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_6__["Deferred"];
                    var dataSource = that._dataSource;
                    if (Array.isArray(key)) {
                        return deferred.resolve(-1).promise()
                    }
                    var filter = that._generateFilterByKey(key);
                    dataSource.load({
                        filter: that._concatWithCombinedFilter(filter),
                        skip: 0,
                        take: 1
                    }).done((function(data) {
                        if (data.length > 0) {
                            filter = that._generateOperationFilterByKey(key, data[0], useGroup);
                            dataSource.load({
                                filter: that._concatWithCombinedFilter(filter, groupFilter),
                                skip: 0,
                                take: 1,
                                requireTotalCount: true
                            }).done((function(_, extra) {
                                deferred.resolve(extra.totalCount)
                            }))
                        } else {
                            deferred.resolve(-1)
                        }
                    }));
                    return deferred.promise()
                },
                _concatWithCombinedFilter: function(filter, groupFilter) {
                    var combinedFilter = this.getCombinedFilter();
                    return _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_3__["default"].combineFilters([filter, combinedFilter, groupFilter])
                },
                _generateBooleanFilter: function(selector, value, sortInfo) {
                    var result;
                    if (false === value) {
                        result = [selector, "=", sortInfo.desc ? true : null]
                    } else if (true === value ? !sortInfo.desc : sortInfo.desc) {
                        result = [selector, "<>", value]
                    }
                    return result
                },
                _generateOperationFilterByKey: function(key, rowData, useGroup) {
                    var that = this;
                    var dataSource = that._dataSource;
                    var filter = that._generateFilterByKey(key, "<");
                    var sort = that._columnsController.getSortDataSourceParameters(!dataSource.remoteOperations().filtering, true);
                    if (useGroup) {
                        var group = that._columnsController.getGroupDataSourceParameters(!dataSource.remoteOperations().filtering);
                        if (group) {
                            sort = sort ? group.concat(sort) : group
                        }
                    }
                    if (sort) {
                        sort.slice().reverse().forEach((function(sortInfo) {
                            var selector = sortInfo.selector;
                            var getter;
                            if ("function" === typeof selector) {
                                getter = selector
                            } else {
                                getter = that._columnsController.columnOption(selector, "selector")
                            }
                            var value = getter ? getter(rowData) : rowData[selector];
                            filter = [
                                [selector, "=", value], "and", filter
                            ];
                            if (null === value || Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isBoolean"])(value)) {
                                var booleanFilter = that._generateBooleanFilter(selector, value, sortInfo);
                                if (booleanFilter) {
                                    filter = [booleanFilter, "or", filter]
                                }
                            } else {
                                var filterOperation = sortInfo.desc ? ">" : "<";
                                var sortFilter = [selector, filterOperation, value];
                                if (!sortInfo.desc) {
                                    sortFilter = [sortFilter, "or", [selector, "=", null]]
                                }
                                filter = [sortFilter, "or", filter]
                            }
                        }))
                    }
                    return filter
                },
                _generateFilterByKey: function(key, operation) {
                    var dataSourceKey = this._dataSource.key();
                    var filter = [];
                    if (!operation) {
                        operation = "="
                    }
                    if (Array.isArray(dataSourceKey)) {
                        for (var i = 0; i < dataSourceKey.length; ++i) {
                            var keyPart = key[dataSourceKey[i]];
                            if (keyPart) {
                                if (filter.length > 0) {
                                    filter.push("and")
                                }
                                filter.push([dataSourceKey[i], operation, keyPart])
                            }
                        }
                    } else {
                        filter = [dataSourceKey, operation, key]
                    }
                    return filter
                },
                _getLastItemIndex: function() {
                    return this.items(true).length - 1
                }
            },
            editing: {
                _deleteRowCore: function(rowIndex) {
                    var deferred = this.callBase.apply(this, arguments);
                    var dataController = this.getController("data");
                    var rowKey = dataController.getKeyByRowIndex(rowIndex);
                    deferred.done(() => {
                        var rowIndex = dataController.getRowIndexByKey(rowKey);
                        var visibleRows = dataController.getVisibleRows();
                        if (-1 === rowIndex && !visibleRows.length) {
                            this.getController("focus")._resetFocusedRow()
                        }
                    })
                }
            }
        },
        views: {
            rowsView: {
                _createRow: function(row) {
                    var $row = this.callBase.apply(this, arguments);
                    if (this.option("focusedRowEnabled") && row) {
                        if (this.getController("focus").isRowFocused(row.key)) {
                            $row.addClass(ROW_FOCUSED_CLASS)
                        }
                    }
                    return $row
                },
                _checkRowKeys: function(options) {
                    this.callBase.apply(this, arguments);
                    if (this.option("focusedRowEnabled") && this.option("dataSource")) {
                        var store = this._dataController.store();
                        if (store && !store.key()) {
                            this._dataController.fireError("E1042", "Row focusing")
                        }
                    }
                },
                _update: function(change) {
                    if ("updateFocusedRow" === change.changeType) {
                        if (this.option("focusedRowEnabled")) {
                            this.getController("focus").updateFocusedRow(change)
                        }
                    } else {
                        this.callBase(change)
                    }
                },
                updateFocusElementTabIndex: function($cellElements, preventScroll) {
                    var rowIndex = this.getController("keyboardNavigation").getVisibleRowIndex();
                    var row = this._dataController.getVisibleRows()[rowIndex];
                    if (this.option("focusedRowEnabled") && !(null !== row && void 0 !== row && row.isNewRow)) {
                        this._setFocusedRowElementTabIndex(preventScroll)
                    } else {
                        this.callBase($cellElements)
                    }
                },
                _setFocusedRowElementTabIndex: function(preventScroll) {
                    var focusedRowKey = this.option("focusedRowKey");
                    var tabIndex = this.option("tabIndex") || 0;
                    var dataController = this._dataController;
                    var columnsController = this._columnsController;
                    var rowIndex = dataController.getRowIndexByKey(focusedRowKey);
                    var columnIndex = this.option("focusedColumnIndex");
                    var $row = this._findRowElementForTabIndex();
                    if (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isDefined"])(this._scrollToFocusOnResize)) {
                        this._scrollToFocusOnResize = () => {
                            this.scrollToElementVertically(this._findRowElementForTabIndex());
                            this.resizeCompleted.remove(this._scrollToFocusOnResize)
                        }
                    }
                    $row.attr("tabIndex", tabIndex);
                    if (rowIndex >= 0 && !preventScroll) {
                        if (columnIndex < 0) {
                            columnIndex = 0
                        }
                        rowIndex += dataController.getRowIndexOffset();
                        columnIndex += columnsController.getColumnIndexOffset();
                        this.getController("keyboardNavigation").setFocusedCellPosition(rowIndex, columnIndex);
                        if (this.getController("focus").isAutoNavigateToFocusedRow()) {
                            var dataSource = dataController.dataSource();
                            var operationTypes = dataSource && dataSource.operationTypes();
                            if (operationTypes && !operationTypes.paging && !dataController.isPagingByRendering()) {
                                this.resizeCompleted.remove(this._scrollToFocusOnResize);
                                this.resizeCompleted.add(this._scrollToFocusOnResize)
                            }
                        }
                    }
                },
                _findRowElementForTabIndex: function() {
                    var focusedRowKey = this.option("focusedRowKey");
                    var rowIndex = this._dataController.getRowIndexByKey(focusedRowKey);
                    return Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(this.getRowElement(rowIndex >= 0 ? rowIndex : 0))
                },
                scrollToRowElement: function(key) {
                    var rowIndex = this.getController("data").getRowIndexByKey(key);
                    var $row = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(this.getRow(rowIndex));
                    return this.scrollToElementVertically($row)
                },
                scrollToElementVertically: function($row) {
                    var scrollable = this.getScrollable();
                    if (scrollable && $row.length) {
                        var position = scrollable.getScrollElementPosition($row, "vertical");
                        return this.scrollTopPosition(position)
                    }
                    return (new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_6__["Deferred"]).resolve()
                },
                scrollTopPosition: function(scrollTop) {
                    var d = new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_6__["Deferred"];
                    var scrollable = this.getScrollable();
                    if (scrollable) {
                        var currentScrollTop = scrollable.scrollTop();
                        var scrollHandler = () => {
                            scrollable.off("scroll", scrollHandler);
                            d.resolve()
                        };
                        if (scrollTop !== currentScrollTop) {
                            scrollable.on("scroll", scrollHandler);
                            this._dataController.resetFilterApplying();
                            scrollable.scrollTo({
                                top: scrollTop
                            });
                            return d.promise()
                        }
                    }
                    return d.resolve()
                }
            }
        }
    }
};


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.grid_view.js":
/*!****************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.grid_view.js ***!
  \****************************************************************************/
/*! exports provided: gridViewModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "gridViewModule", function() { return gridViewModule; });
/* harmony import */ var _core_utils_size__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/utils/size */ "./node_modules/devextreme/esm/core/utils/size.js");
/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/renderer */ "./node_modules/devextreme/esm/core/renderer.js");
/* harmony import */ var _ui_grid_core_modules__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ui.grid_core.modules */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.modules.js");
/* harmony import */ var _core_utils_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/utils/common */ "./node_modules/devextreme/esm/core/utils/common.js");
/* harmony import */ var _core_utils_window__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/utils/window */ "./node_modules/devextreme/esm/core/utils/window.js");
/* harmony import */ var _core_utils_iterator__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core/utils/iterator */ "./node_modules/devextreme/esm/core/utils/iterator.js");
/* harmony import */ var _core_utils_type__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../core/utils/type */ "./node_modules/devextreme/esm/core/utils/type.js");
/* harmony import */ var _core_utils_position__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../core/utils/position */ "./node_modules/devextreme/esm/core/utils/position.js");
/* harmony import */ var _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./ui.grid_core.utils */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.utils.js");
/* harmony import */ var _localization_message__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../localization/message */ "./node_modules/devextreme/esm/localization/message.js");
/* harmony import */ var _core_utils_deferred__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../core/utils/deferred */ "./node_modules/devextreme/esm/core/utils/deferred.js");
/* harmony import */ var _core_dom_adapter__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../core/dom_adapter */ "./node_modules/devextreme/esm/core/dom_adapter.js");
/* harmony import */ var _shared_accessibility__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../shared/accessibility */ "./node_modules/devextreme/esm/ui/shared/accessibility.js");
/* harmony import */ var _core_utils_browser__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../core/utils/browser */ "./node_modules/devextreme/esm/core/utils/browser.js");
/**
 * DevExtreme (esm/ui/grid_core/ui.grid_core.grid_view.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */














var BORDERS_CLASS = "borders";
var TABLE_FIXED_CLASS = "table-fixed";
var IMPORTANT_MARGIN_CLASS = "important-margin";
var GRIDBASE_CONTAINER_CLASS = "dx-gridbase-container";
var HIDDEN_COLUMNS_WIDTH = "adaptiveHidden";
var VIEW_NAMES = ["columnsSeparatorView", "blockSeparatorView", "trackerView", "headerPanel", "columnHeadersView", "rowsView", "footerView", "columnChooserView", "filterPanelView", "pagerView", "draggingHeaderView", "contextMenuView", "errorView", "headerFilterView", "filterBuilderView"];
var isPercentWidth = function(width) {
    return Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isString"])(width) && "%" === width.slice(-1)
};
var isPixelWidth = function(width) {
    return Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isString"])(width) && "px" === width.slice(-2)
};
var getContainerHeight = function($container) {
    var clientHeight = $container.get(0).clientHeight;
    var paddingTop = parseFloat($container.css("paddingTop"));
    var paddingBottom = parseFloat($container.css("paddingBottom"));
    return clientHeight - paddingTop - paddingBottom
};
var calculateFreeWidth = function(that, widths) {
    var contentWidth = that._rowsView.contentWidth();
    var totalWidth = that._getTotalWidth(widths, contentWidth);
    return contentWidth - totalWidth
};
var calculateFreeWidthWithCurrentMinWidth = function(that, columnIndex, currentMinWidth, widths) {
    return calculateFreeWidth(that, widths.map((function(width, index) {
        return index === columnIndex ? currentMinWidth : width
    })))
};
var restoreFocus = function(focusedElement, selectionRange) {
    _shared_accessibility__WEBPACK_IMPORTED_MODULE_12__["hiddenFocus"](focusedElement);
    _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_8__["default"].setSelectionRange(focusedElement, selectionRange)
};
var ResizingController = _ui_grid_core_modules__WEBPACK_IMPORTED_MODULE_2__["default"].ViewController.inherit({
    _initPostRenderHandlers: function() {
        var dataController = this._dataController;
        if (!this._refreshSizesHandler) {
            this._refreshSizesHandler = e => {
                dataController.changed.remove(this._refreshSizesHandler);
                var templateDeferreds = e && e.templateDeferreds || [];
                _core_utils_deferred__WEBPACK_IMPORTED_MODULE_10__["when"].apply(this, templateDeferreds).done(() => {
                    this._refreshSizes(e)
                })
            };
            dataController.changed.add(() => {
                dataController.changed.add(this._refreshSizesHandler)
            })
        }
    },
    _refreshSizes: function(e) {
        var resizeDeferred;
        var that = this;
        var changeType = e && e.changeType;
        var isDelayed = e && e.isDelayed;
        var items = that._dataController.items();
        if (!e || "refresh" === changeType || "prepend" === changeType || "append" === changeType) {
            if (!isDelayed) {
                resizeDeferred = that.resize()
            }
        } else if ("update" === changeType) {
            var _e$changeTypes;
            if (0 === (null === (_e$changeTypes = e.changeTypes) || void 0 === _e$changeTypes ? void 0 : _e$changeTypes.length)) {
                return
            }
            if ((items.length > 1 || "insert" !== e.changeTypes[0]) && !(0 === items.length && "remove" === e.changeTypes[0]) && !e.needUpdateDimensions) {
                Object(_core_utils_common__WEBPACK_IMPORTED_MODULE_3__["deferUpdate"])(() => Object(_core_utils_common__WEBPACK_IMPORTED_MODULE_3__["deferRender"])(() => Object(_core_utils_common__WEBPACK_IMPORTED_MODULE_3__["deferUpdate"])(() => {
                    that._setScrollerSpacing(that._hasHeight);
                    that._rowsView.resize()
                })))
            } else {
                resizeDeferred = that.resize()
            }
        }
        if (changeType && "updateSelection" !== changeType && "updateFocusedRow" !== changeType && "pageIndex" !== changeType && !isDelayed) {
            Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_10__["when"])(resizeDeferred).done((function() {
                that._setAriaRowColCount();
                that.fireContentReadyAction()
            }))
        }
    },
    fireContentReadyAction: function() {
        this.component._fireContentReadyAction()
    },
    _setAriaRowColCount: function() {
        var component = this.component;
        component.setAria({
            rowCount: this._dataController.totalItemsCount(),
            colCount: component.columnCount()
        }, component.$element().children("." + GRIDBASE_CONTAINER_CLASS))
    },
    _getBestFitWidths: function() {
        var _widths;
        var rowsView = this._rowsView;
        var columnHeadersView = this._columnHeadersView;
        var widths = rowsView.getColumnWidths();
        if (!(null !== (_widths = widths) && void 0 !== _widths && _widths.length)) {
            var _rowsView$getTableEle;
            var headersTableElement = columnHeadersView.getTableElement();
            columnHeadersView.setTableElement(null === (_rowsView$getTableEle = rowsView.getTableElement()) || void 0 === _rowsView$getTableEle ? void 0 : _rowsView$getTableEle.children(".dx-header"));
            widths = columnHeadersView.getColumnWidths();
            columnHeadersView.setTableElement(headersTableElement)
        }
        return widths
    },
    _setVisibleWidths: function(visibleColumns, widths) {
        var columnsController = this._columnsController;
        columnsController.beginUpdate();
        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_5__["each"])(visibleColumns, (function(index, column) {
            var columnId = columnsController.getColumnId(column);
            columnsController.columnOption(columnId, "visibleWidth", widths[index])
        }));
        columnsController.endUpdate()
    },
    _toggleBestFitModeForView: function(view, className, isBestFit) {
        if (!view || !view.isVisible()) {
            return
        }
        var $rowsTables = this._rowsView.getTableElements();
        var $viewTables = view.getTableElements();
        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_5__["each"])($rowsTables, (index, tableElement) => {
            var $tableBody;
            var $rowsTable = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(tableElement);
            var $viewTable = $viewTables.eq(index);
            if ($viewTable && $viewTable.length) {
                if (isBestFit) {
                    $tableBody = $viewTable.children("tbody").appendTo($rowsTable)
                } else {
                    $tableBody = $rowsTable.children("." + className).appendTo($viewTable)
                }
                $tableBody.toggleClass(className, isBestFit);
                $tableBody.toggleClass(this.addWidgetPrefix("best-fit"), isBestFit)
            }
        })
    },
    _toggleBestFitMode: function(isBestFit) {
        var $rowsTable = this._rowsView.getTableElement();
        var $rowsFixedTable = this._rowsView.getTableElements().eq(1);
        if (!$rowsTable) {
            return
        }
        $rowsTable.css("tableLayout", isBestFit ? "auto" : "fixed");
        $rowsTable.children("colgroup").css("display", isBestFit ? "none" : "");
        $rowsFixedTable.toggleClass(this.addWidgetPrefix(TABLE_FIXED_CLASS), !isBestFit);
        this._toggleBestFitModeForView(this._columnHeadersView, "dx-header", isBestFit);
        this._toggleBestFitModeForView(this._footerView, "dx-footer", isBestFit);
        this._toggleContentMinHeight(isBestFit);
        if (this._needStretch()) {
            $rowsTable.get(0).style.width = isBestFit ? "auto" : ""
        }
    },
    _toggleContentMinHeight: function(isBestFit) {
        if (this.option("wordWrapEnabled")) {
            var scrollable = this._rowsView.getScrollable();
            var $contentElement = this._rowsView._findContentElement();
            if (false === (null === scrollable || void 0 === scrollable ? void 0 : scrollable.option("useNative"))) {
                $contentElement.css({
                    minHeight: isBestFit ? _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_8__["default"].getContentHeightLimit(_core_utils_browser__WEBPACK_IMPORTED_MODULE_13__["default"]) : ""
                })
            }
        }
    },
    _synchronizeColumns: function() {
        var columnsController = this._columnsController;
        var visibleColumns = columnsController.getVisibleColumns();
        var columnAutoWidth = this.option("columnAutoWidth");
        var needBestFit = this._needBestFit();
        var hasMinWidth = false;
        var resetBestFitMode;
        var isColumnWidthsCorrected = false;
        var resultWidths = [];
        var focusedElement;
        var selectionRange;
        !needBestFit && Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_5__["each"])(visibleColumns, (function(index, column) {
            if ("auto" === column.width) {
                needBestFit = true;
                return false
            }
        }));
        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_5__["each"])(visibleColumns, (function(index, column) {
            if (column.minWidth) {
                hasMinWidth = true;
                return false
            }
        }));
        this._setVisibleWidths(visibleColumns, []);
        if (needBestFit) {
            focusedElement = _core_dom_adapter__WEBPACK_IMPORTED_MODULE_11__["default"].getActiveElement();
            selectionRange = _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_8__["default"].getSelectionRange(focusedElement);
            this._toggleBestFitMode(true);
            resetBestFitMode = true
        }
        var $element = this.component.$element();
        if ($element && $element[0] && this._maxWidth) {
            delete this._maxWidth;
            $element[0].style.maxWidth = ""
        }
        Object(_core_utils_common__WEBPACK_IMPORTED_MODULE_3__["deferUpdate"])(() => {
            if (needBestFit) {
                resultWidths = this._getBestFitWidths();
                Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_5__["each"])(visibleColumns, (function(index, column) {
                    var columnId = columnsController.getColumnId(column);
                    columnsController.columnOption(columnId, "bestFitWidth", resultWidths[index], true)
                }))
            } else if (hasMinWidth) {
                resultWidths = this._getBestFitWidths()
            }
            Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_5__["each"])(visibleColumns, (function(index) {
                var width = this.width;
                if ("auto" !== width) {
                    if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isDefined"])(width)) {
                        resultWidths[index] = Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isNumeric"])(width) || isPixelWidth(width) ? parseFloat(width) : width
                    } else if (!columnAutoWidth) {
                        resultWidths[index] = void 0
                    }
                }
            }));
            if (resetBestFitMode) {
                this._toggleBestFitMode(false);
                resetBestFitMode = false;
                if (focusedElement && focusedElement !== _core_dom_adapter__WEBPACK_IMPORTED_MODULE_11__["default"].getActiveElement()) {
                    var isFocusOutsideWindow = Object(_core_utils_position__WEBPACK_IMPORTED_MODULE_7__["getBoundingRect"])(focusedElement).bottom < 0;
                    if (!isFocusOutsideWindow) {
                        restoreFocus(focusedElement, selectionRange)
                    }
                }
            }
            isColumnWidthsCorrected = this._correctColumnWidths(resultWidths, visibleColumns);
            if (columnAutoWidth) {
                ! function() {
                    var expandColumnWidth;
                    Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_5__["each"])(visibleColumns, (function(index, column) {
                        if ("groupExpand" === column.type) {
                            expandColumnWidth = resultWidths[index]
                        }
                    }));
                    Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_5__["each"])(visibleColumns, (function(index, column) {
                        if ("groupExpand" === column.type && expandColumnWidth) {
                            resultWidths[index] = expandColumnWidth
                        }
                    }))
                }();
                if (this._needStretch()) {
                    this._processStretch(resultWidths, visibleColumns)
                }
            }
            Object(_core_utils_common__WEBPACK_IMPORTED_MODULE_3__["deferRender"])(() => {
                if (needBestFit || isColumnWidthsCorrected) {
                    this._setVisibleWidths(visibleColumns, resultWidths)
                }
            })
        })
    },
    _needBestFit: function() {
        return this.option("columnAutoWidth")
    },
    _needStretch: function() {
        return this._columnsController.getVisibleColumns().some(c => "auto" === c.width && !c.command)
    },
    _getAverageColumnsWidth: function(resultWidths) {
        var freeWidth = calculateFreeWidth(this, resultWidths);
        var columnCountWithoutWidth = resultWidths.filter((function(width) {
            return void 0 === width
        })).length;
        return freeWidth / columnCountWithoutWidth
    },
    _correctColumnWidths: function(resultWidths, visibleColumns) {
        var that = this;
        var i;
        var hasPercentWidth = false;
        var hasAutoWidth = false;
        var isColumnWidthsCorrected = false;
        var $element = that.component.$element();
        var hasWidth = that._hasWidth;
        var _loop = function() {
            var index = i;
            var column = visibleColumns[index];
            var isHiddenColumn = resultWidths[index] === HIDDEN_COLUMNS_WIDTH;
            var width = resultWidths[index];
            var minWidth = column.minWidth;
            if (minWidth) {
                if (void 0 === width) {
                    var averageColumnsWidth = that._getAverageColumnsWidth(resultWidths);
                    width = averageColumnsWidth
                } else if (isPercentWidth(width)) {
                    var freeWidth = calculateFreeWidthWithCurrentMinWidth(that, index, minWidth, resultWidths);
                    if (freeWidth < 0) {
                        width = -1
                    }
                }
            }
            var realColumnWidth = that._getRealColumnWidth(index, resultWidths.map((function(columnWidth, columnIndex) {
                return index === columnIndex ? width : columnWidth
            })));
            if (minWidth && !isHiddenColumn && realColumnWidth < minWidth) {
                resultWidths[index] = minWidth;
                isColumnWidthsCorrected = true;
                i = -1
            }
            if (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isDefined"])(column.width)) {
                hasAutoWidth = true
            }
            if (isPercentWidth(column.width)) {
                hasPercentWidth = true
            }
        };
        for (i = 0; i < visibleColumns.length; i++) {
            _loop()
        }
        if (!hasAutoWidth && resultWidths.length) {
            var $rowsViewElement = that._rowsView.element();
            var contentWidth = that._rowsView.contentWidth();
            var scrollbarWidth = that._rowsView.getScrollbarWidth();
            var totalWidth = that._getTotalWidth(resultWidths, contentWidth);
            if (totalWidth < contentWidth) {
                var lastColumnIndex = _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_8__["default"].getLastResizableColumnIndex(visibleColumns, resultWidths);
                if (lastColumnIndex >= 0) {
                    resultWidths[lastColumnIndex] = "auto";
                    isColumnWidthsCorrected = true;
                    if (false === hasWidth && !hasPercentWidth) {
                        var borderWidth = that.option("showBorders") ? Math.ceil(Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getOuterWidth"])($rowsViewElement) - Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getInnerWidth"])($rowsViewElement)) : 0;
                        that._maxWidth = totalWidth + scrollbarWidth + borderWidth;
                        $element.css("maxWidth", that._maxWidth)
                    }
                }
            }
        }
        return isColumnWidthsCorrected
    },
    _processStretch: function(resultSizes, visibleColumns) {
        var groupSize = this._rowsView.contentWidth();
        var tableSize = this._getTotalWidth(resultSizes, groupSize);
        var unusedIndexes = {
            length: 0
        };
        if (!resultSizes.length) {
            return
        }
        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_5__["each"])(visibleColumns, (function(index) {
            if (this.width || resultSizes[index] === HIDDEN_COLUMNS_WIDTH) {
                unusedIndexes[index] = true;
                unusedIndexes.length++
            }
        }));
        var diff = groupSize - tableSize;
        var diffElement = Math.floor(diff / (resultSizes.length - unusedIndexes.length));
        var onePixelElementsCount = diff - diffElement * (resultSizes.length - unusedIndexes.length);
        if (diff >= 0) {
            for (var i = 0; i < resultSizes.length; i++) {
                if (unusedIndexes[i]) {
                    continue
                }
                resultSizes[i] += diffElement;
                if (onePixelElementsCount > 0) {
                    if (onePixelElementsCount < 1) {
                        resultSizes[i] += onePixelElementsCount;
                        onePixelElementsCount = 0
                    } else {
                        resultSizes[i]++;
                        onePixelElementsCount--
                    }
                }
            }
        }
    },
    _getRealColumnWidth: function(columnIndex, columnWidths, groupWidth) {
        var ratio = 1;
        var width = columnWidths[columnIndex];
        if (!isPercentWidth(width)) {
            return parseFloat(width)
        }
        var percentTotalWidth = columnWidths.reduce((sum, width, index) => {
            if (!isPercentWidth(width)) {
                return sum
            }
            return sum + parseFloat(width)
        }, 0);
        var pixelTotalWidth = columnWidths.reduce((sum, width) => {
            if (!width || width === HIDDEN_COLUMNS_WIDTH || isPercentWidth(width)) {
                return sum
            }
            return sum + parseFloat(width)
        }, 0);
        groupWidth = groupWidth || this._rowsView.contentWidth();
        var freeSpace = groupWidth - pixelTotalWidth;
        var percentTotalWidthInPixel = percentTotalWidth * groupWidth / 100;
        if (pixelTotalWidth > 0 && percentTotalWidthInPixel + pixelTotalWidth >= groupWidth) {
            ratio = percentTotalWidthInPixel > freeSpace ? freeSpace / percentTotalWidthInPixel : 1
        }
        return parseFloat(width) * groupWidth * ratio / 100
    },
    _getTotalWidth: function(widths, groupWidth) {
        var result = 0;
        for (var i = 0; i < widths.length; i++) {
            var width = widths[i];
            if (width && width !== HIDDEN_COLUMNS_WIDTH) {
                result += this._getRealColumnWidth(i, widths, groupWidth)
            }
        }
        return Math.ceil(result)
    },
    updateSize: function(rootElement) {
        var $groupElement;
        var width;
        var $rootElement = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(rootElement);
        var importantMarginClass = this.addWidgetPrefix(IMPORTANT_MARGIN_CLASS);
        if (void 0 === this._hasHeight && $rootElement && $rootElement.is(":visible") && Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getWidth"])($rootElement)) {
            $groupElement = $rootElement.children("." + this.getWidgetContainerClass());
            if ($groupElement.length) {
                $groupElement.detach()
            }
            this._hasHeight = !!getContainerHeight($rootElement);
            width = Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getWidth"])($rootElement);
            $rootElement.addClass(importantMarginClass);
            this._hasWidth = Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getWidth"])($rootElement) === width;
            $rootElement.removeClass(importantMarginClass);
            if ($groupElement.length) {
                $groupElement.appendTo($rootElement)
            }
        }
    },
    publicMethods: function() {
        return ["resize", "updateDimensions"]
    },
    resize: function() {
        return !this.component._requireResize && this.updateDimensions()
    },
    updateDimensions: function(checkSize) {
        var that = this;
        that._initPostRenderHandlers();
        if (!that._checkSize(checkSize)) {
            return
        }
        var prevResult = that._resizeDeferred;
        var result = that._resizeDeferred = new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_10__["Deferred"];
        Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_10__["when"])(prevResult).always((function() {
            Object(_core_utils_common__WEBPACK_IMPORTED_MODULE_3__["deferRender"])((function() {
                if (that._dataController.isLoaded()) {
                    that._synchronizeColumns()
                }
                that._resetGroupElementHeight();
                Object(_core_utils_common__WEBPACK_IMPORTED_MODULE_3__["deferUpdate"])((function() {
                    Object(_core_utils_common__WEBPACK_IMPORTED_MODULE_3__["deferRender"])((function() {
                        Object(_core_utils_common__WEBPACK_IMPORTED_MODULE_3__["deferUpdate"])((function() {
                            that._updateDimensionsCore()
                        }))
                    }))
                }))
            })).done(result.resolve).fail(result.reject)
        }));
        return result.promise()
    },
    _resetGroupElementHeight: function() {
        var groupElement = this.component.$element().children().get(0);
        var scrollable = this._rowsView.getScrollable();
        if (groupElement && groupElement.style.height && (!scrollable || !scrollable.scrollTop())) {
            groupElement.style.height = ""
        }
    },
    _checkSize: function(checkSize) {
        var $rootElement = this.component.$element();
        if (checkSize && (this._lastWidth === Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getWidth"])($rootElement) && this._lastHeight === Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getHeight"])($rootElement) && this._devicePixelRatio === Object(_core_utils_window__WEBPACK_IMPORTED_MODULE_4__["getWindow"])().devicePixelRatio || !$rootElement.is(":visible"))) {
            return false
        }
        return true
    },
    _setScrollerSpacingCore: function(hasHeight) {
        var that = this;
        var vScrollbarWidth = hasHeight ? that._rowsView.getScrollbarWidth() : 0;
        var hScrollbarWidth = that._rowsView.getScrollbarWidth(true);
        Object(_core_utils_common__WEBPACK_IMPORTED_MODULE_3__["deferRender"])((function() {
            that._columnHeadersView && that._columnHeadersView.setScrollerSpacing(vScrollbarWidth);
            that._footerView && that._footerView.setScrollerSpacing(vScrollbarWidth);
            that._rowsView.setScrollerSpacing(vScrollbarWidth, hScrollbarWidth)
        }))
    },
    _setScrollerSpacing: function(hasHeight) {
        if (true === this.option("scrolling.useNative")) {
            Object(_core_utils_common__WEBPACK_IMPORTED_MODULE_3__["deferRender"])(() => {
                Object(_core_utils_common__WEBPACK_IMPORTED_MODULE_3__["deferUpdate"])(() => {
                    this._setScrollerSpacingCore(hasHeight)
                })
            })
        } else {
            this._setScrollerSpacingCore(hasHeight)
        }
    },
    _updateDimensionsCore: function() {
        var that = this;
        var dataController = that._dataController;
        var rowsView = that._rowsView;
        var $rootElement = that.component.$element();
        var groupElement = $rootElement.children().get(0);
        var rootElementHeight = $rootElement && ($rootElement.get(0).clientHeight || Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getHeight"])($rootElement));
        var maxHeight = parseInt($rootElement.css("maxHeight"));
        var maxHeightHappened = maxHeight && rootElementHeight >= maxHeight;
        var height = that.option("height") || $rootElement.get(0).style.height;
        var editorFactory = that.getController("editorFactory");
        var isMaxHeightApplied = maxHeightHappened && groupElement.scrollHeight === groupElement.offsetHeight;
        var $testDiv;
        that.updateSize($rootElement);
        var hasHeight = that._hasHeight || maxHeightHappened;
        if (height && that._hasHeight ^ "auto" !== height) {
            $testDiv = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])("<div>");
            Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["setHeight"])($testDiv, height);
            $testDiv.appendTo($rootElement);
            that._hasHeight = !!Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getHeight"])($testDiv);
            $testDiv.remove()
        }
        Object(_core_utils_common__WEBPACK_IMPORTED_MODULE_3__["deferRender"])((function() {
            rowsView.height(null, hasHeight);
            if (maxHeightHappened && !isMaxHeightApplied) {
                Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(groupElement).css("height", maxHeight)
            }
            if (!dataController.isLoaded()) {
                rowsView.setLoading(dataController.isLoading());
                return
            }
            Object(_core_utils_common__WEBPACK_IMPORTED_MODULE_3__["deferUpdate"])((function() {
                that._updateLastSizes($rootElement);
                that._setScrollerSpacing(hasHeight);
                Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_5__["each"])(VIEW_NAMES, (function(index, viewName) {
                    var view = that.getView(viewName);
                    if (view) {
                        view.resize()
                    }
                }));
                editorFactory && editorFactory.resize()
            }))
        }))
    },
    _updateLastSizes: function($rootElement) {
        this._lastWidth = Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getWidth"])($rootElement);
        this._lastHeight = Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getHeight"])($rootElement);
        this._devicePixelRatio = Object(_core_utils_window__WEBPACK_IMPORTED_MODULE_4__["getWindow"])().devicePixelRatio
    },
    optionChanged: function(args) {
        switch (args.name) {
            case "width":
            case "height":
                this.component._renderDimensions();
                this.resize();
            case "renderAsync":
                args.handled = true;
                return;
            default:
                this.callBase(args)
        }
    },
    init: function() {
        this._dataController = this.getController("data");
        this._columnsController = this.getController("columns");
        this._columnHeadersView = this.getView("columnHeadersView");
        this._footerView = this.getView("footerView");
        this._rowsView = this.getView("rowsView")
    }
});
var SynchronizeScrollingController = _ui_grid_core_modules__WEBPACK_IMPORTED_MODULE_2__["default"].ViewController.inherit({
    _scrollChangedHandler: function(views, pos, viewName) {
        for (var j = 0; j < views.length; j++) {
            if (views[j] && views[j].name !== viewName) {
                views[j].scrollTo({
                    left: pos.left,
                    top: pos.top
                })
            }
        }
    },
    init: function() {
        var views = [this.getView("columnHeadersView"), this.getView("footerView"), this.getView("rowsView")];
        for (var i = 0; i < views.length; i++) {
            var view = views[i];
            if (view) {
                view.scrollChanged.add(this._scrollChangedHandler.bind(this, views))
            }
        }
    }
});
var GridView = _ui_grid_core_modules__WEBPACK_IMPORTED_MODULE_2__["default"].View.inherit({
    _endUpdateCore: function() {
        if (this.component._requireResize) {
            this.component._requireResize = false;
            this._resizingController.resize()
        }
    },
    _getWidgetAriaLabel: function() {
        return "dxDataGrid-ariaDataGrid"
    },
    init: function() {
        this._resizingController = this.getController("resizing");
        this._dataController = this.getController("data")
    },
    getView: function(name) {
        return this.component._views[name]
    },
    element: function() {
        return this._groupElement
    },
    optionChanged: function(args) {
        if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isDefined"])(this._groupElement) && "showBorders" === args.name) {
            this._groupElement.toggleClass(this.addWidgetPrefix(BORDERS_CLASS), !!args.value);
            args.handled = true
        } else {
            this.callBase(args)
        }
    },
    _renderViews: function($groupElement) {
        var that = this;
        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_5__["each"])(VIEW_NAMES, (function(index, viewName) {
            var view = that.getView(viewName);
            if (view) {
                view.render($groupElement)
            }
        }))
    },
    _getTableRoleName: function() {
        return "grid"
    },
    render: function($rootElement) {
        var isFirstRender = !this._groupElement;
        var $groupElement = this._groupElement || Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])("<div>").addClass(this.getWidgetContainerClass());
        $groupElement.addClass(GRIDBASE_CONTAINER_CLASS);
        $groupElement.toggleClass(this.addWidgetPrefix(BORDERS_CLASS), !!this.option("showBorders"));
        this.setAria("role", "presentation", $rootElement);
        this.component.setAria({
            role: this._getTableRoleName(),
            label: _localization_message__WEBPACK_IMPORTED_MODULE_9__["default"].format(this._getWidgetAriaLabel())
        }, $groupElement);
        this._rootElement = $rootElement || this._rootElement;
        if (isFirstRender) {
            this._groupElement = $groupElement;
            Object(_core_utils_window__WEBPACK_IMPORTED_MODULE_4__["hasWindow"])() && this.getController("resizing").updateSize($rootElement);
            $groupElement.appendTo($rootElement)
        }
        this._renderViews($groupElement)
    },
    update: function() {
        var $rootElement = this._rootElement;
        var $groupElement = this._groupElement;
        var resizingController = this.getController("resizing");
        if ($rootElement && $groupElement) {
            resizingController.resize();
            if (this._dataController.isLoaded()) {
                this._resizingController.fireContentReadyAction()
            }
        }
    }
});
var gridViewModule = {
    defaultOptions: function() {
        return {
            showBorders: false,
            renderAsync: false
        }
    },
    controllers: {
        resizing: ResizingController,
        synchronizeScrolling: SynchronizeScrollingController
    },
    views: {
        gridView: GridView
    },
    VIEW_NAMES: VIEW_NAMES
};


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.header_filter.js":
/*!********************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.header_filter.js ***!
  \********************************************************************************/
/*! exports provided: invertFilterExpression, headerFilterModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "invertFilterExpression", function() { return invertFilterExpression; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "headerFilterModule", function() { return headerFilterModule; });
/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ "./node_modules/@babel/runtime/helpers/esm/extends.js");
/* harmony import */ var _events_core_events_engine__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../events/core/events_engine */ "./node_modules/devextreme/esm/events/core/events_engine.js");
/* harmony import */ var _ui_grid_core_modules__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ui.grid_core.modules */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.modules.js");
/* harmony import */ var _shared_filtering__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shared/filtering */ "./node_modules/devextreme/esm/ui/shared/filtering.js");
/* harmony import */ var _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ui.grid_core.utils */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.utils.js");
/* harmony import */ var _ui_grid_core_header_filter_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ui.grid_core.header_filter_core */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.header_filter_core.js");
/* harmony import */ var _localization_message__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../localization/message */ "./node_modules/devextreme/esm/localization/message.js");
/* harmony import */ var _events_click__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../events/click */ "./node_modules/devextreme/esm/events/click.js");
/* harmony import */ var _core_utils_data__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../core/utils/data */ "./node_modules/devextreme/esm/core/utils/data.js");
/* harmony import */ var _core_utils_iterator__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../core/utils/iterator */ "./node_modules/devextreme/esm/core/utils/iterator.js");
/* harmony import */ var _core_utils_type__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../core/utils/type */ "./node_modules/devextreme/esm/core/utils/type.js");
/* harmony import */ var _core_utils_position__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../core/utils/position */ "./node_modules/devextreme/esm/core/utils/position.js");
/* harmony import */ var _core_utils_extend__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../core/utils/extend */ "./node_modules/devextreme/esm/core/utils/extend.js");
/* harmony import */ var _data_data_source_utils__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../data/data_source/utils */ "./node_modules/devextreme/esm/data/data_source/utils.js");
/* harmony import */ var _localization_date__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../localization/date */ "./node_modules/devextreme/esm/localization/date.js");
/* harmony import */ var _core_utils_variable_wrapper__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../core/utils/variable_wrapper */ "./node_modules/devextreme/esm/core/utils/variable_wrapper.js");
/* harmony import */ var _core_utils_deferred__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../core/utils/deferred */ "./node_modules/devextreme/esm/core/utils/deferred.js");
/* harmony import */ var _shared_accessibility__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../shared/accessibility */ "./node_modules/devextreme/esm/ui/shared/accessibility.js");
/* harmony import */ var _data_query__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../data/query */ "./node_modules/devextreme/esm/data/query.js");
/* harmony import */ var _data_store_helper__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../data/store_helper */ "./node_modules/devextreme/esm/data/store_helper.js");
/**
 * DevExtreme (esm/ui/grid_core/ui.grid_core.header_filter.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */




















var DATE_INTERVAL_FORMATS = {
    month: function(value) {
        return _localization_date__WEBPACK_IMPORTED_MODULE_14__["default"].getMonthNames()[value - 1]
    },
    quarter: function(value) {
        return _localization_date__WEBPACK_IMPORTED_MODULE_14__["default"].format(new Date(2e3, 3 * value - 1), "quarter")
    }
};

function ungroupUTCDates(items, dateParts, dates) {
    dateParts = dateParts || [];
    dates = dates || [];
    items.forEach(item => {
        if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_10__["isDefined"])(item.key)) {
            var isMonthPart = 1 === dateParts.length;
            dateParts.push(isMonthPart ? item.key - 1 : item.key);
            if (item.items) {
                ungroupUTCDates(item.items, dateParts, dates)
            } else {
                var date = new Date(Date.UTC.apply(Date, dateParts));
                dates.push(date)
            }
            dateParts.pop()
        } else {
            dates.push(null)
        }
    });
    return dates
}

function convertDataFromUTCToLocal(data, column) {
    var dates = ungroupUTCDates(data);
    var query = Object(_data_query__WEBPACK_IMPORTED_MODULE_18__["default"])(dates);
    var group = _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_4__["default"].getHeaderFilterGroupParameters(Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__["default"])({}, column, {
        calculateCellValue: date => date
    }));
    return _data_store_helper__WEBPACK_IMPORTED_MODULE_19__["default"].queryByOptions(query, {
        group: group
    }).toArray()
}

function isUTCFormat(format) {
    return "Z" === (null === format || void 0 === format ? void 0 : format.slice(-1)) || "'Z'" === (null === format || void 0 === format ? void 0 : format.slice(-3))
}
var HeaderFilterController = _ui_grid_core_modules__WEBPACK_IMPORTED_MODULE_2__["default"].ViewController.inherit({
    init: function() {
        this._columnsController = this.getController("columns");
        this._dataController = this.getController("data");
        this._headerFilterView = this.getView("headerFilterView")
    },
    _updateSelectedState: function(items, column) {
        var i = items.length;
        var isExclude = "exclude" === column.filterType;
        while (i--) {
            var item = items[i];
            if ("items" in items[i]) {
                this._updateSelectedState(items[i].items, column)
            }
            Object(_ui_grid_core_header_filter_core__WEBPACK_IMPORTED_MODULE_5__["updateHeaderFilterItemSelectionState"])(item, _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_4__["default"].getIndexByKey(items[i].value, column.filterValues, null) > -1, isExclude)
        }
    },
    _normalizeGroupItem: function(item, currentLevel, options) {
        var value;
        var displayValue;
        var path = options.path;
        var valueSelector = options.valueSelector;
        var displaySelector = options.displaySelector;
        var column = options.column;
        if (valueSelector && displaySelector) {
            value = valueSelector(item);
            displayValue = displaySelector(item)
        } else {
            value = item.key;
            displayValue = value
        }
        if (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_10__["isObject"])(item)) {
            item = {}
        } else {
            item = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_12__["extend"])({}, item)
        }
        path.push(value);
        if (1 === path.length) {
            item.value = path[0]
        } else {
            item.value = path.join("/")
        }
        item.text = this.getHeaderItemText(displayValue, column, currentLevel, options.headerFilterOptions);
        return item
    },
    getHeaderItemText: function(displayValue, column, currentLevel, headerFilterOptions) {
        var text = _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_4__["default"].formatValue(displayValue, function(value, column, currentLevel) {
            var groupInterval = _shared_filtering__WEBPACK_IMPORTED_MODULE_3__["default"].getGroupInterval(column);
            var result = _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_4__["default"].getFormatOptionsByColumn(column, "headerFilter");
            if (groupInterval) {
                result.groupInterval = groupInterval[currentLevel];
                if (_ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_4__["default"].isDateType(column.dataType)) {
                    result.format = DATE_INTERVAL_FORMATS[groupInterval[currentLevel]]
                } else if ("number" === column.dataType) {
                    result.getDisplayFormat = function() {
                        var formatOptions = {
                            format: column.format,
                            target: "headerFilter"
                        };
                        var firstValueText = _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_4__["default"].formatValue(value, formatOptions);
                        var secondValue = value + groupInterval[currentLevel];
                        var secondValueText = _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_4__["default"].formatValue(secondValue, formatOptions);
                        return firstValueText && secondValueText ? firstValueText + " - " + secondValueText : ""
                    }
                }
            }
            return result
        }(displayValue, column, currentLevel));
        if (!text) {
            text = headerFilterOptions.texts.emptyValue
        }
        return text
    },
    _processGroupItems: function(groupItems, currentLevel, path, options) {
        var displaySelector;
        var valueSelector;
        var column = options.column;
        var lookup = column.lookup;
        var level = options.level;
        path = path || [];
        currentLevel = currentLevel || 0;
        if (lookup) {
            displaySelector = Object(_core_utils_data__WEBPACK_IMPORTED_MODULE_8__["compileGetter"])(lookup.displayExpr);
            valueSelector = Object(_core_utils_data__WEBPACK_IMPORTED_MODULE_8__["compileGetter"])(lookup.valueExpr)
        }
        for (var i = 0; i < groupItems.length; i++) {
            groupItems[i] = this._normalizeGroupItem(groupItems[i], currentLevel, {
                column: options.column,
                headerFilterOptions: options.headerFilterOptions,
                displaySelector: displaySelector,
                valueSelector: valueSelector,
                path: path
            });
            if ("items" in groupItems[i]) {
                if (currentLevel === level || !Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_10__["isDefined"])(groupItems[i].value)) {
                    delete groupItems[i].items
                } else {
                    this._processGroupItems(groupItems[i].items, currentLevel + 1, path, options)
                }
            }
            path.pop()
        }
    },
    getDataSource: function(column) {
        var _column$headerFilter;
        var that = this;
        var dataSource = that._dataController.dataSource();
        var remoteGrouping = null === dataSource || void 0 === dataSource ? void 0 : dataSource.remoteOperations().grouping;
        var group = _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_4__["default"].getHeaderFilterGroupParameters(column, remoteGrouping);
        var headerFilterDataSource = null === (_column$headerFilter = column.headerFilter) || void 0 === _column$headerFilter ? void 0 : _column$headerFilter.dataSource;
        var headerFilterOptions = that.option("headerFilter");
        var isLookup = false;
        var options = {
            component: that.component
        };
        if (!dataSource) {
            return
        }
        if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_10__["isDefined"])(headerFilterDataSource) && !Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_10__["isFunction"])(headerFilterDataSource)) {
            options.dataSource = Object(_data_data_source_utils__WEBPACK_IMPORTED_MODULE_13__["normalizeDataSourceOptions"])(headerFilterDataSource)
        } else if (column.lookup) {
            isLookup = true;
            var lookupDataSourceOptions;
            if (column.lookup.items) {
                lookupDataSourceOptions = column.lookup.items
            } else {
                lookupDataSourceOptions = column.lookup.dataSource;
                if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_10__["isFunction"])(lookupDataSourceOptions) && !_core_utils_variable_wrapper__WEBPACK_IMPORTED_MODULE_15__["default"].isWrapped(lookupDataSourceOptions)) {
                    lookupDataSourceOptions = lookupDataSourceOptions({})
                }
            }
            options.dataSource = Object(_data_data_source_utils__WEBPACK_IMPORTED_MODULE_13__["normalizeDataSourceOptions"])(lookupDataSourceOptions)
        } else {
            var cutoffLevel = Array.isArray(group) ? group.length - 1 : 0;
            that._currentColumn = column;
            var filter = that._dataController.getCombinedFilter();
            that._currentColumn = null;
            options.dataSource = {
                filter: filter,
                group: group,
                useDefaultSearch: true,
                load: function(options) {
                    var d = new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_16__["Deferred"];
                    options.dataField = column.dataField || column.name;
                    dataSource.load(options).done((function(data) {
                        var convertUTCDates = remoteGrouping && isUTCFormat(column.serializationFormat) && cutoffLevel > 3;
                        if (convertUTCDates) {
                            data = convertDataFromUTCToLocal(data, column)
                        }
                        that._processGroupItems(data, null, null, {
                            level: cutoffLevel,
                            column: column,
                            headerFilterOptions: headerFilterOptions
                        });
                        d.resolve(data)
                    })).fail(d.reject);
                    return d
                }
            }
        }
        if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_10__["isFunction"])(headerFilterDataSource)) {
            headerFilterDataSource.call(column, options)
        }
        var origPostProcess = options.dataSource.postProcess;
        options.dataSource.postProcess = function(data) {
            var items = data;
            if (isLookup) {
                if (0 === this.pageIndex() && !this.searchValue()) {
                    items = items.slice(0);
                    items.unshift(null)
                }
                that._processGroupItems(items, null, null, {
                    level: 0,
                    column: column,
                    headerFilterOptions: headerFilterOptions
                })
            }
            items = origPostProcess && origPostProcess.call(this, items) || items;
            that._updateSelectedState(items, column);
            return items
        };
        return options.dataSource
    },
    getCurrentColumn: function() {
        return this._currentColumn
    },
    showHeaderFilterMenu: function(columnIndex, isGroupPanel) {
        var columnsController = this._columnsController;
        var column = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_12__["extend"])(true, {}, this._columnsController.getColumns()[columnIndex]);
        if (column) {
            var visibleIndex = columnsController.getVisibleIndex(columnIndex);
            var view = isGroupPanel ? this.getView("headerPanel") : this.getView("columnHeadersView");
            var $columnElement = $columnElement || view.getColumnElements().eq(isGroupPanel ? column.groupIndex : visibleIndex);
            this.showHeaderFilterMenuBase({
                columnElement: $columnElement,
                column: column,
                applyFilter: true,
                apply: function() {
                    columnsController.columnOption(columnIndex, {
                        filterValues: this.filterValues,
                        filterType: this.filterType
                    })
                }
            })
        }
    },
    showHeaderFilterMenuBase: function(options) {
        var that = this;
        var column = options.column;
        if (column) {
            var groupInterval = _shared_filtering__WEBPACK_IMPORTED_MODULE_3__["default"].getGroupInterval(column);
            var dataSource = that._dataController.dataSource();
            var remoteFiltering = dataSource && dataSource.remoteOperations().filtering;
            Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_12__["extend"])(options, column, {
                type: groupInterval && groupInterval.length > 1 ? "tree" : "list",
                remoteFiltering: remoteFiltering,
                onShowing: function(e) {
                    var dxResizableInstance = e.component.$overlayContent().dxResizable("instance");
                    dxResizableInstance && dxResizableInstance.option("onResizeEnd", (function(e) {
                        var columnsController = that.getController("columns");
                        var headerFilterByColumn = columnsController.columnOption(options.dataField, "headerFilter");
                        headerFilterByColumn = headerFilterByColumn || {};
                        headerFilterByColumn.width = e.width;
                        headerFilterByColumn.height = e.height;
                        columnsController.columnOption(options.dataField, "headerFilter", headerFilterByColumn, true)
                    }))
                },
                onHidden: () => Object(_shared_accessibility__WEBPACK_IMPORTED_MODULE_17__["restoreFocus"])(this)
            });
            options.dataSource = that.getDataSource(options);
            if (options.isFilterBuilder) {
                options.dataSource.filter = null;
                options.alignment = "right"
            }
            that._headerFilterView.showHeaderFilterMenu(options.columnElement, options)
        }
    },
    hideHeaderFilterMenu: function() {
        this._headerFilterView.hideHeaderFilterMenu()
    }
});
var ColumnHeadersViewHeaderFilterExtender = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_12__["extend"])({}, _ui_grid_core_header_filter_core__WEBPACK_IMPORTED_MODULE_5__["headerFilterMixin"], {
    _renderCellContent: function($cell, options) {
        var $headerFilterIndicator;
        var column = options.column;
        if (!column.command && Object(_ui_grid_core_header_filter_core__WEBPACK_IMPORTED_MODULE_5__["allowHeaderFiltering"])(column) && this.option("headerFilter.visible") && "header" === options.rowType) {
            $headerFilterIndicator = this._applyColumnState({
                name: "headerFilter",
                rootElement: $cell,
                column: column,
                showColumnLines: this.option("showColumnLines")
            });
            $headerFilterIndicator && this._subscribeToIndicatorEvent($headerFilterIndicator, column, "headerFilter")
        }
        this.callBase($cell, options)
    },
    _subscribeToIndicatorEvent: function($indicator, column, indicatorName) {
        var that = this;
        if ("headerFilter" === indicatorName) {
            _events_core_events_engine__WEBPACK_IMPORTED_MODULE_1__["default"].on($indicator, _events_click__WEBPACK_IMPORTED_MODULE_7__["name"], that.createAction((function(e) {
                e.event.stopPropagation();
                that.getController("headerFilter").showHeaderFilterMenu(column.index, false)
            })))
        }
    },
    _updateIndicator: function($cell, column, indicatorName) {
        var $indicator = this.callBase($cell, column, indicatorName);
        $indicator && this._subscribeToIndicatorEvent($indicator, column, indicatorName)
    },
    _updateHeaderFilterIndicators: function() {
        if (this.option("headerFilter.visible")) {
            this._updateIndicators("headerFilter")
        }
    },
    _needUpdateFilterIndicators: function() {
        return true
    },
    _columnOptionChanged: function(e) {
        var optionNames = e.optionNames;
        if (_ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_4__["default"].checkChanges(optionNames, ["filterValues", "filterType"])) {
            if (this._needUpdateFilterIndicators()) {
                this._updateHeaderFilterIndicators()
            }
            return
        }
        this.callBase(e)
    }
});
var HeaderPanelHeaderFilterExtender = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_12__["extend"])({}, _ui_grid_core_header_filter_core__WEBPACK_IMPORTED_MODULE_5__["headerFilterMixin"], {
    _createGroupPanelItem: function($rootElement, groupColumn) {
        var that = this;
        var $item = that.callBase.apply(that, arguments);
        var $headerFilterIndicator;
        if (!groupColumn.command && Object(_ui_grid_core_header_filter_core__WEBPACK_IMPORTED_MODULE_5__["allowHeaderFiltering"])(groupColumn) && that.option("headerFilter.visible")) {
            $headerFilterIndicator = that._applyColumnState({
                name: "headerFilter",
                rootElement: $item,
                column: {
                    alignment: Object(_core_utils_position__WEBPACK_IMPORTED_MODULE_11__["getDefaultAlignment"])(that.option("rtlEnabled")),
                    filterValues: groupColumn.filterValues,
                    allowHeaderFiltering: true
                },
                showColumnLines: true
            });
            $headerFilterIndicator && _events_core_events_engine__WEBPACK_IMPORTED_MODULE_1__["default"].on($headerFilterIndicator, _events_click__WEBPACK_IMPORTED_MODULE_7__["name"], that.createAction((function(e) {
                var event = e.event;
                event.stopPropagation();
                that.getController("headerFilter").showHeaderFilterMenu(groupColumn.index, true)
            })))
        }
        return $item
    }
});
function invertFilterExpression(filter) {
    return ["!", filter]
}
var DataControllerFilterRowExtender = {
    skipCalculateColumnFilters: function() {
        return false
    },
    _calculateAdditionalFilter: function() {
        if (this.skipCalculateColumnFilters()) {
            return this.callBase()
        }
        var filters = [this.callBase()];
        var columns = this._columnsController.getVisibleColumns(null, true);
        var headerFilterController = this.getController("headerFilter");
        var currentColumn = headerFilterController.getCurrentColumn();
        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_9__["each"])(columns, (function(_, column) {
            var filter;
            if (currentColumn && currentColumn.index === column.index) {
                return
            }
            if (Object(_ui_grid_core_header_filter_core__WEBPACK_IMPORTED_MODULE_5__["allowHeaderFiltering"])(column) && column.calculateFilterExpression && Array.isArray(column.filterValues) && column.filterValues.length) {
                var filterValues = [];
                Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_9__["each"])(column.filterValues, (function(_, filterValue) {
                    if (Array.isArray(filterValue)) {
                        filter = filterValue
                    } else {
                        if (column.deserializeValue && !_ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_4__["default"].isDateType(column.dataType) && "number" !== column.dataType) {
                            filterValue = column.deserializeValue(filterValue)
                        }
                        filter = column.createFilterExpression(filterValue, "=", "headerFilter")
                    }
                    if (filter) {
                        filter.columnIndex = column.index
                    }
                    filterValues.push(filter)
                }));
                filterValues = _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_4__["default"].combineFilters(filterValues, "or");
                filters.push("exclude" === column.filterType ? ["!", filterValues] : filterValues)
            }
        }));
        return _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_4__["default"].combineFilters(filters)
    }
};
var headerFilterModule = {
    defaultOptions: function() {
        return {
            headerFilter: {
                visible: false,
                width: 252,
                height: 325,
                allowSearch: false,
                searchTimeout: 500,
                texts: {
                    emptyValue: _localization_message__WEBPACK_IMPORTED_MODULE_6__["default"].format("dxDataGrid-headerFilterEmptyValue"),
                    ok: _localization_message__WEBPACK_IMPORTED_MODULE_6__["default"].format("dxDataGrid-headerFilterOK"),
                    cancel: _localization_message__WEBPACK_IMPORTED_MODULE_6__["default"].format("dxDataGrid-headerFilterCancel")
                }
            }
        }
    },
    controllers: {
        headerFilter: HeaderFilterController
    },
    views: {
        headerFilterView: _ui_grid_core_header_filter_core__WEBPACK_IMPORTED_MODULE_5__["HeaderFilterView"]
    },
    extenders: {
        controllers: {
            data: DataControllerFilterRowExtender
        },
        views: {
            columnHeadersView: ColumnHeadersViewHeaderFilterExtender,
            headerPanel: HeaderPanelHeaderFilterExtender
        }
    }
};


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.header_filter_core.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.header_filter_core.js ***!
  \*************************************************************************************/
/*! exports provided: updateHeaderFilterItemSelectionState, HeaderFilterView, allowHeaderFiltering, headerFilterMixin */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "updateHeaderFilterItemSelectionState", function() { return updateHeaderFilterItemSelectionState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HeaderFilterView", function() { return HeaderFilterView; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "allowHeaderFiltering", function() { return allowHeaderFiltering; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "headerFilterMixin", function() { return headerFilterMixin; });
/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/renderer */ "./node_modules/devextreme/esm/core/renderer.js");
/* harmony import */ var _ui_grid_core_modules__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ui.grid_core.modules */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.modules.js");
/* harmony import */ var _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ui.grid_core.utils */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.utils.js");
/* harmony import */ var _core_utils_type__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/utils/type */ "./node_modules/devextreme/esm/core/utils/type.js");
/* harmony import */ var _core_utils_iterator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/utils/iterator */ "./node_modules/devextreme/esm/core/utils/iterator.js");
/* harmony import */ var _core_utils_extend__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core/utils/extend */ "./node_modules/devextreme/esm/core/utils/extend.js");
/* harmony import */ var _popup__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../popup */ "./node_modules/devextreme/esm/ui/popup.js");
/* harmony import */ var _tree_view__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../tree_view */ "./node_modules/devextreme/esm/ui/tree_view.js");
/* harmony import */ var _list_light__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../list_light */ "./node_modules/devextreme/esm/ui/list_light.js");
/* harmony import */ var _list_modules_search__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../list/modules/search */ "./node_modules/devextreme/esm/ui/list/modules/search.js");
/* harmony import */ var _list_modules_selection__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../list/modules/selection */ "./node_modules/devextreme/esm/ui/list/modules/selection.js");
/**
 * DevExtreme (esm/ui/grid_core/ui.grid_core.header_filter_core.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */











var HEADER_FILTER_CLASS = "dx-header-filter";
var HEADER_FILTER_MENU_CLASS = "dx-header-filter-menu";
var DEFAULT_SEARCH_EXPRESSION = "text";

function resetChildrenItemSelection(items) {
    items = items || [];
    for (var i = 0; i < items.length; i++) {
        items[i].selected = false;
        resetChildrenItemSelection(items[i].items)
    }
}

function updateSelectAllState(e, filterValues) {
    if (e.component.option("searchValue")) {
        return
    }
    var selectAllCheckBox = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(e.element).find(".dx-list-select-all-checkbox").data("dxCheckBox");
    if (selectAllCheckBox && filterValues && filterValues.length) {
        selectAllCheckBox.option("value", void 0)
    }
}

function isSearchEnabled(that, options) {
    var headerFilter = options.headerFilter;
    if (headerFilter && Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_3__["isDefined"])(headerFilter.allowSearch)) {
        return headerFilter.allowSearch
    }
    return that.option("headerFilter.allowSearch")
}
function updateHeaderFilterItemSelectionState(item, filterValuesMatch, isExcludeFilter) {
    if (filterValuesMatch ^ isExcludeFilter) {
        item.selected = true;
        if (isExcludeFilter && item.items) {
            for (var j = 0; j < item.items.length; j++) {
                if (!item.items[j].selected) {
                    item.selected = void 0;
                    break
                }
            }
        }
    } else if (isExcludeFilter || item.selected) {
        item.selected = false;
        resetChildrenItemSelection(item.items)
    }
}
var HeaderFilterView = _ui_grid_core_modules__WEBPACK_IMPORTED_MODULE_1__["default"].View.inherit({
    getPopupContainer: function() {
        return this._popupContainer
    },
    getListContainer: function() {
        return this._listContainer
    },
    applyHeaderFilter: function(options) {
        var list = this.getListContainer();
        var searchValue = list.option("searchValue");
        var isSelectAll = !searchValue && !options.isFilterBuilder && list.$element().find(".dx-checkbox").eq(0).hasClass("dx-checkbox-checked");
        var filterValues = [];
        if (!isSelectAll) {
            if ("tree" === options.type) {
                if (options.filterType) {
                    options.filterType = "include"
                }! function fillSelectedItemKeys(filterValues, items, isExclude) {
                    Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_4__["each"])(items, (function(_, item) {
                        if (void 0 !== item.selected && !!item.selected ^ isExclude) {
                            var node = list._getNode(item);
                            var hasChildren = list._hasChildren(node);
                            var hasChildrenWithSelection = hasChildren && item.items && item.items.some(item => item.selected);
                            if (!searchValue || !hasChildrenWithSelection) {
                                filterValues.push(item.value);
                                return
                            }
                        }
                        if (item.items && item.items.length) {
                            fillSelectedItemKeys(filterValues, item.items, isExclude)
                        }
                    }))
                }(filterValues, list.option("items"), false);
                options.filterValues = filterValues
            }
        } else {
            if ("tree" === options.type) {
                options.filterType = "exclude"
            }
            if (Array.isArray(options.filterValues)) {
                options.filterValues = []
            }
        }
        if (options.filterValues && !options.filterValues.length) {
            options.filterValues = null
        }
        options.apply();
        this.hideHeaderFilterMenu()
    },
    showHeaderFilterMenu: function($columnElement, options) {
        if (options) {
            this._initializePopupContainer(options);
            var popupContainer = this.getPopupContainer();
            this.hideHeaderFilterMenu();
            this.updatePopup($columnElement, options);
            popupContainer.show()
        }
    },
    hideHeaderFilterMenu: function() {
        var headerFilterMenu = this.getPopupContainer();
        headerFilterMenu && headerFilterMenu.hide()
    },
    updatePopup: function($element, options) {
        var showColumnLines = this.option("showColumnLines");
        var alignment = "right" === options.alignment ^ !showColumnLines ? "left" : "right";
        if (this._popupContainer) {
            this._cleanPopupContent();
            this._popupContainer.option("position", {
                my: alignment + " top",
                at: alignment + " bottom",
                of: $element,
                collision: "flip fit"
            })
        }
    },
    _getSearchExpr: function(options) {
        var lookup = options.lookup;
        var useDefaultSearchExpr = options.useDefaultSearchExpr;
        var headerFilterDataSource = options.headerFilter && options.headerFilter.dataSource;
        if (useDefaultSearchExpr || Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_3__["isDefined"])(headerFilterDataSource) && !Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_3__["isFunction"])(headerFilterDataSource)) {
            return DEFAULT_SEARCH_EXPRESSION
        }
        if (lookup) {
            return lookup.displayExpr || "this"
        }
        if (options.dataSource) {
            var group = options.dataSource.group;
            if (Array.isArray(group) && group.length > 0) {
                return group[0].selector
            } else if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_3__["isFunction"])(group) && !options.remoteFiltering) {
                return group
            }
        }
        return options.dataField || options.selector
    },
    _cleanPopupContent: function() {
        this._popupContainer && this._popupContainer.$content().empty()
    },
    _initializePopupContainer: function(options) {
        var that = this;
        var $element = that.element();
        var headerFilterOptions = that.option("headerFilter");
        var width = options.headerFilter && options.headerFilter.width || headerFilterOptions && headerFilterOptions.width;
        var height = options.headerFilter && options.headerFilter.height || headerFilterOptions && headerFilterOptions.height;
        var dxPopupOptions = {
            width: width,
            height: height,
            visible: false,
            shading: false,
            showTitle: false,
            showCloseButton: false,
            hideOnParentScroll: false,
            dragEnabled: false,
            closeOnOutsideClick: true,
            focusStateEnabled: false,
            copyRootClassesToWrapper: true,
            _ignoreCopyRootClassesToWrapperDeprecation: true,
            toolbarItems: [{
                toolbar: "bottom",
                location: "after",
                widget: "dxButton",
                options: {
                    text: headerFilterOptions.texts.ok,
                    onClick: function() {
                        that.applyHeaderFilter(options)
                    }
                }
            }, {
                toolbar: "bottom",
                location: "after",
                widget: "dxButton",
                options: {
                    text: headerFilterOptions.texts.cancel,
                    onClick: function() {
                        that.hideHeaderFilterMenu()
                    }
                }
            }],
            resizeEnabled: true,
            onShowing: function(e) {
                e.component.$content().parent().addClass("dx-dropdowneditor-overlay");
                that._initializeListContainer(options);
                options.onShowing && options.onShowing(e)
            },
            onShown: function() {
                that.getListContainer().focus()
            },
            onHidden: options.onHidden,
            onInitialized: function(e) {
                var component = e.component;
                component.option("animation", component._getDefaultOptions().animation)
            }
        };
        if (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_3__["isDefined"])(that._popupContainer)) {
            that._popupContainer = that._createComponent($element, _popup__WEBPACK_IMPORTED_MODULE_6__["default"], dxPopupOptions)
        } else {
            that._popupContainer.option(dxPopupOptions)
        }
    },
    _initializeListContainer: function(options) {
        var that = this;
        var $content = that._popupContainer.$content();
        var widgetOptions = {
            searchEnabled: isSearchEnabled(that, options),
            searchTimeout: that.option("headerFilter.searchTimeout"),
            searchMode: options.headerFilter && options.headerFilter.searchMode || "",
            dataSource: options.dataSource,
            onContentReady: function() {
                that.renderCompleted.fire()
            },
            itemTemplate: function(data, _, element) {
                var $element = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(element);
                if (options.encodeHtml) {
                    return $element.text(data.text)
                }
                return $element.html(data.text)
            }
        };

        function onOptionChanged(e) {
            if ("searchValue" === e.fullName && !options.isFilterBuilder && false !== that.option("headerFilter.hideSelectAllOnSearch")) {
                if ("tree" === options.type) {
                    e.component.option("showCheckBoxesMode", e.value ? "normal" : "selectAll")
                } else {
                    e.component.option("selectionMode", e.value ? "multiple" : "all")
                }
            }
        }
        if ("tree" === options.type) {
            that._listContainer = that._createComponent(Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>").appendTo($content), _tree_view__WEBPACK_IMPORTED_MODULE_7__["default"], Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_5__["extend"])(widgetOptions, {
                showCheckBoxesMode: options.isFilterBuilder ? "normal" : "selectAll",
                onOptionChanged: onOptionChanged,
                keyExpr: "id"
            }))
        } else {
            that._listContainer = that._createComponent(Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>").appendTo($content), _list_light__WEBPACK_IMPORTED_MODULE_8__["default"], Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_5__["extend"])(widgetOptions, {
                searchExpr: that._getSearchExpr(options),
                pageLoadMode: "scrollBottom",
                showSelectionControls: true,
                selectionMode: options.isFilterBuilder ? "multiple" : "all",
                onOptionChanged: onOptionChanged,
                onSelectionChanged: function(e) {
                    var items = e.component.option("items");
                    var selectedItems = e.component.option("selectedItems");
                    if (!e.component._selectedItemsUpdating && !e.component.option("searchValue") && !options.isFilterBuilder) {
                        var filterValues = options.filterValues || [];
                        var isExclude = "exclude" === options.filterType;
                        if (0 === selectedItems.length && items.length && (filterValues.length <= 1 || isExclude && filterValues.length === items.length - 1)) {
                            options.filterType = "include";
                            options.filterValues = []
                        } else if (selectedItems.length === items.length) {
                            options.filterType = "exclude";
                            options.filterValues = []
                        }
                    }
                    Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_4__["each"])(items, (function(index, item) {
                        var selected = _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_2__["default"].getIndexByKey(item, selectedItems, null) >= 0;
                        var oldSelected = !!item.selected;
                        if (oldSelected !== selected) {
                            item.selected = selected;
                            options.filterValues = options.filterValues || [];
                            var filterValueIndex = _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_2__["default"].getIndexByKey(item.value, options.filterValues, null);
                            if (filterValueIndex >= 0) {
                                options.filterValues.splice(filterValueIndex, 1)
                            }
                            if (selected ^ "exclude" === options.filterType) {
                                options.filterValues.push(item.value)
                            }
                        }
                    }));
                    updateSelectAllState(e, options.filterValues)
                },
                onContentReady: function(e) {
                    var component = e.component;
                    var items = component.option("items");
                    var selectedItems = [];
                    Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_4__["each"])(items, (function() {
                        if (this.selected) {
                            selectedItems.push(this)
                        }
                    }));
                    component._selectedItemsUpdating = true;
                    component.option("selectedItems", selectedItems);
                    component._selectedItemsUpdating = false;
                    updateSelectAllState(e, options.filterValues)
                }
            }))
        }
    },
    _renderCore: function() {
        this.element().addClass(HEADER_FILTER_MENU_CLASS)
    }
});
var allowHeaderFiltering = function(column) {
    return Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_3__["isDefined"])(column.allowHeaderFiltering) ? column.allowHeaderFiltering : column.allowFiltering
};
var headerFilterMixin = {
    _applyColumnState: function(options) {
        var $headerFilterIndicator;
        var rootElement = options.rootElement;
        var column = options.column;
        if ("headerFilter" === options.name) {
            rootElement.find("." + HEADER_FILTER_CLASS).remove();
            if (allowHeaderFiltering(column)) {
                $headerFilterIndicator = this.callBase(options).toggleClass("dx-header-filter-empty", this._isHeaderFilterEmpty(column));
                if (!this.option("useLegacyKeyboardNavigation")) {
                    $headerFilterIndicator.attr("tabindex", this.option("tabindex") || 0)
                }
            }
            return $headerFilterIndicator
        }
        return this.callBase(options)
    },
    _isHeaderFilterEmpty: function(column) {
        return !column.filterValues || !column.filterValues.length
    },
    _getIndicatorClassName: function(name) {
        if ("headerFilter" === name) {
            return HEADER_FILTER_CLASS
        }
        return this.callBase(name)
    },
    _renderIndicator: function(options) {
        var $container = options.container;
        var $indicator = options.indicator;
        if ("headerFilter" === options.name) {
            var rtlEnabled = this.option("rtlEnabled");
            if ($container.children().length && (!rtlEnabled && "right" === options.columnAlignment || rtlEnabled && "left" === options.columnAlignment)) {
                $container.prepend($indicator);
                return
            }
        }
        this.callBase(options)
    },
    optionChanged: function(args) {
        if ("headerFilter" === args.name) {
            var requireReady = "columnHeadersView" === this.name;
            this._invalidate(requireReady, requireReady);
            args.handled = true
        } else {
            this.callBase(args)
        }
    }
};


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.header_panel.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.header_panel.js ***!
  \*******************************************************************************/
/*! exports provided: headerPanelModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "headerPanelModule", function() { return headerPanelModule; });
/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/renderer */ "./node_modules/devextreme/esm/core/renderer.js");
/* harmony import */ var _toolbar__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../toolbar */ "./node_modules/devextreme/esm/ui/toolbar.js");
/* harmony import */ var _ui_grid_core_columns_view__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ui.grid_core.columns_view */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.columns_view.js");
/* harmony import */ var _core_utils_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/utils/common */ "./node_modules/devextreme/esm/core/utils/common.js");
/* harmony import */ var _core_utils_type__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/utils/type */ "./node_modules/devextreme/esm/core/utils/type.js");
/* harmony import */ var _localization_message__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../localization/message */ "./node_modules/devextreme/esm/localization/message.js");
/* harmony import */ var _drop_down_menu__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../drop_down_menu */ "./node_modules/devextreme/esm/ui/drop_down_menu.js");
/* harmony import */ var _core_utils_extend__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../core/utils/extend */ "./node_modules/devextreme/esm/core/utils/extend.js");
/* harmony import */ var _core_utils_data__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../core/utils/data */ "./node_modules/devextreme/esm/core/utils/data.js");
/**
 * DevExtreme (esm/ui/grid_core/ui.grid_core.header_panel.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */









var HEADER_PANEL_CLASS = "header-panel";
var TOOLBAR_BUTTON_CLASS = "toolbar-button";
var TOOLBAR_ARIA_LABEL = "-ariaToolbar";
var DEFAULT_TOOLBAR_ITEM_NAMES = ["addRowButton", "applyFilterButton", "columnChooserButton", "exportButton", "groupPanel", "revertButton", "saveButton", "searchPanel"];
var HeaderPanel = _ui_grid_core_columns_view__WEBPACK_IMPORTED_MODULE_2__["ColumnsView"].inherit({
    _getToolbarItems: function() {
        return []
    },
    _getButtonContainer: function() {
        return Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>").addClass(this.addWidgetPrefix(TOOLBAR_BUTTON_CLASS))
    },
    _getToolbarButtonClass: function(specificClass) {
        var secondClass = specificClass ? " " + specificClass : "";
        return this.addWidgetPrefix(TOOLBAR_BUTTON_CLASS) + secondClass
    },
    _getToolbarOptions: function() {
        var userToolbarOptions = this.option("toolbar");
        var options = {
            toolbarOptions: {
                items: this._getToolbarItems(),
                visible: null === userToolbarOptions || void 0 === userToolbarOptions ? void 0 : userToolbarOptions.visible,
                disabled: null === userToolbarOptions || void 0 === userToolbarOptions ? void 0 : userToolbarOptions.disabled,
                onItemRendered: function(e) {
                    var itemRenderedCallback = e.itemData.onItemRendered;
                    if (itemRenderedCallback) {
                        itemRenderedCallback(e)
                    }
                }
            }
        };
        var userItems = null === userToolbarOptions || void 0 === userToolbarOptions ? void 0 : userToolbarOptions.items;
        options.toolbarOptions.items = this._normalizeToolbarItems(options.toolbarOptions.items, userItems);
        this.executeAction("onToolbarPreparing", options);
        if (options.toolbarOptions && !Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_4__["isDefined"])(options.toolbarOptions.visible)) {
            var toolbarItems = options.toolbarOptions.items;
            options.toolbarOptions.visible = !!(null !== toolbarItems && void 0 !== toolbarItems && toolbarItems.length)
        }
        return options.toolbarOptions
    },
    _normalizeToolbarItems(defaultItems, userItems) {
        defaultItems.forEach(button => {
            if (!DEFAULT_TOOLBAR_ITEM_NAMES.includes(button.name)) {
                throw new Error("Default toolbar item '".concat(button.name, "' is not added to DEFAULT_TOOLBAR_ITEM_NAMES"))
            }
        });
        var defaultProps = {
            location: "after"
        };
        var isArray = Array.isArray(userItems);
        if (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_4__["isDefined"])(userItems)) {
            return defaultItems
        }
        if (!isArray) {
            userItems = [userItems]
        }
        var defaultButtonsByNames = {};
        defaultItems.forEach(button => {
            defaultButtonsByNames[button.name] = button
        });
        var normalizedItems = userItems.map(button => {
            if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_4__["isString"])(button)) {
                button = {
                    name: button
                }
            }
            if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_4__["isDefined"])(button.name)) {
                if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_4__["isDefined"])(defaultButtonsByNames[button.name])) {
                    button = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_7__["extend"])(true, {}, defaultButtonsByNames[button.name], button)
                } else if (DEFAULT_TOOLBAR_ITEM_NAMES.includes(button.name)) {
                    button.visible = false
                }
            }
            return Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_7__["extend"])(true, {}, defaultProps, button)
        });
        return isArray ? normalizedItems : normalizedItems[0]
    },
    _renderCore: function() {
        if (!this._toolbar) {
            var $headerPanel = this.element();
            $headerPanel.addClass(this.addWidgetPrefix(HEADER_PANEL_CLASS));
            var label = _localization_message__WEBPACK_IMPORTED_MODULE_5__["default"].format(this.component.NAME + TOOLBAR_ARIA_LABEL);
            var $toolbar = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>").attr("aria-label", label).appendTo($headerPanel);
            this._toolbar = this._createComponent($toolbar, _toolbar__WEBPACK_IMPORTED_MODULE_1__["default"], this._toolbarOptions)
        } else {
            this._toolbar.option(this._toolbarOptions)
        }
    },
    _columnOptionChanged: _core_utils_common__WEBPACK_IMPORTED_MODULE_3__["noop"],
    _handleDataChanged: function() {
        if (this._requireReady) {
            this.render()
        }
    },
    init: function() {
        this.callBase();
        this.createAction("onToolbarPreparing", {
            excludeValidators: ["disabled", "readOnly"]
        })
    },
    render: function() {
        this._toolbarOptions = this._getToolbarOptions();
        this.callBase.apply(this, arguments)
    },
    setToolbarItemDisabled: function(name, optionValue) {
        var toolbarInstance = this._toolbar;
        if (toolbarInstance) {
            var items = toolbarInstance.option("items") || [];
            var itemIndex = items.indexOf(items.filter((function(item) {
                return item.name === name
            }))[0]);
            if (itemIndex >= 0) {
                var itemOptionPrefix = "items[" + itemIndex + "]";
                if (toolbarInstance.option(itemOptionPrefix + ".options")) {
                    toolbarInstance.option(itemOptionPrefix + ".options.disabled", optionValue)
                } else {
                    toolbarInstance.option(itemOptionPrefix + ".disabled", optionValue)
                }
            }
        }
    },
    updateToolbarDimensions: function() {
        var _this$_toolbar;
        null === (_this$_toolbar = this._toolbar) || void 0 === _this$_toolbar ? void 0 : _this$_toolbar.updateDimensions()
    },
    getHeaderPanel: function() {
        return this.element()
    },
    getHeight: function() {
        return this.getElementHeight()
    },
    optionChanged: function(args) {
        if ("onToolbarPreparing" === args.name) {
            this._invalidate();
            args.handled = true
        }
        if ("toolbar" === args.name) {
            args.handled = true;
            if (this._toolbar) {
                var parts = Object(_core_utils_data__WEBPACK_IMPORTED_MODULE_8__["getPathParts"])(args.fullName);
                var optionName = args.fullName.replace(/^toolbar\./, "");
                if (1 === parts.length) {
                    var toolbarOptions = this._getToolbarOptions();
                    this._toolbar.option(toolbarOptions)
                } else if ("items" === parts[1]) {
                    if (2 === parts.length) {
                        var _toolbarOptions = this._getToolbarOptions();
                        this._toolbar.option("items", _toolbarOptions.items)
                    } else if (3 === parts.length) {
                        var normalizedItem = this._normalizeToolbarItems(this._getToolbarItems(), args.value);
                        this._toolbar.option(optionName, normalizedItem)
                    } else if (parts.length >= 4) {
                        this._toolbar.option(optionName, args.value)
                    }
                } else {
                    this._toolbar.option(optionName, args.value)
                }
            }
        }
        this.callBase(args)
    },
    isVisible: function() {
        return this._toolbarOptions && this._toolbarOptions.visible
    },
    allowDragging: _core_utils_common__WEBPACK_IMPORTED_MODULE_3__["noop"]
});
var headerPanelModule = {
    defaultOptions: function() {
        return {}
    },
    views: {
        headerPanel: HeaderPanel
    },
    extenders: {
        controllers: {
            resizing: {
                _updateDimensionsCore: function() {
                    this.callBase.apply(this, arguments);
                    this.getView("headerPanel").updateToolbarDimensions()
                }
            }
        }
    }
};


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.keyboard_navigation.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.keyboard_navigation.js ***!
  \**************************************************************************************/
/*! exports provided: keyboardNavigationModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "keyboardNavigationModule", function() { return keyboardNavigationModule; });
/* harmony import */ var _core_utils_size__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/utils/size */ "./node_modules/devextreme/esm/core/utils/size.js");
/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/renderer */ "./node_modules/devextreme/esm/core/renderer.js");
/* harmony import */ var _core_dom_adapter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/dom_adapter */ "./node_modules/devextreme/esm/core/dom_adapter.js");
/* harmony import */ var _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../events/core/events_engine */ "./node_modules/devextreme/esm/events/core/events_engine.js");
/* harmony import */ var _ui_grid_core_modules__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ui.grid_core.modules */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.modules.js");
/* harmony import */ var _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ui.grid_core.utils */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.utils.js");
/* harmony import */ var _core_utils_type__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../core/utils/type */ "./node_modules/devextreme/esm/core/utils/type.js");
/* harmony import */ var _core_utils_array__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../core/utils/array */ "./node_modules/devextreme/esm/core/utils/array.js");
/* harmony import */ var _widget_selectors__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../widget/selectors */ "./node_modules/devextreme/esm/ui/widget/selectors.js");
/* harmony import */ var _events_utils_index__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../events/utils/index */ "./node_modules/devextreme/esm/events/utils/index.js");
/* harmony import */ var _events_pointer__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../events/pointer */ "./node_modules/devextreme/esm/events/pointer.js");
/* harmony import */ var _events_click__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../events/click */ "./node_modules/devextreme/esm/events/click.js");
/* harmony import */ var _core_utils_common__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../core/utils/common */ "./node_modules/devextreme/esm/core/utils/common.js");
/* harmony import */ var _shared_accessibility__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../shared/accessibility */ "./node_modules/devextreme/esm/ui/shared/accessibility.js");
/* harmony import */ var _core_utils_browser__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../core/utils/browser */ "./node_modules/devextreme/esm/core/utils/browser.js");
/* harmony import */ var _events_short__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../events/short */ "./node_modules/devextreme/esm/events/short.js");
/* harmony import */ var _core_devices__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../core/devices */ "./node_modules/devextreme/esm/core/devices.js");
/**
 * DevExtreme (esm/ui/grid_core/ui.grid_core.keyboard_navigation.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */

















var ROWS_VIEW_CLASS = "rowsview";
var EDIT_FORM_CLASS = "edit-form";
var GROUP_FOOTER_CLASS = "group-footer";
var ROW_CLASS = "dx-row";
var DATA_ROW_CLASS = "dx-data-row";
var GROUP_ROW_CLASS = "dx-group-row";
var HEADER_ROW_CLASS = "dx-header-row";
var EDIT_FORM_ITEM_CLASS = "edit-form-item";
var MASTER_DETAIL_ROW_CLASS = "dx-master-detail-row";
var FREESPACE_ROW_CLASS = "dx-freespace-row";
var VIRTUAL_ROW_CLASS = "dx-virtual-row";
var MASTER_DETAIL_CELL_CLASS = "dx-master-detail-cell";
var EDITOR_CELL_CLASS = "dx-editor-cell";
var DROPDOWN_EDITOR_OVERLAY_CLASS = "dx-dropdowneditor-overlay";
var COMMAND_EXPAND_CLASS = "dx-command-expand";
var COMMAND_SELECT_CLASS = "dx-command-select";
var COMMAND_EDIT_CLASS = "dx-command-edit";
var COMMAND_CELL_SELECTOR = "[class^=dx-command]";
var CELL_FOCUS_DISABLED_CLASS = "dx-cell-focus-disabled";
var DATEBOX_WIDGET_NAME = "dxDateBox";
var FOCUS_STATE_CLASS = "dx-state-focused";
var WIDGET_CLASS = "dx-widget";
var REVERT_BUTTON_CLASS = "dx-revert-button";
var FAST_EDITING_DELETE_KEY = "delete";
var INTERACTIVE_ELEMENTS_SELECTOR = "input:not([type='hidden']), textarea, a, select, button, [tabindex], .dx-checkbox";
var NON_FOCUSABLE_ELEMENTS_SELECTOR = "".concat(INTERACTIVE_ELEMENTS_SELECTOR, ", .dx-dropdowneditor-icon");
var EDIT_MODE_ROW = "row";
var EDIT_MODE_FORM = "form";
var EDIT_MODE_BATCH = "batch";
var EDIT_MODE_CELL = "cell";
var FOCUS_TYPE_ROW = "row";
var FOCUS_TYPE_CELL = "cell";
var COLUMN_HEADERS_VIEW = "columnHeadersView";
var FUNCTIONAL_KEYS = ["shift", "control", "alt"];

function isGroupRow($row) {
    return $row && $row.hasClass(GROUP_ROW_CLASS)
}

function isDetailRow($row) {
    return $row && $row.hasClass(MASTER_DETAIL_ROW_CLASS)
}

function isDataRow($row) {
    return $row && !isGroupRow($row) && !isDetailRow($row)
}

function isNotFocusedRow($row) {
    return !$row || $row.hasClass(FREESPACE_ROW_CLASS) || $row.hasClass(VIRTUAL_ROW_CLASS)
}

function isCellElement($element) {
    return $element.length && "TD" === $element[0].tagName
}

function isEditorCell(that, $cell) {
    return !that._isRowEditMode() && $cell && !$cell.hasClass(COMMAND_SELECT_CLASS) && $cell.hasClass(EDITOR_CELL_CLASS)
}

function isElementDefined($element) {
    return Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isDefined"])($element) && $element.length > 0
}

function isMobile() {
    return "desktop" !== _core_devices__WEBPACK_IMPORTED_MODULE_16__["default"].current().deviceType
}

function isCellInHeaderRow($cell) {
    return !!$cell.parent(".".concat(HEADER_ROW_CLASS)).length
}

function isFixedColumnIndexOffsetRequired(that, column) {
    var rtlEnabled = that.option("rtlEnabled");
    var result = false;
    if (rtlEnabled) {
        result = !("right" === column.fixedPosition || Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isDefined"])(column.command) && !Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isDefined"])(column.fixedPosition))
    } else {
        result = !(!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isDefined"])(column.fixedPosition) || "left" === column.fixedPosition)
    }
    return result
}

function shouldPreventScroll(that) {
    var keyboardController = that.getController("keyboardNavigation");
    return keyboardController._isVirtualScrolling() ? that.option("focusedRowIndex") === keyboardController.getRowIndex() : false
}
var KeyboardNavigationController = _ui_grid_core_modules__WEBPACK_IMPORTED_MODULE_4__["default"].ViewController.inherit({
    init: function() {
        this._dataController = this.getController("data");
        this._selectionController = this.getController("selection");
        this._editingController = this.getController("editing");
        this._headerPanel = this.getView("headerPanel");
        this._columnsController = this.getController("columns");
        this._editorFactory = this.getController("editorFactory");
        if (this.isKeyboardEnabled()) {
            _shared_accessibility__WEBPACK_IMPORTED_MODULE_13__["subscribeVisibilityChange"]();
            this._updateFocusTimeout = null;
            this._fastEditingStarted = false;
            this._focusedCellPosition = {};
            this._canceledCellPosition = null;
            this._editorFactory.focused.add($element => {
                this.setupFocusedView();
                if (this._isNeedScroll) {
                    if ($element.is(":visible") && this._focusedView && this._focusedView.getScrollable) {
                        this._focusedView._scrollToElement($element);
                        this._isNeedScroll = false
                    }
                }
            });
            this._initViewHandlers();
            this._initDocumentHandlers();
            this.createAction("onKeyDown")
        }
    },
    _initViewHandlers: function() {
        var rowsView = this.getView("rowsView");
        var rowsViewFocusHandler = event => {
            var $element = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(event.target);
            var isRelatedTargetInRowsView = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(event.relatedTarget).closest(rowsView.element()).length;
            var isCommandButton = $element.hasClass("dx-link");
            if (isCommandButton && !isRelatedTargetInRowsView && this._isEventInCurrentGrid(event)) {
                var $focusedCell = this._getFocusedCell();
                $focusedCell = !isElementDefined($focusedCell) ? rowsView.getCellElements(0).filter("[tabindex]").eq(0) : $focusedCell;
                if (!$element.closest($focusedCell).length) {
                    event.preventDefault();
                    _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__["default"].trigger($focusedCell, "focus")
                }
            }
        };
        rowsView.renderCompleted.add(e => {
            var $rowsView = rowsView.element();
            var isFullUpdate = !e || "refresh" === e.changeType;
            var isFocusedViewCorrect = this._focusedView && this._focusedView.name === rowsView.name;
            var needUpdateFocus = false;
            var isAppend = e && ("append" === e.changeType || "prepend" === e.changeType);
            var $focusedElement = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(":focus");
            var isFocusedElementCorrect = !$focusedElement.length || $focusedElement.closest($rowsView).length;
            _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__["default"].off($rowsView, "focusin", rowsViewFocusHandler);
            _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__["default"].on($rowsView, "focusin", rowsViewFocusHandler);
            this._initPointerEventHandler();
            this._initKeyDownHandler();
            this._setRowsViewAttributes();
            if (isFocusedViewCorrect && isFocusedElementCorrect) {
                needUpdateFocus = this._isNeedFocus ? !isAppend : this._isHiddenFocus && isFullUpdate;
                needUpdateFocus && this._updateFocus(true)
            }
        })
    },
    _initDocumentHandlers: function() {
        var document = _core_dom_adapter__WEBPACK_IMPORTED_MODULE_2__["default"].getDocument();
        this._documentClickHandler = this.createAction(e => {
            var $target = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(e.event.target);
            var isCurrentRowsViewClick = this._isEventInCurrentGrid(e.event) && $target.closest(".".concat(this.addWidgetPrefix(ROWS_VIEW_CLASS))).length;
            var isEditorOverlay = $target.closest(".".concat(DROPDOWN_EDITOR_OVERLAY_CLASS)).length;
            var columnsResizerController = this.getController("columnsResizer");
            var isColumnResizing = !!columnsResizerController && columnsResizerController.isResizing();
            if (!isCurrentRowsViewClick && !isEditorOverlay && !isColumnResizing) {
                var targetInsideFocusedView = this._focusedView ? $target.parents().filter(this._focusedView.element()).length > 0 : false;
                !targetInsideFocusedView && this._resetFocusedCell(true);
                this._resetFocusedView()
            }
        });
        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__["default"].on(document, Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_9__["addNamespace"])(_events_pointer__WEBPACK_IMPORTED_MODULE_10__["default"].down, "dxDataGridKeyboardNavigation"), this._documentClickHandler)
    },
    _setRowsViewAttributes: function() {
        var $rowsView = this._getRowsViewElement();
        var isGridEmpty = !this._dataController.getVisibleRows().length;
        if (isGridEmpty) {
            this._applyTabIndexToElement($rowsView)
        }
    },
    _initPointerEventHandler: function() {
        var pointerEventName = !isMobile() ? _events_pointer__WEBPACK_IMPORTED_MODULE_10__["default"].down : _events_click__WEBPACK_IMPORTED_MODULE_11__["name"];
        var clickSelector = ".".concat(ROW_CLASS, " > td, .").concat(ROW_CLASS);
        var $rowsView = this._getRowsViewElement();
        if (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isDefined"])(this._pointerEventAction)) {
            this._pointerEventAction = this.createAction(this._pointerEventHandler)
        }
        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__["default"].off($rowsView, Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_9__["addNamespace"])(pointerEventName, "dxDataGridKeyboardNavigation"), this._pointerEventAction);
        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__["default"].on($rowsView, Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_9__["addNamespace"])(pointerEventName, "dxDataGridKeyboardNavigation"), clickSelector, this._pointerEventAction)
    },
    _initKeyDownHandler: function() {
        var $rowsView = this._getRowsViewElement();
        _events_short__WEBPACK_IMPORTED_MODULE_15__["keyboard"].off(this._keyDownListener);
        this._keyDownListener = _events_short__WEBPACK_IMPORTED_MODULE_15__["keyboard"].on($rowsView, null, e => this._keyDownHandler(e))
    },
    dispose: function() {
        this.callBase();
        this._resetFocusedView();
        _events_short__WEBPACK_IMPORTED_MODULE_15__["keyboard"].off(this._keyDownListener);
        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__["default"].off(_core_dom_adapter__WEBPACK_IMPORTED_MODULE_2__["default"].getDocument(), Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_9__["addNamespace"])(_events_pointer__WEBPACK_IMPORTED_MODULE_10__["default"].down, "dxDataGridKeyboardNavigation"), this._documentClickHandler);
        clearTimeout(this._updateFocusTimeout);
        _shared_accessibility__WEBPACK_IMPORTED_MODULE_13__["unsubscribeVisibilityChange"]()
    },
    optionChanged: function(args) {
        switch (args.name) {
            case "keyboardNavigation":
            case "useLegacyKeyboardNavigation":
                args.handled = true;
                break;
            default:
                this.callBase(args)
        }
    },
    isRowFocusType: function() {
        return this.focusType === FOCUS_TYPE_ROW
    },
    isCellFocusType: function() {
        return this.focusType === FOCUS_TYPE_CELL
    },
    setRowFocusType: function() {
        if (this.option("focusedRowEnabled")) {
            this.focusType = FOCUS_TYPE_ROW
        }
    },
    setCellFocusType: function() {
        this.focusType = FOCUS_TYPE_CELL
    },
    _keyDownHandler: function(e) {
        var needStopPropagation = true;
        var isHandled = this._processOnKeyDown(e);
        var isEditing = this._editingController.isEditing();
        var originalEvent = e.originalEvent;
        if (originalEvent.isDefaultPrevented()) {
            return
        }
        this._isNeedFocus = true;
        this._isNeedScroll = true;
        FUNCTIONAL_KEYS.indexOf(e.keyName) < 0 && this._updateFocusedCellPositionByTarget(originalEvent.target);
        if (!isHandled) {
            switch (e.keyName) {
                case "leftArrow":
                case "rightArrow":
                    this._leftRightKeysHandler(e, isEditing);
                    isHandled = true;
                    break;
                case "upArrow":
                case "downArrow":
                    if (e.ctrl) {
                        _shared_accessibility__WEBPACK_IMPORTED_MODULE_13__["selectView"]("rowsView", this, originalEvent)
                    } else {
                        this._upDownKeysHandler(e, isEditing)
                    }
                    isHandled = true;
                    break;
                case "pageUp":
                case "pageDown":
                    this._pageUpDownKeyHandler(e);
                    isHandled = true;
                    break;
                case "space":
                    isHandled = this._spaceKeyHandler(e, isEditing);
                    break;
                case "A":
                    if (Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_9__["isCommandKeyPressed"])(e.originalEvent)) {
                        this._ctrlAKeyHandler(e, isEditing);
                        isHandled = true
                    } else {
                        isHandled = this._beginFastEditing(e.originalEvent)
                    }
                    break;
                case "tab":
                    this._tabKeyHandler(e, isEditing);
                    isHandled = true;
                    break;
                case "enter":
                    this._enterKeyHandler(e, isEditing);
                    isHandled = true;
                    break;
                case "escape":
                    this._escapeKeyHandler(e, isEditing);
                    isHandled = true;
                    break;
                case "F":
                    if (Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_9__["isCommandKeyPressed"])(e.originalEvent)) {
                        this._ctrlFKeyHandler(e);
                        isHandled = true
                    } else {
                        isHandled = this._beginFastEditing(e.originalEvent)
                    }
                    break;
                case "F2":
                    this._f2KeyHandler();
                    isHandled = true;
                    break;
                case "del":
                case "backspace":
                    if (this._isFastEditingAllowed() && !this._isFastEditingStarted()) {
                        isHandled = this._beginFastEditing(originalEvent, true)
                    }
            }
            if (!isHandled && !this._beginFastEditing(originalEvent)) {
                this._isNeedFocus = false;
                this._isNeedScroll = false;
                needStopPropagation = false
            }
            if (needStopPropagation) {
                originalEvent.stopPropagation()
            }
        }
    },
    _processOnKeyDown: function(eventArgs) {
        var originalEvent = eventArgs.originalEvent;
        var args = {
            handled: false,
            event: originalEvent
        };
        this.executeAction("onKeyDown", args);
        eventArgs.ctrl = originalEvent.ctrlKey;
        eventArgs.alt = originalEvent.altKey;
        eventArgs.shift = originalEvent.shiftKey;
        return !!args.handled
    },
    _closeEditCell: function() {
        setTimeout(() => {
            this._editingController.closeEditCell()
        })
    },
    _leftRightKeysHandler: function(eventArgs, isEditing) {
        var rowIndex = this.getVisibleRowIndex();
        var $event = eventArgs.originalEvent;
        var $row = this._focusedView && this._focusedView.getRow(rowIndex);
        var directionCode = this._getDirectionCodeByKey(eventArgs.keyName);
        var isEditingNavigationMode = this._isFastEditingStarted();
        var allowNavigate = (!isEditing || isEditingNavigationMode) && isDataRow($row);
        if (allowNavigate) {
            this.setCellFocusType();
            isEditingNavigationMode && this._closeEditCell();
            if (this._isVirtualColumnRender()) {
                this._processVirtualHorizontalPosition(directionCode)
            }
            var $cell = this._getNextCell(directionCode);
            if (isElementDefined($cell)) {
                this._arrowKeysHandlerFocusCell($event, $cell, directionCode)
            }
            $event && $event.preventDefault()
        }
    },
    _upDownKeysHandler: function(eventArgs, isEditing) {
        var _this$_editingControl;
        var rowIndex = this._focusedCellPosition.rowIndex;
        var visibleRowIndex = this.getVisibleRowIndex();
        var $row = this._focusedView && this._focusedView.getRow(visibleRowIndex);
        var $event = eventArgs.originalEvent;
        var isUpArrow = "upArrow" === eventArgs.keyName;
        var dataSource = this._dataController.dataSource();
        var isRowEditingInCurrentRow = null === (_this$_editingControl = this._editingController) || void 0 === _this$_editingControl ? void 0 : _this$_editingControl.isEditRow(visibleRowIndex);
        var isEditingNavigationMode = this._isFastEditingStarted();
        var allowNavigate = (!isRowEditingInCurrentRow || !isEditing || isEditingNavigationMode) && $row && !isDetailRow($row);
        if (allowNavigate) {
            isEditingNavigationMode && this._closeEditCell();
            if (!this._navigateNextCell($event, eventArgs.keyName)) {
                if (this._isVirtualRowRender() && isUpArrow && dataSource && !dataSource.isLoading()) {
                    var rowHeight = Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getOuterHeight"])($row);
                    rowIndex = this._focusedCellPosition.rowIndex - 1;
                    this._scrollBy(0, -rowHeight, rowIndex, $event)
                }
            }
            $event && $event.preventDefault()
        }
    },
    _pageUpDownKeyHandler: function(eventArgs) {
        var pageIndex = this._dataController.pageIndex();
        var pageCount = this._dataController.pageCount();
        var pagingEnabled = this.option("paging.enabled");
        var isPageUp = "pageUp" === eventArgs.keyName;
        var pageStep = isPageUp ? -1 : 1;
        var scrollable = this.getView("rowsView").getScrollable();
        if (pagingEnabled && !this._isVirtualScrolling()) {
            if ((isPageUp ? pageIndex > 0 : pageIndex < pageCount - 1) && !this._isVirtualScrolling()) {
                this._dataController.pageIndex(pageIndex + pageStep);
                eventArgs.originalEvent.preventDefault()
            }
        } else if (scrollable && Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getHeight"])(scrollable.container()) < Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getHeight"])(scrollable.$content())) {
            this._scrollBy(0, Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getHeight"])(scrollable.container()) * pageStep);
            eventArgs.originalEvent.preventDefault()
        }
    },
    _spaceKeyHandler: function(eventArgs, isEditing) {
        var rowIndex = this.getVisibleRowIndex();
        var $target = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(eventArgs.originalEvent && eventArgs.originalEvent.target);
        if (this.option("selection") && "none" !== this.option("selection").mode && !isEditing) {
            var isFocusedRowElement = "row" === this._getElementType($target) && this.isRowFocusType() && isDataRow($target);
            var isFocusedSelectionCell = $target.hasClass(COMMAND_SELECT_CLASS);
            if (isFocusedSelectionCell && "onClick" === this.option("selection.showCheckBoxesMode")) {
                this._selectionController.startSelectionWithCheckboxes()
            }
            if (isFocusedRowElement || $target.parent().hasClass(DATA_ROW_CLASS) || $target.hasClass(this.addWidgetPrefix(ROWS_VIEW_CLASS))) {
                this._selectionController.changeItemSelection(rowIndex, {
                    shift: eventArgs.shift,
                    control: eventArgs.ctrl
                });
                eventArgs.originalEvent.preventDefault();
                return true
            }
            return false
        } else {
            return this._beginFastEditing(eventArgs.originalEvent)
        }
    },
    _ctrlAKeyHandler: function(eventArgs, isEditing) {
        if (!isEditing && !eventArgs.alt && "multiple" === this.option("selection.mode") && this.option("selection.allowSelectAll")) {
            this._selectionController.selectAll();
            eventArgs.originalEvent.preventDefault()
        }
    },
    _tabKeyHandler: function(eventArgs, isEditing) {
        var editingOptions = this.option("editing");
        var direction = eventArgs.shift ? "previous" : "next";
        var isCellPositionDefined = Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isDefined"])(this._focusedCellPosition) && !Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isEmptyObject"])(this._focusedCellPosition);
        var isOriginalHandlerRequired = !isCellPositionDefined || !eventArgs.shift && this._isLastValidCell(this._focusedCellPosition) || eventArgs.shift && this._isFirstValidCell(this._focusedCellPosition);
        var eventTarget = eventArgs.originalEvent.target;
        var focusedViewElement = this._focusedView && this._focusedView.element();
        if (this._handleTabKeyOnMasterDetailCell(eventTarget, direction)) {
            return
        }
        Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(focusedViewElement).addClass(FOCUS_STATE_CLASS);
        if (editingOptions && eventTarget && !isOriginalHandlerRequired) {
            if (Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(eventTarget).hasClass(this.addWidgetPrefix(ROWS_VIEW_CLASS))) {
                this._resetFocusedCell()
            }
            if (this._isVirtualColumnRender()) {
                this._processVirtualHorizontalPosition(direction)
            }
            if (isEditing) {
                if (!this._editingCellTabHandler(eventArgs, direction)) {
                    return
                }
            } else if (this._targetCellTabHandler(eventArgs, direction)) {
                isOriginalHandlerRequired = true
            }
        }
        if (isOriginalHandlerRequired) {
            this._editorFactory.loseFocus();
            if (this._editingController.isEditing() && !this._isRowEditMode()) {
                this._resetFocusedCell(true);
                this._resetFocusedView();
                this._closeEditCell()
            }
        } else {
            eventArgs.originalEvent.preventDefault()
        }
    },
    _getMaxHorizontalOffset: function() {
        var scrollable = this.component.getScrollable();
        var rowsView = this.getView("rowsView");
        var offset = scrollable ? scrollable.scrollWidth() - Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getWidth"])(rowsView.element()) : 0;
        return offset
    },
    _isColumnRendered: function(columnIndex) {
        var allVisibleColumns = this._columnsController.getVisibleColumns(null, true);
        var renderedVisibleColumns = this._columnsController.getVisibleColumns();
        var column = allVisibleColumns[columnIndex];
        var result = false;
        if (column) {
            result = renderedVisibleColumns.indexOf(column) >= 0
        }
        return result
    },
    _isFixedColumn: function(columnIndex) {
        var allVisibleColumns = this._columnsController.getVisibleColumns(null, true);
        var column = allVisibleColumns[columnIndex];
        return !!column && !!column.fixed
    },
    _isColumnVirtual: function(columnIndex) {
        var localColumnIndex = columnIndex - this._columnsController.getColumnIndexOffset();
        var visibleColumns = this._columnsController.getVisibleColumns();
        var column = visibleColumns[localColumnIndex];
        return !!column && "virtual" === column.command
    },
    _processVirtualHorizontalPosition: function(direction) {
        var scrollable = this.component.getScrollable();
        var columnIndex = this.getColumnIndex();
        var nextColumnIndex;
        var horizontalScrollPosition = 0;
        var needToScroll = false;
        switch (direction) {
            case "next":
            case "nextInRow":
                var columnsCount = this._getVisibleColumnCount();
                nextColumnIndex = columnIndex + 1;
                horizontalScrollPosition = this.option("rtlEnabled") ? this._getMaxHorizontalOffset() : 0;
                if ("next" === direction) {
                    needToScroll = columnsCount === nextColumnIndex || this._isFixedColumn(columnIndex) && !this._isColumnRendered(nextColumnIndex)
                } else {
                    needToScroll = columnsCount > nextColumnIndex && this._isFixedColumn(columnIndex) && !this._isColumnRendered(nextColumnIndex)
                }
                break;
            case "previous":
            case "previousInRow":
                nextColumnIndex = columnIndex - 1;
                horizontalScrollPosition = this.option("rtlEnabled") ? 0 : this._getMaxHorizontalOffset();
                if ("previous" === direction) {
                    var columnIndexOffset = this._columnsController.getColumnIndexOffset();
                    var leftEdgePosition = nextColumnIndex < 0 && 0 === columnIndexOffset;
                    needToScroll = leftEdgePosition || this._isFixedColumn(columnIndex) && !this._isColumnRendered(nextColumnIndex)
                } else {
                    needToScroll = nextColumnIndex >= 0 && this._isFixedColumn(columnIndex) && !this._isColumnRendered(nextColumnIndex)
                }
        }
        if (needToScroll) {
            scrollable.scrollTo({
                left: horizontalScrollPosition
            })
        } else if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isDefined"])(nextColumnIndex) && Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isDefined"])(direction) && this._isColumnVirtual(nextColumnIndex)) {
            horizontalScrollPosition = this._getHorizontalScrollPositionOffset(direction);
            0 !== horizontalScrollPosition && scrollable.scrollBy({
                left: horizontalScrollPosition,
                top: 0
            })
        }
    },
    _getHorizontalScrollPositionOffset: function(direction) {
        var positionOffset = 0;
        var $currentCell = this._getCell(this._focusedCellPosition);
        var currentCellWidth = $currentCell && Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getOuterWidth"])($currentCell);
        if (currentCellWidth > 0) {
            var rtlMultiplier = this.option("rtlEnabled") ? -1 : 1;
            positionOffset = "nextInRow" === direction || "next" === direction ? currentCellWidth * rtlMultiplier : currentCellWidth * rtlMultiplier * -1
        }
        return positionOffset
    },
    _editingCellTabHandler: function(eventArgs, direction) {
        var eventTarget = eventArgs.originalEvent.target;
        var $cell = this._getCellElementFromTarget(eventTarget);
        var isEditingAllowed;
        var $event = eventArgs.originalEvent;
        var elementType = this._getElementType(eventTarget);
        if ($cell.is(COMMAND_CELL_SELECTOR)) {
            return !this._targetCellTabHandler(eventArgs, direction)
        }
        this._updateFocusedCellPosition($cell);
        var nextCellInfo = this._getNextCellByTabKey($event, direction, elementType);
        $cell = nextCellInfo.$cell;
        if (!$cell || this._handleTabKeyOnMasterDetailCell($cell, direction)) {
            return false
        }
        var columnsController = this._columnsController;
        var cellIndex = this.getView("rowsView").getCellIndex($cell);
        var columnIndex = cellIndex + columnsController.getColumnIndexOffset();
        var column = columnsController.getVisibleColumns(null, true)[columnIndex];
        var $row = $cell.parent();
        var rowIndex = this._getRowIndex($row);
        var row = this._dataController.items()[rowIndex];
        var editingController = this._editingController;
        if (column && column.allowEditing) {
            var _isDataRow = !row || "data" === row.rowType;
            isEditingAllowed = editingController.allowUpdating({
                row: row
            }) ? _isDataRow : row && row.isNewRow
        }
        if (!isEditingAllowed) {
            this._closeEditCell()
        }
        if (this._focusCell($cell, !nextCellInfo.isHighlighted)) {
            if (!this._isRowEditMode() && isEditingAllowed) {
                this._editFocusedCell()
            } else {
                this._focusInteractiveElement($cell, eventArgs.shift)
            }
        }
        return true
    },
    _targetCellTabHandler: function(eventArgs, direction) {
        var $event = eventArgs.originalEvent;
        var eventTarget = $event.target;
        var $cell = this._getCellElementFromTarget(eventTarget);
        var $lastInteractiveElement = this._getInteractiveElement($cell, !eventArgs.shift);
        var isOriginalHandlerRequired = false;
        var elementType;
        if (!isEditorCell(this, $cell) && $lastInteractiveElement.length && eventTarget !== $lastInteractiveElement.get(0)) {
            isOriginalHandlerRequired = true
        } else {
            if (void 0 === this._focusedCellPosition.rowIndex && Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(eventTarget).hasClass(ROW_CLASS)) {
                this._updateFocusedCellPosition($cell)
            }
            elementType = this._getElementType(eventTarget);
            if (this.isRowFocusType()) {
                this.setCellFocusType();
                if ("row" === elementType && isDataRow(Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(eventTarget))) {
                    eventTarget = this.getFirstValidCellInRow(Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(eventTarget));
                    elementType = this._getElementType(eventTarget)
                }
            }
            var nextCellInfo = this._getNextCellByTabKey($event, direction, elementType);
            $cell = nextCellInfo.$cell;
            if (!$cell) {
                return false
            }
            $cell = this._checkNewLineTransition($event, $cell);
            if (!$cell) {
                return false
            }
            this._focusCell($cell, !nextCellInfo.isHighlighted);
            if (!isEditorCell(this, $cell)) {
                this._focusInteractiveElement($cell, eventArgs.shift)
            }
        }
        return isOriginalHandlerRequired
    },
    _getNextCellByTabKey: function($event, direction, elementType) {
        var $cell = this._getNextCell(direction, elementType);
        var args = $cell && this._fireFocusedCellChanging($event, $cell, true);
        if (!args || args.cancel) {
            return {}
        }
        if (args.$newCellElement) {
            $cell = args.$newCellElement
        }
        return {
            $cell: $cell,
            isHighlighted: args.isHighlighted
        }
    },
    _checkNewLineTransition: function($event, $cell) {
        var rowIndex = this.getVisibleRowIndex();
        var $row = $cell.parent();
        if (rowIndex !== this._getRowIndex($row)) {
            var cellPosition = this._getCellPosition($cell);
            var args = this._fireFocusedRowChanging($event, $row);
            if (args.cancel) {
                return
            }
            if (args.rowIndexChanged) {
                this.setFocusedColumnIndex(cellPosition.columnIndex);
                $cell = this._getFocusedCell()
            }
        }
        return $cell
    },
    _enterKeyHandler: function(eventArgs, isEditing) {
        var $cell = this._getFocusedCell();
        var rowIndex = this.getVisibleRowIndex();
        var $row = this._focusedView && this._focusedView.getRow(rowIndex);
        if (this.option("grouping.allowCollapsing") && isGroupRow($row) || this.option("masterDetail.enabled") && $cell && $cell.hasClass(COMMAND_EXPAND_CLASS)) {
            var key = this._dataController.getKeyByRowIndex(rowIndex);
            var item = this._dataController.items()[rowIndex];
            if (void 0 !== key && item && item.data && !item.data.isContinuation) {
                this._dataController.changeRowExpand(key)
            }
        } else {
            this._processEnterKeyForDataCell(eventArgs, isEditing)
        }
    },
    _processEnterKeyForDataCell: function(eventArgs, isEditing) {
        var direction = this._getEnterKeyDirection(eventArgs);
        var allowEditingOnEnterKey = this._allowEditingOnEnterKey();
        if (isEditing || !allowEditingOnEnterKey && direction) {
            this._handleEnterKeyEditingCell(eventArgs.originalEvent);
            if ("next" === direction || "previous" === direction) {
                this._targetCellTabHandler(eventArgs, direction)
            } else if ("upArrow" === direction || "downArrow" === direction) {
                this._navigateNextCell(eventArgs.originalEvent, direction)
            }
        } else if (allowEditingOnEnterKey) {
            this._startEditing(eventArgs)
        }
    },
    _getEnterKeyDirection: function(eventArgs) {
        var enterKeyDirection = this.option("keyboardNavigation.enterKeyDirection");
        var isShift = eventArgs.shift;
        if ("column" === enterKeyDirection) {
            return isShift ? "upArrow" : "downArrow"
        }
        if ("row" === enterKeyDirection) {
            return isShift ? "previous" : "next"
        }
    },
    _handleEnterKeyEditingCell: function(event) {
        var target = event.target;
        var $cell = this._getCellElementFromTarget(target);
        var isRowEditMode = this._isRowEditMode();
        this._updateFocusedCellPosition($cell);
        if (isRowEditMode) {
            this._focusEditFormCell($cell);
            setTimeout(this._editingController.saveEditData.bind(this._editingController))
        } else {
            _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__["default"].trigger(Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(target), "change");
            this._closeEditCell();
            event.preventDefault()
        }
    },
    _escapeKeyHandler: function(eventArgs, isEditing) {
        var $cell = this._getCellElementFromTarget(eventArgs.originalEvent.target);
        if (isEditing) {
            this._updateFocusedCellPosition($cell);
            if (!this._isRowEditMode()) {
                if ("cell" === this._editingController.getEditMode()) {
                    this._editingController.cancelEditData()
                } else {
                    this._closeEditCell()
                }
            } else {
                this._focusEditFormCell($cell);
                this._editingController.cancelEditData();
                if (0 === this._dataController.items().length) {
                    this._resetFocusedCell();
                    this._editorFactory.loseFocus()
                }
            }
            eventArgs.originalEvent.preventDefault()
        }
    },
    _ctrlFKeyHandler: function(eventArgs) {
        if (this.option("searchPanel.visible")) {
            var searchTextEditor = this._headerPanel.getSearchTextEditor();
            if (searchTextEditor) {
                searchTextEditor.focus();
                eventArgs.originalEvent.preventDefault()
            }
        }
    },
    _f2KeyHandler: function() {
        var isEditing = this._editingController.isEditing();
        var rowIndex = this.getVisibleRowIndex();
        var $row = this._focusedView && this._focusedView.getRow(rowIndex);
        if (!isEditing && isDataRow($row)) {
            this._startEditing()
        }
    },
    _navigateNextCell: function($event, keyCode) {
        var $cell = this._getNextCell(keyCode);
        var directionCode = this._getDirectionCodeByKey(keyCode);
        var isCellValid = $cell && this._isCellValid($cell);
        var result = isCellValid ? this._arrowKeysHandlerFocusCell($event, $cell, directionCode) : false;
        return result
    },
    _arrowKeysHandlerFocusCell: function($event, $nextCell, direction) {
        var isVerticalDirection = "prevRow" === direction || "nextRow" === direction;
        var args = this._fireFocusChangingEvents($event, $nextCell, isVerticalDirection, true);
        $nextCell = args.$newCellElement;
        if (!args.cancel && this._isCellValid($nextCell)) {
            this._focus($nextCell, !args.isHighlighted);
            return true
        }
        return false
    },
    _beginFastEditing: function(originalEvent, isDeleting) {
        if (!this._isFastEditingAllowed() || originalEvent.altKey || originalEvent.ctrlKey || this._editingController.isEditing()) {
            return false
        }
        if (isDeleting) {
            this._startEditing(originalEvent, FAST_EDITING_DELETE_KEY)
        } else {
            var key = originalEvent.key;
            var keyCode = originalEvent.keyCode || originalEvent.which;
            var fastEditingKey = key || keyCode && String.fromCharCode(keyCode);
            if (fastEditingKey && (1 === fastEditingKey.length || fastEditingKey === FAST_EDITING_DELETE_KEY)) {
                this._startEditing(originalEvent, fastEditingKey)
            }
        }
        return true
    },
    _pointerEventHandler: function(e) {
        var event = e.event || e;
        var $target = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(event.currentTarget);
        var rowsView = this.getView("rowsView");
        var focusedViewElement = rowsView && rowsView.element();
        var $parent = $target.parent();
        var isInteractiveElement = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(event.target).is(INTERACTIVE_ELEMENTS_SELECTOR);
        var isRevertButton = !!Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(event.target).closest(".".concat(REVERT_BUTTON_CLASS)).length;
        var isExpandCommandCell = $target.hasClass(COMMAND_EXPAND_CLASS);
        if (!this._isEventInCurrentGrid(event)) {
            return
        }
        if (!isRevertButton && (this._isCellValid($target, !isInteractiveElement) || isExpandCommandCell)) {
            $target = this._isInsideEditForm($target) ? Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(event.target) : $target;
            this._focusView();
            Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(focusedViewElement).removeClass(FOCUS_STATE_CLASS);
            if ($parent.hasClass(FREESPACE_ROW_CLASS)) {
                this._updateFocusedCellPosition($target);
                this._applyTabIndexToElement(this._focusedView.element());
                this._focusedView.focus()
            } else if (!this._isMasterDetailCell($target)) {
                this._clickTargetCellHandler(event, $target)
            } else {
                this._updateFocusedCellPosition($target)
            }
        } else if ($target.is("td")) {
            this._resetFocusedCell()
        }
    },
    _clickTargetCellHandler: function(event, $cell) {
        var columnIndex = this.getView("rowsView").getCellIndex($cell);
        var column = this._columnsController.getVisibleColumns()[columnIndex];
        var isCellEditMode = this._isCellEditMode();
        this.setCellFocusType();
        var args = this._fireFocusChangingEvents(event, $cell, true);
        $cell = args.$newCellElement;
        if (!args.cancel) {
            if (args.resetFocusedRow) {
                this.getController("focus")._resetFocusedRow();
                return
            }
            if (args.rowIndexChanged) {
                $cell = this._getFocusedCell()
            }
            if (!args.isHighlighted && !isCellEditMode) {
                this.setRowFocusType()
            }
            this._updateFocusedCellPosition($cell);
            if (this._allowRowUpdating() && isCellEditMode && column && column.allowEditing) {
                this._isNeedFocus = false;
                this._isHiddenFocus = false
            } else {
                var $target = event && Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(event.target).closest(NON_FOCUSABLE_ELEMENTS_SELECTOR + ", td");
                var skipFocusEvent = $target && $target.not($cell).is(NON_FOCUSABLE_ELEMENTS_SELECTOR);
                var isEditor = !!column && !column.command && $cell.hasClass(EDITOR_CELL_CLASS);
                var isDisabled = !isEditor && (!args.isHighlighted || skipFocusEvent);
                this._focus($cell, isDisabled, skipFocusEvent)
            }
        } else {
            this.setRowFocusType();
            this.setFocusedRowIndex(args.prevRowIndex);
            $cell = this._getFocusedCell();
            if (this._editingController.isEditing() && isCellEditMode) {
                this._closeEditCell()
            }
        }
    },
    _allowRowUpdating: function() {
        var rowIndex = this.getVisibleRowIndex();
        var row = this._dataController.items()[rowIndex];
        return this._editingController.allowUpdating({
            row: row
        }, "click")
    },
    focus: function(element) {
        var activeElementSelector;
        var focusedRowEnabled = this.option("focusedRowEnabled");
        var isHighlighted = isCellElement(Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(element));
        if (!element) {
            activeElementSelector = ".dx-datagrid-rowsview .dx-row[tabindex]";
            if (!focusedRowEnabled) {
                activeElementSelector += ", .dx-datagrid-rowsview .dx-row > td[tabindex]"
            }
            element = this.component.$element().find(activeElementSelector).first()
        }
        element && this._focusElement(Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(element), isHighlighted)
    },
    getFocusedView: function() {
        return this._focusedView
    },
    setupFocusedView: function() {
        if (this.isKeyboardEnabled() && !Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isDefined"])(this._focusedView)) {
            this._focusView()
        }
    },
    _focusElement: function($element, isHighlighted) {
        var rowsViewElement = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(this._getRowsViewElement());
        var $focusedView = $element.closest(rowsViewElement);
        var isRowFocusType = this.isRowFocusType();
        var args = {};
        if (!$focusedView.length || isCellElement($element) && !this._isCellValid($element)) {
            return
        }
        this._focusView();
        this._isNeedFocus = true;
        this._isNeedScroll = true;
        if (isCellElement($element) || isGroupRow($element)) {
            this.setCellFocusType();
            args = this._fireFocusChangingEvents(null, $element, false, isHighlighted);
            $element = args.$newCellElement;
            if (isRowFocusType && !args.isHighlighted) {
                this.setRowFocusType()
            }
        }
        if (!args.cancel) {
            this._focus($element, !args.isHighlighted);
            this._focusInteractiveElement($element)
        }
    },
    _getFocusedViewByElement: function($element) {
        var view = this.getFocusedView();
        var $view = view && Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(view.element());
        return $element && 0 !== $element.closest($view).length
    },
    _focusView: function() {
        this._focusedView = this.getView("rowsView")
    },
    _resetFocusedView: function() {
        this.setRowFocusType();
        this._focusedView = null
    },
    _focusInteractiveElement: function($cell, isLast) {
        if (!$cell) {
            return
        }
        var $focusedElement = this._getInteractiveElement($cell, isLast);
        _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_5__["default"].focusAndSelectElement(this, $focusedElement)
    },
    _focus: function($cell, disableFocus, skipFocusEvent) {
        var $row = $cell && !$cell.hasClass(ROW_CLASS) ? $cell.closest(".".concat(ROW_CLASS)) : $cell;
        if ($row && isNotFocusedRow($row)) {
            return
        }
        var focusedView = this._focusedView;
        var $focusViewElement = focusedView && focusedView.element();
        var $focusElement;
        this._isHiddenFocus = disableFocus;
        var isRowFocus = isGroupRow($row) || this.isRowFocusType();
        if (isRowFocus) {
            $focusElement = $row;
            if (focusedView) {
                this.setFocusedRowIndex(this._getRowIndex($row))
            }
        } else if (isCellElement($cell)) {
            $focusElement = $cell;
            this._updateFocusedCellPosition($cell)
        }
        if ($focusElement) {
            if ($focusViewElement) {
                $focusViewElement.find(".dx-row[tabindex], .dx-row > td[tabindex]").not($focusElement).removeClass(CELL_FOCUS_DISABLED_CLASS).removeAttr("tabindex")
            }
            _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__["default"].one($focusElement, "blur", e => {
                if (e.relatedTarget) {
                    $focusElement.removeClass(CELL_FOCUS_DISABLED_CLASS)
                }
            });
            if (!skipFocusEvent) {
                this._applyTabIndexToElement($focusElement);
                _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__["default"].trigger($focusElement, "focus")
            }
            if (disableFocus) {
                $focusElement.addClass(CELL_FOCUS_DISABLED_CLASS);
                if (isRowFocus) {
                    $cell.addClass(CELL_FOCUS_DISABLED_CLASS)
                }
            } else {
                this._editorFactory.focus($focusElement)
            }
        }
    },
    _updateFocus: function(isRenderView) {
        this._updateFocusTimeout = setTimeout(() => {
            var editingController = this._editingController;
            var isCellEditMode = editingController.getEditMode() === EDIT_MODE_CELL;
            var isBatchEditMode = editingController.getEditMode() === EDIT_MODE_BATCH;
            if (isCellEditMode && editingController.hasChanges() || isBatchEditMode && editingController.isNewRowInEditMode()) {
                editingController._focusEditingCell();
                return
            }
            var $cell = this._getFocusedCell();
            var isEditing = editingController.isEditing();
            if ($cell && !(this._isMasterDetailCell($cell) && !this._isRowEditMode())) {
                if (this._hasSkipRow($cell.parent())) {
                    var direction = this._focusedCellPosition && this._focusedCellPosition.rowIndex > 0 ? "upArrow" : "downArrow";
                    $cell = this._getNextCell(direction)
                }
                if (isElementDefined($cell)) {
                    if (isRenderView && !isEditing && this._checkCellOverlapped($cell)) {
                        return
                    }
                    if ($cell.is("td") || $cell.hasClass(this.addWidgetPrefix(EDIT_FORM_ITEM_CLASS))) {
                        var isCommandCell = $cell.is(COMMAND_CELL_SELECTOR);
                        var $focusedElementInsideCell = $cell.find(":focus");
                        var isFocusedElementDefined = isElementDefined($focusedElementInsideCell);
                        if ((isRenderView || !isCommandCell) && this._editorFactory.focus()) {
                            if (isCommandCell && isFocusedElementDefined) {
                                _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_5__["default"].focusAndSelectElement(this, $focusedElementInsideCell);
                                return
                            }!isFocusedElementDefined && this._focus($cell)
                        } else if (!isFocusedElementDefined && (this._isNeedFocus || this._isHiddenFocus)) {
                            this._focus($cell, this._isHiddenFocus)
                        }
                        if (isEditing) {
                            this._focusInteractiveElement.bind(this)($cell)
                        }
                    } else {
                        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__["default"].trigger($cell, "focus")
                    }
                }
            }
        })
    },
    _checkCellOverlapped: function($cell) {
        var cellOffset = $cell.offset();
        var hasScrollable = this.component.getScrollable && this.component.getScrollable();
        var isOverlapped = false;
        if (hasScrollable) {
            if (cellOffset.left < 0) {
                isOverlapped = Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getWidth"])($cell) + cellOffset.left <= 0
            } else if (cellOffset.top < 0) {
                isOverlapped = Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getHeight"])($cell) + cellOffset.top <= 0
            }
        }
        return isOverlapped
    },
    _getFocusedCell: function() {
        return Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(this._getCell(this._focusedCellPosition))
    },
    _updateFocusedCellPositionByTarget: function(target) {
        var _this$_focusedCellPos;
        var elementType = this._getElementType(target);
        if ("row" === elementType && Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isDefined"])(null === (_this$_focusedCellPos = this._focusedCellPosition) || void 0 === _this$_focusedCellPos ? void 0 : _this$_focusedCellPos.columnIndex)) {
            var $row = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(target);
            this._focusedView && isGroupRow($row) && this.setFocusedRowIndex(this._getRowIndex($row))
        } else {
            this._updateFocusedCellPosition(this._getCellElementFromTarget(target))
        }
    },
    _updateFocusedCellPosition: function($cell, direction) {
        var position = this._getCellPosition($cell, direction);
        if (position) {
            if (!$cell.length || position.rowIndex >= 0 && position.columnIndex >= 0) {
                this.setFocusedCellPosition(position.rowIndex, position.columnIndex)
            }
        }
        return position
    },
    _getFocusedColumnIndexOffset: function(columnIndex) {
        var offset = 0;
        var column = this._columnsController.getVisibleColumns()[columnIndex];
        if (column && column.fixed) {
            offset = this._getFixedColumnIndexOffset(column)
        } else if (columnIndex >= 0) {
            offset = this._columnsController.getColumnIndexOffset()
        }
        return offset
    },
    _getFixedColumnIndexOffset: function(column) {
        var offset = isFixedColumnIndexOffsetRequired(this, column) ? this._getVisibleColumnCount() - this._columnsController.getVisibleColumns().length : 0;
        return offset
    },
    _getCellPosition: function($cell, direction) {
        var columnIndex;
        var $row = isElementDefined($cell) && $cell.closest("tr");
        var rowsView = this.getView("rowsView");
        if (isElementDefined($row)) {
            var rowIndex = this._getRowIndex($row);
            columnIndex = rowsView.getCellIndex($cell, rowIndex);
            columnIndex += this._getFocusedColumnIndexOffset(columnIndex);
            if (direction) {
                columnIndex = "previous" === direction ? columnIndex - 1 : columnIndex + 1;
                columnIndex = this._applyColumnIndexBoundaries(columnIndex)
            }
            return {
                rowIndex: rowIndex,
                columnIndex: columnIndex
            }
        }
    },
    _focusCell: function($cell, isDisabled) {
        if (this._isCellValid($cell)) {
            this._focus($cell, isDisabled);
            return true
        }
    },
    _focusEditFormCell: function($cell) {
        if ($cell.hasClass(MASTER_DETAIL_CELL_CLASS)) {
            this._editorFactory.focus($cell, true)
        }
    },
    _resetFocusedCell: function(preventScroll) {
        var _this$_focusedView;
        var $cell = this._getFocusedCell();
        isElementDefined($cell) && $cell.removeAttr("tabindex");
        this._isNeedFocus = false;
        this._isNeedScroll = false;
        this._focusedCellPosition = {};
        clearTimeout(this._updateFocusTimeout);
        null === (_this$_focusedView = this._focusedView) || void 0 === _this$_focusedView ? void 0 : _this$_focusedView.renderFocusState({
            preventScroll: preventScroll
        })
    },
    restoreFocusableElement: function(rowIndex, $event) {
        var args;
        var $rowElement;
        var isUpArrow = Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isDefined"])(rowIndex);
        var rowsView = this.getView("rowsView");
        var $rowsViewElement = rowsView.element();
        var columnIndex = this._focusedCellPosition.columnIndex;
        var rowIndexOffset = this._dataController.getRowIndexOffset();
        rowIndex = isUpArrow ? rowIndex : rowsView.getTopVisibleItemIndex() + rowIndexOffset;
        if (!isUpArrow) {
            this._editorFactory.loseFocus();
            this._applyTabIndexToElement($rowsViewElement);
            _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__["default"].trigger($rowsViewElement, "focus")
        } else {
            $rowElement = rowsView.getRow(rowIndex - rowIndexOffset);
            args = this._fireFocusedRowChanging($event, $rowElement);
            if (!args.cancel && args.rowIndexChanged) {
                rowIndex = args.newRowIndex
            }
        }
        if (!isUpArrow || !args.cancel) {
            this.setFocusedCellPosition(rowIndex, columnIndex)
        }
        isUpArrow && this._updateFocus()
    },
    _getNewPositionByCode: function(cellPosition, elementType, code) {
        var columnIndex = cellPosition.columnIndex;
        var rowIndex = cellPosition.rowIndex;
        var visibleColumnsCount;
        if (void 0 === cellPosition.rowIndex && "next" === code) {
            return {
                columnIndex: 0,
                rowIndex: 0
            }
        }
        switch (code) {
            case "nextInRow":
            case "next":
                visibleColumnsCount = this._getVisibleColumnCount();
                if (columnIndex < visibleColumnsCount - 1 && "row" !== elementType && this._hasValidCellAfterPosition({
                        columnIndex: columnIndex,
                        rowIndex: rowIndex
                    })) {
                    columnIndex++
                } else if (!this._isLastRow(rowIndex) && "next" === code) {
                    columnIndex = 0;
                    rowIndex++
                }
                break;
            case "previousInRow":
            case "previous":
                if (columnIndex > 0 && "row" !== elementType && this._hasValidCellBeforePosition({
                        columnIndex: columnIndex,
                        rowIndex: rowIndex
                    })) {
                    columnIndex--
                } else if (rowIndex > 0 && "previous" === code) {
                    rowIndex--;
                    visibleColumnsCount = this._getVisibleColumnCount();
                    columnIndex = visibleColumnsCount - 1
                }
                break;
            case "upArrow":
                rowIndex = rowIndex > 0 ? rowIndex - 1 : rowIndex;
                break;
            case "downArrow":
                rowIndex = !this._isLastRow(rowIndex) ? rowIndex + 1 : rowIndex
        }
        return {
            columnIndex: columnIndex,
            rowIndex: rowIndex
        }
    },
    setFocusedCellPosition: function(rowIndex, columnIndex) {
        this.setFocusedRowIndex(rowIndex);
        this.setFocusedColumnIndex(columnIndex)
    },
    setFocusedRowIndex: function(rowIndex) {
        if (!this._focusedCellPosition) {
            this._focusedCellPosition = {}
        }
        this._focusedCellPosition.rowIndex = rowIndex
    },
    setFocusedColumnIndex: function(columnIndex) {
        if (!this._focusedCellPosition) {
            this._focusedCellPosition = {}
        }
        this._focusedCellPosition.columnIndex = columnIndex
    },
    getRowIndex: function() {
        return this._focusedCellPosition ? this._focusedCellPosition.rowIndex : -1
    },
    getColumnIndex: function() {
        return this._focusedCellPosition ? this._focusedCellPosition.columnIndex : -1
    },
    getVisibleRowIndex: function() {
        var rowIndex = this._focusedCellPosition && this._focusedCellPosition.rowIndex;
        if (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isDefined"])(rowIndex) || rowIndex < 0) {
            return -1
        }
        return rowIndex - this._dataController.getRowIndexOffset()
    },
    getVisibleColumnIndex: function() {
        var columnIndex = this._focusedCellPosition && this._focusedCellPosition.columnIndex;
        if (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isDefined"])(columnIndex)) {
            return -1
        }
        return columnIndex - this._columnsController.getColumnIndexOffset()
    },
    _applyColumnIndexBoundaries: function(columnIndex) {
        var visibleColumnsCount = this._getVisibleColumnCount();
        if (columnIndex < 0) {
            columnIndex = 0
        } else if (columnIndex >= visibleColumnsCount) {
            columnIndex = visibleColumnsCount - 1
        }
        return columnIndex
    },
    _isCellByPositionValid: function(cellPosition) {
        var $cell = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(this._getCell(cellPosition));
        return this._isCellValid($cell)
    },
    _isLastRow: function(rowIndex) {
        var dataController = this._dataController;
        if (this._isVirtualRowRender()) {
            return rowIndex >= dataController.getMaxRowIndex()
        }
        return rowIndex === dataController.items().length - 1
    },
    _isFirstValidCell: function(cellPosition) {
        var isFirstValidCell = false;
        if (0 === cellPosition.rowIndex && cellPosition.columnIndex >= 0) {
            isFirstValidCell = isFirstValidCell || !this._hasValidCellBeforePosition(cellPosition)
        }
        return isFirstValidCell
    },
    _hasValidCellBeforePosition: function(cellPosition) {
        var columnIndex = cellPosition.columnIndex;
        var hasValidCells = false;
        while (columnIndex > 0 && !hasValidCells) {
            var checkingPosition = {
                columnIndex: --columnIndex,
                rowIndex: cellPosition.rowIndex
            };
            hasValidCells = this._isCellByPositionValid(checkingPosition)
        }
        return hasValidCells
    },
    _hasValidCellAfterPosition: function(cellPosition) {
        var columnIndex = cellPosition.columnIndex;
        var hasValidCells = false;
        var visibleColumnCount = this._getVisibleColumnCount();
        while (columnIndex < visibleColumnCount - 1 && !hasValidCells) {
            var checkingPosition = {
                columnIndex: ++columnIndex,
                rowIndex: cellPosition.rowIndex
            };
            hasValidCells = this._isCellByPositionValid(checkingPosition)
        }
        return hasValidCells
    },
    _isLastValidCell: function(cellPosition) {
        var nextColumnIndex = cellPosition.columnIndex >= 0 ? cellPosition.columnIndex + 1 : 0;
        var rowIndex = cellPosition.rowIndex;
        var checkingPosition = {
            columnIndex: nextColumnIndex,
            rowIndex: rowIndex
        };
        var visibleRows = this._dataController.getVisibleRows();
        var row = visibleRows && visibleRows[rowIndex];
        var isLastRow = this._isLastRow(rowIndex);
        if (!isLastRow) {
            return false
        }
        if (row && "group" === row.rowType && cellPosition.columnIndex > 0) {
            return true
        }
        if (cellPosition.columnIndex === this._getVisibleColumnCount() - 1) {
            return true
        }
        if (this._isCellByPositionValid(checkingPosition)) {
            return false
        }
        return this._isLastValidCell(checkingPosition)
    },
    _isCellValid: function($cell, isClick) {
        if (isElementDefined($cell)) {
            var rowsView = this.getView("rowsView");
            var $row = $cell.parent();
            var columnsController = this._columnsController;
            var columnIndex = rowsView.getCellIndex($cell) + columnsController.getColumnIndexOffset();
            var column = columnsController.getVisibleColumns(null, true)[columnIndex];
            var visibleColumnCount = this._getVisibleColumnCount();
            var editingController = this._editingController;
            var isMasterDetailRow = isDetailRow($row);
            var isShowWhenGrouped = column && column.showWhenGrouped;
            var isDataCell = column && !$cell.hasClass(COMMAND_EXPAND_CLASS) && isDataRow($row);
            if (this._isMasterDetailCell($cell)) {
                return true
            }
            if (visibleColumnCount > columnIndex && (!isMasterDetailRow && column && (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isDefined"])(column.groupIndex) || isShowWhenGrouped && isDataCell) || parseInt($cell.attr("colspan")) > 1)) {
                var rowItems = this._dataController.items();
                var visibleRowIndex = rowsView.getRowIndex($row);
                var row = rowItems[visibleRowIndex];
                var isCellEditing = editingController && this._isCellEditMode() && editingController.isEditing();
                var isRowEditingInCurrentRow = editingController && editingController.isEditRow(visibleRowIndex);
                var isEditing = isRowEditingInCurrentRow || isCellEditing;
                if (column.command) {
                    if (this._isLegacyNavigation()) {
                        return !isEditing && "expand" === column.command
                    }
                    if (isCellEditing) {
                        return false
                    }
                    if (isRowEditingInCurrentRow) {
                        return "select" !== column.command
                    }
                    return !isEditing
                }
                if (isCellEditing && row && "data" !== row.rowType) {
                    return false
                }
                return !isEditing || column.allowEditing || isClick
            }
        }
    },
    getFirstValidCellInRow: function($row, columnIndex) {
        var $cells = $row.find("> td");
        var $cell;
        var $result;
        columnIndex = columnIndex || 0;
        for (var i = columnIndex; i < $cells.length; ++i) {
            $cell = $cells.eq(i);
            if (this._isCellValid($cell)) {
                $result = $cell;
                break
            }
        }
        return $result
    },
    _getNextCell: function(keyCode, elementType, cellPosition) {
        var focusedCellPosition = cellPosition || this._focusedCellPosition;
        var isRowFocusType = this.isRowFocusType();
        var includeCommandCells = isRowFocusType || Object(_core_utils_array__WEBPACK_IMPORTED_MODULE_7__["inArray"])(keyCode, ["next", "previous"]) > -1;
        var $cell;
        var $row;
        if (this._focusedView && focusedCellPosition) {
            var newFocusedCellPosition = this._getNewPositionByCode(focusedCellPosition, elementType, keyCode);
            $cell = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(this._getCell(newFocusedCellPosition));
            var isLastCellOnDirection = "previous" === keyCode ? this._isFirstValidCell(newFocusedCellPosition) : this._isLastValidCell(newFocusedCellPosition);
            if (isElementDefined($cell) && !this._isCellValid($cell) && this._isCellInRow(newFocusedCellPosition, includeCommandCells) && !isLastCellOnDirection) {
                if (isRowFocusType) {
                    $cell = this.getFirstValidCellInRow($cell.parent(), newFocusedCellPosition.columnIndex)
                } else {
                    $cell = this._getNextCell(keyCode, "cell", newFocusedCellPosition)
                }
            }
            $row = isElementDefined($cell) && $cell.parent();
            if (this._hasSkipRow($row)) {
                var rowIndex = this._getRowIndex($row);
                if (!this._isLastRow(rowIndex)) {
                    $cell = this._getNextCell(keyCode, "row", {
                        columnIndex: focusedCellPosition.columnIndex,
                        rowIndex: rowIndex
                    })
                } else {
                    return null
                }
            }
            return isElementDefined($cell) ? $cell : null
        }
        return null
    },
    _startEditing: function(eventArgs, fastEditingKey) {
        var focusedCellPosition = this._focusedCellPosition;
        var visibleRowIndex = this.getVisibleRowIndex();
        var visibleColumnIndex = this.getVisibleColumnIndex();
        var row = this._dataController.items()[visibleRowIndex];
        var column = this._columnsController.getVisibleColumns()[visibleColumnIndex];
        if (this._isAllowEditing(row, column)) {
            if (this._isRowEditMode()) {
                this._editingController.editRow(visibleRowIndex)
            } else if (focusedCellPosition) {
                this._startEditCell(eventArgs, fastEditingKey)
            }
        }
    },
    _isAllowEditing: function(row, column) {
        return this._editingController.allowUpdating({
            row: row
        }) && column && column.allowEditing
    },
    _editFocusedCell: function() {
        var rowIndex = this.getVisibleRowIndex();
        var colIndex = this.getVisibleColumnIndex();
        return this._editingController.editCell(rowIndex, colIndex)
    },
    _startEditCell: function(eventArgs, fastEditingKey) {
        this._fastEditingStarted = Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isDefined"])(fastEditingKey);
        var editResult = this._editFocusedCell();
        if (this._isFastEditingStarted()) {
            if (true === editResult) {
                this._editingCellHandler(eventArgs, fastEditingKey)
            } else if (editResult && editResult.done) {
                var editorValue = fastEditingKey !== FAST_EDITING_DELETE_KEY ? fastEditingKey : "";
                editResult.done(() => this._editingCellHandler(eventArgs, editorValue))
            }
        }
    },
    _editingCellHandler: function(eventArgs, editorValue) {
        var _$input$get$select, _$input$get;
        var $input = this._getFocusedCell().find(INTERACTIVE_ELEMENTS_SELECTOR).eq(0);
        var keyDownEvent = Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_9__["createEvent"])(eventArgs, {
            type: "keydown",
            target: $input.get(0)
        });
        var keyPressEvent = Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_9__["createEvent"])(eventArgs, {
            type: "keypress",
            target: $input.get(0)
        });
        var inputEvent = Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_9__["createEvent"])(eventArgs, {
            type: "input",
            target: $input.get(0)
        });
        null === (_$input$get$select = (_$input$get = $input.get(0)).select) || void 0 === _$input$get$select ? void 0 : _$input$get$select.call(_$input$get);
        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__["default"].trigger($input, keyDownEvent);
        if (!keyDownEvent.isDefaultPrevented()) {
            _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__["default"].trigger($input, keyPressEvent);
            if (!keyPressEvent.isDefaultPrevented()) {
                var timeout = _core_utils_browser__WEBPACK_IMPORTED_MODULE_14__["default"].mozilla ? 25 : 0;
                setTimeout(() => {
                    $input.val(editorValue);
                    var $widgetContainer = $input.closest(".".concat(WIDGET_CLASS));
                    _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__["default"].off($widgetContainer, "focusout");
                    _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__["default"].one($widgetContainer, "focusout", (function() {
                        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__["default"].trigger($input, "change")
                    }));
                    _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__["default"].trigger($input, inputEvent)
                }, timeout)
            }
        }
    },
    _fireFocusChangingEvents: function($event, $cell, fireRowEvent, isHighlighted) {
        var args = {};
        var cellPosition = this._getCellPosition($cell) || {};
        if (this.isCellFocusType()) {
            args = this._fireFocusedCellChanging($event, $cell, isHighlighted);
            if (!args.cancel) {
                cellPosition.columnIndex = args.newColumnIndex;
                cellPosition.rowIndex = args.newRowIndex;
                isHighlighted = args.isHighlighted;
                $cell = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(this._getCell(cellPosition))
            }
        }
        if (!args.cancel && fireRowEvent && $cell) {
            args = this._fireFocusedRowChanging($event, $cell.parent());
            if (!args.cancel) {
                cellPosition.rowIndex = args.newRowIndex;
                args.isHighlighted = isHighlighted
            }
        }
        args.$newCellElement = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(this._getCell(cellPosition));
        if (!args.$newCellElement.length) {
            args.$newCellElement = $cell
        }
        return args
    },
    _fireFocusedCellChanging: function($event, $cellElement, isHighlighted) {
        var prevCellIndex = this.option("focusedColumnIndex");
        var prevRowIndex = this.option("focusedRowIndex");
        var cellPosition = this._getCellPosition($cellElement);
        var columnIndex = cellPosition ? cellPosition.columnIndex : -1;
        var rowIndex = cellPosition ? cellPosition.rowIndex : -1;
        var args = {
            cellElement: $cellElement,
            prevColumnIndex: prevCellIndex,
            prevRowIndex: prevRowIndex,
            newColumnIndex: columnIndex,
            newRowIndex: rowIndex,
            rows: this._dataController.getVisibleRows(),
            columns: this._columnsController.getVisibleColumns(),
            event: $event,
            isHighlighted: isHighlighted || false,
            cancel: false
        };
        this._canceledCellPosition = null;
        this.executeAction("onFocusedCellChanging", args);
        if (args.newColumnIndex !== columnIndex || args.newRowIndex !== rowIndex) {
            args.$newCellElement = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(this._getCell({
                columnIndex: args.newColumnIndex,
                rowIndex: args.newRowIndex
            }))
        }
        if (args.cancel) {
            this._canceledCellPosition = {
                rowIndex: rowIndex,
                columnIndex: columnIndex
            }
        }
        return args
    },
    _fireFocusedCellChanged: function($cellElement, prevCellIndex, prevRowIndex) {
        var dataController = this._dataController;
        var columnIndex = this.getView("rowsView").getCellIndex($cellElement);
        var rowIndex = this._getRowIndex($cellElement && $cellElement.parent());
        var localRowIndex = Math.min(rowIndex - dataController.getRowIndexOffset(), dataController.items().length - 1);
        var isEditingCell = this._editingController.isEditCell(localRowIndex, columnIndex);
        var row = dataController.items()[localRowIndex];
        if (!isEditingCell && (prevCellIndex !== columnIndex || prevRowIndex !== rowIndex)) {
            this.executeAction("onFocusedCellChanged", {
                cellElement: $cellElement,
                columnIndex: columnIndex,
                rowIndex: rowIndex,
                row: row,
                column: this._columnsController.getVisibleColumns()[columnIndex]
            })
        }
    },
    _fireFocusedRowChanging: function(eventArgs, $newFocusedRow) {
        var newRowIndex = this._getRowIndex($newFocusedRow);
        var dataController = this._dataController;
        var prevFocusedRowIndex = this.option("focusedRowIndex");
        var loadingOperationTypes = dataController.loadingOperationTypes();
        var args = {
            rowElement: $newFocusedRow,
            prevRowIndex: prevFocusedRowIndex,
            newRowIndex: newRowIndex,
            event: eventArgs,
            rows: dataController.getVisibleRows(),
            cancel: false
        };
        if (!dataController || dataController.isLoading() && (loadingOperationTypes.reload || loadingOperationTypes.paging)) {
            args.cancel = true;
            return args
        }
        if (this.option("focusedRowEnabled")) {
            this.executeAction("onFocusedRowChanging", args);
            if (!args.cancel && args.newRowIndex !== newRowIndex) {
                args.resetFocusedRow = args.newRowIndex < 0;
                if (!args.resetFocusedRow) {
                    this.setFocusedRowIndex(args.newRowIndex)
                }
                args.rowIndexChanged = true
            }
        }
        return args
    },
    _fireFocusedRowChanged: function($rowElement) {
        var row;
        var focusedRowKey = this.option("focusedRowKey");
        var focusController = this.getController("focus");
        var focusedRowIndex = null === focusController || void 0 === focusController ? void 0 : focusController.getFocusedRowIndexByKey(focusedRowKey);
        if (this.option("focusedRowEnabled")) {
            if (focusedRowIndex >= 0) {
                var dataController = this._dataController;
                row = focusedRowIndex >= 0 && dataController.getVisibleRows()[focusedRowIndex - dataController.getRowIndexOffset()]
            }
            this.executeAction("onFocusedRowChanged", {
                rowElement: $rowElement,
                rowIndex: focusedRowIndex,
                row: row
            })
        }
    },
    _isEventInCurrentGrid: function(event) {
        return _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_5__["default"].isElementInCurrentGrid(this, Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(event.target))
    },
    _isRowEditMode: function() {
        var editMode = this._editingController.getEditMode();
        return editMode === EDIT_MODE_ROW || editMode === EDIT_MODE_FORM
    },
    _isCellEditMode: function() {
        var editMode = this._editingController.getEditMode();
        return editMode === EDIT_MODE_CELL || editMode === EDIT_MODE_BATCH
    },
    _isFastEditingAllowed: function() {
        return this._isCellEditMode() && this.option("keyboardNavigation.editOnKeyPress")
    },
    _getInteractiveElement: function($cell, isLast) {
        var $focusedElement = $cell.find(INTERACTIVE_ELEMENTS_SELECTOR).filter(":visible");
        return isLast ? $focusedElement.last() : $focusedElement.first()
    },
    _applyTabIndexToElement: function($element) {
        var tabIndex = this.option("tabIndex") || 0;
        $element.attr("tabindex", Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isDefined"])(tabIndex) ? tabIndex : 0)
    },
    _getCell: function(cellPosition) {
        if (this._focusedView && cellPosition) {
            var rowIndexOffset = this._dataController.getRowIndexOffset();
            var column = this._columnsController.getVisibleColumns(null, true)[cellPosition.columnIndex];
            var columnIndexOffset = column && column.fixed ? this._getFixedColumnIndexOffset(column) : this._columnsController.getColumnIndexOffset();
            var rowIndex = cellPosition.rowIndex >= 0 ? cellPosition.rowIndex - rowIndexOffset : -1;
            var columnIndex = cellPosition.columnIndex >= 0 ? cellPosition.columnIndex - columnIndexOffset : -1;
            return this._focusedView.getCell({
                rowIndex: rowIndex,
                columnIndex: columnIndex
            })
        }
    },
    _getRowIndex: function($row) {
        var rowsView = this.getView("rowsView");
        var rowIndex = rowsView.getRowIndex($row);
        if (rowIndex >= 0) {
            rowIndex += this._dataController.getRowIndexOffset()
        }
        return rowIndex
    },
    _hasSkipRow: function($row) {
        var row = $row && $row.get(0);
        return row && ("none" === row.style.display || $row.hasClass(this.addWidgetPrefix(GROUP_FOOTER_CLASS)) || isDetailRow($row) && !$row.hasClass(this.addWidgetPrefix(EDIT_FORM_CLASS)))
    },
    _allowEditingOnEnterKey: function() {
        return "startEdit" === this.option("keyboardNavigation.enterKeyAction")
    },
    _isLegacyNavigation: function() {
        return this.option("useLegacyKeyboardNavigation")
    },
    _getDirectionCodeByKey: function(key) {
        var directionCode;
        switch (key) {
            case "upArrow":
                directionCode = "prevRow";
                break;
            case "downArrow":
                directionCode = "nextRow";
                break;
            case "leftArrow":
                directionCode = this.option("rtlEnabled") ? "nextInRow" : "previousInRow";
                break;
            case "rightArrow":
                directionCode = this.option("rtlEnabled") ? "previousInRow" : "nextInRow"
        }
        return directionCode
    },
    _isVirtualScrolling: function() {
        var scrollingMode = this.option("scrolling.mode");
        return "virtual" === scrollingMode || "infinite" === scrollingMode
    },
    _isVirtualRowRender: function() {
        return this._isVirtualScrolling() || _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_5__["default"].isVirtualRowRendering(this)
    },
    _isVirtualColumnRender: function() {
        return "virtual" === this.option("scrolling.columnRenderingMode")
    },
    _scrollBy: function(left, top, rowIndex, $event) {
        var that = this;
        var scrollable = this.getView("rowsView").getScrollable();
        if (that._focusedCellPosition) {
            scrollable.on("scroll", (function scrollHandler() {
                scrollable.off("scroll", scrollHandler);
                setTimeout(that.restoreFocusableElement.bind(that, rowIndex, $event))
            }))
        }
        return scrollable.scrollBy({
            left: left,
            top: top
        })
    },
    _isInsideEditForm: function(element) {
        return Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(element).closest("." + this.addWidgetPrefix(EDIT_FORM_CLASS)).length > 0
    },
    _isMasterDetailCell: function(element) {
        var $masterDetailCell = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(element).closest("." + MASTER_DETAIL_CELL_CLASS);
        var $masterDetailGrid = $masterDetailCell.closest("." + this.getWidgetContainerClass()).parent();
        return $masterDetailCell.length && $masterDetailGrid.is(this.component.$element())
    },
    _processNextCellInMasterDetail: function($nextCell) {
        if (!this._isInsideEditForm($nextCell) && $nextCell) {
            this._applyTabIndexToElement($nextCell)
        }
    },
    _handleTabKeyOnMasterDetailCell: function(target, direction) {
        if (this._isMasterDetailCell(target)) {
            this._updateFocusedCellPosition(Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(target), direction);
            var $nextCell = this._getNextCell(direction, "row");
            this._processNextCellInMasterDetail($nextCell);
            return true
        }
        return false
    },
    _getElementType: function(target) {
        return Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(target).is("tr") ? "row" : "cell"
    },
    _isFastEditingStarted: function() {
        return this._isFastEditingAllowed() && this._fastEditingStarted
    },
    _getVisibleColumnCount: function() {
        return this._columnsController.getVisibleColumns(null, true).length
    },
    _isCellInRow: function(cellPosition, includeCommandCells) {
        var columnIndex = cellPosition.columnIndex;
        var visibleColumnsCount = this._getVisibleColumnCount();
        return includeCommandCells ? columnIndex >= 0 && columnIndex <= visibleColumnsCount - 1 : columnIndex > 0 && columnIndex < visibleColumnsCount - 1
    },
    _getCellElementFromTarget: function(target) {
        var elementType = this._getElementType(target);
        var $targetElement = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(target);
        var $cell;
        if ("cell" === elementType) {
            $cell = $targetElement.closest(".".concat(ROW_CLASS, " > td"))
        } else {
            $cell = $targetElement.children().not("." + COMMAND_EXPAND_CLASS).first()
        }
        return $cell
    },
    _getRowsViewElement: function() {
        var rowsView = this.getView("rowsView");
        return rowsView && rowsView.element()
    },
    isKeyboardEnabled: function() {
        return this.option("keyboardNavigation.enabled")
    },
    _processCanceledEditCellPosition: function(rowIndex, columnIndex) {
        if (this._canceledCellPosition) {
            var isCanceled = this._canceledCellPosition.rowIndex === rowIndex && this._canceledCellPosition.columnIndex === columnIndex;
            this._canceledCellPosition = null;
            return isCanceled
        }
    },
    updateFocusedRowIndex: function() {
        var dataController = this._dataController;
        var visibleRowIndex = this.getVisibleRowIndex();
        var visibleItems = dataController.items();
        var lastVisibleIndex = visibleItems.length ? visibleItems.length - 1 : -1;
        var rowIndexOffset = dataController.getRowIndexOffset();
        lastVisibleIndex >= 0 && visibleRowIndex > lastVisibleIndex && this.setFocusedRowIndex(lastVisibleIndex + rowIndexOffset)
    }
});
var keyboardNavigationModule = {
    defaultOptions: function() {
        return {
            useLegacyKeyboardNavigation: false,
            keyboardNavigation: {
                enabled: true,
                enterKeyAction: "startEdit",
                enterKeyDirection: "none",
                editOnKeyPress: false
            }
        }
    },
    controllers: {
        keyboardNavigation: KeyboardNavigationController
    },
    extenders: {
        views: {
            rowsView: {
                _rowClick: function(e) {
                    var editRowIndex = this.getController("editing").getEditRowIndex();
                    var keyboardController = this.getController("keyboardNavigation");
                    if (editRowIndex === e.rowIndex) {
                        keyboardController.setCellFocusType()
                    }
                    var needTriggerPointerEventHandler = isMobile() && this.option("focusedRowEnabled");
                    if (needTriggerPointerEventHandler) {
                        this._triggerPointerDownEventHandler(e)
                    }
                    this.callBase.apply(this, arguments)
                },
                _triggerPointerDownEventHandler: function(e) {
                    var originalEvent = e.event.originalEvent;
                    if (originalEvent) {
                        var keyboardController = this.getController("keyboardNavigation");
                        var $cell = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(originalEvent.target);
                        var columnIndex = this.getCellIndex($cell);
                        var column = this.getController("columns").getVisibleColumns()[columnIndex];
                        var row = this.getController("data").items()[e.rowIndex];
                        if (keyboardController._isAllowEditing(row, column)) {
                            var eventArgs = Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_9__["createEvent"])(originalEvent, {
                                currentTarget: originalEvent.target
                            });
                            keyboardController._pointerEventHandler(eventArgs)
                        }
                    }
                },
                renderFocusState: function(params) {
                    var {
                        preventScroll: preventScroll,
                        pageSizeChanged: pageSizeChanged
                    } = null !== params && void 0 !== params ? params : {};
                    var keyboardController = this.getController("keyboardNavigation");
                    var $rowsViewElement = this.element();
                    if ($rowsViewElement && !Object(_widget_selectors__WEBPACK_IMPORTED_MODULE_8__["focused"])($rowsViewElement)) {
                        $rowsViewElement.attr("tabindex", null)
                    }
                    pageSizeChanged && keyboardController.updateFocusedRowIndex();
                    var rowIndex = keyboardController.getVisibleRowIndex();
                    if (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isDefined"])(rowIndex) || rowIndex < 0) {
                        rowIndex = 0
                    }
                    var cellElements = this.getCellElements(rowIndex);
                    if (keyboardController.isKeyboardEnabled() && cellElements.length) {
                        this.updateFocusElementTabIndex(cellElements, preventScroll)
                    }
                },
                updateFocusElementTabIndex: function(cellElements) {
                    var keyboardController = this.getController("keyboardNavigation");
                    var $row = cellElements.eq(0).parent();
                    if (isGroupRow($row)) {
                        keyboardController._applyTabIndexToElement($row)
                    } else {
                        var columnIndex = keyboardController.getColumnIndex();
                        if (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_6__["isDefined"])(columnIndex) || columnIndex < 0) {
                            columnIndex = 0
                        }
                        this._updateFocusedCellTabIndex(cellElements, columnIndex)
                    }
                },
                _updateFocusedCellTabIndex: function(cellElements, columnIndex) {
                    var keyboardController = this.getController("keyboardNavigation");
                    var cellElementsLength = cellElements ? cellElements.length : -1;
                    var updateCellTabIndex = function($cell) {
                        var isMasterDetailCell = keyboardController._isMasterDetailCell($cell);
                        var isValidCell = keyboardController._isCellValid($cell);
                        if (!isMasterDetailCell && isValidCell && isCellElement($cell)) {
                            keyboardController._applyTabIndexToElement($cell);
                            keyboardController.setCellFocusType();
                            return true
                        }
                    };
                    var $cell = cellElements.filter("[aria-colindex='".concat(columnIndex + 1, "']"));
                    if ($cell.length) {
                        updateCellTabIndex($cell)
                    } else {
                        if (cellElementsLength <= columnIndex) {
                            columnIndex = cellElementsLength - 1
                        }
                        for (var i = columnIndex; i < cellElementsLength; ++i) {
                            if (updateCellTabIndex(Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(cellElements[i]))) {
                                break
                            }
                        }
                    }
                },
                renderDelayedTemplates: function(change) {
                    this.callBase.apply(this, arguments);
                    this._renderFocusByChange(change)
                },
                _renderFocusByChange(change) {
                    var {
                        operationTypes: operationTypes,
                        repaintChangesOnly: repaintChangesOnly
                    } = null !== change && void 0 !== change ? change : {};
                    var {
                        fullReload: fullReload,
                        pageSize: pageSize
                    } = null !== operationTypes && void 0 !== operationTypes ? operationTypes : {};
                    if (!change || !repaintChangesOnly || fullReload || pageSize) {
                        var preventScroll = shouldPreventScroll(this);
                        this.renderFocusState({
                            preventScroll: preventScroll,
                            pageSizeChanged: pageSize
                        })
                    }
                },
                _renderCore: function(change) {
                    this.callBase.apply(this, arguments);
                    this._renderFocusByChange(change)
                },
                _editCellPrepared: function($cell) {
                    var editorInstance = this._getEditorInstance($cell);
                    var keyboardController = this.getController("keyboardNavigation");
                    var isEditingNavigationMode = keyboardController && keyboardController._isFastEditingStarted();
                    if (editorInstance && isEditingNavigationMode) {
                        this._handleEditingNavigationMode(editorInstance)
                    }
                    this.callBase.apply(this, arguments)
                },
                _handleEditingNavigationMode: function(editorInstance) {
                    ["downArrow", "upArrow"].forEach((function(keyName) {
                        var originalKeyHandler = editorInstance._supportedKeys()[keyName];
                        editorInstance.registerKeyHandler(keyName, e => {
                            var isDropDownOpened = "true" === editorInstance._input().attr("aria-expanded");
                            if (isDropDownOpened) {
                                return originalKeyHandler && originalKeyHandler.call(editorInstance, e)
                            }
                        })
                    }));
                    editorInstance.registerKeyHandler("leftArrow", _core_utils_common__WEBPACK_IMPORTED_MODULE_12__["noop"]);
                    editorInstance.registerKeyHandler("rightArrow", _core_utils_common__WEBPACK_IMPORTED_MODULE_12__["noop"]);
                    var isDateBoxWithMask = editorInstance.NAME === DATEBOX_WIDGET_NAME && editorInstance.option("useMaskBehavior");
                    if (isDateBoxWithMask) {
                        editorInstance.registerKeyHandler("enter", _core_utils_common__WEBPACK_IMPORTED_MODULE_12__["noop"])
                    }
                },
                _getEditorInstance: function($cell) {
                    var $editor = $cell.find(".dx-texteditor").eq(0);
                    return _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_5__["default"].getWidgetInstance($editor)
                }
            }
        },
        controllers: {
            editing: {
                editCell: function(rowIndex, columnIndex) {
                    var keyboardController = this.getController("keyboardNavigation");
                    if (keyboardController._processCanceledEditCellPosition(rowIndex, columnIndex)) {
                        return false
                    }
                    var isCellEditing = this.callBase(rowIndex, columnIndex);
                    if (isCellEditing) {
                        keyboardController.setupFocusedView()
                    }
                    return isCellEditing
                },
                editRow: function(rowIndex) {
                    var keyboardController = this.getController("keyboardNavigation");
                    var visibleColumnIndex = keyboardController.getVisibleColumnIndex();
                    var column = this._columnsController.getVisibleColumns()[visibleColumnIndex];
                    if (column && column.type || this.option("editing.mode") === EDIT_MODE_FORM) {
                        keyboardController._resetFocusedCell()
                    }
                    this.callBase(rowIndex)
                },
                addRow: function(parentKey) {
                    var keyboardController = this.getController("keyboardNavigation");
                    keyboardController.setupFocusedView();
                    keyboardController.setCellFocusType();
                    return this.callBase.apply(this, arguments)
                },
                getFocusedCellInRow: function(rowIndex) {
                    var keyboardNavigationController = this.getController("keyboardNavigation");
                    var $cell = this.callBase(rowIndex);
                    if (keyboardNavigationController.isKeyboardEnabled() && keyboardNavigationController._focusedCellPosition.rowIndex === rowIndex) {
                        var $focusedCell = keyboardNavigationController._getFocusedCell();
                        if (isElementDefined($focusedCell) && !$focusedCell.hasClass(COMMAND_EDIT_CLASS)) {
                            $cell = $focusedCell
                        }
                    }
                    return $cell
                },
                _processCanceledEditingCell: function() {
                    this.closeEditCell().done(() => {
                        var keyboardNavigation = this.getController("keyboardNavigation");
                        keyboardNavigation._updateFocus()
                    })
                },
                init: function() {
                    this.callBase();
                    this._keyboardNavigationController = this.getController("keyboardNavigation")
                },
                closeEditCell: function() {
                    var keyboardNavigation = this._keyboardNavigationController;
                    keyboardNavigation._fastEditingStarted = false;
                    var result = this.callBase.apply(this, arguments);
                    keyboardNavigation._updateFocus();
                    return result
                },
                _delayedInputFocus: function() {
                    this._keyboardNavigationController._isNeedScroll = true;
                    this.callBase.apply(this, arguments)
                },
                _isEditingStart: function() {
                    var keyboardNavigation = this.getController("keyboardNavigation");
                    var cancel = this.callBase.apply(this, arguments);
                    if (cancel && !keyboardNavigation._isNeedFocus) {
                        var $cell = keyboardNavigation._getFocusedCell();
                        keyboardNavigation._focus($cell, true)
                    }
                    return cancel
                }
            },
            data: {
                _correctRowIndices: function(getRowIndexCorrection) {
                    var that = this;
                    var keyboardNavigationController = that.getController("keyboardNavigation");
                    var editorFactory = that.getController("editorFactory");
                    var focusedCellPosition = keyboardNavigationController._focusedCellPosition;
                    that.callBase.apply(that, arguments);
                    if (focusedCellPosition && focusedCellPosition.rowIndex >= 0) {
                        var focusedRowIndexCorrection = getRowIndexCorrection(focusedCellPosition.rowIndex);
                        if (focusedRowIndexCorrection) {
                            focusedCellPosition.rowIndex += focusedRowIndexCorrection;
                            editorFactory.refocus()
                        }
                    }
                },
                getMaxRowIndex: function() {
                    var result = this.items().length - 1;
                    var virtualItemsCount = this.virtualItemsCount();
                    if (virtualItemsCount) {
                        var rowIndexOffset = this.getRowIndexOffset();
                        result += rowIndexOffset + virtualItemsCount.end
                    }
                    return result
                }
            },
            adaptiveColumns: {
                _showHiddenCellsInView: function(_ref) {
                    var {
                        viewName: viewName,
                        $cells: $cells,
                        isCommandColumn: isCommandColumn
                    } = _ref;
                    this.callBase.apply(this, arguments);
                    viewName === COLUMN_HEADERS_VIEW && !isCommandColumn && $cells.each((_, cellElement) => {
                        var $cell = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(cellElement);
                        isCellInHeaderRow($cell) && $cell.attr("tabindex", 0)
                    })
                },
                _hideVisibleCellInView: function(_ref2) {
                    var {
                        viewName: viewName,
                        $cell: $cell,
                        isCommandColumn: isCommandColumn
                    } = _ref2;
                    this.callBase.apply(this, arguments);
                    if (viewName === COLUMN_HEADERS_VIEW && !isCommandColumn && isCellInHeaderRow($cell)) {
                        $cell.removeAttr("tabindex")
                    }
                }
            }
        }
    }
};


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.master_detail.js":
/*!********************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.master_detail.js ***!
  \********************************************************************************/
/*! exports provided: masterDetailModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "masterDetailModule", function() { return masterDetailModule; });
/* harmony import */ var _core_utils_size__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/utils/size */ "./node_modules/devextreme/esm/core/utils/size.js");
/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/renderer */ "./node_modules/devextreme/esm/core/renderer.js");
/* harmony import */ var _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ui.grid_core.utils */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.utils.js");
/* harmony import */ var _core_utils_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/utils/common */ "./node_modules/devextreme/esm/core/utils/common.js");
/* harmony import */ var _core_utils_iterator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/utils/iterator */ "./node_modules/devextreme/esm/core/utils/iterator.js");
/* harmony import */ var _core_utils_type__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core/utils/type */ "./node_modules/devextreme/esm/core/utils/type.js");
/* harmony import */ var _core_utils_deferred__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../core/utils/deferred */ "./node_modules/devextreme/esm/core/utils/deferred.js");
/**
 * DevExtreme (esm/ui/grid_core/ui.grid_core.master_detail.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */







var MASTER_DETAIL_CELL_CLASS = "dx-master-detail-cell";
var MASTER_DETAIL_ROW_CLASS = "dx-master-detail-row";
var CELL_FOCUS_DISABLED_CLASS = "dx-cell-focus-disabled";
var ROW_LINES_CLASS = "dx-row-lines";
var masterDetailModule = {
    defaultOptions: function() {
        return {
            masterDetail: {
                enabled: false,
                autoExpandAll: false,
                template: null
            }
        }
    },
    extenders: {
        controllers: {
            columns: {
                _getExpandColumnsCore: function() {
                    var expandColumns = this.callBase();
                    if (this.option("masterDetail.enabled")) {
                        expandColumns.push({
                            type: "detailExpand",
                            cellTemplate: _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_2__["default"].getExpandCellTemplate()
                        })
                    }
                    return expandColumns
                }
            },
            data: function() {
                var initMasterDetail = function(that) {
                    that._expandedItems = [];
                    that._isExpandAll = that.option("masterDetail.autoExpandAll")
                };
                return {
                    init: function() {
                        initMasterDetail(this);
                        this.callBase()
                    },
                    expandAll: function(groupIndex) {
                        var that = this;
                        if (groupIndex < 0) {
                            that._isExpandAll = true;
                            that._expandedItems = [];
                            that.updateItems()
                        } else {
                            that.callBase.apply(that, arguments)
                        }
                    },
                    collapseAll: function(groupIndex) {
                        var that = this;
                        if (groupIndex < 0) {
                            that._isExpandAll = false;
                            that._expandedItems = [];
                            that.updateItems()
                        } else {
                            that.callBase.apply(that, arguments)
                        }
                    },
                    isRowExpanded: function(key) {
                        var that = this;
                        var expandIndex = _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_2__["default"].getIndexByKey(key, that._expandedItems);
                        if (Array.isArray(key)) {
                            return that.callBase.apply(that, arguments)
                        } else {
                            return !!(that._isExpandAll ^ (expandIndex >= 0 && that._expandedItems[expandIndex].visible))
                        }
                    },
                    _getRowIndicesForExpand: function(key) {
                        var rowIndex = this.getRowIndexByKey(key);
                        return [rowIndex, rowIndex + 1]
                    },
                    _changeRowExpandCore: function(key) {
                        var that = this;
                        var result;
                        if (Array.isArray(key)) {
                            result = that.callBase.apply(that, arguments)
                        } else {
                            var expandIndex = _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_2__["default"].getIndexByKey(key, that._expandedItems);
                            if (expandIndex >= 0) {
                                var visible = that._expandedItems[expandIndex].visible;
                                that._expandedItems[expandIndex].visible = !visible
                            } else {
                                that._expandedItems.push({
                                    key: key,
                                    visible: true
                                })
                            }
                            that.updateItems({
                                changeType: "update",
                                rowIndices: that._getRowIndicesForExpand(key)
                            });
                            result = (new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_6__["Deferred"]).resolve()
                        }
                        return result
                    },
                    _processDataItem: function(data, options) {
                        var that = this;
                        var dataItem = that.callBase.apply(that, arguments);
                        dataItem.isExpanded = that.isRowExpanded(dataItem.key);
                        if (void 0 === options.detailColumnIndex) {
                            options.detailColumnIndex = -1;
                            Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_4__["each"])(options.visibleColumns, (function(index, column) {
                                if ("expand" === column.command && !Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isDefined"])(column.groupIndex)) {
                                    options.detailColumnIndex = index;
                                    return false
                                }
                            }))
                        }
                        if (options.detailColumnIndex >= 0) {
                            dataItem.values[options.detailColumnIndex] = dataItem.isExpanded
                        }
                        return dataItem
                    },
                    _processItems: function(items, change) {
                        var that = this;
                        var changeType = change.changeType;
                        var result = [];
                        items = that.callBase.apply(that, arguments);
                        if ("loadingAll" === changeType) {
                            return items
                        }
                        if ("refresh" === changeType) {
                            that._expandedItems = Object(_core_utils_common__WEBPACK_IMPORTED_MODULE_3__["grep"])(that._expandedItems, (function(item) {
                                return item.visible
                            }))
                        }
                        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_4__["each"])(items, (function(index, item) {
                            result.push(item);
                            var expandIndex = _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_2__["default"].getIndexByKey(item.key, that._expandedItems);
                            if ("data" === item.rowType && (item.isExpanded || expandIndex >= 0) && !item.isNewRow) {
                                result.push({
                                    visible: item.isExpanded,
                                    rowType: "detail",
                                    key: item.key,
                                    data: item.data,
                                    values: []
                                })
                            }
                        }));
                        return result
                    },
                    optionChanged: function(args) {
                        var isEnabledChanged;
                        var isAutoExpandAllChanged;
                        if ("masterDetail" === args.name) {
                            args.name = "dataSource";
                            switch (args.fullName) {
                                case "masterDetail":
                                    var value = args.value || {};
                                    var previousValue = args.previousValue || {};
                                    isEnabledChanged = value.enabled !== previousValue.enabled;
                                    isAutoExpandAllChanged = value.autoExpandAll !== previousValue.autoExpandAll;
                                    break;
                                case "masterDetail.template":
                                    initMasterDetail(this);
                                    break;
                                case "masterDetail.enabled":
                                    isEnabledChanged = true;
                                    break;
                                case "masterDetail.autoExpandAll":
                                    isAutoExpandAllChanged = true
                            }
                            if (isEnabledChanged || isAutoExpandAllChanged) {
                                initMasterDetail(this)
                            }
                        }
                        this.callBase(args)
                    }
                }
            }(),
            resizing: {
                fireContentReadyAction: function() {
                    this.callBase.apply(this, arguments);
                    this._updateParentDataGrids(this.component.$element())
                },
                _updateParentDataGrids: function($element) {
                    var $masterDetailRow = $element.closest("." + MASTER_DETAIL_ROW_CLASS);
                    if ($masterDetailRow.length) {
                        Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_6__["when"])(this._updateMasterDataGrid($masterDetailRow, $element)).done(() => {
                            this._updateParentDataGrids($masterDetailRow.parent())
                        })
                    }
                },
                _updateMasterDataGrid: function($masterDetailRow, $detailElement) {
                    var masterRowOptions = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])($masterDetailRow).data("options");
                    var masterDataGrid = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])($masterDetailRow).closest("." + this.getWidgetContainerClass()).parent().data("dxDataGrid");
                    if (masterRowOptions && masterDataGrid) {
                        if (masterDataGrid.getView("rowsView").isFixedColumns()) {
                            return this._updateFixedMasterDetailGrids(masterDataGrid, masterRowOptions.rowIndex, $detailElement)
                        } else {
                            if (true === masterDataGrid.option("scrolling.useNative")) {
                                return masterDataGrid.updateDimensions()
                            }
                            var scrollable = masterDataGrid.getScrollable();
                            return null === scrollable || void 0 === scrollable ? void 0 : scrollable.update()
                        }
                    }
                },
                _updateFixedMasterDetailGrids: function(masterDataGrid, masterRowIndex, $detailElement) {
                    var $rows = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(masterDataGrid.getRowElement(masterRowIndex));
                    var $tables = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(masterDataGrid.getView("rowsView").getTableElements());
                    var rowsNotEqual = 2 === (null === $rows || void 0 === $rows ? void 0 : $rows.length) && Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getHeight"])($rows.eq(0)) !== Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getHeight"])($rows.eq(1));
                    var tablesNotEqual = 2 === (null === $tables || void 0 === $tables ? void 0 : $tables.length) && Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getHeight"])($tables.eq(0)) !== Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getHeight"])($tables.eq(1));
                    if (rowsNotEqual || tablesNotEqual) {
                        var detailElementWidth = Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getWidth"])($detailElement);
                        return masterDataGrid.updateDimensions().done(() => {
                            var isDetailHorizontalScrollCanBeShown = this.option("columnAutoWidth") && true === masterDataGrid.option("scrolling.useNative");
                            var isDetailGridWidthChanged = isDetailHorizontalScrollCanBeShown && detailElementWidth !== Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getWidth"])($detailElement);
                            if (isDetailHorizontalScrollCanBeShown && isDetailGridWidthChanged) {
                                this.updateDimensions()
                            }
                        })
                    }
                },
                _toggleBestFitMode: function(isBestFit) {
                    this.callBase.apply(this, arguments);
                    if (this.option("masterDetail.template")) {
                        var $rowsTable = this._rowsView.getTableElement();
                        if ($rowsTable) {
                            $rowsTable.find(".dx-master-detail-cell").css("maxWidth", isBestFit ? 0 : "")
                        }
                    }
                }
            }
        },
        views: {
            rowsView: {
                _getCellTemplate: function(options) {
                    var that = this;
                    var column = options.column;
                    var editingController = that.getController("editing");
                    var isEditRow = editingController && editingController.isEditRow(options.rowIndex);
                    var template;
                    if ("detail" === column.command && !isEditRow) {
                        template = that.option("masterDetail.template") || {
                            allowRenderToDetachedContainer: false,
                            render: that._getDefaultTemplate(column)
                        }
                    } else {
                        template = that.callBase.apply(that, arguments)
                    }
                    return template
                },
                _isDetailRow: function(row) {
                    return row && row.rowType && 0 === row.rowType.indexOf("detail")
                },
                _createRow: function(row) {
                    var $row = this.callBase.apply(this, arguments);
                    if (row && this._isDetailRow(row)) {
                        this.option("showRowLines") && $row.addClass(ROW_LINES_CLASS);
                        $row.addClass(MASTER_DETAIL_ROW_CLASS);
                        if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isDefined"])(row.visible)) {
                            $row.toggle(row.visible)
                        }
                    }
                    return $row
                },
                _renderCells: function($row, options) {
                    var row = options.row;
                    var $detailCell;
                    var visibleColumns = this._columnsController.getVisibleColumns();
                    if (row.rowType && this._isDetailRow(row)) {
                        if (this._needRenderCell(0, options.columnIndices)) {
                            $detailCell = this._renderCell($row, {
                                value: null,
                                row: row,
                                rowIndex: row.rowIndex,
                                column: {
                                    command: "detail"
                                },
                                columnIndex: 0
                            });
                            $detailCell.addClass(CELL_FOCUS_DISABLED_CLASS).addClass(MASTER_DETAIL_CELL_CLASS).attr("colSpan", visibleColumns.length)
                        }
                    } else {
                        this.callBase.apply(this, arguments)
                    }
                }
            }
        }
    }
};


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.modules.js":
/*!**************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.modules.js ***!
  \**************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/renderer */ "./node_modules/devextreme/esm/core/renderer.js");
/* harmony import */ var _events_core_events_engine__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../events/core/events_engine */ "./node_modules/devextreme/esm/events/core/events_engine.js");
/* harmony import */ var _core_class__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/class */ "./node_modules/devextreme/esm/core/class.js");
/* harmony import */ var _core_utils_callbacks__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/utils/callbacks */ "./node_modules/devextreme/esm/core/utils/callbacks.js");
/* harmony import */ var _core_utils_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/utils/common */ "./node_modules/devextreme/esm/core/utils/common.js");
/* harmony import */ var _core_utils_type__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core/utils/type */ "./node_modules/devextreme/esm/core/utils/type.js");
/* harmony import */ var _core_utils_array__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../core/utils/array */ "./node_modules/devextreme/esm/core/utils/array.js");
/* harmony import */ var _core_utils_iterator__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../core/utils/iterator */ "./node_modules/devextreme/esm/core/utils/iterator.js");
/* harmony import */ var _widget_ui_errors__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../widget/ui.errors */ "./node_modules/devextreme/esm/ui/widget/ui.errors.js");
/* harmony import */ var _localization_message__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../localization/message */ "./node_modules/devextreme/esm/localization/message.js");
/* harmony import */ var _core_utils_window__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../core/utils/window */ "./node_modules/devextreme/esm/core/utils/window.js");
/**
 * DevExtreme (esm/ui/grid_core/ui.grid_core.modules.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */











var WIDGET_WITH_LEGACY_CONTAINER_NAME = "dxDataGrid";
var ModuleItem = _core_class__WEBPACK_IMPORTED_MODULE_2__["default"].inherit({
    _endUpdateCore: function() {},
    ctor: function(component) {
        var that = this;
        that._updateLockCount = 0;
        that.component = component;
        that._actions = {};
        that._actionConfigs = {};
        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_7__["each"])(this.callbackNames() || [], (function(index, name) {
            var flags = that.callbackFlags(name) || {};
            flags.unique = true, flags.syncStrategy = true;
            that[this] = Object(_core_utils_callbacks__WEBPACK_IMPORTED_MODULE_3__["default"])(flags)
        }))
    },
    init: function() {},
    callbackNames: function() {},
    callbackFlags: function() {},
    publicMethods: function() {},
    beginUpdate: function() {
        this._updateLockCount++
    },
    endUpdate: function() {
        if (this._updateLockCount > 0) {
            this._updateLockCount--;
            if (!this._updateLockCount) {
                this._endUpdateCore()
            }
        }
    },
    option: function(name) {
        var component = this.component;
        var optionCache = component._optionCache;
        if (1 === arguments.length && optionCache) {
            if (!(name in optionCache)) {
                optionCache[name] = component.option(name)
            }
            return optionCache[name]
        }
        return component.option.apply(component, arguments)
    },
    _silentOption: function(name, value) {
        var component = this.component;
        var optionCache = component._optionCache;
        if (optionCache) {
            optionCache[name] = value
        }
        return component._setOptionWithoutOptionChange(name, value)
    },
    localize: function(name) {
        var optionCache = this.component._optionCache;
        if (optionCache) {
            if (!(name in optionCache)) {
                optionCache[name] = _localization_message__WEBPACK_IMPORTED_MODULE_9__["default"].format(name)
            }
            return optionCache[name]
        }
        return _localization_message__WEBPACK_IMPORTED_MODULE_9__["default"].format(name)
    },
    on: function() {
        return this.component.on.apply(this.component, arguments)
    },
    off: function() {
        return this.component.off.apply(this.component, arguments)
    },
    optionChanged: function(args) {
        if (args.name in this._actions) {
            this.createAction(args.name, this._actionConfigs[args.name]);
            args.handled = true
        }
    },
    getAction: function(actionName) {
        return this._actions[actionName]
    },
    setAria: function(name, value, $target) {
        var target = $target.get(0);
        var prefix = "role" !== name && "id" !== name ? "aria-" : "";
        if (target.setAttribute) {
            target.setAttribute(prefix + name, value)
        } else {
            $target.attr(prefix + name, value)
        }
    },
    _createComponent: function() {
        return this.component._createComponent.apply(this.component, arguments)
    },
    getController: function(name) {
        return this.component._controllers[name]
    },
    createAction: function(actionName, config) {
        if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_5__["isFunction"])(actionName)) {
            var action = this.component._createAction(actionName.bind(this), config);
            return function(e) {
                action({
                    event: e
                })
            }
        } else {
            this._actions[actionName] = this.component._createActionByOption(actionName, config);
            this._actionConfigs[actionName] = config
        }
    },
    executeAction: function(actionName, options) {
        var action = this._actions[actionName];
        return action && action(options)
    },
    dispose: function() {
        var that = this;
        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_7__["each"])(that.callbackNames() || [], (function() {
            that[this].empty()
        }))
    },
    addWidgetPrefix: function(className) {
        var componentName = this.component.NAME;
        return "dx-" + componentName.slice(2).toLowerCase() + (className ? "-" + className : "")
    },
    getWidgetContainerClass: function() {
        var containerName = this.component.NAME === WIDGET_WITH_LEGACY_CONTAINER_NAME ? null : "container";
        return this.addWidgetPrefix(containerName)
    }
});
var Controller = ModuleItem;
var ViewController = Controller.inherit({
    getView: function(name) {
        return this.component._views[name]
    },
    getViews: function() {
        return this.component._views
    }
});
var View = ModuleItem.inherit({
    _isReady: function() {
        return this.component.isReady()
    },
    _endUpdateCore: function() {
        this.callBase();
        if (!this._isReady() && this._requireReady) {
            this._requireRender = false;
            this.component._requireResize = false
        }
        if (this._requireRender) {
            this._requireRender = false;
            this.render(this._$parent)
        }
    },
    _invalidate: function(requireResize, requireReady) {
        this._requireRender = true;
        this.component._requireResize = Object(_core_utils_window__WEBPACK_IMPORTED_MODULE_10__["hasWindow"])() && (this.component._requireResize || requireResize);
        this._requireReady = this._requireReady || requireReady
    },
    _renderCore: function() {},
    _resizeCore: function() {},
    _parentElement: function() {
        return this._$parent
    },
    ctor: function(component) {
        this.callBase(component);
        this.renderCompleted = Object(_core_utils_callbacks__WEBPACK_IMPORTED_MODULE_3__["default"])();
        this.resizeCompleted = Object(_core_utils_callbacks__WEBPACK_IMPORTED_MODULE_3__["default"])()
    },
    element: function() {
        return this._$element
    },
    getElementHeight: function() {
        var $element = this.element();
        if (!$element) {
            return 0
        }
        var marginTop = parseFloat($element.css("marginTop")) || 0;
        var marginBottom = parseFloat($element.css("marginBottom")) || 0;
        var offsetHeight = $element.get(0).offsetHeight;
        return offsetHeight + marginTop + marginBottom
    },
    isVisible: function() {
        return true
    },
    getTemplate: function(name) {
        return this.component._getTemplate(name)
    },
    render: function($parent, options) {
        var $element = this._$element;
        var isVisible = this.isVisible();
        if (!$element && !$parent) {
            return
        }
        this._requireReady = false;
        if (!$element) {
            $element = this._$element = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>").appendTo($parent);
            this._$parent = $parent
        }
        $element.toggleClass("dx-hidden", !isVisible);
        if (isVisible) {
            this.component._optionCache = {};
            this._renderCore(options);
            this.component._optionCache = void 0;
            this.renderCompleted.fire(options)
        }
    },
    resize: function() {
        this.isResizing = true;
        this._resizeCore();
        this.resizeCompleted.fire();
        this.isResizing = false
    },
    focus: function() {
        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_1__["default"].trigger(this.element(), "focus")
    }
});
var MODULES_ORDER_MAX_INDEX = 1e6;
var processModules = function(that, componentClass) {
    var modules = componentClass.modules;
    var modulesOrder = componentClass.modulesOrder;
    var controllerTypes = componentClass.controllerTypes || {};
    var viewTypes = componentClass.viewTypes || {};
    if (!componentClass.controllerTypes) {
        if (modulesOrder) {
            modules.sort((function(module1, module2) {
                var orderIndex1 = Object(_core_utils_array__WEBPACK_IMPORTED_MODULE_6__["inArray"])(module1.name, modulesOrder);
                var orderIndex2 = Object(_core_utils_array__WEBPACK_IMPORTED_MODULE_6__["inArray"])(module2.name, modulesOrder);
                if (orderIndex1 < 0) {
                    orderIndex1 = MODULES_ORDER_MAX_INDEX
                }
                if (orderIndex2 < 0) {
                    orderIndex2 = MODULES_ORDER_MAX_INDEX
                }
                return orderIndex1 - orderIndex2
            }))
        }
        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_7__["each"])(modules, (function() {
            var controllers = this.controllers;
            var moduleName = this.name;
            var views = this.views;
            controllers && Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_7__["each"])(controllers, (function(name, type) {
                if (controllerTypes[name]) {
                    throw _widget_ui_errors__WEBPACK_IMPORTED_MODULE_8__["default"].Error("E1001", moduleName, name)
                } else if (!(type && type.subclassOf && type.subclassOf(Controller))) {
                    type.subclassOf(Controller);
                    throw _widget_ui_errors__WEBPACK_IMPORTED_MODULE_8__["default"].Error("E1002", moduleName, name)
                }
                controllerTypes[name] = type
            }));
            views && Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_7__["each"])(views, (function(name, type) {
                if (viewTypes[name]) {
                    throw _widget_ui_errors__WEBPACK_IMPORTED_MODULE_8__["default"].Error("E1003", moduleName, name)
                } else if (!(type && type.subclassOf && type.subclassOf(View))) {
                    throw _widget_ui_errors__WEBPACK_IMPORTED_MODULE_8__["default"].Error("E1004", moduleName, name)
                }
                viewTypes[name] = type
            }))
        }));
        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_7__["each"])(modules, (function() {
            var extenders = this.extenders;
            if (extenders) {
                extenders.controllers && Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_7__["each"])(extenders.controllers, (function(name, extender) {
                    if (controllerTypes[name]) {
                        controllerTypes[name] = controllerTypes[name].inherit(extender)
                    }
                }));
                extenders.views && Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_7__["each"])(extenders.views, (function(name, extender) {
                    if (viewTypes[name]) {
                        viewTypes[name] = viewTypes[name].inherit(extender)
                    }
                }))
            }
        }));
        componentClass.controllerTypes = controllerTypes;
        componentClass.viewTypes = viewTypes
    }
    var createModuleItems = function(moduleTypes) {
        var moduleItems = {};
        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_7__["each"])(moduleTypes, (function(name, moduleType) {
            var moduleItem = new moduleType(that);
            moduleItem.name = name;
            ! function(that, name, moduleItem) {
                var publicMethods = moduleItem.publicMethods();
                if (publicMethods) {
                    Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_7__["each"])(publicMethods, (function(index, methodName) {
                        if (moduleItem[methodName]) {
                            if (!that[methodName]) {
                                that[methodName] = function() {
                                    return moduleItem[methodName].apply(moduleItem, arguments)
                                }
                            } else {
                                throw _widget_ui_errors__WEBPACK_IMPORTED_MODULE_8__["default"].Error("E1005", methodName)
                            }
                        } else {
                            throw _widget_ui_errors__WEBPACK_IMPORTED_MODULE_8__["default"].Error("E1006", name, methodName)
                        }
                    }))
                }
            }(that, name, moduleItem);
            moduleItems[name] = moduleItem
        }));
        return moduleItems
    };
    that._controllers = createModuleItems(controllerTypes);
    that._views = createModuleItems(viewTypes)
};
var callModuleItemsMethod = function(that, methodName, args) {
    args = args || [];
    if (that._controllers) {
        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_7__["each"])(that._controllers, (function() {
            this[methodName] && this[methodName].apply(this, args)
        }))
    }
    if (that._views) {
        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_7__["each"])(that._views, (function() {
            this[methodName] && this[methodName].apply(this, args)
        }))
    }
};
/* harmony default export */ __webpack_exports__["default"] = ({
    modules: [],
    View: View,
    ViewController: ViewController,
    Controller: Controller,
    registerModule: function(name, module) {
        var modules = this.modules;
        for (var i = 0; i < modules.length; i++) {
            if (modules[i].name === name) {
                return
            }
        }
        module.name = name;
        modules.push(module);
        delete this.controllerTypes;
        delete this.viewTypes
    },
    registerModulesOrder: function(moduleNames) {
        this.modulesOrder = moduleNames
    },
    unregisterModule: function(name) {
        this.modules = Object(_core_utils_common__WEBPACK_IMPORTED_MODULE_4__["grep"])(this.modules, (function(module) {
            return module.name !== name
        }));
        delete this.controllerTypes;
        delete this.viewTypes
    },
    processModules: processModules,
    callModuleItemsMethod: callModuleItemsMethod
});


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.pager.js":
/*!************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.pager.js ***!
  \************************************************************************/
/*! exports provided: pagerModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pagerModule", function() { return pagerModule; });
/* harmony import */ var _ui_grid_core_modules__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ui.grid_core.modules */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.modules.js");
/* harmony import */ var _pager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../pager */ "./node_modules/devextreme/esm/ui/pager.js");
/* harmony import */ var _core_utils_array__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/utils/array */ "./node_modules/devextreme/esm/core/utils/array.js");
/* harmony import */ var _core_utils_type__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/utils/type */ "./node_modules/devextreme/esm/core/utils/type.js");
/* harmony import */ var _core_utils_window__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/utils/window */ "./node_modules/devextreme/esm/core/utils/window.js");
/**
 * DevExtreme (esm/ui/grid_core/ui.grid_core.pager.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */





var PAGER_CLASS = "pager";
var MAX_PAGES_COUNT = 10;
var getPageIndex = function(dataController) {
    return 1 + (parseInt(dataController.pageIndex()) || 0)
};
var PagerView = _ui_grid_core_modules__WEBPACK_IMPORTED_MODULE_0__["default"].View.inherit({
    init: function() {
        var dataController = this.getController("data");
        dataController.changed.add(e => {
            if (e && e.repaintChangesOnly) {
                var pager = this._pager;
                if (pager) {
                    pager.option({
                        pageIndex: getPageIndex(dataController),
                        pageSize: dataController.pageSize(),
                        pageCount: dataController.pageCount(),
                        totalCount: dataController.totalCount(),
                        hasKnownLastPage: dataController.hasKnownLastPage()
                    })
                } else {
                    this.render()
                }
            } else if (!e || "update" !== e.changeType && "updateSelection" !== e.changeType && "updateFocusedRow" !== e.changeType) {
                this._pager = null;
                this.render()
            }
        })
    },
    _renderCore: function() {
        var $element = this.element().addClass(this.addWidgetPrefix(PAGER_CLASS));
        var pagerOptions = this.option("pager") || {};
        var dataController = this.getController("data");
        var keyboardController = this.getController("keyboardNavigation");
        var options = {
            maxPagesCount: MAX_PAGES_COUNT,
            pageIndex: getPageIndex(dataController),
            pageCount: dataController.pageCount(),
            pageSize: dataController.pageSize(),
            showPageSizes: pagerOptions.showPageSizeSelector,
            showInfo: pagerOptions.showInfo,
            displayMode: pagerOptions.displayMode,
            pagesNavigatorVisible: pagerOptions.visible,
            showNavigationButtons: pagerOptions.showNavigationButtons,
            pageSizes: this.getPageSizes(),
            totalCount: dataController.totalCount(),
            hasKnownLastPage: dataController.hasKnownLastPage(),
            pageIndexChanged: function(pageIndex) {
                if (dataController.pageIndex() !== pageIndex - 1) {
                    setTimeout((function() {
                        dataController.pageIndex(pageIndex - 1)
                    }))
                }
            },
            pageSizeChanged: function(pageSize) {
                setTimeout((function() {
                    dataController.pageSize(pageSize)
                }))
            },
            onKeyDown: e => keyboardController && keyboardController.executeAction("onKeyDown", e),
            useLegacyKeyboardNavigation: this.option("useLegacyKeyboardNavigation"),
            useKeyboard: this.option("keyboardNavigation.enabled")
        };
        if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_3__["isDefined"])(pagerOptions.infoText)) {
            options.infoText = pagerOptions.infoText
        }
        if (this._pager) {
            this._pager.repaint();
            return
        }
        if (Object(_core_utils_window__WEBPACK_IMPORTED_MODULE_4__["hasWindow"])()) {
            this._pager = this._createComponent($element, _pager__WEBPACK_IMPORTED_MODULE_1__["default"], options)
        } else {
            $element.addClass("dx-pager").html('<div class="dx-pages"><div class="dx-page"></div></div>')
        }
    },
    getPager: function() {
        return this._pager
    },
    getPageSizes: function() {
        var dataController = this.getController("data");
        var pagerOptions = this.option("pager");
        var allowedPageSizes = pagerOptions && pagerOptions.allowedPageSizes;
        var pageSize = dataController.pageSize();
        if (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_3__["isDefined"])(this._pageSizes) || -1 === Object(_core_utils_array__WEBPACK_IMPORTED_MODULE_2__["inArray"])(pageSize, this._pageSizes)) {
            this._pageSizes = [];
            if (pagerOptions) {
                if (Array.isArray(allowedPageSizes)) {
                    this._pageSizes = allowedPageSizes
                } else if (allowedPageSizes && pageSize > 1) {
                    this._pageSizes = [Math.floor(pageSize / 2), pageSize, 2 * pageSize]
                }
            }
        }
        return this._pageSizes
    },
    isVisible: function() {
        var dataController = this.getController("data");
        var pagerOptions = this.option("pager");
        var pagerVisible = pagerOptions && pagerOptions.visible;
        var scrolling = this.option("scrolling");
        if ("auto" === pagerVisible) {
            if (scrolling && ("virtual" === scrolling.mode || "infinite" === scrolling.mode)) {
                pagerVisible = false
            } else {
                pagerVisible = dataController.pageCount() > 1 || dataController.isLoaded() && !dataController.hasKnownLastPage()
            }
        }
        return pagerVisible
    },
    getHeight: function() {
        return this.getElementHeight()
    },
    optionChanged: function(args) {
        var name = args.name;
        var isPager = "pager" === name;
        var isPaging = "paging" === name;
        var isDataSource = "dataSource" === name;
        var isScrolling = "scrolling" === name;
        var dataController = this.getController("data");
        if (isPager || isPaging || isScrolling || isDataSource) {
            args.handled = true;
            if (dataController.skipProcessingPagingChange(args.fullName)) {
                return
            }
            if (isPager || isPaging) {
                this._pageSizes = null
            }
            if (!isDataSource) {
                this._pager = null;
                this._invalidate();
                if (Object(_core_utils_window__WEBPACK_IMPORTED_MODULE_4__["hasWindow"])() && isPager && this.component) {
                    this.component.resize()
                }
            }
        }
    },
    dispose: function() {
        this._pager = null
    }
});
var pagerModule = {
    defaultOptions: function() {
        return {
            pager: {
                visible: "auto",
                showPageSizeSelector: false,
                allowedPageSizes: "auto"
            }
        }
    },
    views: {
        pagerView: PagerView
    }
};


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.row_dragging.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.row_dragging.js ***!
  \*******************************************************************************/
/*! exports provided: rowDraggingModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rowDraggingModule", function() { return rowDraggingModule; });
/* harmony import */ var _core_utils_size__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/utils/size */ "./node_modules/devextreme/esm/core/utils/size.js");
/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/renderer */ "./node_modules/devextreme/esm/core/renderer.js");
/* harmony import */ var _core_utils_extend__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/utils/extend */ "./node_modules/devextreme/esm/core/utils/extend.js");
/* harmony import */ var _sortable__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../sortable */ "./node_modules/devextreme/esm/ui/sortable.js");
/* harmony import */ var _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ui.grid_core.utils */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.utils.js");
/* harmony import */ var _core_utils_common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core/utils/common */ "./node_modules/devextreme/esm/core/utils/common.js");
/**
 * DevExtreme (esm/ui/grid_core/ui.grid_core.row_dragging.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */






var COMMAND_HANDLE_CLASS = "dx-command-drag";
var CELL_FOCUS_DISABLED_CLASS = "dx-cell-focus-disabled";
var HANDLE_ICON_CLASS = "drag-icon";
var ROWS_VIEW = "rowsview";
var SORTABLE_WITHOUT_HANDLE_CLASS = "dx-sortable-without-handle";
var RowDraggingExtender = {
    init: function() {
        this.callBase.apply(this, arguments);
        this._updateHandleColumn()
    },
    _allowReordering: function() {
        var rowDragging = this.option("rowDragging");
        return !!(rowDragging && (rowDragging.allowReordering || rowDragging.allowDropInsideItem || rowDragging.group))
    },
    _updateHandleColumn: function() {
        var rowDragging = this.option("rowDragging");
        var allowReordering = this._allowReordering();
        var columnsController = this._columnsController;
        var isHandleColumnVisible = allowReordering && rowDragging.showDragIcons;
        columnsController && columnsController.addCommandColumn({
            type: "drag",
            command: "drag",
            visibleIndex: -2,
            alignment: "center",
            cssClass: COMMAND_HANDLE_CLASS,
            width: "auto",
            cellTemplate: this._getHandleTemplate(),
            visible: isHandleColumnVisible
        });
        columnsController.columnOption("type:drag", "visible", isHandleColumnVisible)
    },
    _renderContent: function() {
        var rowDragging = this.option("rowDragging");
        var allowReordering = this._allowReordering();
        var $content = this.callBase.apply(this, arguments);
        var isFixedTableRendering = this._isFixedTableRendering;
        var sortableName = "_sortable";
        var sortableFixedName = "_sortableFixed";
        var currentSortableName = isFixedTableRendering ? sortableFixedName : sortableName;
        var anotherSortableName = isFixedTableRendering ? sortableName : sortableFixedName;
        var togglePointerEventsStyle = toggle => {
            var _this$sortableFixedNa;
            null === (_this$sortableFixedNa = this[sortableFixedName]) || void 0 === _this$sortableFixedNa ? void 0 : _this$sortableFixedNa.$element().css("pointerEvents", toggle ? "auto" : "")
        };
        var rowSelector = ".dx-row:not(.dx-freespace-row):not(.dx-virtual-row):not(.dx-header-row):not(.dx-footer-row)";
        var filter = this.option("dataRowTemplate") ? "> table > tbody".concat(rowSelector) : "> table > tbody > ".concat(rowSelector);
        if ((allowReordering || this[currentSortableName]) && $content.length) {
            this[currentSortableName] = this._createComponent($content, _sortable__WEBPACK_IMPORTED_MODULE_3__["default"], Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_2__["extend"])({
                component: this.component,
                contentTemplate: null,
                filter: filter,
                dragTemplate: this._getDraggableRowTemplate(),
                handle: rowDragging.showDragIcons && ".".concat(COMMAND_HANDLE_CLASS),
                dropFeedbackMode: "indicate"
            }, rowDragging, {
                onDragStart: e => {
                    var _this$getController, _rowDragging$onDragSt;
                    null === (_this$getController = this.getController("keyboardNavigation")) || void 0 === _this$getController ? void 0 : _this$getController._resetFocusedCell();
                    var row = e.component.getVisibleRows()[e.fromIndex];
                    e.itemData = row && row.data;
                    var isDataRow = row && "data" === row.rowType;
                    e.cancel = !allowReordering || !isDataRow;
                    null === (_rowDragging$onDragSt = rowDragging.onDragStart) || void 0 === _rowDragging$onDragSt ? void 0 : _rowDragging$onDragSt.call(rowDragging, e)
                },
                onDragEnter: () => {
                    togglePointerEventsStyle(true)
                },
                onDragLeave: () => {
                    togglePointerEventsStyle(false)
                },
                onDragEnd: e => {
                    var _rowDragging$onDragEn;
                    togglePointerEventsStyle(false);
                    null === (_rowDragging$onDragEn = rowDragging.onDragEnd) || void 0 === _rowDragging$onDragEn ? void 0 : _rowDragging$onDragEn.call(rowDragging, e)
                },
                onAdd: e => {
                    var _rowDragging$onAdd;
                    togglePointerEventsStyle(false);
                    null === (_rowDragging$onAdd = rowDragging.onAdd) || void 0 === _rowDragging$onAdd ? void 0 : _rowDragging$onAdd.call(rowDragging, e)
                },
                dropFeedbackMode: rowDragging.dropFeedbackMode,
                onOptionChanged: e => {
                    var hasFixedSortable = this[sortableFixedName];
                    if (hasFixedSortable) {
                        if ("fromIndex" === e.name || "toIndex" === e.name) {
                            this[anotherSortableName].option(e.name, e.value)
                        }
                    }
                }
            }));
            $content.toggleClass("dx-scrollable-container", isFixedTableRendering);
            $content.toggleClass(SORTABLE_WITHOUT_HANDLE_CLASS, allowReordering && !rowDragging.showDragIcons)
        }
        return $content
    },
    _renderCore(e) {
        this.callBase.apply(this, arguments);
        if (e && "update" === e.changeType && e.repaintChangesOnly && _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_4__["default"].isVirtualRowRendering(this)) {
            Object(_core_utils_common__WEBPACK_IMPORTED_MODULE_5__["deferUpdate"])(() => {
                this._updateSortable()
            })
        }
    },
    _updateSortable() {
        var offset = this._dataController.getRowIndexOffset();
        [this._sortable, this._sortableFixed].forEach(sortable => {
            null === sortable || void 0 === sortable ? void 0 : sortable.option("offset", offset);
            null === sortable || void 0 === sortable ? void 0 : sortable.update()
        })
    },
    _resizeCore: function() {
        this.callBase.apply(this, arguments);
        this._updateSortable()
    },
    _getDraggableGridOptions: function(options) {
        var gridOptions = this.option();
        var columns = this.getColumns();
        var $rowElement = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(this.getRowElement(options.rowIndex));
        return {
            dataSource: [{
                id: 1,
                parentId: 0
            }],
            showBorders: true,
            showColumnHeaders: false,
            scrolling: {
                useNative: false,
                showScrollbar: "never"
            },
            pager: {
                visible: false
            },
            loadingTimeout: null,
            columnFixing: gridOptions.columnFixing,
            columnAutoWidth: gridOptions.columnAutoWidth,
            showColumnLines: gridOptions.showColumnLines,
            columns: columns.map(column => ({
                width: column.width || column.visibleWidth,
                fixed: column.fixed,
                fixedPosition: column.fixedPosition
            })),
            onRowPrepared: e => {
                var rowsView = e.component.getView("rowsView");
                Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(e.rowElement).replaceWith($rowElement.eq(rowsView._isFixedTableRendering ? 1 : 0).clone())
            }
        }
    },
    _getDraggableRowTemplate: function() {
        return options => {
            var $rootElement = this.component.$element();
            var $dataGridContainer = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])("<div>");
            Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["setWidth"])($dataGridContainer, Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getWidth"])($rootElement));
            var items = this._dataController.items();
            var row = items && items[options.fromIndex];
            var gridOptions = this._getDraggableGridOptions(row);
            this._createComponent($dataGridContainer, this.component.NAME, gridOptions);
            $dataGridContainer.find(".dx-gridbase-container").children(":not(.".concat(this.addWidgetPrefix(ROWS_VIEW), ")")).hide();
            return $dataGridContainer
        }
    },
    _getHandleTemplate: function() {
        return (container, options) => {
            if ("data" === options.rowType) {
                Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(container).addClass(CELL_FOCUS_DISABLED_CLASS);
                return Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])("<span>").addClass(this.addWidgetPrefix(HANDLE_ICON_CLASS))
            } else {
                _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_4__["default"].setEmptyText(Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(container))
            }
        }
    },
    optionChanged: function(args) {
        if ("rowDragging" === args.name) {
            this._updateHandleColumn();
            this._invalidate(true, true);
            args.handled = true
        }
        this.callBase.apply(this, arguments)
    }
};
var rowDraggingModule = {
    defaultOptions: function() {
        return {
            rowDragging: {
                showDragIcons: true,
                dropFeedbackMode: "indicate",
                allowReordering: false,
                allowDropInsideItem: false
            }
        }
    },
    extenders: {
        views: {
            rowsView: RowDraggingExtender
        }
    }
};


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.rows.js":
/*!***********************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.rows.js ***!
  \***********************************************************************/
/*! exports provided: rowsModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rowsModule", function() { return rowsModule; });
/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ "./node_modules/@babel/runtime/helpers/esm/extends.js");
/* harmony import */ var _core_utils_size__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/utils/size */ "./node_modules/devextreme/esm/core/utils/size.js");
/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/renderer */ "./node_modules/devextreme/esm/core/renderer.js");
/* harmony import */ var _core_utils_window__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/utils/window */ "./node_modules/devextreme/esm/core/utils/window.js");
/* harmony import */ var _events_core_events_engine__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../events/core/events_engine */ "./node_modules/devextreme/esm/events/core/events_engine.js");
/* harmony import */ var _core_utils_common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core/utils/common */ "./node_modules/devextreme/esm/core/utils/common.js");
/* harmony import */ var _core_utils_style__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../core/utils/style */ "./node_modules/devextreme/esm/core/utils/style.js");
/* harmony import */ var _core_utils_type__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../core/utils/type */ "./node_modules/devextreme/esm/core/utils/type.js");
/* harmony import */ var _core_utils_iterator__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../core/utils/iterator */ "./node_modules/devextreme/esm/core/utils/iterator.js");
/* harmony import */ var _core_utils_extend__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../core/utils/extend */ "./node_modules/devextreme/esm/core/utils/extend.js");
/* harmony import */ var _core_utils_position__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../core/utils/position */ "./node_modules/devextreme/esm/core/utils/position.js");
/* harmony import */ var _core_utils_string__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../core/utils/string */ "./node_modules/devextreme/esm/core/utils/string.js");
/* harmony import */ var _core_utils_data__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../core/utils/data */ "./node_modules/devextreme/esm/core/utils/data.js");
/* harmony import */ var _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./ui.grid_core.utils */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.utils.js");
/* harmony import */ var _ui_grid_core_columns_view__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./ui.grid_core.columns_view */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.columns_view.js");
/* harmony import */ var _scroll_view_ui_scrollable__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../scroll_view/ui.scrollable */ "./node_modules/devextreme/esm/ui/scroll_view/ui.scrollable.js");
/* harmony import */ var _events_remove__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../events/remove */ "./node_modules/devextreme/esm/events/remove.js");
/* harmony import */ var _localization_message__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../localization/message */ "./node_modules/devextreme/esm/localization/message.js");
/* harmony import */ var _core_utils_browser__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../core/utils/browser */ "./node_modules/devextreme/esm/core/utils/browser.js");
/**
 * DevExtreme (esm/ui/grid_core/ui.grid_core.rows.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */



















var ROWS_VIEW_CLASS = "rowsview";
var CONTENT_CLASS = "content";
var NOWRAP_CLASS = "nowrap";
var GROUP_ROW_CLASS = "dx-group-row";
var GROUP_CELL_CLASS = "dx-group-cell";
var DATA_ROW_CLASS = "dx-data-row";
var FREE_SPACE_CLASS = "dx-freespace-row";
var ROW_LINES_CLASS = "dx-row-lines";
var COLUMN_LINES_CLASS = "dx-column-lines";
var ROW_ALTERNATION_CLASS = "dx-row-alt";
var LAST_ROW_BORDER = "dx-last-row-border";
var EMPTY_CLASS = "dx-empty";
var ROW_INSERTED_ANIMATION_CLASS = "row-inserted-animation";
var LOADPANEL_HIDE_TIMEOUT = 200;

function getMaxHorizontalScrollOffset(scrollable) {
    return scrollable ? Math.round(scrollable.scrollWidth() - scrollable.clientWidth()) : 0
}
var rowsModule = {
    defaultOptions: function() {
        return {
            hoverStateEnabled: false,
            scrolling: {
                useNative: "auto"
            },
            loadPanel: {
                enabled: "auto",
                text: _localization_message__WEBPACK_IMPORTED_MODULE_17__["default"].format("Loading"),
                width: 200,
                height: 90,
                showIndicator: true,
                indicatorSrc: "",
                showPane: true
            },
            dataRowTemplate: null,
            columnAutoWidth: false,
            noDataText: _localization_message__WEBPACK_IMPORTED_MODULE_17__["default"].format("dxDataGrid-noDataText"),
            wordWrapEnabled: false,
            showColumnLines: true,
            showRowLines: false,
            rowAlternationEnabled: false,
            activeStateEnabled: false,
            twoWayBindingEnabled: true
        }
    },
    views: {
        rowsView: _ui_grid_core_columns_view__WEBPACK_IMPORTED_MODULE_14__["ColumnsView"].inherit(function() {
            var defaultCellTemplate = function($container, options) {
                var isDataTextEmpty = Object(_core_utils_string__WEBPACK_IMPORTED_MODULE_11__["isEmpty"])(options.text) && "data" === options.rowType;
                var text = options.text;
                var container = $container.get(0);
                if (isDataTextEmpty) {
                    _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_13__["default"].setEmptyText($container)
                } else if (options.column.encodeHtml) {
                    container.textContent = text
                } else {
                    container.innerHTML = text
                }
            };
            return {
                _getDefaultTemplate: function(column) {
                    switch (column.command) {
                        case "empty":
                            return function(container) {
                                container.html("&nbsp;")
                            };
                        default:
                            return defaultCellTemplate
                    }
                },
                _getDefaultGroupTemplate: function(column) {
                    var summaryTexts = this.option("summary.texts");
                    return function($container, options) {
                        var data = options.data;
                        var text = options.column.caption + ": " + options.text;
                        var container = $container.get(0);
                        if (options.summaryItems && options.summaryItems.length) {
                            text += " " + _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_13__["default"].getGroupRowSummaryText(options.summaryItems, summaryTexts)
                        }
                        if (data) {
                            if (options.groupContinuedMessage && options.groupContinuesMessage) {
                                text += " (" + options.groupContinuedMessage + ". " + options.groupContinuesMessage + ")"
                            } else if (options.groupContinuesMessage) {
                                text += " (" + options.groupContinuesMessage + ")"
                            } else if (options.groupContinuedMessage) {
                                text += " (" + options.groupContinuedMessage + ")"
                            }
                        }
                        $container.addClass(GROUP_CELL_CLASS);
                        if (column.encodeHtml) {
                            container.textContent = text
                        } else {
                            container.innerHTML = text
                        }
                    }
                },
                _update: function() {},
                _getCellTemplate: function(options) {
                    var column = options.column;
                    var template;
                    if ("group" === options.rowType && Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_7__["isDefined"])(column.groupIndex) && !column.showWhenGrouped && !column.command) {
                        template = column.groupCellTemplate || {
                            allowRenderToDetachedContainer: true,
                            render: this._getDefaultGroupTemplate(column)
                        }
                    } else if (("data" === options.rowType || column.command) && column.cellTemplate) {
                        template = column.cellTemplate
                    } else {
                        template = {
                            allowRenderToDetachedContainer: true,
                            render: this._getDefaultTemplate(column)
                        }
                    }
                    return template
                },
                _createRow: function(row) {
                    var $row = this.callBase.apply(this, arguments);
                    if (row) {
                        var isGroup = "group" === row.rowType;
                        var isDataRow = "data" === row.rowType;
                        isDataRow && $row.addClass(DATA_ROW_CLASS);
                        isDataRow && this.option("showRowLines") && $row.addClass(ROW_LINES_CLASS);
                        this.option("showColumnLines") && $row.addClass(COLUMN_LINES_CLASS);
                        if (false === row.visible) {
                            $row.hide()
                        }
                        if (isGroup) {
                            $row.addClass(GROUP_ROW_CLASS);
                            var isRowExpanded = row.isExpanded;
                            this.setAria("role", "row", $row);
                            this.setAria("expanded", Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_7__["isDefined"])(isRowExpanded) && isRowExpanded.toString(), $row)
                        }
                    }
                    return $row
                },
                _rowPrepared: function($row, rowOptions, row) {
                    if ("data" === rowOptions.rowType) {
                        if (this.option("rowAlternationEnabled")) {
                            this._isAltRow(row) && $row.addClass(ROW_ALTERNATION_CLASS);
                            rowOptions.watch && rowOptions.watch(() => this._isAltRow(row), value => {
                                $row.toggleClass(ROW_ALTERNATION_CLASS, value)
                            })
                        }
                        this._setAriaRowIndex(rowOptions, $row);
                        rowOptions.watch && rowOptions.watch(() => rowOptions.rowIndex, () => this._setAriaRowIndex(rowOptions, $row))
                    }
                    this.callBase.apply(this, arguments)
                },
                _setAriaRowIndex: function(row, $row) {
                    var component = this.component;
                    var isPagerMode = "standard" === component.option("scrolling.mode") && !_ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_13__["default"].isVirtualRowRendering(component);
                    var rowIndex = row.rowIndex + 1;
                    if (isPagerMode) {
                        rowIndex = component.pageIndex() * component.pageSize() + rowIndex
                    } else {
                        rowIndex += this._dataController.getRowIndexOffset()
                    }
                    this.setAria("rowindex", rowIndex, $row)
                },
                _afterRowPrepared: function(e) {
                    var arg = e.args[0];
                    var dataController = this._dataController;
                    var row = dataController.getVisibleRows()[arg.rowIndex];
                    var watch = this.option("integrationOptions.watchMethod");
                    if (!arg.data || "data" !== arg.rowType || arg.isNewRow || !this.option("twoWayBindingEnabled") || !watch || !row) {
                        return
                    }
                    var dispose = watch(() => dataController.generateDataValues(arg.data, arg.columns), () => {
                        dataController.repaintRows([row.rowIndex], this.option("repaintChangesOnly"))
                    }, {
                        deep: true,
                        skipImmediate: true
                    });
                    _events_core_events_engine__WEBPACK_IMPORTED_MODULE_4__["default"].on(arg.rowElement, _events_remove__WEBPACK_IMPORTED_MODULE_16__["removeEvent"], dispose)
                },
                _renderScrollable: function(force) {
                    var $element = this.element();
                    if (!$element.children().length) {
                        $element.append("<div>")
                    }
                    if (force || !this._loadPanel) {
                        this._renderLoadPanel($element, $element.parent(), this._dataController.isLocalStore())
                    }
                    if ((force || !this.getScrollable()) && this._dataController.isLoaded()) {
                        var columns = this.getColumns();
                        var allColumnsHasWidth = true;
                        for (var i = 0; i < columns.length; i++) {
                            if (!columns[i].width && !columns[i].minWidth) {
                                allColumnsHasWidth = false;
                                break
                            }
                        }
                        if (this.option("columnAutoWidth") || this._hasHeight || allColumnsHasWidth || this._columnsController._isColumnFixing()) {
                            this._renderScrollableCore($element)
                        }
                    }
                },
                _handleScroll: function(e) {
                    var rtlEnabled = this.option("rtlEnabled");
                    var isNativeScrolling = e.component.option("useNative");
                    this._scrollTop = e.scrollOffset.top;
                    this._scrollLeft = e.scrollOffset.left;
                    var scrollLeft = e.scrollOffset.left;
                    if (rtlEnabled) {
                        this._scrollRight = getMaxHorizontalScrollOffset(e.component) - this._scrollLeft;
                        if (isNativeScrolling) {
                            scrollLeft = -this._scrollRight
                        }
                        if (!this.isScrollbarVisible(true)) {
                            this._scrollLeft = -1
                        }
                    }
                    this.scrollChanged.fire(Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__["default"])({}, e.scrollOffset, {
                        left: scrollLeft
                    }), this.name)
                },
                _renderScrollableCore: function($element) {
                    var dxScrollableOptions = this._createScrollableOptions();
                    var scrollHandler = this._handleScroll.bind(this);
                    dxScrollableOptions.onScroll = scrollHandler;
                    this._scrollable = this._createComponent($element, _scroll_view_ui_scrollable__WEBPACK_IMPORTED_MODULE_15__["default"], dxScrollableOptions);
                    this._scrollableContainer = this._scrollable && Object(_core_renderer__WEBPACK_IMPORTED_MODULE_2__["default"])(this._scrollable.container())
                },
                _renderLoadPanel: _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_13__["default"].renderLoadPanel,
                _renderContent: function(contentElement, tableElement) {
                    contentElement.empty().append(tableElement);
                    return this._findContentElement()
                },
                _updateContent: function(newTableElement, change) {
                    var that = this;
                    var tableElement = that.getTableElement();
                    var contentElement = that._findContentElement();
                    var changeType = change && change.changeType;
                    var executors = [];
                    var highlightChanges = this.option("highlightChanges");
                    var rowInsertedClass = this.addWidgetPrefix(ROW_INSERTED_ANIMATION_CLASS);
                    switch (changeType) {
                        case "update":
                            Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_8__["each"])(change.rowIndices, (function(index, rowIndex) {
                                var $newRowElement = that._getRowElements(newTableElement).eq(index);
                                var changeType = change.changeTypes && change.changeTypes[index];
                                var item = change.items && change.items[index];
                                executors.push((function() {
                                    var $rowsElement = that._getRowElements();
                                    var $rowElement = $rowsElement.eq(rowIndex);
                                    switch (changeType) {
                                        case "update":
                                            if (item) {
                                                var columnIndices = change.columnIndices && change.columnIndices[index];
                                                if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_7__["isDefined"])(item.visible) && item.visible !== $rowElement.is(":visible")) {
                                                    $rowElement.toggle(item.visible)
                                                } else if (columnIndices) {
                                                    that._updateCells($rowElement, $newRowElement, columnIndices)
                                                } else {
                                                    $rowElement.replaceWith($newRowElement)
                                                }
                                            }
                                            break;
                                        case "insert":
                                            if (!$rowsElement.length) {
                                                if (tableElement) {
                                                    var target = $newRowElement.is("tbody") ? tableElement : tableElement.children("tbody");
                                                    $newRowElement.prependTo(target)
                                                }
                                            } else if ($rowElement.length) {
                                                $newRowElement.insertBefore($rowElement)
                                            } else {
                                                $newRowElement.insertAfter($rowsElement.last())
                                            }
                                            if (highlightChanges && change.isLiveUpdate) {
                                                $newRowElement.addClass(rowInsertedClass)
                                            }
                                            break;
                                        case "remove":
                                            $rowElement.remove()
                                    }
                                }))
                            }));
                            Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_8__["each"])(executors, (function() {
                                this()
                            }));
                            newTableElement.remove();
                            break;
                        default:
                            that.setTableElement(newTableElement);
                            contentElement.addClass(that.addWidgetPrefix(CONTENT_CLASS));
                            that._renderContent(contentElement, newTableElement)
                    }
                },
                _createEmptyRow: function(className, isFixed, height) {
                    var $cell;
                    var $row = this._createRow();
                    var columns = isFixed ? this.getFixedColumns() : this.getColumns();
                    $row.addClass(className).toggleClass(COLUMN_LINES_CLASS, this.option("showColumnLines"));
                    for (var i = 0; i < columns.length; i++) {
                        $cell = this._createCell({
                            column: columns[i],
                            rowType: "freeSpace",
                            columnIndex: i,
                            columns: columns
                        });
                        Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_7__["isNumeric"])(height) && $cell.css("height", height);
                        $row.append($cell)
                    }
                    this.setAria("role", "presentation", $row);
                    return $row
                },
                _appendEmptyRow: function($table, $emptyRow, location) {
                    var $tBodies = this._getBodies($table);
                    var isTableContainer = !$tBodies.length || $emptyRow.is("tbody");
                    var $container = isTableContainer ? $table : $tBodies;
                    if ("top" === location) {
                        $container.first().prepend($emptyRow);
                        if (isTableContainer) {
                            var $colgroup = $container.children("colgroup");
                            $container.prepend($colgroup)
                        }
                    } else {
                        $container.last().append($emptyRow)
                    }
                },
                _renderFreeSpaceRow: function($tableElement) {
                    var $freeSpaceRowElement = this._createEmptyRow(FREE_SPACE_CLASS);
                    $freeSpaceRowElement = this._wrapRowIfNeed($tableElement, $freeSpaceRowElement);
                    this._appendEmptyRow($tableElement, $freeSpaceRowElement)
                },
                _checkRowKeys: function(options) {
                    var that = this;
                    var rows = that._getRows(options);
                    var keyExpr = that._dataController.store() && that._dataController.store().key();
                    keyExpr && rows.some((function(row) {
                        if ("data" === row.rowType && void 0 === row.key) {
                            that._dataController.fireError("E1046", keyExpr);
                            return true
                        }
                    }))
                },
                _needUpdateRowHeight: function(itemsCount) {
                    return itemsCount > 0 && !this._rowHeight
                },
                _getRowsHeight: function($tableElement) {
                    var $rowElements = $tableElement.children("tbody").children().not(".dx-virtual-row").not("." + FREE_SPACE_CLASS);
                    return $rowElements.toArray().reduce((function(sum, row) {
                        return sum + Object(_core_utils_position__WEBPACK_IMPORTED_MODULE_10__["getBoundingRect"])(row).height
                    }), 0)
                },
                _updateRowHeight: function() {
                    var $tableElement = this.getTableElement();
                    var itemsCount = this._dataController.items().length;
                    if ($tableElement && this._needUpdateRowHeight(itemsCount)) {
                        var rowsHeight = this._getRowsHeight($tableElement);
                        this._rowHeight = rowsHeight / itemsCount
                    }
                },
                _findContentElement: function() {
                    var $content = this.element();
                    var scrollable = this.getScrollable();
                    if ($content) {
                        if (scrollable) {
                            $content = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_2__["default"])(scrollable.content())
                        }
                        return $content.children().first()
                    }
                },
                _getRowElements: function(tableElement) {
                    var $rows = this.callBase(tableElement);
                    return $rows && $rows.not("." + FREE_SPACE_CLASS)
                },
                _getFreeSpaceRowElements: function($table) {
                    var tableElements = $table || this.getTableElements();
                    return tableElements && tableElements.children("tbody").children("." + FREE_SPACE_CLASS)
                },
                _getNoDataText: function() {
                    return this.option("noDataText")
                },
                _rowClick: function(e) {
                    var item = this._dataController.items()[e.rowIndex] || {};
                    this.executeAction("onRowClick", Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_9__["extend"])({
                        evaluate: function(expr) {
                            var getter = Object(_core_utils_data__WEBPACK_IMPORTED_MODULE_12__["compileGetter"])(expr);
                            return getter(item.data)
                        }
                    }, e, item))
                },
                _rowDblClick: function(e) {
                    var item = this._dataController.items()[e.rowIndex] || {};
                    this.executeAction("onRowDblClick", Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_9__["extend"])({}, e, item))
                },
                _getColumnsCountBeforeGroups: function(columns) {
                    for (var i = 0; i < columns.length; i++) {
                        if ("groupExpand" === columns[i].type) {
                            return i
                        }
                    }
                    return 0
                },
                _getGroupCellOptions: function(options) {
                    var columnsCountBeforeGroups = this._getColumnsCountBeforeGroups(options.columns);
                    var columnIndex = (options.row.groupIndex || 0) + columnsCountBeforeGroups;
                    return {
                        columnIndex: columnIndex,
                        colspan: options.columns.length - columnIndex - 1
                    }
                },
                _renderCells: function($row, options) {
                    if ("group" === options.row.rowType) {
                        this._renderGroupedCells($row, options)
                    } else if (options.row.values) {
                        this.callBase($row, options)
                    }
                },
                _renderGroupedCells: function($row, options) {
                    var row = options.row;
                    var expandColumn;
                    var columns = options.columns;
                    var rowIndex = row.rowIndex;
                    var isExpanded;
                    var groupCellOptions = this._getGroupCellOptions(options);
                    for (var i = 0; i <= groupCellOptions.columnIndex; i++) {
                        if (i === groupCellOptions.columnIndex && columns[i].allowCollapsing && "infinite" !== options.scrollingMode) {
                            isExpanded = !!row.isExpanded;
                            expandColumn = columns[i]
                        } else {
                            isExpanded = null;
                            expandColumn = {
                                command: "expand",
                                cssClass: columns[i].cssClass
                            }
                        }
                        if (this._needRenderCell(i, options.columnIndices)) {
                            this._renderCell($row, {
                                value: isExpanded,
                                row: row,
                                rowIndex: rowIndex,
                                column: expandColumn,
                                columnIndex: i,
                                columnIndices: options.columnIndices
                            })
                        }
                    }
                    var groupColumnAlignment = Object(_core_utils_position__WEBPACK_IMPORTED_MODULE_10__["getDefaultAlignment"])(this.option("rtlEnabled"));
                    var groupColumn = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_9__["extend"])({}, columns[groupCellOptions.columnIndex], {
                        command: null,
                        type: null,
                        cssClass: null,
                        width: null,
                        showWhenGrouped: false,
                        alignment: groupColumnAlignment
                    });
                    if (groupCellOptions.colspan > 1) {
                        groupColumn.colspan = groupCellOptions.colspan
                    }
                    if (this._needRenderCell(groupCellOptions.columnIndex + 1, options.columnIndices)) {
                        this._renderCell($row, {
                            value: row.values[row.groupIndex],
                            row: row,
                            rowIndex: rowIndex,
                            column: groupColumn,
                            columnIndex: groupCellOptions.columnIndex + 1,
                            columnIndices: options.columnIndices
                        })
                    }
                },
                _renderRows: function($table, options) {
                    var scrollingMode = this.option("scrolling.mode");
                    this.callBase($table, Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_9__["extend"])({
                        scrollingMode: scrollingMode
                    }, options));
                    this._checkRowKeys(options.change);
                    this._renderFreeSpaceRow($table);
                    if (!this._hasHeight) {
                        this.updateFreeSpaceRowHeight($table)
                    }
                },
                _renderDataRowByTemplate($table, options, dataRowTemplate) {
                    var row = options.row;
                    var rowOptions = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_9__["extend"])({
                        columns: options.columns
                    }, row);
                    var $tbody = this._createRow(row, "tbody");
                    $tbody.appendTo($table);
                    this.renderTemplate($tbody, dataRowTemplate, rowOptions, true, options.change);
                    this._rowPrepared($tbody, rowOptions, options.row)
                },
                _renderRow: function($table, options) {
                    var row = options.row;
                    var rowTemplate = this.option().rowTemplate;
                    var dataRowTemplate = this.option("dataRowTemplate");
                    if ("data" === row.rowType && dataRowTemplate) {
                        this._renderDataRowByTemplate($table, options, dataRowTemplate)
                    } else if (("data" === row.rowType || "group" === row.rowType) && !Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_7__["isDefined"])(row.groupIndex) && rowTemplate) {
                        this.renderTemplate($table, rowTemplate, Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_9__["extend"])({
                            columns: options.columns
                        }, row), true)
                    } else {
                        this.callBase($table, options)
                    }
                },
                _renderTable: function(options) {
                    var that = this;
                    var $table = that.callBase(options);
                    if (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_7__["isDefined"])(that.getTableElement())) {
                        that.setTableElement($table);
                        that._renderScrollable(true);
                        that.resizeCompleted.add((function resizeCompletedHandler() {
                            var scrollableInstance = that.getScrollable();
                            if (scrollableInstance && that.element().closest(Object(_core_utils_window__WEBPACK_IMPORTED_MODULE_3__["getWindow"])().document).length) {
                                that.resizeCompleted.remove(resizeCompletedHandler);
                                scrollableInstance._visibilityChanged(true)
                            }
                        }))
                    } else {
                        that._renderScrollable()
                    }
                    return $table
                },
                _createTable: function() {
                    var $table = this.callBase.apply(this, arguments);
                    if (this.option().rowTemplate || this.option().dataRowTemplate) {
                        $table.appendTo(this.component.$element())
                    }
                    return $table
                },
                _renderCore: function(change) {
                    var $element = this.element();
                    $element.addClass(this.addWidgetPrefix(ROWS_VIEW_CLASS)).toggleClass(this.addWidgetPrefix(NOWRAP_CLASS), !this.option("wordWrapEnabled"));
                    $element.toggleClass(EMPTY_CLASS, this._dataController.isEmpty());
                    this.setAria("role", "presentation", $element);
                    var $table = this._renderTable({
                        change: change
                    });
                    this._updateContent($table, change);
                    this.callBase(change);
                    this._lastColumnWidths = null
                },
                _getRows: function(change) {
                    return change && change.items || this._dataController.items()
                },
                _getCellOptions: function(options) {
                    var column = options.column;
                    var row = options.row;
                    var data = row.data;
                    var summaryCells = row && row.summaryCells;
                    var value = options.value;
                    var displayValue = _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_13__["default"].getDisplayValue(column, value, data, row.rowType);
                    var parameters = this.callBase(options);
                    parameters.value = value;
                    parameters.oldValue = options.oldValue;
                    parameters.displayValue = displayValue;
                    parameters.row = row;
                    parameters.key = row.key;
                    parameters.data = data;
                    parameters.rowType = row.rowType;
                    parameters.values = row.values;
                    parameters.text = !column.command ? _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_13__["default"].formatValue(displayValue, column) : "";
                    parameters.rowIndex = row.rowIndex;
                    parameters.summaryItems = summaryCells && summaryCells[options.columnIndex];
                    parameters.resized = column.resizedCallbacks;
                    if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_7__["isDefined"])(column.groupIndex) && !column.command) {
                        var groupingTextsOptions = this.option("grouping.texts");
                        var scrollingMode = this.option("scrolling.mode");
                        if ("virtual" !== scrollingMode && "infinite" !== scrollingMode) {
                            parameters.groupContinuesMessage = data && data.isContinuationOnNextPage && groupingTextsOptions && groupingTextsOptions.groupContinuesMessage;
                            parameters.groupContinuedMessage = data && data.isContinuation && groupingTextsOptions && groupingTextsOptions.groupContinuedMessage
                        }
                    }
                    return parameters
                },
                _setRowsOpacityCore: function($rows, visibleColumns, columnIndex, value) {
                    var columnsController = this._columnsController;
                    var columns = columnsController.getColumns();
                    var column = columns && columns[columnIndex];
                    var columnID = column && column.isBand && column.index;
                    Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_8__["each"])($rows, (function(rowIndex, row) {
                        if (!Object(_core_renderer__WEBPACK_IMPORTED_MODULE_2__["default"])(row).hasClass(GROUP_ROW_CLASS)) {
                            for (var i = 0; i < visibleColumns.length; i++) {
                                if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_7__["isNumeric"])(columnID) && columnsController.isParentBandColumn(visibleColumns[i].index, columnID) || visibleColumns[i].index === columnIndex) {
                                    $rows.eq(rowIndex).children().eq(i).css({
                                        opacity: value
                                    });
                                    if (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_7__["isNumeric"])(columnID)) {
                                        break
                                    }
                                }
                            }
                        }
                    }))
                },
                _getDevicePixelRatio: function() {
                    return Object(_core_utils_window__WEBPACK_IMPORTED_MODULE_3__["getWindow"])().devicePixelRatio
                },
                renderNoDataText: _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_13__["default"].renderNoDataText,
                getCellOptions: function(rowIndex, columnIdentifier) {
                    var rowOptions = this._dataController.items()[rowIndex];
                    var cellOptions;
                    var column;
                    if (rowOptions) {
                        if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_7__["isString"])(columnIdentifier)) {
                            column = this._columnsController.columnOption(columnIdentifier)
                        } else {
                            column = this._columnsController.getVisibleColumns()[columnIdentifier]
                        }
                        if (column) {
                            cellOptions = this._getCellOptions({
                                value: column.calculateCellValue(rowOptions.data),
                                rowIndex: rowOptions.rowIndex,
                                row: rowOptions,
                                column: column
                            })
                        }
                    }
                    return cellOptions
                },
                getRow: function(index) {
                    if (index >= 0) {
                        var rows = this._getRowElements();
                        if (rows.length > index) {
                            return Object(_core_renderer__WEBPACK_IMPORTED_MODULE_2__["default"])(rows[index])
                        }
                    }
                },
                updateFreeSpaceRowHeight: function($table) {
                    var dataController = this._dataController;
                    var itemCount = dataController.items(true).length;
                    var contentElement = this._findContentElement();
                    var freeSpaceRowElements = this._getFreeSpaceRowElements($table);
                    if (freeSpaceRowElements && contentElement && dataController.totalCount() >= 0) {
                        var isFreeSpaceRowVisible = false;
                        if (itemCount > 0) {
                            if (!this._hasHeight) {
                                var freeSpaceRowCount = dataController.pageSize() - itemCount;
                                var scrollingMode = this.option("scrolling.mode");
                                if (freeSpaceRowCount > 0 && dataController.pageCount() > 1 && "virtual" !== scrollingMode && "infinite" !== scrollingMode) {
                                    Object(_core_utils_style__WEBPACK_IMPORTED_MODULE_6__["setHeight"])(freeSpaceRowElements, freeSpaceRowCount * this._rowHeight);
                                    isFreeSpaceRowVisible = true
                                }
                                if (!isFreeSpaceRowVisible && $table) {
                                    Object(_core_utils_style__WEBPACK_IMPORTED_MODULE_6__["setHeight"])(freeSpaceRowElements, 0)
                                } else {
                                    freeSpaceRowElements.toggle(isFreeSpaceRowVisible)
                                }
                                this._updateLastRowBorder(isFreeSpaceRowVisible)
                            } else {
                                freeSpaceRowElements.hide();
                                Object(_core_utils_common__WEBPACK_IMPORTED_MODULE_5__["deferUpdate"])(() => {
                                    var scrollbarWidth = this.getScrollbarWidth(true);
                                    var elementHeightWithoutScrollbar = Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_1__["getHeight"])(this.element()) - scrollbarWidth;
                                    var contentHeight = Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_1__["getOuterHeight"])(contentElement);
                                    var showFreeSpaceRow = elementHeightWithoutScrollbar - contentHeight > 0;
                                    var rowsHeight = this._getRowsHeight(contentElement.children().first());
                                    var $tableElement = $table || this.getTableElements();
                                    var borderTopWidth = Math.ceil(parseFloat($tableElement.css("borderTopWidth")));
                                    var heightCorrection = this._getHeightCorrection();
                                    var resultHeight = elementHeightWithoutScrollbar - rowsHeight - borderTopWidth - heightCorrection;
                                    if (showFreeSpaceRow) {
                                        Object(_core_utils_common__WEBPACK_IMPORTED_MODULE_5__["deferRender"])(() => {
                                            freeSpaceRowElements.css("height", resultHeight);
                                            isFreeSpaceRowVisible = true;
                                            freeSpaceRowElements.show()
                                        })
                                    }
                                    Object(_core_utils_common__WEBPACK_IMPORTED_MODULE_5__["deferRender"])(() => this._updateLastRowBorder(isFreeSpaceRowVisible))
                                })
                            }
                        } else {
                            freeSpaceRowElements.css("height", 0);
                            freeSpaceRowElements.show();
                            this._updateLastRowBorder(true)
                        }
                    }
                },
                _getHeightCorrection: function() {
                    var isZoomedWebkit = _core_utils_browser__WEBPACK_IMPORTED_MODULE_18__["default"].webkit && this._getDevicePixelRatio() >= 2;
                    var isChromeLatest = _core_utils_browser__WEBPACK_IMPORTED_MODULE_18__["default"].chrome && _core_utils_browser__WEBPACK_IMPORTED_MODULE_18__["default"].version >= 91;
                    var hasExtraBorderTop = _core_utils_browser__WEBPACK_IMPORTED_MODULE_18__["default"].mozilla && _core_utils_browser__WEBPACK_IMPORTED_MODULE_18__["default"].version >= 70 && !this.option("showRowLines");
                    return isZoomedWebkit || hasExtraBorderTop || isChromeLatest ? 1 : 0
                },
                _columnOptionChanged: function(e) {
                    var optionNames = e.optionNames;
                    if (e.changeTypes.grouping) {
                        return
                    }
                    if (optionNames.width || optionNames.visibleWidth) {
                        this.callBase(e);
                        this._fireColumnResizedCallbacks()
                    }
                },
                getScrollable: function() {
                    return this._scrollable
                },
                init: function() {
                    var that = this;
                    var dataController = that.getController("data");
                    that.callBase();
                    that._editorFactoryController = that.getController("editorFactory");
                    that._rowHeight = 0;
                    that._scrollTop = 0;
                    that._scrollLeft = -1;
                    that._scrollRight = 0;
                    that._hasHeight = false;
                    dataController.loadingChanged.add((function(isLoading, messageText) {
                        that.setLoading(isLoading, messageText)
                    }));
                    dataController.dataSourceChanged.add((function() {
                        if (that._scrollLeft >= 0) {
                            that._handleScroll({
                                component: that.getScrollable(),
                                scrollOffset: {
                                    top: that._scrollTop,
                                    left: that._scrollLeft
                                }
                            })
                        }
                    }))
                },
                _handleDataChanged: function(change) {
                    switch (change.changeType) {
                        case "refresh":
                        case "prepend":
                        case "append":
                        case "update":
                            this.render(null, change);
                            break;
                        default:
                            this._update(change)
                    }
                },
                publicMethods: function() {
                    return ["isScrollbarVisible", "getTopVisibleRowData", "getScrollbarWidth", "getCellElement", "getRowElement", "getScrollable"]
                },
                contentWidth: function() {
                    return Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_1__["getWidth"])(this.element()) - this.getScrollbarWidth()
                },
                getScrollbarWidth: function(isHorizontal) {
                    var scrollableContainer = this._scrollableContainer && this._scrollableContainer.get(0);
                    var scrollbarWidth = 0;
                    if (scrollableContainer) {
                        if (!isHorizontal) {
                            scrollbarWidth = scrollableContainer.clientWidth ? scrollableContainer.offsetWidth - scrollableContainer.clientWidth : 0
                        } else {
                            scrollbarWidth = scrollableContainer.clientHeight ? scrollableContainer.offsetHeight - scrollableContainer.clientHeight : 0;
                            scrollbarWidth += (that = this, scrollable = that.getScrollable(), scrollable ? Math.ceil(parseFloat(Object(_core_renderer__WEBPACK_IMPORTED_MODULE_2__["default"])(scrollable.content()).css("paddingBottom"))) : 0)
                        }
                    }
                    var that, scrollable;
                    return scrollbarWidth > 0 ? scrollbarWidth : 0
                },
                _fireColumnResizedCallbacks: function() {
                    var lastColumnWidths = this._lastColumnWidths || [];
                    var columnWidths = [];
                    var columns = this.getColumns();
                    for (var i = 0; i < columns.length; i++) {
                        columnWidths[i] = columns[i].visibleWidth;
                        if (columns[i].resizedCallbacks && !Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_7__["isDefined"])(columns[i].groupIndex) && lastColumnWidths[i] !== columnWidths[i]) {
                            columns[i].resizedCallbacks.fire(columnWidths[i])
                        }
                    }
                    this._lastColumnWidths = columnWidths
                },
                _updateLastRowBorder: function(isFreeSpaceRowVisible) {
                    if (this.option("showBorders") && this.option("showRowLines") && !isFreeSpaceRowVisible) {
                        this.element().addClass(LAST_ROW_BORDER)
                    } else {
                        this.element().removeClass(LAST_ROW_BORDER)
                    }
                },
                _updateScrollable: function() {
                    var dxScrollable = _scroll_view_ui_scrollable__WEBPACK_IMPORTED_MODULE_15__["default"].getInstance(this.element());
                    if (dxScrollable) {
                        dxScrollable.update();
                        this._updateHorizontalScrollPosition()
                    }
                },
                _updateHorizontalScrollPosition: function() {
                    var scrollable = this.getScrollable();
                    var scrollLeft = scrollable && scrollable.scrollOffset().left;
                    var rtlEnabled = this.option("rtlEnabled");
                    if (rtlEnabled) {
                        var maxHorizontalScrollOffset = getMaxHorizontalScrollOffset(scrollable);
                        var scrollRight = maxHorizontalScrollOffset - scrollLeft;
                        if (scrollRight !== this._scrollRight) {
                            this._scrollLeft = maxHorizontalScrollOffset - this._scrollRight
                        }
                    }
                    if (this._scrollLeft >= 0 && scrollLeft !== this._scrollLeft) {
                        scrollable.scrollTo({
                            x: this._scrollLeft
                        })
                    }
                },
                _resizeCore: function() {
                    var that = this;
                    that._fireColumnResizedCallbacks();
                    that._updateRowHeight();
                    Object(_core_utils_common__WEBPACK_IMPORTED_MODULE_5__["deferRender"])((function() {
                        that._renderScrollable();
                        that.renderNoDataText();
                        that.updateFreeSpaceRowHeight();
                        Object(_core_utils_common__WEBPACK_IMPORTED_MODULE_5__["deferUpdate"])((function() {
                            that._updateScrollable()
                        }))
                    }))
                },
                scrollTo: function(location) {
                    var $element = this.element();
                    var dxScrollable = $element && _scroll_view_ui_scrollable__WEBPACK_IMPORTED_MODULE_15__["default"].getInstance($element);
                    if (dxScrollable) {
                        dxScrollable.scrollTo(location)
                    }
                },
                height: function(_height, hasHeight) {
                    var that = this;
                    var $element = this.element();
                    if (0 === arguments.length) {
                        return $element ? Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_1__["getOuterHeight"])($element, true) : 0
                    }
                    that._hasHeight = void 0 === hasHeight ? "auto" !== _height : hasHeight;
                    if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_7__["isDefined"])(_height) && $element) {
                        Object(_core_utils_style__WEBPACK_IMPORTED_MODULE_6__["setHeight"])($element, _height)
                    }
                },
                setLoading: function(isLoading, messageText) {
                    var loadPanel = this._loadPanel;
                    var dataController = this._dataController;
                    var loadPanelOptions = this.option("loadPanel") || {};
                    var animation = dataController.isLoaded() ? loadPanelOptions.animation : null;
                    var $element = this.element();
                    if (!Object(_core_utils_window__WEBPACK_IMPORTED_MODULE_3__["hasWindow"])()) {
                        return
                    }
                    if (!loadPanel && void 0 !== messageText && dataController.isLocalStore() && "auto" === loadPanelOptions.enabled && $element) {
                        this._renderLoadPanel($element, $element.parent());
                        loadPanel = this._loadPanel
                    }
                    if (loadPanel) {
                        var visibilityOptions = {
                            message: messageText || loadPanelOptions.text,
                            animation: animation,
                            visible: isLoading
                        };
                        if (isLoading) {
                            visibilityOptions.position = _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_13__["default"].calculateLoadPanelPosition($element)
                        }
                        clearTimeout(this._hideLoadingTimeoutID);
                        if (loadPanel.option("visible") && !isLoading) {
                            this._hideLoadingTimeoutID = setTimeout((function() {
                                loadPanel.option(visibilityOptions)
                            }), LOADPANEL_HIDE_TIMEOUT)
                        } else {
                            loadPanel.option(visibilityOptions)
                        }
                    }
                },
                setRowsOpacity: function(columnIndex, value) {
                    var $rows = this._getRowElements().not("." + GROUP_ROW_CLASS) || [];
                    this._setRowsOpacityCore($rows, this.getColumns(), columnIndex, value)
                },
                _getCellElementsCore: function(rowIndex) {
                    var $cells = this.callBase.apply(this, arguments);
                    if ($cells) {
                        var groupCellIndex = $cells.filter("." + GROUP_CELL_CLASS).index();
                        if (groupCellIndex >= 0 && $cells.length > groupCellIndex + 1) {
                            return $cells.slice(0, groupCellIndex + 1)
                        }
                    }
                    return $cells
                },
                _getBoundaryVisibleItemIndex: function(isTop, isFloor) {
                    var itemIndex = 0;
                    var prevOffset = 0;
                    var offset = 0;
                    var viewportBoundary = this._scrollTop;
                    var $contentElement = this._findContentElement();
                    var contentElementOffsetTop = $contentElement && $contentElement.offset().top;
                    var dataController = this.getController("data");
                    var items = dataController.items();
                    var tableElement = this.getTableElement();
                    if (items.length && tableElement) {
                        var rowElements = this._getRowElements(tableElement).filter(":visible");
                        if (!isTop) {
                            var height = this._hasHeight ? Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_1__["getOuterHeight"])(this.element()) : Object(_core_renderer__WEBPACK_IMPORTED_MODULE_2__["default"])(Object(_core_utils_window__WEBPACK_IMPORTED_MODULE_3__["getWindow"])()).outerHeight();
                            viewportBoundary += height
                        }
                        for (itemIndex = 0; itemIndex < items.length; itemIndex++) {
                            prevOffset = offset;
                            var $rowElement = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_2__["default"])(rowElements).eq(itemIndex);
                            if ($rowElement.length) {
                                offset = $rowElement.offset();
                                offset = (isTop ? offset.top : offset.top + Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_1__["getOuterHeight"])($rowElement)) - contentElementOffsetTop;
                                if (offset > viewportBoundary) {
                                    if (itemIndex) {
                                        if (isFloor || 2 * viewportBoundary < Math.round(offset + prevOffset)) {
                                            itemIndex--
                                        }
                                    }
                                    break
                                }
                            }
                        }
                        if (itemIndex && itemIndex === items.length) {
                            itemIndex--
                        }
                    }
                    return itemIndex
                },
                getTopVisibleItemIndex: function(isFloor) {
                    return this._getBoundaryVisibleItemIndex(true, isFloor)
                },
                getBottomVisibleItemIndex: function(isFloor) {
                    return this._getBoundaryVisibleItemIndex(false, isFloor)
                },
                getTopVisibleRowData: function() {
                    var itemIndex = this.getTopVisibleItemIndex();
                    var items = this._dataController.items();
                    if (items[itemIndex]) {
                        return items[itemIndex].data
                    }
                },
                _scrollToElement: function($element, offset) {
                    var scrollable = this.getScrollable();
                    scrollable && scrollable.scrollToElement($element, offset)
                },
                optionChanged: function(args) {
                    this.callBase(args);
                    switch (args.name) {
                        case "wordWrapEnabled":
                        case "showColumnLines":
                        case "showRowLines":
                        case "rowAlternationEnabled":
                        case "rowTemplate":
                        case "dataRowTemplate":
                        case "twoWayBindingEnabled":
                            this._invalidate(true, true);
                            args.handled = true;
                            break;
                        case "scrolling":
                            this._rowHeight = null;
                            this._tableElement = null;
                            args.handled = true;
                            break;
                        case "rtlEnabled":
                            this._rowHeight = null;
                            this._tableElement = null;
                            break;
                        case "loadPanel":
                            this._tableElement = null;
                            this._invalidate(true, "loadPanel.enabled" !== args.fullName);
                            args.handled = true;
                            break;
                        case "noDataText":
                            this.renderNoDataText();
                            args.handled = true
                    }
                },
                dispose: function() {
                    clearTimeout(this._hideLoadingTimeoutID);
                    this._scrollable && this._scrollable.dispose()
                },
                setScrollerSpacing: function() {},
                _restoreErrorRow: function() {}
            }
        }())
    }
};


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.search.js":
/*!*************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.search.js ***!
  \*************************************************************************/
/*! exports provided: searchModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "searchModule", function() { return searchModule; });
/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/renderer */ "./node_modules/devextreme/esm/core/renderer.js");
/* harmony import */ var _core_dom_adapter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/dom_adapter */ "./node_modules/devextreme/esm/core/dom_adapter.js");
/* harmony import */ var _core_utils_type__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/utils/type */ "./node_modules/devextreme/esm/core/utils/type.js");
/* harmony import */ var _core_utils_data__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/utils/data */ "./node_modules/devextreme/esm/core/utils/data.js");
/* harmony import */ var _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ui.grid_core.utils */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.utils.js");
/* harmony import */ var _localization_message__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../localization/message */ "./node_modules/devextreme/esm/localization/message.js");
/* harmony import */ var _data_query__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../data/query */ "./node_modules/devextreme/esm/data/query.js");
/**
 * DevExtreme (esm/ui/grid_core/ui.grid_core.search.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */







var SEARCH_PANEL_CLASS = "search-panel";
var SEARCH_TEXT_CLASS = "search-text";
var HEADER_PANEL_CLASS = "header-panel";
var FILTERING_TIMEOUT = 700;

function allowSearch(column) {
    return Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_2__["isDefined"])(column.allowSearch) ? column.allowSearch : column.allowFiltering
}

function parseValue(column, text) {
    var lookup = column.lookup;
    if (!column.parseValue) {
        return text
    }
    if (lookup) {
        return column.parseValue.call(lookup, text)
    }
    return column.parseValue(text)
}
var searchModule = {
    defaultOptions: function() {
        return {
            searchPanel: {
                visible: false,
                width: 160,
                placeholder: _localization_message__WEBPACK_IMPORTED_MODULE_5__["default"].format("dxDataGrid-searchPanelPlaceholder"),
                highlightSearchText: true,
                highlightCaseSensitive: false,
                text: "",
                searchVisibleColumnsOnly: false
            }
        }
    },
    extenders: {
        controllers: {
            data: {
                publicMethods: function() {
                    return this.callBase().concat(["searchByText"])
                },
                _calculateAdditionalFilter: function() {
                    var filter = this.callBase();
                    var searchFilter = function(that, text) {
                        var i;
                        var column;
                        var columns = that._columnsController.getColumns();
                        var searchVisibleColumnsOnly = that.option("searchPanel.searchVisibleColumnsOnly");
                        var lookup;
                        var filters = [];
                        if (!text) {
                            return null
                        }

                        function onQueryDone(items) {
                            var valueGetter = Object(_core_utils_data__WEBPACK_IMPORTED_MODULE_3__["compileGetter"])(lookup.valueExpr);
                            for (var _i = 0; _i < items.length; _i++) {
                                var value = valueGetter(items[_i]);
                                filters.push(column.createFilterExpression(value, null, "search"))
                            }
                        }
                        for (i = 0; i < columns.length; i++) {
                            column = columns[i];
                            if (searchVisibleColumnsOnly && !column.visible) {
                                continue
                            }
                            if (allowSearch(column) && column.calculateFilterExpression) {
                                lookup = column.lookup;
                                var filterValue = parseValue(column, text);
                                if (lookup && lookup.items) {
                                    Object(_data_query__WEBPACK_IMPORTED_MODULE_6__["default"])(lookup.items).filter(column.createFilterExpression.call({
                                        dataField: lookup.displayExpr,
                                        dataType: lookup.dataType,
                                        calculateFilterExpression: column.calculateFilterExpression
                                    }, filterValue, null, "search")).enumerate().done(onQueryDone)
                                } else if (void 0 !== filterValue) {
                                    filters.push(column.createFilterExpression(filterValue, null, "search"))
                                }
                            }
                        }
                        if (0 === filters.length) {
                            return ["!"]
                        }
                        return _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_4__["default"].combineFilters(filters, "or")
                    }(this, this.option("searchPanel.text"));
                    return _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_4__["default"].combineFilters([filter, searchFilter])
                },
                searchByText: function(text) {
                    this.option("searchPanel.text", text)
                },
                optionChanged: function(args) {
                    switch (args.fullName) {
                        case "searchPanel.text":
                        case "searchPanel":
                            this._applyFilter();
                            args.handled = true;
                            break;
                        default:
                            this.callBase(args)
                    }
                }
            }
        },
        views: {
            headerPanel: function() {
                var getSearchPanelOptions = function(that) {
                    return that.option("searchPanel")
                };
                return {
                    _getToolbarItems: function() {
                        var items = this.callBase();
                        return this._prepareSearchItem(items)
                    },
                    _prepareSearchItem: function(items) {
                        var that = this;
                        var dataController = that.getController("data");
                        var searchPanelOptions = getSearchPanelOptions(that);
                        if (searchPanelOptions && searchPanelOptions.visible) {
                            var toolbarItem = {
                                template: function(data, index, container) {
                                    var $search = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>").addClass(that.addWidgetPrefix(SEARCH_PANEL_CLASS)).appendTo(container);
                                    that.getController("editorFactory").createEditor($search, {
                                        width: searchPanelOptions.width,
                                        placeholder: searchPanelOptions.placeholder,
                                        parentType: "searchPanel",
                                        value: that.option("searchPanel.text"),
                                        updateValueTimeout: FILTERING_TIMEOUT,
                                        setValue: function(value) {
                                            dataController.searchByText(value)
                                        },
                                        editorOptions: {
                                            inputAttr: {
                                                "aria-label": _localization_message__WEBPACK_IMPORTED_MODULE_5__["default"].format("".concat(that.component.NAME, "-ariaSearchInGrid"))
                                            }
                                        }
                                    });
                                    that.resize()
                                },
                                name: "searchPanel",
                                location: "after",
                                locateInMenu: "never",
                                sortIndex: 40
                            };
                            items.push(toolbarItem)
                        }
                        return items
                    },
                    getSearchTextEditor: function() {
                        var that = this;
                        var $element = that.element();
                        var $searchPanel = $element.find("." + that.addWidgetPrefix(SEARCH_PANEL_CLASS)).filter((function() {
                            return Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(this).closest("." + that.addWidgetPrefix(HEADER_PANEL_CLASS)).is($element)
                        }));
                        if ($searchPanel.length) {
                            return $searchPanel.dxTextBox("instance")
                        }
                        return null
                    },
                    isVisible: function() {
                        var searchPanelOptions = getSearchPanelOptions(this);
                        return this.callBase() || searchPanelOptions && searchPanelOptions.visible
                    },
                    optionChanged: function(args) {
                        if ("searchPanel" === args.name) {
                            if ("searchPanel.text" === args.fullName) {
                                var editor = this.getSearchTextEditor();
                                if (editor) {
                                    editor.option("value", args.value)
                                }
                            } else {
                                this._invalidate()
                            }
                            args.handled = true
                        } else {
                            this.callBase(args)
                        }
                    }
                }
            }(),
            rowsView: {
                init: function() {
                    this.callBase.apply(this, arguments);
                    this._searchParams = []
                },
                _getFormattedSearchText: function(column, searchText) {
                    var value = parseValue(column, searchText);
                    var formatOptions = _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_4__["default"].getFormatOptionsByColumn(column, "search");
                    return _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_4__["default"].formatValue(value, formatOptions)
                },
                _getStringNormalizer: function() {
                    var isCaseSensitive = this.option("searchPanel.highlightCaseSensitive");
                    return function(str) {
                        return isCaseSensitive ? str : str.toLowerCase()
                    }
                },
                _findHighlightingTextNodes: function(column, cellElement, searchText) {
                    var _$items;
                    var $parent = cellElement.parent();
                    var $items;
                    var stringNormalizer = this._getStringNormalizer();
                    var normalizedSearchText = stringNormalizer(searchText);
                    var resultTextNodes = [];
                    if (!$parent.length) {
                        $parent = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>").append(cellElement)
                    } else if (column) {
                        if (column.groupIndex >= 0 && !column.showWhenGrouped) {
                            $items = cellElement
                        } else {
                            var columnIndex = this._columnsController.getVisibleIndex(column.index);
                            $items = $parent.children("td").eq(columnIndex).find("*")
                        }
                    }
                    $items = null !== (_$items = $items) && void 0 !== _$items && _$items.length ? $items : $parent.find("*");
                    $items.each((function(_, element) {
                        var $contents = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(element).contents();
                        for (var i = 0; i < $contents.length; i++) {
                            var node = $contents.get(i);
                            if (3 === node.nodeType) {
                                var normalizedText = stringNormalizer(node.textContent || node.nodeValue);
                                if (normalizedText.indexOf(normalizedSearchText) > -1) {
                                    resultTextNodes.push(node)
                                }
                            }
                        }
                    }));
                    return resultTextNodes
                },
                _highlightSearchTextCore: function($textNode, searchText) {
                    var $searchTextSpan = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])("<span>").addClass(this.addWidgetPrefix(SEARCH_TEXT_CLASS));
                    var text = $textNode.text();
                    var firstContentElement = $textNode[0];
                    var stringNormalizer = this._getStringNormalizer();
                    var index = stringNormalizer(text).indexOf(stringNormalizer(searchText));
                    if (index >= 0) {
                        if (firstContentElement.textContent) {
                            firstContentElement.textContent = text.substr(0, index)
                        } else {
                            firstContentElement.nodeValue = text.substr(0, index)
                        }
                        $textNode.after($searchTextSpan.text(text.substr(index, searchText.length)));
                        $textNode = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(_core_dom_adapter__WEBPACK_IMPORTED_MODULE_1__["default"].createTextNode(text.substr(index + searchText.length))).insertAfter($searchTextSpan);
                        return this._highlightSearchTextCore($textNode, searchText)
                    }
                },
                _highlightSearchText: function(cellElement, isEquals, column) {
                    var that = this;
                    var stringNormalizer = this._getStringNormalizer();
                    var searchText = that.option("searchPanel.text");
                    if (isEquals && column) {
                        searchText = searchText && that._getFormattedSearchText(column, searchText)
                    }
                    if (searchText && that.option("searchPanel.highlightSearchText")) {
                        var textNodes = that._findHighlightingTextNodes(column, cellElement, searchText);
                        textNodes.forEach(textNode => {
                            if (isEquals) {
                                if (stringNormalizer(Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(textNode).text()) === stringNormalizer(searchText)) {
                                    Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(textNode).replaceWith(Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])("<span>").addClass(that.addWidgetPrefix(SEARCH_TEXT_CLASS)).text(Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(textNode).text()))
                                }
                            } else {
                                that._highlightSearchTextCore(Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(textNode), searchText)
                            }
                        })
                    }
                },
                _renderCore: function() {
                    this.callBase.apply(this, arguments);
                    if (this.option().rowTemplate || this.option("dataRowTemplate")) {
                        if (this.option("templatesRenderAsynchronously")) {
                            clearTimeout(this._highlightTimer);
                            this._highlightTimer = setTimeout(function() {
                                this._highlightSearchText(this.getTableElement())
                            }.bind(this))
                        } else {
                            this._highlightSearchText(this.getTableElement())
                        }
                    }
                },
                _updateCell: function($cell, parameters) {
                    var column = parameters.column;
                    var dataType = column.lookup && column.lookup.dataType || column.dataType;
                    var isEquals = "string" !== dataType;
                    if (allowSearch(column) && !parameters.isOnForm) {
                        if (this.option("templatesRenderAsynchronously")) {
                            if (!this._searchParams.length) {
                                clearTimeout(this._highlightTimer);
                                this._highlightTimer = setTimeout(function() {
                                    this._searchParams.forEach(function(params) {
                                        this._highlightSearchText.apply(this, params)
                                    }.bind(this));
                                    this._searchParams = []
                                }.bind(this))
                            }
                            this._searchParams.push([$cell, isEquals, column])
                        } else {
                            this._highlightSearchText($cell, isEquals, column)
                        }
                    }
                    this.callBase($cell, parameters)
                },
                dispose: function() {
                    clearTimeout(this._highlightTimer);
                    this.callBase()
                }
            }
        }
    }
};


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.selection.js":
/*!****************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.selection.js ***!
  \****************************************************************************/
/*! exports provided: selectionModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "selectionModule", function() { return selectionModule; });
/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/renderer */ "./node_modules/devextreme/esm/core/renderer.js");
/* harmony import */ var _events_core_events_engine__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../events/core/events_engine */ "./node_modules/devextreme/esm/events/core/events_engine.js");
/* harmony import */ var _data_grid_ui_data_grid_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../data_grid/ui.data_grid.core */ "./node_modules/devextreme/esm/ui/data_grid/ui.data_grid.core.js");
/* harmony import */ var _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ui.grid_core.utils */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.utils.js");
/* harmony import */ var _core_utils_type__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/utils/type */ "./node_modules/devextreme/esm/core/utils/type.js");
/* harmony import */ var _core_utils_iterator__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core/utils/iterator */ "./node_modules/devextreme/esm/core/utils/iterator.js");
/* harmony import */ var _core_utils_extend__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../core/utils/extend */ "./node_modules/devextreme/esm/core/utils/extend.js");
/* harmony import */ var _core_utils_support__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../core/utils/support */ "./node_modules/devextreme/esm/core/utils/support.js");
/* harmony import */ var _events_click__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../events/click */ "./node_modules/devextreme/esm/events/click.js");
/* harmony import */ var _localization_message__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../localization/message */ "./node_modules/devextreme/esm/localization/message.js");
/* harmony import */ var _events_utils_index__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../events/utils/index */ "./node_modules/devextreme/esm/events/utils/index.js");
/* harmony import */ var _events_hold__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../events/hold */ "./node_modules/devextreme/esm/events/hold.js");
/* harmony import */ var _selection_selection__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../selection/selection */ "./node_modules/devextreme/esm/ui/selection/selection.js");
/* harmony import */ var _core_utils_deferred__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../core/utils/deferred */ "./node_modules/devextreme/esm/core/utils/deferred.js");
/* harmony import */ var _widget_ui_errors__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../widget/ui.errors */ "./node_modules/devextreme/esm/ui/widget/ui.errors.js");
/**
 * DevExtreme (esm/ui/grid_core/ui.grid_core.selection.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */















var EDITOR_CELL_CLASS = "dx-editor-cell";
var ROW_CLASS = "dx-row";
var ROW_SELECTION_CLASS = "dx-selection";
var SELECT_CHECKBOX_CLASS = "dx-select-checkbox";
var CHECKBOXES_HIDDEN_CLASS = "dx-select-checkboxes-hidden";
var COMMAND_SELECT_CLASS = "dx-command-select";
var SELECTION_DISABLED_CLASS = "dx-selection-disabled";
var DATA_ROW_CLASS = "dx-data-row";
var SHOW_CHECKBOXES_MODE = "selection.showCheckBoxesMode";
var SELECTION_MODE = "selection.mode";
var processLongTap = function(that, dxEvent) {
    var selectionController = that.getController("selection");
    var rowsView = that.getView("rowsView");
    var $row = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(dxEvent.target).closest("." + DATA_ROW_CLASS);
    var rowIndex = rowsView.getRowIndex($row);
    if (rowIndex < 0) {
        return
    }
    if ("onLongTap" === that.option(SHOW_CHECKBOXES_MODE)) {
        if (selectionController.isSelectionWithCheckboxes()) {
            selectionController.stopSelectionWithCheckboxes()
        } else {
            selectionController.startSelectionWithCheckboxes()
        }
    } else {
        if ("onClick" === that.option(SHOW_CHECKBOXES_MODE)) {
            selectionController.startSelectionWithCheckboxes()
        }
        if ("always" !== that.option(SHOW_CHECKBOXES_MODE)) {
            selectionController.changeItemSelection(rowIndex, {
                control: true
            })
        }
    }
};
var SelectionController = _data_grid_ui_data_grid_core__WEBPACK_IMPORTED_MODULE_2__["default"].Controller.inherit(function() {
    var selectionCellTemplate = (container, options) => {
        var component = options.component;
        var rowsView = component.getView("rowsView");
        if (component.option("renderAsync") && !component.option("selection.deferred")) {
            options.value = component.isRowSelected(options.row.key)
        }
        rowsView.renderSelectCheckBoxContainer(Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(container), options)
    };
    var selectionHeaderTemplate = (container, options) => {
        var column = options.column;
        var $cellElement = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(container);
        var columnHeadersView = options.component.getView("columnHeadersView");
        $cellElement.addClass(EDITOR_CELL_CLASS);
        columnHeadersView._renderSelectAllCheckBox($cellElement, column);
        columnHeadersView._attachSelectAllCheckBoxClickEvent($cellElement)
    };
    return {
        init: function() {
            var {
                deferred: deferred,
                selectAllMode: selectAllMode,
                mode: mode
            } = this.option("selection") || {};
            if ("infinite" === this.option("scrolling.mode") && !deferred && "multiple" === mode && "allPages" === selectAllMode) {
                _widget_ui_errors__WEBPACK_IMPORTED_MODULE_14__["default"].log("W1018")
            }
            this._dataController = this.getController("data");
            this._selectionMode = mode;
            this._isSelectionWithCheckboxes = false;
            this._selection = this._createSelection();
            this._updateSelectColumn();
            this.createAction("onSelectionChanged", {
                excludeValidators: ["disabled", "readOnly"]
            });
            this._dataController && this._dataController.pushed.add(this._handleDataPushed.bind(this))
        },
        _handleDataPushed: function(changes) {
            var removedKeys = changes.filter(change => "remove" === change.type).map(change => change.key);
            removedKeys.length && this.deselectRows(removedKeys)
        },
        _getSelectionConfig: function() {
            var dataController = this._dataController;
            var columnsController = this.getController("columns");
            var selectionOptions = this.option("selection") || {};
            var deferred = selectionOptions.deferred;
            var scrollingMode = this.option("scrolling.mode");
            var virtualPaging = "virtual" === scrollingMode || "infinite" === scrollingMode;
            var allowSelectAll = this.option("selection.allowSelectAll");
            var legacyScrollingMode = this.option("scrolling.legacyMode");
            return {
                selectedKeys: this.option("selectedRowKeys"),
                mode: this._selectionMode,
                deferred: deferred,
                maxFilterLengthInRequest: selectionOptions.maxFilterLengthInRequest,
                selectionFilter: this.option("selectionFilter"),
                ignoreDisabledItems: true,
                allowLoadByRange: function() {
                    var hasGroupColumns = columnsController.getGroupColumns().length > 0;
                    return virtualPaging && !legacyScrollingMode && !hasGroupColumns && allowSelectAll && !deferred
                },
                key: function() {
                    return null === dataController || void 0 === dataController ? void 0 : dataController.key()
                },
                keyOf: function(item) {
                    return null === dataController || void 0 === dataController ? void 0 : dataController.keyOf(item)
                },
                dataFields: function() {
                    var _dataController$dataS;
                    return null === (_dataController$dataS = dataController.dataSource()) || void 0 === _dataController$dataS ? void 0 : _dataController$dataS.select()
                },
                load: function(options) {
                    var _dataController$dataS2;
                    return (null === (_dataController$dataS2 = dataController.dataSource()) || void 0 === _dataController$dataS2 ? void 0 : _dataController$dataS2.load(options)) || (new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_13__["Deferred"]).resolve([])
                },
                plainItems: function() {
                    return dataController.items(true)
                },
                isItemSelected: function(item) {
                    return item.selected
                },
                isSelectableItem: function(item) {
                    return "data" === (null === item || void 0 === item ? void 0 : item.rowType) && !item.isNewRow
                },
                getItemData: function(item) {
                    return (null === item || void 0 === item ? void 0 : item.oldData) || (null === item || void 0 === item ? void 0 : item.data) || item
                },
                filter: function() {
                    return dataController.getCombinedFilter(deferred)
                },
                totalCount: () => dataController.totalCount(),
                getLoadOptions: function(loadItemIndex, focusedItemIndex, shiftItemIndex) {
                    var _dataController$dataS3, _dataController$dataS4;
                    var {
                        sort: sort,
                        filter: filter
                    } = null !== (_dataController$dataS3 = null === (_dataController$dataS4 = dataController.dataSource()) || void 0 === _dataController$dataS4 ? void 0 : _dataController$dataS4.lastLoadOptions()) && void 0 !== _dataController$dataS3 ? _dataController$dataS3 : {};
                    var minIndex = Math.min(loadItemIndex, focusedItemIndex);
                    var maxIndex = Math.max(loadItemIndex, focusedItemIndex);
                    if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_4__["isDefined"])(shiftItemIndex)) {
                        minIndex = Math.min(shiftItemIndex, minIndex);
                        maxIndex = Math.max(shiftItemIndex, maxIndex)
                    }
                    var take = maxIndex - minIndex + 1;
                    return {
                        skip: minIndex,
                        take: take,
                        filter: filter,
                        sort: sort
                    }
                },
                onSelectionChanged: this._updateSelectedItems.bind(this)
            }
        },
        _updateSelectColumn: function() {
            var columnsController = this.getController("columns");
            var isSelectColumnVisible = this.isSelectColumnVisible();
            columnsController.addCommandColumn({
                type: "selection",
                command: "select",
                visible: isSelectColumnVisible,
                visibleIndex: -1,
                dataType: "boolean",
                alignment: "center",
                cssClass: COMMAND_SELECT_CLASS,
                width: "auto",
                cellTemplate: selectionCellTemplate,
                headerCellTemplate: selectionHeaderTemplate
            });
            columnsController.columnOption("command:select", "visible", isSelectColumnVisible)
        },
        _createSelection: function() {
            var options = this._getSelectionConfig();
            return new _selection_selection__WEBPACK_IMPORTED_MODULE_12__["default"](options)
        },
        _fireSelectionChanged: function(options) {
            var argument = this.option("selection.deferred") ? {
                selectionFilter: this.option("selectionFilter")
            } : {
                selectedRowKeys: this.option("selectedRowKeys")
            };
            this.selectionChanged.fire(argument);
            if (options) {
                this.executeAction("onSelectionChanged", options)
            }
        },
        _updateCheckboxesState: function(options) {
            var isDeferredMode = options.isDeferredMode;
            var selectionFilter = options.selectionFilter;
            var selectedItemKeys = options.selectedItemKeys;
            var removedItemKeys = options.removedItemKeys;
            if ("onClick" === this.option(SHOW_CHECKBOXES_MODE)) {
                if (isDeferredMode ? selectionFilter && function(that, selectionFilter) {
                        var keyIndex = 0;
                        var store = that._dataController.store();
                        var key = store && store.key();
                        var isComplexKey = Array.isArray(key);
                        if (!selectionFilter.length) {
                            return false
                        }
                        if (isComplexKey && Array.isArray(selectionFilter[0]) && "and" === selectionFilter[1]) {
                            for (var i = 0; i < selectionFilter.length; i++) {
                                if (Array.isArray(selectionFilter[i])) {
                                    if (selectionFilter[i][0] !== key[keyIndex] || "=" !== selectionFilter[i][1]) {
                                        return true
                                    }
                                    keyIndex++
                                }
                            }
                            return false
                        }
                        return key !== selectionFilter[0]
                    }(this, selectionFilter) : selectedItemKeys.length > 1) {
                    this.startSelectionWithCheckboxes()
                } else if (isDeferredMode ? selectionFilter && !selectionFilter.length : 0 === selectedItemKeys.length && removedItemKeys.length) {
                    this.stopSelectionWithCheckboxes()
                }
            }
        },
        _updateSelectedItems: function(args) {
            var selectionChangedOptions;
            var isDeferredMode = this.option("selection.deferred");
            var selectionFilter = this._selection.selectionFilter();
            var dataController = this._dataController;
            var items = dataController.items();
            if (!items) {
                return
            }
            var isSelectionWithCheckboxes = this.isSelectionWithCheckboxes();
            var changedItemIndexes = this.getChangedItemIndexes(items);
            this._updateCheckboxesState({
                selectedItemKeys: args.selectedItemKeys,
                removedItemKeys: args.removedItemKeys,
                selectionFilter: selectionFilter,
                isDeferredMode: isDeferredMode
            });
            if (changedItemIndexes.length || isSelectionWithCheckboxes !== this.isSelectionWithCheckboxes()) {
                dataController.updateItems({
                    changeType: "updateSelection",
                    itemIndexes: changedItemIndexes
                })
            }
            if (isDeferredMode) {
                this.option("selectionFilter", selectionFilter);
                selectionChangedOptions = {}
            } else if (args.addedItemKeys.length || args.removedItemKeys.length) {
                this._selectedItemsInternalChange = true;
                this.option("selectedRowKeys", args.selectedItemKeys.slice(0));
                this._selectedItemsInternalChange = false;
                selectionChangedOptions = {
                    selectedRowsData: args.selectedItems.slice(0),
                    selectedRowKeys: args.selectedItemKeys.slice(0),
                    currentSelectedRowKeys: args.addedItemKeys.slice(0),
                    currentDeselectedRowKeys: args.removedItemKeys.slice(0)
                }
            }
            this._fireSelectionChanged(selectionChangedOptions)
        },
        getChangedItemIndexes: function(items) {
            var itemIndexes = [];
            var isDeferredSelection = this.option("selection.deferred");
            for (var i = 0, length = items.length; i < length; i++) {
                var row = items[i];
                var isItemSelected = this.isRowSelected(isDeferredSelection ? row.data : row.key);
                if (this._selection.isDataItem(row) && row.isSelected !== isItemSelected) {
                    itemIndexes.push(i)
                }
            }
            return itemIndexes
        },
        callbackNames: function() {
            return ["selectionChanged"]
        },
        optionChanged: function(args) {
            this.callBase(args);
            switch (args.name) {
                case "selection":
                    var oldSelectionMode = this._selectionMode;
                    this.init();
                    if ("selection.showCheckBoxesMode" !== args.fullName) {
                        var selectionMode = this._selectionMode;
                        var selectedRowKeys = this.option("selectedRowKeys");
                        if (oldSelectionMode !== selectionMode) {
                            if ("single" === selectionMode) {
                                if (selectedRowKeys.length > 1) {
                                    selectedRowKeys = [selectedRowKeys[0]]
                                }
                            } else if ("multiple" !== selectionMode) {
                                selectedRowKeys = []
                            }
                        }
                        this.selectRows(selectedRowKeys).always(() => {
                            this._fireSelectionChanged()
                        })
                    }
                    this.getController("columns").updateColumns();
                    args.handled = true;
                    break;
                case "selectionFilter":
                    this._selection.selectionFilter(args.value);
                    args.handled = true;
                    break;
                case "selectedRowKeys":
                    var value = args.value || [];
                    if (Array.isArray(value) && !this._selectedItemsInternalChange && (this.component.getDataSource() || !value.length)) {
                        this.selectRows(value)
                    }
                    args.handled = true
            }
        },
        publicMethods: function() {
            return ["selectRows", "deselectRows", "selectRowsByIndexes", "getSelectedRowKeys", "getSelectedRowsData", "clearSelection", "selectAll", "deselectAll", "startSelectionWithCheckboxes", "stopSelectionWithCheckboxes", "isRowSelected"]
        },
        isRowSelected: function(arg) {
            return this._selection.isItemSelected(arg)
        },
        isSelectColumnVisible: function() {
            return "multiple" === this.option(SELECTION_MODE) && ("always" === this.option(SHOW_CHECKBOXES_MODE) || "onClick" === this.option(SHOW_CHECKBOXES_MODE) || this._isSelectionWithCheckboxes)
        },
        _isOnePageSelectAll: function() {
            return "page" === this.option("selection.selectAllMode")
        },
        isSelectAll: function() {
            return this._selection.getSelectAllState(this._isOnePageSelectAll())
        },
        selectAll: function() {
            if ("onClick" === this.option(SHOW_CHECKBOXES_MODE)) {
                this.startSelectionWithCheckboxes()
            }
            return this._selection.selectAll(this._isOnePageSelectAll())
        },
        deselectAll: function() {
            return this._selection.deselectAll(this._isOnePageSelectAll())
        },
        clearSelection: function() {
            return this.selectedItemKeys([])
        },
        refresh: function() {
            var selectedRowKeys = this.option("selectedRowKeys") || [];
            if (!this.option("selection.deferred") && selectedRowKeys.length) {
                return this.selectedItemKeys(selectedRowKeys)
            }
            return (new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_13__["Deferred"]).resolve().promise()
        },
        selectedItemKeys: function(value, preserve, isDeselect, isSelectAll) {
            return this._selection.selectedItemKeys(value, preserve, isDeselect, isSelectAll)
        },
        getSelectedRowKeys: function() {
            return this._selection.getSelectedItemKeys()
        },
        selectRows: function(keys, preserve) {
            return this.selectedItemKeys(keys, preserve)
        },
        deselectRows: function(keys) {
            return this.selectedItemKeys(keys, true, true)
        },
        selectRowsByIndexes: function(indexes) {
            var items = this._dataController.items();
            var keys = [];
            if (!Array.isArray(indexes)) {
                indexes = Array.prototype.slice.call(arguments, 0)
            }
            Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_5__["each"])(indexes, (function() {
                var item = items[this];
                if (item && "data" === item.rowType) {
                    keys.push(item.key)
                }
            }));
            return this.selectRows(keys)
        },
        getSelectedRowsData: function() {
            return this._selection.getSelectedItems()
        },
        changeItemSelection: function(visibleItemIndex, keys, setFocusOnly) {
            keys = keys || {};
            if (this.isSelectionWithCheckboxes()) {
                keys.control = true
            }
            var loadedItemIndex = visibleItemIndex + this._dataController.getRowIndexOffset() - this._dataController.getRowIndexOffset(true);
            return this._selection.changeItemSelection(loadedItemIndex, keys, setFocusOnly)
        },
        focusedItemIndex: function(itemIndex) {
            if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_4__["isDefined"])(itemIndex)) {
                this._selection._focusedItemIndex = itemIndex
            } else {
                return this._selection._focusedItemIndex
            }
        },
        isSelectionWithCheckboxes: function() {
            return "multiple" === this.option(SELECTION_MODE) && ("always" === this.option(SHOW_CHECKBOXES_MODE) || this._isSelectionWithCheckboxes)
        },
        startSelectionWithCheckboxes: function() {
            if ("multiple" === this.option(SELECTION_MODE) && !this.isSelectionWithCheckboxes()) {
                this._isSelectionWithCheckboxes = true;
                this._updateSelectColumn();
                return true
            }
            return false
        },
        stopSelectionWithCheckboxes: function() {
            if (this._isSelectionWithCheckboxes) {
                this._isSelectionWithCheckboxes = false;
                this._updateSelectColumn();
                return true
            }
            return false
        }
    }
}());
var selectionModule = {
    defaultOptions: function() {
        return {
            selection: {
                mode: "none",
                showCheckBoxesMode: "onClick",
                allowSelectAll: true,
                selectAllMode: "allPages",
                maxFilterLengthInRequest: 1500,
                deferred: false
            },
            selectionFilter: [],
            selectedRowKeys: []
        }
    },
    controllers: {
        selection: SelectionController
    },
    extenders: {
        controllers: {
            data: {
                init: function() {
                    var selectionController = this.getController("selection");
                    var isDeferredMode = this.option("selection.deferred");
                    this.callBase.apply(this, arguments);
                    if (isDeferredMode) {
                        selectionController._updateCheckboxesState({
                            isDeferredMode: true,
                            selectionFilter: this.option("selectionFilter")
                        })
                    }
                },
                _loadDataSource: function() {
                    var that = this;
                    return that.callBase().done((function() {
                        that.getController("selection").refresh()
                    }))
                },
                _processDataItem: function(item, options) {
                    var that = this;
                    var selectionController = that.getController("selection");
                    var hasSelectColumn = selectionController.isSelectColumnVisible();
                    var isDeferredSelection = options.isDeferredSelection = void 0 === options.isDeferredSelection ? this.option("selection.deferred") : options.isDeferredSelection;
                    var dataItem = this.callBase.apply(this, arguments);
                    dataItem.isSelected = selectionController.isRowSelected(isDeferredSelection ? dataItem.data : dataItem.key);
                    if (hasSelectColumn && dataItem.values) {
                        for (var i = 0; i < options.visibleColumns.length; i++) {
                            if ("select" === options.visibleColumns[i].command) {
                                dataItem.values[i] = dataItem.isSelected;
                                break
                            }
                        }
                    }
                    return dataItem
                },
                refresh: function(options) {
                    var that = this;
                    var d = new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_13__["Deferred"];
                    this.callBase.apply(this, arguments).done((function() {
                        if (!options || options.selection) {
                            that.getController("selection").refresh().done(d.resolve).fail(d.reject)
                        } else {
                            d.resolve()
                        }
                    })).fail(d.reject);
                    return d.promise()
                },
                _handleDataChanged: function(e) {
                    this.callBase.apply(this, arguments);
                    if ((!e || "refresh" === e.changeType) && !this._repaintChangesOnly) {
                        this.getController("selection").focusedItemIndex(-1)
                    }
                },
                _applyChange: function(change) {
                    if (change && "updateSelection" === change.changeType) {
                        change.items.forEach((item, index) => {
                            var currentItem = this._items[index];
                            if (currentItem) {
                                currentItem.isSelected = item.isSelected;
                                currentItem.values = item.values
                            }
                        });
                        return
                    }
                    return this.callBase.apply(this, arguments)
                },
                _endUpdateCore: function() {
                    var changes = this._changes;
                    var isUpdateSelection = changes.length > 1 && changes.every(change => "updateSelection" === change.changeType);
                    if (isUpdateSelection) {
                        var itemIndexes = changes.map(change => change.itemIndexes || []).reduce((a, b) => a.concat(b));
                        this._changes = [{
                            changeType: "updateSelection",
                            itemIndexes: itemIndexes
                        }]
                    }
                    this.callBase.apply(this, arguments)
                }
            },
            contextMenu: {
                _contextMenuPrepared: function(options) {
                    var dxEvent = options.event;
                    if (dxEvent.originalEvent && "dxhold" !== dxEvent.originalEvent.type || options.items && options.items.length > 0) {
                        return
                    }
                    processLongTap(this, dxEvent)
                }
            }
        },
        views: {
            columnHeadersView: {
                init: function() {
                    this.callBase();
                    this.getController("selection").selectionChanged.add(this._updateSelectAllValue.bind(this))
                },
                _updateSelectAllValue: function() {
                    var $element = this.element();
                    var $editor = $element && $element.find("." + SELECT_CHECKBOX_CLASS);
                    if ($element && $editor.length && "multiple" === this.option("selection.mode")) {
                        var selectAllValue = this.getController("selection").isSelectAll();
                        var hasSelection = false !== selectAllValue;
                        var isVisible = this.option("selection.allowSelectAll") ? !this.getController("data").isEmpty() : hasSelection;
                        $editor.dxCheckBox("instance").option({
                            visible: isVisible,
                            value: selectAllValue
                        })
                    }
                },
                _handleDataChanged: function(e) {
                    this.callBase(e);
                    if (!e || "refresh" === e.changeType) {
                        this._updateSelectAllValue()
                    }
                },
                _renderSelectAllCheckBox: function($container, column) {
                    var that = this;
                    var selectionController = that.getController("selection");
                    var isEmptyData = that.getController("data").isEmpty();
                    var groupElement = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>").appendTo($container).addClass(SELECT_CHECKBOX_CLASS);
                    that.setAria("label", _localization_message__WEBPACK_IMPORTED_MODULE_9__["default"].format("dxDataGrid-ariaSelectAll"), $container);
                    that.getController("editorFactory").createEditor(groupElement, Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_6__["extend"])({}, column, {
                        parentType: "headerRow",
                        dataType: "boolean",
                        value: selectionController.isSelectAll(),
                        editorOptions: {
                            visible: !isEmptyData && (that.option("selection.allowSelectAll") || false !== selectionController.isSelectAll())
                        },
                        tabIndex: that.option("useLegacyKeyboardNavigation") ? -1 : that.option("tabIndex") || 0,
                        setValue: function(value, e) {
                            var allowSelectAll = that.option("selection.allowSelectAll");
                            e.component.option("visible", allowSelectAll || false !== e.component.option("value"));
                            if (!e.event || selectionController.isSelectAll() === value) {
                                return
                            }
                            if (e.value && !allowSelectAll) {
                                e.component.option("value", false)
                            } else {
                                e.value ? selectionController.selectAll() : selectionController.deselectAll()
                            }
                            e.event.preventDefault()
                        }
                    }));
                    return groupElement
                },
                _attachSelectAllCheckBoxClickEvent: function($element) {
                    _events_core_events_engine__WEBPACK_IMPORTED_MODULE_1__["default"].on($element, _events_click__WEBPACK_IMPORTED_MODULE_8__["name"], this.createAction((function(e) {
                        var event = e.event;
                        if (!Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(event.target).closest("." + SELECT_CHECKBOX_CLASS).length) {
                            _events_core_events_engine__WEBPACK_IMPORTED_MODULE_1__["default"].trigger(Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(event.currentTarget).children("." + SELECT_CHECKBOX_CLASS), _events_click__WEBPACK_IMPORTED_MODULE_8__["name"])
                        }
                        event.preventDefault()
                    })))
                }
            },
            rowsView: {
                renderSelectCheckBoxContainer: function($container, options) {
                    if ("data" === options.rowType && !options.row.isNewRow) {
                        $container.addClass(EDITOR_CELL_CLASS);
                        this._attachCheckBoxClickEvent($container);
                        this.setAria("label", _localization_message__WEBPACK_IMPORTED_MODULE_9__["default"].format("dxDataGrid-ariaSelectRow"), $container);
                        this._renderSelectCheckBox($container, options)
                    } else {
                        _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_3__["default"].setEmptyText($container)
                    }
                },
                _renderSelectCheckBox: function(container, options) {
                    var groupElement = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])("<div>").addClass(SELECT_CHECKBOX_CLASS).appendTo(container);
                    this.getController("editorFactory").createEditor(groupElement, Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_6__["extend"])({}, options.column, {
                        parentType: "dataRow",
                        dataType: "boolean",
                        lookup: null,
                        value: options.value,
                        setValue: function(value, e) {
                            var _e$event;
                            if ("keydown" === (null === e || void 0 === e ? void 0 : null === (_e$event = e.event) || void 0 === _e$event ? void 0 : _e$event.type)) {
                                _events_core_events_engine__WEBPACK_IMPORTED_MODULE_1__["default"].trigger(e.element, _events_click__WEBPACK_IMPORTED_MODULE_8__["name"], e)
                            }
                        },
                        row: options.row
                    }));
                    return groupElement
                },
                _attachCheckBoxClickEvent: function($element) {
                    _events_core_events_engine__WEBPACK_IMPORTED_MODULE_1__["default"].on($element, _events_click__WEBPACK_IMPORTED_MODULE_8__["name"], this.createAction((function(e) {
                        var selectionController = this.getController("selection");
                        var event = e.event;
                        var rowIndex = this.getRowIndex(Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(event.currentTarget).closest("." + ROW_CLASS));
                        if (rowIndex >= 0) {
                            selectionController.startSelectionWithCheckboxes();
                            selectionController.changeItemSelection(rowIndex, {
                                shift: event.shiftKey
                            });
                            if (Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(event.target).closest("." + SELECT_CHECKBOX_CLASS).length) {
                                this.getController("data").updateItems({
                                    changeType: "updateSelection",
                                    itemIndexes: [rowIndex]
                                })
                            }
                        }
                    })))
                },
                _update: function(change) {
                    var that = this;
                    var tableElements = that.getTableElements();
                    if ("updateSelection" === change.changeType) {
                        if (tableElements.length > 0) {
                            Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_5__["each"])(tableElements, (function(_, tableElement) {
                                Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_5__["each"])(change.itemIndexes || [], (function(_, index) {
                                    var $row;
                                    if (change.items[index]) {
                                        $row = that._getRowElements(Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(tableElement)).eq(index);
                                        if ($row.length) {
                                            var isSelected = change.items[index].isSelected;
                                            $row.toggleClass(ROW_SELECTION_CLASS, void 0 === isSelected ? false : isSelected).find("." + SELECT_CHECKBOX_CLASS).dxCheckBox("option", "value", isSelected);
                                            that.setAria("selected", isSelected, $row)
                                        }
                                    }
                                }))
                            }));
                            that._updateCheckboxesClass()
                        }
                    } else {
                        that.callBase(change)
                    }
                },
                _createTable: function() {
                    var that = this;
                    var selectionMode = that.option("selection.mode");
                    var $table = that.callBase.apply(that, arguments);
                    if ("none" !== selectionMode) {
                        if ("onLongTap" === that.option(SHOW_CHECKBOXES_MODE) || !_core_utils_support__WEBPACK_IMPORTED_MODULE_7__["touch"]) {
                            _events_core_events_engine__WEBPACK_IMPORTED_MODULE_1__["default"].on($table, Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_10__["addNamespace"])(_events_hold__WEBPACK_IMPORTED_MODULE_11__["default"].name, "dxDataGridRowsView"), "." + DATA_ROW_CLASS, that.createAction((function(e) {
                                processLongTap(that.component, e.event);
                                e.event.stopPropagation()
                            })))
                        }
                        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_1__["default"].on($table, "mousedown selectstart", that.createAction((function(e) {
                            var event = e.event;
                            if (event.shiftKey) {
                                event.preventDefault()
                            }
                        })))
                    }
                    return $table
                },
                _createRow: function(row) {
                    var $row = this.callBase.apply(this, arguments);
                    if (row) {
                        var isSelected = !!row.isSelected;
                        if (isSelected) {
                            $row.addClass(ROW_SELECTION_CLASS)
                        }
                        this.setAria("selected", isSelected, $row)
                    }
                    return $row
                },
                _rowClick: function(e) {
                    var dxEvent = e.event;
                    var isSelectionDisabled = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(dxEvent.target).closest("." + SELECTION_DISABLED_CLASS).length;
                    if (!this.isClickableElement(Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(dxEvent.target))) {
                        if (!isSelectionDisabled && ("multiple" !== this.option(SELECTION_MODE) || "always" !== this.option(SHOW_CHECKBOXES_MODE))) {
                            if (this.getController("selection").changeItemSelection(e.rowIndex, {
                                    control: Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_10__["isCommandKeyPressed"])(dxEvent),
                                    shift: dxEvent.shiftKey
                                })) {
                                dxEvent.preventDefault();
                                e.handled = true
                            }
                        }
                        this.callBase(e)
                    }
                },
                isClickableElement: function($target) {
                    var isCommandSelect = $target.closest("." + COMMAND_SELECT_CLASS).length;
                    return !!isCommandSelect
                },
                _renderCore: function(change) {
                    this.callBase(change);
                    this._updateCheckboxesClass()
                },
                _updateCheckboxesClass: function() {
                    var tableElements = this.getTableElements();
                    var selectionController = this.getController("selection");
                    var isCheckBoxesHidden = selectionController.isSelectColumnVisible() && !selectionController.isSelectionWithCheckboxes();
                    Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_5__["each"])(tableElements, (function(_, tableElement) {
                        Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(tableElement).toggleClass(CHECKBOXES_HIDDEN_CLASS, isCheckBoxesHidden)
                    }))
                }
            }
        }
    }
};


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.sorting.js":
/*!**************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.sorting.js ***!
  \**************************************************************************/
/*! exports provided: sortingModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sortingModule", function() { return sortingModule; });
/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/renderer */ "./node_modules/devextreme/esm/core/renderer.js");
/* harmony import */ var _events_core_events_engine__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../events/core/events_engine */ "./node_modules/devextreme/esm/events/core/events_engine.js");
/* harmony import */ var _events_click__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../events/click */ "./node_modules/devextreme/esm/events/click.js");
/* harmony import */ var _core_utils_type__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/utils/type */ "./node_modules/devextreme/esm/core/utils/type.js");
/* harmony import */ var _core_utils_extend__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/utils/extend */ "./node_modules/devextreme/esm/core/utils/extend.js");
/* harmony import */ var _grid_core_ui_grid_core_sorting_mixin__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../grid_core/ui.grid_core.sorting_mixin */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.sorting_mixin.js");
/* harmony import */ var _localization_message__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../localization/message */ "./node_modules/devextreme/esm/localization/message.js");
/* harmony import */ var _events_utils_index__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../events/utils/index */ "./node_modules/devextreme/esm/events/utils/index.js");
/**
 * DevExtreme (esm/ui/grid_core/ui.grid_core.sorting.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */








var COLUMN_HEADERS_VIEW_NAMESPACE = "dxDataGridColumnHeadersView";
var ColumnHeadersViewSortingExtender = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_4__["extend"])({}, _grid_core_ui_grid_core_sorting_mixin__WEBPACK_IMPORTED_MODULE_5__["default"], {
    _createRow(row) {
        var $row = this.callBase(row);
        if ("header" === row.rowType) {
            _events_core_events_engine__WEBPACK_IMPORTED_MODULE_1__["default"].on($row, Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_7__["addNamespace"])(_events_click__WEBPACK_IMPORTED_MODULE_2__["name"], COLUMN_HEADERS_VIEW_NAMESPACE), "td", this.createAction(e => {
                this._processHeaderAction(e.event, $row)
            }))
        }
        return $row
    },
    _processHeaderAction: function(event, $row) {
        if (Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(event.currentTarget).parent().get(0) !== $row.get(0)) {
            return
        }
        var that = this;
        var keyName = null;
        var $cellElementFromEvent = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(event.currentTarget);
        var rowIndex = $cellElementFromEvent.parent().index();
        var columnIndex = -1;
        [].slice.call(that.getCellElements(rowIndex)).some(($cellElement, index) => {
            if ($cellElement === $cellElementFromEvent.get(0)) {
                columnIndex = index;
                return true
            }
        });
        var visibleColumns = that._columnsController.getVisibleColumns(rowIndex);
        var column = visibleColumns[columnIndex];
        var editingController = that.getController("editing");
        var editingMode = that.option("editing.mode");
        var isCellEditing = editingController && editingController.isEditing() && ("batch" === editingMode || "cell" === editingMode);
        if (isCellEditing || !that._isSortableElement(Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(event.target))) {
            return
        }
        if (column && !Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_3__["isDefined"])(column.groupIndex) && !column.command) {
            if (event.shiftKey) {
                keyName = "shift"
            } else if (Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_7__["isCommandKeyPressed"])(event)) {
                keyName = "ctrl"
            }
            setTimeout(() => {
                that._columnsController.changeSortOrder(column.index, keyName)
            })
        }
    },
    _renderCellContent($cell, options) {
        var column = options.column;
        if (!column.command && "header" === options.rowType) {
            this._applyColumnState({
                name: "sort",
                rootElement: $cell,
                column: column,
                showColumnLines: this.option("showColumnLines")
            })
        }
        this.callBase($cell, options)
    },
    _columnOptionChanged(e) {
        var changeTypes = e.changeTypes;
        if (1 === changeTypes.length && changeTypes.sorting) {
            this._updateIndicators("sort");
            return
        }
        this.callBase(e)
    },
    optionChanged(args) {
        switch (args.name) {
            case "sorting":
                this._invalidate();
                args.handled = true;
                break;
            default:
                this.callBase(args)
        }
    }
});
var HeaderPanelSortingExtender = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_4__["extend"])({}, _grid_core_ui_grid_core_sorting_mixin__WEBPACK_IMPORTED_MODULE_5__["default"], {
    _createGroupPanelItem($rootElement, groupColumn) {
        var that = this;
        var $item = that.callBase(...arguments);
        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_1__["default"].on($item, Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_7__["addNamespace"])(_events_click__WEBPACK_IMPORTED_MODULE_2__["name"], "dxDataGridHeaderPanel"), that.createAction(() => {
            that._processGroupItemAction(groupColumn.index)
        }));
        that._applyColumnState({
            name: "sort",
            rootElement: $item,
            column: {
                alignment: that.option("rtlEnabled") ? "right" : "left",
                allowSorting: groupColumn.allowSorting,
                sortOrder: "desc" === groupColumn.sortOrder ? "desc" : "asc"
            },
            showColumnLines: true
        });
        return $item
    },
    _processGroupItemAction(groupColumnIndex) {
        setTimeout(() => this.getController("columns").changeSortOrder(groupColumnIndex))
    },
    optionChanged(args) {
        switch (args.name) {
            case "sorting":
                this._invalidate();
                args.handled = true;
                break;
            default:
                this.callBase(args)
        }
    }
});
var sortingModule = {
    defaultOptions: () => ({
        sorting: {
            mode: "single",
            ascendingText: _localization_message__WEBPACK_IMPORTED_MODULE_6__["default"].format("dxDataGrid-sortingAscendingText"),
            descendingText: _localization_message__WEBPACK_IMPORTED_MODULE_6__["default"].format("dxDataGrid-sortingDescendingText"),
            clearText: _localization_message__WEBPACK_IMPORTED_MODULE_6__["default"].format("dxDataGrid-sortingClearText"),
            showSortIndexes: true
        }
    }),
    extenders: {
        views: {
            columnHeadersView: ColumnHeadersViewSortingExtender,
            headerPanel: HeaderPanelSortingExtender
        }
    }
};


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.sorting_mixin.js":
/*!********************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.sorting_mixin.js ***!
  \********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _core_utils_type__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/utils/type */ "./node_modules/devextreme/esm/core/utils/type.js");
/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/renderer */ "./node_modules/devextreme/esm/core/renderer.js");
/**
 * DevExtreme (esm/ui/grid_core/ui.grid_core.sorting_mixin.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */


var SORT_CLASS = "dx-sort";
var SORT_NONE_CLASS = "dx-sort-none";
var SORTUP_CLASS = "dx-sort-up";
var SORTDOWN_CLASS = "dx-sort-down";
var SORT_INDEX_CLASS = "dx-sort-index";
var SORT_INDEX_ICON_CLASS = "dx-sort-index-icon";
var HEADERS_ACTION_CLASS = "action";
/* harmony default export */ __webpack_exports__["default"] = ({
    _applyColumnState: function(options) {
        var ariaSortState;
        var $sortIndicator;
        var sortingMode = this.option("sorting.mode");
        var rootElement = options.rootElement;
        var column = options.column;
        var $indicatorsContainer = this._getIndicatorContainer(rootElement);
        if ("sort" === options.name) {
            rootElement.find("." + SORT_CLASS).remove();
            !$indicatorsContainer.children().length && $indicatorsContainer.remove();
            var isSortingAllowed = "none" !== sortingMode && column.allowSorting;
            if (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_0__["isDefined"])(column.groupIndex) && (isSortingAllowed || Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_0__["isDefined"])(column.sortOrder))) {
                ariaSortState = "asc" === column.sortOrder ? "ascending" : "descending";
                $sortIndicator = this.callBase(options).toggleClass(SORTUP_CLASS, "asc" === column.sortOrder).toggleClass(SORTDOWN_CLASS, "desc" === column.sortOrder);
                var hasSeveralSortIndexes = this.getController && !!this.getController("columns").columnOption("sortIndex:1");
                if (hasSeveralSortIndexes && this.option("sorting.showSortIndexes") && column.sortIndex >= 0) {
                    Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])("<span>").addClass(SORT_INDEX_ICON_CLASS).text(column.sortIndex + 1).appendTo($sortIndicator);
                    $sortIndicator.addClass(SORT_INDEX_CLASS)
                }
                if (isSortingAllowed) {
                    options.rootElement.addClass(this.addWidgetPrefix(HEADERS_ACTION_CLASS))
                }
            }
            if (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_0__["isDefined"])(column.sortOrder)) {
                this.setAria("sort", "none", rootElement)
            } else {
                this.setAria("sort", ariaSortState, rootElement)
            }
            return $sortIndicator
        } else {
            return this.callBase(options)
        }
    },
    _getIndicatorClassName: function(name) {
        if ("sort" === name) {
            return SORT_CLASS
        } else if ("sortIndex" === name) {
            return SORT_INDEX_ICON_CLASS
        }
        return this.callBase(name)
    },
    _renderIndicator: function(options) {
        var column = options.column;
        var $container = options.container;
        var $indicator = options.indicator;
        if ("sort" === options.name) {
            var rtlEnabled = this.option("rtlEnabled");
            if (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_0__["isDefined"])(column.sortOrder)) {
                $indicator && $indicator.addClass(SORT_NONE_CLASS)
            }
            if ($container.children().length && (!rtlEnabled && "left" === options.columnAlignment || rtlEnabled && "right" === options.columnAlignment)) {
                $container.prepend($indicator);
                return
            }
        }
        this.callBase(options)
    },
    _updateIndicator: function($cell, column, indicatorName) {
        if ("sort" === indicatorName && Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_0__["isDefined"])(column.groupIndex)) {
            return
        }
        return this.callBase.apply(this, arguments)
    },
    _getIndicatorElements: function($cell, returnAll) {
        var $indicatorElements = this.callBase($cell);
        return returnAll ? $indicatorElements : $indicatorElements && $indicatorElements.not("." + SORT_NONE_CLASS)
    }
});


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.state_storing.js":
/*!********************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.state_storing.js ***!
  \********************************************************************************/
/*! exports provided: stateStoringModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "stateStoringModule", function() { return stateStoringModule; });
/* harmony import */ var _core_utils_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/utils/common */ "./node_modules/devextreme/esm/core/utils/common.js");
/* harmony import */ var _core_utils_type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/utils/type */ "./node_modules/devextreme/esm/core/utils/type.js");
/* harmony import */ var _core_utils_extend__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/utils/extend */ "./node_modules/devextreme/esm/core/utils/extend.js");
/* harmony import */ var _ui_grid_core_state_storing_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ui.grid_core.state_storing_core */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.state_storing_core.js");
/* harmony import */ var _core_utils_deferred__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/utils/deferred */ "./node_modules/devextreme/esm/core/utils/deferred.js");
/**
 * DevExtreme (esm/ui/grid_core/ui.grid_core.state_storing.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */





var getDataState = that => {
    var pagerView = that.getView("pagerView");
    var dataController = that.getController("data");
    var state = {
        allowedPageSizes: pagerView ? pagerView.getPageSizes() : void 0,
        filterPanel: {
            filterEnabled: that.option("filterPanel.filterEnabled")
        },
        filterValue: that.option("filterValue"),
        focusedRowKey: that.option("focusedRowEnabled") ? that.option("focusedRowKey") : void 0
    };
    return Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_2__["extend"])(state, dataController.getUserState())
};
var processLoadState = that => {
    var columnsController = that.getController("columns");
    var selectionController = that.getController("selection");
    var exportController = that.getController("export");
    var dataController = that.getController("data");
    if (columnsController) {
        columnsController.columnsChanged.add((function() {
            that.updateState({
                columns: columnsController.getUserState()
            })
        }))
    }
    if (selectionController) {
        selectionController.selectionChanged.add((function(e) {
            that.updateState({
                selectedRowKeys: e.selectedRowKeys,
                selectionFilter: e.selectionFilter
            })
        }))
    }
    if (dataController) {
        that._initialPageSize = that.option("paging.pageSize");
        that._initialFilterValue = that.option("filterValue");
        dataController.changed.add((function() {
            var state = getDataState(that);
            that.updateState(state)
        }))
    }
    if (exportController) {
        exportController.selectionOnlyChanged.add((function() {
            that.updateState({
                exportSelectionOnly: exportController.selectionOnly()
            })
        }))
    }
};
var DEFAULT_FILTER_VALUE = null;
var getFilterValue = (that, state) => {
    var filterSyncController = that.getController("filterSync");
    var columnsController = that.getController("columns");
    var hasFilterState = state.columns || void 0 !== state.filterValue;
    if (filterSyncController) {
        if (hasFilterState) {
            return state.filterValue || filterSyncController.getFilterValueFromColumns(state.columns)
        } else {
            return that._initialFilterValue || filterSyncController.getFilterValueFromColumns(columnsController.getColumns())
        }
    }
    return DEFAULT_FILTER_VALUE
};
var stateStoringModule = {
    defaultOptions: function() {
        return {
            stateStoring: {
                enabled: false,
                storageKey: null,
                type: "localStorage",
                customLoad: null,
                customSave: null,
                savingTimeout: 2e3
            }
        }
    },
    controllers: {
        stateStoring: _ui_grid_core_state_storing_core__WEBPACK_IMPORTED_MODULE_3__["StateStoringController"]
    },
    extenders: {
        views: {
            rowsView: {
                init: function() {
                    var that = this;
                    var dataController = that.getController("data");
                    that.callBase();
                    dataController.stateLoaded.add((function() {
                        if (dataController.isLoaded() && !dataController.getDataSource()) {
                            that.setLoading(false);
                            that.renderNoDataText();
                            var columnHeadersView = that.component.getView("columnHeadersView");
                            columnHeadersView && columnHeadersView.render();
                            that.component._fireContentReadyAction()
                        }
                    }))
                }
            }
        },
        controllers: {
            stateStoring: {
                init: function() {
                    this.callBase.apply(this, arguments);
                    processLoadState(this)
                },
                isLoading: function() {
                    return this.callBase() || this.getController("data").isStateLoading()
                },
                state: function(_state) {
                    var result = this.callBase.apply(this, arguments);
                    if (void 0 !== _state) {
                        this.applyState(Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_2__["extend"])({}, _state))
                    }
                    return result
                },
                updateState: function(state) {
                    if (this.isEnabled()) {
                        var oldState = this.state();
                        var newState = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_2__["extend"])({}, oldState, state);
                        var oldStateHash = Object(_core_utils_common__WEBPACK_IMPORTED_MODULE_0__["getKeyHash"])(oldState);
                        var newStateHash = Object(_core_utils_common__WEBPACK_IMPORTED_MODULE_0__["getKeyHash"])(newState);
                        if (!Object(_core_utils_common__WEBPACK_IMPORTED_MODULE_0__["equalByValue"])(oldStateHash, newStateHash)) {
                            Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_2__["extend"])(this._state, state);
                            this.save()
                        }
                    } else {
                        Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_2__["extend"])(this._state, state)
                    }
                },
                applyState: function(state) {
                    var allowedPageSizes = state.allowedPageSizes;
                    var searchText = state.searchText;
                    var selectedRowKeys = state.selectedRowKeys;
                    var selectionFilter = state.selectionFilter;
                    var exportController = this.getController("export");
                    var columnsController = this.getController("columns");
                    var dataController = this.getController("data");
                    var scrollingMode = this.option("scrolling.mode");
                    var isVirtualScrollingMode = "virtual" === scrollingMode || "infinite" === scrollingMode;
                    var showPageSizeSelector = true === this.option("pager.visible") && this.option("pager.showPageSizeSelector");
                    this.component.beginUpdate();
                    if (columnsController) {
                        columnsController.setUserState(state.columns)
                    }
                    if (exportController) {
                        exportController.selectionOnly(state.exportSelectionOnly)
                    }
                    if (!this.option("selection.deferred")) {
                        this.option("selectedRowKeys", selectedRowKeys || [])
                    }
                    this.option("selectionFilter", selectionFilter);
                    if (allowedPageSizes && "auto" === this.option("pager.allowedPageSizes")) {
                        this.option("pager").allowedPageSizes = allowedPageSizes
                    }
                    if (this.option("focusedRowEnabled")) {
                        this.option("focusedRowIndex", -1);
                        this.option("focusedRowKey", state.focusedRowKey || null)
                    }
                    this.component.endUpdate();
                    this.option("searchPanel.text", searchText || "");
                    this.option("filterValue", getFilterValue(this, state));
                    this.option("filterPanel.filterEnabled", state.filterPanel ? state.filterPanel.filterEnabled : true);
                    this.option("paging.pageIndex", state.pageIndex || 0);
                    this.option("paging.pageSize", (!isVirtualScrollingMode || showPageSizeSelector) && Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_1__["isDefined"])(state.pageSize) ? state.pageSize : this._initialPageSize);
                    dataController && dataController.reset()
                }
            },
            columns: {
                getVisibleColumns: function() {
                    var visibleColumns = this.callBase.apply(this, arguments);
                    var stateStoringController = this.getController("stateStoring");
                    return stateStoringController.isEnabled() && !stateStoringController.isLoaded() ? [] : visibleColumns
                }
            },
            data: {
                callbackNames: function() {
                    return this.callBase().concat(["stateLoaded"])
                },
                _refreshDataSource: function() {
                    var callBase = this.callBase;
                    var stateStoringController = this.getController("stateStoring");
                    if (stateStoringController.isEnabled() && !stateStoringController.isLoaded()) {
                        clearTimeout(this._restoreStateTimeoutID);
                        var deferred = new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_4__["Deferred"];
                        this._restoreStateTimeoutID = setTimeout(() => {
                            stateStoringController.load().always(() => {
                                this._restoreStateTimeoutID = null
                            }).done(() => {
                                callBase.call(this);
                                this.stateLoaded.fire();
                                deferred.resolve()
                            }).fail(error => {
                                this.stateLoaded.fire();
                                this._handleLoadError(error || "Unknown error");
                                deferred.reject()
                            })
                        });
                        return deferred.promise()
                    } else if (!this.isStateLoading()) {
                        callBase.call(this)
                    }
                },
                isLoading: function() {
                    var stateStoringController = this.getController("stateStoring");
                    return this.callBase() || stateStoringController.isLoading()
                },
                isStateLoading: function() {
                    return Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_1__["isDefined"])(this._restoreStateTimeoutID)
                },
                isLoaded: function() {
                    return this.callBase() && !this.isStateLoading()
                },
                dispose: function() {
                    clearTimeout(this._restoreStateTimeoutID);
                    this.callBase()
                }
            },
            selection: {
                _fireSelectionChanged: function(options) {
                    var stateStoringController = this.getController("stateStoring");
                    var isDeferredSelection = this.option("selection.deferred");
                    if (stateStoringController.isLoading() && isDeferredSelection) {
                        return
                    }
                    this.callBase.apply(this, arguments)
                }
            }
        }
    }
};


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.state_storing_core.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.state_storing_core.js ***!
  \*************************************************************************************/
/*! exports provided: StateStoringController */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StateStoringController", function() { return StateStoringController; });
/* harmony import */ var _events_core_events_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../events/core/events_engine */ "./node_modules/devextreme/esm/events/core/events_engine.js");
/* harmony import */ var _core_utils_window__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/utils/window */ "./node_modules/devextreme/esm/core/utils/window.js");
/* harmony import */ var _ui_grid_core_modules__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ui.grid_core.modules */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.modules.js");
/* harmony import */ var _widget_ui_errors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../widget/ui.errors */ "./node_modules/devextreme/esm/ui/widget/ui.errors.js");
/* harmony import */ var _core_utils_storage__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/utils/storage */ "./node_modules/devextreme/esm/core/utils/storage.js");
/* harmony import */ var _core_utils_extend__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core/utils/extend */ "./node_modules/devextreme/esm/core/utils/extend.js");
/* harmony import */ var _core_utils_iterator__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../core/utils/iterator */ "./node_modules/devextreme/esm/core/utils/iterator.js");
/* harmony import */ var _core_utils_type__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../core/utils/type */ "./node_modules/devextreme/esm/core/utils/type.js");
/* harmony import */ var _core_utils_deferred__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../core/utils/deferred */ "./node_modules/devextreme/esm/core/utils/deferred.js");
/**
 * DevExtreme (esm/ui/grid_core/ui.grid_core.state_storing_core.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */









var DATE_REGEX = /^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/;
var parseDates = function parseDates(state) {
    if (!state) {
        return
    }
    Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_6__["each"])(state, (function(key, value) {
        if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_7__["isPlainObject"])(value) || Array.isArray(value)) {
            parseDates(value)
        } else if ("string" === typeof value) {
            var date = DATE_REGEX.exec(value);
            if (date) {
                state[key] = new Date(Date.UTC(+date[1], +date[2] - 1, +date[3], +date[4], +date[5], +date[6]))
            }
        }
    }))
};
var StateStoringController = _ui_grid_core_modules__WEBPACK_IMPORTED_MODULE_2__["default"].ViewController.inherit(function() {
    var getStorage = function(options) {
        var storage = "sessionStorage" === options.type ? Object(_core_utils_storage__WEBPACK_IMPORTED_MODULE_4__["sessionStorage"])() : Object(_core_utils_window__WEBPACK_IMPORTED_MODULE_1__["getWindow"])().localStorage;
        if (!storage) {
            throw new Error("E1007")
        }
        return storage
    };
    var getUniqueStorageKey = function(options) {
        return Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_7__["isDefined"])(options.storageKey) ? options.storageKey : "storage"
    };
    return {
        _loadState: function() {
            var options = this.option("stateStoring");
            if ("custom" === options.type) {
                return options.customLoad && options.customLoad()
            }
            try {
                return JSON.parse(getStorage(options).getItem(getUniqueStorageKey(options)))
            } catch (e) {
                _widget_ui_errors__WEBPACK_IMPORTED_MODULE_3__["default"].log(e.message)
            }
        },
        _saveState: function(state) {
            var options = this.option("stateStoring");
            if ("custom" === options.type) {
                options.customSave && options.customSave(state);
                return
            }
            try {
                getStorage(options).setItem(getUniqueStorageKey(options), JSON.stringify(state))
            } catch (e) {
                _widget_ui_errors__WEBPACK_IMPORTED_MODULE_3__["default"].log(e.message)
            }
        },
        publicMethods: function() {
            return ["state"]
        },
        isEnabled: function() {
            return this.option("stateStoring.enabled")
        },
        init: function() {
            var that = this;
            that._state = {};
            that._isLoaded = false;
            that._isLoading = false;
            that._windowUnloadHandler = function() {
                if (void 0 !== that._savingTimeoutID) {
                    that._saveState(that.state())
                }
            };
            _events_core_events_engine__WEBPACK_IMPORTED_MODULE_0__["default"].on(Object(_core_utils_window__WEBPACK_IMPORTED_MODULE_1__["getWindow"])(), "unload", that._windowUnloadHandler);
            return that
        },
        isLoaded: function() {
            return this._isLoaded
        },
        isLoading: function() {
            return this._isLoading
        },
        load: function() {
            this._isLoading = true;
            var loadResult = Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_8__["fromPromise"])(this._loadState());
            loadResult.always(() => {
                this._isLoaded = true;
                this._isLoading = false
            }).done(state => {
                if (null !== state && !Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_7__["isEmptyObject"])(state)) {
                    this.state(state)
                }
            });
            return loadResult
        },
        state: function(_state) {
            var that = this;
            if (!arguments.length) {
                return Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_5__["extend"])(true, {}, that._state)
            } else {
                that._state = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_5__["extend"])({}, _state);
                parseDates(that._state)
            }
        },
        save: function() {
            var that = this;
            clearTimeout(that._savingTimeoutID);
            that._savingTimeoutID = setTimeout((function() {
                that._saveState(that.state());
                that._savingTimeoutID = void 0
            }), that.option("stateStoring.savingTimeout"))
        },
        optionChanged: function(args) {
            switch (args.name) {
                case "stateStoring":
                    if (this.isEnabled() && !this.isLoading()) {
                        this.load()
                    }
                    args.handled = true;
                    break;
                default:
                    this.callBase(args)
            }
        },
        dispose: function() {
            clearTimeout(this._savingTimeoutID);
            _events_core_events_engine__WEBPACK_IMPORTED_MODULE_0__["default"].off(Object(_core_utils_window__WEBPACK_IMPORTED_MODULE_1__["getWindow"])(), "unload", this._windowUnloadHandler)
        }
    }
}());


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.utils.js":
/*!************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.utils.js ***!
  \************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _core_utils_size__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/utils/size */ "./node_modules/devextreme/esm/core/utils/size.js");
/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/renderer */ "./node_modules/devextreme/esm/core/renderer.js");
/* harmony import */ var _core_utils_type__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/utils/type */ "./node_modules/devextreme/esm/core/utils/type.js");
/* harmony import */ var _core_utils_deferred__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/utils/deferred */ "./node_modules/devextreme/esm/core/utils/deferred.js");
/* harmony import */ var _shared_filtering__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../shared/filtering */ "./node_modules/devextreme/esm/ui/shared/filtering.js");
/* harmony import */ var _core_utils_string__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core/utils/string */ "./node_modules/devextreme/esm/core/utils/string.js");
/* harmony import */ var _core_utils_iterator__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../core/utils/iterator */ "./node_modules/devextreme/esm/core/utils/iterator.js");
/* harmony import */ var _core_utils_extend__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../core/utils/extend */ "./node_modules/devextreme/esm/core/utils/extend.js");
/* harmony import */ var _core_utils_position__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../core/utils/position */ "./node_modules/devextreme/esm/core/utils/position.js");
/* harmony import */ var _core_utils_data__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../core/utils/data */ "./node_modules/devextreme/esm/core/utils/data.js");
/* harmony import */ var _core_utils_common__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../core/utils/common */ "./node_modules/devextreme/esm/core/utils/common.js");
/* harmony import */ var _load_panel__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../load_panel */ "./node_modules/devextreme/esm/ui/load_panel.js");
/* harmony import */ var _data_utils__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../data/utils */ "./node_modules/devextreme/esm/data/utils.js");
/* harmony import */ var _format_helper__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../format_helper */ "./node_modules/devextreme/esm/format_helper.js");
/* harmony import */ var _core_utils_window__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../core/utils/window */ "./node_modules/devextreme/esm/core/utils/window.js");
/* harmony import */ var _events_core_events_engine__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../events/core/events_engine */ "./node_modules/devextreme/esm/events/core/events_engine.js");
/**
 * DevExtreme (esm/ui/grid_core/ui.grid_core.utils.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
















var DATAGRID_SELECTION_DISABLED_CLASS = "dx-selection-disabled";
var DATAGRID_GROUP_OPENED_CLASS = "dx-datagrid-group-opened";
var DATAGRID_GROUP_CLOSED_CLASS = "dx-datagrid-group-closed";
var DATAGRID_EXPAND_CLASS = "dx-datagrid-expand";
var NO_DATA_CLASS = "nodata";
var SCROLLING_MODE_INFINITE = "infinite";
var SCROLLING_MODE_VIRTUAL = "virtual";
var LEGACY_SCROLLING_MODE = "scrolling.legacyMode";
var SCROLLING_MODE_OPTION = "scrolling.mode";
var ROW_RENDERING_MODE_OPTION = "scrolling.rowRenderingMode";
var DATE_INTERVAL_SELECTORS = {
    year: function(value) {
        return value && value.getFullYear()
    },
    month: function(value) {
        return value && value.getMonth() + 1
    },
    day: function(value) {
        return value && value.getDate()
    },
    quarter: function(value) {
        return value && Math.floor(value.getMonth() / 3) + 1
    },
    hour: function(value) {
        return value && value.getHours()
    },
    minute: function(value) {
        return value && value.getMinutes()
    },
    second: function(value) {
        return value && value.getSeconds()
    }
};
var getIntervalSelector = function() {
    var data = arguments[1];
    var value = this.calculateCellValue(data);
    if (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_2__["isDefined"])(value)) {
        return null
    } else if (isDateType(this.dataType)) {
        var nameIntervalSelector = arguments[0];
        return DATE_INTERVAL_SELECTORS[nameIntervalSelector](value)
    } else if ("number" === this.dataType) {
        var groupInterval = arguments[0];
        return Math.floor(Number(value) / groupInterval) * groupInterval
    }
};
var equalSelectors = function(selector1, selector2) {
    if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_2__["isFunction"])(selector1) && Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_2__["isFunction"])(selector2)) {
        if (selector1.originalCallback && selector2.originalCallback) {
            return selector1.originalCallback === selector2.originalCallback && selector1.columnIndex === selector2.columnIndex
        }
    }
    return selector1 === selector2
};

function isDateType(dataType) {
    return "date" === dataType || "datetime" === dataType
}
var setEmptyText = function($container) {
    $container.get(0).textContent = "\xa0"
};
var normalizeSortingInfo = function(sort) {
    sort = sort || [];
    var result = Object(_data_utils__WEBPACK_IMPORTED_MODULE_12__["normalizeSortingInfo"])(sort);
    for (var i = 0; i < sort.length; i++) {
        if (sort && sort[i] && void 0 !== sort[i].isExpanded) {
            result[i].isExpanded = sort[i].isExpanded
        }
        if (sort && sort[i] && void 0 !== sort[i].groupInterval) {
            result[i].groupInterval = sort[i].groupInterval
        }
    }
    return result
};
var formatValue = function(value, options) {
    var valueText = _format_helper__WEBPACK_IMPORTED_MODULE_13__["default"].format(value, options.format) || value && value.toString() || "";
    var formatObject = {
        value: value,
        valueText: options.getDisplayFormat ? options.getDisplayFormat(valueText) : valueText,
        target: options.target || "row",
        groupInterval: options.groupInterval
    };
    return options.customizeText ? options.customizeText.call(options, formatObject) : formatObject.valueText
};
var getSummaryText = function(summaryItem, summaryTexts) {
    var displayFormat = summaryItem.displayFormat || summaryItem.columnCaption && summaryTexts[summaryItem.summaryType + "OtherColumn"] || summaryTexts[summaryItem.summaryType];
    return formatValue(summaryItem.value, {
        format: summaryItem.valueFormat,
        getDisplayFormat: function(valueText) {
            return displayFormat ? Object(_core_utils_string__WEBPACK_IMPORTED_MODULE_5__["format"])(displayFormat, valueText, summaryItem.columnCaption) : valueText
        },
        customizeText: summaryItem.customizeText
    })
};
var getWidgetInstance = function($element) {
    var editorData = $element.data && $element.data();
    var dxComponents = editorData && editorData.dxComponents;
    var widgetName = dxComponents && dxComponents[0];
    return widgetName && editorData[widgetName]
};
var equalFilterParameters = function equalFilterParameters(filter1, filter2) {
    if (Array.isArray(filter1) && Array.isArray(filter2)) {
        if (filter1.length !== filter2.length) {
            return false
        } else {
            for (var i = 0; i < filter1.length; i++) {
                if (!equalFilterParameters(filter1[i], filter2[i])) {
                    return false
                }
            }
        }
        return true
    } else if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_2__["isFunction"])(filter1) && filter1.columnIndex >= 0 && Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_2__["isFunction"])(filter2) && filter2.columnIndex >= 0) {
        return filter1.columnIndex === filter2.columnIndex && Object(_core_utils_data__WEBPACK_IMPORTED_MODULE_9__["toComparable"])(filter1.filterValue) === Object(_core_utils_data__WEBPACK_IMPORTED_MODULE_9__["toComparable"])(filter2.filterValue)
    } else {
        return Object(_core_utils_data__WEBPACK_IMPORTED_MODULE_9__["toComparable"])(filter1) == Object(_core_utils_data__WEBPACK_IMPORTED_MODULE_9__["toComparable"])(filter2)
    }
};
/* harmony default export */ __webpack_exports__["default"] = ({
    renderNoDataText: function($element) {
        $element = $element || this.element();
        if (!$element) {
            return
        }
        var noDataClass = this.addWidgetPrefix(NO_DATA_CLASS);
        var noDataElement = $element.find("." + noDataClass).last();
        var isVisible = this._dataController.isEmpty();
        var isLoading = this._dataController.isLoading();
        if (!noDataElement.length) {
            noDataElement = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])("<span>").addClass(noDataClass).appendTo($element)
        }
        if (isVisible && !isLoading) {
            noDataElement.removeClass("dx-hidden").text(this._getNoDataText())
        } else {
            noDataElement.addClass("dx-hidden")
        }
    },
    renderLoadPanel: function($element, $container, isLocalStore) {
        var loadPanelOptions;
        this._loadPanel && this._loadPanel.$element().remove();
        loadPanelOptions = this.option("loadPanel");
        if (loadPanelOptions && ("auto" === loadPanelOptions.enabled ? !isLocalStore : loadPanelOptions.enabled)) {
            loadPanelOptions = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_7__["extend"])({
                shading: false,
                message: loadPanelOptions.text,
                container: $container
            }, loadPanelOptions);
            this._loadPanel = this._createComponent(Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])("<div>").appendTo($container), _load_panel__WEBPACK_IMPORTED_MODULE_11__["default"], loadPanelOptions)
        } else {
            this._loadPanel = null
        }
    },
    calculateLoadPanelPosition($element) {
        var $window = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(Object(_core_utils_window__WEBPACK_IMPORTED_MODULE_14__["getWindow"])());
        if (Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getHeight"])($element) > Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getHeight"])($window)) {
            return {
                of: $window,
                boundary: $element,
                collision: "fit"
            }
        }
        return {
            of: $element
        }
    },
    getIndexByKey: function(key, items, keyName) {
        var index = -1;
        if (void 0 !== key && Array.isArray(items)) {
            keyName = arguments.length <= 2 ? "key" : keyName;
            for (var i = 0; i < items.length; i++) {
                var item = Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_2__["isDefined"])(keyName) ? items[i][keyName] : items[i];
                if (Object(_core_utils_common__WEBPACK_IMPORTED_MODULE_10__["equalByValue"])(key, item)) {
                    index = i;
                    break
                }
            }
        }
        return index
    },
    combineFilters: function(filters, operation) {
        var resultFilter = [];
        operation = operation || "and";
        for (var i = 0; i < filters.length; i++) {
            var _filters$i;
            if (!filters[i]) {
                continue
            }
            if (1 === (null === (_filters$i = filters[i]) || void 0 === _filters$i ? void 0 : _filters$i.length) && "!" === filters[i][0]) {
                if ("and" === operation) {
                    return ["!"]
                } else if ("or" === operation) {
                    continue
                }
            }
            if (resultFilter.length) {
                resultFilter.push(operation)
            }
            resultFilter.push(filters[i])
        }
        if (1 === resultFilter.length) {
            resultFilter = resultFilter[0]
        }
        if (resultFilter.length) {
            return resultFilter
        }
    },
    checkChanges: function(changes, changeNames) {
        var changesWithChangeNamesCount = 0;
        for (var i = 0; i < changeNames.length; i++) {
            if (changes[changeNames[i]]) {
                changesWithChangeNamesCount++
            }
        }
        return changes.length && changes.length === changesWithChangeNamesCount
    },
    equalFilterParameters: equalFilterParameters,
    proxyMethod: function(instance, methodName, defaultResult) {
        if (!instance[methodName]) {
            instance[methodName] = function() {
                var dataSource = this._dataSource;
                return dataSource ? dataSource[methodName].apply(dataSource, arguments) : defaultResult
            }
        }
    },
    formatValue: formatValue,
    getFormatOptionsByColumn: function(column, target) {
        return {
            format: column.format,
            getDisplayFormat: column.getDisplayFormat,
            customizeText: column.customizeText,
            target: target,
            trueText: column.trueText,
            falseText: column.falseText
        }
    },
    getDisplayValue: function(column, value, data, rowType) {
        if (column.displayValueMap && void 0 !== column.displayValueMap[value]) {
            return column.displayValueMap[value]
        } else if (column.calculateDisplayValue && data && "group" !== rowType) {
            return column.calculateDisplayValue(data)
        } else if (column.lookup && !("group" === rowType && (column.calculateGroupValue || column.calculateDisplayValue))) {
            return column.lookup.calculateCellValue(value)
        }
        return value
    },
    getGroupRowSummaryText: function(summaryItems, summaryTexts) {
        var result = "(";
        for (var i = 0; i < summaryItems.length; i++) {
            var summaryItem = summaryItems[i];
            result += (i > 0 ? ", " : "") + getSummaryText(summaryItem, summaryTexts)
        }
        return result + ")"
    },
    getSummaryText: getSummaryText,
    normalizeSortingInfo: normalizeSortingInfo,
    getFormatByDataType: function(dataType) {
        switch (dataType) {
            case "date":
                return "shortDate";
            case "datetime":
                return "shortDateShortTime"
        }
    },
    getHeaderFilterGroupParameters: function(column, remoteGrouping) {
        var result = [];
        var dataField = column.dataField || column.name;
        var groupInterval = _shared_filtering__WEBPACK_IMPORTED_MODULE_4__["default"].getGroupInterval(column);
        if (groupInterval) {
            Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_6__["each"])(groupInterval, (function(index, interval) {
                result.push(remoteGrouping ? {
                    selector: dataField,
                    groupInterval: interval,
                    isExpanded: index < groupInterval.length - 1
                } : getIntervalSelector.bind(column, interval))
            }));
            return result
        }
        if (remoteGrouping) {
            result = [{
                selector: dataField,
                isExpanded: false
            }]
        } else {
            result = function(data) {
                var result = column.calculateCellValue(data);
                if (void 0 === result || "" === result) {
                    result = null
                }
                return result
            };
            if (column.sortingMethod) {
                result = [{
                    selector: result,
                    compare: column.sortingMethod.bind(column)
                }]
            }
        }
        return result
    },
    equalSortParameters(sortParameters1, sortParameters2, ignoreIsExpanded) {
        sortParameters1 = normalizeSortingInfo(sortParameters1);
        sortParameters2 = normalizeSortingInfo(sortParameters2);
        if (Array.isArray(sortParameters1) && Array.isArray(sortParameters2)) {
            if (sortParameters1.length !== sortParameters2.length) {
                return false
            } else {
                for (var i = 0; i < sortParameters1.length; i++) {
                    if (!equalSelectors(sortParameters1[i].selector, sortParameters2[i].selector) || sortParameters1[i].desc !== sortParameters2[i].desc || sortParameters1[i].groupInterval !== sortParameters2[i].groupInterval || !ignoreIsExpanded && Boolean(sortParameters1[i].isExpanded) !== Boolean(sortParameters2[i].isExpanded)) {
                        return false
                    }
                }
            }
            return true
        } else {
            return (!sortParameters1 || !sortParameters1.length) === (!sortParameters2 || !sortParameters2.length)
        }
    },
    getPointsByColumns: function(items, pointCreated, isVertical, startColumnIndex) {
        var cellsLength = items.length;
        var notCreatePoint = false;
        var item;
        var offset;
        var columnIndex = startColumnIndex || 0;
        var result = [];
        var rtlEnabled;
        for (var i = 0; i <= cellsLength; i++) {
            if (i < cellsLength) {
                item = items.eq(i);
                offset = item.offset();
                rtlEnabled = "rtl" === item.css("direction")
            }
            var point = {
                index: columnIndex,
                x: offset ? offset.left + (!isVertical && rtlEnabled ^ i === cellsLength ? Object(_core_utils_position__WEBPACK_IMPORTED_MODULE_8__["getBoundingRect"])(item[0]).width : 0) : 0,
                y: offset ? offset.top + (isVertical && i === cellsLength ? Object(_core_utils_position__WEBPACK_IMPORTED_MODULE_8__["getBoundingRect"])(item[0]).height : 0) : 0,
                columnIndex: columnIndex
            };
            if (!isVertical && i > 0) {
                var prevItemOffset = items.eq(i - 1).offset();
                if (prevItemOffset.top < point.y) {
                    point.y = prevItemOffset.top
                }
            }
            if (pointCreated) {
                notCreatePoint = pointCreated(point)
            }
            if (!notCreatePoint) {
                result.push(point)
            }
            columnIndex++
        }
        return result
    },
    getExpandCellTemplate: function() {
        return {
            allowRenderToDetachedContainer: true,
            render: function(container, options) {
                var $container = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(container);
                if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_2__["isDefined"])(options.value) && !(options.data && options.data.isContinuation) && !options.row.isNewRow) {
                    var rowsView = options.component.getView("rowsView");
                    $container.addClass(DATAGRID_EXPAND_CLASS).addClass(DATAGRID_SELECTION_DISABLED_CLASS);
                    Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])("<div>").addClass(options.value ? DATAGRID_GROUP_OPENED_CLASS : DATAGRID_GROUP_CLOSED_CLASS).appendTo($container);
                    rowsView.setAria("label", options.value ? rowsView.localize("dxDataGrid-ariaCollapse") : rowsView.localize("dxDataGrid-ariaExpand"), $container)
                } else {
                    setEmptyText($container)
                }
            }
        }
    },
    setEmptyText: setEmptyText,
    isDateType: isDateType,
    getSelectionRange: function(focusedElement) {
        try {
            if (focusedElement) {
                return {
                    selectionStart: focusedElement.selectionStart,
                    selectionEnd: focusedElement.selectionEnd
                }
            }
        } catch (e) {}
        return {}
    },
    setSelectionRange: function(focusedElement, selectionRange) {
        try {
            if (focusedElement && focusedElement.setSelectionRange) {
                focusedElement.setSelectionRange(selectionRange.selectionStart, selectionRange.selectionEnd)
            }
        } catch (e) {}
    },
    focusAndSelectElement: function(component, $element) {
        var isFocused = $element.is(":focus");
        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_15__["default"].trigger($element, "focus");
        var isSelectTextOnEditingStart = component.option("editing.selectTextOnEditStart");
        var element = $element.get(0);
        if (!isFocused && isSelectTextOnEditingStart && $element.is(".dx-texteditor-input") && !$element.is("[readonly]")) {
            var editor = getWidgetInstance($element.closest(".dx-texteditor"));
            Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_3__["when"])(editor && editor._loadItemDeferred).done((function() {
                element.select()
            }))
        }
    },
    getWidgetInstance: getWidgetInstance,
    getLastResizableColumnIndex: function(columns, resultWidths) {
        var hasResizableColumns = columns.some(column => column && !column.command && !column.fixed && false !== column.allowResizing);
        var lastColumnIndex;
        for (lastColumnIndex = columns.length - 1; columns[lastColumnIndex]; lastColumnIndex--) {
            var column = columns[lastColumnIndex];
            var width = resultWidths && resultWidths[lastColumnIndex];
            var allowResizing = !hasResizableColumns || false !== column.allowResizing;
            if (!column.command && !column.fixed && "adaptiveHidden" !== width && allowResizing) {
                break
            }
        }
        return lastColumnIndex
    },
    isElementInCurrentGrid: function(controller, $element) {
        if ($element && $element.length) {
            var $grid = $element.closest("." + controller.getWidgetContainerClass()).parent();
            return $grid.is(controller.component.$element())
        }
        return false
    },
    isVirtualRowRendering: function(that) {
        var rowRenderingMode = that.option(ROW_RENDERING_MODE_OPTION);
        var isVirtualMode = that.option(SCROLLING_MODE_OPTION) === SCROLLING_MODE_VIRTUAL;
        var isAppendMode = that.option(SCROLLING_MODE_OPTION) === SCROLLING_MODE_INFINITE;
        if (false === that.option(LEGACY_SCROLLING_MODE) && (isVirtualMode || isAppendMode)) {
            return true
        }
        return rowRenderingMode === SCROLLING_MODE_VIRTUAL
    },
    getPixelRatio: function(window) {
        return window.devicePixelRatio || 1
    },
    getContentHeightLimit(browser) {
        if (browser.mozilla) {
            return 8e6
        }
        return 15e6 / this.getPixelRatio(Object(_core_utils_window__WEBPACK_IMPORTED_MODULE_14__["getWindow"])())
    }
});


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.validating.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.validating.js ***!
  \*****************************************************************************/
/*! exports provided: validatingModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "validatingModule", function() { return validatingModule; });
/* harmony import */ var _core_utils_size__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/utils/size */ "./node_modules/devextreme/esm/core/utils/size.js");
/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/renderer */ "./node_modules/devextreme/esm/core/renderer.js");
/* harmony import */ var _events_core_events_engine__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../events/core/events_engine */ "./node_modules/devextreme/esm/events/core/events_engine.js");
/* harmony import */ var _ui_grid_core_modules__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ui.grid_core.modules */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.modules.js");
/* harmony import */ var _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ui.grid_core.utils */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.utils.js");
/* harmony import */ var _data_array_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../data/array_utils */ "./node_modules/devextreme/esm/data/array_utils.js");
/* harmony import */ var _core_utils_common__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../core/utils/common */ "./node_modules/devextreme/esm/core/utils/common.js");
/* harmony import */ var _core_utils_iterator__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../core/utils/iterator */ "./node_modules/devextreme/esm/core/utils/iterator.js");
/* harmony import */ var _core_utils_type__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../core/utils/type */ "./node_modules/devextreme/esm/core/utils/type.js");
/* harmony import */ var _core_utils_extend__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../core/utils/extend */ "./node_modules/devextreme/esm/core/utils/extend.js");
/* harmony import */ var _widget_selectors__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../widget/selectors */ "./node_modules/devextreme/esm/ui/widget/selectors.js");
/* harmony import */ var _localization_message__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../localization/message */ "./node_modules/devextreme/esm/localization/message.js");
/* harmony import */ var _button__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../button */ "./node_modules/devextreme/esm/ui/button.js");
/* harmony import */ var _events_pointer__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../events/pointer */ "./node_modules/devextreme/esm/events/pointer.js");
/* harmony import */ var _validation_engine__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../validation_engine */ "./node_modules/devextreme/esm/ui/validation_engine.js");
/* harmony import */ var _validator__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../validator */ "./node_modules/devextreme/esm/ui/validator.js");
/* harmony import */ var _overlay_ui_overlay__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../overlay/ui.overlay */ "./node_modules/devextreme/esm/ui/overlay/ui.overlay.js");
/* harmony import */ var _widget_ui_errors__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../widget/ui.errors */ "./node_modules/devextreme/esm/ui/widget/ui.errors.js");
/* harmony import */ var _core_utils_deferred__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../core/utils/deferred */ "./node_modules/devextreme/esm/core/utils/deferred.js");
/* harmony import */ var _load_indicator__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../load_indicator */ "./node_modules/devextreme/esm/ui/load_indicator.js");
/* harmony import */ var _core_utils_string__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../core/utils/string */ "./node_modules/devextreme/esm/core/utils/string.js");
/* harmony import */ var _core_utils_browser__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../../core/utils/browser */ "./node_modules/devextreme/esm/core/utils/browser.js");
/**
 * DevExtreme (esm/ui/grid_core/ui.grid_core.validating.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */






















var INVALIDATE_CLASS = "invalid";
var REVERT_TOOLTIP_CLASS = "revert-tooltip";
var ROWS_VIEW_CLASS = "rowsview";
var INVALID_MESSAGE_CLASS = "dx-invalid-message";
var WIDGET_INVALID_MESSAGE_CLASS = "invalid-message";
var INVALID_MESSAGE_ALWAYS_CLASS = "dx-invalid-message-always";
var REVERT_BUTTON_CLASS = "dx-revert-button";
var VALIDATOR_CLASS = "validator";
var PENDING_INDICATOR_CLASS = "dx-pending-indicator";
var VALIDATION_PENDING_CLASS = "dx-validation-pending";
var CONTENT_CLASS = "content";
var INSERT_INDEX = "__DX_INSERT_INDEX__";
var PADDING_BETWEEN_TOOLTIPS = 2;
var EDIT_MODE_ROW = "row";
var EDIT_MODE_FORM = "form";
var EDIT_MODE_BATCH = "batch";
var EDIT_MODE_CELL = "cell";
var EDIT_MODE_POPUP = "popup";
var GROUP_CELL_CLASS = "dx-group-cell";
var FORM_BASED_MODES = [EDIT_MODE_POPUP, EDIT_MODE_FORM];
var COMMAND_TRANSPARENT = "transparent";
var VALIDATION_STATUS = {
    valid: "valid",
    invalid: "invalid",
    pending: "pending"
};
var EDIT_DATA_INSERT_TYPE = "insert";
var EDIT_DATA_REMOVE_TYPE = "remove";
var VALIDATION_CANCELLED = "cancel";
var validationResultIsValid = function(result) {
    return Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_8__["isDefined"])(result) && result !== VALIDATION_CANCELLED
};
var cellValueShouldBeValidated = function(value, rowOptions) {
    return void 0 !== value || void 0 === value && rowOptions && !rowOptions.isNewRow
};
var ValidatingController = _ui_grid_core_modules__WEBPACK_IMPORTED_MODULE_3__["default"].Controller.inherit({
    init: function() {
        this._editingController = this.getController("editing");
        this.createAction("onRowValidating");
        if (!this._validationState) {
            this.initValidationState()
        }
    },
    initValidationState() {
        this._validationState = [];
        this._validationStateCache = {}
    },
    _rowIsValidated: function(change) {
        var validationData = this._getValidationData(null === change || void 0 === change ? void 0 : change.key);
        return !!validationData && !!validationData.validated
    },
    _getValidationData: function(key, create) {
        var keyHash = Object(_core_utils_common__WEBPACK_IMPORTED_MODULE_6__["getKeyHash"])(key);
        var isObjectKeyHash = Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_8__["isObject"])(keyHash);
        var validationData;
        if (isObjectKeyHash) {
            validationData = this._validationState.filter(data => Object(_core_utils_common__WEBPACK_IMPORTED_MODULE_6__["equalByValue"])(data.key, key))[0]
        } else {
            validationData = this._validationStateCache[keyHash]
        }
        if (!validationData && create) {
            validationData = {
                key: key,
                isValid: true
            };
            this._validationState.push(validationData);
            if (!isObjectKeyHash) {
                this._validationStateCache[keyHash] = validationData
            }
        }
        return validationData
    },
    _getBrokenRules: function(validationData, validationResults) {
        var brokenRules;
        if (validationResults) {
            brokenRules = validationResults.brokenRules || validationResults.brokenRule && [validationResults.brokenRule]
        } else {
            brokenRules = validationData.brokenRules || []
        }
        return brokenRules
    },
    _rowValidating: function(validationData, validationResults) {
        var deferred = new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_18__["Deferred"];
        var change = this._editingController.getChangeByKey(null === validationData || void 0 === validationData ? void 0 : validationData.key);
        var brokenRules = this._getBrokenRules(validationData, validationResults);
        var isValid = validationResults ? validationResults.isValid : validationData.isValid;
        var parameters = {
            brokenRules: brokenRules,
            isValid: isValid,
            key: change.key,
            newData: change.data,
            oldData: this._editingController._getOldData(change.key),
            promise: null,
            errorText: this.getHiddenValidatorsErrorText(brokenRules)
        };
        this.executeAction("onRowValidating", parameters);
        Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_18__["when"])(Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_18__["fromPromise"])(parameters.promise)).always((function() {
            validationData.isValid = parameters.isValid;
            validationData.errorText = parameters.errorText;
            deferred.resolve(parameters)
        }));
        return deferred.promise()
    },
    getHiddenValidatorsErrorText: function(brokenRules) {
        var brokenRulesMessages = [];
        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_7__["each"])(brokenRules, (function(_, brokenRule) {
            var column = brokenRule.column;
            var isGroupExpandColumn = column && void 0 !== column.groupIndex && !column.showWhenGrouped;
            var isVisibleColumn = column && column.visible;
            if (!brokenRule.validator.$element().parent().length && (!isVisibleColumn || isGroupExpandColumn)) {
                brokenRulesMessages.push(brokenRule.message)
            }
        }));
        return brokenRulesMessages.join(", ")
    },
    validate: function(isFull) {
        var isValid = true;
        var editingController = this._editingController;
        var deferred = new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_18__["Deferred"];
        var completeList = [];
        var editMode = editingController.getEditMode();
        isFull = isFull || editMode === EDIT_MODE_ROW;
        if (this._isValidationInProgress) {
            return deferred.resolve(false).promise()
        }
        this._isValidationInProgress = true;
        if (isFull) {
            editingController.addDeferred(deferred);
            var changes = editingController.getChanges();
            Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_7__["each"])(changes, (index, _ref) => {
                var {
                    type: type,
                    key: key
                } = _ref;
                if ("remove" !== type) {
                    var validationData = this._getValidationData(key, true);
                    var validationResult = this.validateGroup(validationData);
                    completeList.push(validationResult);
                    validationResult.done(validationResult => {
                        validationData.validated = true;
                        isValid = isValid && validationResult.isValid
                    })
                }
            })
        } else if (this._currentCellValidator) {
            var validationResult = this.validateGroup(this._currentCellValidator._findGroup());
            completeList.push(validationResult);
            validationResult.done(validationResult => {
                isValid = validationResult.isValid
            })
        }
        Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_18__["when"])(...completeList).done(() => {
            this._isValidationInProgress = false;
            deferred.resolve(isValid)
        });
        return deferred.promise()
    },
    validateGroup: function(validationData) {
        var _validationResult;
        var result = new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_18__["Deferred"];
        var validateGroup = validationData && _validation_engine__WEBPACK_IMPORTED_MODULE_14__["default"].getGroupConfig(validationData);
        var validationResult;
        if (null !== validateGroup && void 0 !== validateGroup && validateGroup.validators.length) {
            this.resetRowValidationResults(validationData);
            validationResult = _validation_engine__WEBPACK_IMPORTED_MODULE_14__["default"].validateGroup(validationData)
        }
        Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_18__["when"])((null === (_validationResult = validationResult) || void 0 === _validationResult ? void 0 : _validationResult.complete) || validationResult).done(validationResult => {
            Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_18__["when"])(this._rowValidating(validationData, validationResult)).done(result.resolve)
        });
        return result.promise()
    },
    isRowDataModified: change => !Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_8__["isEmptyObject"])(change.data),
    updateValidationState: function(change) {
        var editMode = this._editingController.getEditMode();
        var key = change.key;
        var validationData = this._getValidationData(key, true);
        if (-1 === FORM_BASED_MODES.indexOf(editMode)) {
            if (change.type === EDIT_DATA_INSERT_TYPE && !this.isRowDataModified(change)) {
                validationData.isValid = true;
                return
            }
            this.setDisableApplyValidationResults(true);
            var groupConfig = _validation_engine__WEBPACK_IMPORTED_MODULE_14__["default"].getGroupConfig(validationData);
            if (groupConfig) {
                var validationResult = _validation_engine__WEBPACK_IMPORTED_MODULE_14__["default"].validateGroup(validationData);
                Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_18__["when"])(validationResult.complete || validationResult).done(validationResult => {
                    validationData.isValid = validationResult.isValid;
                    validationData.brokenRules = validationResult.brokenRules
                })
            } else if (!validationData.brokenRules || !validationData.brokenRules.length) {
                validationData.isValid = true
            }
            this.setDisableApplyValidationResults(false)
        } else {
            validationData.isValid = true
        }
    },
    setValidator: function(validator) {
        this._currentCellValidator = validator
    },
    renderCellPendingIndicator: function($container) {
        var $indicator = $container.find("." + PENDING_INDICATOR_CLASS);
        if (!$indicator.length) {
            var $indicatorContainer = $container;
            $indicator = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])("<div>").appendTo($indicatorContainer).addClass(PENDING_INDICATOR_CLASS);
            this._createComponent($indicator, _load_indicator__WEBPACK_IMPORTED_MODULE_19__["default"]);
            $container.addClass(VALIDATION_PENDING_CLASS)
        }
    },
    disposeCellPendingIndicator: function($container) {
        var $indicator = $container.find("." + PENDING_INDICATOR_CLASS);
        if ($indicator.length) {
            var indicator = _load_indicator__WEBPACK_IMPORTED_MODULE_19__["default"].getInstance($indicator);
            if (indicator) {
                indicator.dispose();
                indicator.$element().remove()
            }
            $container.removeClass(VALIDATION_PENDING_CLASS)
        }
    },
    validationStatusChanged: function(result) {
        var validator = result.validator;
        var validationGroup = validator.option("validationGroup");
        var column = validator.option("dataGetter")().column;
        this.updateCellValidationResult({
            rowKey: validationGroup.key,
            columnIndex: column.index,
            validationResult: result
        })
    },
    validatorInitialized: function(arg) {
        arg.component.on("validating", this.validationStatusChanged.bind(this));
        arg.component.on("validated", this.validationStatusChanged.bind(this))
    },
    validatorDisposing: function(arg) {
        var validator = arg.component;
        var validationGroup = validator.option("validationGroup");
        var column = validator.option("dataGetter")().column;
        var result = this.getCellValidationResult({
            rowKey: null === validationGroup || void 0 === validationGroup ? void 0 : validationGroup.key,
            columnIndex: column.index
        });
        if (validationResultIsValid(result) && result.status === VALIDATION_STATUS.pending) {
            this.cancelCellValidationResult({
                change: validationGroup,
                columnIndex: column.index
            })
        }
    },
    applyValidationResult: function($container, result) {
        var validator = result.validator;
        var validationGroup = validator.option("validationGroup");
        var column = validator.option("dataGetter")().column;
        result.brokenRules && result.brokenRules.forEach(rule => {
            rule.columnIndex = column.index;
            rule.column = column
        });
        if ($container) {
            var validationResult = this.getCellValidationResult({
                rowKey: validationGroup.key,
                columnIndex: column.index
            });
            var requestIsDisabled = validationResultIsValid(validationResult) && validationResult.disabledPendingId === result.id;
            if (this._disableApplyValidationResults || requestIsDisabled) {
                return
            }
            if (result.status === VALIDATION_STATUS.invalid) {
                var $focus = $container.find(":focus");
                if (!Object(_widget_selectors__WEBPACK_IMPORTED_MODULE_10__["focused"])($focus)) {
                    _events_core_events_engine__WEBPACK_IMPORTED_MODULE_2__["default"].trigger($focus, "focus");
                    _events_core_events_engine__WEBPACK_IMPORTED_MODULE_2__["default"].trigger($focus, _events_pointer__WEBPACK_IMPORTED_MODULE_13__["default"].down)
                }
            }
            var editor = !column.editCellTemplate && this.getController("editorFactory").getEditorInstance($container);
            if (result.status === VALIDATION_STATUS.pending) {
                if (editor) {
                    editor.option("validationStatus", VALIDATION_STATUS.pending)
                } else {
                    this.renderCellPendingIndicator($container)
                }
            } else if (editor) {
                editor.option("validationStatus", VALIDATION_STATUS.valid)
            } else {
                this.disposeCellPendingIndicator($container)
            }
            $container.toggleClass(this.addWidgetPrefix(INVALIDATE_CLASS), result.status === VALIDATION_STATUS.invalid)
        }
    },
    _syncInternalEditingData: function(parameters) {
        var _parameters$row;
        var editingController = this._editingController;
        var change = editingController.getChangeByKey(parameters.key);
        var oldDataFromState = editingController._getOldData(parameters.key);
        var oldData = null === (_parameters$row = parameters.row) || void 0 === _parameters$row ? void 0 : _parameters$row.oldData;
        if (change && oldData && !oldDataFromState) {
            editingController._addInternalData({
                key: parameters.key,
                oldData: oldData
            })
        }
    },
    createValidator: function(parameters, $container) {
        var editingController = this._editingController;
        var column = parameters.column;
        var showEditorAlways = column.showEditorAlways;
        if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_8__["isDefined"])(column.command) || !column.validationRules || !Array.isArray(column.validationRules) || !column.validationRules.length) {
            return
        }
        var editIndex = editingController.getIndexByKey(parameters.key, editingController.getChanges());
        var needCreateValidator = editIndex > -1;
        if (!needCreateValidator) {
            if (!showEditorAlways) {
                var columnsController = this.getController("columns");
                var visibleColumns = (null === columnsController || void 0 === columnsController ? void 0 : columnsController.getVisibleColumns()) || [];
                showEditorAlways = visibleColumns.some((function(column) {
                    return column.showEditorAlways
                }))
            }
            var isEditRow = Object(_core_utils_common__WEBPACK_IMPORTED_MODULE_6__["equalByValue"])(this.option("editing.editRowKey"), parameters.key);
            var isCellOrBatchEditingAllowed = editingController.isCellOrBatchEditMode() && editingController.allowUpdating({
                row: parameters.row
            });
            needCreateValidator = isEditRow || isCellOrBatchEditingAllowed && showEditorAlways;
            if (isCellOrBatchEditingAllowed && showEditorAlways) {
                var _parameters$row$oldDa, _parameters$row2;
                editingController._addInternalData({
                    key: parameters.key,
                    oldData: null !== (_parameters$row$oldDa = null === (_parameters$row2 = parameters.row) || void 0 === _parameters$row2 ? void 0 : _parameters$row2.oldData) && void 0 !== _parameters$row$oldDa ? _parameters$row$oldDa : parameters.data
                })
            }
        }
        if (needCreateValidator) {
            if ($container && !$container.length) {
                _widget_ui_errors__WEBPACK_IMPORTED_MODULE_17__["default"].log("E1050");
                return
            }
            this._syncInternalEditingData(parameters);
            var validationData = this._getValidationData(parameters.key, true);
            var getValue = () => {
                var change = editingController.getChangeByKey(null === validationData || void 0 === validationData ? void 0 : validationData.key);
                var value = column.calculateCellValue((null === change || void 0 === change ? void 0 : change.data) || {});
                return void 0 !== value ? value : parameters.value
            };
            var useDefaultValidator = $container && $container.hasClass("dx-widget");
            $container && $container.addClass(this.addWidgetPrefix(VALIDATOR_CLASS));
            var validator = new _validator__WEBPACK_IMPORTED_MODULE_15__["default"]($container || Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])("<div>"), {
                name: column.caption,
                validationRules: Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_9__["extend"])(true, [], column.validationRules),
                validationGroup: validationData,
                adapter: useDefaultValidator ? null : {
                    getValue: getValue,
                    applyValidationResults: result => {
                        this.applyValidationResult($container, result)
                    }
                },
                dataGetter: function() {
                    var key = null === validationData || void 0 === validationData ? void 0 : validationData.key;
                    var change = editingController.getChangeByKey(key);
                    var oldData = editingController._getOldData(key);
                    return {
                        data: Object(_data_array_utils__WEBPACK_IMPORTED_MODULE_5__["createObjectWithChanges"])(oldData, null === change || void 0 === change ? void 0 : change.data),
                        column: column
                    }
                },
                onInitialized: this.validatorInitialized.bind(this),
                onDisposing: this.validatorDisposing.bind(this)
            });
            if (useDefaultValidator) {
                var adapter = validator.option("adapter");
                if (adapter) {
                    adapter.getValue = getValue;
                    adapter.validationRequestsCallbacks = [];
                    adapter.bypass = () => parameters.row.isNewRow && !this._isValidationInProgress && !editingController.isCellModified(parameters)
                }
            }
            return validator
        }
    },
    setDisableApplyValidationResults: function(flag) {
        this._disableApplyValidationResults = flag
    },
    getDisableApplyValidationResults: function() {
        return this._disableApplyValidationResults
    },
    isCurrentValidatorProcessing: function(_ref2) {
        var {
            rowKey: rowKey,
            columnIndex: columnIndex
        } = _ref2;
        return this._currentCellValidator && Object(_core_utils_common__WEBPACK_IMPORTED_MODULE_6__["equalByValue"])(this._currentCellValidator.option("validationGroup").key, rowKey) && this._currentCellValidator.option("dataGetter")().column.index === columnIndex
    },
    validateCell: function(validator) {
        var cellParams = {
            rowKey: validator.option("validationGroup").key,
            columnIndex: validator.option("dataGetter")().column.index
        };
        var validationResult = this.getCellValidationResult(cellParams);
        var stateRestored = validationResultIsValid(validationResult);
        if (!stateRestored) {
            validationResult = validator.validate()
        }
        var deferred = new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_18__["Deferred"];
        var adapter = validator.option("adapter");
        if (stateRestored && validationResult.status === VALIDATION_STATUS.pending) {
            this.updateCellValidationResult(cellParams);
            adapter.applyValidationResults(validationResult)
        }
        Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_18__["when"])(validationResult.complete || validationResult).done(validationResult => {
            stateRestored && adapter.applyValidationResults(validationResult);
            deferred.resolve(validationResult)
        });
        return deferred.promise()
    },
    updateCellValidationResult: function(_ref3) {
        var {
            rowKey: rowKey,
            columnIndex: columnIndex,
            validationResult: validationResult
        } = _ref3;
        var validationData = this._getValidationData(rowKey);
        if (!validationData) {
            return
        }
        if (!validationData.validationResults) {
            validationData.validationResults = {}
        }
        var result;
        if (validationResult) {
            result = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_9__["extend"])({}, validationResult);
            validationData.validationResults[columnIndex] = result;
            if (validationResult.status === VALIDATION_STATUS.pending) {
                if (this._editingController.getEditMode() === EDIT_MODE_CELL) {
                    result.deferred = new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_18__["Deferred"];
                    result.complete.always(() => {
                        result.deferred.resolve()
                    });
                    this._editingController.addDeferred(result.deferred)
                }
                if (this._disableApplyValidationResults) {
                    result.disabledPendingId = validationResult.id;
                    return
                }
            }
        } else {
            result = validationData.validationResults[columnIndex]
        }
        if (result && result.disabledPendingId) {
            delete result.disabledPendingId
        }
    },
    getCellValidationResult: function(_ref4) {
        var _validationData$valid;
        var {
            rowKey: rowKey,
            columnIndex: columnIndex
        } = _ref4;
        var validationData = this._getValidationData(rowKey, true);
        return null === validationData || void 0 === validationData ? void 0 : null === (_validationData$valid = validationData.validationResults) || void 0 === _validationData$valid ? void 0 : _validationData$valid[columnIndex]
    },
    removeCellValidationResult: function(_ref5) {
        var {
            change: change,
            columnIndex: columnIndex
        } = _ref5;
        var validationData = this._getValidationData(null === change || void 0 === change ? void 0 : change.key);
        if (validationData && validationData.validationResults) {
            this.cancelCellValidationResult({
                change: change,
                columnIndex: columnIndex
            });
            delete validationData.validationResults[columnIndex]
        }
    },
    cancelCellValidationResult: function(_ref6) {
        var {
            change: change,
            columnIndex: columnIndex
        } = _ref6;
        var validationData = this._getValidationData(change.key);
        if (change && validationData.validationResults) {
            var result = validationData.validationResults[columnIndex];
            if (result) {
                result.deferred && result.deferred.reject(VALIDATION_CANCELLED);
                validationData.validationResults[columnIndex] = VALIDATION_CANCELLED
            }
        }
    },
    resetRowValidationResults: function(validationData) {
        if (validationData) {
            validationData.validationResults && delete validationData.validationResults;
            delete validationData.validated
        }
    },
    isInvalidCell: function(_ref7) {
        var {
            rowKey: rowKey,
            columnIndex: columnIndex
        } = _ref7;
        var result = this.getCellValidationResult({
            rowKey: rowKey,
            columnIndex: columnIndex
        });
        return validationResultIsValid(result) && result.status === VALIDATION_STATUS.invalid
    },
    getCellValidator: function(_ref8) {
        var {
            rowKey: rowKey,
            columnIndex: columnIndex
        } = _ref8;
        var validationData = this._getValidationData(rowKey);
        var groupConfig = validationData && _validation_engine__WEBPACK_IMPORTED_MODULE_14__["default"].getGroupConfig(validationData);
        var validators = groupConfig && groupConfig.validators;
        return validators && validators.filter(v => {
            var column = v.option("dataGetter")().column;
            return column ? column.index === columnIndex : false
        })[0]
    },
    setCellValidationStatus: function(cellOptions) {
        var validationResult = this.getCellValidationResult({
            rowKey: cellOptions.key,
            columnIndex: cellOptions.column.index
        });
        if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_8__["isDefined"])(validationResult)) {
            cellOptions.validationStatus = validationResult !== VALIDATION_CANCELLED ? validationResult.status : VALIDATION_CANCELLED
        } else {
            delete cellOptions.validationStatus
        }
    }
});
var validatingModule = {
    defaultOptions: function() {
        return {
            editing: {
                texts: {
                    validationCancelChanges: _localization_message__WEBPACK_IMPORTED_MODULE_11__["default"].format("dxDataGrid-validationCancelChanges")
                }
            }
        }
    },
    controllers: {
        validating: ValidatingController
    },
    extenders: {
        controllers: {
            editing: {
                _addChange: function(changeParams) {
                    var change = this.callBase.apply(this, arguments);
                    var validatingController = this.getController("validating");
                    if (change && changeParams.type !== EDIT_DATA_REMOVE_TYPE) {
                        validatingController.updateValidationState(change)
                    }
                    return change
                },
                _handleChangesChange: function(args) {
                    this.callBase.apply(this, arguments);
                    var validatingController = this.getController("validating");
                    args.value.forEach(change => {
                        if (void 0 === validatingController._getValidationData(change.key)) {
                            validatingController.updateValidationState(change)
                        }
                    })
                },
                _updateRowAndPageIndices: function() {
                    var that = this;
                    var startInsertIndex = that.getView("rowsView").getTopVisibleItemIndex();
                    var rowIndex = startInsertIndex;
                    Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_7__["each"])(that.getChanges(), (_, _ref9) => {
                        var {
                            key: key,
                            type: type
                        } = _ref9;
                        var validationData = this.getController("validating")._getValidationData(key);
                        if (validationData && !validationData.isValid && validationData.pageIndex !== that._pageIndex) {
                            validationData.pageIndex = that._pageIndex;
                            if (type === EDIT_DATA_INSERT_TYPE) {
                                validationData.rowIndex = startInsertIndex
                            } else {
                                validationData.rowIndex = rowIndex
                            }
                            rowIndex++
                        }
                    })
                },
                _getValidationGroupsInForm: function(detailOptions) {
                    var validatingController = this.getController("validating");
                    var validationData = validatingController._getValidationData(detailOptions.key, true);
                    return {
                        validationGroup: validationData
                    }
                },
                _validateEditFormAfterUpdate: function(row, isCustomSetCellValue) {
                    if (isCustomSetCellValue && this._editForm) {
                        this._editForm.validate()
                    }
                    this.callBase.apply(this, arguments)
                },
                _prepareEditCell: function(params) {
                    var isNotCanceled = this.callBase.apply(this, arguments);
                    var validatingController = this.getController("validating");
                    if (isNotCanceled && params.column.showEditorAlways) {
                        validatingController.updateValidationState({
                            key: params.key
                        })
                    }
                    return isNotCanceled
                },
                processItems: function(items, changeType) {
                    var changes = this.getChanges();
                    var dataController = this.getController("data");
                    var validatingController = this.getController("validating");
                    items = this.callBase(items, changeType);
                    var itemsCount = items.length;
                    var addInValidItem = function(change, validationData) {
                        var data = {
                            key: change.key
                        };
                        var index = function(change, items) {
                            var index = -1;
                            var isInsert = change.type === EDIT_DATA_INSERT_TYPE;
                            var key = change.key;
                            Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_7__["each"])(items, (function(i, item) {
                                if (Object(_core_utils_common__WEBPACK_IMPORTED_MODULE_6__["equalByValue"])(key, isInsert ? item.key : dataController.keyOf(item))) {
                                    index = i;
                                    return false
                                }
                            }));
                            return index
                        }(change, items);
                        if (index >= 0) {
                            return
                        }
                        validationData.rowIndex = validationData.rowIndex > itemsCount ? validationData.rowIndex % itemsCount : validationData.rowIndex;
                        var rowIndex = validationData.rowIndex;
                        data[INSERT_INDEX] = 1;
                        items.splice(rowIndex, 0, data)
                    };
                    if (this.getEditMode() === EDIT_MODE_BATCH && "prepend" !== changeType && "append" !== changeType) {
                        changes.forEach(change => {
                            var key = change.key;
                            var validationData = validatingController._getValidationData(key);
                            if (validationData && change.type && validationData.pageIndex === this._pageIndex && (null === change || void 0 === change ? void 0 : change.pageIndex) !== this._pageIndex) {
                                addInValidItem(change, validationData)
                            }
                        })
                    }
                    return items
                },
                processDataItem: function(item) {
                    var isInserted = item.data[INSERT_INDEX];
                    var key = isInserted ? item.data.key : item.key;
                    var editMode = this.getEditMode();
                    if (editMode === EDIT_MODE_BATCH && isInserted && key) {
                        var changes = this.getChanges();
                        var editIndex = _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_4__["default"].getIndexByKey(key, changes);
                        if (editIndex >= 0) {
                            var change = changes[editIndex];
                            if (change.type !== EDIT_DATA_INSERT_TYPE) {
                                var oldData = this._getOldData(change.key);
                                item.data = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_9__["extend"])(true, {}, oldData, change.data);
                                item.key = key
                            }
                        }
                    }
                    this.callBase.apply(this, arguments)
                },
                _createInvisibleColumnValidators: function(changes) {
                    var that = this;
                    var validatingController = this.getController("validating");
                    var columnsController = this.getController("columns");
                    var columns = columnsController.getColumns();
                    var invisibleColumns = columnsController.getInvisibleColumns().filter(column => !column.isBand);
                    var groupColumns = columnsController.getGroupColumns().filter(column => !column.showWhenGrouped && -1 === invisibleColumns.indexOf(column));
                    var invisibleColumnValidators = [];
                    var isCellVisible = (column, rowKey) => this._dataController.getRowIndexByKey(rowKey) >= 0 && invisibleColumns.indexOf(column) < 0;
                    invisibleColumns.push(...groupColumns);
                    if (-1 === FORM_BASED_MODES.indexOf(this.getEditMode())) {
                        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_7__["each"])(columns, (function(_, column) {
                            changes.forEach((function(change) {
                                var data;
                                if (isCellVisible(column, change.key)) {
                                    return
                                }
                                if (change.type === EDIT_DATA_INSERT_TYPE) {
                                    data = change.data
                                } else if ("update" === change.type) {
                                    var oldData = that._getOldData(change.key);
                                    data = Object(_data_array_utils__WEBPACK_IMPORTED_MODULE_5__["createObjectWithChanges"])(oldData, change.data)
                                }
                                if (data) {
                                    var validator = validatingController.createValidator({
                                        column: column,
                                        key: change.key,
                                        value: column.calculateCellValue(data)
                                    });
                                    if (validator) {
                                        invisibleColumnValidators.push(validator)
                                    }
                                }
                            }))
                        }))
                    }
                    return function() {
                        invisibleColumnValidators.forEach((function(validator) {
                            validator.dispose()
                        }))
                    }
                },
                _beforeSaveEditData: function(change, editIndex) {
                    var result = this.callBase.apply(this, arguments);
                    var validatingController = this.getController("validating");
                    var validationData = validatingController._getValidationData(null === change || void 0 === change ? void 0 : change.key);
                    if (change) {
                        var isValid = "remove" === change.type || validationData.isValid;
                        result = result || !isValid
                    } else {
                        var disposeValidators = this._createInvisibleColumnValidators(this.getChanges());
                        result = new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_18__["Deferred"];
                        this.executeOperation(result, () => {
                            validatingController.validate(true).done(isFullValid => {
                                disposeValidators();
                                this._updateRowAndPageIndices();
                                switch (this.getEditMode()) {
                                    case EDIT_MODE_CELL:
                                        if (!isFullValid) {
                                            this._focusEditingCell()
                                        }
                                        break;
                                    case EDIT_MODE_BATCH:
                                        if (!isFullValid) {
                                            this._resetEditRowKey();
                                            this._resetEditColumnName();
                                            this.getController("data").updateItems()
                                        }
                                }
                                result.resolve(!isFullValid)
                            })
                        })
                    }
                    return result.promise ? result.promise() : result
                },
                _beforeEditCell: function(rowIndex, columnIndex, item) {
                    var result = this.callBase(rowIndex, columnIndex, item);
                    if (this.getEditMode() === EDIT_MODE_CELL) {
                        var $cell = this._rowsView._getCellElement(rowIndex, columnIndex);
                        var validator = $cell && $cell.data("dxValidator");
                        var rowOptions = $cell && $cell.closest(".dx-row").data("options");
                        var value = validator && validator.option("adapter").getValue();
                        if (validator && cellValueShouldBeValidated(value, rowOptions)) {
                            var validatingController = this.getController("validating");
                            var deferred = new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_18__["Deferred"];
                            Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_18__["when"])(validatingController.validateCell(validator), result).done((validationResult, result) => {
                                deferred.resolve(validationResult.status === VALIDATION_STATUS.valid && result)
                            });
                            return deferred.promise()
                        } else if (!validator) {
                            return result
                        }
                    }
                },
                _afterSaveEditData: function(cancel) {
                    var $firstErrorRow;
                    var isCellEditMode = this.getEditMode() === EDIT_MODE_CELL;
                    Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_7__["each"])(this.getChanges(), (_, change) => {
                        var $errorRow = this._showErrorRow(change);
                        $firstErrorRow = $firstErrorRow || $errorRow
                    });
                    if ($firstErrorRow) {
                        var scrollable = this._rowsView.getScrollable();
                        if (scrollable) {
                            scrollable.update();
                            scrollable.scrollToElement($firstErrorRow)
                        }
                    }
                    if (cancel && isCellEditMode && this._needUpdateRow()) {
                        var editRowIndex = this.getEditRowIndex();
                        this._dataController.updateItems({
                            changeType: "update",
                            rowIndices: [editRowIndex]
                        });
                        this._focusEditingCell()
                    } else if (!cancel) {
                        var shouldResetValidationState = true;
                        if (isCellEditMode) {
                            var columns = this.getController("columns").getColumns();
                            var columnsWithValidatingEditors = columns.filter(col => {
                                var _col$validationRules;
                                return col.showEditorAlways && (null === (_col$validationRules = col.validationRules) || void 0 === _col$validationRules ? void 0 : _col$validationRules.length) > 0
                            }).length > 0;
                            shouldResetValidationState = !columnsWithValidatingEditors
                        }
                        if (shouldResetValidationState) {
                            this.getController("validating").initValidationState()
                        }
                    }
                },
                _handleDataChanged: function(args) {
                    var validationState = this.getController("validating")._validationState;
                    if ("standard" === this.option("scrolling.mode")) {
                        this.resetRowAndPageIndices()
                    }
                    if ("prepend" === args.changeType) {
                        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_7__["each"])(validationState, (function(_, validationData) {
                            validationData.rowIndex += args.items.length
                        }))
                    }
                    this.callBase(args)
                },
                resetRowAndPageIndices: function() {
                    var validationState = this.getController("validating")._validationState;
                    Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_7__["each"])(validationState, (_, validationData) => {
                        if (validationData.pageIndex !== this._pageIndex) {
                            delete validationData.pageIndex;
                            delete validationData.rowIndex
                        }
                    })
                },
                _beforeCancelEditData: function() {
                    this.getController("validating").initValidationState();
                    this.callBase()
                },
                _showErrorRow: function(change) {
                    var $popupContent;
                    var errorHandling = this.getController("errorHandling");
                    var items = this.getController("data").items();
                    var rowIndex = this.getIndexByKey(change.key, items);
                    var validationData = this.getController("validating")._getValidationData(change.key);
                    if (!(null !== validationData && void 0 !== validationData && validationData.isValid) && null !== validationData && void 0 !== validationData && validationData.errorText && rowIndex >= 0) {
                        $popupContent = this.getPopupContent();
                        return errorHandling && errorHandling.renderErrorRow(null === validationData || void 0 === validationData ? void 0 : validationData.errorText, rowIndex, $popupContent)
                    }
                },
                updateFieldValue: function(e) {
                    var validatingController = this.getController("validating");
                    var deferred = new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_18__["Deferred"];
                    validatingController.removeCellValidationResult({
                        change: this.getChangeByKey(e.key),
                        columnIndex: e.column.index
                    });
                    this.callBase.apply(this, arguments).done(() => {
                        var currentValidator = validatingController.getCellValidator({
                            rowKey: e.key,
                            columnIndex: e.column.index
                        });
                        Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_18__["when"])(currentValidator && validatingController.validateCell(currentValidator)).done(validationResult => {
                            this.getController("editorFactory").refocus();
                            deferred.resolve(validationResult)
                        })
                    });
                    return deferred.promise()
                },
                highlightDataCell: function($cell, parameters) {
                    this.callBase.apply(this, arguments);
                    var validatingController = this.getController("validating");
                    validatingController.setCellValidationStatus(parameters);
                    var isEditableCell = !!parameters.setValue;
                    var cellModified = this.isCellModified(parameters);
                    var isValidated = Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_8__["isDefined"])(parameters.validationStatus);
                    var needValidation = cellModified && parameters.column.setCellValue || isEditableCell && !cellModified && !(parameters.row.isNewRow || !isValidated);
                    if (needValidation) {
                        var validator = $cell.data("dxValidator");
                        if (validator) {
                            Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_18__["when"])(this.getController("validating").validateCell(validator)).done(() => {
                                validatingController.setCellValidationStatus(parameters)
                            })
                        }
                    }
                },
                getChangeByKey: function(key) {
                    var changes = this.getChanges();
                    return changes[_ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_4__["default"].getIndexByKey(key, changes)]
                },
                isCellModified: function(parameters) {
                    var cellModified = this.callBase(parameters);
                    var change = this.getChangeByKey(parameters.key);
                    var isCellInvalid = !!parameters.row && this.getController("validating").isInvalidCell({
                        rowKey: parameters.key,
                        columnIndex: parameters.column.index
                    });
                    return cellModified || this.getController("validating")._rowIsValidated(change) && isCellInvalid
                }
            },
            editorFactory: {
                _showRevertButton: function($container) {
                    if (!$container || !$container.length) {
                        return
                    }
                    var $tooltipElement = this._rowsView.element().find("." + this.addWidgetPrefix(REVERT_TOOLTIP_CLASS));
                    var $overlayContainer = $container.closest(".".concat(this.addWidgetPrefix(CONTENT_CLASS)));
                    $tooltipElement && $tooltipElement.remove();
                    $tooltipElement = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])("<div>").addClass(this.addWidgetPrefix(REVERT_TOOLTIP_CLASS)).appendTo($container);
                    var tooltipOptions = {
                        animation: null,
                        visible: true,
                        width: "auto",
                        height: "auto",
                        target: $container,
                        shading: false,
                        container: $overlayContainer,
                        propagateOutsideClick: true,
                        closeOnOutsideClick: false,
                        copyRootClassesToWrapper: true,
                        _ignoreCopyRootClassesToWrapperDeprecation: true,
                        contentTemplate: () => {
                            var $buttonElement = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])("<div>").addClass(REVERT_BUTTON_CLASS);
                            var buttonOptions = {
                                icon: "revert",
                                hint: this.option("editing.texts.validationCancelChanges"),
                                onClick: () => {
                                    this._editingController.cancelEditData()
                                }
                            };
                            return new _button__WEBPACK_IMPORTED_MODULE_12__["default"]($buttonElement, buttonOptions).$element()
                        },
                        position: {
                            my: "left top",
                            at: "right top",
                            offset: "1 0",
                            collision: "flip",
                            boundaryOffset: "0 0",
                            boundary: this._rowsView.element()
                        },
                        onPositioned: this._positionedHandler.bind(this)
                    };
                    return new _overlay_ui_overlay__WEBPACK_IMPORTED_MODULE_16__["default"]($tooltipElement, tooltipOptions)
                },
                _hideFixedGroupCell: function($cell, overlayOptions) {
                    var $nextFixedRowElement;
                    var $groupCellElement;
                    var isFixedColumns = this._rowsView.isFixedColumns();
                    var isFormOrPopupEditMode = this._editingController.isFormOrPopupEditMode();
                    if (isFixedColumns && !isFormOrPopupEditMode) {
                        var nextRowOptions = $cell.closest(".dx-row").next().data("options");
                        if (nextRowOptions && "group" === nextRowOptions.rowType) {
                            $nextFixedRowElement = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(this._rowsView.getRowElement(nextRowOptions.rowIndex)).last();
                            $groupCellElement = $nextFixedRowElement.find("." + GROUP_CELL_CLASS);
                            if ($groupCellElement.length && "hidden" !== $groupCellElement.get(0).style.visibility) {
                                $groupCellElement.css("visibility", "hidden");
                                overlayOptions.onDisposing = function() {
                                    $groupCellElement.css("visibility", "")
                                }
                            }
                        }
                    }
                },
                _positionedHandler: function(e, isOverlayVisible) {
                    if (!e.component.__skipPositionProcessing) {
                        var isRevertButton = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(e.element).hasClass(this.addWidgetPrefix(REVERT_TOOLTIP_CLASS));
                        var needRepaint = !isRevertButton && this._rowsView.updateFreeSpaceRowHeight();
                        var normalizedPosition = this._normalizeValidationMessagePositionAndMaxWidth(e, isRevertButton, isOverlayVisible);
                        e.component.__skipPositionProcessing = !!(needRepaint || normalizedPosition);
                        if (normalizedPosition) {
                            e.component.option(normalizedPosition)
                        } else if (needRepaint) {
                            e.component.repaint()
                        }
                    }
                },
                _showValidationMessage: function($cell, messages, alignment, revertTooltip) {
                    var editorPopup = $cell.find(".dx-dropdowneditor-overlay").data("dxPopup");
                    var isOverlayVisible = editorPopup && editorPopup.option("visible");
                    var myPosition = isOverlayVisible ? "top right" : "top " + alignment;
                    var atPosition = isOverlayVisible ? "top left" : "bottom " + alignment;
                    var $overlayContainer = $cell.closest(".".concat(this.addWidgetPrefix(CONTENT_CLASS)));
                    var errorMessageText = "";
                    messages && messages.forEach((function(message) {
                        errorMessageText += (errorMessageText.length ? "<br/>" : "") + Object(_core_utils_string__WEBPACK_IMPORTED_MODULE_20__["encodeHtml"])(message)
                    }));
                    var invalidMessageClass = this.addWidgetPrefix(WIDGET_INVALID_MESSAGE_CLASS);
                    this._rowsView.element().find("." + invalidMessageClass).remove();
                    var $overlayElement = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])("<div>").addClass(INVALID_MESSAGE_CLASS).addClass(INVALID_MESSAGE_ALWAYS_CLASS).addClass(invalidMessageClass).html(errorMessageText).appendTo($cell);
                    var overlayOptions = {
                        target: $cell,
                        container: $overlayContainer,
                        shading: false,
                        width: "auto",
                        height: "auto",
                        visible: true,
                        animation: false,
                        propagateOutsideClick: true,
                        closeOnOutsideClick: false,
                        copyRootClassesToWrapper: true,
                        _ignoreCopyRootClassesToWrapperDeprecation: true,
                        position: {
                            collision: "flip",
                            boundary: this._rowsView.element(),
                            boundaryOffset: "0 0",
                            offset: {
                                x: 0,
                                y: !isOverlayVisible && _core_utils_browser__WEBPACK_IMPORTED_MODULE_21__["default"].mozilla ? -1 : 0
                            },
                            my: myPosition,
                            at: atPosition
                        },
                        onPositioned: e => {
                            this._positionedHandler(e, isOverlayVisible);
                            this._shiftValidationMessageIfNeed(e.component.$content(), revertTooltip && revertTooltip.$content(), $cell)
                        }
                    };
                    this._hideFixedGroupCell($cell, overlayOptions);
                    new _overlay_ui_overlay__WEBPACK_IMPORTED_MODULE_16__["default"]($overlayElement, overlayOptions)
                },
                _normalizeValidationMessagePositionAndMaxWidth: function(options, isRevertButton, isOverlayVisible) {
                    var fixedColumns = this._columnsController.getFixedColumns();
                    if (!fixedColumns || !fixedColumns.length) {
                        return
                    }
                    var position;
                    var visibleTableWidth = !isRevertButton && (that = this, element = options.element, rowIndex = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(element).closest("tr").index(), $cellElements = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(that._rowsView.getRowElement(rowIndex)).first().children().filter(":not(.dx-hidden-cell)"), that._rowsView._getWidths($cellElements).reduce((w1, w2) => w1 + w2, 0));
                    var that, element, rowIndex, $cellElements;
                    var $overlayContentElement = options.component.$content();
                    var validationMessageWidth = Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getOuterWidth"])($overlayContentElement, true);
                    var needMaxWidth = !isRevertButton && validationMessageWidth > visibleTableWidth;
                    var columnIndex = this._rowsView.getCellIndex(Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(options.element).closest("td"));
                    var boundaryNonFixedColumnsInfo = function(fixedColumns) {
                        var firstNonFixedColumnIndex;
                        var lastNonFixedColumnIndex;
                        fixedColumns.some((column, index) => {
                            if (column.command === COMMAND_TRANSPARENT) {
                                firstNonFixedColumnIndex = 0 === index ? -1 : index;
                                lastNonFixedColumnIndex = index === fixedColumns.length - 1 ? -1 : index + column.colspan - 1;
                                return true
                            }
                        });
                        return {
                            startColumnIndex: firstNonFixedColumnIndex,
                            endColumnIndex: lastNonFixedColumnIndex
                        }
                    }(fixedColumns);
                    if (!isRevertButton && (columnIndex === boundaryNonFixedColumnsInfo.startColumnIndex || needMaxWidth)) {
                        position = {
                            collision: "none flip",
                            my: "top left",
                            at: isOverlayVisible ? "top right" : "bottom left"
                        }
                    } else if (columnIndex === boundaryNonFixedColumnsInfo.endColumnIndex) {
                        position = {
                            collision: "none flip",
                            my: "top right",
                            at: isRevertButton || isOverlayVisible ? "top left" : "bottom right"
                        };
                        if (isRevertButton) {
                            position.offset = "-1 0"
                        }
                    }
                    return position && {
                        position: position,
                        maxWidth: needMaxWidth ? visibleTableWidth - 2 : void 0
                    }
                },
                _shiftValidationMessageIfNeed: function($content, $revertContent, $cell) {
                    if (!$revertContent) {
                        return
                    }
                    var contentOffset = $content.offset();
                    var revertContentOffset = $revertContent.offset();
                    if (contentOffset.top === revertContentOffset.top && contentOffset.left + Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getWidth"])($content) > revertContentOffset.left) {
                        var left = Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getWidth"])($revertContent) + PADDING_BETWEEN_TOOLTIPS;
                        $content.css("left", revertContentOffset.left < $cell.offset().left ? -left : left)
                    }
                },
                _getTooltipsSelector: function() {
                    var invalidMessageClass = this.addWidgetPrefix(WIDGET_INVALID_MESSAGE_CLASS);
                    var revertTooltipClass = this.addWidgetPrefix(REVERT_TOOLTIP_CLASS);
                    return ".dx-editor-cell ." + revertTooltipClass + ", .dx-editor-cell ." + invalidMessageClass + ", .dx-cell-modified ." + invalidMessageClass
                },
                init: function() {
                    this.callBase();
                    this._editingController = this.getController("editing");
                    this._columnsController = this.getController("columns");
                    this._rowsView = this.getView("rowsView")
                },
                loseFocus: function(skipValidator) {
                    if (!skipValidator) {
                        this.getController("validating").setValidator(null)
                    }
                    this.callBase()
                },
                updateCellState: function($element, validationResult, hideBorder) {
                    var _change$data;
                    var $focus = null === $element || void 0 === $element ? void 0 : $element.closest(this._getFocusCellSelector());
                    var $cell = null !== $focus && void 0 !== $focus && $focus.is("td") ? $focus : null;
                    var rowOptions = null === $focus || void 0 === $focus ? void 0 : $focus.closest(".dx-row").data("options");
                    var change = rowOptions ? this.getController("editing").getChangeByKey(rowOptions.key) : null;
                    var column = $cell && this.getController("columns").getVisibleColumns()[$cell.index()];
                    var isCellModified = void 0 !== (null === change || void 0 === change ? void 0 : null === (_change$data = change.data) || void 0 === _change$data ? void 0 : _change$data[null === column || void 0 === column ? void 0 : column.name]) && !this._editingController.isSaving();
                    var revertTooltip;
                    if ((null === validationResult || void 0 === validationResult ? void 0 : validationResult.status) === VALIDATION_STATUS.invalid || isCellModified) {
                        if (this._editingController.getEditMode() === EDIT_MODE_CELL) {
                            revertTooltip = this._showRevertButton($focus)
                        }
                    }
                    var showValidationMessage = validationResult && validationResult.status === VALIDATION_STATUS.invalid;
                    if (showValidationMessage && $cell && column && validationResult && validationResult.brokenRules) {
                        var errorMessages = [];
                        validationResult.brokenRules.forEach((function(rule) {
                            if (rule.message) {
                                errorMessages.push(rule.message)
                            }
                        }));
                        if (errorMessages.length) {
                            this._showValidationMessage($focus, errorMessages, column.alignment || "left", revertTooltip)
                        }
                    }!hideBorder && this._rowsView.element() && this._rowsView.updateFreeSpaceRowHeight()
                },
                focus: function($element, hideBorder) {
                    if (!arguments.length) {
                        return this.callBase()
                    }
                    var $tooltips = $element && $element.closest("." + this.addWidgetPrefix(ROWS_VIEW_CLASS)).find(this._getTooltipsSelector());
                    $tooltips && $tooltips.remove();
                    if (null !== $element && void 0 !== $element && $element.hasClass("dx-row")) {
                        return this.callBase($element, hideBorder)
                    }
                    var $focus = null === $element || void 0 === $element ? void 0 : $element.closest(this._getFocusCellSelector());
                    var callBase = this.callBase;
                    var validator = $focus && ($focus.data("dxValidator") || $element.find("." + this.addWidgetPrefix(VALIDATOR_CLASS)).eq(0).data("dxValidator"));
                    var rowOptions = $focus && $focus.closest(".dx-row").data("options");
                    var editingController = this.getController("editing");
                    var change = rowOptions ? editingController.getChangeByKey(rowOptions.key) : null;
                    var validationResult;
                    var validatingController = this.getController("validating");
                    if (validator) {
                        validatingController.setValidator(validator);
                        var value = validator.option("adapter").getValue();
                        if (cellValueShouldBeValidated(value, rowOptions) || validatingController._rowIsValidated(change)) {
                            editingController.waitForDeferredOperations().done(() => {
                                Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_18__["when"])(validatingController.validateCell(validator)).done(result => {
                                    validationResult = result;
                                    var column = validationResult.validator.option("dataGetter")().column;
                                    if (change && column && !validatingController.isCurrentValidatorProcessing({
                                            rowKey: change.key,
                                            columnIndex: column.index
                                        })) {
                                        return
                                    }
                                    if (validationResult.status === VALIDATION_STATUS.invalid) {
                                        hideBorder = true
                                    }
                                    this.updateCellState($element, validationResult, hideBorder);
                                    callBase.call(this, $element, hideBorder)
                                })
                            });
                            return this.callBase($element, hideBorder)
                        }
                    }
                    this.updateCellState($element, validationResult, hideBorder);
                    return this.callBase($element, hideBorder)
                },
                getEditorInstance: function($container) {
                    var $editor = $container.find(".dx-texteditor").eq(0);
                    return _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_4__["default"].getWidgetInstance($editor)
                }
            },
            data: {
                _isCellChanged: function(oldRow, newRow, visibleRowIndex, columnIndex, isLiveUpdate) {
                    var _oldRow$cells, _cell$column$validati;
                    var cell = null === (_oldRow$cells = oldRow.cells) || void 0 === _oldRow$cells ? void 0 : _oldRow$cells[columnIndex];
                    var oldValidationStatus = cell && cell.validationStatus;
                    var validatingController = this.getController("validating");
                    var validationResult = validatingController.getCellValidationResult({
                        rowKey: oldRow.key,
                        columnIndex: columnIndex
                    });
                    var validationData = validatingController._getValidationData(oldRow.key);
                    var newValidationStatus = validationResultIsValid(validationResult) ? validationResult.status : validationResult;
                    var rowIsModified = JSON.stringify(newRow.modifiedValues) !== JSON.stringify(oldRow.modifiedValues);
                    var cellIsMarkedAsInvalid = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(null === cell || void 0 === cell ? void 0 : cell.cellElement).hasClass(this.addWidgetPrefix(INVALIDATE_CLASS));
                    var editingChanged = oldRow.isEditing !== newRow.isEditing;
                    var hasValidationRules = null === cell || void 0 === cell ? void 0 : null === (_cell$column$validati = cell.column.validationRules) || void 0 === _cell$column$validati ? void 0 : _cell$column$validati.length;
                    if (editingChanged && hasValidationRules || oldValidationStatus !== newValidationStatus && rowIsModified || validationData.isValid && cellIsMarkedAsInvalid) {
                        return true
                    }
                    return this.callBase.apply(this, arguments)
                }
            }
        },
        views: {
            rowsView: {
                updateFreeSpaceRowHeight: function($table) {
                    var $rowElements;
                    var $freeSpaceRowElement;
                    var $freeSpaceRowElements;
                    var $element = this.element();
                    var $tooltipContent = $element && $element.find("." + this.addWidgetPrefix(WIDGET_INVALID_MESSAGE_CLASS) + " .dx-overlay-content");
                    this.callBase($table);
                    if ($tooltipContent && $tooltipContent.length) {
                        $rowElements = this._getRowElements();
                        $freeSpaceRowElements = this._getFreeSpaceRowElements($table);
                        $freeSpaceRowElement = $freeSpaceRowElements.first();
                        if ($freeSpaceRowElement && 1 === $rowElements.length && (!$freeSpaceRowElement.is(":visible") || Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getOuterHeight"])($tooltipContent) > Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getOuterHeight"])($freeSpaceRowElement))) {
                            $freeSpaceRowElements.show();
                            Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["setHeight"])($freeSpaceRowElements, Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getOuterHeight"])($tooltipContent));
                            return true
                        }
                    }
                },
                _formItemPrepared: function(cellOptions, $container) {
                    this.callBase.apply(this, arguments);
                    Object(_core_utils_common__WEBPACK_IMPORTED_MODULE_6__["deferUpdate"])(() => {
                        var $editor = $container.find(".dx-widget").first();
                        var isEditorDisposed = $editor.length && !$editor.children().length;
                        if (!isEditorDisposed) {
                            this.getController("validating").createValidator(cellOptions, $editor)
                        }
                    })
                },
                _cellPrepared: function($cell, parameters) {
                    if (!this.getController("editing").isFormOrPopupEditMode()) {
                        this.getController("validating").createValidator(parameters, $cell)
                    }
                    this.callBase.apply(this, arguments)
                },
                _restoreErrorRow: function(contentTable) {
                    var editingController = this.getController("editing");
                    editingController && editingController.hasChanges() && this._getRowElements(contentTable).each((_, item) => {
                        var rowOptions = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(item).data("options");
                        if (rowOptions) {
                            var change = editingController.getChangeByKey(rowOptions.key);
                            change && editingController._showErrorRow(change)
                        }
                    })
                }
            }
        }
    }
};


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.virtual_columns.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.virtual_columns.js ***!
  \**********************************************************************************/
/*! exports provided: virtualColumnsModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "virtualColumnsModule", function() { return virtualColumnsModule; });
/* harmony import */ var _core_utils_size__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/utils/size */ "./node_modules/devextreme/esm/core/utils/size.js");
/* harmony import */ var _core_utils_window__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/utils/window */ "./node_modules/devextreme/esm/core/utils/window.js");
/* harmony import */ var _ui_grid_core_virtual_columns_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ui.grid_core.virtual_columns_core */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.virtual_columns_core.js");
/* harmony import */ var _core_utils_type__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/utils/type */ "./node_modules/devextreme/esm/core/utils/type.js");
/**
 * DevExtreme (esm/ui/grid_core/ui.grid_core.virtual_columns.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */




var DEFAULT_COLUMN_WIDTH = 50;
var VirtualScrollingRowsViewExtender = {
    _resizeCore: function() {
        this.callBase.apply(this, arguments);
        this._columnsController.resize()
    },
    _handleScroll: function(e) {
        var that = this;
        var scrollable = this.getScrollable();
        var left = e.scrollOffset.left;
        that.callBase.apply(that, arguments);
        if (that.option("rtlEnabled") && scrollable) {
            left = Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getWidth"])(scrollable.$content()) - Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getWidth"])(scrollable.$element()) - left
        }
        that._columnsController.setScrollPosition(left)
    }
};
var HeaderViewExtender = {
    _renderCore: function() {
        this.callBase.apply(this, arguments);
        if (this._columnsController.isVirtualMode()) {
            this._updateScrollLeftPosition()
        }
    }
};
var ColumnsControllerExtender = function() {
    var getWidths = function(columns) {
        return columns.map(column => column.visibleWidth || parseFloat(column.width) || DEFAULT_COLUMN_WIDTH)
    };
    var members = {
        init: function() {
            this.callBase();
            this._beginPageIndex = 0;
            this._endPageIndex = 0;
            this._position = 0;
            this._virtualVisibleColumns = {}
        },
        resetColumnsCache: function() {
            this.callBase();
            this._virtualVisibleColumns = {}
        },
        getBeginPageIndex: function(position) {
            var visibleColumns = this.getVisibleColumns(void 0, true);
            var widths = getWidths(visibleColumns);
            var currentPosition = 0;
            for (var index = 0; index < widths.length; index++) {
                if (currentPosition >= position) {
                    return Math.floor(index / this.getColumnPageSize())
                }
                currentPosition += widths[index]
            }
            return 0
        },
        getTotalWidth: function() {
            var width = this.option("width");
            if ("number" === typeof width) {
                return width
            }
            return this.getController("resizing")._lastWidth || Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getOuterWidth"])(this.component.$element())
        },
        getEndPageIndex: function(position) {
            var visibleColumns = this.getVisibleColumns(void 0, true);
            var widths = getWidths(visibleColumns);
            var currentPosition = 0;
            position += this.getTotalWidth();
            for (var index = 0; index < widths.length; index++) {
                if (currentPosition >= position) {
                    return Math.ceil(index / this.getColumnPageSize())
                }
                currentPosition += widths[index]
            }
            return Math.ceil(widths.length / this.getColumnPageSize())
        },
        getColumnPageSize: function() {
            return this.option("scrolling.columnPageSize")
        },
        _fireColumnsChanged: function() {
            var date = new Date;
            this.columnsChanged.fire({
                optionNames: {
                    all: true,
                    length: 1
                },
                changeTypes: {
                    columns: true,
                    virtualColumnsScrolling: true,
                    length: 2
                }
            });
            this._renderTime = new Date - date
        },
        getScrollingTimeout: function() {
            var renderingThreshold = this.option("scrolling.columnRenderingThreshold");
            var renderAsync = this.option("scrolling.renderAsync");
            var scrollingTimeout = 0;
            if (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_3__["isDefined"])(renderAsync) && this._renderTime > renderingThreshold || renderAsync) {
                scrollingTimeout = this.option("scrolling.timeout")
            }
            return scrollingTimeout
        },
        setScrollPosition: function(position) {
            var scrollingTimeout = this.getScrollingTimeout();
            if (scrollingTimeout > 0) {
                clearTimeout(this._changedTimeout);
                this._changedTimeout = setTimeout(() => {
                    this._setScrollPositionCore(position)
                }, scrollingTimeout)
            } else {
                this._setScrollPositionCore(position)
            }
        },
        isVirtualMode: function() {
            return Object(_core_utils_window__WEBPACK_IMPORTED_MODULE_1__["hasWindow"])() && "virtual" === this.option("scrolling.columnRenderingMode")
        },
        resize: function() {
            this._setScrollPositionCore(this._position)
        },
        _setScrollPositionCore: function(position) {
            if (this.isVirtualMode()) {
                var beginPageIndex = this.getBeginPageIndex(position);
                var endPageIndex = this.getEndPageIndex(position);
                var needColumnsChanged = position < this._position ? this._beginPageIndex > beginPageIndex : this._endPageIndex < endPageIndex;
                this._position = position;
                if (needColumnsChanged) {
                    this._beginPageIndex = beginPageIndex;
                    this._endPageIndex = endPageIndex;
                    this._fireColumnsChanged()
                }
            }
        },
        getFixedColumns: function(rowIndex, isBase) {
            var fixedColumns = this.callBase(rowIndex);
            if (this.isVirtualMode() && !isBase && fixedColumns.length) {
                var transparentColumnIndex = fixedColumns.map(c => c.command).indexOf("transparent");
                fixedColumns[transparentColumnIndex].colspan = this.getVisibleColumns().length - this.callBase().length + 1;
                return fixedColumns
            }
            return fixedColumns
        },
        getVisibleColumns: function(rowIndex, isBase) {
            if (isBase || !this.isVirtualMode()) {
                return this.callBase(rowIndex)
            }
            if (!this._beginPageIndex && !this._endPageIndex) {
                this._beginPageIndex = this.getBeginPageIndex(this._position);
                this._endPageIndex = this.getEndPageIndex(this._position)
            }
            var beginPageIndex = this._beginPageIndex;
            var endPageIndex = this._endPageIndex;
            var visibleColumnsHash = rowIndex + "-" + beginPageIndex + "-" + endPageIndex;
            if (this._virtualVisibleColumns[visibleColumnsHash]) {
                return this._virtualVisibleColumns[visibleColumnsHash]
            }
            var visibleColumns = this.callBase();
            var rowCount = this.getRowCount();
            var pageSize = this.getColumnPageSize();
            var startIndex = beginPageIndex * pageSize;
            var endIndex = endPageIndex * pageSize;
            var fixedColumns = this.getFixedColumns(void 0, true);
            var transparentColumnIndex = fixedColumns.map(c => c.command).indexOf("transparent");
            var beginFixedColumnCount = fixedColumns.length ? transparentColumnIndex : 0;
            var beginFixedColumns = visibleColumns.slice(0, beginFixedColumnCount);
            var beginColumns = visibleColumns.slice(beginFixedColumnCount, startIndex);
            var beginWidth = getWidths(beginColumns).reduce((a, b) => a + b, 0);
            if (!beginWidth) {
                startIndex = 0
            }
            var endFixedColumnCount = fixedColumns.length ? fixedColumns.length - transparentColumnIndex - 1 : 0;
            var endFixedColumns = visibleColumns.slice(visibleColumns.length - endFixedColumnCount);
            var endColumns = visibleColumns.slice(endIndex, visibleColumns.length - endFixedColumnCount);
            var endWidth = getWidths(endColumns).reduce((a, b) => a + b, 0);
            if (!endWidth) {
                endIndex = visibleColumns.length
            }
            if (rowCount > 1 && "number" === typeof rowIndex) {
                var columnsInfo = [];
                for (var i = 0; i < rowCount; i++) {
                    columnsInfo.push(this.callBase(i))
                }
                beginFixedColumns = Object(_ui_grid_core_virtual_columns_core__WEBPACK_IMPORTED_MODULE_2__["createColumnsInfo"])(columnsInfo, 0, beginFixedColumns.length)[rowIndex] || [];
                endFixedColumns = Object(_ui_grid_core_virtual_columns_core__WEBPACK_IMPORTED_MODULE_2__["createColumnsInfo"])(columnsInfo, visibleColumns.length - endFixedColumns.length, visibleColumns.length)[rowIndex] || [];
                visibleColumns = Object(_ui_grid_core_virtual_columns_core__WEBPACK_IMPORTED_MODULE_2__["createColumnsInfo"])(columnsInfo, startIndex, endIndex)[rowIndex] || []
            } else {
                visibleColumns = visibleColumns.slice(startIndex, endIndex)
            }
            if (beginWidth) {
                visibleColumns.unshift({
                    command: "virtual",
                    width: beginWidth
                });
                visibleColumns = beginFixedColumns.concat(visibleColumns)
            }
            if (endWidth) {
                visibleColumns.push({
                    command: "virtual",
                    width: endWidth
                });
                visibleColumns = visibleColumns.concat(endFixedColumns)
            }
            this._virtualVisibleColumns[visibleColumnsHash] = visibleColumns;
            return visibleColumns
        },
        getColumnIndexOffset: function() {
            var offset = 0;
            if (this._beginPageIndex > 0) {
                var fixedColumns = this.getFixedColumns();
                var transparentColumnIndex = fixedColumns.map(c => c.command).indexOf("transparent");
                var leftFixedColumnCount = transparentColumnIndex >= 0 ? transparentColumnIndex : 0;
                offset = this._beginPageIndex * this.getColumnPageSize() - leftFixedColumnCount - 1
            }
            return offset > 0 ? offset : 0
        },
        dispose: function() {
            clearTimeout(this._changedTimeout);
            this.callBase.apply(this, arguments)
        }
    };
    return members
}();
var virtualColumnsModule = {
    defaultOptions: function() {
        return {
            scrolling: {
                columnRenderingMode: "standard",
                columnPageSize: 5,
                columnRenderingThreshold: 300
            }
        }
    },
    extenders: {
        controllers: {
            columns: ColumnsControllerExtender
        },
        views: {
            columnHeadersView: HeaderViewExtender,
            rowsView: VirtualScrollingRowsViewExtender
        }
    }
};


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.virtual_columns_core.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.virtual_columns_core.js ***!
  \***************************************************************************************/
/*! exports provided: foreachColumnInfo, createColumnsInfo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "foreachColumnInfo", function() { return foreachColumnInfo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createColumnsInfo", function() { return createColumnsInfo; });
/* harmony import */ var _core_utils_extend__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/utils/extend */ "./node_modules/devextreme/esm/core/utils/extend.js");
/**
 * DevExtreme (esm/ui/grid_core/ui.grid_core.virtual_columns_core.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */

function foreachColumnInfo(info, callback, rowIndex, offsets, columnCount, lastProcessedIndexes) {
    rowIndex = rowIndex || 0;
    offsets = offsets || [];
    lastProcessedIndexes = lastProcessedIndexes || [];
    offsets[rowIndex] = offsets[rowIndex] || 0;
    var row = info[rowIndex];
    var startIndex = lastProcessedIndexes[rowIndex] + 1 || 0;
    var processedColumnCount = 0;
    var colIndex;
    if (!row) {
        return
    }
    for (colIndex = startIndex; colIndex < row.length; colIndex++) {
        var cell = row[colIndex];
        var visibleIndex = colIndex + offsets[rowIndex];
        var colspan = cell.colspan || 1;
        foreachColumnInfo(info, callback, rowIndex + (cell.rowspan || 1), offsets, colspan, lastProcessedIndexes);
        offsets[rowIndex] += colspan - 1;
        processedColumnCount += colspan;
        if (cell.rowspan) {
            for (var i = rowIndex + 1; i < rowIndex + cell.rowspan; i++) {
                offsets[i] = offsets[i] || 0;
                offsets[i] += cell.colspan || 1
            }
        }
        if (false === callback(cell, visibleIndex, rowIndex, colIndex)) {
            break
        }
        if (void 0 !== columnCount && processedColumnCount >= columnCount) {
            break
        }
    }
    lastProcessedIndexes[rowIndex] = colIndex
}
function createColumnsInfo(info, startIndex, endIndex) {
    var newInfo = [];
    foreachColumnInfo(info, (function(columnInfo, visibleIndex, rowIndex) {
        var cell = columnInfo;
        var colspan;
        var cellColspan = cell.colspan || 1;
        var isVisible = visibleIndex + cellColspan - 1 >= startIndex && visibleIndex < endIndex;
        newInfo[rowIndex] = newInfo[rowIndex] || [];
        if (isVisible) {
            if (visibleIndex < startIndex) {
                colspan = cellColspan - (startIndex - visibleIndex);
                visibleIndex = startIndex
            } else {
                colspan = cellColspan
            }
            if (visibleIndex + colspan > endIndex) {
                colspan = endIndex - visibleIndex
            }
            if (colspan !== cellColspan) {
                cell = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_0__["extend"])({}, cell, {
                    colspan: colspan
                })
            }
            newInfo[rowIndex].push(cell)
        } else if (visibleIndex > endIndex) {
            return false
        }
    }));
    for (var i = 0; i < newInfo.length; i++) {
        newInfo[i] = newInfo[i] || []
    }
    return newInfo
}


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.virtual_scrolling.js":
/*!************************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.virtual_scrolling.js ***!
  \************************************************************************************/
/*! exports provided: virtualScrollingModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "virtualScrollingModule", function() { return virtualScrollingModule; });
/* harmony import */ var _core_utils_size__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/utils/size */ "./node_modules/devextreme/esm/core/utils/size.js");
/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/renderer */ "./node_modules/devextreme/esm/core/renderer.js");
/* harmony import */ var _core_utils_window__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/utils/window */ "./node_modules/devextreme/esm/core/utils/window.js");
/* harmony import */ var _ui_grid_core_virtual_scrolling_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ui.grid_core.virtual_scrolling_core */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.virtual_scrolling_core.js");
/* harmony import */ var _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ui.grid_core.utils */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.utils.js");
/* harmony import */ var _core_utils_iterator__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core/utils/iterator */ "./node_modules/devextreme/esm/core/utils/iterator.js");
/* harmony import */ var _core_utils_deferred__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../core/utils/deferred */ "./node_modules/devextreme/esm/core/utils/deferred.js");
/* harmony import */ var _load_indicator__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../load_indicator */ "./node_modules/devextreme/esm/ui/load_indicator.js");
/* harmony import */ var _core_utils_browser__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../core/utils/browser */ "./node_modules/devextreme/esm/core/utils/browser.js");
/* harmony import */ var _core_utils_position__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../core/utils/position */ "./node_modules/devextreme/esm/core/utils/position.js");
/* harmony import */ var _core_utils_type__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../core/utils/type */ "./node_modules/devextreme/esm/core/utils/type.js");
/**
 * DevExtreme (esm/ui/grid_core/ui.grid_core.virtual_scrolling.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */











var BOTTOM_LOAD_PANEL_CLASS = "bottom-load-panel";
var TABLE_CONTENT_CLASS = "table-content";
var GROUP_SPACE_CLASS = "group-space";
var CONTENT_CLASS = "content";
var FREESPACE_CLASS = "dx-freespace-row";
var COLUMN_LINES_CLASS = "dx-column-lines";
var VIRTUAL_ROW_CLASS = "dx-virtual-row";
var SCROLLING_MODE_INFINITE = "infinite";
var SCROLLING_MODE_VIRTUAL = "virtual";
var LOAD_TIMEOUT = 300;
var LEGACY_SCROLLING_MODE = "scrolling.legacyMode";
var VISIBLE_PAGE_INDEX = "paging.pageIndex";
var isVirtualMode = function(that) {
    return that.option("scrolling.mode") === SCROLLING_MODE_VIRTUAL
};
var isAppendMode = function(that) {
    return that.option("scrolling.mode") === SCROLLING_MODE_INFINITE
};
var isVirtualPaging = function(that) {
    return isVirtualMode(that) || isAppendMode(that)
};
var _correctCount = function(items, count, fromEnd, isItemCountableFunc) {
    for (var i = 0; i < count + 1; i++) {
        var item = items[fromEnd ? items.length - 1 - i : i];
        if (item && !isItemCountableFunc(item, i === count, fromEnd)) {
            count++
        }
    }
    return count
};
var isItemCountableByDataSource = function(item, dataSource) {
    return "data" === item.rowType && !item.isNewRow || "group" === item.rowType && dataSource.isGroupItemCountable(item.data)
};
var updateItemIndices = function(items) {
    items.forEach((function(item, index) {
        item.rowIndex = index
    }));
    return items
};
var VirtualScrollingDataSourceAdapterExtender = function() {
    var _updateLoading = function(that) {
        var beginPageIndex = that._virtualScrollController.beginPageIndex(-1);
        if (isVirtualMode(that)) {
            if (beginPageIndex < 0 || that.viewportSize() >= 0 && that.getViewportItemIndex() >= 0 && (beginPageIndex * that.pageSize() > that.getViewportItemIndex() || beginPageIndex * that.pageSize() + that.itemsCount() < that.getViewportItemIndex() + that.viewportSize()) && that._dataSource.isLoading()) {
                if (!that._isLoading) {
                    that._isLoading = true;
                    that.loadingChanged.fire(true)
                }
            } else if (that._isLoading) {
                that._isLoading = false;
                that.loadingChanged.fire(false)
            }
        }
    };
    var result = {
        init: function() {
            this.callBase.apply(this, arguments);
            this._items = [];
            this._totalCount = -1;
            this._isLoaded = true;
            this._loadPageCount = 1;
            this._virtualScrollController = new _ui_grid_core_virtual_scrolling_core__WEBPACK_IMPORTED_MODULE_3__["VirtualScrollController"](this.component, this._getVirtualScrollDataOptions())
        },
        _getVirtualScrollDataOptions: function() {
            var that = this;
            return {
                pageSize: function() {
                    return that.pageSize()
                },
                totalItemsCount: function() {
                    return that.totalItemsCount()
                },
                hasKnownLastPage: function() {
                    return that.hasKnownLastPage()
                },
                pageIndex: function(index) {
                    return that._dataSource.pageIndex(index)
                },
                isLoading: function() {
                    return that._dataSource.isLoading() && !that.isCustomLoading()
                },
                pageCount: function() {
                    return that.pageCount()
                },
                load: function() {
                    return that._dataSource.load()
                },
                updateLoading: function() {
                    _updateLoading(that)
                },
                itemsCount: function() {
                    return that.itemsCount(true)
                },
                items: function() {
                    return that._dataSource.items()
                },
                viewportItems: function(items) {
                    if (items) {
                        that._items = items
                    }
                    return that._items
                },
                onChanged: function(e) {
                    that.changed.fire(e)
                },
                changingDuration: function(e) {
                    if (that.isLoading()) {
                        return LOAD_TIMEOUT
                    }
                    return that._renderTime || 0
                }
            }
        },
        _handleLoadingChanged: function(isLoading) {
            if (false === this.option(LEGACY_SCROLLING_MODE)) {
                this.callBase.apply(this, arguments);
                return
            }
            if (!isVirtualMode(this) || this._isLoadingAll) {
                this._isLoading = isLoading;
                this.callBase.apply(this, arguments)
            }
            if (isLoading) {
                this._startLoadTime = new Date
            } else {
                this._startLoadTime = void 0
            }
        },
        _handleLoadError: function() {
            if (false !== this.option(LEGACY_SCROLLING_MODE)) {
                this._isLoading = false;
                this.loadingChanged.fire(false)
            }
            this.callBase.apply(this, arguments)
        },
        _handleDataChanged: function(e) {
            if (false === this.option(LEGACY_SCROLLING_MODE)) {
                this._items = this._dataSource.items().slice();
                this._totalCount = this._dataSourceTotalCount(true);
                this.callBase.apply(this, arguments);
                return
            }
            var callBase = this.callBase.bind(this);
            this._virtualScrollController.handleDataChanged(callBase, e)
        },
        _customizeRemoteOperations: function(options, operationTypes) {
            var newMode = false === this.option(LEGACY_SCROLLING_MODE);
            var renderAsync = this.option("scrolling.renderAsync");
            if (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_10__["isDefined"])(renderAsync)) {
                renderAsync = this._renderTime >= this.option("scrolling.renderingThreshold")
            }
            if ((isVirtualMode(this) || isAppendMode(this) && newMode) && !operationTypes.reload && (operationTypes.skip || newMode) && !renderAsync) {
                options.delay = void 0
            }
            this.callBase.apply(this, arguments)
        },
        items: function() {
            return this._items
        },
        _dataSourceTotalCount: function(isBase) {
            return false === this.option(LEGACY_SCROLLING_MODE) && isVirtualMode(this) && !isBase ? this._totalCount : this.callBase()
        },
        itemsCount: function(isBase) {
            if (isBase || false === this.option(LEGACY_SCROLLING_MODE)) {
                return this.callBase()
            }
            return this._virtualScrollController.itemsCount()
        },
        load: function(loadOptions) {
            if (false === this.option(LEGACY_SCROLLING_MODE) || loadOptions) {
                return this.callBase(loadOptions)
            }
            return this._virtualScrollController.load()
        },
        isLoading: function() {
            return false === this.option(LEGACY_SCROLLING_MODE) ? this._dataSource.isLoading() : this._isLoading
        },
        isLoaded: function() {
            return this._dataSource.isLoaded() && this._isLoaded
        },
        resetPagesCache: function(isLiveUpdate) {
            if (!isLiveUpdate) {
                this._virtualScrollController.reset(true)
            }
            this.callBase.apply(this, arguments)
        },
        _changeRowExpandCore: function() {
            var result = this.callBase.apply(this, arguments);
            if (false === this.option(LEGACY_SCROLLING_MODE)) {
                return result
            }
            this.resetPagesCache();
            _updateLoading(this);
            return result
        },
        reload: function() {
            this._dataSource.pageIndex(this.pageIndex());
            var virtualScrollController = this._virtualScrollController;
            if (false !== this.option(LEGACY_SCROLLING_MODE) && virtualScrollController) {
                var d = new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_6__["Deferred"];
                this.callBase.apply(this, arguments).done((function(r) {
                    var delayDeferred = virtualScrollController.getDelayDeferred();
                    if (delayDeferred) {
                        delayDeferred.done(d.resolve).fail(d.reject)
                    } else {
                        d.resolve(r)
                    }
                })).fail(d.reject);
                return d
            } else {
                return this.callBase.apply(this, arguments)
            }
        },
        refresh: function(options, operationTypes) {
            if (false !== this.option(LEGACY_SCROLLING_MODE)) {
                var storeLoadOptions = options.storeLoadOptions;
                var dataSource = this._dataSource;
                if (operationTypes.reload) {
                    this._virtualScrollController.reset();
                    dataSource.items().length = 0;
                    this._isLoaded = false;
                    _updateLoading(this);
                    this._isLoaded = true;
                    if (isAppendMode(this)) {
                        this.pageIndex(0);
                        dataSource.pageIndex(0);
                        storeLoadOptions.pageIndex = 0;
                        options.pageIndex = 0;
                        storeLoadOptions.skip = 0
                    } else {
                        dataSource.pageIndex(this.pageIndex());
                        if (dataSource.paginate()) {
                            options.pageIndex = this.pageIndex();
                            storeLoadOptions.skip = this.pageIndex() * this.pageSize()
                        }
                    }
                } else if (isAppendMode(this) && storeLoadOptions.skip && this._totalCountCorrection < 0) {
                    storeLoadOptions.skip += this._totalCountCorrection
                }
            }
            return this.callBase.apply(this, arguments)
        },
        dispose: function() {
            this._virtualScrollController.dispose();
            this.callBase.apply(this, arguments)
        },
        loadPageCount: function(count) {
            if (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_10__["isDefined"])(count)) {
                return this._loadPageCount
            }
            this._loadPageCount = count
        },
        _handleDataLoading: function(options) {
            var loadPageCount = this.loadPageCount();
            var pageSize = this.pageSize();
            var newMode = false === this.option(LEGACY_SCROLLING_MODE);
            var storeLoadOptions = options.storeLoadOptions;
            var takeIsDefined = Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_10__["isDefined"])(storeLoadOptions.take);
            options.loadPageCount = loadPageCount;
            if (!options.isCustomLoading && newMode && takeIsDefined && loadPageCount > 1 && pageSize > 0) {
                storeLoadOptions.take = loadPageCount * pageSize
            }
            this.callBase.apply(this, arguments)
        },
        _loadPageSize: function() {
            return this.callBase.apply(this, arguments) * this.loadPageCount()
        }
    };
    ["beginPageIndex", "endPageIndex", "pageIndex"].forEach((function(name) {
        result[name] = function() {
            if (false === this.option(LEGACY_SCROLLING_MODE)) {
                var dataSource = this._dataSource;
                return dataSource.pageIndex.apply(dataSource, arguments)
            }
            var virtualScrollController = this._virtualScrollController;
            return virtualScrollController[name].apply(virtualScrollController, arguments)
        }
    }));
    ["virtualItemsCount", "getContentOffset", "getVirtualContentSize", "setContentItemSizes", "setViewportPosition", "getViewportItemIndex", "setViewportItemIndex", "getItemIndexByPosition", "viewportSize", "viewportItemSize", "getItemSize", "getItemSizes", "loadIfNeed"].forEach((function(name) {
        result[name] = function() {
            var virtualScrollController = this._virtualScrollController;
            return virtualScrollController[name].apply(virtualScrollController, arguments)
        }
    }));
    return result
}();
var VirtualScrollingRowsViewExtender = function() {
    var removeEmptyRows = function($emptyRows, className) {
        var tBodies = $emptyRows.toArray().map(row => Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(row).parent("." + className).get(0)).filter(row => row);
        if (tBodies.length) {
            $emptyRows = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(tBodies)
        }
        var rowCount = className === FREESPACE_CLASS ? $emptyRows.length - 1 : $emptyRows.length;
        for (var i = 0; i < rowCount; i++) {
            $emptyRows.eq(i).remove()
        }
    };
    return {
        init: function() {
            var _dataController$state;
            var dataController = this.getController("data");
            this.callBase();
            dataController.pageChanged.add(pageIndex => {
                this.scrollToPage(null !== pageIndex && void 0 !== pageIndex ? pageIndex : dataController.pageIndex())
            });
            dataController.dataSourceChanged.add(() => {
                !this._scrollTop && this._scrollToCurrentPageOnResize()
            });
            null === (_dataController$state = dataController.stateLoaded) || void 0 === _dataController$state ? void 0 : _dataController$state.add(() => {
                this._scrollToCurrentPageOnResize()
            });
            this._scrollToCurrentPageOnResize()
        },
        _scrollToCurrentPageOnResize: function() {
            var dataController = this.getController("data");
            if (dataController.pageIndex() > 0) {
                var resizeHandler = () => {
                    this.resizeCompleted.remove(resizeHandler);
                    this.scrollToPage(dataController.pageIndex())
                };
                this.resizeCompleted.add(resizeHandler)
            }
        },
        scrollToPage: function(pageIndex) {
            var dataController = this._dataController;
            var pageSize = dataController ? dataController.pageSize() : 0;
            var scrollPosition;
            if (isVirtualMode(this) || isAppendMode(this)) {
                var itemSize = dataController.getItemSize();
                var itemSizes = dataController.getItemSizes();
                var itemIndex = pageIndex * pageSize;
                scrollPosition = itemIndex * itemSize;
                for (var index in itemSizes) {
                    if (index < itemIndex) {
                        scrollPosition += itemSizes[index] - itemSize
                    }
                }
            } else {
                scrollPosition = 0
            }
            this.scrollTo({
                y: scrollPosition,
                x: this._scrollLeft
            })
        },
        renderDelayedTemplates: function(e) {
            this._updateContentPosition(true);
            this.callBase.apply(this, arguments)
        },
        _renderCore: function(e) {
            var startRenderTime = new Date;
            this.callBase.apply(this, arguments);
            var dataSource = this._dataController._dataSource;
            if (dataSource && e) {
                var itemCount = e.items ? e.items.length : 20;
                var viewportSize = this._dataController.viewportSize() || 20;
                if (_ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_4__["default"].isVirtualRowRendering(this) && itemCount > 0 && false !== this.option(LEGACY_SCROLLING_MODE)) {
                    dataSource._renderTime = (new Date - startRenderTime) * viewportSize / itemCount
                } else {
                    dataSource._renderTime = new Date - startRenderTime
                }
            }
        },
        _getRowElements: function(tableElement) {
            var $rows = this.callBase(tableElement);
            return $rows && $rows.not("." + VIRTUAL_ROW_CLASS)
        },
        _removeRowsElements: function(contentTable, removeCount, changeType) {
            var rowElements = this._getRowElements(contentTable).toArray();
            if ("append" === changeType) {
                rowElements = rowElements.slice(0, removeCount)
            } else {
                rowElements = rowElements.slice(-removeCount)
            }
            var errorHandlingController = this.getController("errorHandling");
            rowElements.map(rowElement => {
                var $rowElement = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(rowElement);
                errorHandlingController && errorHandlingController.removeErrorRow($rowElement.next());
                $rowElement.remove()
            })
        },
        _updateContent: function(tableElement, change) {
            var $freeSpaceRowElements;
            var contentElement = this._findContentElement();
            var changeType = change && change.changeType;
            var contentTable = contentElement.children().first();
            if ("append" === changeType || "prepend" === changeType) {
                var $tBodies = this._getBodies(tableElement);
                if (1 === $tBodies.length) {
                    this._getBodies(contentTable)["append" === changeType ? "append" : "prepend"]($tBodies.children())
                } else {
                    $tBodies["append" === changeType ? "appendTo" : "prependTo"](contentTable)
                }
                tableElement.remove();
                $freeSpaceRowElements = this._getFreeSpaceRowElements(contentTable);
                removeEmptyRows($freeSpaceRowElements, FREESPACE_CLASS);
                if (change.removeCount) {
                    this._removeRowsElements(contentTable, change.removeCount, changeType)
                }
                this._restoreErrorRow(contentTable)
            } else {
                this.callBase.apply(this, arguments);
                if ("update" === changeType) {
                    this._restoreErrorRow(contentTable)
                }
            }
            this._updateBottomLoading()
        },
        _addVirtualRow: function($table, isFixed, location, position) {
            if (!position) {
                return
            }
            var $virtualRow = this._createEmptyRow(VIRTUAL_ROW_CLASS, isFixed, position);
            $virtualRow = this._wrapRowIfNeed($table, $virtualRow);
            this._appendEmptyRow($table, $virtualRow, location)
        },
        _getRowHeights: function() {
            var rowHeights = this._getRowElements(this._tableElement).toArray().map((function(row) {
                return Object(_core_utils_position__WEBPACK_IMPORTED_MODULE_9__["getBoundingRect"])(row).height
            }));
            return rowHeights
        },
        _correctRowHeights: function(rowHeights) {
            var dataController = this._dataController;
            var dataSource = dataController._dataSource;
            var correctedRowHeights = [];
            var visibleRows = dataController.getVisibleRows();
            var itemSize = 0;
            var firstCountableItem = true;
            var lastLoadIndex = -1;
            for (var i = 0; i < rowHeights.length; i++) {
                var currentItem = visibleRows[i];
                if (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_10__["isDefined"])(currentItem)) {
                    continue
                }
                if (false === this.option(LEGACY_SCROLLING_MODE)) {
                    if (lastLoadIndex >= 0 && lastLoadIndex !== currentItem.loadIndex) {
                        correctedRowHeights.push(itemSize);
                        itemSize = 0
                    }
                    lastLoadIndex = currentItem.loadIndex
                } else if (isItemCountableByDataSource(currentItem, dataSource)) {
                    if (firstCountableItem) {
                        firstCountableItem = false
                    } else {
                        correctedRowHeights.push(itemSize);
                        itemSize = 0
                    }
                }
                itemSize += rowHeights[i]
            }
            itemSize > 0 && correctedRowHeights.push(itemSize);
            return correctedRowHeights
        },
        _updateContentPosition: function(isRender) {
            var dataController = this._dataController;
            var rowHeight = this._rowHeight || 20;
            dataController.viewportItemSize(rowHeight);
            if (isVirtualMode(this) || _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_4__["default"].isVirtualRowRendering(this)) {
                if (!isRender) {
                    var rowHeights = this._getRowHeights();
                    var correctedRowHeights = this._correctRowHeights(rowHeights);
                    dataController.setContentItemSizes(correctedRowHeights)
                }
                var top = dataController.getContentOffset("begin");
                var bottom = dataController.getContentOffset("end");
                var $tables = this.getTableElements();
                var $virtualRows = $tables.children("tbody").children("." + VIRTUAL_ROW_CLASS);
                removeEmptyRows($virtualRows, VIRTUAL_ROW_CLASS);
                $tables.each((index, element) => {
                    var isFixed = index > 0;
                    this._isFixedTableRendering = isFixed;
                    this._addVirtualRow(Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(element), isFixed, "top", top);
                    this._addVirtualRow(Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(element), isFixed, "bottom", bottom);
                    this._isFixedTableRendering = false
                })
            }
        },
        _isTableLinesDisplaysCorrect: function(table) {
            var hasColumnLines = table.find("." + COLUMN_LINES_CLASS).length > 0;
            return hasColumnLines === this.option("showColumnLines")
        },
        _isColumnElementsEqual: function($columns, $virtualColumns) {
            var result = $columns.length === $virtualColumns.length;
            if (result) {
                Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_5__["each"])($columns, (function(index, element) {
                    if (element.style.width !== $virtualColumns[index].style.width) {
                        result = false;
                        return result
                    }
                }))
            }
            return result
        },
        _getCellClasses: function(column) {
            var classes = [];
            var cssClass = column.cssClass;
            var isExpandColumn = "expand" === column.command;
            cssClass && classes.push(cssClass);
            isExpandColumn && classes.push(this.addWidgetPrefix(GROUP_SPACE_CLASS));
            return classes
        },
        _findBottomLoadPanel: function($contentElement) {
            var $element = $contentElement || this.element();
            var $bottomLoadPanel = $element && $element.find("." + this.addWidgetPrefix(BOTTOM_LOAD_PANEL_CLASS));
            if ($bottomLoadPanel && $bottomLoadPanel.length) {
                return $bottomLoadPanel
            }
        },
        _updateBottomLoading: function() {
            var virtualMode = isVirtualMode(this);
            var appendMode = isAppendMode(this);
            var showBottomLoading = !this._dataController.hasKnownLastPage() && this._dataController.isLoaded() && (virtualMode || appendMode);
            var $contentElement = this._findContentElement();
            var bottomLoadPanelElement = this._findBottomLoadPanel($contentElement);
            if (showBottomLoading) {
                if (!bottomLoadPanelElement) {
                    Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])("<div>").addClass(this.addWidgetPrefix(BOTTOM_LOAD_PANEL_CLASS)).append(this._createComponent(Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])("<div>"), _load_indicator__WEBPACK_IMPORTED_MODULE_7__["default"]).$element()).appendTo($contentElement)
                }
            } else if (bottomLoadPanelElement) {
                bottomLoadPanelElement.remove()
            }
        },
        _handleScroll: function(e) {
            var legacyScrollingMode = true === this.option(LEGACY_SCROLLING_MODE);
            var zeroTopPosition = 0 === e.scrollOffset.top;
            if ((this._hasHeight || !legacyScrollingMode && zeroTopPosition) && this._rowHeight) {
                this._dataController.setViewportPosition(e.scrollOffset.top)
            }
            this.callBase.apply(this, arguments)
        },
        _needUpdateRowHeight: function(itemsCount) {
            return this.callBase.apply(this, arguments) || itemsCount > 0 && isAppendMode(this) && !_ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_4__["default"].isVirtualRowRendering(this)
        },
        _updateRowHeight: function() {
            this.callBase.apply(this, arguments);
            if (this._rowHeight) {
                this._updateContentPosition();
                var viewportHeight = this._hasHeight ? Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getOuterHeight"])(this.element()) : Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getOuterHeight"])(Object(_core_utils_window__WEBPACK_IMPORTED_MODULE_2__["getWindow"])());
                var dataController = this._dataController;
                if (false === this.option(LEGACY_SCROLLING_MODE)) {
                    dataController.viewportHeight(viewportHeight);
                    dataController.updateViewport()
                } else {
                    dataController.viewportSize(Math.ceil(viewportHeight / this._rowHeight))
                }
            }
        },
        updateFreeSpaceRowHeight: function() {
            var result = this.callBase.apply(this, arguments);
            if (result) {
                this._updateContentPosition()
            }
            return result
        },
        setLoading: function(isLoading, messageText) {
            var dataController = this._dataController;
            var hasBottomLoadPanel = dataController.pageIndex() > 0 && dataController.isLoaded() && !!this._findBottomLoadPanel();
            if (false === this.option(LEGACY_SCROLLING_MODE) && isLoading && dataController.isViewportChanging()) {
                return
            }
            if (hasBottomLoadPanel) {
                isLoading = false
            }
            this.callBase.call(this, isLoading, messageText)
        },
        _resizeCore: function() {
            var that = this;
            var $element = that.element();
            that.callBase();
            if (that.component.$element() && !that._windowScroll && $element.closest(Object(_core_utils_window__WEBPACK_IMPORTED_MODULE_2__["getWindow"])().document).length) {
                that._windowScroll = Object(_ui_grid_core_virtual_scrolling_core__WEBPACK_IMPORTED_MODULE_3__["subscribeToExternalScrollers"])($element, (function(scrollPos) {
                    if (!that._hasHeight && that._rowHeight) {
                        that._dataController.setViewportPosition(scrollPos)
                    }
                }), that.component.$element());
                that.on("disposing", (function() {
                    that._windowScroll.dispose()
                }))
            }
            if (false !== this.option(LEGACY_SCROLLING_MODE)) {
                that.loadIfNeed()
            }
        },
        loadIfNeed: function() {
            var _dataController$loadI;
            var dataController = this._dataController;
            null === dataController || void 0 === dataController ? void 0 : null === (_dataController$loadI = dataController.loadIfNeed) || void 0 === _dataController$loadI ? void 0 : _dataController$loadI.call(dataController)
        },
        setColumnWidths: function(widths) {
            var scrollable = this.getScrollable();
            var $content;
            this.callBase.apply(this, arguments);
            if ("virtual" === this.option("scrolling.mode")) {
                $content = scrollable ? Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(scrollable.content()) : this.element();
                this.callBase(widths, $content.children("." + this.addWidgetPrefix(CONTENT_CLASS)).children(":not(." + this.addWidgetPrefix(TABLE_CONTENT_CLASS) + ")"))
            }
        },
        _restoreErrorRow: function() {
            if (false === this.option(LEGACY_SCROLLING_MODE)) {
                var errorHandling = this.getController("errorHandling");
                null === errorHandling || void 0 === errorHandling ? void 0 : errorHandling.removeErrorRow()
            }
            this.callBase.apply(this, arguments)
        },
        dispose: function() {
            clearTimeout(this._scrollTimeoutID);
            this.callBase()
        }
    }
}();
var virtualScrollingModule = {
    defaultOptions: function() {
        return {
            scrolling: {
                timeout: 300,
                updateTimeout: 300,
                minTimeout: 0,
                renderingThreshold: 100,
                removeInvisiblePages: true,
                rowPageSize: 5,
                prerenderedRowChunkSize: 1,
                mode: "standard",
                preloadEnabled: false,
                rowRenderingMode: "standard",
                loadTwoPagesOnStart: false,
                legacyMode: false,
                prerenderedRowCount: 1
            }
        }
    },
    extenders: {
        dataSourceAdapter: VirtualScrollingDataSourceAdapterExtender,
        controllers: {
            data: function() {
                var members = {
                    _refreshDataSource: function() {
                        var baseResult = this.callBase.apply(this, arguments) || (new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_6__["Deferred"]).resolve().promise();
                        baseResult.done(this.initVirtualRows.bind(this));
                        return baseResult
                    },
                    _loadDataSource: function() {
                        if (this._rowsScrollController && isVirtualPaging(this)) {
                            var _this$getLoadPagePara, _this$_dataSource;
                            var {
                                loadPageCount: loadPageCount
                            } = null !== (_this$getLoadPagePara = this.getLoadPageParams()) && void 0 !== _this$getLoadPagePara ? _this$getLoadPagePara : {};
                            loadPageCount >= 1 && (null === (_this$_dataSource = this._dataSource) || void 0 === _this$_dataSource ? void 0 : _this$_dataSource.loadPageCount(loadPageCount))
                        }
                        return this.callBase.apply(this, arguments)
                    },
                    getRowPageSize: function() {
                        var rowPageSize = this.option("scrolling.rowPageSize");
                        var pageSize = this.pageSize();
                        return pageSize && pageSize < rowPageSize ? pageSize : rowPageSize
                    },
                    reload: function() {
                        var rowsScrollController = this._rowsScrollController || this._dataSource;
                        var itemIndex = rowsScrollController && rowsScrollController.getItemIndexByPosition();
                        var result = this.callBase.apply(this, arguments);
                        return result && result.done(() => {
                            if (isVirtualMode(this) || _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_4__["default"].isVirtualRowRendering(this)) {
                                var rowIndexOffset = this.getRowIndexOffset();
                                var rowIndex = Math.floor(itemIndex) - rowIndexOffset;
                                var component = this.component;
                                var scrollable = component.getScrollable && component.getScrollable();
                                var isSortingOperation = this.dataSource().operationTypes().sorting;
                                if (scrollable && !isSortingOperation && rowIndex >= 0) {
                                    var rowElement = component.getRowElement(rowIndex);
                                    var $rowElement = rowElement && rowElement[0] && Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(rowElement[0]);
                                    var top = $rowElement && $rowElement.position().top;
                                    var isChromeLatest = _core_utils_browser__WEBPACK_IMPORTED_MODULE_8__["default"].chrome && _core_utils_browser__WEBPACK_IMPORTED_MODULE_8__["default"].version >= 91;
                                    var allowedTopOffset = _core_utils_browser__WEBPACK_IMPORTED_MODULE_8__["default"].mozilla || isChromeLatest ? 1 : 0;
                                    if (top > allowedTopOffset) {
                                        top = Math.round(top + Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getOuterHeight"])($rowElement) * (itemIndex % 1));
                                        scrollable.scrollTo({
                                            y: top
                                        })
                                    }
                                }
                            }
                        })
                    },
                    initVirtualRows: function() {
                        var virtualRowsRendering = _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_4__["default"].isVirtualRowRendering(this);
                        this._allItems = null;
                        this._loadViewportParams = null;
                        if ("virtual" !== this.option("scrolling.mode") && true !== virtualRowsRendering || false === virtualRowsRendering || false !== this.option(LEGACY_SCROLLING_MODE) && !this.option("scrolling.rowPageSize")) {
                            this._visibleItems = null;
                            this._rowsScrollController = null;
                            return
                        }
                        var pageIndex = !isVirtualMode(this) && this.pageIndex() >= this.pageCount() ? this.pageCount() - 1 : this.pageIndex();
                        this._rowPageIndex = Math.ceil(pageIndex * this.pageSize() / this.getRowPageSize());
                        this._visibleItems = false === this.option(LEGACY_SCROLLING_MODE) ? null : [];
                        this._viewportChanging = false;
                        this._needUpdateViewportAfterLoading = false;
                        if (!this._rowsScrollController) {
                            this._rowsScrollController = new _ui_grid_core_virtual_scrolling_core__WEBPACK_IMPORTED_MODULE_3__["VirtualScrollController"](this.component, this._getRowsScrollDataOptions(), true);
                            this._rowsScrollController.positionChanged.add(() => {
                                var _this$_dataSource2;
                                if (false === this.option(LEGACY_SCROLLING_MODE)) {
                                    this._viewportChanging = true;
                                    this.loadViewport();
                                    this._viewportChanging = false;
                                    return
                                }
                                null === (_this$_dataSource2 = this._dataSource) || void 0 === _this$_dataSource2 ? void 0 : _this$_dataSource2.setViewportItemIndex(this._rowsScrollController.getViewportItemIndex())
                            })
                        }
                        if (false === this.option(LEGACY_SCROLLING_MODE)) {
                            this._updateLoadViewportParams()
                        }
                        if (this.isLoaded() && false !== this.option(LEGACY_SCROLLING_MODE)) {
                            this._rowsScrollController.load()
                        }
                    },
                    isViewportChanging: function() {
                        return this._viewportChanging
                    },
                    _getRowsScrollDataOptions: function() {
                        var that = this;
                        var isItemCountable = function(item) {
                            return isItemCountableByDataSource(item, that._dataSource)
                        };
                        return {
                            pageSize: function() {
                                return that.getRowPageSize()
                            },
                            loadedOffset: function() {
                                var _that$_dataSource;
                                return isVirtualMode(that) && (null === (_that$_dataSource = that._dataSource) || void 0 === _that$_dataSource ? void 0 : _that$_dataSource.lastLoadOptions().skip) || 0
                            },
                            loadedItemCount: function() {
                                return that._itemCount
                            },
                            totalItemsCount: function() {
                                if (isVirtualPaging(that)) {
                                    return that.totalItemsCount()
                                }
                                return false === that.option(LEGACY_SCROLLING_MODE) ? that._itemCount : that._items.filter(isItemCountable).length
                            },
                            hasKnownLastPage: function() {
                                return false === that.option(LEGACY_SCROLLING_MODE) ? that.hasKnownLastPage() : true
                            },
                            pageIndex: function(index) {
                                if (void 0 !== index) {
                                    that._rowPageIndex = index
                                }
                                return that._rowPageIndex
                            },
                            isLoading: function() {
                                return that.isLoading()
                            },
                            pageCount: function() {
                                var pageCount = Math.ceil(this.totalItemsCount() / this.pageSize());
                                return pageCount ? pageCount : 1
                            },
                            load: function() {
                                if (that._rowsScrollController.pageIndex() >= this.pageCount()) {
                                    that._rowPageIndex = this.pageCount() - 1;
                                    that._rowsScrollController.pageIndex(that._rowPageIndex)
                                }
                                if (!this.items().length && this.totalItemsCount()) {
                                    return
                                }
                                that._rowsScrollController.handleDataChanged(change => {
                                    change = change || {};
                                    change.changeType = change.changeType || "refresh";
                                    change.items = change.items || that._visibleItems;
                                    that._visibleItems.forEach((item, index) => {
                                        item.rowIndex = index
                                    });
                                    that._fireChanged(change)
                                })
                            },
                            updateLoading: function() {},
                            itemsCount: function() {
                                return this.items(true).length
                            },
                            correctCount: function(items, count, fromEnd) {
                                return _correctCount(items, count, fromEnd, (item, isNextAfterLast, fromEnd) => {
                                    if (item.isNewRow) {
                                        return isNextAfterLast && !fromEnd
                                    }
                                    if (isNextAfterLast && fromEnd) {
                                        return !item.isNewRow
                                    }
                                    return isItemCountable(item)
                                })
                            },
                            items: function(countableOnly) {
                                var result = that._items;
                                if (that.option(LEGACY_SCROLLING_MODE)) {
                                    var dataSource = that.dataSource();
                                    var virtualItemsCount = null === dataSource || void 0 === dataSource ? void 0 : dataSource.virtualItemsCount();
                                    var begin = virtualItemsCount ? virtualItemsCount.begin : 0;
                                    var rowPageSize = that.getRowPageSize();
                                    var skip = that._rowPageIndex * rowPageSize - begin;
                                    var take = rowPageSize;
                                    if (skip < 0) {
                                        return []
                                    }
                                    if (skip) {
                                        skip = this.correctCount(result, skip);
                                        result = result.slice(skip)
                                    }
                                    if (take) {
                                        take = this.correctCount(result, take);
                                        result = result.slice(0, take)
                                    }
                                }
                                return countableOnly ? result.filter(isItemCountable) : result
                            },
                            viewportItems: function(items) {
                                if (items && false !== that.option(LEGACY_SCROLLING_MODE)) {
                                    that._visibleItems = items
                                }
                                return that._visibleItems
                            },
                            onChanged: function() {},
                            changingDuration: function(e) {
                                var dataSource = that.dataSource();
                                if (null !== dataSource && void 0 !== dataSource && dataSource.isLoading() && false !== that.option(LEGACY_SCROLLING_MODE)) {
                                    return LOAD_TIMEOUT
                                }
                                return (null === dataSource || void 0 === dataSource ? void 0 : dataSource._renderTime) || 0
                            }
                        }
                    },
                    _updateItemsCore: function(change) {
                        var delta = this.getRowIndexDelta();
                        this.callBase.apply(this, arguments);
                        if (false === this.option(LEGACY_SCROLLING_MODE) && _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_4__["default"].isVirtualRowRendering(this)) {
                            if ("update" === change.changeType && 0 === change.rowIndices.length && change.cancelEmptyChanges) {
                                change.cancel = true
                            }
                            return
                        }
                        var rowsScrollController = this._rowsScrollController;
                        if (rowsScrollController) {
                            var visibleItems = this._visibleItems;
                            var isRefresh = "refresh" === change.changeType || change.isLiveUpdate;
                            if ("append" === change.changeType && change.items && !change.items.length) {
                                return
                            }
                            if (isRefresh || "append" === change.changeType || "prepend" === change.changeType) {
                                change.cancel = true;
                                isRefresh && rowsScrollController.reset(true);
                                rowsScrollController.load()
                            } else {
                                if ("update" === change.changeType) {
                                    change.rowIndices.forEach((rowIndex, index) => {
                                        var changeType = change.changeTypes[index];
                                        var newItem = change.items[index];
                                        if ("update" === changeType) {
                                            visibleItems[rowIndex] = newItem
                                        } else if ("insert" === changeType) {
                                            visibleItems.splice(rowIndex, 0, newItem)
                                        } else if ("remove" === changeType) {
                                            visibleItems.splice(rowIndex, 1)
                                        }
                                    })
                                } else {
                                    visibleItems.forEach((item, index) => {
                                        visibleItems[index] = this._items[index + delta] || visibleItems[index]
                                    });
                                    change.items = visibleItems
                                }
                                updateItemIndices(visibleItems)
                            }
                        }
                    },
                    _updateLoadViewportParams: function() {
                        var viewportParams = this._rowsScrollController.getViewportParams();
                        var pageSize = this.pageSize();
                        if (viewportParams && !isVirtualPaging(this) && pageSize > 0) {
                            var pageOffset = this.pageIndex() * pageSize;
                            viewportParams.skip += pageOffset
                        }
                        this._loadViewportParams = viewportParams
                    },
                    _processItems: function(items) {
                        var newItems = this.callBase.apply(this, arguments);
                        if (false === this.option(LEGACY_SCROLLING_MODE)) {
                            var _dataSource$lastLoadO;
                            var dataSource = this._dataSource;
                            var currentIndex = null !== (_dataSource$lastLoadO = null === dataSource || void 0 === dataSource ? void 0 : dataSource.lastLoadOptions().skip) && void 0 !== _dataSource$lastLoadO ? _dataSource$lastLoadO : 0;
                            var prevCountable;
                            var prevRowType;
                            var isPrevRowNew;
                            var wasCountableItem = false;
                            newItems.forEach(item => {
                                var rowType = item.rowType;
                                var itemCountable = isItemCountableByDataSource(item, dataSource);
                                if (!item.isNewRow && Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_10__["isDefined"])(prevCountable)) {
                                    var isNextGroupItem = "group" === rowType && (prevCountable || itemCountable || "group" !== prevRowType && currentIndex > 0);
                                    var isNextDataItem = "data" === rowType && itemCountable && (prevCountable || "group" !== prevRowType);
                                    var isPrevNewRowFirst = isPrevRowNew && !wasCountableItem;
                                    if (isNextGroupItem || isNextDataItem) {
                                        wasCountableItem = true;
                                        if (!isPrevNewRowFirst) {
                                            currentIndex++
                                        }
                                    }
                                }
                                item.loadIndex = currentIndex;
                                prevCountable = itemCountable;
                                prevRowType = rowType;
                                isPrevRowNew = item.isNewRow
                            })
                        }
                        return newItems
                    },
                    _afterProcessItems: function(items) {
                        this._itemCount = items.filter(item => isItemCountableByDataSource(item, this._dataSource)).length;
                        if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_10__["isDefined"])(this._loadViewportParams)) {
                            this._updateLoadViewportParams();
                            var result = items;
                            this._allItems = items;
                            if (items.length) {
                                var {
                                    skipForCurrentPage: skipForCurrentPage
                                } = this.getLoadPageParams(true);
                                var skip = items[0].loadIndex + skipForCurrentPage;
                                var take = this._loadViewportParams.take;
                                result = items.filter(it => {
                                    var isNewRowOnStart = it.isNewRow && it.loadIndex >= skip - 1;
                                    var isNewRowInEmptyData = it.isNewRow && it.loadIndex === skip && 0 === take;
                                    var isLoadIndexGreaterStart = it.loadIndex >= skip || isNewRowOnStart;
                                    var isLoadIndexLessEnd = it.loadIndex < skip + take || isNewRowInEmptyData;
                                    return isLoadIndexGreaterStart && isLoadIndexLessEnd
                                })
                            }
                            return result
                        }
                        return this.callBase.apply(this, arguments)
                    },
                    _applyChange: function(change) {
                        var that = this;
                        var items = change.items;
                        var changeType = change.changeType;
                        var removeCount = change.removeCount;
                        if (removeCount) {
                            var fromEnd = "prepend" === changeType;
                            removeCount = _correctCount(that._items, removeCount, fromEnd, (function(item, isNextAfterLast) {
                                return "data" === item.rowType && !item.isNewRow || "group" === item.rowType && (that._dataSource.isGroupItemCountable(item.data) || isNextAfterLast)
                            }));
                            change.removeCount = removeCount
                        }
                        switch (changeType) {
                            case "prepend":
                                that._items.unshift.apply(that._items, items);
                                if (removeCount) {
                                    that._items.splice(-removeCount)
                                }
                                break;
                            case "append":
                                that._items.push.apply(that._items, items);
                                if (removeCount) {
                                    that._items.splice(0, removeCount)
                                }
                                break;
                            default:
                                that.callBase(change)
                        }
                    },
                    items: function(allItems) {
                        return allItems ? this._allItems || this._items : this._visibleItems || this._items
                    },
                    getRowIndexDelta: function() {
                        var delta = 0;
                        if (this.option(LEGACY_SCROLLING_MODE)) {
                            var visibleItems = this._visibleItems;
                            if (visibleItems && visibleItems[0]) {
                                delta = this._items.indexOf(visibleItems[0])
                            }
                        }
                        return delta < 0 ? 0 : delta
                    },
                    getRowIndexOffset: function(byLoadedRows) {
                        var offset = 0;
                        var dataSource = this.dataSource();
                        var rowsScrollController = this._rowsScrollController;
                        var newMode = false === this.option(LEGACY_SCROLLING_MODE);
                        var virtualPaging = isVirtualPaging(this);
                        if (rowsScrollController && !byLoadedRows) {
                            if (newMode && Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_10__["isDefined"])(this._loadViewportParams)) {
                                var {
                                    skipForCurrentPage: skipForCurrentPage,
                                    pageIndex: pageIndex
                                } = this.getLoadPageParams(true);
                                var items = this.items(true);
                                offset = virtualPaging ? pageIndex * this.pageSize() : 0;
                                if (items.length) {
                                    var firstLoadIndex = items[0].loadIndex;
                                    offset += items.filter(item => item.loadIndex < firstLoadIndex + skipForCurrentPage).length
                                }
                            } else {
                                offset = rowsScrollController.beginPageIndex() * rowsScrollController.pageSize()
                            }
                        } else if (virtualPaging && newMode && dataSource) {
                            var _dataSource$lastLoadO2;
                            offset = null !== (_dataSource$lastLoadO2 = dataSource.lastLoadOptions().skip) && void 0 !== _dataSource$lastLoadO2 ? _dataSource$lastLoadO2 : 0
                        } else if (isVirtualMode(this) && dataSource) {
                            offset = dataSource.beginPageIndex() * dataSource.pageSize()
                        }
                        return offset
                    },
                    viewportSize: function() {
                        var rowsScrollController = this._rowsScrollController;
                        var dataSource = this._dataSource;
                        var result = null === rowsScrollController || void 0 === rowsScrollController ? void 0 : rowsScrollController.viewportSize.apply(rowsScrollController, arguments);
                        if (false === this.option(LEGACY_SCROLLING_MODE)) {
                            return result
                        }
                        return null === dataSource || void 0 === dataSource ? void 0 : dataSource.viewportSize.apply(dataSource, arguments)
                    },
                    viewportHeight: function(height) {
                        var _this$_rowsScrollCont;
                        null === (_this$_rowsScrollCont = this._rowsScrollController) || void 0 === _this$_rowsScrollCont ? void 0 : _this$_rowsScrollCont.viewportHeight(height)
                    },
                    viewportItemSize: function() {
                        var rowsScrollController = this._rowsScrollController;
                        var dataSource = this._dataSource;
                        var result = null === rowsScrollController || void 0 === rowsScrollController ? void 0 : rowsScrollController.viewportItemSize.apply(rowsScrollController, arguments);
                        if (false === this.option(LEGACY_SCROLLING_MODE)) {
                            return result
                        }
                        return null === dataSource || void 0 === dataSource ? void 0 : dataSource.viewportItemSize.apply(dataSource, arguments)
                    },
                    setViewportPosition: function() {
                        var rowsScrollController = this._rowsScrollController;
                        var dataSource = this._dataSource;
                        if (rowsScrollController) {
                            rowsScrollController.setViewportPosition.apply(rowsScrollController, arguments)
                        } else {
                            null === dataSource || void 0 === dataSource ? void 0 : dataSource.setViewportPosition.apply(dataSource, arguments)
                        }
                    },
                    setContentItemSizes: function(sizes) {
                        var rowsScrollController = this._rowsScrollController;
                        var dataSource = this._dataSource;
                        var result = null === rowsScrollController || void 0 === rowsScrollController ? void 0 : rowsScrollController.setContentItemSizes(sizes);
                        if (false === this.option(LEGACY_SCROLLING_MODE)) {
                            return result
                        }
                        return null === dataSource || void 0 === dataSource ? void 0 : dataSource.setContentItemSizes(sizes)
                    },
                    getPreloadedRowCount: function() {
                        var preloadCount = this.option("scrolling.preloadedRowCount");
                        var preloadEnabled = this.option("scrolling.preloadEnabled");
                        if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_10__["isDefined"])(preloadCount)) {
                            return preloadCount
                        }
                        var viewportSize = this.viewportSize();
                        return preloadEnabled ? 2 * viewportSize : viewportSize
                    },
                    getLoadPageParams: function(byLoadedPage) {
                        var _this$_dataSource3, _this$_dataSource4;
                        var pageSize = this.pageSize();
                        var viewportParams = this._loadViewportParams;
                        var lastLoadOptions = null === (_this$_dataSource3 = this._dataSource) || void 0 === _this$_dataSource3 ? void 0 : _this$_dataSource3.lastLoadOptions();
                        var loadedPageIndex = (null === lastLoadOptions || void 0 === lastLoadOptions ? void 0 : lastLoadOptions.pageIndex) || 0;
                        var loadedTake = (null === lastLoadOptions || void 0 === lastLoadOptions ? void 0 : lastLoadOptions.take) || 0;
                        var isScrollingBack = this._rowsScrollController.isScrollingBack();
                        var topPreloadCount = isScrollingBack ? this.getPreloadedRowCount() : 0;
                        var bottomPreloadCount = isScrollingBack ? 0 : this.getPreloadedRowCount();
                        var totalCountCorrection = (null === (_this$_dataSource4 = this._dataSource) || void 0 === _this$_dataSource4 ? void 0 : _this$_dataSource4.totalCountCorrection()) || 0;
                        var skipWithPreload = Math.max(0, viewportParams.skip - topPreloadCount);
                        var pageIndex = byLoadedPage ? loadedPageIndex : Math.floor(pageSize ? skipWithPreload / pageSize : 0);
                        var pageOffset = pageIndex * pageSize;
                        var skipForCurrentPage = viewportParams.skip - pageOffset;
                        var loadingTake = viewportParams.take + skipForCurrentPage + bottomPreloadCount - totalCountCorrection;
                        var take = byLoadedPage ? loadedTake : loadingTake;
                        var loadPageCount = Math.ceil(pageSize ? take / pageSize : 0);
                        return {
                            pageIndex: pageIndex,
                            loadPageCount: Math.max(1, loadPageCount),
                            skipForCurrentPage: Math.max(0, skipForCurrentPage)
                        }
                    },
                    _updateVisiblePageIndex: function(currentPageIndex) {
                        if (!this._rowsScrollController) {
                            return
                        }
                        if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_10__["isDefined"])(currentPageIndex)) {
                            this._silentOption(VISIBLE_PAGE_INDEX, currentPageIndex);
                            this.pageChanged.fire();
                            return
                        }
                        var viewPortItemIndex = this._rowsScrollController.getViewportItemIndex();
                        var newPageIndex = Math.floor(viewPortItemIndex / this.pageSize());
                        if (this.pageIndex() !== newPageIndex) {
                            this._silentOption(VISIBLE_PAGE_INDEX, newPageIndex);
                            this.updateItems({
                                changeType: "pageIndex"
                            })
                        }
                    },
                    _getChangedLoadParams: function() {
                        var loadedPageParams = this.getLoadPageParams(true);
                        var {
                            pageIndex: pageIndex,
                            loadPageCount: loadPageCount
                        } = this.getLoadPageParams();
                        var pageIndexIsValid = this._pageIndexIsValid(pageIndex);
                        var result = null;
                        if (!this._isLoading && pageIndexIsValid && (pageIndex !== loadedPageParams.pageIndex || loadPageCount !== loadedPageParams.loadPageCount)) {
                            result = {
                                pageIndex: pageIndex,
                                loadPageCount: loadPageCount
                            }
                        }
                        return result
                    },
                    _pageIndexIsValid: function(pageIndex) {
                        var result = true;
                        if (isAppendMode(this) && this.hasKnownLastPage() || isVirtualMode(this)) {
                            result = pageIndex * this.pageSize() < this.totalItemsCount()
                        }
                        return result
                    },
                    _loadItems: function(checkLoading) {
                        var _dataSourceAdapter$lo, _dataSourceAdapter$pa;
                        var virtualPaging = isVirtualPaging(this);
                        var dataSourceAdapter = this._dataSource;
                        var changedParams = this._getChangedLoadParams();
                        var currentLoadPageCount = null !== (_dataSourceAdapter$lo = null === dataSourceAdapter || void 0 === dataSourceAdapter ? void 0 : dataSourceAdapter.loadPageCount()) && void 0 !== _dataSourceAdapter$lo ? _dataSourceAdapter$lo : 0;
                        var lastRequiredItemCount = this.pageSize() * currentLoadPageCount;
                        var currentPageIndex = null !== (_dataSourceAdapter$pa = null === dataSourceAdapter || void 0 === dataSourceAdapter ? void 0 : dataSourceAdapter.pageIndex()) && void 0 !== _dataSourceAdapter$pa ? _dataSourceAdapter$pa : 0;
                        var pageIndexNotChanged = (null === changedParams || void 0 === changedParams ? void 0 : changedParams.pageIndex) === currentPageIndex;
                        var allLoadedInAppendMode = isAppendMode(this) && this.totalItemsCount() < lastRequiredItemCount;
                        var result = false;
                        if (!dataSourceAdapter || virtualPaging && checkLoading && ((null === changedParams || void 0 === changedParams ? void 0 : changedParams.pageIndex) > currentPageIndex || pageIndexNotChanged && allLoadedInAppendMode)) {
                            return result
                        }
                        if (virtualPaging && this._isLoading) {
                            this._needUpdateViewportAfterLoading = true
                        }
                        if (virtualPaging && changedParams) {
                            result = true;
                            dataSourceAdapter.pageIndex(changedParams.pageIndex);
                            dataSourceAdapter.loadPageCount(changedParams.loadPageCount);
                            this._repaintChangesOnly = true;
                            this._needUpdateDimensions = true;
                            var viewportChanging = this._viewportChanging;
                            this.load().always(() => {
                                this._repaintChangesOnly = void 0;
                                this._needUpdateDimensions = void 0
                            }).done(() => {
                                var isLastPage = this.pageCount() > 0 && this.pageIndex() === this.pageCount() - 1;
                                (viewportChanging || isLastPage) && this._updateVisiblePageIndex();
                                if (this._needUpdateViewportAfterLoading) {
                                    this._needUpdateViewportAfterLoading = false;
                                    this.loadViewport({
                                        checkLoadedParamsOnly: true
                                    })
                                }
                            })
                        }
                        return result
                    },
                    loadViewport: function(params) {
                        var {
                            checkLoadedParamsOnly: checkLoadedParamsOnly,
                            checkLoading: checkLoading
                        } = null !== params && void 0 !== params ? params : {};
                        var virtualPaging = isVirtualPaging(this);
                        if (virtualPaging || _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_4__["default"].isVirtualRowRendering(this)) {
                            this._updateLoadViewportParams();
                            var loadingItemsStarted = this._loadItems(checkLoading);
                            if (!loadingItemsStarted && !(this._isLoading && checkLoading) && !checkLoadedParamsOnly) {
                                this.updateItems({
                                    repaintChangesOnly: true,
                                    needUpdateDimensions: true,
                                    useProcessedItemsCache: true,
                                    cancelEmptyChanges: true
                                })
                            }
                        }
                    },
                    updateViewport: function() {
                        var _this$_loadViewportPa, _this$_loadViewportPa2;
                        var viewportSize = this.viewportSize();
                        var itemCount = this.items().length;
                        var viewportIsNotFilled = viewportSize > itemCount;
                        var currentTake = null !== (_this$_loadViewportPa = null === (_this$_loadViewportPa2 = this._loadViewportParams) || void 0 === _this$_loadViewportPa2 ? void 0 : _this$_loadViewportPa2.take) && void 0 !== _this$_loadViewportPa ? _this$_loadViewportPa : 0;
                        var rowsScrollController = this._rowsScrollController;
                        var newTake = null === rowsScrollController || void 0 === rowsScrollController ? void 0 : rowsScrollController.getViewportParams().take;
                        (viewportIsNotFilled || currentTake < newTake) && itemCount && this.loadViewport({
                            checkLoading: true
                        })
                    },
                    loadIfNeed: function() {
                        if (false === this.option(LEGACY_SCROLLING_MODE)) {
                            return
                        }
                        var rowsScrollController = this._rowsScrollController;
                        rowsScrollController && rowsScrollController.loadIfNeed();
                        var dataSource = this._dataSource;
                        return dataSource && dataSource.loadIfNeed()
                    },
                    getItemSize: function() {
                        var rowsScrollController = this._rowsScrollController;
                        if (rowsScrollController) {
                            return rowsScrollController.getItemSize.apply(rowsScrollController, arguments)
                        }
                        var dataSource = this._dataSource;
                        return dataSource && dataSource.getItemSize.apply(dataSource, arguments)
                    },
                    getItemSizes: function() {
                        var rowsScrollController = this._rowsScrollController;
                        if (rowsScrollController) {
                            return rowsScrollController.getItemSizes.apply(rowsScrollController, arguments)
                        }
                        var dataSource = this._dataSource;
                        return dataSource && dataSource.getItemSizes.apply(dataSource, arguments)
                    },
                    getContentOffset: function() {
                        var rowsScrollController = this._rowsScrollController;
                        if (rowsScrollController) {
                            return rowsScrollController.getContentOffset.apply(rowsScrollController, arguments)
                        }
                        var dataSource = this._dataSource;
                        return dataSource && dataSource.getContentOffset.apply(dataSource, arguments)
                    },
                    refresh: function(options) {
                        var dataSource = this._dataSource;
                        if (dataSource && options && options.load && isAppendMode(this)) {
                            dataSource.resetCurrentTotalCount()
                        }
                        return this.callBase.apply(this, arguments)
                    },
                    dispose: function() {
                        var rowsScrollController = this._rowsScrollController;
                        rowsScrollController && rowsScrollController.dispose();
                        this.callBase.apply(this, arguments)
                    },
                    topItemIndex: function() {
                        var _this$_loadViewportPa3;
                        return null === (_this$_loadViewportPa3 = this._loadViewportParams) || void 0 === _this$_loadViewportPa3 ? void 0 : _this$_loadViewportPa3.skip
                    },
                    bottomItemIndex: function() {
                        var viewportParams = this._loadViewportParams;
                        return viewportParams && viewportParams.skip + viewportParams.take
                    },
                    virtualItemsCount: function() {
                        var rowsScrollController = this._rowsScrollController;
                        if (rowsScrollController) {
                            return rowsScrollController.virtualItemsCount.apply(rowsScrollController, arguments)
                        }
                        var dataSource = this._dataSource;
                        return null === dataSource || void 0 === dataSource ? void 0 : dataSource.virtualItemsCount.apply(dataSource, arguments)
                    },
                    pageIndex: function(_pageIndex) {
                        var virtualPaging = isVirtualPaging(this);
                        var rowsScrollController = this._rowsScrollController;
                        if (false === this.option(LEGACY_SCROLLING_MODE) && virtualPaging && rowsScrollController) {
                            if (void 0 === _pageIndex) {
                                var _this$option;
                                return null !== (_this$option = this.option(VISIBLE_PAGE_INDEX)) && void 0 !== _this$option ? _this$option : 0
                            }
                        }
                        return this.callBase.apply(this, arguments)
                    },
                    _fireChanged: function(e) {
                        this.callBase.apply(this, arguments);
                        var {
                            operationTypes: operationTypes
                        } = e;
                        if (false === this.option(LEGACY_SCROLLING_MODE) && isVirtualPaging(this) && operationTypes) {
                            var {
                                fullReload: fullReload,
                                pageIndex: pageIndex
                            } = operationTypes;
                            if (e.isDataChanged && !fullReload && pageIndex) {
                                this._updateVisiblePageIndex(this._dataSource.pageIndex())
                            }
                        }
                    },
                    _getPagingOptionValue: function(optionName) {
                        var result = this.callBase.apply(this, arguments);
                        if (false === this.option(LEGACY_SCROLLING_MODE) && isVirtualPaging(this)) {
                            result = this[optionName]()
                        }
                        return result
                    },
                    isEmpty: function() {
                        return false === this.option(LEGACY_SCROLLING_MODE) ? !this.items(true).length : this.callBase(this, arguments)
                    },
                    isLastPageLoaded: function() {
                        var result = false;
                        if (false === this.option(LEGACY_SCROLLING_MODE) && isVirtualPaging(this)) {
                            var {
                                pageIndex: pageIndex,
                                loadPageCount: loadPageCount
                            } = this.getLoadPageParams(true);
                            var pageCount = this.pageCount();
                            result = pageIndex + loadPageCount >= pageCount
                        } else {
                            result = this.callBase.apply(this, arguments)
                        }
                        return result
                    },
                    reset: function() {
                        this._itemCount = 0;
                        this._allItems = null;
                        this.callBase.apply(this, arguments)
                    }
                };
                _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_4__["default"].proxyMethod(members, "getVirtualContentSize");
                _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_4__["default"].proxyMethod(members, "setViewportItemIndex");
                return members
            }(),
            resizing: {
                resize: function() {
                    var that = this;
                    var callBase = that.callBase;
                    var result;
                    if (isVirtualMode(that) || _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_4__["default"].isVirtualRowRendering(that)) {
                        clearTimeout(that._resizeTimeout);
                        var diff = new Date - that._lastTime;
                        var updateTimeout = that.option("scrolling.updateTimeout");
                        if (that._lastTime && diff < updateTimeout) {
                            result = new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_6__["Deferred"];
                            that._resizeTimeout = setTimeout((function() {
                                callBase.apply(that).done(result.resolve).fail(result.reject);
                                that._lastTime = new Date
                            }), updateTimeout);
                            that._lastTime = new Date
                        } else {
                            result = callBase.apply(that);
                            if (that._dataController.isLoaded()) {
                                that._lastTime = new Date
                            }
                        }
                    } else {
                        result = callBase.apply(that)
                    }
                    return result
                },
                dispose: function() {
                    this.callBase.apply(this, arguments);
                    clearTimeout(this._resizeTimeout)
                }
            }
        },
        views: {
            rowsView: VirtualScrollingRowsViewExtender
        }
    }
};


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.virtual_scrolling_core.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.virtual_scrolling_core.js ***!
  \*****************************************************************************************/
/*! exports provided: subscribeToExternalScrollers, VirtualScrollController */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "subscribeToExternalScrollers", function() { return subscribeToExternalScrollers; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VirtualScrollController", function() { return VirtualScrollController; });
/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/renderer */ "./node_modules/devextreme/esm/core/renderer.js");
/* harmony import */ var _core_utils_window__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/utils/window */ "./node_modules/devextreme/esm/core/utils/window.js");
/* harmony import */ var _events_core_events_engine__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../events/core/events_engine */ "./node_modules/devextreme/esm/events/core/events_engine.js");
/* harmony import */ var _core_utils_browser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/utils/browser */ "./node_modules/devextreme/esm/core/utils/browser.js");
/* harmony import */ var _animation_position__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../animation/position */ "./node_modules/devextreme/esm/animation/position.js");
/* harmony import */ var _core_utils_iterator__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core/utils/iterator */ "./node_modules/devextreme/esm/core/utils/iterator.js");
/* harmony import */ var _core_class__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../core/class */ "./node_modules/devextreme/esm/core/class.js");
/* harmony import */ var _core_utils_deferred__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../core/utils/deferred */ "./node_modules/devextreme/esm/core/utils/deferred.js");
/* harmony import */ var _core_utils_callbacks__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../core/utils/callbacks */ "./node_modules/devextreme/esm/core/utils/callbacks.js");
/* harmony import */ var _ui_grid_core_virtual_data_loader__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./ui.grid.core.virtual_data_loader */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid.core.virtual_data_loader.js");
/* harmony import */ var _core_utils_type__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../core/utils/type */ "./node_modules/devextreme/esm/core/utils/type.js");
/* harmony import */ var _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./ui.grid_core.utils */ "./node_modules/devextreme/esm/ui/grid_core/ui.grid_core.utils.js");
/**
 * DevExtreme (esm/ui/grid_core/ui.grid_core.virtual_scrolling_core.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */












var SCROLLING_MODE_INFINITE = "infinite";
var SCROLLING_MODE_VIRTUAL = "virtual";
var LEGACY_SCROLLING_MODE = "scrolling.legacyMode";
var _isVirtualMode = that => that.option("scrolling.mode") === SCROLLING_MODE_VIRTUAL || that._isVirtual;
var _isAppendMode = that => that.option("scrolling.mode") === SCROLLING_MODE_INFINITE && !that._isVirtual;
function subscribeToExternalScrollers($element, scrollChangedHandler, $targetElement) {
    var $scrollElement;
    var scrollableArray = [];
    var scrollToArray = [];
    var disposeArray = [];
    $targetElement = $targetElement || $element;

    function getElementOffset(scrollable) {
        var $scrollableElement = scrollable.element ? scrollable.$element() : scrollable;
        var scrollableOffset = _animation_position__WEBPACK_IMPORTED_MODULE_4__["default"].offset($scrollableElement);
        if (!scrollableOffset) {
            return $element.offset().top
        }
        return scrollable.scrollTop() - (scrollableOffset.top - $element.offset().top)
    }
    var widgetScrollStrategy = {
        on: function(scrollable, eventName, handler) {
            scrollable.on("scroll", handler)
        },
        off: function(scrollable, eventName, handler) {
            scrollable.off("scroll", handler)
        }
    };

    function subscribeToScrollEvents($scrollElement) {
        var isDocument = "#document" === $scrollElement.get(0).nodeName;
        var scrollable = $scrollElement.data("dxScrollable");
        var eventsStrategy = widgetScrollStrategy;
        if (!scrollable) {
            scrollable = isDocument && Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(Object(_core_utils_window__WEBPACK_IMPORTED_MODULE_1__["getWindow"])()) || "auto" === $scrollElement.css("overflowY") && $scrollElement;
            eventsStrategy = _events_core_events_engine__WEBPACK_IMPORTED_MODULE_2__["default"];
            if (!scrollable) {
                return
            }
        }
        var handler = function(scrollable) {
            return function() {
                var scrollTop = scrollable.scrollTop() - getElementOffset(scrollable);
                scrollTop = scrollTop > 0 ? scrollTop : 0;
                scrollChangedHandler(scrollTop)
            }
        }(scrollable);
        eventsStrategy.on(scrollable, "scroll", handler);
        scrollToArray.push((function(pos) {
            var topOffset = getElementOffset(scrollable);
            var scrollMethod = scrollable.scrollTo ? "scrollTo" : "scrollTop";
            if (pos - topOffset >= 0) {
                scrollable[scrollMethod](pos + topOffset)
            }
        }));
        scrollableArray.push(scrollable);
        disposeArray.push((function() {
            eventsStrategy.off(scrollable, "scroll", handler)
        }))
    }
    for ($scrollElement = $targetElement.parent(); $scrollElement.length; $scrollElement = $scrollElement.parent()) {
        subscribeToScrollEvents($scrollElement)
    }
    return {
        scrollTo: function(pos) {
            Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_5__["each"])(scrollToArray, (function(_, scrollTo) {
                scrollTo(pos)
            }))
        },
        dispose: function() {
            Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_5__["each"])(disposeArray, (function(_, dispose) {
                dispose()
            }))
        }
    }
}
var VirtualScrollController = _core_class__WEBPACK_IMPORTED_MODULE_6__["default"].inherit(function() {
    var members = {
        ctor: function(component, dataOptions, isVirtual) {
            this._dataOptions = dataOptions;
            this.component = component;
            this._viewportSize = false === component.option(LEGACY_SCROLLING_MODE) ? 15 : 0;
            this._viewportItemSize = 20;
            this._viewportItemIndex = 0;
            this._position = 0;
            this._isScrollingBack = false;
            this._contentSize = 0;
            this._itemSizes = {};
            this._sizeRatio = 1;
            this._isVirtual = isVirtual;
            this.positionChanged = Object(_core_utils_callbacks__WEBPACK_IMPORTED_MODULE_8__["default"])();
            this._dataLoader = new _ui_grid_core_virtual_data_loader__WEBPACK_IMPORTED_MODULE_9__["VirtualDataLoader"](this, this._dataOptions)
        },
        getItemSizes: function() {
            return this._itemSizes
        },
        option: function() {
            return this.component.option.apply(this.component, arguments)
        },
        isVirtual: function() {
            return this._isVirtual
        },
        virtualItemsCount: function() {
            if (_isVirtualMode(this)) {
                var dataOptions = this._dataOptions;
                var totalItemsCount = dataOptions.totalItemsCount();
                if (false === this.option(LEGACY_SCROLLING_MODE) && -1 !== totalItemsCount) {
                    var viewportParams = this.getViewportParams();
                    var loadedOffset = dataOptions.loadedOffset();
                    var loadedItemCount = dataOptions.loadedItemCount();
                    var skip = Math.max(viewportParams.skip, loadedOffset);
                    var take = Math.min(viewportParams.take, loadedItemCount);
                    var endItemsCount = Math.max(totalItemsCount - (skip + take), 0);
                    return {
                        begin: skip,
                        end: endItemsCount
                    }
                }
                return this._dataLoader.virtualItemsCount.apply(this._dataLoader, arguments)
            }
        },
        getScrollingTimeout: function() {
            var renderAsync = this.option("scrolling.renderAsync");
            var scrollingTimeout = 0;
            if (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_10__["isDefined"])(renderAsync)) {
                scrollingTimeout = Math.min(this.option("scrolling.timeout") || 0, this._dataOptions.changingDuration());
                if (scrollingTimeout < this.option("scrolling.renderingThreshold")) {
                    scrollingTimeout = this.option("scrolling.minTimeout") || 0
                }
            } else if (renderAsync) {
                var _this$option;
                scrollingTimeout = null !== (_this$option = this.option("scrolling.timeout")) && void 0 !== _this$option ? _this$option : 0
            }
            return scrollingTimeout
        },
        setViewportPosition: function(position) {
            var result = new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_7__["Deferred"];
            var scrollingTimeout = this.getScrollingTimeout();
            clearTimeout(this._scrollTimeoutID);
            if (scrollingTimeout > 0) {
                this._scrollTimeoutID = setTimeout(() => {
                    this._setViewportPositionCore(position);
                    result.resolve()
                }, scrollingTimeout)
            } else {
                this._setViewportPositionCore(position);
                result.resolve()
            }
            return result.promise()
        },
        getViewportPosition: function() {
            return this._position
        },
        getItemIndexByPosition: function(position) {
            var _position;
            position = null !== (_position = position) && void 0 !== _position ? _position : this._position;
            var defaultItemSize = this.getItemSize();
            var offset = 0;
            var itemOffset = 0;
            var itemOffsetsWithSize = Object.keys(this._itemSizes).concat(-1);
            for (var i = 0; i < itemOffsetsWithSize.length && offset < position; i++) {
                var itemOffsetWithSize = parseInt(itemOffsetsWithSize[i]);
                var itemOffsetDiff = (position - offset) / defaultItemSize;
                if (itemOffsetWithSize < 0 || itemOffset + itemOffsetDiff < itemOffsetWithSize) {
                    itemOffset += itemOffsetDiff;
                    break
                } else {
                    itemOffsetDiff = itemOffsetWithSize - itemOffset;
                    offset += itemOffsetDiff * defaultItemSize;
                    itemOffset += itemOffsetDiff
                }
                var itemSize = this._itemSizes[itemOffsetWithSize];
                offset += itemSize;
                itemOffset += offset < position ? 1 : (position - offset + itemSize) / itemSize
            }
            return Math.round(50 * itemOffset) / 50
        },
        isScrollingBack: function() {
            return this._isScrollingBack
        },
        _setViewportPositionCore: function(position) {
            var prevPosition = this._position || 0;
            this._position = position;
            if (prevPosition !== this._position) {
                this._isScrollingBack = this._position < prevPosition
            }
            var itemIndex = this.getItemIndexByPosition();
            var result = this.setViewportItemIndex(itemIndex);
            this.positionChanged.fire();
            return result
        },
        setContentItemSizes: function(sizes) {
            var virtualItemsCount = this.virtualItemsCount();
            this._contentSize = sizes.reduce((a, b) => a + b, 0);
            if (virtualItemsCount) {
                sizes.forEach((size, index) => {
                    this._itemSizes[virtualItemsCount.begin + index] = size
                });
                var virtualContentSize = (virtualItemsCount.begin + virtualItemsCount.end + this.itemsCount()) * this._viewportItemSize;
                var contentHeightLimit = _ui_grid_core_utils__WEBPACK_IMPORTED_MODULE_11__["default"].getContentHeightLimit(_core_utils_browser__WEBPACK_IMPORTED_MODULE_3__["default"]);
                if (virtualContentSize > contentHeightLimit) {
                    this._sizeRatio = contentHeightLimit / virtualContentSize
                } else {
                    this._sizeRatio = 1
                }
            }
        },
        getItemSize: function() {
            return this._viewportItemSize * this._sizeRatio
        },
        getItemOffset: function(itemIndex, isEnd) {
            var virtualItemsCount = this.virtualItemsCount();
            var itemCount = itemIndex;
            if (!virtualItemsCount) {
                return 0
            }
            var offset = 0;
            var totalItemsCount = this._dataOptions.totalItemsCount();
            Object.keys(this._itemSizes).forEach(currentItemIndex => {
                if (!itemCount) {
                    return
                }
                if (isEnd ? currentItemIndex >= totalItemsCount - itemIndex : currentItemIndex < itemIndex) {
                    offset += this._itemSizes[currentItemIndex];
                    itemCount--
                }
            });
            return Math.floor(offset + itemCount * this._viewportItemSize * this._sizeRatio)
        },
        getContentOffset: function(type) {
            var isEnd = "end" === type;
            var virtualItemsCount = this.virtualItemsCount();
            if (!virtualItemsCount) {
                return 0
            }
            return this.getItemOffset(isEnd ? virtualItemsCount.end : virtualItemsCount.begin, isEnd)
        },
        getVirtualContentSize: function() {
            var virtualItemsCount = this.virtualItemsCount();
            return virtualItemsCount ? this.getContentOffset("begin") + this.getContentOffset("end") + this._contentSize : 0
        },
        getViewportItemIndex: function() {
            return this._viewportItemIndex
        },
        setViewportItemIndex: function(itemIndex) {
            this._viewportItemIndex = itemIndex;
            if (false === this.option(LEGACY_SCROLLING_MODE)) {
                return
            }
            return this._dataLoader.viewportItemIndexChanged.apply(this._dataLoader, arguments)
        },
        viewportItemSize: function(size) {
            if (void 0 !== size) {
                this._viewportItemSize = size
            }
            return this._viewportItemSize
        },
        viewportSize: function(size) {
            if (void 0 !== size) {
                this._viewportSize = size
            }
            return this._viewportSize
        },
        viewportHeight: function(height) {
            var begin = this.getItemIndexByPosition();
            var end = this.getItemIndexByPosition(this._position + height);
            this.viewportSize(Math.ceil(end - begin));
            if (this._viewportItemIndex !== begin) {
                this._setViewportPositionCore(this._position)
            }
        },
        reset: function(isRefresh) {
            this._dataLoader.reset();
            if (!isRefresh) {
                this._itemSizes = {}
            }
        },
        subscribeToWindowScrollEvents: function($element) {
            this._windowScroll = this._windowScroll || subscribeToExternalScrollers($element, scrollTop => {
                if (this.viewportItemSize()) {
                    this.setViewportPosition(scrollTop)
                }
            })
        },
        dispose: function() {
            clearTimeout(this._scrollTimeoutID);
            this._windowScroll && this._windowScroll.dispose();
            this._windowScroll = null
        },
        scrollTo: function(pos) {
            this._windowScroll && this._windowScroll.scrollTo(pos)
        },
        isVirtualMode: function() {
            return _isVirtualMode(this)
        },
        isAppendMode: function() {
            return _isAppendMode(this)
        },
        getViewportParams: function() {
            var _this$option2;
            var virtualMode = this.option("scrolling.mode") === SCROLLING_MODE_VIRTUAL;
            var totalItemsCount = this._dataOptions.totalItemsCount();
            var hasKnownLastPage = this._dataOptions.hasKnownLastPage();
            var topIndex = hasKnownLastPage && this._viewportItemIndex > totalItemsCount ? totalItemsCount : this._viewportItemIndex;
            var bottomIndex = this._viewportSize + topIndex;
            var maxGap = this.option("scrolling.prerenderedRowChunkSize") || 1;
            var isScrollingBack = this.isScrollingBack();
            var minGap = null !== (_this$option2 = this.option("scrolling.prerenderedRowCount")) && void 0 !== _this$option2 ? _this$option2 : 1;
            var topMinGap = isScrollingBack ? minGap : 0;
            var bottomMinGap = isScrollingBack ? 0 : minGap;
            var skip = Math.floor(Math.max(0, topIndex - topMinGap) / maxGap) * maxGap;
            var take = Math.ceil((bottomIndex + bottomMinGap - skip) / maxGap) * maxGap;
            if (virtualMode) {
                var remainedItems = Math.max(0, totalItemsCount - skip);
                take = Math.min(take, remainedItems)
            }
            return {
                skip: skip,
                take: take
            }
        },
        itemsCount: function() {
            var result = 0;
            if (this.option(LEGACY_SCROLLING_MODE)) {
                result = this._dataLoader.itemsCount.apply(this._dataLoader, arguments)
            } else {
                result = this._dataOptions.itemsCount()
            }
            return result
        }
    };
    ["pageIndex", "beginPageIndex", "endPageIndex", "pageSize", "load", "loadIfNeed", "handleDataChanged", "getDelayDeferred"].forEach((function(name) {
        members[name] = function() {
            return this._dataLoader[name].apply(this._dataLoader, arguments)
        }
    }));
    return members
}());


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/hierarchical_collection/ui.data_adapter.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/hierarchical_collection/ui.data_adapter.js ***!
  \***********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _core_class__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/class */ "./node_modules/devextreme/esm/core/class.js");
/* harmony import */ var _core_utils_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/utils/common */ "./node_modules/devextreme/esm/core/utils/common.js");
/* harmony import */ var _core_utils_iterator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/utils/iterator */ "./node_modules/devextreme/esm/core/utils/iterator.js");
/* harmony import */ var _core_utils_type__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/utils/type */ "./node_modules/devextreme/esm/core/utils/type.js");
/* harmony import */ var _core_utils_extend__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/utils/extend */ "./node_modules/devextreme/esm/core/utils/extend.js");
/* harmony import */ var _ui_widget_ui_errors__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../ui/widget/ui.errors */ "./node_modules/devextreme/esm/ui/widget/ui.errors.js");
/* harmony import */ var _ui_widget_ui_search_box_mixin__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../ui/widget/ui.search_box_mixin */ "./node_modules/devextreme/esm/ui/widget/ui.search_box_mixin.js");
/* harmony import */ var _ui_text_box__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../ui/text_box */ "./node_modules/devextreme/esm/ui/text_box.js");
/* harmony import */ var _core_utils_array__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../core/utils/array */ "./node_modules/devextreme/esm/core/utils/array.js");
/* harmony import */ var _data_query__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../data/query */ "./node_modules/devextreme/esm/data/query.js");
/* harmony import */ var _data_store_helper__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../data/store_helper */ "./node_modules/devextreme/esm/data/store_helper.js");
/* harmony import */ var _ui_data_converter__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./ui.data_converter */ "./node_modules/devextreme/esm/ui/hierarchical_collection/ui.data_converter.js");
/**
 * DevExtreme (esm/ui/hierarchical_collection/ui.data_adapter.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */












var EXPANDED = "expanded";
var SELECTED = "selected";
var DISABLED = "disabled";
_ui_widget_ui_search_box_mixin__WEBPACK_IMPORTED_MODULE_6__["default"].setEditorClass(_ui_text_box__WEBPACK_IMPORTED_MODULE_7__["default"]);
var DataAdapter = _core_class__WEBPACK_IMPORTED_MODULE_0__["default"].inherit({
    ctor: function(options) {
        this.options = {};
        Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_4__["extend"])(this.options, this._defaultOptions(), options);
        this.options.dataConverter.setDataAccessors(this.options.dataAccessors);
        this._selectedNodesKeys = [];
        this._expandedNodesKeys = [];
        this._dataStructure = [];
        this._createInternalDataStructure();
        this.getTreeNodes()
    },
    setOption: function(name, value) {
        this.options[name] = value;
        if ("recursiveSelection" === name) {
            this._updateSelection()
        }
    },
    _defaultOptions: function() {
        return {
            dataAccessors: void 0,
            items: [],
            multipleSelection: true,
            recursiveSelection: false,
            recursiveExpansion: false,
            rootValue: 0,
            searchValue: "",
            dataType: "tree",
            searchMode: "contains",
            dataConverter: new _ui_data_converter__WEBPACK_IMPORTED_MODULE_11__["default"],
            onNodeChanged: _core_utils_common__WEBPACK_IMPORTED_MODULE_1__["noop"],
            sort: null
        }
    },
    _createInternalDataStructure: function() {
        this._initialDataStructure = this.options.dataConverter.createPlainStructure(this.options.items, this.options.rootValue, this.options.dataType);
        this._dataStructure = this.options.searchValue.length ? this.search(this.options.searchValue) : this._initialDataStructure;
        this.options.dataConverter._dataStructure = this._dataStructure;
        this._updateSelection();
        this._updateExpansion()
    },
    _updateSelection: function() {
        if (this.options.recursiveSelection) {
            this._setChildrenSelection();
            this._setParentSelection()
        }
        this._selectedNodesKeys = this._updateNodesKeysArray(SELECTED)
    },
    _updateExpansion: function(key) {
        if (this.options.recursiveExpansion) {
            key ? this._updateOneBranch(key) : this._setParentExpansion()
        }
        this._expandedNodesKeys = this._updateNodesKeysArray(EXPANDED)
    },
    _updateNodesKeysArray: function(property) {
        var that = this;
        var array = [];
        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_2__["each"])(that._getDataBySelectionMode(), (function(_, node) {
            if (!that._isNodeVisible(node)) {
                return
            }
            if (node.internalFields[property]) {
                if (property === EXPANDED || that.options.multipleSelection) {
                    array.push(node.internalFields.key)
                } else {
                    array.length && that.toggleSelection(array[0], false, true);
                    array = [node.internalFields.key]
                }
            }
        }));
        return array
    },
    _getDataBySelectionMode: function() {
        return this.options.multipleSelection ? this.getData() : this.getFullData()
    },
    _isNodeVisible: function(node) {
        return false !== node.internalFields.item.visible
    },
    _getByKey: function(data, key) {
        return data === this._dataStructure ? this.options.dataConverter._getByKey(key) : this.options.dataConverter.getByKey(data, key)
    },
    _setChildrenSelection: function() {
        var that = this;
        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_2__["each"])(this._dataStructure, (function(_, node) {
            if (!node.internalFields.childrenKeys.length) {
                return
            }
            var isSelected = node.internalFields.selected;
            true === isSelected && that._toggleChildrenSelection(node, isSelected)
        }))
    },
    _setParentSelection: function() {
        var that = this;
        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_2__["each"])(this._dataStructure, (function(_, node) {
            var parent = that.options.dataConverter.getParentNode(node);
            if (parent && node.internalFields.parentKey !== that.options.rootValue) {
                that._iterateParents(node, (function(parent) {
                    var newParentState = that._calculateSelectedState(parent);
                    that._setFieldState(parent, SELECTED, newParentState)
                }))
            }
        }))
    },
    _setParentExpansion: function() {
        var that = this;
        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_2__["each"])(this._dataStructure, (function(_, node) {
            if (!node.internalFields.expanded) {
                return
            }
            that._updateOneBranch(node.internalFields.key)
        }))
    },
    _updateOneBranch: function(key) {
        var that = this;
        var node = this.getNodeByKey(key);
        that._iterateParents(node, (function(parent) {
            that._setFieldState(parent, EXPANDED, true)
        }))
    },
    _iterateChildren: function(node, recursive, callback, processedKeys) {
        if (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_3__["isFunction"])(callback)) {
            return
        }
        var that = this;
        var nodeKey = node.internalFields.key;
        processedKeys = processedKeys || [];
        if (-1 === processedKeys.indexOf(nodeKey)) {
            processedKeys.push(nodeKey);
            Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_2__["each"])(node.internalFields.childrenKeys, (function(_, key) {
                var child = that.getNodeByKey(key);
                callback(child);
                if (child.internalFields.childrenKeys.length && recursive) {
                    that._iterateChildren(child, recursive, callback, processedKeys)
                }
            }))
        }
    },
    _iterateParents: function(node, callback, processedKeys) {
        if (node.internalFields.parentKey === this.options.rootValue || !Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_3__["isFunction"])(callback)) {
            return
        }
        processedKeys = processedKeys || [];
        var key = node.internalFields.key;
        if (-1 === processedKeys.indexOf(key)) {
            processedKeys.push(key);
            var parent = this.options.dataConverter.getParentNode(node);
            if (parent) {
                callback(parent);
                if (parent.internalFields.parentKey !== this.options.rootValue) {
                    this._iterateParents(parent, callback, processedKeys)
                }
            }
        }
    },
    _calculateSelectedState: function(node) {
        var itemsCount = node.internalFields.childrenKeys.length;
        var selectedItemsCount = 0;
        var invisibleItemsCount = 0;
        var result = false;
        for (var i = 0; i <= itemsCount - 1; i++) {
            var childNode = this.getNodeByKey(node.internalFields.childrenKeys[i]);
            var isChildInvisible = false === childNode.internalFields.item.visible;
            var childState = childNode.internalFields.selected;
            if (isChildInvisible) {
                invisibleItemsCount++;
                continue
            }
            if (childState) {
                selectedItemsCount++
            } else if (void 0 === childState) {
                selectedItemsCount += .5
            }
        }
        if (selectedItemsCount) {
            result = selectedItemsCount === itemsCount - invisibleItemsCount ? true : void 0
        }
        return result
    },
    _toggleChildrenSelection: function(node, state) {
        var that = this;
        this._iterateChildren(node, true, (function(child) {
            if (that._isNodeVisible(child)) {
                that._setFieldState(child, SELECTED, state)
            }
        }))
    },
    _setFieldState: function(node, field, state) {
        if (node.internalFields[field] === state) {
            return
        }
        node.internalFields[field] = state;
        if (node.internalFields.publicNode) {
            node.internalFields.publicNode[field] = state
        }
        this.options.dataAccessors.setters[field](node.internalFields.item, state);
        this.options.onNodeChanged(node)
    },
    _markChildren: function(keys) {
        var that = this;
        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_2__["each"])(keys, (function(_, key) {
            var index = that.getIndexByKey(key);
            var node = that.getNodeByKey(key);
            that._dataStructure[index] = 0;
            node.internalFields.childrenKeys.length && that._markChildren(node.internalFields.childrenKeys)
        }))
    },
    _removeNode: function(key) {
        var node = this.getNodeByKey(key);
        this._dataStructure[this.getIndexByKey(key)] = 0;
        this._markChildren(node.internalFields.childrenKeys);
        var that = this;
        var counter = 0;
        var items = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_4__["extend"])([], this._dataStructure);
        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_2__["each"])(items, (function(index, item) {
            if (!item) {
                that._dataStructure.splice(index - counter, 1);
                counter++
            }
        }))
    },
    _addNode: function(item) {
        var dataConverter = this.options.dataConverter;
        var node = dataConverter._convertItemToNode(item, this.options.dataAccessors.getters.parentKey(item));
        this._dataStructure = this._dataStructure.concat(node);
        this._initialDataStructure = this._initialDataStructure.concat(node);
        dataConverter._dataStructure = dataConverter._dataStructure.concat(node)
    },
    _updateFields: function() {
        this.options.dataConverter.updateChildrenKeys();
        this._updateSelection();
        this._updateExpansion()
    },
    getSelectedNodesKeys: function() {
        return this._selectedNodesKeys
    },
    getExpandedNodesKeys: function() {
        return this._expandedNodesKeys
    },
    getData: function() {
        return this._dataStructure
    },
    getFullData: function() {
        return this._initialDataStructure
    },
    getNodeByItem: function(item) {
        var result = null;
        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_2__["each"])(this._dataStructure, (function(_, node) {
            if (node.internalFields.item === item) {
                result = node;
                return false
            }
        }));
        return result
    },
    getNodesByItems: function(items) {
        var that = this;
        var nodes = [];
        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_2__["each"])(items, (function(_, item) {
            var node = that.getNodeByItem(item);
            node && nodes.push(node)
        }));
        return nodes
    },
    getNodeByKey: function(key, data) {
        return this._getByKey(data || this._getDataBySelectionMode(), key)
    },
    getTreeNodes: function() {
        return this.options.dataConverter.convertToPublicNodes(this.getRootNodes())
    },
    getItemsCount: function() {
        return this.options.dataConverter.getItemsCount()
    },
    getVisibleItemsCount: function() {
        return this.options.dataConverter.getVisibleItemsCount()
    },
    getPublicNode: function(node) {
        return node.internalFields.publicNode
    },
    getRootNodes: function() {
        return this.getChildrenNodes(this.options.rootValue)
    },
    getChildrenNodes: function(parentKey) {
        return Object(_data_query__WEBPACK_IMPORTED_MODULE_9__["default"])(this._dataStructure).filter(["internalFields.parentKey", parentKey]).toArray()
    },
    getIndexByKey: function(key) {
        return this.options.dataConverter.getIndexByKey(key)
    },
    addItem: function(item) {
        this._addNode(item);
        this._updateFields()
    },
    removeItem: function(key) {
        this._removeNode(key);
        this._updateFields()
    },
    toggleSelection: function(key, state, selectRecursive) {
        var isSingleModeUnselect = this._isSingleModeUnselect(state);
        var node = this._getByKey(selectRecursive || isSingleModeUnselect ? this._initialDataStructure : this._dataStructure, key);
        this._setFieldState(node, SELECTED, state);
        if (this.options.recursiveSelection && !selectRecursive) {
            state ? this._setChildrenSelection() : this._toggleChildrenSelection(node, state);
            this._setParentSelection()
        }
        this._selectedNodesKeys = this._updateNodesKeysArray(SELECTED)
    },
    _isSingleModeUnselect: function(selectionState) {
        return !this.options.multipleSelection && !selectionState
    },
    toggleNodeDisabledState: function(key, state) {
        var node = this.getNodeByKey(key);
        this._setFieldState(node, DISABLED, state)
    },
    toggleSelectAll: function(state) {
        if (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_3__["isDefined"])(state)) {
            return
        }
        var that = this;
        var lastSelectedKey = that._selectedNodesKeys[that._selectedNodesKeys.length - 1];
        var dataStructure = that._isSingleModeUnselect(state) ? this._initialDataStructure : this._dataStructure;
        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_2__["each"])(dataStructure, (function(index, node) {
            if (!that._isNodeVisible(node)) {
                return
            }
            that._setFieldState(node, SELECTED, state)
        }));
        that._selectedNodesKeys = that._updateNodesKeysArray(SELECTED);
        if (!state && that.options.selectionRequired) {
            that.toggleSelection(lastSelectedKey, true)
        }
    },
    isAllSelected: function() {
        if (this.getSelectedNodesKeys().length) {
            return this.getSelectedNodesKeys().length === this.getVisibleItemsCount() ? true : void 0
        } else {
            return false
        }
    },
    toggleExpansion: function(key, state) {
        var node = this.getNodeByKey(key);
        this._setFieldState(node, EXPANDED, state);
        if (state) {
            this._updateExpansion(key)
        }
        this._expandedNodesKeys = this._updateNodesKeysArray(EXPANDED)
    },
    isFiltered: function(item) {
        return !this.options.searchValue.length || !!this._filterDataStructure(this.options.searchValue, [item]).length
    },
    _createCriteria: function(selector, value, operation) {
        var searchFilter = [];
        if (!Array.isArray(selector)) {
            return [selector, operation, value]
        }
        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_2__["each"])(selector, (function(i, item) {
            searchFilter.push([item, operation, value], "or")
        }));
        searchFilter.pop();
        return searchFilter
    },
    _filterDataStructure: function(filterValue, dataStructure) {
        var selector = this.options.searchExpr || this.options.dataAccessors.getters.display;
        var operation = _ui_widget_ui_search_box_mixin__WEBPACK_IMPORTED_MODULE_6__["default"].getOperationBySearchMode(this.options.searchMode);
        var criteria = this._createCriteria(selector, filterValue, operation);
        dataStructure = dataStructure || this._initialDataStructure;
        return Object(_data_query__WEBPACK_IMPORTED_MODULE_9__["default"])(dataStructure).filter(criteria).toArray()
    },
    search: function(searchValue) {
        var that = this;
        var matches = this._filterDataStructure(searchValue);
        var dataConverter = this.options.dataConverter;
        ! function lookForParents(matches, index) {
            var length = matches.length;
            while (index < length) {
                var node = matches[index];
                if (node.internalFields.parentKey === that.options.rootValue) {
                    index++;
                    continue
                }
                var parent = dataConverter.getParentNode(node);
                if (!parent) {
                    _ui_widget_ui_errors__WEBPACK_IMPORTED_MODULE_5__["default"].log("W1007", node.internalFields.parentKey, node.internalFields.key);
                    index++;
                    continue
                }
                if (!parent.internalFields.expanded) {
                    that._setFieldState(parent, EXPANDED, true)
                }
                if (Object(_core_utils_array__WEBPACK_IMPORTED_MODULE_8__["inArray"])(parent, matches) > -1) {
                    index++;
                    continue
                }
                matches.splice(index, 0, parent);
                lookForParents(matches, index)
            }
        }(matches, 0);
        if (this.options.sort) {
            matches = _data_store_helper__WEBPACK_IMPORTED_MODULE_10__["default"].queryByOptions(Object(_data_query__WEBPACK_IMPORTED_MODULE_9__["default"])(matches), {
                sort: this.options.sort
            }).toArray()
        }
        dataConverter._indexByKey = {};
        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_2__["each"])(matches, (function(index, node) {
            node.internalFields.childrenKeys = [];
            dataConverter._indexByKey[node.internalFields.key] = index
        }));
        dataConverter._dataStructure = matches;
        dataConverter.setChildrenKeys();
        return dataConverter._dataStructure
    }
});
/* harmony default export */ __webpack_exports__["default"] = (DataAdapter);


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/hierarchical_collection/ui.data_converter.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/hierarchical_collection/ui.data_converter.js ***!
  \*************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _core_class__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/class */ "./node_modules/devextreme/esm/core/class.js");
/* harmony import */ var _core_utils_extend__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/utils/extend */ "./node_modules/devextreme/esm/core/utils/extend.js");
/* harmony import */ var _ui_widget_ui_errors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../ui/widget/ui.errors */ "./node_modules/devextreme/esm/ui/widget/ui.errors.js");
/* harmony import */ var _core_utils_iterator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/utils/iterator */ "./node_modules/devextreme/esm/core/utils/iterator.js");
/* harmony import */ var _core_utils_type__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/utils/type */ "./node_modules/devextreme/esm/core/utils/type.js");
/**
 * DevExtreme (esm/ui/hierarchical_collection/ui.data_converter.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */





var DataConverter = _core_class__WEBPACK_IMPORTED_MODULE_0__["default"].inherit({
    ctor: function() {
        this._dataStructure = [];
        this._itemsCount = 0;
        this._visibleItemsCount = 0
    },
    _indexByKey: {},
    _convertItemsToNodes: function(items, parentKey) {
        var that = this;
        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_3__["each"])(items, (function(_, item) {
            var parentId = Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_4__["isDefined"])(parentKey) ? parentKey : that._getParentId(item);
            var node = that._convertItemToNode(item, parentId);
            that._dataStructure.push(node);
            that._checkForDuplicateId(node.internalFields.key);
            that._indexByKey[node.internalFields.key] = that._dataStructure.length - 1;
            if (that._itemHasChildren(item)) {
                that._convertItemsToNodes(that._dataAccessors.getters.items(item), node.internalFields.key)
            }
        }))
    },
    _checkForDuplicateId: function(key) {
        if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_4__["isDefined"])(this._indexByKey[key])) {
            throw _ui_widget_ui_errors__WEBPACK_IMPORTED_MODULE_2__["default"].Error("E1040", key)
        }
    },
    _getParentId: function(item) {
        return "plain" === this._dataType ? this._dataAccessors.getters.parentKey(item) : void 0
    },
    _itemHasChildren: function(item) {
        if ("plain" === this._dataType) {
            return
        }
        var items = this._dataAccessors.getters.items(item);
        return items && items.length
    },
    _getUniqueKey: function(item) {
        var keyGetter = this._dataAccessors.getters.key;
        var itemKey = keyGetter(item);
        var isCorrectKey = keyGetter && (itemKey || 0 === itemKey) && Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_4__["isPrimitive"])(itemKey);
        return isCorrectKey ? itemKey : this.getItemsCount()
    },
    _convertItemToNode: function(item, parentKey) {
        this._itemsCount++;
        false !== item.visible && this._visibleItemsCount++;
        var node = {
            internalFields: {
                disabled: this._dataAccessors.getters.disabled(item, {
                    defaultValue: false
                }),
                expanded: this._dataAccessors.getters.expanded(item, {
                    defaultValue: false
                }),
                selected: this._dataAccessors.getters.selected(item, {
                    defaultValue: false
                }),
                key: this._getUniqueKey(item),
                parentKey: Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_4__["isDefined"])(parentKey) ? parentKey : this._rootValue,
                item: this._makeObjectFromPrimitive(item),
                childrenKeys: []
            }
        };
        Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_1__["extend"])(node, item);
        delete node.items;
        return node
    },
    setChildrenKeys: function() {
        var that = this;
        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_3__["each"])(this._dataStructure, (function(_, node) {
            if (node.internalFields.parentKey === that._rootValue) {
                return
            }
            var parent = that.getParentNode(node);
            parent && parent.internalFields.childrenKeys.push(node.internalFields.key)
        }))
    },
    _makeObjectFromPrimitive: function(item) {
        if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_4__["isPrimitive"])(item)) {
            var key = item;
            item = {};
            this._dataAccessors.setters.key(item, key)
        }
        return item
    },
    _convertToPublicNode: function(node, parent) {
        if (!node) {
            return null
        }
        var publicNode = {
            text: this._dataAccessors.getters.display(node),
            key: node.internalFields.key,
            selected: node.internalFields.selected,
            expanded: node.internalFields.expanded,
            disabled: node.internalFields.disabled,
            parent: parent || null,
            itemData: node.internalFields.item,
            children: [],
            items: []
        };
        if (publicNode.parent) {
            publicNode.parent.children.push(publicNode);
            publicNode.parent.items.push(publicNode)
        }
        return publicNode
    },
    convertToPublicNodes: function(data, parent) {
        if (!data.length) {
            return []
        }
        var that = this;
        var publicNodes = [];
        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_3__["each"])(data, (function(_, node) {
            node = Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_4__["isPrimitive"])(node) ? that._getByKey(node) : node;
            var publicNode = that._convertToPublicNode(node, parent);
            publicNode.children = that.convertToPublicNodes(node.internalFields.childrenKeys, publicNode);
            publicNodes.push(publicNode);
            node.internalFields.publicNode = publicNode
        }));
        return publicNodes
    },
    setDataAccessors: function(accessors) {
        this._dataAccessors = accessors
    },
    _getByKey: function(key) {
        return this._dataStructure[this.getIndexByKey(key)] || null
    },
    getParentNode: function(node) {
        return this._getByKey(node.internalFields.parentKey)
    },
    getByKey: function(data, key) {
        if (null === key || void 0 === key) {
            return null
        }
        var result = null;
        var that = this;
        var getByKey = function(data, key) {
            Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_3__["each"])(data, (function(_, element) {
                var currentElementKey = element.internalFields && element.internalFields.key || that._dataAccessors.getters.key(element);
                if (currentElementKey.toString() === key.toString()) {
                    result = element;
                    return false
                }
            }));
            return result
        };
        return getByKey(data, key)
    },
    getItemsCount: function() {
        return this._itemsCount
    },
    getVisibleItemsCount: function() {
        return this._visibleItemsCount
    },
    updateIndexByKey: function() {
        var that = this;
        this._indexByKey = {};
        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_3__["each"])(this._dataStructure, (function(index, node) {
            that._checkForDuplicateId(node.internalFields.key);
            that._indexByKey[node.internalFields.key] = index
        }))
    },
    updateChildrenKeys: function() {
        this._indexByKey = {};
        this.removeChildrenKeys();
        this.updateIndexByKey();
        this.setChildrenKeys()
    },
    removeChildrenKeys: function() {
        this._indexByKey = {};
        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_3__["each"])(this._dataStructure, (function(index, node) {
            node.internalFields.childrenKeys = []
        }))
    },
    getIndexByKey: function(key) {
        return this._indexByKey[key]
    },
    createPlainStructure: function(items, rootValue, dataType) {
        this._itemsCount = 0;
        this._visibleItemsCount = 0;
        this._rootValue = rootValue;
        this._dataType = dataType;
        this._indexByKey = {};
        this._convertItemsToNodes(items);
        this.setChildrenKeys();
        return this._dataStructure
    }
});
/* harmony default export */ __webpack_exports__["default"] = (DataConverter);


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/hierarchical_collection/ui.hierarchical_collection_widget.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/hierarchical_collection/ui.hierarchical_collection_widget.js ***!
  \*****************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/renderer */ "./node_modules/devextreme/esm/core/renderer.js");
/* harmony import */ var _core_utils_data__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/utils/data */ "./node_modules/devextreme/esm/core/utils/data.js");
/* harmony import */ var _core_utils_extend__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/utils/extend */ "./node_modules/devextreme/esm/core/utils/extend.js");
/* harmony import */ var _core_utils_iterator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/utils/iterator */ "./node_modules/devextreme/esm/core/utils/iterator.js");
/* harmony import */ var _core_devices__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/devices */ "./node_modules/devextreme/esm/core/devices.js");
/* harmony import */ var _core_utils_icon__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core/utils/icon */ "./node_modules/devextreme/esm/core/utils/icon.js");
/* harmony import */ var _ui_data_adapter__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ui.data_adapter */ "./node_modules/devextreme/esm/ui/hierarchical_collection/ui.data_adapter.js");
/* harmony import */ var _collection_ui_collection_widget_edit__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../collection/ui.collection_widget.edit */ "./node_modules/devextreme/esm/ui/collection/ui.collection_widget.edit.js");
/* harmony import */ var _core_templates_bindable_template__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../core/templates/bindable_template */ "./node_modules/devextreme/esm/core/templates/bindable_template.js");
/* harmony import */ var _core_utils_type__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../core/utils/type */ "./node_modules/devextreme/esm/core/utils/type.js");
/* harmony import */ var _core_utils_common__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../core/utils/common */ "./node_modules/devextreme/esm/core/utils/common.js");
/**
 * DevExtreme (esm/ui/hierarchical_collection/ui.hierarchical_collection_widget.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */











var DISABLED_STATE_CLASS = "dx-state-disabled";
var HierarchicalCollectionWidget = _collection_ui_collection_widget_edit__WEBPACK_IMPORTED_MODULE_7__["default"].inherit({
    _getDefaultOptions: function() {
        return Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_2__["extend"])(this.callBase(), {
            keyExpr: "id",
            displayExpr: "text",
            selectedExpr: "selected",
            disabledExpr: "disabled",
            itemsExpr: "items",
            hoverStateEnabled: true,
            parentIdExpr: "parentId",
            expandedExpr: "expanded"
        })
    },
    _defaultOptionsRules: function() {
        return this.callBase().concat([{
            device: function() {
                return "desktop" === _core_devices__WEBPACK_IMPORTED_MODULE_4__["default"].real().deviceType && !_core_devices__WEBPACK_IMPORTED_MODULE_4__["default"].isSimulator()
            },
            options: {
                focusStateEnabled: true
            }
        }])
    },
    _init: function() {
        this.callBase();
        this._initAccessors();
        this._initDataAdapter();
        this._initDynamicTemplates()
    },
    _initDataSource: function() {
        this.callBase();
        this._dataSource && this._dataSource.paginate(false)
    },
    _initDataAdapter: function() {
        var accessors = this._createDataAdapterAccessors();
        this._dataAdapter = new _ui_data_adapter__WEBPACK_IMPORTED_MODULE_6__["default"](Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_2__["extend"])({
            dataAccessors: {
                getters: accessors.getters,
                setters: accessors.setters
            },
            items: this.option("items")
        }, this._getDataAdapterOptions()))
    },
    _getDataAdapterOptions: _core_utils_common__WEBPACK_IMPORTED_MODULE_10__["noop"],
    _initDynamicTemplates: function() {
        var that = this;
        this._templateManager.addDefaultTemplates({
            item: new _core_templates_bindable_template__WEBPACK_IMPORTED_MODULE_8__["BindableTemplate"](function($container, itemData) {
                $container.html(itemData.html).append(this._getIconContainer(itemData)).append(this._getTextContainer(itemData)).append(this._getPopoutContainer(itemData));
                that._addContentClasses(itemData, $container.parent())
            }.bind(this), ["text", "html", "items", "icon"], this.option("integrationOptions.watchMethod"), {
                text: this._displayGetter,
                items: this._itemsGetter
            })
        })
    },
    _getIconContainer: function(itemData) {
        return itemData.icon ? Object(_core_utils_icon__WEBPACK_IMPORTED_MODULE_5__["getImageContainer"])(itemData.icon) : void 0
    },
    _getTextContainer: function(itemData) {
        return Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])("<span>").text(itemData.text)
    },
    _getPopoutContainer: _core_utils_common__WEBPACK_IMPORTED_MODULE_10__["noop"],
    _addContentClasses: _core_utils_common__WEBPACK_IMPORTED_MODULE_10__["noop"],
    _initAccessors: function() {
        var that = this;
        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_3__["each"])(this._getAccessors(), (function(_, accessor) {
            that._compileAccessor(accessor)
        }));
        this._compileDisplayGetter()
    },
    _getAccessors: function() {
        return ["key", "selected", "items", "disabled", "parentId", "expanded"]
    },
    _getChildNodes: function(node) {
        var that = this;
        var arr = [];
        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_3__["each"])(node.internalFields.childrenKeys, (function(_, key) {
            var childNode = that._dataAdapter.getNodeByKey(key);
            arr.push(childNode)
        }));
        return arr
    },
    _hasChildren: function(node) {
        return node && node.internalFields.childrenKeys.length
    },
    _compileAccessor: function(optionName) {
        var getter = "_" + optionName + "Getter";
        var setter = "_" + optionName + "Setter";
        var optionExpr = this.option(optionName + "Expr");
        if (!optionExpr) {
            this[getter] = _core_utils_common__WEBPACK_IMPORTED_MODULE_10__["noop"];
            this[setter] = _core_utils_common__WEBPACK_IMPORTED_MODULE_10__["noop"];
            return
        } else if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_9__["isFunction"])(optionExpr)) {
            this[setter] = function(obj, value) {
                obj[optionExpr()] = value
            };
            this[getter] = function(obj) {
                return obj[optionExpr()]
            };
            return
        }
        this[getter] = Object(_core_utils_data__WEBPACK_IMPORTED_MODULE_1__["compileGetter"])(optionExpr);
        this[setter] = Object(_core_utils_data__WEBPACK_IMPORTED_MODULE_1__["compileSetter"])(optionExpr)
    },
    _createDataAdapterAccessors: function() {
        var that = this;
        var accessors = {
            getters: {},
            setters: {}
        };
        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_3__["each"])(this._getAccessors(), (function(_, accessor) {
            var getterName = "_" + accessor + "Getter";
            var setterName = "_" + accessor + "Setter";
            var newAccessor = "parentId" === accessor ? "parentKey" : accessor;
            accessors.getters[newAccessor] = that[getterName];
            accessors.setters[newAccessor] = that[setterName]
        }));
        accessors.getters.display = !this._displayGetter ? itemData => itemData.text : this._displayGetter;
        return accessors
    },
    _initMarkup: function() {
        this.callBase();
        this._addWidgetClass()
    },
    _addWidgetClass: function() {
        this._focusTarget().addClass(this._widgetClass())
    },
    _widgetClass: _core_utils_common__WEBPACK_IMPORTED_MODULE_10__["noop"],
    _renderItemFrame: function(index, itemData) {
        var $itemFrame = this.callBase.apply(this, arguments);
        $itemFrame.toggleClass(DISABLED_STATE_CLASS, !!this._disabledGetter(itemData));
        return $itemFrame
    },
    _optionChanged: function(args) {
        switch (args.name) {
            case "displayExpr":
            case "keyExpr":
                this._initAccessors();
                this._initDynamicTemplates();
                this.repaint();
                break;
            case "itemsExpr":
            case "selectedExpr":
            case "disabledExpr":
            case "expandedExpr":
            case "parentIdExpr":
                this._initAccessors();
                this._initDataAdapter();
                this.repaint();
                break;
            case "items":
                this._initDataAdapter();
                this.callBase(args);
                break;
            default:
                this.callBase(args)
        }
    }
});
/* harmony default export */ __webpack_exports__["default"] = (HierarchicalCollectionWidget);


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/list/modules/search.js":
/*!***************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/list/modules/search.js ***!
  \***************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _widget_ui_search_box_mixin__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../widget/ui.search_box_mixin */ "./node_modules/devextreme/esm/ui/widget/ui.search_box_mixin.js");
/* harmony import */ var _text_box__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../text_box */ "./node_modules/devextreme/esm/ui/text_box.js");
/**
 * DevExtreme (esm/ui/list/modules/search.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */


_widget_ui_search_box_mixin__WEBPACK_IMPORTED_MODULE_0__["default"].setEditorClass(_text_box__WEBPACK_IMPORTED_MODULE_1__["default"]);


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/menu.js":
/*!************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/menu.js ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _menu_ui_menu__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./menu/ui.menu */ "./node_modules/devextreme/esm/ui/menu/ui.menu.js");
/**
 * DevExtreme (esm/ui/menu.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */

/* harmony default export */ __webpack_exports__["default"] = (_menu_ui_menu__WEBPACK_IMPORTED_MODULE_0__["default"]);


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/menu/ui.menu.js":
/*!********************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/menu/ui.menu.js ***!
  \********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _core_utils_size__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/utils/size */ "./node_modules/devextreme/esm/core/utils/size.js");
/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/renderer */ "./node_modules/devextreme/esm/core/renderer.js");
/* harmony import */ var _events_core_events_engine__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../events/core/events_engine */ "./node_modules/devextreme/esm/events/core/events_engine.js");
/* harmony import */ var _core_component_registrator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/component_registrator */ "./node_modules/devextreme/esm/core/component_registrator.js");
/* harmony import */ var _core_utils_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/utils/common */ "./node_modules/devextreme/esm/core/utils/common.js");
/* harmony import */ var _core_element__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core/element */ "./node_modules/devextreme/esm/core/element.js");
/* harmony import */ var _core_utils_iterator__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../core/utils/iterator */ "./node_modules/devextreme/esm/core/utils/iterator.js");
/* harmony import */ var _core_utils_type__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../core/utils/type */ "./node_modules/devextreme/esm/core/utils/type.js");
/* harmony import */ var _core_utils_extend__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../core/utils/extend */ "./node_modules/devextreme/esm/core/utils/extend.js");
/* harmony import */ var _overlay_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../overlay/utils */ "./node_modules/devextreme/esm/ui/overlay/utils.js");
/* harmony import */ var _events_utils_index__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../events/utils/index */ "./node_modules/devextreme/esm/events/utils/index.js");
/* harmony import */ var _events_pointer__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../events/pointer */ "./node_modules/devextreme/esm/events/pointer.js");
/* harmony import */ var _events_hover__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../events/hover */ "./node_modules/devextreme/esm/events/hover.js");
/* harmony import */ var _context_menu_ui_menu_base__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../context_menu/ui.menu_base */ "./node_modules/devextreme/esm/ui/context_menu/ui.menu_base.js");
/* harmony import */ var _overlay_ui_overlay__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../overlay/ui.overlay */ "./node_modules/devextreme/esm/ui/overlay/ui.overlay.js");
/* harmony import */ var _ui_submenu__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./ui.submenu */ "./node_modules/devextreme/esm/ui/menu/ui.submenu.js");
/* harmony import */ var _button__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../button */ "./node_modules/devextreme/esm/ui/button.js");
/* harmony import */ var _tree_view__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../tree_view */ "./node_modules/devextreme/esm/ui/tree_view.js");
/**
 * DevExtreme (esm/ui/menu/ui.menu.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */


















var DX_MENU_CLASS = "dx-menu";
var DX_MENU_VERTICAL_CLASS = DX_MENU_CLASS + "-vertical";
var DX_MENU_HORIZONTAL_CLASS = DX_MENU_CLASS + "-horizontal";
var DX_MENU_ITEM_CLASS = DX_MENU_CLASS + "-item";
var DX_MENU_ITEMS_CONTAINER_CLASS = DX_MENU_CLASS + "-items-container";
var DX_MENU_ITEM_EXPANDED_CLASS = DX_MENU_ITEM_CLASS + "-expanded";
var DX_CONTEXT_MENU_CLASS = "dx-context-menu";
var DX_CONTEXT_MENU_CONTAINER_BORDER_CLASS = DX_CONTEXT_MENU_CLASS + "-container-border";
var DX_CONTEXT_MENU_CONTENT_DELIMITER_CLASS = "dx-context-menu-content-delimiter";
var DX_SUBMENU_CLASS = "dx-submenu";
var DX_STATE_DISABLED_CLASS = "dx-state-disabled";
var DX_STATE_HOVER_CLASS = "dx-state-hover";
var DX_STATE_ACTIVE_CLASS = "dx-state-active";
var DX_ADAPTIVE_MODE_CLASS = DX_MENU_CLASS + "-adaptive-mode";
var DX_ADAPTIVE_HAMBURGER_BUTTON_CLASS = DX_MENU_CLASS + "-hamburger-button";
var DX_ADAPTIVE_MODE_OVERLAY_WRAPPER_CLASS = DX_ADAPTIVE_MODE_CLASS + "-overlay-wrapper";
var FOCUS_UP = "up";
var FOCUS_DOWN = "down";
var FOCUS_LEFT = "left";
var FOCUS_RIGHT = "right";
var SHOW_SUBMENU_OPERATION = "showSubmenu";
var NEXTITEM_OPERATION = "nextItem";
var PREVITEM_OPERATION = "prevItem";
var DEFAULT_DELAY = {
    show: 50,
    hide: 300
};
var ACTIONS = ["onSubmenuShowing", "onSubmenuShown", "onSubmenuHiding", "onSubmenuHidden", "onItemContextMenu", "onItemClick", "onSelectionChanged", "onItemRendered"];
class Menu extends _context_menu_ui_menu_base__WEBPACK_IMPORTED_MODULE_13__["default"] {
    _getDefaultOptions() {
        return Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_8__["extend"])(super._getDefaultOptions(), {
            orientation: "horizontal",
            submenuDirection: "auto",
            showFirstSubmenuMode: {
                name: "onClick",
                delay: {
                    show: 50,
                    hide: 300
                }
            },
            hideSubmenuOnMouseLeave: false,
            onSubmenuShowing: null,
            onSubmenuShown: null,
            onSubmenuHiding: null,
            onSubmenuHidden: null,
            adaptivityEnabled: false
        })
    }
    _setOptionsByReference() {
        super._setOptionsByReference();
        Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_8__["extend"])(this._optionsByReference, {
            animation: true,
            selectedItem: true
        })
    }
    _itemElements() {
        var rootMenuElements = super._itemElements();
        var submenuElements = this._submenuItemElements();
        return rootMenuElements.add(submenuElements)
    }
    _submenuItemElements() {
        var elements = [];
        var itemSelector = ".".concat(DX_MENU_ITEM_CLASS);
        var currentSubmenu = this._submenus.length && this._submenus[0];
        if (currentSubmenu && currentSubmenu.itemsContainer()) {
            elements = currentSubmenu.itemsContainer().find(itemSelector)
        }
        return elements
    }
    _focusTarget() {
        return this.$element()
    }
    _isMenuHorizontal() {
        return "horizontal" === this.option("orientation")
    }
    _moveFocus(location) {
        var $items = this._getAvailableItems();
        var isMenuHorizontal = this._isMenuHorizontal();
        var $activeItem = this._getActiveItem(true);
        var argument;
        var operation;
        var navigationAction;
        var $newTarget;
        switch (location) {
            case FOCUS_UP:
                operation = isMenuHorizontal ? SHOW_SUBMENU_OPERATION : this._getItemsNavigationOperation(PREVITEM_OPERATION);
                argument = isMenuHorizontal ? $activeItem : $items;
                navigationAction = this._getKeyboardNavigationAction(operation, argument);
                $newTarget = navigationAction();
                break;
            case FOCUS_DOWN:
                operation = isMenuHorizontal ? SHOW_SUBMENU_OPERATION : this._getItemsNavigationOperation(NEXTITEM_OPERATION);
                argument = isMenuHorizontal ? $activeItem : $items;
                navigationAction = this._getKeyboardNavigationAction(operation, argument);
                $newTarget = navigationAction();
                break;
            case FOCUS_RIGHT:
                operation = isMenuHorizontal ? this._getItemsNavigationOperation(NEXTITEM_OPERATION) : SHOW_SUBMENU_OPERATION;
                argument = isMenuHorizontal ? $items : $activeItem;
                navigationAction = this._getKeyboardNavigationAction(operation, argument);
                $newTarget = navigationAction();
                break;
            case FOCUS_LEFT:
                operation = isMenuHorizontal ? this._getItemsNavigationOperation(PREVITEM_OPERATION) : SHOW_SUBMENU_OPERATION;
                argument = isMenuHorizontal ? $items : $activeItem;
                navigationAction = this._getKeyboardNavigationAction(operation, argument);
                $newTarget = navigationAction();
                break;
            default:
                return super._moveFocus(location)
        }
        if ($newTarget && 0 !== $newTarget.length) {
            this.option("focusedElement", Object(_core_element__WEBPACK_IMPORTED_MODULE_5__["getPublicElement"])($newTarget))
        }
    }
    _getItemsNavigationOperation(operation) {
        var navOperation = operation;
        if (this.option("rtlEnabled")) {
            navOperation = operation === PREVITEM_OPERATION ? NEXTITEM_OPERATION : PREVITEM_OPERATION
        }
        return navOperation
    }
    _getKeyboardNavigationAction(operation, argument) {
        var action = _core_utils_common__WEBPACK_IMPORTED_MODULE_4__["noop"];
        switch (operation) {
            case SHOW_SUBMENU_OPERATION:
                if (!argument.hasClass(DX_STATE_DISABLED_CLASS)) {
                    action = this._showSubmenu.bind(this, argument)
                }
                break;
            case NEXTITEM_OPERATION:
                action = this._nextItem.bind(this, argument);
                break;
            case PREVITEM_OPERATION:
                action = this._prevItem.bind(this, argument)
        }
        return action
    }
    _clean() {
        super._clean();
        this.option("templatesRenderAsynchronously") && clearTimeout(this._resizeEventTimer)
    }
    _visibilityChanged(visible) {
        if (visible) {
            if (!this._menuItemsWidth) {
                this._updateItemsWidthCache()
            }
            this._dimensionChanged()
        }
    }
    _isAdaptivityEnabled() {
        return this.option("adaptivityEnabled") && "horizontal" === this.option("orientation")
    }
    _updateItemsWidthCache() {
        var $menuItems = this.$element().find("ul").first().children("li").children(".".concat(DX_MENU_ITEM_CLASS));
        this._menuItemsWidth = this._getSummaryItemsWidth($menuItems, true)
    }
    _dimensionChanged() {
        if (!this._isAdaptivityEnabled()) {
            return
        }
        var containerWidth = Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getOuterWidth"])(this.$element());
        this._toggleAdaptiveMode(this._menuItemsWidth > containerWidth)
    }
    _init() {
        super._init();
        this._submenus = []
    }
    _initActions() {
        this._actions = {};
        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_6__["each"])(ACTIONS, (index, action) => {
            this._actions[action] = this._createActionByOption(action)
        })
    }
    _initMarkup() {
        this._visibleSubmenu = null;
        this.$element().addClass(DX_MENU_CLASS);
        super._initMarkup();
        this.setAria("role", "menubar")
    }
    _render() {
        super._render();
        this._initAdaptivity()
    }
    _renderHamburgerButton() {
        this._hamburger = new _button__WEBPACK_IMPORTED_MODULE_16__["default"](Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])("<div>").addClass(DX_ADAPTIVE_HAMBURGER_BUTTON_CLASS), {
            icon: "menu",
            activeStateEnabled: false,
            onClick: this._toggleTreeView.bind(this)
        });
        return this._hamburger.$element()
    }
    _toggleTreeView(state) {
        if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_7__["isPlainObject"])(state)) {
            state = !this._overlay.option("visible")
        }
        this._overlay.option("visible", state);
        this._toggleHamburgerActiveState(state)
    }
    _toggleHamburgerActiveState(state) {
        this._hamburger && this._hamburger.$element().toggleClass(DX_STATE_ACTIVE_CLASS, state)
    }
    _toggleAdaptiveMode(state) {
        var $menuItemsContainer = this.$element().find(".".concat(DX_MENU_HORIZONTAL_CLASS));
        var $adaptiveElements = this.$element().find(".".concat(DX_ADAPTIVE_MODE_CLASS));
        if (state) {
            this._hideVisibleSubmenu()
        } else {
            this._treeView && this._treeView.collapseAll();
            this._overlay && this._toggleTreeView(state)
        }
        $menuItemsContainer.toggle(!state);
        $adaptiveElements.toggle(state)
    }
    _removeAdaptivity() {
        if (!this._$adaptiveContainer) {
            return
        }
        this._toggleAdaptiveMode(false);
        this._$adaptiveContainer.remove();
        this._$adaptiveContainer = null;
        this._treeView = null;
        this._hamburger = null;
        this._overlay = null
    }
    _treeviewItemClickHandler(e) {
        this._actions.onItemClick(e);
        if (!e.node.children.length) {
            this._toggleTreeView(false)
        }
    }
    _getAdaptiveOverlayOptions() {
        var rtl = this.option("rtlEnabled");
        var position = rtl ? "right" : "left";
        return {
            _ignoreFunctionValueDeprecation: true,
            maxHeight: () => Object(_overlay_utils__WEBPACK_IMPORTED_MODULE_9__["getElementMaxHeightByWindow"])(this.$element()),
            deferRendering: false,
            shading: false,
            animation: false,
            hideOnParentScroll: true,
            onHidden: () => {
                this._toggleHamburgerActiveState(false)
            },
            height: "auto",
            closeOnOutsideClick: e => !Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(e.target).closest(".".concat(DX_ADAPTIVE_HAMBURGER_BUTTON_CLASS)).length,
            position: {
                collision: "flipfit",
                at: "bottom " + position,
                my: "top " + position,
                of: this._hamburger.$element()
            }
        }
    }
    _getTreeViewOptions() {
        var menuOptions = {};
        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_6__["each"])(["rtlEnabled", "width", "accessKey", "activeStateEnabled", "animation", "dataSource", "disabled", "displayExpr", "displayExpr", "focusStateEnabled", "hint", "hoverStateEnabled", "itemsExpr", "items", "itemTemplate", "selectedExpr", "selectionMode", "tabIndex", "visible"], (_, option) => {
            menuOptions[option] = this.option(option)
        });
        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_6__["each"])(["onItemContextMenu", "onSelectionChanged"], (_, actionName) => {
            menuOptions[actionName] = e => {
                this._actions[actionName](e)
            }
        });
        return Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_8__["extend"])(menuOptions, {
            dataSource: this.getDataSource(),
            animationEnabled: !!this.option("animation"),
            onItemClick: this._treeviewItemClickHandler.bind(this),
            onItemExpanded: e => {
                this._overlay.repaint();
                this._actions.onSubmenuShown(e)
            },
            onItemCollapsed: e => {
                this._overlay.repaint();
                this._actions.onSubmenuHidden(e)
            },
            selectNodesRecursive: false,
            selectByClick: this.option("selectByClick"),
            expandEvent: "click"
        })
    }
    _initAdaptivity() {
        if (!this._isAdaptivityEnabled()) {
            return
        }
        this._$adaptiveContainer = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])("<div>").addClass(DX_ADAPTIVE_MODE_CLASS);
        var $hamburger = this._renderHamburgerButton();
        this._treeView = this._createComponent(Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])("<div>"), _tree_view__WEBPACK_IMPORTED_MODULE_17__["default"], this._getTreeViewOptions());
        this._overlay = this._createComponent(Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])("<div>"), _overlay_ui_overlay__WEBPACK_IMPORTED_MODULE_14__["default"], this._getAdaptiveOverlayOptions());
        this._overlay.$content().append(this._treeView.$element()).addClass(DX_ADAPTIVE_MODE_CLASS).addClass(this.option("cssClass"));
        this._overlay.$wrapper().addClass(DX_ADAPTIVE_MODE_OVERLAY_WRAPPER_CLASS);
        this._$adaptiveContainer.append($hamburger);
        this._$adaptiveContainer.append(this._overlay.$element());
        this.$element().append(this._$adaptiveContainer);
        this._updateItemsWidthCache();
        this._dimensionChanged()
    }
    _getDelay(delayType) {
        var delay = this.option("showFirstSubmenuMode").delay;
        if (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_7__["isDefined"])(delay)) {
            return DEFAULT_DELAY[delayType]
        } else {
            return Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_7__["isObject"])(delay) ? delay[delayType] : delay
        }
    }
    _keyboardHandler(e) {
        return super._keyboardHandler(e, !!this._visibleSubmenu)
    }
    _renderContainer() {
        var $wrapper = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])("<div>");
        $wrapper.appendTo(this.$element()).addClass(this._isMenuHorizontal() ? DX_MENU_HORIZONTAL_CLASS : DX_MENU_VERTICAL_CLASS);
        return super._renderContainer($wrapper)
    }
    _renderSubmenuItems(node, $itemFrame) {
        var submenu = this._createSubmenu(node, $itemFrame);
        this._submenus.push(submenu);
        this._renderBorderElement($itemFrame);
        return submenu
    }
    _getKeyboardListeners() {
        return super._getKeyboardListeners().concat(this._visibleSubmenu)
    }
    _createSubmenu(node, $rootItem) {
        var $submenuContainer = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])("<div>").addClass(DX_CONTEXT_MENU_CLASS).appendTo($rootItem);
        var items = this._getChildNodes(node);
        var result = this._createComponent($submenuContainer, _ui_submenu__WEBPACK_IMPORTED_MODULE_15__["default"], Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_8__["extend"])(this._getSubmenuOptions(), {
            _dataAdapter: this._dataAdapter,
            _parentKey: node.internalFields.key,
            items: items,
            onHoverStart: this._clearTimeouts.bind(this),
            position: this.getSubmenuPosition($rootItem)
        }));
        this._attachSubmenuHandlers($rootItem, result);
        return result
    }
    _getSubmenuOptions() {
        var $submenuTarget = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])("<div>");
        var isMenuHorizontal = this._isMenuHorizontal();
        return {
            itemTemplate: this.option("itemTemplate"),
            target: $submenuTarget,
            orientation: this.option("orientation"),
            selectionMode: this.option("selectionMode"),
            cssClass: this.option("cssClass"),
            selectByClick: this.option("selectByClick"),
            hoverStateEnabled: this.option("hoverStateEnabled"),
            activeStateEnabled: this.option("activeStateEnabled"),
            focusStateEnabled: this.option("focusStateEnabled"),
            animation: this.option("animation"),
            showSubmenuMode: this.option("showSubmenuMode"),
            displayExpr: this.option("displayExpr"),
            disabledExpr: this.option("disabledExpr"),
            selectedExpr: this.option("selectedExpr"),
            itemsExpr: this.option("itemsExpr"),
            onFocusedItemChanged: e => {
                if (!e.component.option("visible")) {
                    return
                }
                this.option("focusedElement", e.component.option("focusedElement"))
            },
            onSelectionChanged: this._nestedItemOnSelectionChangedHandler.bind(this),
            onItemClick: this._nestedItemOnItemClickHandler.bind(this),
            onItemRendered: this._nestedItemOnItemRenderedHandler.bind(this),
            onLeftFirstItem: isMenuHorizontal ? null : this._moveMainMenuFocus.bind(this, PREVITEM_OPERATION),
            onLeftLastItem: isMenuHorizontal ? null : this._moveMainMenuFocus.bind(this, NEXTITEM_OPERATION),
            onCloseRootSubmenu: this._moveMainMenuFocus.bind(this, isMenuHorizontal ? PREVITEM_OPERATION : null),
            onExpandLastSubmenu: isMenuHorizontal ? this._moveMainMenuFocus.bind(this, NEXTITEM_OPERATION) : null
        }
    }
    _getShowFirstSubmenuMode() {
        if (!this._isDesktopDevice()) {
            return "onClick"
        }
        var optionValue = this.option("showFirstSubmenuMode");
        return Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_7__["isObject"])(optionValue) ? optionValue.name : optionValue
    }
    _moveMainMenuFocus(direction) {
        var $items = this._getAvailableItems();
        var itemCount = $items.length;
        var $currentItem = $items.filter(".".concat(DX_MENU_ITEM_EXPANDED_CLASS)).eq(0);
        var itemIndex = $items.index($currentItem);
        this._hideSubmenu(this._visibleSubmenu);
        itemIndex += direction === PREVITEM_OPERATION ? -1 : 1;
        if (itemIndex >= itemCount) {
            itemIndex = 0
        } else if (itemIndex < 0) {
            itemIndex = itemCount - 1
        }
        var $newItem = $items.eq(itemIndex);
        this.option("focusedElement", Object(_core_element__WEBPACK_IMPORTED_MODULE_5__["getPublicElement"])($newItem))
    }
    _nestedItemOnSelectionChangedHandler(args) {
        var selectedItem = args.addedItems.length && args.addedItems[0];
        var submenu = _ui_submenu__WEBPACK_IMPORTED_MODULE_15__["default"].getInstance(args.element);
        var onSelectionChanged = this._actions.onSelectionChanged;
        onSelectionChanged(args);
        selectedItem && this._clearSelectionInSubmenus(selectedItem[0], submenu);
        this._clearRootSelection();
        this._setOptionWithoutOptionChange("selectedItem", selectedItem)
    }
    _clearSelectionInSubmenus(item, targetSubmenu) {
        var cleanAllSubmenus = !arguments.length;
        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_6__["each"])(this._submenus, (index, submenu) => {
            var $submenu = submenu._itemContainer();
            var isOtherItem = !$submenu.is(targetSubmenu && targetSubmenu._itemContainer());
            var $selectedItem = $submenu.find(".".concat(this._selectedItemClass()));
            if (isOtherItem && $selectedItem.length || cleanAllSubmenus) {
                $selectedItem.removeClass(this._selectedItemClass());
                var selectedItemData = this._getItemData($selectedItem);
                if (selectedItemData) {
                    selectedItemData.selected = false
                }
                submenu._clearSelectedItems()
            }
        })
    }
    _clearRootSelection() {
        var $prevSelectedItem = this.$element().find(".".concat(DX_MENU_ITEMS_CONTAINER_CLASS)).first().children().children().filter(".".concat(this._selectedItemClass()));
        if ($prevSelectedItem.length) {
            var prevSelectedItemData = this._getItemData($prevSelectedItem);
            prevSelectedItemData.selected = false;
            $prevSelectedItem.removeClass(this._selectedItemClass())
        }
    }
    _nestedItemOnItemClickHandler(e) {
        this._actions.onItemClick(e)
    }
    _nestedItemOnItemRenderedHandler(e) {
        this._actions.onItemRendered(e)
    }
    _attachSubmenuHandlers($rootItem, submenu) {
        var $submenuOverlayContent = submenu.getOverlayContent();
        var submenus = $submenuOverlayContent.find(".".concat(DX_SUBMENU_CLASS));
        var submenuMouseLeaveName = Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_10__["addNamespace"])(_events_hover__WEBPACK_IMPORTED_MODULE_12__["end"], this.NAME + "_submenu");
        submenu.option({
            onShowing: this._submenuOnShowingHandler.bind(this, $rootItem, submenu),
            onShown: this._submenuOnShownHandler.bind(this, $rootItem, submenu),
            onHiding: this._submenuOnHidingHandler.bind(this, $rootItem, submenu),
            onHidden: this._submenuOnHiddenHandler.bind(this, $rootItem, submenu)
        });
        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_6__["each"])(submenus, (index, submenu) => {
            _events_core_events_engine__WEBPACK_IMPORTED_MODULE_2__["default"].off(submenu, submenuMouseLeaveName);
            _events_core_events_engine__WEBPACK_IMPORTED_MODULE_2__["default"].on(submenu, submenuMouseLeaveName, null, this._submenuMouseLeaveHandler.bind(this, $rootItem))
        })
    }
    _submenuOnShowingHandler($rootItem, submenu) {
        var $border = $rootItem.children(".".concat(DX_CONTEXT_MENU_CONTAINER_BORDER_CLASS));
        this._actions.onSubmenuShowing({
            rootItem: Object(_core_element__WEBPACK_IMPORTED_MODULE_5__["getPublicElement"])($rootItem),
            submenu: submenu
        });
        $border.show();
        $rootItem.addClass(DX_MENU_ITEM_EXPANDED_CLASS)
    }
    _submenuOnShownHandler($rootItem, submenu) {
        this._actions.onSubmenuShown({
            rootItem: Object(_core_element__WEBPACK_IMPORTED_MODULE_5__["getPublicElement"])($rootItem),
            submenu: submenu
        })
    }
    _submenuOnHidingHandler($rootItem, submenu, eventArgs) {
        var $border = $rootItem.children(".".concat(DX_CONTEXT_MENU_CONTAINER_BORDER_CLASS));
        var args = eventArgs;
        args.rootItem = Object(_core_element__WEBPACK_IMPORTED_MODULE_5__["getPublicElement"])($rootItem);
        args.submenu = submenu;
        this._actions.onSubmenuHiding(args);
        eventArgs = args;
        if (!eventArgs.cancel) {
            if (this._visibleSubmenu === submenu) {
                this._visibleSubmenu = null
            }
            $border.hide();
            $rootItem.removeClass(DX_MENU_ITEM_EXPANDED_CLASS)
        }
    }
    _submenuOnHiddenHandler($rootItem, submenu) {
        this._actions.onSubmenuHidden({
            rootItem: Object(_core_element__WEBPACK_IMPORTED_MODULE_5__["getPublicElement"])($rootItem),
            submenu: submenu
        })
    }
    _submenuMouseLeaveHandler($rootItem, eventArgs) {
        var target = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(eventArgs.relatedTarget).parents(".".concat(DX_CONTEXT_MENU_CLASS))[0];
        var contextMenu = this._getSubmenuByRootElement($rootItem).getOverlayContent()[0];
        if (this.option("hideSubmenuOnMouseLeave") && target !== contextMenu) {
            this._clearTimeouts();
            setTimeout(this._hideSubmenuAfterTimeout.bind(this), this._getDelay("hide"))
        }
    }
    _hideSubmenuAfterTimeout() {
        if (!this._visibleSubmenu) {
            return
        }
        var isRootItemHovered = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(this._visibleSubmenu.$element().context).hasClass(DX_STATE_HOVER_CLASS);
        var isSubmenuItemHovered = this._visibleSubmenu.getOverlayContent().find(".".concat(DX_STATE_HOVER_CLASS)).length;
        var hoveredElementFromSubMenu = this._visibleSubmenu.getOverlayContent().get(0).querySelector(":hover");
        if (!hoveredElementFromSubMenu && !isSubmenuItemHovered && !isRootItemHovered) {
            this._visibleSubmenu.hide()
        }
    }
    _getSubmenuByRootElement($rootItem) {
        if (!$rootItem) {
            return false
        }
        var $submenu = $rootItem.children(".".concat(DX_CONTEXT_MENU_CLASS));
        return $submenu.length && _ui_submenu__WEBPACK_IMPORTED_MODULE_15__["default"].getInstance($submenu)
    }
    getSubmenuPosition($rootItem) {
        var isHorizontalMenu = this._isMenuHorizontal();
        var submenuDirection = this.option("submenuDirection").toLowerCase();
        var rtlEnabled = this.option("rtlEnabled");
        var submenuPosition = {
            collision: "flip",
            of: $rootItem
        };
        switch (submenuDirection) {
            case "leftortop":
                submenuPosition.at = "left top";
                submenuPosition.my = isHorizontalMenu ? "left bottom" : "right top";
                break;
            case "rightorbottom":
                submenuPosition.at = isHorizontalMenu ? "left bottom" : "right top";
                submenuPosition.my = "left top";
                break;
            default:
                if (isHorizontalMenu) {
                    submenuPosition.at = rtlEnabled ? "right bottom" : "left bottom";
                    submenuPosition.my = rtlEnabled ? "right top" : "left top"
                } else {
                    submenuPosition.at = rtlEnabled ? "left top" : "right top";
                    submenuPosition.my = rtlEnabled ? "right top" : "left top"
                }
        }
        return submenuPosition
    }
    _renderBorderElement($item) {
        Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])("<div>").appendTo($item).addClass(DX_CONTEXT_MENU_CONTAINER_BORDER_CLASS).hide()
    }
    _itemPointerDownHandler(e) {
        var $target = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(e.target);
        var $closestItem = $target.closest(this._itemElements());
        if ($closestItem.hasClass("dx-menu-item-has-submenu")) {
            this.option("focusedElement", null);
            return
        }
        super._itemPointerDownHandler(e)
    }
    _hoverStartHandler(e) {
        var mouseMoveEventName = Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_10__["addNamespace"])(_events_pointer__WEBPACK_IMPORTED_MODULE_11__["default"].move, this.NAME);
        var $item = this._getItemElementByEventArgs(e);
        var node = this._dataAdapter.getNodeByItem(this._getItemData($item));
        var isSelectionActive = Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_7__["isDefined"])(e.buttons) && 1 === e.buttons || !Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_7__["isDefined"])(e.buttons) && 1 === e.which;
        if (this._isItemDisabled($item)) {
            return
        }
        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_2__["default"].off($item, mouseMoveEventName);
        if (!this._hasChildren(node)) {
            this._showSubmenuTimer = setTimeout(this._hideSubmenuAfterTimeout.bind(this), this._getDelay("hide"));
            return
        }
        if ("onHover" === this._getShowFirstSubmenuMode() && !isSelectionActive) {
            var submenu = this._getSubmenuByElement($item);
            this._clearTimeouts();
            if (!submenu.isOverlayVisible()) {
                _events_core_events_engine__WEBPACK_IMPORTED_MODULE_2__["default"].on($item, mouseMoveEventName, this._itemMouseMoveHandler.bind(this));
                this._showSubmenuTimer = this._getDelay("hide")
            }
        }
    }
    _hoverEndHandler(eventArg) {
        var $item = this._getItemElementByEventArgs(eventArg);
        var relatedTarget = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(eventArg.relatedTarget);
        super._hoverEndHandler(eventArg);
        this._clearTimeouts();
        if (this._isItemDisabled($item)) {
            return
        }
        if (relatedTarget.hasClass(DX_CONTEXT_MENU_CONTENT_DELIMITER_CLASS)) {
            return
        }
        if (this.option("hideSubmenuOnMouseLeave") && !relatedTarget.hasClass(DX_MENU_ITEMS_CONTAINER_CLASS)) {
            this._hideSubmenuTimer = setTimeout(() => {
                this._hideSubmenuAfterTimeout()
            }, this._getDelay("hide"))
        }
    }
    _hideVisibleSubmenu() {
        if (!this._visibleSubmenu) {
            return false
        }
        this._hideSubmenu(this._visibleSubmenu);
        return true
    }
    _showSubmenu($itemElement) {
        var submenu = this._getSubmenuByElement($itemElement);
        if (this._visibleSubmenu !== submenu) {
            this._hideVisibleSubmenu()
        }
        if (submenu) {
            this._clearTimeouts();
            submenu.show();
            this.option("focusedElement", submenu.option("focusedElement"))
        }
        this._visibleSubmenu = submenu;
        this._hoveredRootItem = $itemElement
    }
    _hideSubmenu(submenu) {
        submenu && submenu.hide();
        if (this._visibleSubmenu === submenu) {
            this._visibleSubmenu = null
        }
        this._hoveredRootItem = null
    }
    _itemMouseMoveHandler(e) {
        if (e.pointers && e.pointers.length) {
            return
        }
        var $item = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(e.currentTarget);
        if (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_7__["isDefined"])(this._showSubmenuTimer)) {
            return
        }
        this._clearTimeouts();
        this._showSubmenuTimer = setTimeout(() => {
            var submenu = this._getSubmenuByElement($item);
            if (submenu && !submenu.isOverlayVisible()) {
                this._showSubmenu($item)
            }
        }, this._getDelay("show"))
    }
    _clearTimeouts() {
        clearTimeout(this._hideSubmenuTimer);
        clearTimeout(this._showSubmenuTimer)
    }
    _getSubmenuByElement($itemElement, itemData) {
        var submenu = this._getSubmenuByRootElement($itemElement);
        if (submenu) {
            return submenu
        } else {
            itemData = itemData || this._getItemData($itemElement);
            var node = this._dataAdapter.getNodeByItem(itemData);
            return this._hasChildren(node) && this._renderSubmenuItems(node, $itemElement)
        }
    }
    _updateSubmenuVisibilityOnClick(actionArgs) {
        var args = actionArgs.args.length && actionArgs.args[0];
        if (!args || this._disabledGetter(args.itemData)) {
            return
        }
        var $itemElement = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(args.itemElement);
        var currentSubmenu = this._getSubmenuByElement($itemElement, args.itemData);
        this._updateSelectedItemOnClick(actionArgs);
        if (this._visibleSubmenu) {
            if (this._visibleSubmenu === currentSubmenu) {
                if ("onClick" === this.option("showFirstSubmenuMode")) {
                    this._hideSubmenu(this._visibleSubmenu)
                }
                return
            } else {
                this._hideSubmenu(this._visibleSubmenu)
            }
        }
        if (!currentSubmenu) {
            return
        }
        if (!currentSubmenu.isOverlayVisible()) {
            this._showSubmenu($itemElement);
            return
        }
    }
    _optionChanged(args) {
        if (ACTIONS.indexOf(args.name) >= 0) {
            this._initActions();
            return
        }
        switch (args.name) {
            case "orientation":
            case "submenuDirection":
                this._invalidate();
                break;
            case "showFirstSubmenuMode":
            case "hideSubmenuOnMouseLeave":
                break;
            case "showSubmenuMode":
                this._changeSubmenusOption(args.name, args.value);
                break;
            case "adaptivityEnabled":
                args.value ? this._initAdaptivity() : this._removeAdaptivity();
                break;
            case "width":
                if (this._isAdaptivityEnabled()) {
                    this._treeView.option(args.name, args.value);
                    this._overlay.option(args.name, args.value)
                }
                super._optionChanged(args);
                this._dimensionChanged();
                break;
            case "animation":
                if (this._isAdaptivityEnabled()) {
                    this._treeView.option("animationEnabled", !!args.value)
                }
                super._optionChanged(args);
                break;
            default:
                if (this._isAdaptivityEnabled() && (args.name === args.fullName || "items" === args.name)) {
                    this._treeView.option(args.fullName, args.value)
                }
                super._optionChanged(args)
        }
    }
    _changeSubmenusOption(name, value) {
        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_6__["each"])(this._submenus, (index, submenu) => {
            submenu.option(name, value)
        })
    }
    selectItem(itemElement) {
        this._hideSubmenu(this._visibleSubmenu);
        super.selectItem(itemElement)
    }
    unselectItem(itemElement) {
        this._hideSubmenu(this._visibleSubmenu);
        super.selectItem(itemElement)
    }
}
Object(_core_component_registrator__WEBPACK_IMPORTED_MODULE_3__["default"])("dxMenu", Menu);
/* harmony default export */ __webpack_exports__["default"] = (Menu);


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/menu/ui.submenu.js":
/*!***********************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/menu/ui.submenu.js ***!
  \***********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _core_utils_size__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/utils/size */ "./node_modules/devextreme/esm/core/utils/size.js");
/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/renderer */ "./node_modules/devextreme/esm/core/renderer.js");
/* harmony import */ var _core_utils_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/utils/common */ "./node_modules/devextreme/esm/core/utils/common.js");
/* harmony import */ var _core_element__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/element */ "./node_modules/devextreme/esm/core/element.js");
/* harmony import */ var _animation_position__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../animation/position */ "./node_modules/devextreme/esm/animation/position.js");
/* harmony import */ var _core_utils_extend__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core/utils/extend */ "./node_modules/devextreme/esm/core/utils/extend.js");
/* harmony import */ var _context_menu__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../context_menu */ "./node_modules/devextreme/esm/ui/context_menu.js");
/**
 * DevExtreme (esm/ui/menu/ui.submenu.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */







var DX_CONTEXT_MENU_CONTENT_DELIMITER_CLASS = "dx-context-menu-content-delimiter";
var DX_SUBMENU_CLASS = "dx-submenu";
class Submenu extends _context_menu__WEBPACK_IMPORTED_MODULE_6__["default"] {
    _getDefaultOptions() {
        return Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_5__["extend"])(super._getDefaultOptions(), {
            orientation: "horizontal",
            tabIndex: null,
            onHoverStart: _core_utils_common__WEBPACK_IMPORTED_MODULE_2__["noop"]
        })
    }
    _initDataAdapter() {
        this._dataAdapter = this.option("_dataAdapter");
        if (!this._dataAdapter) {
            super._initDataAdapter()
        }
    }
    _renderContentImpl() {
        this._renderContextMenuOverlay();
        super._renderContentImpl();
        var node = this._dataAdapter.getNodeByKey(this.option("_parentKey"));
        node && this._renderItems(this._getChildNodes(node));
        this._renderDelimiter()
    }
    _renderDelimiter() {
        this.$contentDelimiter = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])("<div>").appendTo(this._itemContainer()).addClass(DX_CONTEXT_MENU_CONTENT_DELIMITER_CLASS)
    }
    _getOverlayOptions() {
        return Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_5__["extend"])(super._getOverlayOptions(), {
            onPositioned: this._overlayPositionedActionHandler.bind(this)
        })
    }
    _overlayPositionedActionHandler(arg) {
        this._showDelimiter(arg)
    }
    _hoverEndHandler(e) {
        super._hoverEndHandler(e);
        this._toggleFocusClass(false, e.currentTarget)
    }
    _isMenuHorizontal() {
        return "horizontal" === this.option("orientation")
    }
    _hoverStartHandler(e) {
        var hoverStartAction = this.option("onHoverStart");
        hoverStartAction(e);
        super._hoverStartHandler(e);
        this._toggleFocusClass(true, e.currentTarget)
    }
    _drawSubmenu($rootItem) {
        this._actions.onShowing({
            rootItem: Object(_core_element__WEBPACK_IMPORTED_MODULE_3__["getPublicElement"])($rootItem),
            submenu: this
        });
        super._drawSubmenu($rootItem);
        this._actions.onShown({
            rootItem: Object(_core_element__WEBPACK_IMPORTED_MODULE_3__["getPublicElement"])($rootItem),
            submenu: this
        })
    }
    _hideSubmenu($rootItem) {
        this._actions.onHiding({
            cancel: true,
            rootItem: Object(_core_element__WEBPACK_IMPORTED_MODULE_3__["getPublicElement"])($rootItem),
            submenu: this
        });
        super._hideSubmenu($rootItem);
        this._actions.onHidden({
            rootItem: Object(_core_element__WEBPACK_IMPORTED_MODULE_3__["getPublicElement"])($rootItem),
            submenu: this
        })
    }
    _showDelimiter(arg) {
        if (!this.$contentDelimiter) {
            return
        }
        var $submenu = this._itemContainer().children(".".concat(DX_SUBMENU_CLASS)).eq(0);
        var $rootItem = this.option("position").of;
        var position = {
            of: $submenu
        };
        var containerOffset = arg.position;
        var vLocation = containerOffset.v.location;
        var hLocation = containerOffset.h.location;
        var rootOffset = $rootItem.offset();
        var offsetLeft = Math.round(rootOffset.left);
        var offsetTop = Math.round(rootOffset.top);
        var rootWidth = Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getWidth"])($rootItem);
        var rootHeight = Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getHeight"])($rootItem);
        var submenuWidth = Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getWidth"])($submenu);
        var submenuHeight = Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getHeight"])($submenu);
        this.$contentDelimiter.css("display", "block");
        Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["setWidth"])(this.$contentDelimiter, this._isMenuHorizontal() ? rootWidth < submenuWidth ? rootWidth - 2 : submenuWidth : 2);
        Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["setHeight"])(this.$contentDelimiter, this._isMenuHorizontal() ? 2 : rootHeight < submenuHeight ? rootHeight - 2 : submenuHeight);
        if (this._isMenuHorizontal()) {
            if (vLocation > offsetTop) {
                if (Math.round(hLocation) === offsetLeft) {
                    position.offset = "1 -1";
                    position.at = position.my = "left top"
                } else {
                    position.offset = "-1 -1";
                    position.at = position.my = "right top"
                }
            } else {
                Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["setHeight"])(this.$contentDelimiter, 5);
                if (Math.round(hLocation) === offsetLeft) {
                    position.offset = "1 4";
                    position.at = position.my = "left bottom"
                } else {
                    position.offset = "-1 2";
                    position.at = position.my = "right bottom"
                }
            }
        } else if (hLocation > offsetLeft) {
            if (Math.round(vLocation) === offsetTop) {
                position.offset = "-1 1";
                position.at = position.my = "left top"
            } else {
                position.offset = "-1 -1";
                position.at = position.my = "left bottom"
            }
        } else if (Math.round(vLocation) === offsetTop) {
            position.offset = "1 1";
            position.at = position.my = "right top"
        } else {
            position.offset = "1 -1";
            position.at = position.my = "right bottom"
        }
        _animation_position__WEBPACK_IMPORTED_MODULE_4__["default"].setup(this.$contentDelimiter, position)
    }
    _getContextMenuPosition() {
        return this.option("position")
    }
    isOverlayVisible() {
        return this._overlay.option("visible")
    }
    getOverlayContent() {
        return this._overlay.$content()
    }
}
/* harmony default export */ __webpack_exports__["default"] = (Submenu);


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/overlay/utils.js":
/*!*********************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/overlay/utils.js ***!
  \*********************************************************/
/*! exports provided: getElementMaxHeightByWindow */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getElementMaxHeightByWindow", function() { return getElementMaxHeightByWindow; });
/* harmony import */ var _core_utils_size__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/utils/size */ "./node_modules/devextreme/esm/core/utils/size.js");
/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/renderer */ "./node_modules/devextreme/esm/core/renderer.js");
/* harmony import */ var _core_utils_window__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/utils/window */ "./node_modules/devextreme/esm/core/utils/window.js");
/* harmony import */ var _core_utils_type__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/utils/type */ "./node_modules/devextreme/esm/core/utils/type.js");
/**
 * DevExtreme (esm/ui/overlay/utils.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */




var WINDOW_HEIGHT_PERCENT = .9;
var getElementMaxHeightByWindow = ($element, startLocation) => {
    var $window = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(Object(_core_utils_window__WEBPACK_IMPORTED_MODULE_2__["getWindow"])());
    var {
        top: elementOffset
    } = $element.offset();
    var actualOffset;
    if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_3__["isNumeric"])(startLocation)) {
        if (startLocation < elementOffset) {
            return elementOffset - startLocation
        } else {
            actualOffset = Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getInnerHeight"])($window) - startLocation + $window.scrollTop()
        }
    } else {
        var offsetTop = elementOffset - $window.scrollTop();
        var offsetBottom = Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getInnerHeight"])($window) - offsetTop - Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getOuterHeight"])($element);
        actualOffset = Math.max(offsetTop, offsetBottom)
    }
    return actualOffset * WINDOW_HEIGHT_PERCENT
};


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/pager.js":
/*!*************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/pager.js ***!
  \*************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _renovation_ui_pager_pager_j__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../renovation/ui/pager/pager.j */ "./node_modules/devextreme/esm/renovation/ui/pager/pager.j.js");
/**
 * DevExtreme (esm/ui/pager.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */

/* harmony default export */ __webpack_exports__["default"] = (_renovation_ui_pager_pager_j__WEBPACK_IMPORTED_MODULE_0__["default"]);


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/shared/accessibility.js":
/*!****************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/shared/accessibility.js ***!
  \****************************************************************/
/*! exports provided: subscribeVisibilityChange, unsubscribeVisibilityChange, hiddenFocus, registerKeyboardAction, restoreFocus, selectView, setTabIndex */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "subscribeVisibilityChange", function() { return subscribeVisibilityChange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unsubscribeVisibilityChange", function() { return unsubscribeVisibilityChange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hiddenFocus", function() { return hiddenFocus; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "registerKeyboardAction", function() { return registerKeyboardAction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "restoreFocus", function() { return restoreFocus; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "selectView", function() { return selectView; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setTabIndex", function() { return setTabIndex; });
/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/renderer */ "./node_modules/devextreme/esm/core/renderer.js");
/* harmony import */ var _events_core_events_engine__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../events/core/events_engine */ "./node_modules/devextreme/esm/events/core/events_engine.js");
/* harmony import */ var _events_utils_index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../events/utils/index */ "./node_modules/devextreme/esm/events/utils/index.js");
/* harmony import */ var _core_utils_extend__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/utils/extend */ "./node_modules/devextreme/esm/core/utils/extend.js");
/* harmony import */ var _core_dom_adapter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/dom_adapter */ "./node_modules/devextreme/esm/core/dom_adapter.js");
/* harmony import */ var _core_utils_common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core/utils/common */ "./node_modules/devextreme/esm/core/utils/common.js");
/**
 * DevExtreme (esm/ui/shared/accessibility.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */






var FOCUS_STATE_CLASS = "dx-state-focused";
var FOCUS_DISABLED_CLASS = "dx-cell-focus-disabled";
var FOCUSED_ROW_SELECTOR = ".dx-row-focused";
var GRID_ROW_SELECTOR = ".dx-datagrid-rowsview .dx-row";
var GRID_CELL_SELECTOR = "".concat(GRID_ROW_SELECTOR, " > td");
var TREELIST_ROW_SELECTOR = ".dx-treelist-rowsview .dx-row";
var TREELIST_CELL_SELECTOR = "".concat(TREELIST_ROW_SELECTOR, " > td");
var viewItemSelectorMap = {
    groupPanel: [".dx-datagrid-group-panel .dx-group-panel-item[tabindex]"],
    columnHeaders: [".dx-datagrid-headers .dx-header-row > td.dx-datagrid-action", ".dx-treelist-headers .dx-header-row > td.dx-treelist-action"],
    filterRow: [".dx-datagrid-headers .dx-datagrid-filter-row .dx-editor-cell .dx-texteditor-input", ".dx-treelist-headers .dx-treelist-filter-row .dx-editor-cell .dx-texteditor-input"],
    rowsView: ["".concat(FOCUSED_ROW_SELECTOR), "".concat(GRID_ROW_SELECTOR, "[tabindex]"), "".concat(GRID_CELL_SELECTOR, "[tabindex]"), "".concat(GRID_CELL_SELECTOR), "".concat(TREELIST_ROW_SELECTOR, "[tabindex]"), "".concat(TREELIST_CELL_SELECTOR, "[tabindex]"), "".concat(TREELIST_CELL_SELECTOR)],
    footer: [".dx-datagrid-total-footer .dx-datagrid-summary-item", ".dx-treelist-total-footer .dx-treelist-summary-item"],
    filterPanel: [".dx-datagrid-filter-panel .dx-icon-filter", ".dx-treelist-filter-panel .dx-icon-filter"],
    pager: [".dx-datagrid-pager [tabindex]", ".dx-treelist-pager [tabindex]"]
};
var isMouseDown = false;
var isHiddenFocusing = false;
var focusedElementInfo = null;

function processKeyDown(viewName, instance, event, action, $mainElement, executeKeyDown) {
    var isHandled = fireKeyDownEvent(instance, event.originalEvent, executeKeyDown);
    if (isHandled) {
        return
    }
    var keyName = Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_2__["normalizeKeyName"])(event);
    if ("enter" === keyName || "space" === keyName) {
        saveFocusedElementInfo(event.target, instance);
        action && action({
            event: event
        })
    } else if ("tab" === keyName) {
        $mainElement.addClass(FOCUS_STATE_CLASS)
    } else {
        selectView(viewName, instance, event)
    }
}

function saveFocusedElementInfo(target, instance) {
    var $target = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(target);
    var ariaLabel = $target.attr("aria-label");
    var $activeElements = getActiveAccessibleElements(ariaLabel, instance.element());
    var targetIndex = $activeElements.index($target);
    focusedElementInfo = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_3__["extend"])({}, {
        ariaLabel: ariaLabel,
        index: targetIndex
    }, {
        viewInstance: instance
    })
}

function getActiveAccessibleElements(ariaLabel, viewElement) {
    var $viewElement = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(viewElement);
    var $activeElements;
    if (ariaLabel) {
        $activeElements = $viewElement.find('[aria-label="'.concat(ariaLabel, '"][tabindex]'))
    } else {
        $activeElements = $viewElement.find("[tabindex]")
    }
    return $activeElements
}

function findFocusedViewElement(viewSelectors) {
    for (var index in viewSelectors) {
        var selector = viewSelectors[index];
        var $focusViewElement = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(selector).first();
        if ($focusViewElement.length) {
            return $focusViewElement
        }
    }
}

function fireKeyDownEvent(instance, event, executeAction) {
    var args = {
        event: event,
        handled: false
    };
    if (executeAction) {
        executeAction(args)
    } else {
        instance._createActionByOption("onKeyDown")(args)
    }
    return args.handled
}

function onDocumentVisibilityChange() {
    isHiddenFocusing = "visible" === _core_dom_adapter__WEBPACK_IMPORTED_MODULE_4__["default"].getDocument().visibilityState
}
function subscribeVisibilityChange() {
    _events_core_events_engine__WEBPACK_IMPORTED_MODULE_1__["default"].on(_core_dom_adapter__WEBPACK_IMPORTED_MODULE_4__["default"].getDocument(), "visibilitychange", onDocumentVisibilityChange)
}
function unsubscribeVisibilityChange() {
    _events_core_events_engine__WEBPACK_IMPORTED_MODULE_1__["default"].off(_core_dom_adapter__WEBPACK_IMPORTED_MODULE_4__["default"].getDocument(), "visibilitychange", onDocumentVisibilityChange)
}
function hiddenFocus(element) {
    isHiddenFocusing = true;
    element.focus();
    isHiddenFocusing = false
}
function registerKeyboardAction(viewName, instance, $element, selector, action, executeKeyDown) {
    if (instance.option("useLegacyKeyboardNavigation")) {
        return _core_utils_common__WEBPACK_IMPORTED_MODULE_5__["noop"]
    }
    var getMainElement = () => Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(instance.element());
    var keyDownHandler = e => processKeyDown(viewName, instance, e, action, getMainElement(), executeKeyDown);
    var mouseDownHandler = () => {
        isMouseDown = true;
        getMainElement().removeClass(FOCUS_STATE_CLASS)
    };
    var focusinHandler = () => {
        var needShowOverlay = !isMouseDown && !isHiddenFocusing;
        if (needShowOverlay) {
            getMainElement().addClass(FOCUS_STATE_CLASS)
        }
        isMouseDown = false
    };
    _events_core_events_engine__WEBPACK_IMPORTED_MODULE_1__["default"].on($element, "keydown", selector, keyDownHandler);
    _events_core_events_engine__WEBPACK_IMPORTED_MODULE_1__["default"].on($element, "mousedown", selector, mouseDownHandler);
    _events_core_events_engine__WEBPACK_IMPORTED_MODULE_1__["default"].on($element, "focusin", selector, focusinHandler);
    return () => {
        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_1__["default"].off($element, "keydown", selector, keyDownHandler);
        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_1__["default"].off($element, "mousedown", selector, mouseDownHandler);
        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_1__["default"].off($element, "focusin", selector, focusinHandler)
    }
}
function restoreFocus(instance) {
    if (!instance.option("useLegacyKeyboardNavigation") && focusedElementInfo) {
        var viewInstance = focusedElementInfo.viewInstance;
        if (viewInstance) {
            var $activeElements = getActiveAccessibleElements(focusedElementInfo.ariaLabel, viewInstance.element());
            var $targetElement = $activeElements.eq(focusedElementInfo.index);
            focusedElementInfo = null;
            _events_core_events_engine__WEBPACK_IMPORTED_MODULE_1__["default"].trigger($targetElement, "focus")
        }
    }
}
function selectView(viewName, instance, event) {
    var keyName = Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_2__["normalizeKeyName"])(event);
    if (event.ctrlKey && ("upArrow" === keyName || "downArrow" === keyName)) {
        var viewNames = Object.keys(viewItemSelectorMap);
        var viewItemIndex = viewNames.indexOf(viewName);
        while (viewItemIndex >= 0 && viewItemIndex < viewNames.length) {
            viewItemIndex = "upArrow" === keyName ? --viewItemIndex : ++viewItemIndex;
            var _viewName = viewNames[viewItemIndex];
            var viewSelectors = viewItemSelectorMap[_viewName];
            var $focusViewElement = findFocusedViewElement(viewSelectors);
            if ($focusViewElement && $focusViewElement.length) {
                $focusViewElement.attr("tabindex", instance.option("tabindex") || 0);
                _events_core_events_engine__WEBPACK_IMPORTED_MODULE_1__["default"].trigger($focusViewElement, "focus");
                $focusViewElement.removeClass(FOCUS_DISABLED_CLASS);
                break
            }
        }
    }
}
function setTabIndex(instance, $element) {
    if (!instance.option("useLegacyKeyboardnavigation")) {
        $element.attr("tabindex", instance.option("tabindex") || 0)
    }
}


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/shared/filtering.js":
/*!************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/shared/filtering.js ***!
  \************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _core_utils_type__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/utils/type */ "./node_modules/devextreme/esm/core/utils/type.js");
/* harmony import */ var _core_utils_array__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/utils/array */ "./node_modules/devextreme/esm/core/utils/array.js");
/* harmony import */ var _core_utils_iterator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/utils/iterator */ "./node_modules/devextreme/esm/core/utils/iterator.js");
/**
 * DevExtreme (esm/ui/shared/filtering.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */



var DEFAULT_DATE_INTERVAL = ["year", "month", "day"];
var DEFAULT_DATETIME_INTERVAL = ["year", "month", "day", "hour", "minute"];
var isDateType = function(dataType) {
    return "date" === dataType || "datetime" === dataType
};
var getGroupInterval = function(column) {
    var index;
    var result = [];
    var dateIntervals = ["year", "month", "day", "hour", "minute", "second"];
    var groupInterval = column.headerFilter && column.headerFilter.groupInterval;
    var interval = "quarter" === groupInterval ? "month" : groupInterval;
    if (isDateType(column.dataType) && null !== groupInterval) {
        result = "datetime" === column.dataType ? DEFAULT_DATETIME_INTERVAL : DEFAULT_DATE_INTERVAL;
        index = Object(_core_utils_array__WEBPACK_IMPORTED_MODULE_1__["inArray"])(interval, dateIntervals);
        if (index >= 0) {
            result = dateIntervals.slice(0, index);
            result.push(groupInterval);
            return result
        }
        return result
    } else if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_0__["isDefined"])(groupInterval)) {
        return Array.isArray(groupInterval) ? groupInterval : [groupInterval]
    }
};
/* harmony default export */ __webpack_exports__["default"] = (function() {
    var getFilterSelector = function(column, target) {
        var selector = column.dataField || column.selector;
        if ("search" === target) {
            selector = column.displayField || column.calculateDisplayValue || selector
        }
        return selector
    };
    var getFilterExpressionByRange = function(filterValue, target) {
        var endFilterValue;
        var startFilterExpression;
        var endFilterExpression;
        var selector = getFilterSelector(this, target);
        if (Array.isArray(filterValue) && Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_0__["isDefined"])(filterValue[0]) && Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_0__["isDefined"])(filterValue[1])) {
            startFilterExpression = [selector, ">=", filterValue[0]];
            endFilterExpression = [selector, "<=", filterValue[1]];
            if (isDateType(this.dataType) && (date = filterValue[1], date.getHours() + date.getMinutes() + date.getSeconds() + date.getMilliseconds() < 1)) {
                endFilterValue = new Date(filterValue[1].getTime());
                if ("date" === this.dataType) {
                    endFilterValue.setDate(filterValue[1].getDate() + 1)
                }
                endFilterExpression = [selector, "<", endFilterValue]
            }
            return [startFilterExpression, "and", endFilterExpression]
        }
        var date
    };
    var getFilterExpressionForDate = function(filterValue, selectedFilterOperation, target) {
        var dateStart;
        var dateEnd;
        var dateInterval;
        var values = function(dateValue) {
            if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_0__["isDate"])(dateValue)) {
                return [dateValue.getFullYear(), dateValue.getMonth(), dateValue.getDate(), dateValue.getHours(), dateValue.getMinutes(), dateValue.getSeconds()]
            }
            return Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_2__["map"])(("" + dateValue).split("/"), (function(value, index) {
                return 1 === index ? Number(value) - 1 : Number(value)
            }))
        }(filterValue);
        var selector = getFilterSelector(this, target);
        if ("headerFilter" === target) {
            dateInterval = getGroupInterval(this)[values.length - 1]
        } else if ("datetime" === this.dataType) {
            dateInterval = "minute"
        }
        switch (dateInterval) {
            case "year":
                dateStart = new Date(values[0], 0, 1);
                dateEnd = new Date(values[0] + 1, 0, 1);
                break;
            case "month":
                dateStart = new Date(values[0], values[1], 1);
                dateEnd = new Date(values[0], values[1] + 1, 1);
                break;
            case "quarter":
                dateStart = new Date(values[0], 3 * values[1], 1);
                dateEnd = new Date(values[0], 3 * values[1] + 3, 1);
                break;
            case "hour":
                dateStart = new Date(values[0], values[1], values[2], values[3]);
                dateEnd = new Date(values[0], values[1], values[2], values[3] + 1);
                break;
            case "minute":
                dateStart = new Date(values[0], values[1], values[2], values[3], values[4]);
                dateEnd = new Date(values[0], values[1], values[2], values[3], values[4] + 1);
                break;
            case "second":
                dateStart = new Date(values[0], values[1], values[2], values[3], values[4], values[5]);
                dateEnd = new Date(values[0], values[1], values[2], values[3], values[4], values[5] + 1);
                break;
            default:
                dateStart = new Date(values[0], values[1], values[2]);
                dateEnd = new Date(values[0], values[1], values[2] + 1)
        }
        switch (selectedFilterOperation) {
            case "<":
                return [selector, "<", dateStart];
            case "<=":
                return [selector, "<", dateEnd];
            case ">":
                return [selector, ">=", dateEnd];
            case ">=":
                return [selector, ">=", dateStart];
            case "<>":
                return [
                    [selector, "<", dateStart], "or", [selector, ">=", dateEnd]
                ];
            default:
                return [
                    [selector, ">=", dateStart], "and", [selector, "<", dateEnd]
                ]
        }
    };
    var getFilterExpressionForNumber = function(filterValue, selectedFilterOperation, target) {
        var selector = getFilterSelector(this, target);
        var groupInterval = getGroupInterval(this);
        if ("headerFilter" === target && groupInterval && Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_0__["isDefined"])(filterValue)) {
            var values = ("" + filterValue).split("/");
            var value = Number(values[values.length - 1]);
            var interval = groupInterval[values.length - 1];
            var startFilterValue = [selector, ">=", value];
            var endFilterValue = [selector, "<", value + interval];
            var condition = [startFilterValue, "and", endFilterValue];
            return condition
        }
        return [selector, selectedFilterOperation || "=", filterValue]
    };
    return {
        defaultCalculateFilterExpression: function(filterValue, selectedFilterOperation, target) {
            var column = this;
            var selector = getFilterSelector(column, target);
            var isSearchByDisplayValue = column.calculateDisplayValue && "search" === target;
            var dataType = isSearchByDisplayValue && column.lookup && column.lookup.dataType || column.dataType;
            var filter = null;
            if (("headerFilter" === target || "filterBuilder" === target) && null === filterValue) {
                filter = [selector, selectedFilterOperation || "=", null];
                if ("string" === dataType) {
                    filter = [filter, "=" === selectedFilterOperation ? "or" : "and", [selector, selectedFilterOperation || "=", ""]]
                }
            } else if ("string" === dataType && (!column.lookup || isSearchByDisplayValue)) {
                filter = [selector, selectedFilterOperation || "contains", filterValue]
            } else if ("between" === selectedFilterOperation) {
                return getFilterExpressionByRange.apply(column, [filterValue, target])
            } else if (isDateType(dataType) && Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_0__["isDefined"])(filterValue)) {
                return getFilterExpressionForDate.apply(column, arguments)
            } else if ("number" === dataType) {
                return getFilterExpressionForNumber.apply(column, arguments)
            } else {
                filter = [selector, selectedFilterOperation || "=", filterValue]
            }
            return filter
        },
        getGroupInterval: getGroupInterval
    }
}());


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/shared/ui.editor_factory_mixin.js":
/*!**************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/shared/ui.editor_factory_mixin.js ***!
  \**************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/renderer */ "./node_modules/devextreme/esm/core/renderer.js");
/* harmony import */ var _events_core_events_engine__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../events/core/events_engine */ "./node_modules/devextreme/esm/events/core/events_engine.js");
/* harmony import */ var _core_utils_type__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/utils/type */ "./node_modules/devextreme/esm/core/utils/type.js");
/* harmony import */ var _core_utils_variable_wrapper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/utils/variable_wrapper */ "./node_modules/devextreme/esm/core/utils/variable_wrapper.js");
/* harmony import */ var _core_utils_data__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/utils/data */ "./node_modules/devextreme/esm/core/utils/data.js");
/* harmony import */ var _core_utils_browser__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core/utils/browser */ "./node_modules/devextreme/esm/core/utils/browser.js");
/* harmony import */ var _core_utils_extend__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../core/utils/extend */ "./node_modules/devextreme/esm/core/utils/extend.js");
/* harmony import */ var _core_devices__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../core/devices */ "./node_modules/devextreme/esm/core/devices.js");
/* harmony import */ var _core_element__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../core/element */ "./node_modules/devextreme/esm/core/element.js");
/* harmony import */ var _data_data_source_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../data/data_source/utils */ "./node_modules/devextreme/esm/data/data_source/utils.js");
/* harmony import */ var _events_utils_index__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../events/utils/index */ "./node_modules/devextreme/esm/events/utils/index.js");
/* harmony import */ var _text_box__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../text_box */ "./node_modules/devextreme/esm/ui/text_box.js");
/* harmony import */ var _number_box__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../number_box */ "./node_modules/devextreme/esm/ui/number_box.js");
/* harmony import */ var _check_box__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../check_box */ "./node_modules/devextreme/esm/ui/check_box.js");
/* harmony import */ var _select_box__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../select_box */ "./node_modules/devextreme/esm/ui/select_box.js");
/* harmony import */ var _date_box__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../date_box */ "./node_modules/devextreme/esm/ui/date_box.js");
/**
 * DevExtreme (esm/ui/shared/ui.editor_factory_mixin.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */











var {
    isWrapped: isWrapped
} = _core_utils_variable_wrapper__WEBPACK_IMPORTED_MODULE_3__["default"];





var CHECKBOX_SIZE_CLASS = "checkbox-size";
var EDITOR_INLINE_BLOCK = "dx-editor-inline-block";
var EditorFactoryMixin = function() {
    var getResultConfig = function(config, options) {
        return Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_6__["extend"])(config, {
            readOnly: options.readOnly,
            placeholder: options.placeholder,
            inputAttr: {
                id: options.id
            },
            tabIndex: options.tabIndex
        }, options.editorOptions)
    };
    var checkEnterBug = function() {
        return _core_utils_browser__WEBPACK_IMPORTED_MODULE_5__["default"].mozilla || _core_devices__WEBPACK_IMPORTED_MODULE_7__["default"].real().ios
    };
    var getTextEditorConfig = function(options) {
        var data = {};
        var isEnterBug = checkEnterBug();
        var sharedData = options.sharedData || data;
        return getResultConfig({
            placeholder: options.placeholder,
            width: options.width,
            value: options.value,
            onValueChanged: function(e) {
                var needDelayedUpdate = "filterRow" === options.parentType || "searchPanel" === options.parentType;
                var isInputOrKeyUpEvent = e.event && ("input" === e.event.type || "keyup" === e.event.type);
                var updateValue = function(e, notFireEvent) {
                    options && options.setValue(e.value, notFireEvent)
                };
                clearTimeout(data.valueChangeTimeout);
                if (isInputOrKeyUpEvent && needDelayedUpdate) {
                    sharedData.valueChangeTimeout = data.valueChangeTimeout = setTimeout((function() {
                        updateValue(e, data.valueChangeTimeout !== sharedData.valueChangeTimeout)
                    }), Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_2__["isDefined"])(options.updateValueTimeout) ? options.updateValueTimeout : 0)
                } else {
                    updateValue(e)
                }
            },
            onKeyDown: function(e) {
                if (isEnterBug && "enter" === Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_10__["normalizeKeyName"])(e.event)) {
                    _events_core_events_engine__WEBPACK_IMPORTED_MODULE_1__["default"].trigger(Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(e.component._input()), "change")
                }
            },
            valueChangeEvent: "change" + ("filterRow" === options.parentType ? " keyup input" : "")
        }, options)
    };
    var prepareBooleanEditor = function(options) {
        if ("filterRow" === options.parentType || "filterBuilder" === options.parentType) {
            prepareSelectBox(Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_6__["extend"])(options, {
                lookup: {
                    displayExpr: function(data) {
                        if (true === data) {
                            return options.trueText || "true"
                        } else if (false === data) {
                            return options.falseText || "false"
                        }
                    },
                    dataSource: [true, false]
                }
            }))
        } else {
            ! function(options) {
                options.editorName = "dxCheckBox";
                options.editorOptions = getResultConfig({
                    elementAttr: {
                        id: options.id
                    },
                    value: Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_2__["isDefined"])(options.value) ? options.value : void 0,
                    hoverStateEnabled: !options.readOnly,
                    focusStateEnabled: !options.readOnly,
                    activeStateEnabled: false,
                    onValueChanged: function(e) {
                        options.setValue && options.setValue(e.value, e)
                    }
                }, options)
            }(options)
        }
    };

    function prepareSelectBox(options) {
        var lookup = options.lookup;
        var displayGetter;
        var dataSource;
        var postProcess;
        var isFilterRow = "filterRow" === options.parentType;
        if (lookup) {
            displayGetter = Object(_core_utils_data__WEBPACK_IMPORTED_MODULE_4__["compileGetter"])(lookup.displayExpr);
            dataSource = lookup.dataSource;
            if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_2__["isFunction"])(dataSource) && !isWrapped(dataSource)) {
                dataSource = dataSource(options.row || {});
                ! function(options) {
                    if (options.row && options.row.watch && "dataRow" === options.parentType) {
                        var editorOptions = options.editorOptions || {};
                        options.editorOptions = editorOptions;
                        var selectBox;
                        var onInitialized = editorOptions.onInitialized;
                        editorOptions.onInitialized = function(e) {
                            onInitialized && onInitialized.apply(this, arguments);
                            selectBox = e.component;
                            selectBox.on("disposing", stopWatch)
                        };
                        var dataSource;
                        var stopWatch = options.row.watch(() => {
                            dataSource = options.lookup.dataSource(options.row);
                            return dataSource && dataSource.filter
                        }, () => {
                            selectBox.option("dataSource", dataSource)
                        }, row => {
                            options.row = row
                        })
                    }
                }(options)
            }
            if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_2__["isObject"])(dataSource) || Array.isArray(dataSource)) {
                dataSource = Object(_data_data_source_utils__WEBPACK_IMPORTED_MODULE_9__["normalizeDataSourceOptions"])(dataSource);
                if (isFilterRow) {
                    postProcess = dataSource.postProcess;
                    dataSource.postProcess = function(items) {
                        if (0 === this.pageIndex()) {
                            items = items.slice(0);
                            items.unshift(null)
                        }
                        if (postProcess) {
                            return postProcess.call(this, items)
                        }
                        return items
                    }
                }
            }
            var allowClearing = Boolean(lookup.allowClearing && !isFilterRow);
            options.editorName = "dxSelectBox";
            options.editorOptions = getResultConfig({
                searchEnabled: true,
                value: options.value,
                valueExpr: options.lookup.valueExpr,
                searchExpr: options.lookup.searchExpr || options.lookup.displayExpr,
                allowClearing: allowClearing,
                showClearButton: allowClearing,
                displayExpr: function(data) {
                    if (null === data) {
                        return options.showAllText
                    }
                    return displayGetter(data)
                },
                dataSource: dataSource,
                onValueChanged: function(e) {
                    var params = [e.value];
                    !isFilterRow && params.push(e.component.option("text"));
                    options.setValue.apply(this, params)
                }
            }, options)
        }
    }
    return {
        createEditor: function($container, options) {
            options.cancel = false;
            options.editorElement = Object(_core_element__WEBPACK_IMPORTED_MODULE_8__["getPublicElement"])($container);
            if (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_2__["isDefined"])(options.tabIndex)) {
                options.tabIndex = this.option("tabIndex")
            }
            if (options.lookup) {
                prepareSelectBox(options)
            } else {
                switch (options.dataType) {
                    case "date":
                    case "datetime":
                        ! function(options) {
                            options.editorName = "dxDateBox";
                            options.editorOptions = getResultConfig({
                                value: options.value,
                                onValueChanged: function(args) {
                                    options.setValue(args.value)
                                },
                                onKeyDown: function(_ref) {
                                    var {
                                        component: component,
                                        event: event
                                    } = _ref;
                                    var useMaskBehavior = component.option("useMaskBehavior");
                                    if ((checkEnterBug() || useMaskBehavior) && "enter" === Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_10__["normalizeKeyName"])(event)) {
                                        component.blur();
                                        component.focus()
                                    }
                                },
                                displayFormat: options.format,
                                type: options.dataType,
                                dateSerializationFormat: null,
                                width: "filterBuilder" === options.parentType ? void 0 : "auto"
                            }, options)
                        }(options);
                        break;
                    case "boolean":
                        prepareBooleanEditor(options);
                        break;
                    case "number":
                        ! function(options) {
                            var config = getTextEditorConfig(options);
                            config.value = Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_2__["isDefined"])(options.value) ? options.value : null;
                            options.editorName = "dxNumberBox";
                            options.editorOptions = config
                        }(options);
                        break;
                    default:
                        ! function(options) {
                            var config = getTextEditorConfig(options);
                            var isSearching = "searchPanel" === options.parentType;
                            if (options.editorType && "dxTextBox" !== options.editorType) {
                                config.value = options.value
                            } else {
                                config.value = (value = options.value, Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_2__["isDefined"])(value) ? value.toString() : "")
                            }
                            var value;
                            config.valueChangeEvent += isSearching ? " keyup input search" : "";
                            config.mode = config.mode || (isSearching ? "search" : "text");
                            options.editorName = "dxTextBox";
                            options.editorOptions = config
                        }(options)
                }
            }
            if ("dataRow" === options.parentType && options.editorType) {
                options.editorName = options.editorType
            }
            this.executeAction("onEditorPreparing", options);
            if (options.cancel) {
                return
            }
            if ("dataRow" === options.parentType && !options.isOnForm && !Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_2__["isDefined"])(options.editorOptions.showValidationMark)) {
                options.editorOptions.showValidationMark = false
            }! function(that, options) {
                var $editorElement = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(options.editorElement);
                if (options.editorName && options.editorOptions && $editorElement[options.editorName]) {
                    if ("dxCheckBox" === options.editorName || "dxSwitch" === options.editorName) {
                        if (!options.isOnForm) {
                            $editorElement.addClass(that.addWidgetPrefix(CHECKBOX_SIZE_CLASS));
                            $editorElement.parent().addClass(EDITOR_INLINE_BLOCK)
                        }
                    }
                    that._createComponent($editorElement, options.editorName, options.editorOptions);
                    if ("dxDateBox" === options.editorName) {
                        var dateBox = $editorElement.dxDateBox("instance");
                        var defaultEnterKeyHandler = dateBox._supportedKeys().enter;
                        dateBox.registerKeyHandler("enter", e => {
                            if (dateBox.option("opened")) {
                                defaultEnterKeyHandler(e)
                            }
                            return true
                        })
                    }
                    if ("dxTextArea" === options.editorName) {
                        $editorElement.dxTextArea("instance").registerKeyHandler("enter", (function(event) {
                            if ("enter" === Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_10__["normalizeKeyName"])(event) && !event.ctrlKey && !event.shiftKey) {
                                event.stopPropagation()
                            }
                        }))
                    }
                }
            }(this, options);
            this.executeAction("onEditorPrepared", options)
        }
    }
}();
/* harmony default export */ __webpack_exports__["default"] = (EditorFactoryMixin);


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/sortable.js":
/*!****************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/sortable.js ***!
  \****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _core_utils_size__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/utils/size */ "./node_modules/devextreme/esm/core/utils/size.js");
/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/renderer */ "./node_modules/devextreme/esm/core/renderer.js");
/* harmony import */ var _events_core_events_engine__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../events/core/events_engine */ "./node_modules/devextreme/esm/events/core/events_engine.js");
/* harmony import */ var _core_component_registrator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../core/component_registrator */ "./node_modules/devextreme/esm/core/component_registrator.js");
/* harmony import */ var _core_utils_extend__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../core/utils/extend */ "./node_modules/devextreme/esm/core/utils/extend.js");
/* harmony import */ var _draggable__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./draggable */ "./node_modules/devextreme/esm/ui/draggable.js");
/* harmony import */ var _core_element__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../core/element */ "./node_modules/devextreme/esm/core/element.js");
/* harmony import */ var _core_utils_window__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../core/utils/window */ "./node_modules/devextreme/esm/core/utils/window.js");
/* harmony import */ var _core_utils_position__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../core/utils/position */ "./node_modules/devextreme/esm/core/utils/position.js");
/* harmony import */ var _animation_translator__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../animation/translator */ "./node_modules/devextreme/esm/animation/translator.js");
/* harmony import */ var _animation_fx__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../animation/fx */ "./node_modules/devextreme/esm/animation/fx.js");
/* harmony import */ var _core_utils_deferred__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../core/utils/deferred */ "./node_modules/devextreme/esm/core/utils/deferred.js");
/**
 * DevExtreme (esm/ui/sortable.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */












var window = Object(_core_utils_window__WEBPACK_IMPORTED_MODULE_7__["getWindow"])();
var SORTABLE = "dxSortable";
var PLACEHOLDER_CLASS = "placeholder";
var CLONE_CLASS = "clone";
var isElementVisible = itemElement => Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(itemElement).is(":visible");
var animate = (element, config) => {
    var _config$to, _config$to2;
    if (!element) {
        return
    }
    var left = (null === (_config$to = config.to) || void 0 === _config$to ? void 0 : _config$to.left) || 0;
    var top = (null === (_config$to2 = config.to) || void 0 === _config$to2 ? void 0 : _config$to2.top) || 0;
    element.style.transform = "translate(".concat(left, "px,").concat(top, "px)");
    element.style.transition = _animation_fx__WEBPACK_IMPORTED_MODULE_10__["default"].off ? "" : "transform ".concat(config.duration, "ms ").concat(config.easing)
};
var stopAnimation = element => {
    if (!element) {
        return
    }
    element.style.transform = "";
    element.style.transition = ""
};

function getScrollableBoundary($scrollable) {
    var offset = $scrollable.offset();
    var style = $scrollable[0].style;
    var paddingLeft = parseFloat(style.paddingLeft) || 0;
    var paddingRight = parseFloat(style.paddingRight) || 0;
    var paddingTop = parseFloat(style.paddingTop) || 0;
    var width = $scrollable[0].clientWidth - (paddingLeft + paddingRight);
    var height = Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getHeight"])($scrollable);
    var left = offset.left + paddingLeft;
    var top = offset.top + paddingTop;
    return {
        left: left,
        right: left + width,
        top: top,
        bottom: top + height
    }
}
var Sortable = _draggable__WEBPACK_IMPORTED_MODULE_5__["default"].inherit({
    _init: function() {
        this.callBase();
        this._sourceScrollHandler = this._handleSourceScroll.bind(this);
        this._sourceScrollableInfo = null
    },
    _getDefaultOptions: function() {
        return Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_4__["extend"])(this.callBase(), {
            clone: true,
            filter: "> *",
            itemOrientation: "vertical",
            dropFeedbackMode: "push",
            allowDropInsideItem: false,
            allowReordering: true,
            moveItemOnDrop: false,
            onDragChange: null,
            onAdd: null,
            onRemove: null,
            onReorder: null,
            onPlaceholderPrepared: null,
            animation: {
                type: "slide",
                duration: 300,
                easing: "ease"
            },
            fromIndex: null,
            toIndex: null,
            dropInsideItem: false,
            itemPoints: null,
            fromIndexOffset: 0,
            offset: 0,
            autoUpdate: false,
            draggableElementSize: 0
        })
    },
    reset: function() {
        this.option({
            dropInsideItem: false,
            toIndex: null,
            fromIndex: null,
            itemPoints: null,
            fromIndexOffset: 0,
            draggableElementSize: 0
        });
        if (this._$placeholderElement) {
            this._$placeholderElement.remove()
        }
        this._$placeholderElement = null;
        if (!this._isIndicateMode() && this._$modifiedItem) {
            this._$modifiedItem.css("marginBottom", this._modifiedItemMargin);
            this._$modifiedItem = null
        }
    },
    _getPrevVisibleItem: function(items, index) {
        return items.slice(0, index).reverse().filter(isElementVisible)[0]
    },
    _dragStartHandler: function(e) {
        this.callBase.apply(this, arguments);
        if (true === e.cancel) {
            return
        }
        var $sourceElement = this._getSourceElement();
        this._updateItemPoints();
        this._subscribeToSourceScroll(e);
        this.option("fromIndex", this._getElementIndex($sourceElement));
        this.option("fromIndexOffset", this.option("offset"))
    },
    _subscribeToSourceScroll: function(e) {
        var $scrollable = this._getScrollable(Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(e.target));
        if ($scrollable) {
            this._sourceScrollableInfo = {
                element: $scrollable,
                scrollLeft: $scrollable.scrollLeft(),
                scrollTop: $scrollable.scrollTop()
            };
            _events_core_events_engine__WEBPACK_IMPORTED_MODULE_2__["default"].on($scrollable, "scroll", this._sourceScrollHandler)
        }
    },
    _unsubscribeFromSourceScroll: function() {
        if (this._sourceScrollableInfo) {
            _events_core_events_engine__WEBPACK_IMPORTED_MODULE_2__["default"].off(this._sourceScrollableInfo.element, "scroll", this._sourceScrollHandler);
            this._sourceScrollableInfo = null
        }
    },
    _handleSourceScroll: function(e) {
        var sourceScrollableInfo = this._sourceScrollableInfo;
        if (sourceScrollableInfo) {
            ["scrollLeft", "scrollTop"].forEach(scrollProp => {
                if (e.target[scrollProp] !== sourceScrollableInfo[scrollProp]) {
                    var scrollBy = e.target[scrollProp] - sourceScrollableInfo[scrollProp];
                    this._correctItemPoints(scrollBy);
                    this._movePlaceholder();
                    sourceScrollableInfo[scrollProp] = e.target[scrollProp]
                }
            })
        }
    },
    _dragEnterHandler: function(e) {
        this.callBase.apply(this, arguments);
        this._subscribeToSourceScroll(e);
        if (this === this._getSourceDraggable()) {
            return
        }
        this._updateItemPoints();
        this.option("fromIndex", -1);
        if (!this._isIndicateMode()) {
            var itemPoints = this.option("itemPoints");
            var lastItemPoint = itemPoints[itemPoints.length - 1];
            if (lastItemPoint) {
                var $element = this.$element();
                var $sourceElement = this._getSourceElement();
                var isVertical = this._isVerticalOrientation();
                var sourceElementSize = isVertical ? Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getOuterHeight"])($sourceElement, true) : Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getOuterWidth"])($sourceElement, true);
                var scrollSize = $element.get(0)[isVertical ? "scrollHeight" : "scrollWidth"];
                var scrollPosition = $element.get(0)[isVertical ? "scrollTop" : "scrollLeft"];
                var positionProp = isVertical ? "top" : "left";
                var lastPointPosition = lastItemPoint[positionProp];
                var elementPosition = $element.offset()[positionProp];
                var freeSize = elementPosition + scrollSize - scrollPosition - lastPointPosition;
                if (freeSize < sourceElementSize) {
                    if (isVertical) {
                        var items = this._getItems();
                        var $lastItem = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(this._getPrevVisibleItem(items));
                        this._$modifiedItem = $lastItem;
                        this._modifiedItemMargin = $lastItem.get(0).style.marginBottom;
                        $lastItem.css("marginBottom", sourceElementSize - freeSize);
                        var $sortable = $lastItem.closest(".dx-sortable");
                        var sortable = $sortable.data("dxScrollable") || $sortable.data("dxScrollView");
                        sortable && sortable.update()
                    }
                }
            }
        }
    },
    _dragLeaveHandler: function() {
        this.callBase.apply(this, arguments);
        this._unsubscribeFromSourceScroll()
    },
    dragEnter: function() {
        if (this !== this._getTargetDraggable()) {
            this.option("toIndex", -1)
        }
    },
    dragLeave: function() {
        if (this !== this._getTargetDraggable()) {
            this.option("toIndex", this.option("fromIndex"))
        }
    },
    _allowDrop: function(event) {
        var targetDraggable = this._getTargetDraggable();
        var $targetDraggable = targetDraggable.$element();
        var $scrollable = this._getScrollable($targetDraggable);
        if ($scrollable) {
            var {
                left: left,
                right: right,
                top: top,
                bottom: bottom
            } = getScrollableBoundary($scrollable);
            var toIndex = this.option("toIndex");
            var itemPoints = this.option("itemPoints");
            var itemPoint = null === itemPoints || void 0 === itemPoints ? void 0 : itemPoints.filter(item => item.index === toIndex)[0];
            if (itemPoint && void 0 !== itemPoint.top) {
                var isVertical = this._isVerticalOrientation();
                if (isVertical) {
                    return top <= Math.ceil(itemPoint.top) && Math.floor(itemPoint.top) <= bottom
                } else {
                    return left <= Math.ceil(itemPoint.left) && Math.floor(itemPoint.left) <= right
                }
            }
        }
        return true
    },
    dragEnd: function(sourceEvent) {
        this._unsubscribeFromSourceScroll();
        var $sourceElement = this._getSourceElement();
        var sourceDraggable = this._getSourceDraggable();
        var isSourceDraggable = sourceDraggable.NAME !== this.NAME;
        var toIndex = this.option("toIndex");
        var event = sourceEvent.event;
        var allowDrop = this._allowDrop(event);
        if (null !== toIndex && toIndex >= 0 && allowDrop) {
            var cancelAdd;
            var cancelRemove;
            if (sourceDraggable !== this) {
                cancelAdd = this._fireAddEvent(event);
                if (!cancelAdd) {
                    cancelRemove = this._fireRemoveEvent(event)
                }
            }
            if (isSourceDraggable) {
                Object(_animation_translator__WEBPACK_IMPORTED_MODULE_9__["resetPosition"])($sourceElement)
            }
            if (this.option("moveItemOnDrop")) {
                !cancelAdd && this._moveItem($sourceElement, toIndex, cancelRemove)
            }
            if (sourceDraggable === this) {
                return this._fireReorderEvent(event)
            }
        }
        return (new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_11__["Deferred"]).resolve()
    },
    dragMove: function(e) {
        var itemPoints = this.option("itemPoints");
        if (!itemPoints) {
            return
        }
        var isVertical = this._isVerticalOrientation();
        var axisName = isVertical ? "top" : "left";
        var cursorPosition = isVertical ? e.pageY : e.pageX;
        var rtlEnabled = this.option("rtlEnabled");
        var itemPoint;
        for (var i = itemPoints.length - 1; i >= 0; i--) {
            var centerPosition = itemPoints[i + 1] && (itemPoints[i][axisName] + itemPoints[i + 1][axisName]) / 2;
            if ((!isVertical && rtlEnabled ? cursorPosition > centerPosition : centerPosition > cursorPosition) || void 0 === centerPosition) {
                itemPoint = itemPoints[i]
            } else {
                break
            }
        }
        if (itemPoint) {
            this._updatePlaceholderPosition(e, itemPoint);
            if (this._verticalScrollHelper.isScrolling() && this._isIndicateMode()) {
                this._movePlaceholder()
            }
        }
    },
    _isIndicateMode: function() {
        return "indicate" === this.option("dropFeedbackMode") || this.option("allowDropInsideItem")
    },
    _createPlaceholder: function() {
        var $placeholderContainer;
        if (this._isIndicateMode()) {
            $placeholderContainer = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])("<div>").addClass(this._addWidgetPrefix(PLACEHOLDER_CLASS)).insertBefore(this._getSourceDraggable()._$dragElement)
        }
        this._$placeholderElement = $placeholderContainer;
        return $placeholderContainer
    },
    _getItems: function() {
        var itemsSelector = this._getItemsSelector();
        return this._$content().find(itemsSelector).not("." + this._addWidgetPrefix(PLACEHOLDER_CLASS)).not("." + this._addWidgetPrefix(CLONE_CLASS)).toArray()
    },
    _allowReordering: function() {
        var sourceDraggable = this._getSourceDraggable();
        var targetDraggable = this._getTargetDraggable();
        return sourceDraggable !== targetDraggable || this.option("allowReordering")
    },
    _isValidPoint: function(visibleIndex, draggableVisibleIndex, dropInsideItem) {
        var allowDropInsideItem = this.option("allowDropInsideItem");
        var allowReordering = dropInsideItem || this._allowReordering();
        if (!allowReordering && (0 !== visibleIndex || !allowDropInsideItem)) {
            return false
        }
        if (!this._isIndicateMode()) {
            return true
        }
        return -1 === draggableVisibleIndex || visibleIndex !== draggableVisibleIndex && (dropInsideItem || visibleIndex !== draggableVisibleIndex + 1)
    },
    _getItemPoints: function() {
        var result = [];
        var $item;
        var offset;
        var itemWidth;
        var rtlEnabled = this.option("rtlEnabled");
        var isVertical = this._isVerticalOrientation();
        var itemElements = this._getItems();
        var visibleItemElements = itemElements.filter(isElementVisible);
        var visibleItemCount = visibleItemElements.length;
        var $draggableItem = this._getDraggableElement();
        var draggableVisibleIndex = visibleItemElements.indexOf($draggableItem.get(0));
        if (visibleItemCount) {
            for (var i = 0; i <= visibleItemCount; i++) {
                var needCorrectLeftPosition = !isVertical && rtlEnabled ^ i === visibleItemCount;
                var needCorrectTopPosition = isVertical && i === visibleItemCount;
                if (i < visibleItemCount) {
                    $item = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(visibleItemElements[i]);
                    offset = $item.offset();
                    itemWidth = Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getOuterWidth"])($item)
                }
                result.push({
                    dropInsideItem: false,
                    left: offset.left + (needCorrectLeftPosition ? itemWidth : 0),
                    top: offset.top + (needCorrectTopPosition ? result[i - 1].height : 0),
                    index: i === visibleItemCount ? itemElements.length : itemElements.indexOf($item.get(0)),
                    $item: $item,
                    width: Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getOuterWidth"])($item),
                    height: Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getOuterHeight"])($item),
                    isValid: this._isValidPoint(i, draggableVisibleIndex)
                })
            }
            if (this.option("allowDropInsideItem")) {
                var points = result;
                result = [];
                for (var _i = 0; _i < points.length; _i++) {
                    result.push(points[_i]);
                    if (points[_i + 1]) {
                        result.push(Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_4__["extend"])({}, points[_i], {
                            dropInsideItem: true,
                            top: Math.floor((points[_i].top + points[_i + 1].top) / 2),
                            left: Math.floor((points[_i].left + points[_i + 1].left) / 2),
                            isValid: this._isValidPoint(_i, draggableVisibleIndex, true)
                        }))
                    }
                }
            }
        } else {
            result.push({
                dropInsideItem: false,
                index: 0,
                isValid: true
            })
        }
        return result
    },
    _updateItemPoints: function(forceUpdate) {
        if (forceUpdate || this.option("autoUpdate") || !this.option("itemPoints")) {
            this.option("itemPoints", this._getItemPoints())
        }
    },
    _correctItemPoints: function(scrollBy) {
        var itemPoints = this.option("itemPoints");
        if (scrollBy && itemPoints && !this.option("autoUpdate")) {
            var isVertical = this._isVerticalOrientation();
            var positionPropName = isVertical ? "top" : "left";
            itemPoints.forEach(itemPoint => {
                itemPoint[positionPropName] -= scrollBy
            })
        }
    },
    _getElementIndex: function($itemElement) {
        return this._getItems().indexOf($itemElement.get(0))
    },
    _getDragTemplateArgs: function($element) {
        var args = this.callBase.apply(this, arguments);
        args.model.fromIndex = this._getElementIndex($element);
        return args
    },
    _togglePlaceholder: function(value) {
        this._$placeholderElement && this._$placeholderElement.toggle(value)
    },
    _isVerticalOrientation: function() {
        return "vertical" === this.option("itemOrientation")
    },
    _normalizeToIndex: function(toIndex, dropInsideItem) {
        var isAnotherDraggable = this._getSourceDraggable() !== this._getTargetDraggable();
        var fromIndex = this.option("fromIndex");
        if (null === toIndex) {
            return fromIndex
        }
        return Math.max(isAnotherDraggable || fromIndex >= toIndex || dropInsideItem ? toIndex : toIndex - 1, 0)
    },
    _updatePlaceholderPosition: function(e, itemPoint) {
        var sourceDraggable = this._getSourceDraggable();
        var toIndex = this._normalizeToIndex(itemPoint.index, itemPoint.dropInsideItem);
        var eventArgs = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_4__["extend"])(this._getEventArgs(e), {
            toIndex: toIndex,
            dropInsideItem: itemPoint.dropInsideItem
        });
        itemPoint.isValid && this._getAction("onDragChange")(eventArgs);
        if (eventArgs.cancel || !itemPoint.isValid) {
            if (!itemPoint.isValid) {
                this.option({
                    dropInsideItem: false,
                    toIndex: null
                })
            }
            return
        }
        this.option({
            dropInsideItem: itemPoint.dropInsideItem,
            toIndex: itemPoint.index
        });
        this._getAction("onPlaceholderPrepared")(Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_4__["extend"])(this._getEventArgs(e), {
            placeholderElement: Object(_core_element__WEBPACK_IMPORTED_MODULE_6__["getPublicElement"])(this._$placeholderElement),
            dragElement: Object(_core_element__WEBPACK_IMPORTED_MODULE_6__["getPublicElement"])(sourceDraggable._$dragElement)
        }));
        this._updateItemPoints()
    },
    _makeWidthCorrection: function($item, width) {
        this._$scrollable = this._getScrollable($item);
        if (this._$scrollable && Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getWidth"])(this._$scrollable) < width) {
            var scrollableWidth = Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getWidth"])(this._$scrollable);
            var offsetLeft = $item.offset().left - this._$scrollable.offset().left;
            var offsetRight = scrollableWidth - Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getOuterWidth"])($item) - offsetLeft;
            if (offsetLeft > 0) {
                width = scrollableWidth - offsetLeft
            } else if (offsetRight > 0) {
                width = scrollableWidth - offsetRight
            } else {
                width = scrollableWidth
            }
        }
        return width
    },
    _updatePlaceholderSizes: function($placeholderElement, itemElement) {
        var dropInsideItem = this.option("dropInsideItem");
        var $item = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(itemElement);
        var isVertical = this._isVerticalOrientation();
        var width = "";
        var height = "";
        $placeholderElement.toggleClass(this._addWidgetPrefix("placeholder-inside"), dropInsideItem);
        if (isVertical || dropInsideItem) {
            width = Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getOuterWidth"])($item)
        }
        if (!isVertical || dropInsideItem) {
            height = Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getOuterHeight"])($item)
        }
        width = this._makeWidthCorrection($item, width);
        $placeholderElement.css({
            width: width,
            height: height
        })
    },
    _moveItem: function($itemElement, index, cancelRemove) {
        var $prevTargetItemElement;
        var $itemElements = this._getItems();
        var $targetItemElement = $itemElements[index];
        var sourceDraggable = this._getSourceDraggable();
        if (cancelRemove) {
            $itemElement = $itemElement.clone();
            sourceDraggable._toggleDragSourceClass(false, $itemElement)
        }
        if (!$targetItemElement) {
            $prevTargetItemElement = $itemElements[index - 1]
        }
        this._moveItemCore($itemElement, $targetItemElement, $prevTargetItemElement)
    },
    _moveItemCore: function($targetItem, item, prevItem) {
        if (!item && !prevItem) {
            $targetItem.appendTo(this.$element())
        } else if (prevItem) {
            $targetItem.insertAfter(Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(prevItem))
        } else {
            $targetItem.insertBefore(Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(item))
        }
    },
    _getDragStartArgs: function(e, $itemElement) {
        return Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_4__["extend"])(this.callBase.apply(this, arguments), {
            fromIndex: this._getElementIndex($itemElement)
        })
    },
    _getEventArgs: function(e) {
        var sourceDraggable = this._getSourceDraggable();
        var targetDraggable = this._getTargetDraggable();
        var dropInsideItem = targetDraggable.option("dropInsideItem");
        return Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_4__["extend"])(this.callBase.apply(this, arguments), {
            fromIndex: sourceDraggable.option("fromIndex"),
            toIndex: this._normalizeToIndex(targetDraggable.option("toIndex"), dropInsideItem),
            dropInsideItem: dropInsideItem
        })
    },
    _optionChanged: function(args) {
        var name = args.name;
        switch (name) {
            case "onDragChange":
            case "onPlaceholderPrepared":
            case "onAdd":
            case "onRemove":
            case "onReorder":
                this["_" + name + "Action"] = this._createActionByOption(name);
                break;
            case "itemOrientation":
            case "allowDropInsideItem":
            case "moveItemOnDrop":
            case "dropFeedbackMode":
            case "itemPoints":
            case "animation":
            case "allowReordering":
            case "fromIndexOffset":
            case "offset":
            case "draggableElementSize":
            case "autoUpdate":
                break;
            case "fromIndex":
                [false, true].forEach(isDragSource => {
                    var fromIndex = isDragSource ? args.value : args.previousValue;
                    if (null !== fromIndex) {
                        var $fromElement = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(this._getItems()[fromIndex]);
                        this._toggleDragSourceClass(isDragSource, $fromElement)
                    }
                });
                break;
            case "dropInsideItem":
                this._optionChangedDropInsideItem(args);
                break;
            case "toIndex":
                this._optionChangedToIndex(args);
                break;
            default:
                this.callBase(args)
        }
    },
    _optionChangedDropInsideItem: function() {
        if (this._isIndicateMode() && this._$placeholderElement) {
            this._movePlaceholder()
        }
    },
    _isPositionVisible: function(position) {
        var $element = this.$element();
        var scrollContainer;
        if ("hidden" !== $element.css("overflow")) {
            scrollContainer = $element.get(0)
        } else {
            $element.parents().each((function() {
                if ("visible" !== Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(this).css("overflow")) {
                    scrollContainer = this;
                    return false
                }
            }))
        }
        if (scrollContainer) {
            var clientRect = Object(_core_utils_position__WEBPACK_IMPORTED_MODULE_8__["getBoundingRect"])(scrollContainer);
            var isVerticalOrientation = this._isVerticalOrientation();
            var start = isVerticalOrientation ? "top" : "left";
            var end = isVerticalOrientation ? "bottom" : "right";
            var pageOffset = isVerticalOrientation ? window.pageYOffset : window.pageXOffset;
            if (position[start] < clientRect[start] + pageOffset || position[start] > clientRect[end] + pageOffset) {
                return false
            }
        }
        return true
    },
    _optionChangedToIndex: function(args) {
        var toIndex = args.value;
        if (this._isIndicateMode()) {
            var showPlaceholder = null !== toIndex && toIndex >= 0;
            this._togglePlaceholder(showPlaceholder);
            if (showPlaceholder) {
                this._movePlaceholder()
            }
        } else {
            this._moveItems(args.previousValue, args.value, args.fullUpdate)
        }
    },
    update: function() {
        if (null === this.option("fromIndex") && null === this.option("toIndex")) {
            return
        }
        this._updateItemPoints(true);
        this._updateDragSourceClass();
        var toIndex = this.option("toIndex");
        this._optionChangedToIndex({
            value: toIndex,
            fullUpdate: true
        })
    },
    _updateDragSourceClass: function() {
        var fromIndex = this._getActualFromIndex();
        var $fromElement = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(this._getItems()[fromIndex]);
        if ($fromElement.length) {
            this._$sourceElement = $fromElement;
            this._toggleDragSourceClass(true, $fromElement)
        }
    },
    _makeLeftCorrection: function(left, leftMargin) {
        var $scrollable = this._$scrollable;
        if ($scrollable && this._isVerticalOrientation() && $scrollable.scrollLeft() > leftMargin) {
            left += $scrollable.scrollLeft() - leftMargin
        }
        return left
    },
    _movePlaceholder: function() {
        var $placeholderElement = this._$placeholderElement || this._createPlaceholder();
        if (!$placeholderElement) {
            return
        }
        var items = this._getItems();
        var toIndex = this.option("toIndex");
        var isVerticalOrientation = this._isVerticalOrientation();
        var rtlEnabled = this.option("rtlEnabled");
        var dropInsideItem = this.option("dropInsideItem");
        var position = null;
        var leftMargin = 0;
        var itemElement = items[toIndex];
        if (itemElement) {
            var $itemElement = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(itemElement);
            position = $itemElement.offset();
            leftMargin = parseFloat($itemElement.css("marginLeft"));
            if (!isVerticalOrientation && rtlEnabled && !dropInsideItem) {
                position.left += Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getOuterWidth"])($itemElement, true)
            }
        } else {
            var prevVisibleItemElement = itemElement = this._getPrevVisibleItem(items, toIndex);
            if (prevVisibleItemElement) {
                position = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(prevVisibleItemElement).offset();
                if (isVerticalOrientation) {
                    position.top += Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getOuterHeight"])(prevVisibleItemElement, true)
                } else if (!rtlEnabled) {
                    position.left += Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getOuterWidth"])(prevVisibleItemElement, true)
                }
            }
        }
        this._updatePlaceholderSizes($placeholderElement, itemElement);
        if (position && !this._isPositionVisible(position)) {
            position = null
        }
        if (position) {
            position.left = this._makeLeftCorrection(position.left, leftMargin);
            this._move(position, $placeholderElement)
        }
        $placeholderElement.toggle(!!position)
    },
    _getPositions: function(items, elementSize, fromIndex, toIndex) {
        var positions = [];
        for (var i = 0; i < items.length; i++) {
            var position = 0;
            if (null === toIndex || null === fromIndex) {
                positions.push(position);
                continue
            }
            if (-1 === fromIndex) {
                if (i >= toIndex) {
                    position = elementSize
                }
            } else if (-1 === toIndex) {
                if (i > fromIndex) {
                    position = -elementSize
                }
            } else if (fromIndex < toIndex) {
                if (i > fromIndex && i < toIndex) {
                    position = -elementSize
                }
            } else if (fromIndex > toIndex) {
                if (i >= toIndex && i < fromIndex) {
                    position = elementSize
                }
            }
            positions.push(position)
        }
        return positions
    },
    _getDraggableElementSize: function(isVerticalOrientation) {
        var $draggableItem = this._getDraggableElement();
        var size = this.option("draggableElementSize");
        if (!size) {
            size = isVerticalOrientation ? (Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getOuterHeight"])($draggableItem) + Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getOuterHeight"])($draggableItem, true)) / 2 : (Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getOuterWidth"])($draggableItem) + Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getOuterWidth"])($draggableItem, true)) / 2;
            if (!this.option("autoUpdate")) {
                this.option("draggableElementSize", size)
            }
        }
        return size
    },
    _getActualFromIndex: function() {
        var {
            fromIndex: fromIndex,
            fromIndexOffset: fromIndexOffset,
            offset: offset
        } = this.option();
        return null == fromIndex ? null : fromIndex + fromIndexOffset - offset
    },
    _moveItems: function(prevToIndex, toIndex, fullUpdate) {
        var fromIndex = this._getActualFromIndex();
        var isVerticalOrientation = this._isVerticalOrientation();
        var positionPropName = isVerticalOrientation ? "top" : "left";
        var elementSize = this._getDraggableElementSize(isVerticalOrientation);
        var items = this._getItems();
        var prevPositions = this._getPositions(items, elementSize, fromIndex, prevToIndex);
        var positions = this._getPositions(items, elementSize, fromIndex, toIndex);
        var animationConfig = this.option("animation");
        var rtlEnabled = this.option("rtlEnabled");
        for (var i = 0; i < items.length; i++) {
            var itemElement = items[i];
            var prevPosition = prevPositions[i];
            var position = positions[i];
            if (null === toIndex || null === fromIndex) {
                stopAnimation(itemElement)
            } else if (prevPosition !== position || fullUpdate && position) {
                animate(itemElement, Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_4__["extend"])({}, animationConfig, {
                    to: {
                        [positionPropName]: !isVerticalOrientation && rtlEnabled ? -position : position
                    }
                }))
            }
        }
    },
    _toggleDragSourceClass: function(value, $element) {
        var $sourceElement = $element || this._$sourceElement;
        this.callBase.apply(this, arguments);
        if (!this._isIndicateMode()) {
            $sourceElement && $sourceElement.toggleClass(this._addWidgetPrefix("source-hidden"), value)
        }
    },
    _dispose: function() {
        this.reset();
        this.callBase()
    },
    _fireAddEvent: function(sourceEvent) {
        var args = this._getEventArgs(sourceEvent);
        this._getAction("onAdd")(args);
        return args.cancel
    },
    _fireRemoveEvent: function(sourceEvent) {
        var sourceDraggable = this._getSourceDraggable();
        var args = this._getEventArgs(sourceEvent);
        sourceDraggable._getAction("onRemove")(args);
        return args.cancel
    },
    _fireReorderEvent: function(sourceEvent) {
        var args = this._getEventArgs(sourceEvent);
        this._getAction("onReorder")(args);
        return args.promise || (new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_11__["Deferred"]).resolve()
    }
});
Object(_core_component_registrator__WEBPACK_IMPORTED_MODULE_3__["default"])(SORTABLE, Sortable);
/* harmony default export */ __webpack_exports__["default"] = (Sortable);


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/tree_view.js":
/*!*****************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/tree_view.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _tree_view_ui_tree_view_search__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tree_view/ui.tree_view.search */ "./node_modules/devextreme/esm/ui/tree_view/ui.tree_view.search.js");
/**
 * DevExtreme (esm/ui/tree_view.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */

/* harmony default export */ __webpack_exports__["default"] = (_tree_view_ui_tree_view_search__WEBPACK_IMPORTED_MODULE_0__["default"]);


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/tree_view/ui.tree_view.base.js":
/*!***********************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/tree_view/ui.tree_view.base.js ***!
  \***********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _core_utils_size__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/utils/size */ "./node_modules/devextreme/esm/core/utils/size.js");
/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/renderer */ "./node_modules/devextreme/esm/core/renderer.js");
/* harmony import */ var _core_dom_adapter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/dom_adapter */ "./node_modules/devextreme/esm/core/dom_adapter.js");
/* harmony import */ var _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../events/core/events_engine */ "./node_modules/devextreme/esm/events/core/events_engine.js");
/* harmony import */ var _localization_message__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../localization/message */ "./node_modules/devextreme/esm/localization/message.js");
/* harmony import */ var _events_click__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../events/click */ "./node_modules/devextreme/esm/events/click.js");
/* harmony import */ var _core_utils_common__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../core/utils/common */ "./node_modules/devextreme/esm/core/utils/common.js");
/* harmony import */ var _core_utils_window__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../core/utils/window */ "./node_modules/devextreme/esm/core/utils/window.js");
/* harmony import */ var _core_utils_type__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../core/utils/type */ "./node_modules/devextreme/esm/core/utils/type.js");
/* harmony import */ var _core_utils_extend__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../core/utils/extend */ "./node_modules/devextreme/esm/core/utils/extend.js");
/* harmony import */ var _core_utils_iterator__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../core/utils/iterator */ "./node_modules/devextreme/esm/core/utils/iterator.js");
/* harmony import */ var _core_element__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../core/element */ "./node_modules/devextreme/esm/core/element.js");
/* harmony import */ var _check_box__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../check_box */ "./node_modules/devextreme/esm/ui/check_box.js");
/* harmony import */ var _hierarchical_collection_ui_hierarchical_collection_widget__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../hierarchical_collection/ui.hierarchical_collection_widget */ "./node_modules/devextreme/esm/ui/hierarchical_collection/ui.hierarchical_collection_widget.js");
/* harmony import */ var _events_utils_index__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../events/utils/index */ "./node_modules/devextreme/esm/events/utils/index.js");
/* harmony import */ var _events_pointer__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../events/pointer */ "./node_modules/devextreme/esm/events/pointer.js");
/* harmony import */ var _events_double_click__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../events/double_click */ "./node_modules/devextreme/esm/events/double_click.js");
/* harmony import */ var _animation_fx__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../animation/fx */ "./node_modules/devextreme/esm/animation/fx.js");
/* harmony import */ var _scroll_view_ui_scrollable__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../scroll_view/ui.scrollable */ "./node_modules/devextreme/esm/ui/scroll_view/ui.scrollable.js");
/* harmony import */ var _load_indicator__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../load_indicator */ "./node_modules/devextreme/esm/ui/load_indicator.js");
/* harmony import */ var _core_utils_deferred__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../core/utils/deferred */ "./node_modules/devextreme/esm/core/utils/deferred.js");
/* harmony import */ var _widget_ui_errors__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../widget/ui.errors */ "./node_modules/devextreme/esm/ui/widget/ui.errors.js");
/* harmony import */ var _core_utils_support__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../../core/utils/support */ "./node_modules/devextreme/esm/core/utils/support.js");
/* harmony import */ var _renovation_ui_scroll_view_utils_get_relative_offset__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../../renovation/ui/scroll_view/utils/get_relative_offset */ "./node_modules/devextreme/esm/renovation/ui/scroll_view/utils/get_relative_offset.js");
/* harmony import */ var _renovation_ui_scroll_view_common_consts__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../../renovation/ui/scroll_view/common/consts */ "./node_modules/devextreme/esm/renovation/ui/scroll_view/common/consts.js");
/**
 * DevExtreme (esm/ui/tree_view/ui.tree_view.base.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */

























var WIDGET_CLASS = "dx-treeview";
var NODE_CLASS = "".concat(WIDGET_CLASS, "-node");
var NODE_CONTAINER_CLASS = "".concat(NODE_CLASS, "-container");
var NODE_LOAD_INDICATOR_CLASS = "".concat(NODE_CLASS, "-loadindicator");
var OPENED_NODE_CONTAINER_CLASS = "".concat(NODE_CLASS, "-container-opened");
var IS_LEAF = "".concat(NODE_CLASS, "-is-leaf");
var ITEM_CLASS = "".concat(WIDGET_CLASS, "-item");
var ITEM_WITH_CHECKBOX_CLASS = "".concat(ITEM_CLASS, "-with-checkbox");
var ITEM_WITHOUT_CHECKBOX_CLASS = "".concat(ITEM_CLASS, "-without-checkbox");
var ITEM_DATA_KEY = "".concat(ITEM_CLASS, "-data");
var TOGGLE_ITEM_VISIBILITY_CLASS = "".concat(WIDGET_CLASS, "-toggle-item-visibility");
var LOAD_INDICATOR_CLASS = "".concat(WIDGET_CLASS, "-loadindicator");
var LOAD_INDICATOR_WRAPPER_CLASS = "".concat(WIDGET_CLASS, "-loadindicator-wrapper");
var TOGGLE_ITEM_VISIBILITY_OPENED_CLASS = "".concat(WIDGET_CLASS, "-toggle-item-visibility-opened");
var SELECT_ALL_ITEM_CLASS = "".concat(WIDGET_CLASS, "-select-all-item");
var INVISIBLE_STATE_CLASS = "dx-state-invisible";
var DISABLED_STATE_CLASS = "dx-state-disabled";
var SELECTED_ITEM_CLASS = "dx-state-selected";
var EXPAND_EVENT_NAMESPACE = "dxTreeView_expand";
var DATA_ITEM_ID = "data-item-id";
var TreeViewBase = _hierarchical_collection_ui_hierarchical_collection_widget__WEBPACK_IMPORTED_MODULE_13__["default"].inherit({
    _supportedKeys: function(e) {
        var click = e => {
            var $itemElement = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(this.option("focusedElement"));
            if (!$itemElement.length) {
                return
            }
            e.target = $itemElement;
            e.currentTarget = $itemElement;
            this._itemClickHandler(e, $itemElement.children("." + ITEM_CLASS));
            var expandEventName = this._getEventNameByOption(this.option("expandEvent"));
            var expandByClick = expandEventName === Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_14__["addNamespace"])(_events_click__WEBPACK_IMPORTED_MODULE_5__["name"], EXPAND_EVENT_NAMESPACE);
            if (expandByClick) {
                this._expandEventHandler(e)
            }
        };
        var select = e => {
            e.preventDefault();
            var $focusedElement = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(this.option("focusedElement"));
            var checkboxInstance = this._getCheckBoxInstance($focusedElement);
            if (!checkboxInstance.option("disabled")) {
                var currentState = checkboxInstance.option("value");
                this._updateItemSelection(!currentState, $focusedElement.find("." + ITEM_CLASS).get(0), true)
            }
        };
        var toggleExpandedNestedItems = function(state, e) {
            if (!this.option("expandAllEnabled")) {
                return
            }
            e.preventDefault();
            var $rootElement = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(this.option("focusedElement"));
            if (!$rootElement.length) {
                return
            }
            var rootItem = this._getItemData($rootElement.find(".".concat(ITEM_CLASS)));
            this._toggleExpandedNestedItems([rootItem], state)
        };
        return Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_9__["extend"])(this.callBase(), {
            enter: this._showCheckboxes() ? select : click,
            space: this._showCheckboxes() ? select : click,
            asterisk: toggleExpandedNestedItems.bind(this, true),
            minus: toggleExpandedNestedItems.bind(this, false)
        })
    },
    _toggleExpandedNestedItems: function(items, state) {
        if (!items) {
            return
        }
        for (var i = 0, len = items.length; i < len; i++) {
            var item = items[i];
            var node = this._dataAdapter.getNodeByItem(item);
            this._toggleExpandedState(node, state);
            this._toggleExpandedNestedItems(item.items, state)
        }
    },
    _getNodeElement: function(node, cache) {
        var key = this._encodeString(node.internalFields.key);
        if (cache) {
            if (!cache.$nodeByKey) {
                cache.$nodeByKey = {};
                this.$element().find(".".concat(NODE_CLASS)).each((function() {
                    var $node = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(this);
                    var key = $node.attr(DATA_ITEM_ID);
                    cache.$nodeByKey[key] = $node
                }))
            }
            return cache.$nodeByKey[key] || Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])()
        }
        var element = this.$element().get(0).querySelector("[".concat(DATA_ITEM_ID, '="').concat(key, '"]'));
        return Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(element)
    },
    _activeStateUnit: "." + ITEM_CLASS,
    _widgetClass: function() {
        return WIDGET_CLASS
    },
    _getDefaultOptions: function() {
        var defaultOptions = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_9__["extend"])(this.callBase(), {
            animationEnabled: true,
            dataStructure: "tree",
            deferRendering: true,
            expandAllEnabled: false,
            hasItemsExpr: "hasItems",
            selectNodesRecursive: true,
            expandNodesRecursive: true,
            showCheckBoxesMode: "none",
            selectAllText: _localization_message__WEBPACK_IMPORTED_MODULE_4__["default"].format("dxList-selectAll"),
            onItemSelectionChanged: null,
            onItemExpanded: null,
            onItemCollapsed: null,
            scrollDirection: "vertical",
            useNativeScrolling: true,
            virtualModeEnabled: false,
            rootValue: 0,
            focusStateEnabled: false,
            selectionMode: "multiple",
            expandEvent: "dblclick",
            selectByClick: false,
            createChildren: null,
            onSelectAllValueChanged: null
        });
        return Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_9__["extend"])(true, defaultOptions, {
            integrationOptions: {
                useDeferUpdateForTemplates: false
            }
        })
    },
    _defaultOptionsRules: function() {
        return this.callBase().concat([{
            device: function() {
                return !_core_utils_support__WEBPACK_IMPORTED_MODULE_22__["nativeScrolling"]
            },
            options: {
                useNativeScrolling: false
            }
        }])
    },
    _initSelectedItems: _core_utils_common__WEBPACK_IMPORTED_MODULE_6__["noop"],
    _syncSelectionOptions: _core_utils_common__WEBPACK_IMPORTED_MODULE_6__["asyncNoop"],
    _fireSelectionChanged: function() {
        var selectionChangePromise = this._selectionChangePromise;
        Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_20__["when"])(selectionChangePromise).done(function() {
            this._createActionByOption("onSelectionChanged", {
                excludeValidators: ["disabled", "readOnly"]
            })()
        }.bind(this))
    },
    _createSelectAllValueChangedAction: function() {
        this._selectAllValueChangedAction = this._createActionByOption("onSelectAllValueChanged", {
            excludeValidators: ["disabled", "readOnly"]
        })
    },
    _fireSelectAllValueChanged: function(value) {
        this._selectAllValueChangedAction({
            value: value
        })
    },
    _checkBoxModeChange: function(value, previousValue) {
        if ("none" === previousValue || "none" === value) {
            this.repaint();
            return
        }
        var selectAllExists = this._$selectAllItem && this._$selectAllItem.length;
        switch (value) {
            case "selectAll":
                if (!selectAllExists) {
                    this._createSelectAllValueChangedAction();
                    this._renderSelectAllItem()
                }
                break;
            case "normal":
                if (selectAllExists) {
                    this._$selectAllItem.remove();
                    delete this._$selectAllItem
                }
        }
    },
    _removeSelection: function() {
        var that = this;
        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_10__["each"])(this._dataAdapter.getFullData(), (function(_, node) {
            if (!that._hasChildren(node)) {
                return
            }
            that._dataAdapter.toggleSelection(node.internalFields.key, false, true)
        }))
    },
    _optionChanged: function(args) {
        var {
            name: name,
            value: value,
            previousValue: previousValue
        } = args;
        switch (name) {
            case "selectAllText":
                if (this._$selectAllItem) {
                    this._$selectAllItem.dxCheckBox("instance").option("text", value)
                }
                break;
            case "showCheckBoxesMode":
                this._checkBoxModeChange(value, previousValue);
                break;
            case "scrollDirection":
                this.getScrollable().option("direction", value);
                break;
            case "useNativeScrolling":
                this.getScrollable().option("useNative", value);
                break;
            case "items":
                delete this._$selectAllItem;
                this.callBase(args);
                break;
            case "dataSource":
                this.callBase(args);
                this._initDataAdapter();
                this._filter = {};
                break;
            case "hasItemsExpr":
                this._initAccessors();
                this.repaint();
                break;
            case "expandEvent":
                this._initExpandEvent();
                break;
            case "deferRendering":
            case "dataStructure":
            case "rootValue":
            case "createChildren":
            case "expandNodesRecursive":
            case "onItemSelectionChanged":
            case "onItemExpanded":
            case "onItemCollapsed":
            case "expandAllEnabled":
            case "animationEnabled":
            case "virtualModeEnabled":
            case "selectByClick":
                break;
            case "selectionMode":
                this._initDataAdapter();
                this.callBase(args);
                break;
            case "onSelectAllValueChanged":
                this._createSelectAllValueChangedAction();
                break;
            case "selectNodesRecursive":
                this._dataAdapter.setOption("recursiveSelection", args.value);
                this.repaint();
                break;
            default:
                this.callBase(args)
        }
    },
    _initDataSource: function() {
        if (this._useCustomChildrenLoader()) {
            this._loadChildrenByCustomLoader(null).done(function(newItems) {
                if (newItems && newItems.length) {
                    this.option("items", newItems)
                }
            }.bind(this))
        } else {
            this.callBase();
            this._isVirtualMode() && this._initVirtualMode()
        }
    },
    _initVirtualMode: function() {
        var filter = this._filter;
        if (!filter.custom) {
            filter.custom = this._dataSource.filter()
        }
        if (!filter.internal) {
            filter.internal = [this.option("parentIdExpr"), this.option("rootValue")]
        }
    },
    _useCustomChildrenLoader: function() {
        return Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_8__["isFunction"])(this.option("createChildren")) && this._isDataStructurePlain()
    },
    _loadChildrenByCustomLoader: function(parentNode) {
        var invocationResult = this.option("createChildren").call(this, parentNode);
        if (Array.isArray(invocationResult)) {
            return (new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_20__["Deferred"]).resolve(invocationResult).promise()
        }
        if (invocationResult && Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_8__["isFunction"])(invocationResult.then)) {
            return Object(_core_utils_deferred__WEBPACK_IMPORTED_MODULE_20__["fromPromise"])(invocationResult)
        }
        return (new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_20__["Deferred"]).resolve([]).promise()
    },
    _combineFilter: function() {
        if (!this._filter.custom || !this._filter.custom.length) {
            return this._filter.internal
        }
        return [this._filter.custom, this._filter.internal]
    },
    _dataSourceLoadErrorHandler: function() {
        this._renderEmptyMessage()
    },
    _init: function() {
        this._filter = {};
        this.callBase();
        this._initStoreChangeHandlers()
    },
    _dataSourceChangedHandler: function(newItems) {
        var items = this.option("items");
        if (this._initialized && this._isVirtualMode() && items.length) {
            return
        }
        this.option("items", newItems)
    },
    _removeTreeViewLoadIndicator: function() {
        if (!this._treeViewLoadIndicator) {
            return
        }
        this._treeViewLoadIndicator.remove();
        this._treeViewLoadIndicator = null
    },
    _createTreeViewLoadIndicator: function() {
        this._treeViewLoadIndicator = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])("<div>").addClass(LOAD_INDICATOR_CLASS);
        this._createComponent(this._treeViewLoadIndicator, _load_indicator__WEBPACK_IMPORTED_MODULE_19__["default"], {});
        return this._treeViewLoadIndicator
    },
    _dataSourceLoadingChangedHandler: function(isLoading) {
        var resultFilter;
        if (this._isVirtualMode()) {
            resultFilter = this._combineFilter();
            this._dataSource.filter(resultFilter)
        }
        if (isLoading && !this._dataSource.isLoaded()) {
            this.option("items", []);
            var $wrapper = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])("<div>").addClass(LOAD_INDICATOR_WRAPPER_CLASS);
            this._createTreeViewLoadIndicator().appendTo($wrapper);
            this.itemsContainer().append($wrapper);
            if (this._isVirtualMode() && this._dataSource.filter() !== resultFilter) {
                this._dataSource.filter([])
            }
        } else {
            this._removeTreeViewLoadIndicator()
        }
    },
    _initStoreChangeHandlers: function() {
        if ("plain" !== this.option("dataStructure")) {
            return
        }
        this._dataSource && this._dataSource.store().on("inserted", newItem => {
            this.option().items = this.option("items").concat(newItem);
            this._dataAdapter.addItem(newItem);
            if (!this._dataAdapter.isFiltered(newItem)) {
                return
            }
            this._updateLevel(this._parentIdGetter(newItem))
        }).on("removed", removedKey => {
            var node = this._dataAdapter.getNodeByKey(removedKey);
            if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_8__["isDefined"])(node)) {
                this.option("items")[this._dataAdapter.getIndexByKey(node.internalFields.key)] = 0;
                this._markChildrenItemsToRemove(node);
                this._removeItems();
                this._dataAdapter.removeItem(removedKey);
                this._updateLevel(this._parentIdGetter(node))
            }
        })
    },
    _markChildrenItemsToRemove: function(node) {
        var keys = node.internalFields.childrenKeys;
        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_10__["each"])(keys, (_, key) => {
            this.option("items")[this._dataAdapter.getIndexByKey(key)] = 0;
            this._markChildrenItemsToRemove(this._dataAdapter.getNodeByKey(key))
        })
    },
    _removeItems: function() {
        var items = Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_9__["extend"])(true, [], this.option("items"));
        var counter = 0;
        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_10__["each"])(items, (index, item) => {
            if (!item) {
                this.option("items").splice(index - counter, 1);
                counter++
            }
        })
    },
    _updateLevel: function(parentId) {
        var $container = this._getContainerByParentKey(parentId);
        this._renderItems($container, this._dataAdapter.getChildrenNodes(parentId))
    },
    _getOldContainer: function($itemElement) {
        if ($itemElement.length) {
            return $itemElement.children(".".concat(NODE_CONTAINER_CLASS))
        }
        var scrollable = this.getScrollable();
        if (scrollable) {
            return Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(scrollable.content()).children()
        }
        return Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])()
    },
    _getContainerByParentKey: function(parentId) {
        var node = this._dataAdapter.getNodeByKey(parentId);
        var $itemElement = node ? this._getNodeElement(node) : [];
        this._getOldContainer($itemElement).remove();
        var $container = this._renderNodeContainer($itemElement);
        if (this._isRootLevel(parentId)) {
            var scrollable = this.getScrollable();
            if (!scrollable) {
                this._renderScrollableContainer()
            }
            Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(scrollable.content()).append($container)
        }
        return $container
    },
    _isRootLevel: function(parentId) {
        return parentId === this.option("rootValue")
    },
    _getAccessors: function() {
        var accessors = this.callBase();
        accessors.push("hasItems");
        return accessors
    },
    _getDataAdapterOptions: function() {
        return {
            rootValue: this.option("rootValue"),
            multipleSelection: !this._isSingleSelection(),
            recursiveSelection: this._isRecursiveSelection(),
            recursiveExpansion: this.option("expandNodesRecursive"),
            selectionRequired: this.option("selectionRequired"),
            dataType: this.option("dataStructure"),
            sort: this._dataSource && this._dataSource.sort()
        }
    },
    _initMarkup: function() {
        this._renderScrollableContainer();
        this._renderEmptyMessage(this._dataAdapter.getRootNodes());
        this.callBase();
        this.setAria("role", "tree")
    },
    _renderContentImpl: function() {
        var $nodeContainer = this._renderNodeContainer();
        Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(this.getScrollable().content()).append($nodeContainer);
        if (!this.option("items") || !this.option("items").length) {
            return
        }
        this._renderItems($nodeContainer, this._dataAdapter.getRootNodes());
        this._initExpandEvent();
        if (this._selectAllEnabled()) {
            this._createSelectAllValueChangedAction();
            this._renderSelectAllItem($nodeContainer)
        }
    },
    _isVirtualMode: function() {
        return this.option("virtualModeEnabled") && this._isDataStructurePlain() && !!this.option("dataSource")
    },
    _isDataStructurePlain: function() {
        return "plain" === this.option("dataStructure")
    },
    _fireContentReadyAction: function() {
        var dataSource = this.getDataSource();
        var skipContentReadyAction = dataSource && !dataSource.isLoaded();
        var scrollable = this.getScrollable();
        if (scrollable && Object(_core_utils_window__WEBPACK_IMPORTED_MODULE_7__["hasWindow"])()) {
            scrollable.update()
        }
        if (!skipContentReadyAction) {
            this.callBase()
        }
        if (scrollable && Object(_core_utils_window__WEBPACK_IMPORTED_MODULE_7__["hasWindow"])()) {
            scrollable.update()
        }
    },
    _renderScrollableContainer: function() {
        this._scrollable = this._createComponent(Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])("<div>").appendTo(this.$element()), _scroll_view_ui_scrollable__WEBPACK_IMPORTED_MODULE_18__["default"], {
            useNative: this.option("useNativeScrolling"),
            direction: this.option("scrollDirection"),
            useKeyboard: false
        })
    },
    _renderNodeContainer: function($parent) {
        var $container = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])("<ul>").addClass(NODE_CONTAINER_CLASS);
        this.setAria("role", "group", $container);
        if ($parent && $parent.length) {
            var itemData = this._getItemData($parent.children("." + ITEM_CLASS));
            if (this._expandedGetter(itemData)) {
                $container.addClass(OPENED_NODE_CONTAINER_CLASS)
            }
            $container.appendTo($parent)
        }
        return $container
    },
    _createDOMElement: function($nodeContainer, node) {
        var $node = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])("<li>").addClass(NODE_CLASS).attr(DATA_ITEM_ID, this._encodeString(node.internalFields.key)).prependTo($nodeContainer);
        this.setAria({
            role: "treeitem",
            label: this._displayGetter(node.internalFields.item) || "",
            expanded: node.internalFields.expanded || false,
            level: this._getLevel($nodeContainer)
        }, $node);
        return $node
    },
    _getLevel: function($nodeContainer) {
        var parent = $nodeContainer.parent();
        return parent.hasClass("dx-scrollable-content") ? 1 : parseInt(parent.attr("aria-level")) + 1
    },
    _showCheckboxes: function() {
        return "none" !== this.option("showCheckBoxesMode")
    },
    _selectAllEnabled: function() {
        return "selectAll" === this.option("showCheckBoxesMode") && !this._isSingleSelection()
    },
    _renderItems: function($nodeContainer, nodes) {
        var length = nodes.length - 1;
        for (var i = length; i >= 0; i--) {
            this._renderItem(i, nodes[i], $nodeContainer)
        }
        this._renderedItemsCount += nodes.length
    },
    _renderItem: function(nodeIndex, node, $nodeContainer) {
        var $node = this._createDOMElement($nodeContainer, node);
        var nodeData = node.internalFields;
        var showCheckBox = this._showCheckboxes();
        $node.addClass(showCheckBox ? ITEM_WITH_CHECKBOX_CLASS : ITEM_WITHOUT_CHECKBOX_CLASS);
        $node.toggleClass(INVISIBLE_STATE_CLASS, false === nodeData.item.visible);
        showCheckBox && this._renderCheckBox($node, node);
        this.setAria("selected", nodeData.selected, $node);
        this._toggleSelectedClass($node, nodeData.selected);
        this.callBase(this._renderedItemsCount + nodeIndex, nodeData.item, $node);
        if (false !== nodeData.item.visible) {
            this._renderChildren($node, node)
        }
    },
    _setAriaSelected: function() {},
    _renderChildren: function($node, node) {
        if (!this._hasChildren(node)) {
            this._addLeafClass($node);
            return
        }
        this._renderToggleItemVisibilityIcon($node, node);
        if (this.option("deferRendering") && !node.internalFields.expanded) {
            return
        }
        this._loadSublevel(node).done(childNodes => {
            this._renderSublevel($node, this._getActualNode(node), childNodes)
        })
    },
    _getActualNode: function(cachedNode) {
        return this._dataAdapter.getNodeByKey(cachedNode.internalFields.key)
    },
    _hasChildren: function(node) {
        if (this._isVirtualMode() || this._useCustomChildrenLoader()) {
            return false !== this._hasItemsGetter(node.internalFields.item)
        }
        return this.callBase(node)
    },
    _loadSublevel: function(node) {
        var deferred = new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_20__["Deferred"];
        var childrenNodes = this._getChildNodes(node);
        if (childrenNodes.length) {
            deferred.resolve(childrenNodes)
        } else {
            this._loadNestedItems(node).done(items => {
                deferred.resolve(this._dataAdapter.getNodesByItems(items))
            })
        }
        return deferred.promise()
    },
    _renderSublevel: function($node, node, childNodes) {
        var $nestedNodeContainer = this._renderNodeContainer($node, node);
        var childNodesByChildrenKeys = childNodes.filter(childNode => -1 !== node.internalFields.childrenKeys.indexOf(childNode.internalFields.key));
        this._renderItems($nestedNodeContainer, childNodesByChildrenKeys);
        if (childNodesByChildrenKeys.length && !node.internalFields.selected) {
            var firstChild = childNodesByChildrenKeys[0];
            this._updateParentsState(firstChild, this._getNodeElement(firstChild))
        }
        this._normalizeIconState($node, childNodesByChildrenKeys.length);
        if (node.internalFields.expanded) {
            $nestedNodeContainer.addClass(OPENED_NODE_CONTAINER_CLASS)
        }
    },
    _executeItemRenderAction: function(itemIndex, itemData, itemElement) {
        var node = this._getNode(itemElement);
        this._getItemRenderAction()({
            itemElement: itemElement,
            itemIndex: itemIndex,
            itemData: itemData,
            node: this._dataAdapter.getPublicNode(node)
        })
    },
    _addLeafClass: function($node) {
        $node.addClass(IS_LEAF)
    },
    _expandEventHandler: function(e) {
        var $nodeElement = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(e.currentTarget.parentNode);
        if (!$nodeElement.hasClass(IS_LEAF)) {
            this._toggleExpandedState(e.currentTarget, void 0, e)
        }
    },
    _initExpandEvent: function() {
        var expandedEventName = this._getEventNameByOption(this.option("expandEvent"));
        var $itemsContainer = this._itemContainer();
        var itemSelector = this._itemSelector();
        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__["default"].off($itemsContainer, "." + EXPAND_EVENT_NAMESPACE, itemSelector);
        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__["default"].on($itemsContainer, expandedEventName, itemSelector, this._expandEventHandler.bind(this))
    },
    _getEventNameByOption: function(name) {
        var event = "click" === name ? _events_click__WEBPACK_IMPORTED_MODULE_5__["name"] : _events_double_click__WEBPACK_IMPORTED_MODULE_16__["name"];
        return Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_14__["addNamespace"])(event, EXPAND_EVENT_NAMESPACE)
    },
    _getNode: function(identifier) {
        if (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_8__["isDefined"])(identifier)) {
            return null
        }
        if (identifier.internalFields) {
            return identifier
        }
        if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_8__["isPrimitive"])(identifier)) {
            return this._dataAdapter.getNodeByKey(identifier)
        }
        var itemElement = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(identifier).get(0);
        if (!itemElement) {
            return null
        }
        if (_core_dom_adapter__WEBPACK_IMPORTED_MODULE_2__["default"].isElementNode(itemElement)) {
            return this._getNodeByElement(itemElement)
        }
        return this._dataAdapter.getNodeByItem(itemElement)
    },
    _getNodeByElement: function(itemElement) {
        var $node = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(itemElement).closest("." + NODE_CLASS);
        var key = this._decodeString($node.attr(DATA_ITEM_ID));
        return this._dataAdapter.getNodeByKey(key)
    },
    _toggleExpandedState: function(itemElement, state, e) {
        var node = this._getNode(itemElement);
        if (!node) {
            return (new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_20__["Deferred"]).reject().promise()
        }
        if (node.internalFields.disabled) {
            return (new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_20__["Deferred"]).reject().promise()
        }
        var currentState = node.internalFields.expanded;
        if (currentState === state) {
            return (new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_20__["Deferred"]).resolve().promise()
        }
        if (this._hasChildren(node)) {
            var $node = this._getNodeElement(node);
            if ($node.find(".".concat(NODE_LOAD_INDICATOR_CLASS, ":not(.").concat(INVISIBLE_STATE_CLASS, ")")).length) {
                return (new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_20__["Deferred"]).reject().promise()
            }
            this._createLoadIndicator($node)
        }
        if (!Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_8__["isDefined"])(state)) {
            state = !currentState
        }
        this._dataAdapter.toggleExpansion(node.internalFields.key, state);
        return this._updateExpandedItemsUI(node, state, e)
    },
    _createLoadIndicator: function($node) {
        var $icon = $node.children("." + TOGGLE_ITEM_VISIBILITY_CLASS);
        var $nodeContainer = $node.children(".".concat(NODE_CONTAINER_CLASS));
        if ($icon.hasClass(TOGGLE_ITEM_VISIBILITY_OPENED_CLASS) || $nodeContainer.not(":empty").length) {
            return
        }
        this._createComponent(Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])("<div>").addClass(NODE_LOAD_INDICATOR_CLASS), _load_indicator__WEBPACK_IMPORTED_MODULE_19__["default"], {}).$element().appendTo($node);
        $icon.hide()
    },
    _renderToggleItemVisibilityIcon: function($node, node) {
        var $icon = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])("<div>").addClass(TOGGLE_ITEM_VISIBILITY_CLASS).appendTo($node);
        if (node.internalFields.expanded) {
            $icon.addClass(TOGGLE_ITEM_VISIBILITY_OPENED_CLASS);
            $node.parent().addClass(OPENED_NODE_CONTAINER_CLASS)
        }
        if (node.internalFields.disabled) {
            $icon.addClass(DISABLED_STATE_CLASS)
        }
        this._renderToggleItemVisibilityIconClick($icon, node)
    },
    _renderToggleItemVisibilityIconClick: function($icon, node) {
        var eventName = Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_14__["addNamespace"])(_events_click__WEBPACK_IMPORTED_MODULE_5__["name"], this.NAME);
        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__["default"].off($icon, eventName);
        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__["default"].on($icon, eventName, e => {
            this._toggleExpandedState(node.internalFields.key, void 0, e)
        })
    },
    _updateExpandedItemsUI: function(node, state, e) {
        var $node = this._getNodeElement(node);
        var isHiddenNode = !$node.length || state && $node.is(":hidden");
        if (this.option("expandNodesRecursive") && isHiddenNode) {
            var parentNode = this._getNode(node.internalFields.parentKey);
            if (parentNode) {
                this._updateExpandedItemsUI(parentNode, state, e)
            }
        }
        var $icon = $node.children("." + TOGGLE_ITEM_VISIBILITY_CLASS);
        var $nodeContainer = $node.children(".".concat(NODE_CONTAINER_CLASS));
        $icon.toggleClass(TOGGLE_ITEM_VISIBILITY_OPENED_CLASS, state);
        var nodeContainerExists = $nodeContainer.length > 0;
        var completionCallback = new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_20__["Deferred"];
        if (!state || nodeContainerExists && !$nodeContainer.is(":empty")) {
            this._animateNodeContainer(node, state, e, completionCallback);
            return completionCallback.promise()
        }
        if (0 === node.internalFields.childrenKeys.length && (this._isVirtualMode() || this._useCustomChildrenLoader())) {
            this._loadNestedItemsWithUpdate(node, state, e, completionCallback);
            return completionCallback.promise()
        }
        this._renderSublevel($node, node, this._getChildNodes(node));
        this._fireContentReadyAction();
        this._animateNodeContainer(node, state, e, completionCallback);
        return completionCallback.promise()
    },
    _loadNestedItemsWithUpdate: function(node, state, e, completionCallback) {
        var $node = this._getNodeElement(node);
        this._loadNestedItems(node).done(items => {
            var actualNodeData = this._getActualNode(node);
            this._renderSublevel($node, actualNodeData, this._dataAdapter.getNodesByItems(items));
            if (!items || !items.length) {
                return
            }
            this._fireContentReadyAction();
            this._animateNodeContainer(actualNodeData, state, e, completionCallback)
        })
    },
    _loadNestedItems: function(node) {
        if (this._useCustomChildrenLoader()) {
            var publicNode = this._dataAdapter.getPublicNode(node);
            return this._loadChildrenByCustomLoader(publicNode).done(newItems => {
                if (!this._areNodesExists(newItems)) {
                    this._appendItems(newItems)
                }
            })
        }
        if (!this._isVirtualMode()) {
            return (new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_20__["Deferred"]).resolve([]).promise()
        }
        this._filter.internal = [this.option("parentIdExpr"), node.internalFields.key];
        this._dataSource.filter(this._combineFilter());
        return this._dataSource.load().done(newItems => {
            if (!this._areNodesExists(newItems)) {
                this._appendItems(newItems)
            }
        })
    },
    _areNodesExists: function(newItems, items) {
        var keyOfRootItem = this.keyOf(newItems[0]);
        var fullData = this._dataAdapter.getFullData();
        return !!this._dataAdapter.getNodeByKey(keyOfRootItem, fullData)
    },
    _appendItems: function(newItems) {
        this.option().items = this.option("items").concat(newItems);
        this._initDataAdapter()
    },
    _animateNodeContainer: function(node, state, e, completionCallback) {
        var $node = this._getNodeElement(node);
        var $nodeContainer = $node.children(".".concat(NODE_CONTAINER_CLASS));
        if (node && completionCallback && 0 === $nodeContainer.length) {
            completionCallback.resolve()
        }
        $nodeContainer.addClass(OPENED_NODE_CONTAINER_CLASS);
        var nodeHeight = Object(_core_utils_size__WEBPACK_IMPORTED_MODULE_0__["getHeight"])($nodeContainer);
        _animation_fx__WEBPACK_IMPORTED_MODULE_17__["default"].stop($nodeContainer, true);
        _animation_fx__WEBPACK_IMPORTED_MODULE_17__["default"].animate($nodeContainer, {
            type: "custom",
            duration: this.option("animationEnabled") ? 400 : 0,
            from: {
                maxHeight: state ? 0 : nodeHeight
            },
            to: {
                maxHeight: state ? nodeHeight : 0
            },
            complete: function() {
                $nodeContainer.css("maxHeight", "none");
                $nodeContainer.toggleClass(OPENED_NODE_CONTAINER_CLASS, state);
                this.setAria("expanded", state, $node);
                this.getScrollable().update();
                this._fireExpandedStateUpdatedEvent(state, node, e);
                if (completionCallback) {
                    completionCallback.resolve()
                }
            }.bind(this)
        })
    },
    _fireExpandedStateUpdatedEvent: function(isExpanded, node, e) {
        if (!this._hasChildren(node)) {
            return
        }
        var optionName = isExpanded ? "onItemExpanded" : "onItemCollapsed";
        if (Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_8__["isDefined"])(e)) {
            this._itemDXEventHandler(e, optionName, {
                node: this._dataAdapter.getPublicNode(node)
            })
        } else {
            var target = this._getNodeElement(node);
            this._itemEventHandler(target, optionName, {
                event: e,
                node: this._dataAdapter.getPublicNode(node)
            })
        }
    },
    _normalizeIconState: function($node, hasNewItems) {
        var $loadIndicator = $node.find(".".concat(NODE_LOAD_INDICATOR_CLASS));
        $loadIndicator.length && _load_indicator__WEBPACK_IMPORTED_MODULE_19__["default"].getInstance($loadIndicator).option("visible", false);
        if (hasNewItems) {
            var $icon = $node.find("." + TOGGLE_ITEM_VISIBILITY_CLASS);
            $icon.show();
            return
        }
        $node.find("." + TOGGLE_ITEM_VISIBILITY_CLASS).removeClass(TOGGLE_ITEM_VISIBILITY_CLASS);
        $node.addClass(IS_LEAF)
    },
    _emptyMessageContainer: function() {
        var scrollable = this.getScrollable();
        return scrollable ? Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(scrollable.content()) : this.callBase()
    },
    _renderContent: function() {
        var items = this.option("items");
        if (items && items.length) {
            this._contentAlreadyRendered = true
        }
        this.callBase()
    },
    _renderSelectAllItem: function($container) {
        $container = $container || this.$element().find(".".concat(NODE_CONTAINER_CLASS)).first();
        this._$selectAllItem = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])("<div>").addClass(SELECT_ALL_ITEM_CLASS);
        var value = this._dataAdapter.isAllSelected();
        this._createComponent(this._$selectAllItem, _check_box__WEBPACK_IMPORTED_MODULE_12__["default"], {
            value: value,
            text: this.option("selectAllText"),
            onValueChanged: this._onSelectAllCheckboxValueChanged.bind(this)
        });
        this._toggleSelectedClass(this._$selectAllItem, value);
        $container.before(this._$selectAllItem)
    },
    _onSelectAllCheckboxValueChanged: function(args) {
        this._toggleSelectAll(args);
        this._fireSelectAllValueChanged(args.value)
    },
    _toggleSelectAll: function(args) {
        this._dataAdapter.toggleSelectAll(args.value);
        this._updateItemsUI();
        this._fireSelectionChanged()
    },
    _renderCheckBox: function($node, node) {
        var $checkbox = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])("<div>").appendTo($node);
        this._createComponent($checkbox, _check_box__WEBPACK_IMPORTED_MODULE_12__["default"], {
            value: node.internalFields.selected,
            onValueChanged: this._changeCheckboxValue.bind(this),
            focusStateEnabled: false,
            disabled: this._disabledGetter(node)
        })
    },
    _toggleSelectedClass: function($node, value) {
        $node.toggleClass(SELECTED_ITEM_CLASS, !!value)
    },
    _toggleNodeDisabledState: function(node, state) {
        var $node = this._getNodeElement(node);
        var $item = $node.find("." + ITEM_CLASS).eq(0);
        this._dataAdapter.toggleNodeDisabledState(node.internalFields.key, state);
        $item.toggleClass(DISABLED_STATE_CLASS, !!state);
        if (this._showCheckboxes()) {
            var checkbox = this._getCheckBoxInstance($node);
            checkbox.option("disabled", !!state)
        }
    },
    _itemOptionChanged: function(item, property, value) {
        var node = this._dataAdapter.getNodeByItem(item);
        if (property === this.option("disabledExpr")) {
            this._toggleNodeDisabledState(node, value)
        }
    },
    _changeCheckboxValue: function(e) {
        var $node = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(e.element).parent("." + NODE_CLASS);
        var $item = $node.children("." + ITEM_CLASS);
        var item = this._getItemData($item);
        var node = this._getNodeByElement($item);
        var value = e.value;
        if (node && node.internalFields.selected === value) {
            return
        }
        this._updateItemSelection(value, item, e.event)
    },
    _isSingleSelection: function() {
        return "single" === this.option("selectionMode")
    },
    _isRecursiveSelection: function() {
        return this.option("selectNodesRecursive") && "single" !== this.option("selectionMode")
    },
    _isLastSelectedBranch: function(publicNode, selectedNodesKeys, deep) {
        var keyIndex = selectedNodesKeys.indexOf(publicNode.key);
        if (keyIndex >= 0) {
            selectedNodesKeys.splice(keyIndex, 1)
        }
        if (deep) {
            Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_10__["each"])(publicNode.children, function(_, childNode) {
                this._isLastSelectedBranch(childNode, selectedNodesKeys, true)
            }.bind(this))
        }
        if (publicNode.parent) {
            this._isLastSelectedBranch(publicNode.parent, selectedNodesKeys)
        }
        return 0 === selectedNodesKeys.length
    },
    _isLastRequired: function(node) {
        var selectionRequired = this.option("selectionRequired");
        var isSingleMode = this._isSingleSelection();
        var selectedNodesKeys = this.getSelectedNodeKeys();
        if (!selectionRequired) {
            return
        }
        if (isSingleMode) {
            return 1 === selectedNodesKeys.length
        } else {
            return this._isLastSelectedBranch(node.internalFields.publicNode, selectedNodesKeys.slice(), true)
        }
    },
    _updateItemSelection: function(value, itemElement, dxEvent) {
        var node = this._getNode(itemElement);
        if (!node || false === node.visible) {
            return false
        }
        if (node.internalFields.selected === value) {
            return true
        }
        if (!value && this._isLastRequired(node)) {
            if (this._showCheckboxes()) {
                var $node = this._getNodeElement(node);
                this._getCheckBoxInstance($node).option("value", true)
            }
            return false
        }
        if (value && this._isSingleSelection()) {
            var selectedKeys = this.getSelectedNodeKeys();
            Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_10__["each"])(selectedKeys, (index, key) => {
                this._dataAdapter.toggleSelection(key, false);
                this._updateItemsUI();
                this._fireItemSelectionChanged(this._getNode(key))
            })
        }
        this._dataAdapter.toggleSelection(node.internalFields.key, value);
        var isAllSelected = this._dataAdapter.isAllSelected();
        var needFireSelectAllChanged = this._selectAllEnabled() && this._$selectAllItem.dxCheckBox("instance").option("value") !== isAllSelected;
        this._updateItemsUI();
        this._fireItemSelectionChanged(node, dxEvent);
        this._fireSelectionChanged();
        if (needFireSelectAllChanged) {
            this._fireSelectAllValueChanged(isAllSelected)
        }
        return true
    },
    _fireItemSelectionChanged: function(node, dxEvent) {
        var initiator = dxEvent || this._findItemElementByItem(node.internalFields.item);
        var handler = dxEvent ? this._itemDXEventHandler : this._itemEventHandler;
        handler.call(this, initiator, "onItemSelectionChanged", {
            node: this._dataAdapter.getPublicNode(node),
            itemData: node.internalFields.item
        })
    },
    _getCheckBoxInstance: function($node) {
        return $node.children(".dx-checkbox").dxCheckBox("instance")
    },
    _updateItemsUI: function() {
        var cache = {};
        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_10__["each"])(this._dataAdapter.getData(), (_, node) => {
            var $node = this._getNodeElement(node, cache);
            var nodeSelection = node.internalFields.selected;
            if (!$node.length) {
                return
            }
            this._toggleSelectedClass($node, nodeSelection);
            this.setAria("selected", nodeSelection, $node);
            if (this._showCheckboxes()) {
                this._getCheckBoxInstance($node).option("value", nodeSelection)
            }
        });
        if (this._selectAllEnabled()) {
            var selectAllCheckbox = this._$selectAllItem.dxCheckBox("instance");
            selectAllCheckbox.option("onValueChanged", void 0);
            selectAllCheckbox.option("value", this._dataAdapter.isAllSelected());
            selectAllCheckbox.option("onValueChanged", this._onSelectAllCheckboxValueChanged.bind(this))
        }
    },
    _updateParentsState: function(node, $node) {
        if (!$node) {
            return
        }
        var parentNode = this._dataAdapter.getNodeByKey(node.internalFields.parentKey);
        var $parentNode = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])($node.parents("." + NODE_CLASS)[0]);
        if (this._showCheckboxes()) {
            var parentValue = parentNode.internalFields.selected;
            this._getCheckBoxInstance($parentNode).option("value", parentValue);
            this._toggleSelectedClass($parentNode, parentValue)
        }
        if (parentNode.internalFields.parentKey !== this.option("rootValue")) {
            this._updateParentsState(parentNode, $parentNode)
        }
    },
    _itemEventHandlerImpl: function(initiator, action, actionArgs) {
        var $itemElement = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(initiator).closest("." + NODE_CLASS).children("." + ITEM_CLASS);
        return action(Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_9__["extend"])(this._extendActionArgs($itemElement), actionArgs))
    },
    _itemContextMenuHandler: function(e) {
        this._createEventHandler("onItemContextMenu", e)
    },
    _itemHoldHandler: function(e) {
        this._createEventHandler("onItemHold", e)
    },
    _createEventHandler: function(eventName, e) {
        var node = this._getNodeByElement(e.currentTarget);
        this._itemDXEventHandler(e, eventName, {
            node: this._dataAdapter.getPublicNode(node)
        })
    },
    _itemClass: function() {
        return ITEM_CLASS
    },
    _itemDataKey: function() {
        return ITEM_DATA_KEY
    },
    _attachClickEvent: function() {
        var clickSelector = "." + this._itemClass();
        var pointerDownSelector = "." + NODE_CLASS + ", ." + SELECT_ALL_ITEM_CLASS;
        var eventName = Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_14__["addNamespace"])(_events_click__WEBPACK_IMPORTED_MODULE_5__["name"], this.NAME);
        var pointerDownEvent = Object(_events_utils_index__WEBPACK_IMPORTED_MODULE_14__["addNamespace"])(_events_pointer__WEBPACK_IMPORTED_MODULE_15__["default"].down, this.NAME);
        var $itemContainer = this._itemContainer();
        var that = this;
        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__["default"].off($itemContainer, eventName, clickSelector);
        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__["default"].off($itemContainer, pointerDownEvent, pointerDownSelector);
        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__["default"].on($itemContainer, eventName, clickSelector, (function(e) {
            that._itemClickHandler(e, Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(this))
        }));
        _events_core_events_engine__WEBPACK_IMPORTED_MODULE_3__["default"].on($itemContainer, pointerDownEvent, pointerDownSelector, (function(e) {
            that._itemPointerDownHandler(e)
        }))
    },
    _itemClickHandler: function(e, $item) {
        var itemData = this._getItemData($item);
        var node = this._getNodeByElement($item);
        this._itemDXEventHandler(e, "onItemClick", {
            node: this._dataAdapter.getPublicNode(node)
        });
        if (this.option("selectByClick") && !e.isDefaultPrevented()) {
            this._updateItemSelection(!node.internalFields.selected, itemData, e)
        }
    },
    _updateSelectionToFirstItem: function($items, startIndex) {
        var itemIndex = startIndex;
        while (itemIndex >= 0) {
            var $item = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])($items[itemIndex]);
            this._updateItemSelection(true, $item.find("." + ITEM_CLASS).get(0));
            itemIndex--
        }
    },
    _updateSelectionToLastItem: function($items, startIndex) {
        var length = $items.length;
        var itemIndex = startIndex;
        while (itemIndex < length) {
            var $item = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])($items[itemIndex]);
            this._updateItemSelection(true, $item.find("." + ITEM_CLASS).get(0));
            itemIndex++
        }
    },
    _focusInHandler: function(e) {
        this._updateFocusState(e, true);
        if (this.option("focusedElement")) {
            clearTimeout(this._setFocusedItemTimeout);
            this._setFocusedItemTimeout = setTimeout(() => {
                this._setFocusedItem(Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(this.option("focusedElement")))
            });
            return
        }
        var $activeItem = this._getActiveItem();
        this.option("focusedElement", Object(_core_element__WEBPACK_IMPORTED_MODULE_11__["getPublicElement"])($activeItem.closest("." + NODE_CLASS)))
    },
    _setFocusedItem: function($target) {
        if (!$target || !$target.length) {
            return
        }
        if (!$target.children().hasClass(DISABLED_STATE_CLASS)) {
            this.callBase($target)
        }
    },
    _itemPointerDownHandler: function(e) {
        if (!this.option("focusStateEnabled")) {
            return
        }
        var $target = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(e.target).closest("." + NODE_CLASS + ", ." + SELECT_ALL_ITEM_CLASS);
        if (!$target.length) {
            return
        }
        var itemElement = $target.hasClass(DISABLED_STATE_CLASS) ? null : $target;
        this.option("focusedElement", Object(_core_element__WEBPACK_IMPORTED_MODULE_11__["getPublicElement"])(itemElement))
    },
    _findNonDisabledNodes: function($nodes) {
        return $nodes.not((function() {
            return Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(this).children("." + ITEM_CLASS).hasClass(DISABLED_STATE_CLASS)
        }))
    },
    _moveFocus: function(location, e) {
        var FOCUS_UP = "up";
        var FOCUS_DOWN = "down";
        var FOCUS_FIRST = "first";
        var FOCUS_LAST = "last";
        var FOCUS_LEFT = this.option("rtlEnabled") ? "right" : "left";
        var FOCUS_RIGHT = this.option("rtlEnabled") ? "left" : "right";
        this.$element().find(".".concat(NODE_CONTAINER_CLASS)).each((function() {
            _animation_fx__WEBPACK_IMPORTED_MODULE_17__["default"].stop(this, true)
        }));
        var $items = this._findNonDisabledNodes(this._nodeElements());
        if (!$items || !$items.length) {
            return
        }
        switch (location) {
            case FOCUS_UP:
                var $prevItem = this._prevItem($items);
                this.option("focusedElement", Object(_core_element__WEBPACK_IMPORTED_MODULE_11__["getPublicElement"])($prevItem));
                var prevItemElement = this._getNodeItemElement($prevItem);
                this.getScrollable().scrollToElement(prevItemElement);
                if (e.shiftKey && this._showCheckboxes()) {
                    this._updateItemSelection(true, prevItemElement)
                }
                break;
            case FOCUS_DOWN:
                var $nextItem = this._nextItem($items);
                this.option("focusedElement", Object(_core_element__WEBPACK_IMPORTED_MODULE_11__["getPublicElement"])($nextItem));
                var nextItemElement = this._getNodeItemElement($nextItem);
                this.getScrollable().scrollToElement(nextItemElement);
                if (e.shiftKey && this._showCheckboxes()) {
                    this._updateItemSelection(true, nextItemElement)
                }
                break;
            case FOCUS_FIRST:
                var $firstItem = $items.first();
                if (e.shiftKey && this._showCheckboxes()) {
                    this._updateSelectionToFirstItem($items, $items.index(this._prevItem($items)))
                }
                this.option("focusedElement", Object(_core_element__WEBPACK_IMPORTED_MODULE_11__["getPublicElement"])($firstItem));
                this.getScrollable().scrollToElement(this._getNodeItemElement($firstItem));
                break;
            case FOCUS_LAST:
                var $lastItem = $items.last();
                if (e.shiftKey && this._showCheckboxes()) {
                    this._updateSelectionToLastItem($items, $items.index(this._nextItem($items)))
                }
                this.option("focusedElement", Object(_core_element__WEBPACK_IMPORTED_MODULE_11__["getPublicElement"])($lastItem));
                this.getScrollable().scrollToElement(this._getNodeItemElement($lastItem));
                break;
            case FOCUS_RIGHT:
                this._expandFocusedContainer();
                break;
            case FOCUS_LEFT:
                this._collapseFocusedContainer();
                break;
            default:
                this.callBase.apply(this, arguments);
                return
        }
    },
    _getNodeItemElement: function($node) {
        return $node.find("." + ITEM_CLASS).get(0)
    },
    _nodeElements: function() {
        return this.$element().find("." + NODE_CLASS).not(":hidden")
    },
    _expandFocusedContainer: function() {
        var $focusedNode = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(this.option("focusedElement"));
        if (!$focusedNode.length || $focusedNode.hasClass(IS_LEAF)) {
            return
        }
        var $node = $focusedNode.find(".".concat(NODE_CONTAINER_CLASS)).eq(0);
        if ($node.hasClass(OPENED_NODE_CONTAINER_CLASS)) {
            var $nextItem = this._nextItem(this._findNonDisabledNodes(this._nodeElements()));
            this.option("focusedElement", Object(_core_element__WEBPACK_IMPORTED_MODULE_11__["getPublicElement"])($nextItem));
            this.getScrollable().scrollToElement(this._getNodeItemElement($nextItem));
            return
        }
        var node = this._getNodeByElement($focusedNode.children("." + ITEM_CLASS));
        this._toggleExpandedState(node, true)
    },
    _getClosestNonDisabledNode: function($node) {
        do {
            $node = $node.parent().closest("." + NODE_CLASS)
        } while ($node.children(".dx-treeview-item.dx-state-disabled").length);
        return $node
    },
    _collapseFocusedContainer: function() {
        var $focusedNode = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(this.option("focusedElement"));
        if (!$focusedNode.length) {
            return
        }
        var nodeElement = $focusedNode.find(".".concat(NODE_CONTAINER_CLASS)).eq(0);
        if (!$focusedNode.hasClass(IS_LEAF) && nodeElement.hasClass(OPENED_NODE_CONTAINER_CLASS)) {
            var node = this._getNodeByElement($focusedNode.children("." + ITEM_CLASS));
            this._toggleExpandedState(node, false)
        } else {
            var collapsedNode = this._getClosestNonDisabledNode($focusedNode);
            collapsedNode.length && this.option("focusedElement", Object(_core_element__WEBPACK_IMPORTED_MODULE_11__["getPublicElement"])(collapsedNode));
            this.getScrollable().scrollToElement(this._getNodeItemElement(collapsedNode))
        }
    },
    _encodeString: function(value) {
        return Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_8__["isString"])(value) ? encodeURI(value) : value
    },
    _decodeString: function(value) {
        return Object(_core_utils_type__WEBPACK_IMPORTED_MODULE_8__["isString"])(value) ? decodeURI(value) : value
    },
    getScrollable: function() {
        return this._scrollable
    },
    updateDimensions: function() {
        var deferred = new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_20__["Deferred"];
        var scrollable = this.getScrollable();
        if (scrollable) {
            scrollable.update().done(() => {
                deferred.resolveWith(this)
            })
        } else {
            deferred.resolveWith(this)
        }
        return deferred.promise()
    },
    selectItem: function(itemElement) {
        return this._updateItemSelection(true, itemElement)
    },
    unselectItem: function(itemElement) {
        return this._updateItemSelection(false, itemElement)
    },
    expandItem: function(itemElement) {
        return this._toggleExpandedState(itemElement, true)
    },
    collapseItem: function(itemElement) {
        return this._toggleExpandedState(itemElement, false)
    },
    getNodes: function() {
        return this._dataAdapter.getTreeNodes()
    },
    getSelectedNodes: function() {
        return this.getSelectedNodeKeys().map(key => {
            var node = this._dataAdapter.getNodeByKey(key);
            return this._dataAdapter.getPublicNode(node)
        })
    },
    getSelectedNodesKeys: function() {
        _widget_ui_errors__WEBPACK_IMPORTED_MODULE_21__["default"].log("W0002", "dxTreeView", "getSelectedNodesKeys", "20.1", "Use the 'getSelectedNodeKeys' method instead");
        return this.getSelectedNodeKeys()
    },
    getSelectedNodeKeys: function() {
        return this._dataAdapter.getSelectedNodesKeys()
    },
    selectAll: function() {
        if (this._selectAllEnabled()) {
            this._$selectAllItem.dxCheckBox("instance").option("value", true)
        } else {
            this._toggleSelectAll({
                value: true
            })
        }
    },
    unselectAll: function() {
        if (this._selectAllEnabled()) {
            this._$selectAllItem.dxCheckBox("instance").option("value", false)
        } else {
            this._toggleSelectAll({
                value: false
            })
        }
    },
    expandAll: function() {
        var dataAdapter = this._dataAdapter;
        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_10__["each"])(dataAdapter.getData(), (_, node) => dataAdapter.toggleExpansion(node.internalFields.key, true));
        this.repaint()
    },
    collapseAll: function() {
        Object(_core_utils_iterator__WEBPACK_IMPORTED_MODULE_10__["each"])(this._dataAdapter.getExpandedNodesKeys(), function(_, key) {
            this._toggleExpandedState(key, false)
        }.bind(this))
    },
    scrollToItem: function(keyOrItemOrElement) {
        var node = this._getNode(keyOrItemOrElement);
        if (!node) {
            return (new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_20__["Deferred"]).reject().promise()
        }
        var nodeKeysToExpand = [];
        var parentNode = node.internalFields.publicNode.parent;
        while (null != parentNode) {
            if (!parentNode.expanded) {
                nodeKeysToExpand.push(parentNode.key)
            }
            parentNode = parentNode.parent
        }
        var scrollCallback = new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_20__["Deferred"];
        this._expandNodes(nodeKeysToExpand.reverse()).always(() => {
            var $element = this._getNodeElement(node);
            if ($element && $element.length) {
                this.scrollToElementTopLeft($element.get(0));
                scrollCallback.resolve()
            } else {
                scrollCallback.reject()
            }
        });
        return scrollCallback.promise()
    },
    scrollToElementTopLeft: function(targetElement) {
        var scrollable = this.getScrollable();
        var {
            scrollDirection: scrollDirection,
            rtlEnabled: rtlEnabled
        } = this.option();
        var targetLocation = {
            top: 0,
            left: 0
        };
        var relativeOffset = Object(_renovation_ui_scroll_view_utils_get_relative_offset__WEBPACK_IMPORTED_MODULE_23__["getRelativeOffset"])(_renovation_ui_scroll_view_common_consts__WEBPACK_IMPORTED_MODULE_24__["SCROLLABLE_CONTENT_CLASS"], targetElement);
        if (scrollDirection !== _renovation_ui_scroll_view_common_consts__WEBPACK_IMPORTED_MODULE_24__["DIRECTION_VERTICAL"]) {
            var containerElement = Object(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"])(scrollable.container()).get(0);
            targetLocation.left = rtlEnabled ? relativeOffset.left + targetElement.offsetWidth - containerElement.clientWidth : relativeOffset.left
        }
        if (scrollDirection !== _renovation_ui_scroll_view_common_consts__WEBPACK_IMPORTED_MODULE_24__["DIRECTION_HORIZONTAL"]) {
            targetLocation.top = relativeOffset.top
        }
        scrollable.scrollTo(targetLocation)
    },
    _expandNodes: function(keysToExpand) {
        if (!keysToExpand || 0 === keysToExpand.length) {
            return (new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_20__["Deferred"]).resolve().promise()
        }
        var resultCallback = new _core_utils_deferred__WEBPACK_IMPORTED_MODULE_20__["Deferred"];
        var callbacksByNodes = keysToExpand.map(key => this.expandItem(key));
        _core_utils_deferred__WEBPACK_IMPORTED_MODULE_20__["when"].apply(_core_renderer__WEBPACK_IMPORTED_MODULE_1__["default"], callbacksByNodes).done(() => resultCallback.resolve()).fail(() => resultCallback.reject());
        return resultCallback.promise()
    },
    _dispose: function() {
        this.callBase();
        clearTimeout(this._setFocusedItemTimeout)
    }
});
/* harmony default export */ __webpack_exports__["default"] = (TreeViewBase);


/***/ }),

/***/ "./node_modules/devextreme/esm/ui/tree_view/ui.tree_view.search.js":
/*!*************************************************************************!*\
  !*** ./node_modules/devextreme/esm/ui/tree_view/ui.tree_view.search.js ***!
  \*************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _core_renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/renderer */ "./node_modules/devextreme/esm/core/renderer.js");
/* harmony import */ var _core_component_registrator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/component_registrator */ "./node_modules/devextreme/esm/core/component_registrator.js");
/* harmony import */ var _widget_ui_search_box_mixin__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../widget/ui.search_box_mixin */ "./node_modules/devextreme/esm/ui/widget/ui.search_box_mixin.js");
/* harmony import */ var _text_box__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../text_box */ "./node_modules/devextreme/esm/ui/text_box.js");
/* harmony import */ var _core_utils_extend__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/utils/extend */ "./node_modules/devextreme/esm/core/utils/extend.js");
/* harmony import */ var _ui_tree_view_base__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ui.tree_view.base */ "./node_modules/devextreme/esm/ui/tree_view/ui.tree_view.base.js");
/**
 * DevExtreme (esm/ui/tree_view/ui.tree_view.search.js)
 * Version: 21.2.7
 * Build date: Mon Apr 11 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */






_widget_ui_search_box_mixin__WEBPACK_IMPORTED_MODULE_2__["default"].setEditorClass(_text_box__WEBPACK_IMPORTED_MODULE_3__["default"]);
var WIDGET_CLASS = "dx-treeview";
var NODE_CONTAINER_CLASS = "".concat(WIDGET_CLASS, "-node-container");
var TreeViewSearch = _ui_tree_view_base__WEBPACK_IMPORTED_MODULE_5__["default"].inherit(_widget_ui_search_box_mixin__WEBPACK_IMPORTED_MODULE_2__["default"]).inherit({
    _addWidgetPrefix: function(className) {
        return "".concat(WIDGET_CLASS, "-").concat(className)
    },
    _optionChanged: function(args) {
        switch (args.name) {
            case "searchValue":
                if (this._showCheckboxes() && this._isRecursiveSelection()) {
                    this._removeSelection()
                }
                this._initDataAdapter();
                this._updateSearch();
                this._repaintContainer();
                this.option("focusedElement", null);
                break;
            case "searchExpr":
                this._initDataAdapter();
                this.repaint();
                break;
            case "searchMode":
                this.option("expandNodesRecursive") ? this._updateDataAdapter() : this._initDataAdapter();
                this.repaint();
                break;
            default:
                this.callBase(args)
        }
    },
    _updateDataAdapter: function() {
        this._setOptionWithoutOptionChange("expandNodesRecursive", false);
        this._initDataAdapter();
        this._setOptionWithoutOptionChange("expandNodesRecursive", true)
    },
    _getDataAdapterOptions: function() {
        return Object(_core_utils_extend__WEBPACK_IMPORTED_MODULE_4__["extend"])(this.callBase(), {
            searchValue: this.option("searchValue"),
            searchMode: this.option("searchMode") || "contains",
            searchExpr: this.option("searchExpr")
        })
    },
    _updateSearch: function() {
        if (this._searchEditor) {
            var editorOptions = this._getSearchEditorOptions();
            this._searchEditor.option(editorOptions)
        }
    },
    _repaintContainer: function() {
        var $container = this.$element().find(".".concat(NODE_CONTAINER_CLASS)).first();
        var rootNodes;
        if ($container.length) {
            $container.empty();
            rootNodes = this._dataAdapter.getRootNodes();
            this._renderEmptyMessage(rootNodes);
            this._renderItems($container, rootNodes);
            this._fireContentReadyAction()
        }
    },
    _itemContainer: function(isSearchMode) {
        if (this._scrollable && isSearchMode) {
            return Object(_core_renderer__WEBPACK_IMPORTED_MODULE_0__["default"])(this._scrollable.content())
        }
        return this.callBase()
    },
    _addWidgetClass: function() {
        this.$element().addClass(this._widgetClass())
    },
    _clean: function() {
        this.callBase();
        this._removeSearchBox()
    }
});
Object(_core_component_registrator__WEBPACK_IMPORTED_MODULE_1__["default"])("dxTreeView", TreeViewSearch);
/* harmony default export */ __webpack_exports__["default"] = (TreeViewSearch);


/***/ })

}]);
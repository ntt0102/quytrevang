function f(){return{contracts:[],interestRate:0,principalMin:0,holdWeeksMin:0,transferInfo:null,updatedAt:null}}const d={contracts:t=>t.contracts,interestRate:t=>t.interestRate,principalMin:t=>t.principalMin,holdWeeksMin:t=>t.holdWeeksMin,transferInfo:t=>t.transferInfo},u={fetch({commit:t,dispatch:e,getters:c,state:s,rootGetters:o},r=!0){return moment().diff(s.updatedAt,"seconds")<3?!1:new Promise((n,i)=>{axios.get("contract?isOld="+r).then(a=>{t("setState",a.data),n()})})},save({commit:t,dispatch:e,getters:c,state:s,rootGetters:o},r){return new Promise((n,i)=>{axios.post("contract",r).then(a=>{e("fetch"),e("Auth/fetch",!0,{root:!0}),n(a.data)})})},payingContract({commit:t,dispatch:e,getters:c,state:s,rootGetters:o},r){return new Promise((n,i)=>{axios.post("contract/paying",r,{headers:{"Content-Type":"multipart/form-data"}}).then(a=>{a.data.isOk&&e("fetch"),n(a.data.isOk)})})},withdrawingContract({commit:t,dispatch:e,getters:c,state:s},o){return new Promise((r,n)=>{axios.post("contract/withdrawing",o).then(i=>{i.data.isOk&&e("fetch"),r(i.data.isOk)})})},resetState({commit:t}){t("resetState")}},p={setState(t,e){t.contracts=e.contracts,t.interestRate=e.interestRate,t.principalMin=e.principalMin,t.holdWeeksMin=e.holdWeeksMin,t.transferInfo=e.transferInfo,t.updatedAt=moment()},resetState(t){t=Object.assign(t,f())}},h={namespaced:!0,state:f,getters:d,actions:u,mutations:p};export{h as u};

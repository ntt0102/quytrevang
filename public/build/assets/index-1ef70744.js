function m(){return{}}const h={},g={backupDatabase({commit:e,dispatch:r,getters:o,state:n,rootGetters:i},s){return new Promise((a,c)=>{axios.post("settings/database/backup",s).then(t=>{if(t.data.isOk==!1)a(!1);else{if(s.download){var u=window.URL.createObjectURL(new Blob([t.data])),d=document.createElement("a");d.href=u;const p=t.headers["content-disposition"].split("=").pop();d.setAttribute("download",p),document.body.appendChild(d),d.click()}a(!0)}})})},restoreDatabase({commit:e,dispatch:r,getters:o,state:n,rootGetters:i},s){return new Promise((a,c)=>{axios.post("settings/database/restore",s,{headers:{"Content-Type":"multipart/form-data"}}).then(t=>{a(t.data.isOk),t.data.isOk&&r("Auth/fetch",!0,{root:!0})})})},runCommand({commit:e,dispatch:r,getters:o,state:n,rootGetters:i},s){return new Promise((a,c)=>{axios.post("settings/command/run",{commands:s}).then(t=>{a(t.data),t.data.isOk&&r("Auth/fetch",!0,{root:!0})})})},sendNotification({commit:e,dispatch:r,getters:o,state:n,rootGetters:i},s){return new Promise((a,c)=>{axios.post("settings/notification/send",s).then(t=>{a()})})},fetchLog({commit:e,dispatch:r,getters:o,state:n,rootGetters:i},s){return new Promise((a,c)=>{axios.get("settings/log").then(t=>{a(t.data)})})},resetState({commit:e}){e("resetState")}},f={setState(e,r){e.parameters=r.parameters},resetState(e){e=Object.assign(e,m())}},b={namespaced:!0,state:m,getters:h,actions:g,mutations:f};export{b as a};
